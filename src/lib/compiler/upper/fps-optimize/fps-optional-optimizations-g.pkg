## fps-optional-optimizations-g.pkg   -- Execute optional optimizations per config variable  cg::fps_optional_optimizations

# Compiled by:
#     src/lib/compiler/core.make6



# This file is a driver which executes optional
# optimizations in the order specified by the
#
#     cg::fps_optional_optimizations
#
# configuration parameter.  For the default value
# of this parameter see
#
#     src/lib/compiler/toplevel/main/control-mc.pkg
#
# or at the Linux commandline do
#
#     linux$ my
#     eval: show_control "cg::fps_optional_optimizations";
#
# You can set this parameter via (say)
#     eval: set_control "cg::fps_optional_optimizations" "zeroexpand, uncurry, last_contract";
#
# Available optimizations are:
#
#     first_contract
#     eta
#     uncurry
#     split_known_escaping_functions
#     last_contract
#     cycle_expand
#     contract
#     flatten
#     zeroexpand
#     expand
#     print
#
# We get invoked from the
#
#     src/lib/compiler/upper/main/backend-g.pkg
#
# function
#
#     translate_anormal_to_binary()
#
# which uses us in the transform sequence
#
#     translate_anormal_to_fps()
#     fps_preoptimization_transform()
#     fps_optional_optimizations()
#


# For context, see the comments in
#
#     src/lib/compiler/upper/highcode/highcode.api



api Fps_Optional_Optimizations {

    reduce
        :
        ((fate_passing_style::Function, Null_Or( unsafe::unsafe_chunk::Chunk ), Bool)) 
	->
        fate_passing_style::Function;
};

# We are invoked from:
#
#     src/lib/compiler/upper/main/backend-g.pkg
										# Machine_Properties		is from   src/lib/compiler/codegen/main/machine-properties.api
generic package fps_optional_optimizations_g (

    machine_properties: Machine_Properties					# Typically 				  src/lib/compiler/codegen/x86/x86-machine-properties.pkg

)
: (weak)  Fps_Optional_Optimizations						# Fps_Optional_Optimizations	is from   src/lib/compiler/upper/fps-optimize/fps-optional-optimizations-g.pkg

{
    package cg             = controls::cg;					# controls			is from   src/lib/compiler/toplevel/main/controls.pkg
    package eta            = eta;
    package contract       = contract_g(       machine_properties );		# contract_g			is from   src/lib/compiler/upper/fps-optimize/contract-g.pkg
    package do_fn_inlining = do_fn_inlining_g( machine_properties );		# do_fn_inlining_g		is from   src/lib/compiler/upper/fps-optimize/do-fn-inlining-g.pkg
    package flatten        = flatten_g(        machine_properties );		# flatten_g			is from   src/lib/compiler/upper/fps-optimize/flatten-g.pkg
    package uncurry        = uncurry_g(        machine_properties );		# uncurry_g			is from   src/lib/compiler/upper/fps-optimize/uncurry-g.pkg
    package ei             = eliminate_infs;					# eliminate_infs		is from   src/lib/compiler/upper/fps-optimize/eliminate-infs.pkg

    package split_known_escaping_functions
        =
        split_known_escaping_functions_g( machine_properties );			# split_known_escaping_functions_g	is from   src/lib/compiler/upper/fps-optimize/split-known-escaping-functions-g.pkg

    say = controls::print::say;

    # Obsolete table: used by fps_optional_optimizations as a dummy template 
    #
    exception ZZZ;

    my dummy_table:   int_hash_table::Hash_Table( anormal::Highcode_Type )
        =
	int_hash_table::make_table (32, ZZZ); 

    # The main function reduce:
    #
    fun reduce (function, _, after_closure)
	= 
	{
	    # NOTE: The third argument to reduce is currently ignored.
	    # It used to be used for reopening closures.

	    table = dummy_table;
	    debug = *cg::debugcps; #  FALSE 

	    fun debugprint s = if debug  say s; fi;
	    fun debugflush () = if debug  controls::print::flush(); fi;

	    clicked = REF 0;

	    fun click (s: String)
                =
                {   debugprint s;
                    clicked := *clicked+1;
                };

	    cpssize = REF 0;

	    pr_c
                = 
		pr_fn (controls::cg::printit, prettyprint_fps::print_fps_function)
                where
	            fun pr_fn (flag, print_e) s e
                        =
		        if *flag
                            say ("\n\n[After " + s + " ...]\n\n");
                            print_e  e;
                            e;
		        else
                            e;
                        fi;
	        end;

	    fun contract last f
                = 
	        {   f' = { clicked := 0;
			   contract::contract { function=>f, table, click,
					      last, size=>cpssize };
                         };

		    apply debugprint ["Contract stats: FPS Size = ", int::to_string *cpssize,
				  ", clicks = ", int::to_string *clicked, "\n"];
		    f';
	      };

	    # Dropargs are turned off in first_contract
            # to ban unsafe eta reduction:
            #
	    fun first_contract f
                =  
	        {   dpargs = *cg::dropargs;

		    f' = { clicked := 0; cg::dropargs := FALSE;
			    contract::contract { function=>f, table, click,
					      last=>FALSE, size=>cpssize };
                         };

		    apply debugprint ["Contract stats: FPS Size = ", int::to_string *cpssize,
				  ", clicks = ", int::to_string *clicked, "\n"];

		    cg::dropargs := dpargs;

		    f';
	      };

	    # Certain contractions are prohibited 
            # in the last contract phase:
	    #
	    fun last_contract f
                = 
	        {   f' = { clicked := 0;
			    contract::contract { function=>f, table, click,
					      last=>TRUE, size=>cpssize };
                         };

		    apply debugprint ["Contract stats: FPS Size = ", int::to_string *cpssize,
				  ", clicks = ", int::to_string *clicked, "\n"];

		    f';
	        };

	    fun expand (f, n, unroll)
		=
		{   clicked := 0;

		    if   (not *cg::beta_expand)
			 f;
		    else
			 f' = do_fn_inlining::do_fn_inlining { function=>f, click, bodysize=>n,
					       after_closure, table,
					       unroll, do_headers=>TRUE };
			 apply debugprint ["Expand stats: clicks = ", int::to_string *clicked, "\n"];
			 f';
		    fi;
		};

	    fun zeroexpand f
                =
                do_fn_inlining::do_fn_inlining { function=>f, click, bodysize=>0,
					     after_closure, table,
					     unroll=>FALSE, do_headers=>FALSE };

	    fun flatten f
		=
		{   clicked := 0;

		    if   (not *cg::flattenargs)

			 f;
		    else
			 f' = flatten::flatten { function=>f, table, click };
			 apply debugprint ["Flatten stats: clicks = ", int::to_string *clicked, "\n"];
			 f';
		    fi;
		};

	    fun unroll_contract (f, n)
		=
		{   f' =  expand (f, n, TRUE);
		    c  =  *clicked;

		    if   (c > 0   )   (c, contract TRUE f');
				 else   (c, f');   fi;
		};

	    fun expand_flatten_contract (f, n)
		=
		{   f1 =  expand (f, n, FALSE);
		    c1 =  *clicked;
		    f2 =  flatten f1;
		    c2 =  *clicked;
		    c  =  c1+c2;

		    if   (c > 0   )   (c, contract FALSE f2);
				 else   (c, f2);  fi;
	      };

	    fun eta f
		=
		{   clicked := 0;

		    if   (not *cg::eta)
			 f;
		    else
			 f' = eta::eta { function=>f, click };
			 apply debugprint ["Eta stats: clicks = ", int::to_string *clicked, "\n" ];
			 f';
		    fi;
		};

	    fun uncurry f
		=
		if after_closure
		     f;
		else 
		     clicked := 0;

		     if   (not *cg::uncurry)
			  f;
		     else
			  f' = uncurry::split_known_escaping_functions { function=>f, table, click };
			  apply debugprint [ "Uncurry stats: clicks = ", int::to_string *clicked, "\n" ];
			  f';
		     fi;
		fi;

	    fun split_known_escaping_functions f
		=
		{   clicked := 0;

		    if   (not *cg::split_known_escaping_functions)
			 f;
		    else
			 f' = split_known_escaping_functions::split_known_escaping_functions { function=>f, table, click };

			 apply
			     debugprint
			     ["Etasplit stats: clicks = ", int::to_string *clicked, "\n"];
			 f';
		    fi;
		};


	    fun lambdaprop x = x;
		   /* if *cg::lambdaprop then (debugprint "\nLambdaprop:"; CfUse::hoist x)
					else x */ 

	    bodysize = *cg::bodysize;
	    rounds = *cg::rounds;
	    reducemore = *cg::reducemore;


	    # Note the parameter k starts at rounds..0 
	    #
	    fun linear_decrease k
		=
		(bodysize * k) / rounds;

	    /*** NOT USED ***
	    fun double_linear k = (bodysize*2*k div rounds) - bodysize
	    fun cosine_decrease k = 
		   float::trunc (real bodysize * (math::cos (1.5708*(1.0 - real k / real rounds))))
	    ***/


	    # This function is just hacked up and should be tuned someday  XXX BUGGO FIXME
	    #
	    fun cycle (0, TRUE,  func) => func;
		cycle (0, FALSE, func) => unroll func;

		cycle (k, unrolled, func)
		    => 
		    {   func = lambdaprop func;

			my (c, func)
			    =
			    if (*cg::beta_expand or *cg::flattenargs)
				 expand_flatten_contract (func, linear_decrease k);
			    else (0, func);
                            fi;

			#  prC "cycle_contract" func 

		       if (c * 1000 <= *cpssize * reducemore)
			    if unrolled  func;
					else unroll func;fi;
		       else cycle (k - 1, unrolled, func);fi;
		   };
	    end 

	    also
	    fun unroll func
		=
		{   my (c, func') = unroll_contract (func, bodysize);

		    c > 0   ??   cycle (rounds, TRUE, func')
			    ::	 func';
		};

	    if (rounds < 0)

		 function;
	    else
		 fun do ("first_contract", f)                 => first_contract f;
		     do ("eta", f)	                      => eta f;
		     do ("uncurry", f)	                      => uncurry f;
		     do ("split_known_escaping_functions", f) => split_known_escaping_functions f;
		     do ("last_contract", f)                  => last_contract f;
		     do ("cycle_expand", f)                   => cycle (rounds, not *cg::unroll, f);
		     do ("contract", f)                       => contract FALSE f;
		     do ("flatten", f)                        => flatten f;
		     do ("zeroexpand", f)                     => zeroexpand f;
		     do ("expand", f)                         => expand (f, bodysize, FALSE);
		     do ("print", f)	                      => { prettyprint_fps::print_fps_function f;   f; };
		     do (p, f)                                => { say("\nUnknown fps phase '" + p + "'\n");    f; };
		 end;

		 optimized
		     =
		     fold_left do function *cg::fps_optional_optimizations;

	#                  function1 = first_contract function 
	#                  function2 = eta function1 
	#                  function3 = uncurry function2 
	#                  function4 = split_known_escaping_functions function3 
	#                  function5 = cycle (rounds, not *cg::unroll, function4) 
	#                  function6 = eta function5 /* ZSH added this new phase */ 
	#                  function7 = last_contract function6 
	#                  my optimized function7 


		 ei::eliminate
		     { function  =>  optimized,
		       mk_kvar   =>  highcode_var::make_highcode_variable,

		       mk_i32var =>  fn ()
					 =
					 {   v = highcode_var::make_highcode_variable ();

					     int_hash_table::set
						 table
						 (v, highcode::ltc_int32);

					     v;
					 }
		     };
	   fi
	   before
	       {   debugprint "\n";
		   debugflush();
	       };

	};		#  fun reduce 
};			#  generic package fps_optional_optimizations_g 


## Copyright 1989 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
