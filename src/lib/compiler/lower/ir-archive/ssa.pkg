#
# SSA placement module.  This is the algorithm from Cytron et al.'s
# TOPLAS paper.  This module is kept generic so that we can also use it
# to compute sparse evaluation graphs, factored redef/use chains (of Wolfe)
# etc.
#
# This implementation uses Sreedhar et al.'s DJ-graph to compute
# the iterated dominance frontier, which should be slightly faster
# than the default implementation.
#
# For the stack of renamed variables, we use the scheme proposed
# by Briggs, Cooper, Harvey and Simpson in Software Practice & Experience
# 1988.  (Actually we don't)
#
# -- Allen Leung



###             "Applicants must also have extensive knowledge of UNIX,
###              although they should have sufficiently good programming
###              taste to not consider this an achievement."
###
###                                       -- MIT job advertisement


generic package StaticSingleAssignmentForm
   (Dom:  Dominator_Tree) : STATIC_SINGLE_ASSIGNMENT_FORM =
pkg
   package dom     = Dom
   package g       = graph
   package a       = rw_vector

   type var = Int
   type phi = var * var * List( var )
   type renamer = { defs:  List( var ), uses: List( var ) } ->
                  { defs:  List( var ), uses: List( var ) }
   type copy    = { dst:  List( var ), src:  List( var ) } -> Void

   package dj = DJGraph (Dom)  

   fun apply f = 
   let fun g [] = ()
         | g (x . xs) = (f x; g xs)
   in  g end

   /*
    * Place join nodes at the iterated dominance frontier of def_sites (v)
    * that is live.
    */
   fun place_joins (Dom as g::GRAPH dom) 
       { max_var=V, defs, is_live } =
   let N           = dom.capacity ()
       my g::GRAPH cfg = Dom::cfg Dom
       def_sites   = a::rw_vector (V,[]) #  indexed by var 
       phis        = a::rw_vector (N,[]) #  indexed by block id 

       #  Compute the def sites of all variables 
       cfg.forall_nodes
                (fn (n, block) =>
                   apply (fn v => a::update (def_sites, v, n . a::sub (def_sites, v)))
                       (defs (n, block))
                )
       #  Compute phi placements for a variable 
       IDFs = dj::IDFs Dom
       fun place_phi (v,[])        = ()
         | place_phi (v, def_sites) = 
           let fun place_all [] = ()
                 | place_all (Y . Ys) = 
                   (if is_live (v, Y) then
                       a::update (phis, Y, (v, v,[]) . a::sub (phis, Y))
                     
                    place_all Ys)
           in   place_all (IDFs def_sites)
           end

       a::keyed_apply place_phi (def_sites, 0, NULL)
   in  phis
   end

   /*
    *  Rename variables and compute the ssa form
    */
   fun compute_ssa (Dom as g::GRAPH dom) 
          { max_var=V, defs, is_live, rename_statement, insert_phi, rename_var } =
   let N           = dom.capacity ()
       my g::GRAPH cfg = Dom::cfg Dom
       my [ENTRY]     = dom.entries ()
       phis        = place_joins Dom { max_var=V, defs=defs, is_live=is_live }
       stacks      = a::rw_vector (V,[])  #  indexed by var 
       in_edges    = a::rw_vector (N,[])

           #  Look up the current renaming of v 
       fun lookup v = 
           case a::sub (stacks, v) of 
             v' . _ => v'
           | _     => v

           #  Retract one entry of v 
       fun pop v = case a::sub (stacks, v) of _ . l => a::update (stacks, v, l)

       fun search X =
       let X' = cfg.node_info X
           old_defs = REF []

           fun rename_use v = 
           if v < 0 then v
           else
           let vs = a::sub (stacks, v)
               v' = case vs of v' . _ => v' | _ => v
           in  v'
           end

           fun rename_uses [] = []
             | rename_uses (v . vs) = rename_use v . rename_uses vs

               #  rename a definition of v 
           fun rename_def v =
           let v' = rename_var v
               vs = a::sub (stacks, v)
           in  a::update (stacks, v, v' . vs);
               old_defs := v . *old_defs;
               v'
           end

           fun rename_defs [] = []
             | rename_defs (v . vs) = rename_def v . rename_defs vs

           fun copy_def (v, v') =
               (a::update (stacks, v, v' . a::sub (stacks, v));
                old_defs := v . *old_defs)

               #  parallel copy 
           fun copy { dst, src } =
               paired_lists::apply copy_def (dst, rename_uses src)

               /* rename statement of the form defs := uses in block X 
                * We must rename the uses first!!! 
                */
           fun rename { defs, uses } =
           let uses' = rename_uses uses
               defs' = rename_defs defs
           in  { defs=defs', uses=uses'}
           end

               /* rename the definition of phi functions */ 
           fun rename_phi_def X =
           let X_phis = a::sub (phis, X)
               fun rn [] = []
                 | rn((v', v, uses) . rest) = (v', rename_def v, uses) . rn rest
               X_phis = rn X_phis
           in  a::update (phis, X, X_phis) 
           end

               /* rename the uses of phi functions */ 
           fun rename_phi_use X =
           let out_edges = cfg.out_edges X
               fun rename_phi_of_Y (e as (X, Y, _)) =
               let Y_phis = a::sub (phis, Y)
                   fun insert_uses [] = []
                     | insert_uses((v', v, uses) . rest) = 
                         (v', v, rename_use v' . uses) . insert_uses rest
               in  a::update (in_edges, Y, e . a::sub (in_edges, Y));
                   a::update (phis, Y, insert_uses Y_phis)
               end
           in  apply rename_phi_of_Y out_edges
           end

       in
           rename_phi_def X;
           rename_statement { rename=rename, copy=copy } (X, X');    
           rename_phi_use X;
           apply search (dom.next X);
           apply pop *old_defs
       end
       
          /* place phis */ 
       fun place_phi (B as (b, _)) = 
            insert_phi { block=B, in_edges=a::sub (in_edges, b), phis=a::sub (phis, b) }
           
   in
       search ENTRY;
       cfg.forall_nodes place_phi
   end
                         
end

