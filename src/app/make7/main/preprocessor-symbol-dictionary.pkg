## preprocessor-symbol-dictionary.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



# Implementation of dictionaries for make7 "preprocessor" variables.



api Preprocessor_Symbol_Dictionary {

    Dictionary;

    get:  Dictionary
              ->
              String
              ->
              Null_Or( Int );

    empty:  Dictionary;

    define:  ( Dictionary,
               String,
               Null_Or( Int )
             )
             ->
             Dictionary;

    default:  { architecture:  String,
		big_endian:    Bool,
		size:          Int,
		os:            host_info::Os_Kind,
		version:       List( Int ),
		extra_symbols: List( String )
              }
	      ->
              Dictionary;
};

package preprocessor_symbol_dictionary
:
Preprocessor_Symbol_Dictionary
{
    Dictionary =  string_map::Map( Int );


    fun get e s
        =
        string_map::get (e, s);


    empty =  string_map::empty;


    fun define (e, s, NULL)
	    =>
	    (   #1 (string_map::drop (e, s))
		except
		   lib_base::NOT_FOUND =  e
	    );

        define (e, s, THE v)
	    =>
	    string_map::set (e, s, v);
    end;

    fun default { architecture, big_endian, size, os, version, extra_symbols }
        =
        {   architecture_symbol =  "ARCH_" + architecture;
	    size_symbol         =  "SIZE_" + int::to_string size;

	    endian_symbol
                =
                big_endian   ??     "BIG_ENDIAN"
                             ::  "LITTLE_ENDIAN";

	    os_symbol
                =
                case os
		  
		     host_info::UNIX  => "OPSYS_UNIX";
		     host_info::WIN32 => "OPSYS_WIN32";
		     host_info::MACOS => "OPSYS_MACOS";
		     host_info::OS2   => "OPSYS_OS2";
		     host_info::BEOS  => "OPSYS_BEOS";
                esac;

	    my (major, minor)
                =
		case version
		  
		     []                 =>  (0, 0);
		     [major]            =>  (major, 0);
		     major ! minor ! _  =>  (major, minor);
                esac;

	    major_symbol = "LIB7_VERSION";
	    minor_symbol = "LIB7_MINOR_VERSION";

	    all_defs
                =
		fold_right
                    (fn (s, l) =  (s, 1) ! l)
		    [ (architecture_symbol, 1),
		      (endian_symbol, 1),
		      (size_symbol, 1),
		      (os_symbol, 1),
		      (major_symbol, major),
		      (minor_symbol, minor),
		      ("NEW_CM", 1)
                    ]
		    extra_symbols;
	
	    fold_left
                string_map::set'
                empty
                all_defs;
	};
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
