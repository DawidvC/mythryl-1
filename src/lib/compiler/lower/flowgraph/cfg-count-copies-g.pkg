## cfg-count-copies-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# This module counts the number of copies (in bytes)  
# generated after register allocation.  Mainly useful for fine-tuning.
# 2009-05-21 CrT: Does not appear to be invoked anywhere at present.

generic package cfg_count_copies_g (

     package control_flow_graph:  Control_Flow_Graph;				# Control_Flow_Graph			is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api

     package instruction_properties
	:
	Instruction_Properties							# Instruction_Properties		is from   src/lib/compiler/lower/instruction/instruction-properties.api
	where instruction_set == control_flow_graph::instruction_set;

     package sdi_jumps
	:  Span_Dependent_Jumps							# Span_Dependent_Jumps			is from   src/lib/compiler/lower/span/span-dependent-jumps.api
	where instruction_set == control_flow_graph::instruction_set;
)

: (weak) Control_Flow_Graph_Optimization					# Control_Flow_Graph_Optimization	is from   src/lib/compiler/lower/flowgraph/cfg-optimization.api

{
   package control_flow_graph
       =
       control_flow_graph;

   package g = graph;	# graph	is from   src/lib/graph/graph.pkg

   name
       =
       "count copies";

   copies
       =
       low_code_control::make_counter ("copies", "copy count");

   fun run (cfg as g::GRAPH graph)
       =
       {   blocks = map #2 (graph.nodes ());

	   fun loc _
               =
               0;

	   fun count (control_flow_graph::BLOCK { instructions, ... }, n)
	       =
	       scan (*instructions, n)
               where
	           fun scan ([], n)
                           =>
                           n;

		       scan (i ! is, n)
                           => 
			   if   (instruction_properties::move_instruction i)
                               
			        scan (is, n + sdi_jumps::sdi_size (i, loc, 0)); 
			   else
                                scan (is, n);
                           fi;
                   end;
	       end;

	 copies :=  *copies  +  fold_right count 0 blocks;

	 cfg;
     };
};
