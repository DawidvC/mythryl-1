#  Translated from an example from mGTK 
local

   use C Gtk gtk_enums 

fun makeColor colorName =
    let color = &(new' GdkColor::size)
        parsed = gdk_color_parse::f (colorName, color)
        colormap = gdk_colormap_get_system::f ()
    in  if parsed
        then if gdk_colormap_alloc_color::f (colormap, color, FALSE, TRUE)
             then THE color
             else NULL
        else NULL
    end
my THE blue = makeColor "blue"
my THE yellow = makeColor "yellow"

fun delete_event _ = FALSE 
fun destroy _ = gtk_main_quit::f()

fun repaint widget =
    let window = gtk_widget_get_window::f widget
        style  = gtk_widget_get_style::f widget
        state  = gtk_widget_get_state::f widget
        gc     = gtk_widget_get_style_fg_gc::f (widget, state)
        my size as (width, height, _, _) = gtk_widget_get_allocation::f widget
        centx = width div 2
        centy = height div 2
    in  gdk_window_clear_area::f (window, 0, 0, width, height)
    ;   gdk_gc_set_foreground::f (gc, yellow)
    ;   gdk_draw_arc::f (window, gc, 1, centx, centy, width div 3,
                           height div 3, 64 * 0, 64 * 360)
    ;   gdk_gc_set_foreground::f (gc, blue)
    ;   gtk_draw_string::f (style, window, state, (centx - 45), centy, "mGtk rules!")
    ;   TRUE
    end

fun expose (widget, _) = repaint widget

in

fun main (prog, argv) =
    let gtk_init::f (prog . argv)
        window  = gtk_window_new::f GTK_WINDOW_TOPLEVEL
        drawing = gtk_drawing_area_new::f ()

    in  gtk_event_connect::f (window, "delete_event", delete_event)
    ;   gtk_signal_connect::f (window, "destroy", destroy)
    ;   gtk_event_connect::f (drawing, "expose_event", expose)
    ;   gtk_widget_set_usize::f (window, 210, 210)
    ;   gtk_drawing_area_size::f (drawing, 200, 200)
    ;   gtk_container_set_border_width::f (window, 0w10)
    ;   gtk_container_add::f (window, drawing)
    ;   gtk_widget_show::f drawing
    ;   gtk_widget_show::f window
    ;   gtk_main::f()
    ;   0
    end

end
