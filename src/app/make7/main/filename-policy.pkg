## filename-policy.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



api Filename_Policy {

    # Given a file foo.pkg,   where should the compiled .o7 file be put?
    # Given a file Foo.make6, where should the library freezefile be put?
    #
    # 'Policy' objects provide a central way of
    # specifying the answers to such questions.
    #
    # A Policy object is (internally) a record of functions,
    # each of which accepts a sourcefile name as argument
    # and returns the name for some derived file.
    #
    Policy;

    policy:  Policy;

    # The following functions generate the names
    # for the various derived files generated
    # by the make7/compiler system:
    #
    # .o7 files contain the object code from compiling
    #     one Mythryl sourcefile: They correspond to
    #     unix .o files.
    #
    # .frozen files (freezefiles -- Mythryl code libraries)
    #     contain all the .o7 files compiled by one
    #     .make6 file:  They correspond to unix .a or .so files.
    #
    # .index files summarize what the compiler learned while
    #     compiling one .make6 file.  They are purely for
    #     human consumption.
    #
    # .module_dependencies_summary files are an internal efficiency hack
    #     of no interest to the application programmer;
    #     they cache summary information about a Mythryl
    #     sourcefile.
    #
    # .version files are internal bookkeeping devices
    #     of no interest to the application programmer;
    #     they distinguish different versions of the
    #     same .o7 or .frozen file.
    #
    make_oh7_file_name:       Policy -> anchor_dictionary::File -> String;
    make_freezefile_name:     Policy -> anchor_dictionary::File -> String;
    make_indexfile_name:      Policy -> anchor_dictionary::File -> String;
    make_versionfile_name:    Policy -> anchor_dictionary::File -> String;
    #
    make_module_dependencies_summaryfile_name:   Policy -> anchor_dictionary::File -> String;

    os_kind_to_string:        host_info::Os_Kind -> String;

};

generic package filename_policy_g (

    versiondir:    version::Version -> String;
)
:
Filename_Policy		# Filename_Policy	is from   src/app/make7/main/filename-policy.pkg
{
    Policy
        =
	{ oh7_file:  anchor_dictionary::File -> String,
	  depends:   anchor_dictionary::File -> String,
	  version:   anchor_dictionary::File -> String,
	  index:     anchor_dictionary::File -> String,
	  freeze:    anchor_dictionary::File -> String
	};

    # XXX BUGGO FIXME This doesn't belong here.
    #
    fun os_kind_to_string host_info::BEOS  =>  "beos";
	os_kind_to_string host_info::MACOS =>  "macos";
	os_kind_to_string host_info::OS2   =>  "os2";
	os_kind_to_string host_info::UNIX  =>  "unix";
	os_kind_to_string host_info::WIN32 =>  "win32";
    end;

    fun name prefix suffix path
	=
	{   (winix::path::to_dir_file  path)
                ->
                { dir, file };

	    winix::path::from_dir_file
                { dir, file => prefix + file + suffix };
	};

    policy
	=
	{   depends    => name "." ".module-dependencies-summary"  o   anchor_dictionary::os_string,
	    version    => name "." ".version"                      o   anchor_dictionary::os_string,
	    oh7_file   => name ""  ".o7"                           o   anchor_dictionary::os_string,
	    index      => name ""  ".index"                        o   anchor_dictionary::os_string,
	    freeze     => name ""  ".frozen"                       o   anchor_dictionary::os_string
	};




							# anchor_dictionary	is from   src/app/make7/paths/anchor-dictionary.pkg
							# winix			is from   src/lib/std/winix.pkg
							# winix_path_g		def in    src/lib/std/src/winix/winix-path-g.pkg
							# version		is from   src/app/make7/semant/version.pkg

    fun make_oh7_file_name      (p: Policy) path =   p.oh7_file  path;
    fun make_versionfile_name   (p: Policy) path =   p.version path;
    fun make_indexfile_name     (p: Policy) path =   p.index   path;
    fun make_freezefile_name    (p: Policy) path =   p.freeze  path;
    fun make_module_dependencies_summaryfile_name  (p: Policy) path =   p.depends   path;

};

package filename_policy
    =
    filename_policy_g (
	versiondir    = version::to_string;
    );


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
