# burg.grammar
#
# Mythryl-Yacc grammar for BURG.



package a =   burg_ast;

fun output_raw s
    =
    print (s: String);

%%

%term K_EOF
    | K_TERM
    | K_START
    | K_TERMPREFIX
    | K_RULEPREFIX
    | K_SIG
    | K_COLON
    | K_SEMICOLON
    | K_COMMA
    | K_LPAREN | K_RPAREN
    | K_EQUAL
    | K_PIPE
    | PPERCENT of List String
    | INT of Int
    | ID  of String
    | RAW of List String

%nonterm full 		of a::Spec_Ast
       | spec 		of a::Spec_Ast
       | decl 		of a::Decl_Ast
       | binding 	of (String, Null_Or String)
       | cost 		of List Int
       | costtail 	of List Int
       | rulename	of String
       | pattern 	of a::Pattern_Ast
       | patterntail 	of List a::Pattern_Ast
       | decls 		of List a::Decl_Ast
       | rules 		of List a::Rule_Ast
       | rule 		of a::Rule_Ast
       | bindinglist 	of List ((String, Null_Or String))
       | raw	 	of Void
       | prelude	of Void
       | postlude	of Void

%start full

%pos Int
%pure

%eop K_EOF 

%name Burg

%%

full		: decls PPERCENT rules PPERCENT	
					(a::SPEC{ head => ppercent1,
						decls => reverse decls,
						rules => reverse rules,
						tail  => ppercent2})

decls		: /* empty */		([])
		| decls decl		(decl . decls)

decl		: K_TERM bindinglist	(a::TERM (reverse bindinglist))
		| K_START ID		(a::START id)
		| K_TERMPREFIX ID	(a::TERMPREFIX id)
		| K_RULEPREFIX ID	(a::RULEPREFIX id)
		| K_SIG ID		(a::BEGIN_API  id)


bindinglist	: binding		([binding])
		| bindinglist K_PIPE binding
					(binding . bindinglist)

binding		: ID			((id, NULL))
		| ID K_EQUAL ID		((id1, THE id2))

rules		: /* empty */		([])
		| rules rule		(rule . rules)

rule		: ID K_COLON pattern K_EQUAL rulename cost K_SEMICOLON
					(a::RULE(id, pattern, rulename, cost))

rulename	: ID			(id)

pattern		: ID 			(a::PAT(id, []))
		| ID K_LPAREN pattern patterntail K_RPAREN		
					(a::PAT(id, pattern . patterntail))

patterntail	: /* empty */		([])
		| K_COMMA pattern patterntail
					(pattern . patterntail)


cost		: /* empty */		([])
		| K_LPAREN INT costtail K_RPAREN	
					(int . costtail)

costtail	: /* empty */		([])
		| K_COMMA INT costtail	(int . costtail) 
