#  Mythryl-Yacc Parser Generator (c) 1989 Andrew W. Appel, David R. Tarditi 

/* drt (12/15/89) -- the generic should be used during development work,
   but it is wasted space in the release version.
   
generic package parser_gen_g (package lr_table:  Lr_Table
		  package stream:  Stream) : Lr_Parser =
*/

package lr_parser :> Lr_Parser {

     print = fn s => output (std_out, s);
     println = fn s => (print s; print "\n");
     package lr_table = lr_table;
     package stream = stream;
     package token:  Token {

	    package lr_table = lr_table;
	    enum Token (X,Y) = TOKEN of lr_table::term * (X * Y * Y);
	    sameToken = fn (TOKEN (t, _), TOKEN (t', _)) => t=t';
	}
     

     include lr_table;
     include token;

     debug_flag = FALSE;
     exception PARSE_ERROR;

      type Element (X,Y) = (state * (X * Y * Y));
      type stack (X,Y) = List( Element (X,Y) ) );

      showState = fn (STATE s) => ("STATE " + (makestring s));

      fun printStack (stack: List( Element( X, Y) ), n: Int) =
         case stack
           of (state, _) . rest =>
                 (print("          " + makestring n + ": ");
                  println (showState state);
                  printStack (rest, n+1)
                 )
            | NIL => ();

      parse = fn { arg:  X,
		      table:  lr_table::Table,
		      lexer:  stream::Stream( token( '_b, '_c ) ),
		      saction:  Int * '_c * ('_b, '_c) stack * X ->
				nonterm * ('_b * '_c * '_c) * stack('_b, '_c),
		      void:  '_b,
		      error_recovery = { is_keyword, preferred_change,
			    errtermvalue, show_terminal,
			    error, terms, no_shift },
		      lookahead } =>
 { fun prAction (stack as (state, _) . _, 
		  next as (TOKEN (term, _), _), action) =
             (println "Parse: state stack:";
              printStack (stack, 0);
              print("       state="
                         + showState state	
                         + " next="
                         + show_terminal term
                         + " action="
                        );
              case action
                of SHIFT s => println ("SHIFT " + showState s)
                 | REDUCE i => println ("REDUCE " + (makestring i))
                 | ERROR => println "ERROR"
		 | ACCEPT => println "ACCEPT";
              action)
        | prAction (_, _, action) = action;

      action = lr_table::action table;
      goto = lr_table::goto table;

      fun parseStep (next as (TOKEN (terminal, value as (_, leftPos, _)), lexer) :
			 token('_b, '_c) * token Stream::stream('_b, '_c),
		    stack as (state, _) . _ :  stack('_b, '_c)) =
         case (if debug_flag  prAction (stack, next, action (state, terminal))
               else action (state, terminal))
              of SHIFT s => parseStep (Stream::get lexer, (s, value) . stack)
               | REDUCE i =>
		    {   my (nonterm, value, stack as (state, _) . _ ) =
					 saction (i, leftPos, stack, arg);
		        parseStep (next, (goto (state, nonterm), value) . stack);
		    }
               | ERROR => {  my (_, leftPos, rightPos) = value;
		             error("syntax error\n", leftPos, rightPos);
			     raise exception PARSE_ERROR;
			  }
  	       | ACCEPT => {   my (_, (topvalue, _, _)) . _ = stack;
			       my (token, restLexer) = next;
			      (topvalue, Stream::cons (token, lexer));
			   };
      my next as (TOKEN (terminal, (_, leftPos, _)), _) = Stream::get lexer;
      parseStep (next,[(initial_state table, (void, leftPos, leftPos))]);
   }
};

