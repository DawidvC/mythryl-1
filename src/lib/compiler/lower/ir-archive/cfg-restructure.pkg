#
# This module inserts preheaders and other stuff.
# This is probably no longer used.
#
# -- Allen Leung



generic package ControlFlowGraphRestructure
    (package loop:  Loop_Structure) : CONTROL_FLOW_GRAPH_RESTRUCTURE
{
   package loop = Loop
   package g    = graph

   fun restructure (g::GRAPH cfg, g::GRAPH loop) 
          { add_preheader, 
            add_landing_pad
          } =
   let add_node = cfg.add_node
       fun preheader f =
           fn { header, backedges } =>
              let in_edges = cfg.in_edges header
                  fun g ([], entries) = entries
                    | g((e as (i, j, _)) . es, entries) = 
                       if list::exists (fn (i', j', _) => i==i' and j==j') 
                            backedges then g (es, entries)
                                      else g (es, e . entries)
              in  f { header =(header, cfg.node_info header),
                    entries=g (in_edges,[])
                   }
              end

       fun landing_pads f = fn { exits } => apply (fn e => f { exit=e } ) exits

       fun nop _ = ()
       insert_preheader    = case add_preheader of
                                   THE f => preheader f
                                 | NULL   => nop
       insert_landing_pads = case add_landing_pad of
                                   THE f => landing_pads f
                                 | NULL   => nop
       fun process_loop (i, Loop::LOOP { header, backedges=[], exits, ... } ) = ()
         | process_loop (i, Loop::LOOP { header, backedges, exits, ... } ) =
          (insert_preheader { header=header, backedges=backedges };
           insert_landing_pads { exits=exits }
          )
   in 
       loop.forall_nodes process_loop
   end

}

