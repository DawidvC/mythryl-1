## cells-basis.api
#
# This updated api describes the abstractions on ``cells'', which
# denote storage cells in the machine architecture.
#
# Allen Leung (12/2/00)

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

###             "Get and set methods are evil."
###                          -- Allen Holub


api Cells_Basis {

    Size_In_Bits = Int;		# width in bits 
    Cell_Id      = Int;		# unique cell identifier
    Register_Id  = Int;		# register id 
    Register_Num = Int;		# register number 
    #
    # Note: register_id and register_num should probably
    # be made into different datatypes with different tags,
    # but highcode currently boxes such values.


    Cellkind_Info
        =
        INFO  { name:      String,
                nickname:  String
              };

    # Cellkind denotes the types of storage cells.
    # This definition is further augumented by architecture specific 
    # cells descriptions.  Type cellkind is an equality type.
    #
    Cellkind
        = REGISTER		# General purpose register 
	| FLOAT_REGISTER	# Floating point register
	| CONDITION_CODES	# Condition code register

	| RAM_CELL		# Memory 
	| CONTROL_DEPENDENCY	# Control dependence 

	| MISC_KIND  Ref( Cellkind_Info )	#  Client defined 
	;

    Cellkind_Desc
	=
        DESC 
        { kind:              Cellkind,
	  counter:           Ref( Int ),
	  dedicated:	   Ref( Int ),

	     # It is sometimes desirable to allocate dedicated 
	     # pseudo registers that will get rewritten to something else,
	     # e.g., the virtual frame pointer. 
	     # Since these registers are never assigned a register  by 
	     # the register allocator, a limited number of these kinds 
	     # of registers may be generated.

	  low:               Int,
	  high:              Int,
	  to_string:          Register_Id -> String,
	  to_string_with_size:  (Register_Id, Size_In_Bits) -> String,
	  default_values:      List( (Register_Id, Int) ),
	  physical_regs:      Ref(  rw_vector::Rw_Vector(  Cell ) ),
	  zero_reg:           Null_Or( Register_Id )
        }




    # A cell is a stateful chunk reprensenting a storage cell in a 
    # processor.  Cells are partitioned into their kinds, such as
    # REGISTER (general purpose, i.e., integer, registers), FLOAT_REGISTER
    # (floating point registers) etc.  Each cell has an unique cell_id
    # that determines its identity.  Its attributes include
    #
    #   1. its color, and
    #   2. other client defined properties, 
    #      which is represented as a property list of annotations.
    #
    #  Note that cell_id and color are two distinct concepts; for example,
    #  two different cells may have the same color.   
    #
    # Type Cell is not an equality type.  We provide the function
    # same_cell for testing for chunk identity, and the function
    # same_color for testing for color identity.  For most things,
    # same_color is the right function to use.

    also
    Cell = 
       CELL  { id:              Cell_Id,
	       ref_color:       Ref( Cell_Color ), 
	       desc:            Cellkind_Desc, 
	       ref_notes:  Ref( note::Notes )
	     }
    also
    Cell_Color
	= MACHINE  Register_Id 
	| PSEUDO 
	| ALIASED  Cell 
	| SPILLED;


    # Basic functions on cellkinds 

    cellkind_to_string:    Cellkind -> String;		# name 
    cellkind_to_nickname:  Cellkind -> String;		# Abbreviation 

    new_cell_kind:
        { name: String, nickname: String }
        ->
        Cellkind;


    # Basic functions on cells.
    # All functions marked with +++ implicitly chase aliases. 
    #
    # Function register_id returns the current color of a node.
    # The color of a pseudo register is the same as its cell_id.
    # A spilled node is given a color of -1, so all spilled nodes have
    # the same color.
    #
    # NOTE: distinction between registerId and registerNum:
    # Function register_id returns register_id.  
    # Physical registers in distinct 
    # cell ilks are given disjoint register_ids.  So for example,
    # the register id for r0 and f0 in the Alpha are different. 
    #
    # The function, registerNum, on the other hand, returns a
    # register number of a cell that starts from 0 for physical registers.
    # So registerNum r0 = registerNum f0 = 0.   It behaves the same
    # as registerId in other cases.
    #
    # The function physicalRegisterNum is the same as registerNum,
    # except that it is an error to call it on a pseudo or spilled cell.
    # As a rule, use registerId whenever possible.  Function registerNum
    # is used only if you have to deal with machine encoding.

    cell_id:            Cell -> Cell_Id;        # Return cell id 
    cellkind:           Cell -> Cellkind;       # Return cellkind 
    is_const:           Cell -> Bool;
    annotations:        Cell -> Ref( note::Notes );
    same_cell:         (Cell, Cell) -> Bool;    # Chunk identity 
    same_kind:         (Cell, Cell) -> Bool;    # Same cellkind? 
    chase:              Cell -> Cell;           # Chase aliases +++ 
    same_aliased_cell: (Cell, Cell) -> Bool;    # Chase aliases +++ 
    hash_cell:          Cell -> Unt;
    register_id:        Cell -> Register_Id;    # +++
    register_num:       Cell -> Register_Num;   # +++ 
    physical_register_num:  Cell -> Int;        #  +++ 
    same_color:        (Cell, Cell) -> Bool;    # Color identity +++ 
    compare_color:     (Cell, Cell) -> Order;   #  +++ 
    to_string:         Cell -> String;          # pretty print a cell +++ 
    to_string_with_size:  (Cell, Size_In_Bits) -> String;    #  +++ 

    # Set the color of the 'from' cell to be the same as
    # the 'to' cell.  The 'from' cell MUST be a pseudo register,
    # and cannot be of kind CONST.

    set_alias:     { from: Cell, to: Cell } -> Void;  #  +++ 


    # The following abstraction represents a set of cells 
    # indexed by colors.  When two or more cells with the
    # same color exist we arbitrarily choose a representative.
    # WARNING: while using sorted_cells it is important not to
    # update the colors in the elements, or you'll get wrong results.
    #
    package sorted_cells :
      api {
	 Sorted_Cells; 
	 empty:        Sorted_Cells;
	 enter:       (Cell, Sorted_Cells) -> Sorted_Cells;
	 rmv:         (Cell, Sorted_Cells) -> Sorted_Cells;
	 member:      (Cell, Sorted_Cells) -> Bool;
	 eq:          (Sorted_Cells, Sorted_Cells) -> Bool;
	 not_eq:      (Sorted_Cells, Sorted_Cells) -> Bool;
	 uniq:         List( Cell ) -> Sorted_Cells;
	 difference:  (Sorted_Cells, Sorted_Cells) -> Sorted_Cells;
	 intersect:   (Sorted_Cells, Sorted_Cells) -> Sorted_Cells;
	 union:       (Sorted_Cells, Sorted_Cells) -> Sorted_Cells;
	 return:       Sorted_Cells -> List( Cell );
	 is_empty:     Sorted_Cells -> Bool;
	 empty_intersection:     (Sorted_Cells, Sorted_Cells) -> Bool;
	 non_empty_intersection:  (Sorted_Cells, Sorted_Cells) -> Bool;
      }; 


    # Hash table indexed by cell id.  
    # IMPORTANT: this table is not indexed by color!
    #
    package hash_table:  Monomorphic_Hash_Table			# Monomorphic_Hash_Table	is from   src/lib/src/monomorphic-hash-table.api
			 where  key::Hash_Key == Cell;


    # Hash table indexed by cell color.  
    # IMPORTANT: this table is indexed by color!
    # ALSO: DO NOT change the colors of the cells while using this table!
    #
    package color_table:  Monomorphic_Hash_Table		# Monomorphic_Hash_Table	is from   src/lib/src/monomorphic-hash-table.api
			  where  key::Hash_Key == Cell;


    # Cell set represents a map from cellkind to sorted_cells.
    #
    package cell_set
	:
	api {
	    Cellset; 

	    # Cellset functions: 
	    empty:   Cellset;
	    add:     (Cell, Cellset) -> Cellset;
	    rmv:     (Cell, Cellset) -> Cellset;
	    get:     Cellkind_Desc -> Cellset -> List( Cell );
	    update:  Cellkind_Desc -> (Cellset, List( Cell )) -> Cellset;
	    map:     { from: Cell, to: Cell } -> Cellset -> Cellset;

	    # Convert cellset into a List of cells 
	    to_cell_list:  Cellset -> List( Cell );

	    # Prettyprinting:
	    to_string:    Cellset -> String;
	};


    # These annotations add extra definitions
    # and uses to an instruction:
    #
    exception DEF_USE  { cellkind: Cellkind, defs: List( Cell ), uses: List( Cell ) };
    def_use:  note::Property { cellkind: Cellkind, defs: List( Cell ), uses: List( Cell ) };
                  

    mem:  Register_Id -> Cell;							# Internal use for alias analysis; don't use! 

    show:            Cellkind_Desc -> Register_Id -> String;			#  Internal use only! 
    show_with_size:  Cellkind_Desc -> (Register_Id, Size_In_Bits) -> String;	#  Internal use only! 

    array0:  rw_vector::Rw_Vector(  Cell );
};


## Changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
