
# Process rtl descriptions

api Mdl_Rtl_Comp =
api
   package raw_syntax:   MDL_AST
   package Comp:  Mdl_Compile
   package rtl:   Codetree_Rtl
   package lowcode_types:  Lowcode_Types
     sharing Comp::raw_syntax = lowcode_types::raw_syntax = raw_syntax
     sharing lowcode_types::RTL = RTL

   type compiled_rtls #  rtl in digested form 

   enum rtl_def = RTLDEF of { id: raw_syntax::id, args: List( raw_syntax::id ), rtl: RTL::rtl }

   #  Current set of rtls 
   my current_rtls:  REF(  List(  rtl_def ) )

   #  process the rtl 
   my compile:  Comp::md -> compiled_rtls

   #  extract the md component 
   my md:       compiled_rtls -> Comp::md

   #  extract the rtls 
   my rtls:     compiled_rtls -> List( rtl_def )

   #  emit and execute code for building the rtls 
   my gen:      compiled_rtls -> Void 

   #  Dump out all the rtl definitions 
   my dumpLog:  compiled_rtls -> Void 

   # A generic combinator for generions.(ate query funct )
   # Use this method if you want to create new query routines.

   my mkQuery:  compiled_rtls ->
       { name:      raw_syntax::id,           #  name of function 
         namedArguments:  Bool,       #  use record arguments? 
         args:      list(  List(  raw_syntax::id ) ), #  labeled arguments, may be curried 
         decls:     List( raw_syntax::decl ),    #  local definitions 
         caseArgs:  List( raw_syntax::id ),      #  extra arguments to the case expression 
                 /* Callback to generate the actual code. 
                  * An instruction constructor may represent a set of
                  * different instructions with different rtl templates.
                  * We enumerate all of them and let you decide 
                  * how to generate the code.
                  */
         body:   { instruction:  raw_syntax::consbind,      #  Current instruction 
                  rtl:    rtl_def,           #  rtl for this instruction 
                  const:  raw_syntax::expression -> raw_syntax::expression #  Callback for making constants
                 } ->
                 { casePats:  List( raw_syntax::pattern ), /* extra patterns */ 
                   expression:       raw_syntax::expression       #  And clause 
                 }
       } -> raw_syntax::decl

  
  # A generic routine for generating def/use like queries

  my mkDefUseQuery:  compiled_rtls ->
       { name:   raw_syntax::id,           #  name of function 
         args:   List(  List(  raw_syntax::id ) ),
         namedArguments:  Bool,
         decls:  List( raw_syntax::decl ),    #  local definitions 
         def:    raw_syntax::expression * RTL::expression * raw_syntax::expression -> Null_Or( raw_syntax::expression ),
         uses:   raw_syntax::expression * RTL::expression * raw_syntax::expression -> Null_Or( raw_syntax::expression )
       } -> raw_syntax::decl




  # Analyze all the arguments in an expression according to its 
  # rtl definition.

  my forallArgs:  { instruction:      raw_syntax::consbind, #  Current instruction 
                    rtl:        rtl_def,      #  Current rtl 
                    rtlArg:     raw_syntax::id * raw_syntax::Some_Type * RTL::expression * RTL::pos * X -> X,
                    nonRtlArg:  raw_syntax::id * raw_syntax::Some_Type * X -> X
                   } -> X -> X

  # Analyze all the arguments in an expression according to its 
  # rtl definition, create an expression that recreate that instruction.

  my mapInstr:  { instruction:      raw_syntax::consbind, #  Current instruction 
                  rtl:        rtl_def,      #  Current rtl 
                  rtlArg:     raw_syntax::id * raw_syntax::Some_Type * RTL::expression * RTL::pos -> Null_Or( raw_syntax::expression ),
                  nonRtlArg:  raw_syntax::id * raw_syntax::Some_Type -> Null_Or( raw_syntax::expression )
                 } -> raw_syntax::expression
  
  # Make an error handler 

  my simpleErrorHandler:  String -> raw_syntax::decl
  my complexErrorHandler:  String -> raw_syntax::decl
  my complexErrorHandlerDef:  Void -> raw_syntax::decl

end
