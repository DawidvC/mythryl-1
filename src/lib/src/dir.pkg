## dir.pkg
## Author: Matthias Blume (blume@cs.princeton.edu)

# Compiled by:
#     src/lib/src/lib7.make6

# Compare to:
#     src/lib/src/dir-tree.pkg

package dir: Dir {				# Dir	is from   src/lib/src/dir.api

    package f = posix;

    fun is_file filename
        =
        posix::stat::is_file
            (posix::stat filename)
        except
            _ = FALSE;

    # Return an alphabetically sorted list of directory entries,
    # e.g. [ "bar", "foo", "zot" ], skipping those starting with a dot:
    #
    fun file_names (directory_name: String)
        =
	file_list
        where

	    # Collect everything in directory
            # as a list of strings:
	    #
	    file_list
		=
		safely::do
		    {
		      open_it  =>  .{ f::open_directory_stream  directory_name; },
		      close_it =>     f::close_directory_stream,
		      cleanup  =>     fn _ =  ()
		    }
                   .{   loop []
			where
			    fun loop results
				=
				case (f::read_directory_entry  #directory_stream)
				  
				     NULL
                                         =>
                                         list_mergesort::sort  string::(>)  results;

				     THE filename
                                         =>
                                         # Ignore everything but vanilla files:
                                         #
                                         if   (is_file filename)   loop (filename ! results);
                                         else                      loop results;          fi;
				esac;
			end;
		    };

	end;

    # Return an alphabetically sorted list of directory entries,
    # e.g. [ "bar", "foo", "zot" ], skipping those starting with a dot:
    #
    fun entry_names (directory_name: String)
        =
	{
	    # Collect everything in directory
            # as a list of strings:
	    #
	    file_list
		=
		safely::do
		    {
		      open_it  =>  .{ f::open_directory_stream  directory_name; },
		      close_it =>     f::close_directory_stream,
		      cleanup  =>     fn _ =  ()
		    }
                   .{   loop []
			where
			    fun loop results
				=
				case (f::read_directory_entry  #directory_stream)
				  
				     NULL
                                         =>
                                         list_mergesort::sort  string::(>)  results;

				     THE filename
                                         =>
                                         # Ignore names starting with a dot:
                                         #
                                         if   (string::length filename > 0
                                         and  string::get   (filename, 0) == '.')

                                              loop results;
                                         else
                                              loop (filename ! results);
                                         fi;
				esac;
			end;
		    };

	    file_list;
	};

    # Return an alphabetically sorted list of directory entries,
    # e.g. [ ".bashrc", "bar", "foo", "zot" ], skipping "." and "..":
    #
    fun entry_names' (directory_name: String)
        =
	{
	    # Collect everything in directory
            # as a list of strings:
	    #
	    file_list
		=
		safely::do
		    {
		      open_it  =>  .{ f::open_directory_stream  directory_name; },
		      close_it =>     f::close_directory_stream,
		      cleanup  =>     fn _ =  ()
		    }
                   .{   loop []
			where
			    fun loop results
				=
				case (f::read_directory_entry  #directory_stream)
				  
				     NULL
                                         =>
                                         list_mergesort::sort  string::(>)  results;

				     THE filename
                                         =>
                                         # Ignore "." and "..":
                                         #
                                         if  (filename == "."
                                         or   filename == "..")

                                              loop results;
                                         else
                                              loop (filename ! results);
                                         fi;
				esac;
			end;
		    };

	    file_list;
	};

    # Return an alphabetically sorted list of directory entries,
    # e.g. [ ".", ".."  ".bashrc", "bar", "foo", "zot" ], including "." and "..":
    #
    fun entry_names'' (directory_name: String)
        =
	{
	    # Collect everything in directory
            # as a list of strings:
	    #
	    file_list
		=
		safely::do
		    {
		      open_it  =>  .{ f::open_directory_stream  directory_name; },
		      close_it =>     f::close_directory_stream,
		      cleanup  =>     fn _ =  ()
		    }
                   .{   loop []
			where
			    fun loop results
				=
				case (f::read_directory_entry  #directory_stream)
				  
				     NULL
                                         =>
                                         list_mergesort::sort  string::(>)  results;

				     THE filename
                                         =>
                                         loop (filename ! results);
				esac;
			end;
		    };

	    file_list;
	};

    # Return an alphabetically sorted list of directory entries,
    # e.g. [ "bar", "foo", "zot" ], skipping those starting with a dot:
    #
    fun files (directory_name: String)
        =
	{
            # Get current directory, so we can
            # print out full pathnames:
            cwd = winix::file::current_directory ();

	    # Collect everything in directory
            # as a list of strings:
	    #
	    file_list
		=
		safely::do
		    {
		      open_it  =>  .{ f::open_directory_stream  directory_name; },
		      close_it =>     f::close_directory_stream,
		      cleanup  =>     fn _ =  ()
		    }
                   .{   loop []
			where
			    fun loop results
				=
				case (f::read_directory_entry  #directory_stream)
				  
				     NULL
                                         =>
                                         list_mergesort::sort  string::(>)  results;

				     THE filename
                                         =>
                                         # Ignore everything but vanilla files:
                                         #
                                         if (is_file filename)   loop (cwd + "/" + filename ! results);
                                         else                    loop results;                      fi;
				esac;
			end;
		    };

	    file_list;
	};

    # Return an alphabetically sorted list of directory entries,
    # e.g. [ "bar", "foo", "zot" ], skipping those starting with a dot:
    #
    fun entries (directory_name: String)
        =
	{
            # Get current directory, so we can
            # print out full pathnames:
            cwd = winix::file::current_directory ();

	    # Collect everything in directory
            # as a list of strings:
	    #
	    file_list
		=
		safely::do
		    {
		      open_it  =>  .{ f::open_directory_stream  directory_name; },
		      close_it =>     f::close_directory_stream,
		      cleanup  =>     fn _ =  ()
		    }
                   .{   loop []
			where
			    fun loop results
				=
				case (f::read_directory_entry  #directory_stream)
				  
				     NULL
                                         =>
                                         list_mergesort::sort  string::(>)  results;

				     THE filename
                                         =>
                                         # Ignore names starting with a dot:
                                         #
                                         if  (string::length filename > 0
                                         and  string::get   (filename, 0) == '.')

                                              loop results;
                                         else
                                              loop (cwd + "/" + filename ! results);
                                         fi;
				esac;
			end;
		    };

	    file_list;
	};

    # Return an alphabetically sorted list of directory entries,
    # e.g. [ ".bashrc", "bar", "foo", "zot" ], skipping "." and "..":
    #
    fun entries' (directory_name: String)
        =
	{
            # Get current directory, so we can
            # print out full pathnames:
            cwd = winix::file::current_directory ();

	    # Collect everything in directory
            # as a list of strings:
	    #
	    file_list
		=
		safely::do
		    {
		      open_it  =>  .{ f::open_directory_stream  directory_name; },
		      close_it =>     f::close_directory_stream,
		      cleanup  =>     fn _ =  ()
		    }
                   .{   loop []
			where
			    fun loop results
				=
				case (f::read_directory_entry  #directory_stream)
				  
				     NULL
                                         =>
                                         list_mergesort::sort  string::(>)  results;

				     THE filename
                                         =>
                                         # Ignore "." and "..":
                                         #
                                         if  (filename == "."
                                         or   filename == "..")

                                              loop results;
                                         else
                                              loop (cwd + "/" + filename ! results);
                                         fi;
				esac;
			end;
		    };

	    file_list;
	};

    # Return an alphabetically sorted list of directory entries,
    # e.g. [ ".", ".."  ".bashrc", "bar", "foo", "zot" ], including "." and "..":
    #
    fun entries'' (directory_name: String)
        =
	{
            # Get current directory, so we can
            # print out full pathnames:
            cwd = winix::file::current_directory ();

	    # Collect everything in directory
            # as a list of strings:
	    #
	    file_list
		=
		safely::do
		    {
		      open_it  =>  .{ f::open_directory_stream  directory_name; },
		      close_it =>     f::close_directory_stream,
		      cleanup  =>     fn _ =  ()
		    }
                   .{   loop []
			where
			    fun loop results
				=
				case (f::read_directory_entry  #directory_stream)
				  
				     NULL
                                         =>
                                         list_mergesort::sort  string::(>)  results;

				     THE filename
                                         =>
                                         loop (cwd + "/" + filename ! results);
				esac;
			end;
		    };

	    file_list;
	};


#                     # 'root_directory' (usually build7.seed-libraries)
#                     # is the directory containing our seed-library
#                     # freezefiles.  In general it will contain one
#                     # subdirectory for each independent package it
#                     # contains.  (In practice, we have now reduced
#                     # that to one subdirectory named ROOT.)
#                     #
#                     # We now set up the anchor dictionary with
#                     # one anchor per subdirectory, the anchor
#                     # name being the subdirectory name.
#                     # 
# print ("src/app/make7/main/make7-g.pkg/set_up_primordial_make7file_hook/AAA: root_directory = " + root_directory + " cwd= " + (posix::current_directory()) + "\n");
# 		    {
# 			# Read the boot-directory directory-stream,
# 			# consing up a list of all its contents:
# 			#
# 			fun list_dir  directory_stream
# 			    =
# 
# 			# Collect everything in boot_dir
#                         # as a list of strings:
# 			#
# 			file_list
# 			    =
# 			    safely::do
#                               {
#                                 open_it  =>  .{ f::open_directory_stream  root_directory; },
# 			          close_it =>  f::close_directory_stream,
# 			          cleanup  => fn _ =  ()
# 			        }
# 			    loop []
#                           where
# 			        fun loop l
# 				    =
# 				    case (f::read_directory_entry  directory_stream)
#                                        NULL  =>  l;
###				         THE x =>  loop (x ! l);
# 				         THE x =>
# { print ("src/app/make7/main/make7-g.pkg/set_up_primordial_make7file_hook/loop: found " + root_directory + " entry " + x + "\n");
#                                                   loop (x ! l);
# };
#                                   esac;
# 			    end;
# 
# 			fun is_directory x
# 			    =
# 			    f::is_directory x
#                             except
#                                 _ =  FALSE;
# 
# 
#                         # Filter the contents of boot_dir,
#                         # ignoring everything but subdirectories:
# 			#
# 			fun sub_dir x
# 			    =
# 			    {   d = p::cat (root_directory, x);
# 
# 				if   is_directory d
# 				then THE (x, d);
# 				else NULL;          fi;
# 			    };
# 
# 			# Generate a list of (directory_name, directory_path)
# 			# pairs, which we shall momentarily treat as a list of
# 			# (anchor, definition) pairs:
# 			#
# 			pair_list
#                             =
#                             list::map_maybe_null_fn
#                                 sub_dir
#                                 file_list;
# 
# print ("src/app/make7/main/make7-g.pkg/set_up_primordial_make7file_hook: pair_list #1s = " + (string::join " " (map #1 pair_list)) + "\n");
# print ("src/app/make7/main/make7-g.pkg/set_up_primordial_make7file_hook: pair_list #2s = " + (string::join " " (map #2 pair_list)) + "\n");
# 			fun set_anchor (anchor, definition)
# 			    =
# { print ("src/app/make7/main/make7-g.pkg/II: calling ad::set_anchor to set " + anchor + " to " + definition + "\n");
# print ("src/app/make7/util/make7-g.pkg: cwd = " + (posix::current_directory()) + "\n");
# 			    ad::set_anchor  (anchor_dictionary, anchor, THE definition);
# };
# 
# 			apply  set_anchor  pair_list;
# 		    };

};



## Copyright (c) 1999, 2000 by Lucent Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
