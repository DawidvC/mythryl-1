


generic package GlobalCriticalPath
   (DDG:  SCHEDULER_DDG) : SCHEDULING_RANKS where type edge = DDG::edge
=
pkg

   package ddg = DDG
   package i   = DDG::I
   package g   = graph
   package a   = rw_vector

   type edge = DDG::edge

   fun rank (DDG as g::GRAPH ddg) =
   let N        = ddg.capacity ()
       len      = a::rw_vector (N, 0)
       children = a::tabulate (N, fn i => length (ddg.out_edges i))
       fun process i =
       let fun g ((i, j, DDG::EDGE { l, ... } ) . es, n) = 
                 g (es, int::max (a::sub (len, j) + l + 1, n))
             | g([], n) = n
       in  a::update (len, i, g (ddg.out_edges i, 0))
       end 
       fun order ((i, _), (j, _)) = 
           case int::compare (a::sub (len, i), a::sub (len, j)) of
              EQUAL => a::sub (children, i) > a::sub (children, j)
           |  LESS  => FALSE
           |  GREATER => TRUE
   in  apply process (reverse (graph_topological_sort::topologicalSort DDG (map #1 (ddg.nodes ()))));
       order
   end

end
