#
# Growable bitset.
#
# -- Allen Leung


package dynamic_bit_set
:>
Bit_Set
=
pkg

    package a = rw_unt8_vector
    package w = Word8
    use A

    infix << >> & ||
    infix sub

    type bitset = Ref( Rw_Vector )

    word  = unt::from_int 
    int   = unt::toInt
    my op &  = unt::bitwise_and
    my op >> = unt.>>
    my op << = W.<<

    fun create n = REF (rw_vector((n+7)div 8, 0wx0))

    fun size a
	=
	length *a * 8

    fun grow (r as REF a, i) =
    let new_size  = int::max (length a * 2, i)
	new_array = rw_vector (new_size, 0wx0)
	copy { src = a, si = 0, dst = new_array, di = 0, 
			       len = NULL }
    in  r := new_array
    end

    fun set (r as REF a, i) =
    let byte = int((word i) >> 0w3)
	mask = W.<< (0w1, (word i) & 0w7)
    in  update (a, byte, w::bitwise_or (a sub byte, mask)) end
    except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => (grow (r, i+1); set (r, i))

    fun reset (r as REF a, i) =
    let byte = int((word i) >> 0w3)
	mask = w::bitwise_not (W.<< (0w1, (word i) & 0w7))
    in  update (a, byte, w::bitwise_and (a sub byte, mask)) end
    except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => ()

    fun clear (REF a) = modify (fn _ => 0wx0) a

    fun negate (REF a) = REF (tabulate (length a, fn i => w::bitwise_not (a sub i)))

    fun union (REF a, REF b) =
    let m         = int::max (length a, length b)
	n         = int::min (length a, length b)
	c         = rw_vector (m, 0wx0)
	fun f -1      = ()
	  | f i       = update (c, i, w::bitwise_or (a sub i, b sub i))
    in  f n;
	copy { src = if length a > length b then a else b,
	       si  = n,  dst = c, di  = n, len = NULL };
	REF c 
    end

    fun intersect (REF a, REF b) =
    let n         = int::min (length a, length b)
	c         = rw_vector (n, 0wx0)
	fun f -1      = ()
	  | f i       = update (c, i, w::bitwise_and (a sub i, b sub i))
    in  f n;
	REF c 
    end

    fun diff (REF a, REF b) =
    let m         = length a
	c         = rw_vector (m, 0wx0)
	fun f -1      = ()
	  | f i       = update (c, i, w::bitwise_and (a sub i, w::bitwise_not (b sub i)))
    in  f m; REF c
    end

    fun union_with (r as REF a, REF b) =
       (if length b > length a then grow (r, length b) 
	modifyi (fn (i, x) => w::bitwise_or (x, b sub i)) (a, 0, NULL))

    fun intersect_with (REF a, REF b) =
       modifyi (fn (i, x) => w::bitwise_and (x, b sub i)) (a, 0, NULL)

    fun diffWith (REF a, REF b) =
       modifyi (fn (i, x) => w::bitwise_and (x, w::bitwise_not (b sub i))) (a, 0, NULL)

    fun complement (REF a) = modify w::bitwise_not a

    fun copy (REF a) = REF (tabulate (length a, fn i => a sub i))

    fun to_string (REF a) = 
    let fun f i = if i < length a then w::to_string (a sub i) . f (i+1) else []
	s = string::cat (f 0)
    in  "[" + s + "]" end

    fun contains (r as REF a, i) = 
    let byte = int((word i) >> 0w3)
	mask = W.<<(0w1, (word i) & 0w7)
    in  w::bitwise_and (a::sub (a, byte), mask) != 0wx0 end
    except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => FALSE

    fun markAndTest (r as REF a, i) =
    let byte = int((word i) >> 0w3)
	mask = W.<<(0w1, (word i) & 0w7)
	word = a::sub (a, byte)
    in  if w::bitwise_and (word, mask) != 0wx0 then
	   TRUE
	else 
	   (a::update (a, byte, w::bitwise_or (word, mask)); FALSE)
    end except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => (grow (r, i+1); markAndTest (r, i))

    fun unmarkAndTest (r as REF a, i) =
    let byte = int (word i >> 0w3)
	mask = W.<<(0w1, (word i) & 0w7)
	word = a::sub (a, byte)
    in  if w::bitwise_and (word, mask) != 0wx0 then
	   (a::update (a, byte, w::bitwise_and (word, w::bitwise_not mask)); TRUE)
	else 
	   FALSE
    end except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => FALSE

end



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
