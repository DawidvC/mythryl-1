## unsafe.api

# Compiled by:
#     src/lib/std/src/Base-imp.make6



# Unsafe operations on Mythryl values.


###                      "If you believe the doctors, nothing is wholesome;
###                       if you believe the theologians, nothing is innocent;
###                       if you believe the military, nothing is safe."
###
###                                               -- Lord Salisbury

api Unsafe {

    package c_interface:  Cinterface;				# Cinterface			is from   src/lib/std/src/unsafe/cinterface.api
    package unsafe_chunk: Unsafe_Chunk;				# Unsafe_Chunk			is from   src/lib/std/src/unsafe/unsafe-chunk.api
    package poll:  Poll;					# Poll				is from   src/lib/std/src/unsafe/poll.api

    package vector:      Unsafe_Vector;				# Unsafe_Vector			is from   src/lib/std/src/unsafe/unsafe-vector.api
    package rw_vector:   Unsafe_Rw_Vector;			# Unsafe_Rw_Vector		is from   src/lib/std/src/unsafe/unsafe-rw-vector.api

    package char_vector:  Unsafe_Monomorphic_Vector		# Unsafe_Monomorphic_Vector	is from   src/lib/std/src/unsafe/unsafe-monomorphic-vector.api
      where  Vector == char_vector::Vector
      where  Element == char_vector::Element;

    package rw_char_vector: Unsafe_Monomorphic_Rw_Vector	# Unsafe_Monomorphic_Rw_Vector	is from   src/lib/std/src/unsafe/unsafe-monomorphic-rw-vector.api
	where  Rw_Vector == rw_char_vector::Rw_Vector
	where  Element == rw_char_vector::Element;

    package unt8_vector:  Unsafe_Monomorphic_Vector		# Unsafe_Monomorphic_Vector	is from   src/lib/std/src/unsafe/unsafe-monomorphic-vector.api
      where  Vector == unt8_vector::Vector
      where  Element == unt8_vector::Element;

    package rw_unt8_vector: Unsafe_Monomorphic_Rw_Vector	# Unsafe_Monomorphic_Rw_Vector	is from   src/lib/std/src/unsafe/unsafe-monomorphic-rw-vector.api
      where  Rw_Vector == rw_unt8_vector::Rw_Vector
      where  Element == rw_unt8_vector::Element;


/** once we have flat real vectors, we can include this subpackage
    package float64_vector:  Unsafe_Monomorphic_Vector
      where type Vector = float64_vector::Vector
      where type Element = float64_vector::Element
**/
    package rw_float64_vector:  Unsafe_Monomorphic_Rw_Vector	# Unsafe_Monomorphic_Rw_Vector	is from   src/lib/std/src/unsafe/unsafe-monomorphic-rw-vector.api
      where  Rw_Vector == rw_float64_vector::Rw_Vector
      where  Element == rw_float64_vector::Element;

    get_handler:  Void -> fate::Fate( X );
    set_handler:  fate::Fate( X ) -> Void;

    # The reserved 'current_thread' register is used by
    # threadkit to hold the currently executing thread.
    # This is a real register on RISC architectures but
    # a memory location on the register-starved x86
    # architecture -- see src/lib/compiler/codegen/x86/x86-fps-registers.pkg
    #
    get_current_thread_register:  Void -> X;
    set_current_thread_register:  X -> Void;

    get_pseudo:  Int -> X;
    set_pseudo:  ((X, Int)) -> Void;

    blast_read:  unt8_vector::Vector -> X;
    blast_write:  X -> unt8_vector::Vector;

    boxed:  X -> Bool;

    cast:  X -> Y;

    Run_Dyn_Dictionary
      = NILRDE
      | CONSRDE  (unt8_vector::Vector, unsafe_chunk::Chunk, Run_Dyn_Dictionary)
      ;

    p_struct:  Ref(  Run_Dyn_Dictionary );

    toplevel_fate:    Ref(  fate::Fate(  Void ) );

    signal_handler:   Ref (((Int, Int, fate::Fate( Void ))) ->  fate::Fate (Void));

};




## Copyright (c) 1997 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
