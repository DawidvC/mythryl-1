#
# Compute Tarjan's dominator derived graph from a dominator tree.
# This is used partly to computing path expressions.  Alternatively,
# it can also be used for testing for reducibility.  In particular,
# cycles involving more than one node represent irreducible loops
# in the flow graph.
#
# -- Allen Leung


generic package derived_graph (Dom:  Dominator_Tree): Derived_Graph
{
   package dom = Dom
   package g   = graph
   package gi  = Dom::GI
   package a   = rw_vector

   type derived_graph (N,E) = graph::graph (N,E graph::edge, Void)

   fun derived_graph (Dom as g::GRAPH dom) =
   let N              = dom.capacity ()
       my D as g::GRAPH d = gi::graph("derived graph", (), N) 
       my g::GRAPH cfg    = Dom::cfg Dom
       ancestors      = a::rw_vector (Dom::max_levels Dom, 0)
       levelsMap      = Dom::levelsMap Dom
       fun dfs lvl i = 
       let a::update (ancestors, lvl, i)
           d.add_node (i, cfg.node_info i)
           fun add_edge (e as (i, j, _)) =
               let level = a::sub (levelsMap, j)
               in if lvl < level then 
                     d.add_edge (i, j, e)  #  i idom j ! 
                  else
                     d.add_edge (a::sub (ancestors, level), j, e)
               end
       in  apply add_edge (cfg.out_edges i);
           apply (dfs (lvl+1)) (dom.next i)
       end
       
   in  apply (dfs 0) (dom.entries ());
       d.set_entries (dom.entries ());
       D
   end
   
}

