#
# This backend communicates with the daVinci tool.
#
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/lower/make7/visual.make6



package da_vinci: (weak)  Graph_Display {		# Graph_Display	is from   src/lib/compiler/lower/visualization/graph-display.api

   package l= graph_layout;	# graph_layout	is from   src/lib/compiler/lower/visualization/graph-layout.pkg
   package g= graph;	# graph	is from   src/lib/graph/graph.pkg

   fun suffix () = ".daVinci";
   fun program () = "daVinci";

   fun visualize out (g::GRAPH ggg)
       =
       {   l = REF 0;
	   fun new_label () = { l := *l + 1; "L" + int::to_string *l;};
	   spaces = "                                           ";
	   fun int n   = out (int::to_string n);
	   fun nl ()    = out "\n";
	   fun tab t   = out (string::substring (spaces, 0, t)) except _ => out spaces; end ;
	   fun nice l  =  string::to_string (string::map (fn '\t' => ' ';
							    c => c; end ) l);
	   fun quote s      = { out "\""; out s; out "\"";};
	   fun comma ()      = out ", ";   
	   fun atom (a, b)    = { out "a("; quote a; comma(); quote b; out ")";}; 
	   fun object l     = atom("OBJECT", nice l);
	   fun font_family f = atom("FONTFAMILY", f);
	   fun font_style s  = atom("FONTSTYLE", s);
	   fun color c      = atom("COLOR", c);
	   fun edge_color c  = atom("EDGECOLOR", c);
	   fun dir ()       = atom("_DIR", "none");
	   fun label l      = { object l;             comma(); 
			       font_family "courier"; comma();
			       font_style "normal"
			      ;}; 

	   exception FOUND  String;

	   fun node_attrib (l::LABEL l) => label l;
	       node_attrib (l::COLOR c) => color c;
	       node_attrib (l::BORDERLESS) => atom("_GO", "text");
	       node_attrib (l::BORDER_COLOR c) => color c;
	       node_attrib _ => ();
           end 

	   also
	   fun is_node_attrib (l::LABEL l) => TRUE;
		is_node_attrib (l::COLOR c) => TRUE;
		is_node_attrib (l::BORDERLESS) => TRUE;
		is_node_attrib (l::BORDER_COLOR c) => TRUE;
		is_node_attrib _ => FALSE;
           end 

	   also
	   fun edge_attrib (l::COLOR c)       => edge_color c;
		edge_attrib (l::ARROW_COLOR c) => edge_color c;
		edge_attrib (l::EDGEPATTERN p) => atom("EDGEPATTERN", p);
		edge_attrib l::DIR => dir();
		edge_attrib _ => ();
            end  

	   also
	   fun is_edge_attrib (l::COLOR c)       => TRUE;
		is_edge_attrib (l::ARROW_COLOR c) => TRUE;
		is_edge_attrib (l::EDGEPATTERN p) => TRUE;
		is_edge_attrib (l::DIR) => TRUE;
		is_edge_attrib _ => FALSE;
            end  

	   also
	   fun find_edge_label ((l::LABEL "") ! l) => find_edge_label l;
		find_edge_label ((l::LABEL l) ! _) => raise exception FOUND l;
		find_edge_label (_ ! l) => find_edge_label l;
		find_edge_label []     => ();
            end 

	   also
	   fun listify comma f []      => ();
		listify comma f [x]     => f x;
		listify comma f (x ! xs) => { f x; comma(); listify comma f xs;};
            end 

	   also
	   fun attributes t (p, gen) a
              =
	      {   tab t;
                  out "[\n";
	          tab (t+2);
                  listify comma gen (list::filter p a);
                  nl();
	          tab t;
                  out "]\n";
	      };

	   fun do_node t (n, a)
               =
	       { tab t; 
		 out "l(\""; int n; out "\", n(\"\",\n";
		 attributes (t+2) (is_node_attrib, node_attrib) a;
		 comma();
		 tab (t+2); out "[\n";
		 listify comma (do_edge (t+2)) (ggg.out_edges n);
		 tab (t+2); out "]))\n";
	       }

	   also
	   fun do_edge t (i, j, a)
             =
	      ({ find_edge_label a;
		tab t; out "l(\""; 
		int i; out "->"; int j; 
		#  Dummy label; daVinci chokes on duplicated edge names 
		out "-"; out (new_label()); 
		out "\", e(\"\",\n";
		attributes (t+2) (is_edge_attrib, edge_attrib) a;
		tab t; out ", r(\""; int j; out "\")))";}
		except FOUND l =>
		{ x = new_label();

		{ tab t; out "l(\""; int i; out("->" + x + "\", e(\"\", ");
		 attributes (t+2) (is_edge_attrib, edge_attrib) (l::DIR ! a);
		 out ", l(\""; out (new_label());
		 out "\", n(\"\",[a(\"OBJECT\",\"";
		 out l; out "\"), a(\"_GO\",\"text\")], ";
		 out("[l(\"" + x + "->"); int j; out "\", e(\"\", ";
		 attributes (t+2) (is_edge_attrib, edge_attrib) a;
		 tab t; out ", r(\""; int j; out "\")))]))))";
		};
		}; end 
	      );

	 out "[\n";
	   listify comma (do_node 2) (ggg.nodes ());
	   out "]\n"; 
       };
   
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
