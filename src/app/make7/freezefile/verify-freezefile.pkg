## verify-freezefile.pkg
## (C) 2000 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



# Verifying the validity of an existing freezefile.
#
#   - This is used for "paranoia" mode during bootstrap compilation.
#     Normally, make7 accepts freezefiles and doesn't ask questions,
#     but during bootstrap compilation it takes the freezefile only
#     if it is verified to be valid.



stipulate

    package dg=  intra_library_dependency_graph;	# intra_library_dependency_graph	is from   src/app/make7/depend/intra-library-dependency-graph.pkg
    package lg=  inter_library_dependency_graph;	# inter_library_dependency_graph	is from   src/app/make7/depend/inter-library-dependency-graph.pkg
    package m7=  make7_state;			# make7_state			is from   src/app/make7/main/make7-state.pkg
    package ts=  time_stamp;			# time_stamp			is from   src/app/make7/paths/timestamp.pkg

herein

    api Verify_Freezefile {

	Exportmap = iced_o7_map::Map( bare_o7::Bare_O7 );

	verify' : m7::Make7_State
                  ->
                  Exportmap
		  ->
                  ( anchor_dictionary::File,			#  library_path 
		    List( dg::Bare_Or_Iced_O7 ), 		#  export_nodes 
		    lg::Sublibrarylist,				#  sublibraries 
		    source_path_set::Set,			#  freezefiles 
		    Null_Or( version::Version )
                  )
		  ->
                  Bool;

	verify:  m7::Make7_State
                  -> Exportmap
                  -> lg::Library
                  -> Bool;
    };

    generic package verify_freezefile_g (package freezefile: Freezefile;)			# Freezefile	is from   src/app/make7/freezefile/freezefile-g.pkg
    :
    Verify_Freezefile									# Verify_Freezefile	is from   src/app/make7/freezefile/verify-freezefile.pkg
    {

	 Exportmap = iced_o7_map::Map( bare_o7::Bare_O7 );

	fun verify' (make7_state: m7::Make7_State) em args
	    =
	    {   args ->  (library_path, export_nodes, sublibraries, groups, version);

		groups = source_path_set::add (groups, library_path);
		policy = make7_state.make7_session.filename_policy;

		freezefile_name
                    =
		    filename_policy::make_freezefile_name
                        policy
                        library_path;

		fun invalid_member stable_timestamp i
                    =
                    {   p  = bare_o7::sourcepath i;

			bn = bare_o7::oh7_file_name i;
		    
			case (anchor_dictionary::time_stamp p, ts::last_file_modification_time bn)
			  
			     (ts::TIMESTAMP source_timestamp, ts::TIMESTAMP binary_timestamp)
				 =>
				 time::compare (source_timestamp, binary_timestamp) != EQUAL       or
				 time::compare (source_timestamp, stable_timestamp) == GREATER;

			     _   =>
                                 TRUE;
                        esac;
		    };

		fun thawed_sublibrary ( _,
                                    library_thunk
                                    , _		# MUSTDIE
                                   )
                    =
		    case (library_thunk ())
                      
                         lg::LIBRARY { real_or_virtual => lg::REAL { frozen_or_thawed => lg::FROZEN _, ... }, ... }
			     =>
			     FALSE;

		        _ => TRUE;
                    esac;

		fun invalid_group freezefile_timestamp p
                    =
		    case (anchor_dictionary::time_stamp p)
		      
		         ts::TIMESTAMP g_t
			     =>
			     time::compare (g_t, freezefile_timestamp) == GREATER;

		         _   => TRUE;
                    esac;

		valid_stamp
                    =
                    freezefile::lib_stamp_is_valid  make7_state;

		is_valid
                    =
		    case (ts::last_file_modification_time freezefile_name)
		      
		         ts::TIMESTAMP st
			     =>
			     {   my   (m, i)   =   reachable::reachable' export_nodes;

				 #  The library itself is included in "groups"... 

				 not (source_path_set::exists (invalid_group st) groups)
				 and
				 not (list::exists thawed_sublibrary sublibraries)
				 and
				 valid_stamp (library_path, export_nodes, sublibraries)
				 and
				 not (bare_o7_set::exists (invalid_member st) m);
			     };

		       _ => FALSE;
                    esac;
	    
		if   (not is_valid)
                    
		     winix::file::remove_file  freezefile_name
                     except
                         _ = ();
		fi;

		is_valid;
	    };

	fun verify _ _ lg::ERROR_LIBRARY
                =>
                FALSE;

	    verify make7_state em (group as lg::LIBRARY g)
		=>
		{   g ->   { o7_views_by_name, library_path, sublibraries, real_or_virtual, ... };

		    groups = reachable::groups_of group;

		    version
			=
			case real_or_virtual
			  
			     lg::REAL { version, ... } =>  version;
                             lg::VIRTUAL _             =>  NULL;
                        esac;

		    fun force f
			=
			f ();

		    verify'
                        make7_state
                        em
                        ( library_path,
			  map (#2 o force o #1) (symbol_map::vals_list  o7_views_by_name),
			  sublibraries,
                          groups,
                          version
                        );
		};
	end;						# fun verify
    };
end;
