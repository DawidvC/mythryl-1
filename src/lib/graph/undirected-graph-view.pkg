# undirected-graph-view.pkg
#  Undirected graph view.  This makes a graph get undirected.
#
#  -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

api Undirected_Graph_View {

    undirected_view
       :
       graph::Graph( N, E, G )
       ->
       graph::Graph( N, E, G );

};

package undirected_graph_view: (weak)  Undirected_Graph_View {		# Undirected_Graph_View	is from   src/lib/graph/undirected-graph-view.pkg
   
   package g    = graph;						# graph			is from   src/lib/graph/graph.pkg
   package sort = list_mergesort;					# list_mergesort	is from   src/lib/src/list-mergesort.pkg

   fun undirected_view (g::GRAPH graph)
       =
       {   fun adjacent_edges i
	       =
	       {   in_edges
                       =
                       map
                           (fn (i, j, e) =  (j, i, e))
                           (graph.in_edges i);

		   out_edges
                       =
                       graph.out_edges i;

		   sort::unique_sort
                       (fn ((i, j, _), (i', j', _))
                           =
			  if      (i <  i' ) LESS; 
			  else if (i == i')
                               if (j <  j' ) LESS;
			  else if (j == j' ) EQUAL;
			  else                 GREATER;  fi; fi;
			  else                 GREATER;  fi; fi
                       )
		       (in_edges @ out_edges);
	       };

	   fun adjacent_nodes i
	       =
	       {   next =  graph.next i;
		   prior =  graph.prior i;

		   sort::unique_sort  int::compare  (next @ prior);
	       };

	   fun has_edge (i, j)
               =
               graph.has_edge (i, j)  or
               graph.has_edge (j, i);


	   g::GRAPH {
	     name            => graph.name,
	     graph_info      => graph.graph_info,
	     new_id          => graph.new_id,
	     add_node        => graph.add_node,
	     add_edge        => graph.add_edge,
	     remove_node     => graph.remove_node,
	     set_in_edges    => graph.set_in_edges,
	     set_out_edges   => graph.set_out_edges,
	     set_entries     => graph.set_exits,
	     set_exits       => graph.set_entries,
	     garbage_collect => graph.garbage_collect,
	     nodes           => graph.nodes,
	     edges           => graph.edges,
	     order           => graph.order,
	     size            => graph.size,
	     capacity        => graph.capacity,
	     out_edges       => adjacent_edges,
	     in_edges        => adjacent_edges,
	     next            => adjacent_nodes,
	     prior            => adjacent_nodes,
	     has_edge,
	     has_node        => graph.has_node,
	     node_info       => graph.node_info,
	     entries         => graph.exits,
	     exits           => graph.entries,
	     entry_edges     => graph.entry_edges,
	     exit_edges      => graph.exit_edges,
	     forall_nodes    => graph.forall_nodes,
	     forall_edges    => graph.forall_edges
	   };
       };					# fun undirected_view 
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
