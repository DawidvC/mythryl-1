#  *********************************************************************** 
# 									   
#  Project: sml/Tk: an Tk Toolkit for sml	 			   
#  Authors: Burkhart Wolff, Kolyang, University of Bremen		   
#  Date: 25.9.95				 			   
#  Purpose of this file: General Error- and Warning Windows		   
# 									   
#  *********************************************************************** 

package error_and_warning_windows:   api 
				my error_window:         String -> basic_tk_types::Void_Callback -> basic_tk_types::Window
				my error:		 String -> basic_tk_types::Void_Callback -> Void
				my errs_occurred1: 	 String -> Void -> Void
				my errs_occurred:	 Void -> Void 
				my warning: 	         String -> basic_tk_types::Void_Callback -> Void
				my warning_window:	 String -> basic_tk_types::Void_Callback -> basic_tk_types::Window
				my this_warns: 	 String -> Void -> Void 
			    end
{
    local
	use basic_tk_types
    in
	local
	    use tk
	in

	    fun noaction ()
		=
		();

	    fun contbut quit
		=
		Button (make_widget_id(),[PACK_AT LEFT,  Fill X, Expand TRUE],
						    [TEXT "Continue", CALLBACK quit],[]);
	    fun message msg
		=
		Label (make_widget_id(),[Fill X, Expand TRUE],
					    [TEXT msg, RELIEF FLAT, WIDTH 50],[]);

	    fun tree2 msg quit
		=
		[message msg, contbut quit];

	    fun error_window msg quit
		=
		("error", [WINDOW_TITLE "Error"], tree2 msg quit, noaction);

	    fun error msg yes
		=
		open_window (error_window msg yes);

	    fun errs_occurred ()
		= 
		let errorquit  = fn () => close_window "error"
		in
		    error "Errors occurred" errorquit
		end;

	    fun errs_occurred1 nm ()
		=
		(let errorquit  = fn () => close_window "error"
				      in error nm errorquit end);



											    my
	    nogoon   =   fn () => close_window "warning";

	    fun nobut   msg yes
		=
		Button (make_widget_id(),[PACK_AT RIGHT, Fill X, Expand TRUE],
				    [TEXT "No",  CALLBACK  nogoon],[]);

	    fun message msg yes
		=
		Label (make_widget_id(),[Fill X, Expand TRUE],
					    [TEXT msg, RELIEF FLAT, WIDTH 25],[]);

	    fun yes_button  msg yes
		=
		Button (make_widget_id(),[PACK_AT LEFT,  Fill X, Expand TRUE],
						    [TEXT "Yes", CALLBACK yes],[]);
	    fun yesno   msg yes
		=
		Frame (make_widget_id(),[yes_button msg yes, nobut msg yes],
					    [],[],[]);

	    fun tree2   msg yes
		=
		[message msg yes, yesno msg yes];


	    fun warning_window msg yes
		=
		("warning", [WINDOW_TITLE "Warning"], tree2 msg yes, noaction);

	    fun warning msg yes
		=
		open_window (warning_window msg yes);

	    fun this_warns nm ()
		=
		(let yesWarns = fn () => close_window "warning"
				in warning nm  yesWarns end) ; 

	end; #  local use Tk 

    end; #  local use basic_tk_types 
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
