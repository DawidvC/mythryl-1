#
# Global code motion algorithm in SSA form.
# This is based on Cliff Click's algorithm.
# I've generalized it to 
# 
#   1. Take into account of execution frequencies to find the ``best'' 
#      position to move an instruction.
#   2. Perform partial redundancy elimination.  (not finished)
#
# -- Allen Leung (leunga@cs.nyu.edu)



###        "We should forget small efficiencies,
###         say about 97% of the time: 
###         premature optimization is the root
###         of all evil."
###
###             -- Donald Knuth, quoting C.A.R. Hoare



api SSA_GLOBAL_CODE_MOTION =
api 
   include SSA_OPTIMIZATION 
   my computeEarliest:  SSA::ssa -> rw_vector::Rw_Vector( SSA::block )
   my computeBest:      SSA::ssa *  rw_vector::Rw_Vector( SSA::block ) -> SSA::ssa
end 

generic package SSAGCM (SSA:  SSA) : SSA_GLOBAL_CODE_MOTION =
pkg
   package ssa  = SSA
   package control_flow_graph  = SSA::control_flow_graph
   package dom  = SSA::Dom
   package sp   = SSA::SP
   package rtl  = SSA::RTL
   package t    = RTL::T
   package w    = control_flow_graph::W
   package g    = graph
   package a    = rw_vector

   type flowgraph = SSA::ssa

   debug = LowCodeControl::getFlag "ssa-debug-gcm";

   name = "Global Code Motion"

   fun error msg = lowcode_error_message::error("SSAGCM", msg)

   i2s = int::to_string
   b2s = bool::to_string

   #  Compute the a mapping from ssa_id to earliest block that can be moved. 
   fun computeEarliest (SSA as g::GRAPH ssa) =
   let Dom         = SSA::dom SSA
       M           = ssa.capacity ()

       rtlTable      = SSA::rtlTable SSA
       blockTable    = SSA::blockTable SSA
       usesTable     = SSA::usesTable SSA
       defSiteTable  = SSA::defSiteTable SSA

          #  Tables 
       earliestTable = a::rw_vector (M,-1)  #  position for an instruction 
       entryPos    = Dom::entryPos Dom  #  Block_id -> entry position 
       levels      = Dom::levelsMap Dom #  Block id -> dominator level 

       /* 
        * For each value, try to schedule it as early as possible.
        * This is constrained by the position of an instruction's operand.
        */
       fun scheduleEarly (i, i') = 
           if a::sub (earliestTable, i) >= 0 then () 
           else if RTL::can'tMoveUp (i') then 
                (a::update (earliestTable, i, a::sub (blockTable, i))) 
           else
           let b = a::sub (blockTable, i)
               a::update (earliestTable, i, b) #  the initial position 
               fun scan ([], pos_i, depth_i) = pos_i
                 | scan (v . uses, pos_i, depth_i) =
                   if v < 0 then scan (uses, pos_i, depth_i)
                   else
                   let j       = a::sub (defSiteTable, v)
                       scheduleEarly (j, a::sub (rtlTable, j))
                       pos_j   = a::sub (earliestTable, j)
                       depth_j = a::sub (levels, pos_j)
                   in  #  print("\tearliest("$showVal v$")="$i2s pos_j$"\n"); 
                       if depth_j > depth_i then
                           scan (uses, pos_j, depth_j)
                       else
                           scan (uses, pos_i, depth_i)
                   end
               pos_i   = a::sub (entryPos, b)
               depth_i = a::sub (levels, pos_i)
               earliest = scan (a::sub (usesTable, i), pos_i, depth_i)
           in  #  if RTL::isLooker (a::sub (rtlTable, i)) then 
               /* print("Pass 1 "$showOp i$" orig="$i2s b $
                        " earliest="$i2s earliest $
                        "\n"); */
               /* if dominates (earliest, b) then () 
               else error "WTF! earliest > b"; */
               a::update (earliestTable, i, earliest)
           end

       #  Visit all the pinned instructions first 
       fun pass1 i =
           if RTL::can'tMoveUp (a::sub (rtlTable, i)) then
              (a::update (earliestTable, i, a::sub (blockTable, i));
               apply (fn (j, _, _) => scheduleEarly (j, a::sub (rtlTable, j))) 
                  (ssa.in_edges i)
              )
           else ()
   in  SSA::forallNodes SSA pass1; #  schedule earliest 
       earliestTable
   end


   #  Find the best position and move the instructions 
   fun computeBest (SSA as g::GRAPH ssa, earliestTable) =
   let Dom         = SSA::dom SSA
       M           = ssa.capacity ()

       rtlTable      = SSA::rtlTable SSA
       blockTable    = SSA::blockTable SSA
       usesTable     = SSA::usesTable SSA
       defSiteTable  = SSA::defSiteTable SSA

       levels  = Dom::levelsMap Dom #  Block id -> dominator level 
       succTable = SSA::succTable SSA
       freqTable = SSA::freqTable SSA   #  frequencies indexed by block id 
       idoms   = Dom::idomsMap Dom  #  Block id -> immediate dominator 
       moveOp  = SSA::moveOp SSA

       showOp  = SSA::showOp SSA
       showVal = SSA::showVal SSA

       fun dump (i, b, earliest, latest, best)
           = 
           print (showOp i$" orig="$i2s b $
                 " earliest="$i2s earliest $
                 " latest="$i2s latest $
                 " best="$i2s best $
                 "\n")

       /*
        * Schedule an instruction as late as possible.
        * Visited nodes are indicated by earliest = -1
        */  
       fun scheduleLate i = scheduleLate'(i, a::sub (rtlTable, i))
       and scheduleLate'(i, t::PHI _) = a::sub (blockTable, i)
         | scheduleLate'(i, t::SINK _) = a::sub (blockTable, i)
         | scheduleLate'(i, t::SOURCE _) = a::sub (blockTable, i)
         | scheduleLate'(i, i') =
           if a::sub (earliestTable, i) < 0 then a::sub (blockTable, i)
           else 
           let earliest = a::sub (earliestTable, i)
               a::update (earliestTable, i,-1) #  mark node as visited 
               b = a::sub (blockTable, i)

               #  Find the least common ancestor of two nodes in the dominator
               fun LCA(-1, b) = b
                 | LCA (a,-1) = a
                 | LCA (a, b) = 
                   let la = a::sub (levels, a)
                       lb = a::sub (levels, b)
                   in  if la > lb then LCA'(a, b, la-lb) else LCA'(b, a, lb-la) end
               and LCA'(a, b, 0) = LCA''(a, b)
                 | LCA'(a, b, l) = LCA'(a::sub (idoms, a), b, l - 1)
               and LCA''(a, b) =
                   if a == b then a else LCA''(a::sub (idoms, a), a::sub (idoms, b))
              
               fun scan ([],-1, trivialUsesOnly) = (b, trivialUsesOnly)
                 | scan([], latest, trivialUsesOnly) = (latest, trivialUsesOnly)
                 | scan((_, j, r) . es, latest, trivialUsesOnly) = 
                   let j' = a::sub (rtlTable, j)
                       pos_j = scheduleLate'(j, j')
                       my (latest, trivialUsesOnly) = 
                           case j' of
                              t::PHI { preds, ... } =>
                              let s = a::sub (usesTable, j)
                                  fun loop (b . bs, s . ss, lca) = 
                                       if s == r then loop (bs, ss, LCA (lca, b))
                                       else loop (bs, ss, lca)
                                    | loop(_, _, bs') = bs'
                              in  (loop (preds, s, latest), trivialUsesOnly) end
                           |  t::SINK _ => (LCA (latest, pos_j), trivialUsesOnly)
                           |  _ => (LCA (latest, pos_j), FALSE)
                   in  scan (es, latest, trivialUsesOnly) end
               my (latest, trivialUsesOnly) = 
                        scan (a::sub (succTable, i),
                             if RTL::can'tMoveDown i' then b else -1,
                             TRUE)

               #  if latest == -1 then the instruction is dead 
               /* Performance hack: if the instruction is a constant 
                * computation and if it is only used in a phi function,
                * then DO NOT hoist them up because that will just increase
                * register pressure!
                */
               fun find_best (pos, best_pos, best_freq) =
                   let w = a::sub (freqTable, pos) except _ => 
                               error (showOp i $
                                     " pos "$i2s pos$" earliest="$i2s earliest $
                                     " latest="$i2s latest$" orig="$i2s b $
                                     " pinned="$b2s (RTL::can'tMoveUp i'))
                       my (best_pos, best_freq) = 
                             if w < best_freq then (pos, w) 
                             else (best_pos, best_freq)
                   in if pos == earliest then best_pos
                      else find_best (a::sub (idoms, pos), best_pos, best_freq)
                   end

               fun isConstant i = 
                   (case a::sub (usesTable, i) of
                     [v] => v < 0 
                   | _ => FALSE
                   )
               best = if earliest == -1 then -1 
                          else if latest == -1 then -1
                          else if trivialUsesOnly and isConstant (i) 
                          then latest
                          else find_best (latest, latest, a::sub (freqTable, latest))
           in
               #  a::update (pos, i, best); 
               if best == -1 then ()
               else if best != b then 
                  (if *debug then dump (i, b, earliest, latest, best) 
                   #  Dump (i, b, earliest, latest, best); 
                 /*if dominates (best, latest) then () else error "best>latest";
                   if dominates (earliest, best) then () else error "early>best";
                  */
                   moveOp { id=i, block=best }
                  )
               
               #  Dump (i, b, earliest, latest, best); 
               best
           end

       fun pass2 i = 
             /* Warning: this must be pinned instead of can'tMoveDown
              * because an op that can't be moved down doesn't mean it
              * can't be moved up!   If this is not done the pos of i would
              * be wrong!
              */
             if RTL::pinned (a::sub (rtlTable, i)) then
                 (a::update (earliestTable, i,-1);
                  apply (fn (_, j, _) => (scheduleLate j;())) 
                     (a::sub (succTable, i)) 
                 )
             else ()

       fun pass3 i = (scheduleLate i; ())
   
       #
       # Now, try to perform partial redundancy elimination.
       # Given an instruction i, find its earliest position not constrained
       # by the closest dominating uses that are phi-nodes.

       /* 
       defsTable = SSA::defsTable SSA
       fun pre i = 
           if w8a::sub (visited, i) == 0w3 then ()
           else
           let w8a::update (visited, i, 0w3)
               rtl_i = a::sub (rtlTable, i)
               b_i   = a::sub (blockTable, i)  
           in  if RTL::can'tMoveUp rtl_i then () else 
               let earliest_i = a::sub (earliestTable, i)
                   depth_i    = a::sub (levels, earliest_i)
                   uses_i     = a::sub (usesTable, i)

                   fun moveable ([], phis, preds, earliest, depth) = 
                         (phis, preds, earliest)
                     | moveable (v . uses, phis, preds, earliest, depth) = 
                       if v < 0 then 
                          moveable (uses, phis, preds, earliest, depth) 
                       else
                       let j     = a::sub (defSiteTable, v)
                           b_j   = a::sub (blockTable, j)
                       in  if b_j == earliest_i then
                              case a::sub (rtlTable, j) of
                                t::PHI { preds, ... } => 
                                   moveable (uses, j . phis, preds, 
                                            earliest, depth)
                              | _ => ([], [], earliest) 
                                      #  not hoistable 
                           else 
                              let d_j = a::sub (levels, b_j)
                              in  if d_j < depth_i then
                                    if d_j > depth then
                                       moveable (uses, phis, preds, b_j, d_j)
                                    else
                                       moveable (uses, phis, preds, 
                                                earliest, depth)
                                  else
                                    ([], [], earliest) 
                              end
                       end

                   /* Is the phi-node partially redundant? 
                    * It is if is of the form t <- phi(..., t, ...)
                    */
                   fun replicationCost (newEarliest, preds, phi) =
                       let my [t] = a::sub (defsTable, phi)
                           uses = a::sub (usesTable, phi)

                           fun search (-1, best, bestCost) = (best, bestCost)
                             | search (X, best, bestCost) = 
                               let costX = a::sub (freqTable, X)
                                   my (best, bestCost) =
                                      if costX < bestCost then
                                         (X, costX) 
                                      else
                                         (best, bestCost) 
                               in  if X == newEarliest then (best, bestCost)
                                   else search (a::sub (idoms, X), best, bestCost)
                               end

                           fun cost ([], [], c) = c
                             | cost (p . ps, v . vs, c) = 
                               if v == t then 
                                  cost (ps, vs, c)
                               else
                                  let my (best, bestCost) = 
                                          search (p, p, a::sub (freqTable, p))
                                  in  cost (ps, vs, c + bestCost) end
                       in  cost (preds, uses, 0) end

   
                   start = a::sub (earliestTable, i)
                   d = a::sub (levels, start)
                   my (phis, preds, newEarliest) = 
                         moveable (uses_i, [], [], start, d)
               in  case phis of
                     [] => ()
                   | [phi] => 
                     let cost  = a::sub (freqTable, b_i)
                         cost' = replicationCost (newEarliest, preds, phi)
                     in  if cost' < cost then
                          (print("PARTITIALLY REDUNDANT ["$i2s b_i$"] " $
                                 showOp i$" depth="$i2s depth_i$"\n");
                           print("Cost="$w::to_string cost $
                                 " new cost="$w::to_string cost'$"\n");
                           print("USES:\n");
                           apply (fn v => 
                                if v < 0 then ()
                                else let j   = a::sub (defSiteTable, v)
                                         b_j = a::sub (blockTable, j)
                                         d_j = a::sub (levels, b_j)
                                     in  print("\t["$i2s b_j$"] "$showOp j $
                                               " depth="$i2s d_j$"\n")
                                     end) uses_i
                          ) 
                         else ()
                     end
                   | _ => ()
               end
           end

       fun pass4 i = 
           if RTL::can'tMoveUp (a::sub (rtlTable, i)) then
              (w8a::update (visited, i, 0w3); 
               apply (fn (j, _, _) => pre j) (ssa.in_edges i)
              )
           else ()
       */

   in
       SSA::forallNodes SSA pass2; #  schedule latest 
       SSA::forallNodes SSA pass3; #  schedule remaining source instructions 
       #  SSA::forallNodes SSA pass4; 
       SSA::changed SSA;
       SSA
   end

   #  Run the optimization 
   fun run SSA = computeBest (SSA, computeEarliest SSA)

end
