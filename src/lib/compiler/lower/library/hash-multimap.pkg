#
# Multimap enum that uses hashing.
#
# -- allen


package hash_multimap :> HASH_MULTIMAP =
pkg

   package s = hash_map

   type multimap (X,Y) = s::Map( X, List(Y) )  * Ref (Int)


   fun create x n = (s::create x n, REF 0)

   fun size (_, c)    = *c
   fun bucketSize (m, _) = s::bucketSize m
   fun is_empty (_, c) = *c = 0

   fun insert (m, c) (e as (x, y)) =
      (s::update m ((x,[y]), fn ys => y . ys); c := *c + 1)

   fun removeAll (m, c) i =
   let stuff = s::lookup m i
   in  s::remove m i; c := *c - length stuff
   end except _ => ()

   fun update (m, c) (e as (x, ys)) =
   let stuff = s::lookupOrElse m [] x
   in  s::set m e; c := *c - length stuff + length ys
   end

   fun lookup (m, _) i = s::lookup m i

   fun contains (m, _) i = s::contains m i

   fun count (m, _) i = length (s::lookupOrElse m [] i)

   fun toList (m, _) = s::toList m

   fun toDupList (m, _) =
   let fun collect (x,[], l)   = l
         | collect (x, h . t, l) = (x, h) . collect (x, t, l)
   in
       s::fold (fn ((x, ys), l) => collect (x, ys, l)) [] m 
   end

   fun clear (m, c) = (s::clear m; c := 0)

   fun dupApp f (m, _) =
   let fun call (x,[])   = ()
         | call (x, h . t) = (f (x, h); call (x, t))
   in
       s::apply call m
   end

   fun apply f (m, _) = s::apply f m

   fun dupFold f x (m, _) =
   let fun collect ((x,[]), l)   = l
         | collect((x, h . t), l) = collect((x, t), f((x, h), l))
   in
       s::fold collect x m
   end

   fun fold f x (m, _) = s::fold f x m

   fun to_string (f, g) m =
      "{ " $
          dupFold (fn ((x, y), "") => "(" + f x + ", " + g y + ")"
                   | ((x, y), l)  => "(" + f x + ", " + g y + "), " + l) 
                   "" m + "}"

end

