## dns-host-lookup.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6


stipulate
    package unt8= unt8_guts;	# unt8_guts	is from   src/lib/std/src/unt8.pkg
herein
package dns_host_lookupinternal
:
api {
    #  export extra element for internal use by Basis implementation 
    include Dns_Host_Lookup;		# Dns_Host_Lookup	is from   src/lib/std/src/socket/dns-host-lookup.api

    internet_address:  pre_socket::Internet_Address -> Internet_Address;
    un_internet_address:  Internet_Address -> pre_socket::Internet_Address;
}
  where  Address_Family == pre_socket::af::Address_Family
=
package {
    package sys_w= host_unt_guts;	# host_unt_guts	is from   src/lib/std/src/bind-sysword-32.pkg

    fun netdb_fun x = c_interface::c_function "Lib7-Sockets" x;

    Internet_Address     =  IPV4_ADDRESS  pre_socket::Internet_Address;
    Address_Family =  pre_socket::af::Address_Family;

    internet_address = IPV4_ADDRESS;

    fun un_internet_address (IPV4_ADDRESS a)
        =
        a;

    Entry = HOSTENT  {
	  name:  String,
	  aliases:  List( String ),
	  address_type:  Address_Family,
	  addresses:  List( Internet_Address )
	};

    stipulate

      fun conc field' (HOSTENT a)
          =
          field' a;
    herein
	name      =  conc .name;
	aliases   =  conc .aliases;
	address_type =  conc .address_type;
	addresses     =  conc .addresses;
	address      =  list::head o addresses;
    end;

    # Host DB query functions 
    #
    stipulate

	Hostent = ((String, List( String ), pre_socket::Raw_Address_Family,  List( pre_socket::Internet_Address )) );

	fun get_host_typechecked_package NULL => NULL;
	   get_host_typechecked_package (THE (name, aliases, address_type, addresses)) => THE (HOSTENT {
		name, aliases,
		address_type => pre_socket::af::ADDRESS_FAMILY address_type,
		addresses => list::map IPV4_ADDRESS addresses
	      } ); end;

	my get_host_by_name' : String -> Null_Or( Hostent ) = netdb_fun "getHostByName";
	my get_host_by_addr' : pre_socket::Internet_Address -> Null_Or( Hostent ) = netdb_fun "getHostByAddr";

    herein

	get_by_name = get_host_typechecked_package o get_host_by_name';
	fun get_by_address (IPV4_ADDRESS address) = get_host_typechecked_package (get_host_by_addr' address);

    end;

    fun scan getc stream
        =
        {   fun w2b w = unt8::from_large_unt (sys_w::to_large_unt w);
	    fun get_b (w, shft) = sys_w::bitwise_and (sys_w::(>>) (w, shft), 0uxFF);

	    fun mk_addr (a, b, c, d)
                =
                IPV4_ADDRESS (unt8_vector::from_list
                    [
		      w2b a, w2b b, w2b c, w2b d
		    ]
                );
	
	    case (pre_socket::to_words getc stream)
	       
	        THE ([a, b, c, d], stream)
                    =>
		    THE (mk_addr (a, b, c, d), stream);

	        THE ([a, b, c], stream)
                    =>
		    THE (mk_addr (a, b, get_b (c, 0u8), get_b (c, 0u0)), stream);

	        THE ([a, b], stream)
                    =>
		    THE (mk_addr (a, get_b (b, 0u16), get_b (b, 0u8), get_b (b, 0u0)), stream);

	        THE ([a], stream)
                    =>
		    THE (mk_addr (get_b (a, 0u24), get_b (a, 0u16), get_b (a, 0u8), get_b (a, 0u0)), stream);

	        _   => NULL;

            esac;
	};

    from_string = string_conversion::scan_string scan;

    fun to_string (IPV4_ADDRESS address)
        =
        {
	    fun get i
                =
                unt8_vector::get (address, i);
	  
	    pre_socket::from_bytes (get 0, get 1, get 2, get 3);
	};

    my get_host_name:  Void -> String = netdb_fun "getHostName";

  };

# Restrict to Dns_Host_Lookup:
# 
package dns_host_lookup: (weak)  Dns_Host_Lookup		# Dns_Host_Lookup		is from   src/lib/std/src/socket/dns-host-lookup.api
                       = dns_host_lookupinternal;		# dns_host_lookupinternal	is from   src/lib/std/src/socket/dns-host-lookup.pkg

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
