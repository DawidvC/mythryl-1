## oh7_file-cache-g.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



# A mechanism for keeping .o7 files for short periods of time.
#
#   This is used in "freeze" and in "make" where first there is a
#   "compile" treewalk that produces certain oh7_file contents, and
#   then there is a "link" treewalk that uses the oh7_file contents.
#
#   No error checking is done -- the "get" operation assumes that the
#   stuff is either in its cache or in the file system.
#
#   Moreover, the symbol table cannot be used (O7::senvOf will fail
#   if the oh7_file had to be reloaded from disk).
#
#
#
#
# GENERIC INVOCATION
#
#     This facility is used by both the standard and bootstrap compilers,
#     which is to say that our generic is invoked in both of:
#
#         src/app/make7/make-compiler/make-compiler-g.pkg
#         src/app/make7/main/make7-g.pkg


###                     "Though I'll admit readability suffers slightly..."
###
###                               -- Larry Wall in <2969@jato.Jpl.Nasa.Gov>


api Oh7_File_Cache {

    Oh7_File_Contents;

    Byte_Sizes = {   dictionary:      Int,
                     inlinable: Int,
                     data:      Int,
                     code:      Int
                 };

    make:
	Void
	->
	{ cache_oh7_file
	      :
	      ( bare_o7::Bare_O7,
		{ contents:   Oh7_File_Contents,
		  byte_sizes: Byte_Sizes
		}
	      )
	      ->
	      Void,

	  get :
	      bare_o7::Bare_O7
	      ->
	      { contents:   Oh7_File_Contents,
		byte_sizes: Byte_Sizes
	      }
	};


    extract_oh7_file_from_freezefile
       :
       { freezefile_name:  String,
	 offset:            Int,
	 description:       String
       }
       ->
       Oh7_File_Contents;
};


# We are invoked from:
#
#     src/app/make7/main/make7-g.pkg
#     src/app/make7/make-compiler/make-compiler-g.pkg

generic package oh7_file_cache_g (

    architecture_name: String;
)

: Oh7_File_Cache			# Oh7_File_Cache	is from   src/app/make7/compile/oh7-file-cache-g.pkg
  where
      Oh7_File_Contents == oh7_file::Oh7_File_Contents
=
package {

    package o7
        =
        oh7_file;			# oh7_file	is from   src/lib/compiler/execution/o7-file/oh7-file.pkg

    Oh7_File_Contents
        =
        o7::Oh7_File_Contents;

    Byte_Sizes
        =
        { dictionary:      Int,
          inlinable: Int,
          data:      Int,
          code:      Int
        };

    version
        =
        lib7_version::version.version_id;


    fun make ()
        =
        {   m =  REF  bare_o7_map::empty;		# bare_o7_map	is from   src/app/make7/o7/bare-o7-map.pkg

	    fun cache_oh7_file (i, x)
                =
                m :=  bare_o7_map::set (*m, i, x);

	    fun get i
                =
		case (bare_o7_map::get (*m, i))
		  
		     THE x
                         => x;

		     NULL
			 =>
			 {   oh7_file_name
                                 =
                                 bare_o7::oh7_file_name  i;

			     safely::do			# safely	is from   src/lib/std/safely.pkg
			         {
				   open_it    =>   .{ binary_io::open_for_read oh7_file_name; },
				   close_it   =>   binary_io::close_input,
				   cleanup    =>   fn _ =  ()
			         }
				.{   x =  o7::read { architecture_name,
						     version,
						     stream => #stream
						   };

				     cache_oh7_file (i, x);
				     x;
				 };
			 };
                esac;
	
	    {   cache_oh7_file,
	        get
	    };
	};

    fun extract_oh7_file_from_freezefile
            { freezefile_name, offset, description }
        =
        {   safely::do
		{
		  open_it  =>  .{ binary_io::open_for_read  freezefile_name; },
		  close_it =>   binary_io::close_input,
		  cleanup  =>   fn _ = ()
		}
               .{   # stream = #stream;

                    seek::seek ( #stream, file_position::from_int offset);

		    # We can use an empty symbol table
		    # because no unpickling will be done:
		    #
		    .contents (o7::read {  architecture_name,
					   version,
					   stream => #stream
				       }
			      );
	        };
	};
};
