## type-stuff.api 

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



api Type_Stuff {

    equality_property_to_string:  types::Equality_Property -> String;

    # Operations to build type_variables, VARtys:
    #
# 2009-04-17 CrT: Following is not actually used outside of defining file:
#    make_meta_type_variable:       Int -> types::Type_Variable;
    make_incomplete_record_type_variable:   (( List ((symbol::Symbol, types::Type))), Int) -> types::Type_Variable;
    make_user_type_variable:  symbol::Symbol -> types::Type_Variable;

    make_overloaded_literal_type_variable: (types::Literal_Kind, source_map::Source_Code_Region, List(String)) -> types::Type;
    make_overloaded_type_variable_and_type:  List(String) -> types::Type;

    make_meta_type_variable_and_type:  (Int, List(String)) -> types::Type;

    # Primitive operations on type constructors:
    #
    type_constructor_name:   types::Type_Constructor -> symbol::Symbol;
    type_constructor_stamp:  types::Type_Constructor -> stamp::Stamp;
    type_constructor_path:   types::Type_Constructor -> inverse_path::Inverse_Path;

    type_constructor_module_path:  types::Type_Constructor -> module_path::Module_Path;
    type_constructor_arity:       types::Type_Constructor -> Int;
    set_type_constructor_path:    (types::Type_Constructor, inverse_path::Inverse_Path) -> types::Type_Constructor;
    type_constructors_are_equal:  (types::Type_Constructor, types::Type_Constructor) -> Bool;
    make_constructor_type:        (types::Type_Constructor, List( types::Type )) -> types::Type;

    prune:  types::Type -> types::Type;

    typevar_refs_are_equal:    (types::Typevar_Ref, types::Typevar_Ref) -> Bool;

    resolve_type_variables_to_typescheme_slots:       List( types::Typevar_Ref ) -> Void;
    resolve_type_variables_to_typescheme_slots_1:     List( types::Typevar_Ref ) -> types::Type_Scheme_Arg_Eq_Properties;

    exception BAD_TYPE_REDUCTION;

    # Transform every
    #     CONSTRUCTOR_TYPE.type_constructor
    # in given type:
    #
    map_constructor_type_dot_type_constructor
        :
        (types::Type_Constructor -> types::Type_Constructor)	# Transform.
        ->
        types::Type						# Type to transform.
        ->
        types::Type;

    apply_type_scheme:  (types::Type_Scheme, List( types::Type )) -> types::Type;

    reduce_type:      types::Type -> types::Type;
    head_reduce_type:  types::Type -> types::Type;
    types_are_equal:   (types::Type, types::Type) -> Bool;

    type_constructor_equality:  (types::Type_Constructor, types::Type_Constructor) -> Bool;

    # Making a "generic" copy of a type:
    #
# 2009-04-17 CrT: Following is never actually used:
#    make_type_args:  Int -> List( types::Type );
    make_polymorphic_api:  Int -> types::Type_Scheme_Arg_Eq_Properties;

    datatype_constructor_to_type_constructor:  types::Constructor -> types::Type_Constructor;
    datatype_constructor_to_type:             (types::Type_Constructor, Null_Or( types::Type )) -> types::Type;

    # Matching a scheme against a target type -- used declaring overloadings:
    # 
    match_scheme:  (types::Type_Scheme, types::Type) -> types::Type;

    # Get rid of MACRO_EXPANDED indirections in a type:
    #
    drop_macro_expanded_indirections_from_type:  types::Type -> Void;  


    instantiate_if_type_scheme:  types::Type -> (types::Type, List( types::Type ));

    pkg_type_matches_api_type
        :
        { type_per_api:  types::Type,
          type_per_pkg:  types::Type
        }
        ->
        Bool; 

    type_variable_of_type:  types::Type -> types::Typevar_Ref;

    # Check if a bound type_variable has occurred in some datatypes, e::g.  List(X). 
    # this is useful for representation analysis; but it should be 
    # obsolete very soon -- zsh. 
    #
    get_recursive_type_variable_map:  (Int, types::Type) -> (Int -> Bool);
    label_is_greater_than:  (symbol::Symbol, symbol::Symbol) -> Bool;

    is_value:  { inlining_info_says_it_is_pure:  inlining_information::Inlining_Information -> Bool } -> deep_syntax::Deep_Expression -> Bool;
    is_variable_type:  types::Type -> Bool;

    sort_fields:   List( (deep_syntax::Numbered_Label, X))
		 ->  List( (deep_syntax::Numbered_Label, X));

    map_unzip:  (X -> (Y, Z)) -> List( X ) -> (List( Y ), List( Z ));

    Type_Constructor_Set;

    make_type_constructor_set:      Void -> Type_Constructor_Set;
    insert_type_constructor_into_set:  (types::Type_Constructor, Type_Constructor_Set) -> Type_Constructor_Set;
    filter_type_constructor_set:    (types::Type, Type_Constructor_Set) -> List( types::Type_Constructor );

    datatype_sibling:    (Int, types::Type_Constructor) -> types::Type_Constructor;
    extract_datatype_constructor: types::Type_Constructor -> List( types::Constructor );

    wrap_definition:  (types::Type_Constructor, stamp::Stamp) -> types::Type_Constructor;

       # make a type_constructor into a DEFINED_TYPE_CONSTRUCTOR by "eta-expanding" if necessary

    unwrap_definition_1:     types::Type_Constructor -> Null_Or( types::Type_Constructor );
    unwrap_definition_star:  types::Type_Constructor -> types::Type_Constructor;





};  #  Api Type_Stuff 


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
