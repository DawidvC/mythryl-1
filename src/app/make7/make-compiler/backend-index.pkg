## backend-index.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



# In
#     src/lib/core/make-compiler
#
# we have one compiler backend defined for each
# platform (==architecture+os) supported:
#
#     ppc-macos.make6
#     ppc-unix.make6
#     sparc-unix.make6
#     x86-unix.make6
#     x86-win32.make6
#
# Rather than have our compile servers
#
#     src/app/make7/main/compile-server.pkg
#
# have all backends loaded into memory at all times,
# we dynamically load backends only in response to
# explicit requests.
#
# The process of loading them on demand is taken care of in
#
#    src/app/make7/make-compiler/backend-per-platform.pkg



package backend_index {

    stipulate

	# Compile servers send us two kinds of
        # requests for forwarding to the backend:
	#
        #     NULL
	#     THE (build_directory, makefile)
	#
        # The first means to do a state reset.
	#
        # The second means to compile 'makefile',
        # putting resulting .o7 files &tc into
        # the directory tree rooted at
        # 'build_directory' (which is usually
        # build7, build7-1 or build7-2).
	#
	Backend_Request
	    =
	    Null_Or ( ( String,		# 'build_directory' string is root of the directory tree to compile into, often "build7", "build7-1" or "build7-2".
                        String		# 'makefile' string is .make6 file to compile, say "src/etc/root.make6" or "$ROOT/src/etc/root.make6".
                    ) )
	    ;

	Platform_Specific_Make_Function
	    =
	    Backend_Request
	    ->
	    Null_Or ( ( inter_library_dependency_graph::Library,
			(intra_library_dependency_graph::Bare_Or_Iced_O7 -> Bool),	# Compile treewalker.
			 anchor_dictionary::Anchor_Dictionary
		      )
		    ); 
					# inter_library_dependency_graph	is from   src/app/make7/depend/inter-library-dependency-graph.pkg
					# intra_library_dependency_graph	is from   src/app/make7/depend/intra-library-dependency-graph.pkg
					# anchor_dictionary		is from   src/app/make7/paths/anchor-dictionary.pkg

	per_platform_backend_function_map
	    =
            REF (string_map::empty: string_map::Map( Platform_Specific_Make_Function ));
    herein
        # This function is invoked (only)
        # by the init-time code in
        #     src/app/make7/make-compiler/make-compiler-g.pkg
	#
	fun register_per_platform_backend_function
                platform		# 'platform' string is architecture plus OS, e.g. "x86-linux" 
                backend_function	# Fn which returns closure to do one compile for server.
            =
	    per_platform_backend_function_map
            	:=
                string_map::set (
                	*per_platform_backend_function_map,
                        platform,
                        backend_function
                );

					# string_map	is from   src/lib/src/string-map.pkg


	# This function is invoked (only) by 'invoke' in
	#
	#     src/app/make7/make-compiler/backend-per-platform.pkg
	#
	fun invoke
		platform		# 'platform' string is architecture plus OS, e.g. "x86-linux" 
                backend_request		# See above comments on Backend_Request.
            =
            case (string_map::get (*per_platform_backend_function_map, platform))
	      
                 THE backend_function =>  backend_function  backend_request;
	         NULL                 =>  NULL;
            esac;
    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
