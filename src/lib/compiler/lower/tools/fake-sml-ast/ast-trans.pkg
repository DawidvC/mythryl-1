
# Compiled by:
#     src/lib/compiler/lower/tools/sml-ast.make6

# Translation from one sort to another



###                "Above the cloud with its shadow
###                 is the star with its light.
###                 Above all things reverence thyself."
###
###                                -- Pythagoras



generic package mdl_raw_syntax_translation_g (

    package raw_syntax_tree_pp:        Mdl_Ast_Prettyprinter;		# Mdl_Ast_Prettyprinter	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast-pp.api
    package raw_syntax_tree_rewriter:  Mdl_Ast_Rewriter;		# Mdl_Ast_Rewriter	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast-rewrite.api

     sharing raw_syntax_tree_rewriter::raw_syntax
                   ==
                   raw_syntax_tree_pp::raw_syntax;
)

: (weak) Mdl_Ast_Translation						# Mdl_Ast_Translation	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast-trans.api

{
    package raw_syntax = raw_syntax_tree_pp::raw_syntax;

    package a  =  raw_syntax;
    package r  =  raw_syntax_tree_rewriter;
    package h  =  hash_table;						# hash_table		is from   src/lib/src/hash-table.pkg
    package pp =  lowcode_prettyprinter;

    fun error msg
        =
        lowcode_error_message::error("mdl_raw_syntax_translation_g", msg);

    Map( X ) = { orig_name:  raw_syntax::Id,
                  new_name:   raw_syntax::Id,
                  type:     raw_syntax::Some_Type
                 } -> X;

    Folder( X ) = ({ orig_name:  raw_syntax::Id,
                     new_name:   raw_syntax::Id,
                     type:     raw_syntax::Some_Type }, X) -> X;

    fun id x = a::IDEXP (a::IDENT([], x));

    exception NO_NAME;

    # Treat a type expression as a pattern
    # and compute its set of  variable namings.
    # Duplicates are given unique suffixes.  

    fun namings_in_type type
	= 
	{   names_table
		=
		h::make_table
		    (hash_string::hash_string, (==))
		    (32, NO_NAME);

	    variables = REF 0;

	    fun enter_name id
		= 
		{   variables := *variables + 1;
		    my (_, total_count) = h::lookup names_table id;
		    total_count := *total_count + 1;
		}
		except
		    _ => h::set names_table (id, (REF 0, REF 1)); end ;

	    fun enter (a::IDTY (a::IDENT(_, id))) => enter_name id;
		enter (a::TYVARTY (a::VARTV id)) => enter_name id;
		enter (a::APPTY (a::IDENT(_, id), _)) => enter_name id;
		enter (a::CELLTY id) => enter_name id;
		enter (a::TUPLETY tys) => apply enter tys;
		enter (a::RECORDTY ltys) => apply (fn (id, _) => enter_name id; end ) ltys;
		enter t => error("namingsInType: " + pp::text (raw_syntax_tree_pp::type t));
	    end;

	    strip_ticks =   string::map (fn '\'' => 't';  c => c; end ); 

	    fun get_name id 
		= 
		{   my (current_count, total_count)
			=
			h::lookup names_table id;

		    strip_ticks(
			if   (*total_count == 1)
			    
			     id; #  use the same name 
			else 
			     current_count := *current_count + 1;
			     id + int::to_string *current_count;
			fi
		    );
		};
	  enter type;
	    (*variables, get_name);
	};


    # Translate a type into a pattern expression

    fun map_ty_to_pattern f' type
    =
    {   my (_, get_name) = namings_in_type type;

	fun f (id, type)
	    =
	    f'{ orig_name=>id, new_name=>get_name id, type };

	fun g (a::IDTY (a::IDENT(_, id)), type) => f (id, type);
	    g (a::TYVARTY (a::VARTV id), type) => f (id, type);
	    g (a::APPTY (a::IDENT(_, id), _), type) => f (id, type);
	    g (a::CELLTY id, type) => f (id, type);
	    g (a::TUPLETY tys, _) => a::TUPLEPAT (map g' tys);
	    g (a::RECORDTY ltys, _) => a::RECORD_PATTERN (map h ltys, FALSE);
	    g (t, _) => error("tyToPattern: " + pp::text (raw_syntax_tree_pp::type t));
	end 

	also
	fun g' t = g (t, t)
	also
	fun h (lab, type) = (lab, f (lab, type));
      g' type;
    };

    fun fold_type f' x type
	=
	{   my (_, get_name) = namings_in_type type;

	    fun f (id, type, x)
		=
		f'( { orig_name=>id, new_name=>get_name id, type }, x);

	    fun g (a::IDTY (a::IDENT(_, id)), type, x) => f (id, type, x);
		g (a::TYVARTY (a::VARTV id), type, x) => f (id, type, x);
		g (a::APPTY (a::IDENT(_, id), _), type, x) => f (id, type, x);
		g (a::CELLTY id, type, x) => f (id, type, x);
		g (a::TUPLETY tys, type, x) => fold_right g' x (reverse tys);
		g (a::RECORDTY ltys, type, x) => fold_right h x (reverse ltys);
		g (t, type, x) => error("foldTyNamings: " + pp::text (raw_syntax_tree_pp::type t));
	    end 
	    also
	    fun g'(t, x) = g (t, t, x)
	    also
	    fun h ((lab, type), x) = f (lab, type, x);

	    g'(type, x);
	};

    fun fold_cons f x (a::CONSBIND { type=>NULL, ... } ) => x;
	fold_cons f x (a::CONSBIND { type=>THE type, ... } ) => fold_type f x type;
    end;


    # Translate a type into an expression

    fun map_ty_to_expression f' type
	=
	{   my (_, get_name) = namings_in_type type;

	    fun f (id, type)
		=
		f'{ orig_name=>id, new_name=>get_name id, type };

	    fun g (a::IDTY (a::IDENT(_, id)), type) => f (id, type);
		g (a::TYVARTY (a::VARTV id), type) => f (id, type);
		g (a::APPTY (a::IDENT(_, id), _), type) => f (id, type);
		g (a::CELLTY id, type) => f (id, type);
		g (a::TUPLETY tys, type) => a::TUPLEEXP (map g' tys);
		g (a::RECORDTY ltys, type) => a::RECORD_EXPRESSION (map h ltys);
		g (t, _) => error("tyToPattern: " + pp::text (raw_syntax_tree_pp::type t));
	    end 
	    also
	    fun g' t = g (t, t)
	    also
	    fun h (lab, type) = (lab, f (lab, type));

	    g' type; 
	};


    # Translate a constructor into a pattern:
    #
    fun map_cons_to_pattern { prefix, id } (a::CONSBIND { id=>x, type, ... } )
	=
	a::CONSPAT (a::IDENT (prefix, x), null_or::map (map_ty_to_pattern id) type);


    # Translate a constructor into an expression:
    #
    fun map_cons_to_expression { prefix, id } (a::CONSBIND { id=>x, type, ... } )
	=
	a::CONSEXP (a::IDENT (prefix, x), null_or::map (map_ty_to_expression id) type);


    fun map_cons_arg_to_expression id (a::CONSBIND { type => NULL,       ... } ) =>   a::TUPLEEXP [];
	map_cons_arg_to_expression id (a::CONSBIND { type => THE type, ... } ) =>   map_ty_to_expression id type;
    end;


    fun map_cons_to_clause { prefix, pattern, expression } cons
	= 
	a::CLAUSE([pattern (map_cons_to_pattern 
		      { prefix, id=>fn { new_name, ... } = a::IDPAT new_name  } 
		      cons)],
		 NULL,
		 expression);

    fun cons_namings cons
	=
	{   fun enter ( { new_name, orig_name, type }, namings)
		=
		(new_name, type) ! namings;

	    namings = fold_cons enter [] cons; 

	    fun lookup (the_id:  raw_syntax::Id)
		=
		find namings
                where
		    fun find ((b as (x, t)) ! bs) => if (x == the_id ) (id x, t); else find bs;fi; 
			find [] => raise exception NO_NAME;
		    end;
		end;

	    lookup;
	};

    #  Simplification:
    #
    stipulate

       nil = r::no_rewrite;

       fun has_namings ps
	   = 
	   {   namings = REF FALSE;

	       fun pattern _ (p as a::IDPAT x) => { namings := TRUE; p;}; 
		   pattern _ p => p;
	       end;

	       apply
		   (fn p
		       =
		       {   .pattern
                               (r::rewrite { pattern, decl=>nil, sexp=>nil, expression=>nil, type=>nil })
                               p; 

			   ();
		       }
		   )
		   ps;

	       *namings;
	   };

       fun all_the_same []
               =>
               TRUE;

	   all_the_same (x ! xs)
               =>
               list::all
                   (fn x' =  x == x')
                   xs;
       end;

       exception DO_NOT_APPLY;

       fun reduce_expression ===> (expression as a::CASE_EXPRESSION (e,[]))
	       =>
	       expression;

	   reduce_expression ===> (a::SEQUENTIAL_EXPRESSIONS es)
	       =>
	       (a::SEQUENTIAL_EXPRESSIONS (fold_right (fn (a::TUPLEEXP [], es) => es;
			     (a::SEQUENTIAL_EXPRESSIONS [], es) => es;
			     (e, es) => e ! es; end 
			  ) [] es));

	   reduce_expression ===> (expression as a::CASE_EXPRESSION (e, all_cs as (c as a::CLAUSE (p1, NULL, e1)) ! cs))
	       => 
	       {   fun collect (a::CLAUSE([p], NULL, e), ps')
		       = 
		       ins ps'
                       where
			   fun ins [] => [([p], e)];

			       ins((ps, e') ! ps')
                                   => 
				   if (e == e' ) (p ! ps, e) ! ps';
				   else (ps, e') ! ins ps';
                                   fi;
			   end;
                       end;

		   ps' = fold_right collect [] (c ! cs);

		   fun or_pattern [p] => p;
		       or_pattern ps
			   =>
			   if (list::all (fn a::WILDCARD_PATTERN => TRUE;  _ => FALSE; end ) ps )
			      a::WILDCARD_PATTERN;
			   else a::OR_PATTERN ps;fi;
		   end;  

		   fun tuplepat [p] => p;
		       tuplepat ps  => a::TUPLEPAT ps;
		   end;

		   fun join ([p], e) => a::CLAUSE([p], NULL, e);

		       join (ps, e)
			   => 
			   { xs = map (fn a::TUPLEPAT (p ! ps) => (p, ps);
						    _ => raise exception DO_NOT_APPLY; end ) ps;
			       first_pats = map #1 xs;
			       rest_pats  = map #2 xs;

			     if (all_the_same (map tuplepat rest_pats) ) 
				  a::CLAUSE([tuplepat (or_pattern first_pats ! head rest_pats)],
					   NULL, e);
			       else raise exception DO_NOT_APPLY;fi;
			   } except dont'apply => a::CLAUSE([or_pattern ps], NULL, e); end ;
		   end;

		   cs = map join (reverse ps');

		 case cs
		   
		      [a::CLAUSE([a::TUPLEPAT []], NULL, body)] => body;
		      [a::CLAUSE([_], NULL, body as a::LISTEXP([], NULL))] => body;
		      [a::CLAUSE([a::TUPLEPAT (ps)], NULL, body)] => 
		       if (has_namings ps ) 
		       { fun elim_or (pattern as a::OR_PATTERN p) =>
				if (has_namings p ) pattern; else a::WILDCARD_PATTERN;fi;
			      elim_or pattern => pattern; end;
			 a::CASE_EXPRESSION (e,
			     [a::CLAUSE([a::TUPLEPAT (map elim_or ps)], NULL, body)]);
		       }; 
		       else body;fi;
		      [a::CLAUSE (ps, NULL, body)] => 
			if (has_namings ps ) a::CASE_EXPRESSION (e, cs); else body;fi;
		      _ => a::CASE_EXPRESSION (e, cs);
		 esac; 
	       };
	   reduce_expression ===> (expression as a::IF_EXPRESSION (a, b, c)) => if (b == c ) b; else expression;fi;
	   reduce_expression ===> e => e;
       end;

       simplifier
	   = 
	   r::rewrite { pattern=>nil, decl=>nil, expression=>reduce_expression, sexp=>nil, type=>nil };
    herein
       simplify_expression  =  simplifier.expression; 
       simplify_declaration =  simplifier.decl; 
       simplify_pattern     =  simplifier.pattern; 

       simplify_sexp = simplifier.sexp; 
       simplify_type = simplifier.type; 

       fun strip_marks  d
	   =
	   {   fun decl ===> (a::MARKDECL(_, d))
                       =>
                       d;

		   decl ===> d
                       =>
                       d;
               end;

	       .decl
                   (r::rewrite { pattern=>nil, decl, sexp=>nil, expression=>nil, type=>nil } )
                   d;
           };
    end;
};

