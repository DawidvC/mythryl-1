## codetree-extension-default.api --- translate codetrees to a flowgraph of target machine code.

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6




# This api describes how Codetree extensions are compiled.

api Codetree_Extension_Default {

    package codetree:   Codetree;			# Codetree		is from   src/lib/compiler/lower/codetree/codetree.api

    package codetree_stream
        :
        Codetree_Stream					# Codetree_Stream	is from   src/lib/compiler/lower/codetree/codetree-stream.api
        where codetree == codetree;

    package instruction_set:   Instruction_Set;		# Instruction_Set	is from   src/lib/compiler/lower/instruction/instruction-set.api

    package control_flow_graph
        :
        Control_Flow_Graph				# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where instruction_set == instruction_set
	also  pseudo_op == codetree_stream::instruction_stream::pseudo_op;


    # The reducer is given to the client
    # during the compilation of the
    # user extensions:
    #
    Reducer
       = 
       codetree_stream::Reducer (

           instruction_set::Instruction,
           instruction_set::cells::Cellset,
           instruction_set::Operand,
           instruction_set::Addressing_Mode,
           control_flow_graph::Control_Flow_Graph
       );

    compile_sext:   Reducer -> { statement: codetree::Sext, notes: List( codetree::Note ) } -> Void;
    compile_rext:   Reducer -> { e: (codetree::Some_Type, codetree::Rext ), rd:  cells_basis::Cell, notes: List( codetree::Note ) } -> Void;
    compile_fext:   Reducer -> { e: (codetree::Some_Type, codetree::Fext ), fd:  cells_basis::Cell, notes: List( codetree::Note ) } -> Void;
    compile_ccext:  Reducer -> { e: (codetree::Some_Type, codetree::Ccext), ccd: cells_basis::Cell, notes: List( codetree::Note ) } -> Void;
};







## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
