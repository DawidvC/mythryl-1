## binary-io-g.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

# Invoked in:
#     src/lib/std/src/unix/posix-binary-io.pkg
#     src/lib/std/src/win32/win32-binary-io.pkg

# Compare with:
#     src/lib/std/src/io/threadkit-binary-io-g.pkg



# QUESTION: What operations should raise exceptions
#           when the stream is closed?

stipulate
    package int           = int_guts;			# int_guts			is from   src/lib/std/src/bind-int-32.pkg
    package file_position = file_position_guts;		# file_position_guts		is from   src/lib/std/src/bind-position-31.pkg
herein
    generic package binary_io_g (

	package winix_primitive_io:  Winix_Primitive_Io	# Winix_Primitive_Io		is from   src/lib/std/src/io/winix-primitive-io.api
	  where primitive_io == binary_primitive_io;

    )
    : (weak)
    Binary_Io						# Binary_Io			is from   src/lib/std/src/io/binary-io.api

    {	package pio =  winix_primitive_io::primitive_io;

	package a   =  rw_unt8_vector;			# rw_unt8_vector		is from   src/lib/std/src/rw-unt8-vector.pkg
	package rs  =  rw_unt8_vector_slice;		# rw_unt8_vector_slice		is from   src/lib/std/src/rw-unt8-vector-slice.pkg
	package v   =  unt8_vector;			# unt8_vector			is from   src/lib/std/src/unt8-vector.pkg
	package vs  =  unt8_vector_slice;		# unt8_vector_slice		is from   src/lib/std/src/unt8-vector-slice.pkg
	package pos =  file_position;

	# An element for initializing buffers:
	#
	some_element = (0u0:  unt8::Unt);

	#  # Fast, but unsafe version (from unt8_vector)
	#     vecSub = inline_t::unt8_vector::get
	#     arrUpdate = inline_t::rw_unt8_vector::update
	#   /* fast vector extract operation.  This should never be called with
	#    * a length of 0.
	#    */
	#     fun vecExtract (v, base, optLen) = let
	# 	  len = v::length v
	# 	  fun newVec n = let
	# 		newV = assembly::a::create_s n
	# 		fun fill i = if (i < n)
	# 		      then (
	# 			inline_t::unt8_vector::update (newV, i, vecSub (v, base+i));
	# 			fill (i+1))
	# 		      else ()
	# 		in
	# 		  fill 0; newV
	# 		end
	# 	  in
	# 	    case (base, optLen)
	# 	     of (0, NULL) => v
	# 	      | (_, NULL) => newVec (len - base)
	# 	      | (_, THE n) => newVec n
	# 	    #  end case 
	# 	  end
	#
	vec_extract =  vs::to_vector o vs::make_slice;
	vec_get     =  v::get;
	rw_vec_set  =  a::set;
	empty       =  v::from_list [];

	package pure_io {

		 Vector        =  v::Vector;
		 Element       =  v::Element;

		 Reader        =  pio::Reader;
		 Writer        =  pio::Writer;
		 File_Position =  pio::File_Position;

		# *** Functional input streams ***
		# We represent an Input_Stream by a pointer to a buffer and an offset
		# into the buffer.  The buffers are chained by the "more" field from
		# the beginning of the stream towards the end.  If the "more" field
		# is EOS, then it refers to an empty buffer (consuming the EOF marker
		# involves moving the stream from immediately in front of the EOS to
		# to the empty buffer).  A "more" field of TERMINATED marks a
		# terminated stream.  We also have the invariant that the "tail"
		# field of the "info" package points to a more REF that is either
		# NOMORE or TERMINATED.

		Input_Stream = INPUT_STREAM  ((Input_Buffer, Int))

		also
		Input_Buffer
		    =
		    INPUT_BUFFER  {
			base_position:  Null_Or( File_Position ),
			more:  Ref( More ),
			data:  Vector,
			info:  Info
		      }
		also
		More
		  = MORE  Input_Buffer	#  forward link to additional data 
		  | EOS  Input_Buffer	#  End of stream marker 
		  | NOMORE		#  placeholder for forward link 
		  | TERMINATED		#  termination of the stream 

		also
		Info = INFO { reader:                   Reader,
			      read_vector:              Int -> Vector,
			      read_vector_nonblocking:  Null_Or (Int -> Vector),
			      closed:                   Ref( Bool ),
			      get_position:             Void -> Null_Or( File_Position ),
			      tail:                     Ref(  Ref(  More ) ), #  points to the more cell of the last buffer 
			      clean_tag:                clean_io::Tag
			    };


		fun info_of_ibuf (INPUT_BUFFER { info, ... } )
		    =
		    info;


		fun chunk_size_of_ibuf buf
		    =
		    {   my INFO { reader => pio::READER { chunk_size, ... }, ... }
			    =
			    info_of_ibuf buf;

			chunk_size;
		    };


		fun read_vector (INPUT_BUFFER { info=>INFO { read_vector=>f, ... }, ... } )
		    =
		    f;


		fun input_exn (INFO { reader=>pio::READER { name, ... }, ... }, ml_op, exn)
		    =
		    raise exception io_exceptions::IO { function=>ml_op, name, cause=>exn };

		# This exception is raised by
                #     read_vector_nonblocking
                # in the blocking case: 
		#
		exception WOULD_BLOCK;

		fun extend_stream (read_g, ml_op, buf as INPUT_BUFFER { more, info, ... } )
		    =
		    {   info ->   INFO { get_position, tail, ... };

			base_position =  get_position();
			chunk    =  read_g (chunk_size_of_ibuf buf);
			new_more =  REF NOMORE;

			buf' = INPUT_BUFFER {
				base_position,
                                info,
                                data => chunk,
				more => new_more
			      };

			next =   v::length chunk == 0   ??   EOS buf'
							::   MORE buf';

			more := next;
			tail := new_more;
			next;
		    }
		    except
			ex = input_exn (info, ml_op, ex);


		fun get_buffer (read_g, ml_op) (buf as INPUT_BUFFER { more, info, ... } )
		    =
		    case *more
		      
			 TERMINATED => (EOS buf);
			 NOMORE     => extend_stream (read_g, ml_op, buf);
			 more       => more;
		    esac;


		#  Read a chunk that is at least the specified size: 
		#
		fun read_chunk buf
		    =
		    {   my INFO { read_vector, reader=>pio::READER { chunk_size, ... }, ... }
			    =
			    info_of_ibuf  buf;

			case (chunk_size - 1)
			  
			     0 =>  (fn n =  read_vector n);

			     k =>  (fn n			#  round up to next multiple of chunk_size 
				       =
				       read_vector (int::quot((n+k), chunk_size) * chunk_size)
				   );
			esac;

		    };

		fun generalized_input get_buf
		    =
		    {   fun get (INPUT_STREAM (buf as INPUT_BUFFER { data, ... }, pos))
			    =
			    {   len = v::length data;

				if   (pos < len)
				    
				     ( vec_extract (data, pos, NULL),
				       INPUT_STREAM (buf, len)
				     );
				else
				     case (get_buf  buf)
				       
					  EOS buf   =>  (empty, INPUT_STREAM (buf, 0));
					  MORE rest =>  get (INPUT_STREAM (rest, 0));
					  _         =>  raise exception FAIL "bogus get_buf";
				     esac;
				fi;
			    };

			get;
		    };

		# Terminate an input stream:
		#
		fun terminate (INFO { tail, clean_tag, ... } )
		    =
		    case *tail
		      
			 m as REF NOMORE
			     =>
			     {   clean_io::remove_cleaner clean_tag;
				 m := TERMINATED;
			     };

			 m as REF TERMINATED
			     =>
			     ();

			 _   =>
			     raise exception MATCH;			# To quiet the compiler.
		    esac;


		fun read (stream as INPUT_STREAM (buf, _))
		    =
		    generalized_input
			(get_buffer (read_vector buf, "read"))
			stream;


		fun read_one (INPUT_STREAM (buf, pos))
		    =
		    {   buf ->  INPUT_BUFFER { data, more, ... };

			if   (pos < v::length data)
			    
			     THE (vec_get (data, pos), INPUT_STREAM (buf, pos+1));
			else
			     case *more
			       
				  MORE buf
				      =>
				      read_one (INPUT_STREAM (buf, 0));

				  EOS _
				      =>
				      NULL;

				  NOMORE
				      =>
				      case (extend_stream (read_vector buf, "read_one", buf))
				        
					   MORE rest =>   read_one (INPUT_STREAM (rest, 0));
					   _         =>   NULL;
				      esac;

				  TERMINATED
				      =>
				      NULL;
			      esac;
			fi;
		    };

		fun read_n (INPUT_STREAM (buf, pos), n)
                    =
                    {   fun join (item, (list, stream))
                            =
                            (item ! list, stream);

			fun input_list (buf as INPUT_BUFFER { data, ... }, i, n)
                            =
                            {
				len = v::length data;
				remain = len-i;

				if   (remain >= n)
				    
                                     ([vec_extract (data, i, THE n)], INPUT_STREAM (buf, i+n));
				else
                                     join (
				         vec_extract (data, i, NULL),
				         next_buf (buf, n-remain)
                                     );
                                fi;
			    }

			also
			fun next_buf (buf as INPUT_BUFFER { more, data, ... }, n)
                            =
                            case *more
                              
			         MORE buf   =>  input_list (buf, 0, n);
				 EOS buf    =>  ([], INPUT_STREAM (buf, 0));

				 TERMINATED => ([], INPUT_STREAM (buf, v::length data));

				 NOMORE     =>  case (extend_stream (read_vector buf, "read_n", buf))
				                  
                                                     MORE rest =>  input_list (rest, 0, n);
				                     _         =>  ([], INPUT_STREAM (buf, v::length data));
                                                esac;
                            esac;

			my (data, stream)
                            =
                            input_list (buf, pos, n);

			(v::cat data, stream);
		    };

		fun read_all (stream as INPUT_STREAM (buf, _))
                    =
                    {   (info_of_ibuf  buf)
                            ->
		            INFO { reader=>pio::READER { avail, ... }, ... };

		        # Read a chunk that is as large
                        # as the available input:
                        #
			fun big_chunk _
                            =
                            {   delta = case (avail ())
				          
                                             NULL  =>  chunk_size_of_ibuf buf;
				             THE n =>  n;
                                        esac;


				read_chunk  buf  delta;
			    };

			big_input
                            =
			    generalized_input (get_buffer (big_chunk, "read_all"));

			fun loop (v, stream)
                            =
                            if   (v::length v == 0)
			        
                                 ([], stream);
			    else
                                 my (l, stream')
                                     =
                                     loop (big_input stream);

				 (v ! l, stream');
			    fi;

			my (data, stream')
                            =
                            loop (big_input stream);

			(v::cat data, stream');
		    };

		# Return   THE k   if k <= amount characters
                # can be read without blocking. 
		#
		fun can_read (stream as INPUT_STREAM (buf, pos), amount)
                    =
                    {
			read_vector_nonblocking
                            =
                            case buf
			      
                                 INPUT_BUFFER { info as INFO { read_vector_nonblocking=>NULL, ... }, ... }
                                     =>
				     input_exn (info, "can_read", io_exceptions::NONBLOCKING_IO_NOT_SUPPORTED);


			         INPUT_BUFFER { info=>INFO { read_vector_nonblocking=>THE f, ... }, ... }
                                     =>
                                     f;
                            esac;


			fun try_input (buf as INPUT_BUFFER { data, ... }, i, n)
                            =
                            {   len    =  v::length data;
			        remain =  len - i;

				if   (remain >= n)
				     THE n;
				else next_buf (buf, n - remain);  fi;
			    }

			also
			fun next_buf (INPUT_BUFFER { more, ... }, n)
                            =
                            case *more
                              
			         MORE buf   =>  try_input (buf, 0, n);
				 EOS _      =>  THE (amount - n);
				 TERMINATED =>  THE (amount - n);

				 NOMORE
                                     =>
				     case (extend_stream (read_vector_nonblocking, "can_read", buf))
				       
                                          MORE b =>  try_input (b, 0, n);
				          _      =>  THE (amount - n);
                                    esac
				    except
                                        io_exceptions::IO { cause => WOULD_BLOCK, ... }
                                            =
                                            THE (amount - n);
                            esac;


			if   (amount < 0)
			     raise exception SIZE;
			else try_input (buf, pos, amount);  fi;
		    };

		fun close_input (INPUT_STREAM (buf, _))
                    =
                    case (info_of_ibuf  buf)
		      
                         INFO { closed => REF TRUE, ... }
                             =>
                             ();

			 info as INFO { closed, reader=>pio::READER { close, ... }, ... }
                             =>
			     {   terminate info;
				 closed := TRUE;

				 close ()
				 except
				     ex =  input_exn (info, "close_input", ex);
                             };
                    esac;


		fun end_of_stream (INPUT_STREAM (buf, pos))
                    =
                    case buf
		      
                         INPUT_BUFFER { more=>REF (MORE _), ... } =>  FALSE;
			 INPUT_BUFFER { more=>REF (EOS  _), ... } =>  TRUE;

			 INPUT_BUFFER { more, data, info=>INFO { closed, ... }, ... }
                             =>
			     if   (pos == v::length data)
			         
                                  case (*more, *closed)
				    
                                      (NOMORE, FALSE)
                                          =>
					  case (extend_stream
                                                   (read_vector buf, "end_of_stream", buf))
					    
					       (EOS _) =>  TRUE;
					       _       =>  FALSE;
					  esac;

				      _   => TRUE;
                                  esac;

			     else
                                  FALSE;
                             fi;
                    esac;


		fun make_instream (reader, data)
                    =
                    {   reader
                            ->
                            pio::READER { read_vector, read_vector_nonblocking, get_position, set_position, ... }; 

			read_vector'
                            =
                            case read_vector
			      
                                 NULL  =>  fn _ = raise exception io_exceptions::BLOCKING_IO_NOT_SUPPORTED;
				 THE f =>  f;
                            esac;


			read_vector_nonblocking'
                            =
                            case read_vector_nonblocking
			      
				 THE f
                                     =>
                                     THE (fn arg
                                             =
                                             case (f arg)
				               
                                                  THE x =>  x;
				                  NULL  =>  raise exception WOULD_BLOCK;
                                             esac
				    );

			         NULL  =>  NULL;
                             esac;


			get_position
                            =
                            case (get_position, set_position)
                              
			         (THE f,   THE _  ) =>  (fn () = THE (f()));
				 _                  =>  (fn () = NULL);
                            esac;


			more = REF NOMORE;

			closed_flag = REF FALSE;

			tag = clean_io::add_cleaner {

				init  =>  fn () =  closed_flag := TRUE,
				flush =>  fn () =  (),
				close =>  fn () =  closed_flag := TRUE
			      };

			info =  INFO {
                                  get_position,
				  reader,

                                  read_vector             =>  read_vector',
                                  read_vector_nonblocking =>  read_vector_nonblocking',

				  closed      =>  closed_flag,
                                  tail        =>  REF more,
				  clean_tag   =>  tag
			        };

			# What should we do about the position when there is initial data?? *
			# Suggestion: When building a stream with supplied initial data,
			# nothing can be said about the positions inside that initial
			# data (who knows where that data even came from!).

			base_position
                            =
                            if   (v::length data == 0)
			         get_position ();
			    else NULL;        fi;


			INPUT_STREAM ( INPUT_BUFFER { base_position, data, info, more },
			        0
                              );
		      };

		fun get_reader (INPUT_STREAM (buf, pos))
                    =
                    {
			buf ->
                            INPUT_BUFFER { data,
                                   more,
                                   info as INFO { reader, ... },
                                   ...
                                 };


			fun get_data (MORE (INPUT_BUFFER { data, more, ... } ))
                                =>
                                data ! get_data *more;

			    get_data _
                                =>
                                [];
                        end;

			terminate info;

			if   (pos < v::length data)
		            
                             ( reader,
			       v::cat (vec_extract (data, pos, NULL) ! get_data *more)
			     );
			else
                             ( reader,
                               v::cat (get_data *more)
                             );
                        fi;
		    };

		#  Get the underlying file position of a stream: 
		#
		fun file_position_in (INPUT_STREAM (buf, pos))
		    =
		    case buf
		      
			 INPUT_BUFFER { base_position => NULL,  info, ... }
			     =>
			     input_exn (info, "filePosIn", io_exceptions::RANDOM_ACCESS_IO_NOT_SUPPORTED);


			 INPUT_BUFFER { base_position => THE b, info, ... }
			     =>
			     file_position::(+) (b, file_position::from_int pos);
		    esac;


		Output_Stream
		    =
		    OSTRM  {
		      buf:          a::Rw_Vector,
		      pos:          Ref( Int ),
		      closed:       Ref( Bool ),
		      buffering:  Ref( io_exceptions::Buffering ),
		      writer:       Writer,
		      write_rw_vector:    rs::Slice -> Void,
		      write_vector:    vs::Slice -> Void,
		      clean_tag:    clean_io::Tag
		    };

		fun output_exception (OSTRM { writer=>pio::WRITER { name, ... }, ... }, ml_op, exn)
		    =
		    raise exception io_exceptions::IO { function=>ml_op, name, cause=>exn };


		fun is_closed_out (stream as OSTRM { closed=>REF TRUE, ... }, ml_op)
			=>
			output_exception (stream, ml_op, io_exceptions::CLOSED_IO_STREAM);

		    is_closed_out _
                        =>
                        ();
		end;

		fun flush_buffer (stream as OSTRM { buf, pos, write_rw_vector, ... }, ml_op)
		    =
		    case *pos
                      
			0 => ();

			n => {   write_rw_vector (rs::make_slice (buf, 0, THE n));
				 pos := 0;
			     }
			     except
				 any_exception = output_exception (stream, ml_op, any_exception);
		    esac;


		fun write (stream as OSTRM os, v)
		    =
		    {
			is_closed_out (stream, "write");

			os -> { buf, pos, buffering, ... };

			fun flush ()
			    =
			    flush_buffer (stream, "write");

			fun flush_all ()
			    =
			    os.write_rw_vector (rs::make_full_slice buf)
			    except
			        any_exception
                                    =
                                    output_exception
                                        (stream, "write", any_exception);

			fun write_direct ()
			    =
			    {   case *pos
				  
				     0 => ();
				     n => {   os.write_rw_vector (rs::make_slice (buf, 0, THE n));
					      pos := 0;
					  };
				esac;

				os.write_vector (vs::make_full_slice v);
			    }
			    except
				any_exception
                                    =
                                    output_exception
                                        (stream, "write", any_exception);

			fun insert copy_vec
			    =
			    {   buf_len  =  a::length buf;
				data_len =  v::length v;

				if   (data_len >= buf_len)
				    
				     write_direct ();
				else
				     i     =  *pos;
				     avail =  buf_len - i;

				     if   (avail < data_len)
				         
					  copy_vec (v, 0, avail, buf, i);
					  flush_all ();
					  copy_vec (v, avail, data_len-avail, buf, 0);
					  pos := data_len-avail;
				     else
					  copy_vec (v, 0, data_len, buf, i);
					  pos := i + data_len;

					  if   (avail == data_len   )   flush ();   fi;
				     fi;
				fi;
			    };

			case *buffering
			  
			     io_exceptions::NO_BUFFERING
				 =>
				 write_direct ();

			     _   =>
				 insert copy_vec
				 where 
				     fun copy_vec (from, from_i, from_len, to, to_i)
					 =
					 rs::copy_vec
					     { to,
					       di   =>  to_i,
					       from =>  vs::make_slice (from, from_i, THE from_len)
					     };
				 end;
			esac;
		    };

		fun write_one (stream as OSTRM { buf, pos, buffering, write_rw_vector, ... }, element)
		    =
		    {   is_closed_out (stream, "write_one");

			case *buffering
			  
			     io_exceptions::NO_BUFFERING
				 =>
				 {   rw_vec_set (buf, 0, element);

				     write_rw_vector (rs::make_slice (buf, 0, THE 1))
				     except
					 ex =  output_exception (stream, "write_one", ex);
				 };

			   _     =>
				 {   i = *pos;
				     i' = i+1;

				     rw_vec_set (buf, i, element); pos := i';

				     if   (i' == a::length buf)
				         
					  flush_buffer (stream, "write_one");
				     fi;
				 };
			esac;
		    };

		fun flush stream
		    =
		    flush_buffer (stream, "flush");

		fun close_output (stream as OSTRM { writer=>pio::WRITER { close, ... }, closed, clean_tag, ... } )
		    =
		    if   (not *closed)
		        
			 flush_buffer (stream, "close");
			 closed := TRUE;
			 clean_io::remove_cleaner clean_tag;
			 close();
		    fi;

		fun make_outstream (wr as pio::WRITER { chunk_size, write_rw_vector, write_vector, ... }, mode)
		    =
		    {   fun iterate (f, size, subslice)
			    =
			    lp
			    where
				fun lp sl
				    =
				    if   (size sl != 0)
				        
					 n = f sl;

					 lp (subslice (sl, n, NULL));
				    fi;
			    end;

			write_rw_vector'
			    =
			    case write_rw_vector
			      
				 NULL  =>  (fn _ =  raise exception io_exceptions::BLOCKING_IO_NOT_SUPPORTED);
				 THE f =>  iterate (f, rs::length, rs::make_subslice);
			    esac;


			write_vector'
			    =
			    case write_vector
				 NULL  =>  (fn _ =  raise exception io_exceptions::BLOCKING_IO_NOT_SUPPORTED);
				 THE f =>  iterate (f, vs::length, vs::make_subslice);
			    esac;


		      # Install a dummy cleaner:
		      #
		      tag = clean_io::add_cleaner {
			      init  => fn () =  (),
			      flush => fn () =  (),
			      close => fn () =  ()
			    };

		      stream = OSTRM {
			      buf         =>  a::make_rw_vector (chunk_size, some_element),
			      pos         =>  REF 0,
			      closed      =>  REF FALSE,
			      buffering =>  REF mode,
			      writer      =>  wr,
			      write_rw_vector   =>  write_rw_vector',
			      write_vector   =>  write_vector',
			      clean_tag   =>  tag
			    };

			clean_io::rebind_cleaner (tag, {
			    init  => fn () =  close_output  stream,
			    flush => fn () =  flush         stream,
			    close => fn () =  close_output  stream
			  } );

			stream;
		    };

		fun get_writer (stream as OSTRM { writer, buffering, ... } )
		    =
		    {   flush_buffer (stream, "getWriter");
			(writer, *buffering);
		    };


		# Position operations on outstreams

		Out_Position
		    =
		    OUT_POSITION  {
		      pos:  pio::File_Position,
		      stream:  Output_Stream
		    };

		fun get_output_position (stream as OSTRM { writer, ... } )
		    =
		    {   flush_buffer (stream, "get_output_position");

			case writer
			  
			     pio::WRITER { get_position=>THE f, ... }
				 =>
				 OUT_POSITION { pos => f(), stream }
				 except
				     ex = output_exception (stream, "get_output_position", ex);

			     _   =>
				 output_exception (stream, "get_output_position", io_exceptions::RANDOM_ACCESS_IO_NOT_SUPPORTED);
			esac;
		    };

		fun file_pos_out (OUT_POSITION { pos, stream } )
		    =
		    {   is_closed_out (stream, "filePosOut");
			pos;
		    };

		fun set_output_position (OUT_POSITION { pos, stream as OSTRM { writer, ... } } )
		    =
		    {   is_closed_out (stream, "set_output_position");

			case writer
			  
			     pio::WRITER { set_position=>THE f, ... }
				 =>
				 (f pos)
				 except
				     ex = output_exception (stream, "set_output_position", ex);

			     _   =>
				 output_exception (stream, "get_output_position", io_exceptions::RANDOM_ACCESS_IO_NOT_SUPPORTED);
			esac;
		    };

		fun set_buffer_mode (stream as OSTRM { buffering, ... }, io_exceptions::NO_BUFFERING)
			=>
			{   flush_buffer (stream, "setBufferMode");
			    buffering := io_exceptions::NO_BUFFERING;
			};

		    set_buffer_mode (stream as OSTRM { buffering, ... }, mode)
			=>
			{   is_closed_out (stream, "setBufferMode");
			    buffering := mode;
			};
		end;

		fun get_buffer_mode (stream as OSTRM { buffering, ... } )
		    =
		    {   is_closed_out (stream, "get_buffer_mode");
			*buffering;
		    };

	    };	 #  pure_io 

	Vector  = v::Vector;
	Element = v::Element;

	Input_Stream  =  Ref( pure_io::Input_Stream  );
	Output_Stream =  Ref( pure_io::Output_Stream );

	# * Input operations *
	fun read stream
            =
            {   my (v, stream')
                    =
                    pure_io::read *stream;

		stream := stream';

                v;
	    };

	fun read_one stream
	    =
	    case (pure_io::read_one *stream)
	      
		 NULL => NULL;
		 (THE (element, stream')) => { stream := stream'; THE element;};
	    esac;


	fun read_n (stream, n)
	    =
	    {   my (v, stream')
                    =
                    pure_io::read_n  (*stream, n);

		stream := stream';

                v;
	    };

	fun read_all (stream:  Input_Stream)
            =
            {   my (v, s)
                    =
                    pure_io::read_all *stream;

		stream := s;

                v;
	    };


	fun can_read (stream, n)
            =
            pure_io::can_read (*stream, n);


	fun lookahead (stream:  Input_Stream)
	    =
	    case (pure_io::read_one *stream)
	      
		 NULL => NULL;
		 (THE (element, _)) => THE element;
	    esac;


	fun close_input stream
	    =
	    {   my (s as pure_io::INPUT_STREAM (buf as pure_io::INPUT_BUFFER { data, ... }, _))
		    =
		    *stream;

		# Find the end of the stream:
                #
		fun find_eos (pure_io::INPUT_BUFFER { more=>REF (pure_io::MORE buf), ... } )
			=>
			find_eos buf;

		    find_eos (pure_io::INPUT_BUFFER { more=>REF (pure_io::EOS buf), ... } )
			=>
			find_eos buf;

		    find_eos (buf as pure_io::INPUT_BUFFER { data, ... } )
			=>
			pure_io::INPUT_STREAM (buf, v::length data);
		end;

		pure_io::close_input s;
		stream :=  find_eos buf;
	      };

	fun end_of_stream  stream
	    =
	    pure_io::end_of_stream  *stream;

	# Output operations:
	#
	fun write (stream, v)          =  pure_io::write(*stream, v);
	fun write_one (stream, c)      =  pure_io::write_one(*stream, c);
	fun flush stream               =  pure_io::flush *stream;
	fun close_output stream        =  pure_io::close_output *stream;
	fun get_output_position stream =  pure_io::get_output_position *stream;

	fun set_output_position (stream, p as pure_io::OUT_POSITION { stream=>stream', ... } )
	    =
	    {   stream := stream';
		pure_io::set_output_position p;
	    };

	fun make_instream (stream:  pure_io::Input_Stream)   =  REF stream;
	fun get_instream  (stream:  Input_Stream)              =  *stream;
	fun set_instream  (stream:  Input_Stream, stream')       =  stream := stream';

	fun make_outstream (stream:  pure_io::Output_Stream) =  REF stream;
	fun get_outstream  (stream:  Output_Stream)            =  *stream;
	fun set_outstream  (stream:  Output_Stream, stream')     =  stream := stream';

	 # * Open files *
	fun open_for_read filename
	    =
	    make_instream (pure_io::make_instream (winix_primitive_io::open_for_read filename, empty))
	    except
		ex =  {
# print ("binary-io-g.pkg: open_for_read: failed to open for input: '" + filename + "\n");

			  raise exception io_exceptions::IO { function=>"open_for_read", name=>filename, cause=>ex };
		      };

	fun open_for_write filename
	    =
	    make_outstream (pure_io::make_outstream (winix_primitive_io::open_for_write filename, io_exceptions::BLOCK_BUFFERING))
	    except
		ex =  {
			  raise exception io_exceptions::IO { function=>"open", name=>filename, cause=>ex };
		      };

	fun open_for_append filename
	    =
	    make_outstream (pure_io::make_outstream (winix_primitive_io::open_for_append filename, io_exceptions::NO_BUFFERING))
	    except
		ex =  {

			  raise exception io_exceptions::IO { function=>"open_for_append", name=>filename, cause=>ex };
		      };

    }; #  binary_io_g 
end;



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
