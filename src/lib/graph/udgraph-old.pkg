/*
 *  Undirected graph in adjacency list format.
 *
 *  -- Allen Leung
 */

generic package undirected_graph (A:  Rw_Vector) : Graph_Guts  {

   package g = graph
   package a = A

   fun graph (name, graph_info, n) =
   let adj           = a::rw_vector (n,[])
       nodes         = a::rw_vector (n, NULL)
       node_count    = REF 0
       edge_count    = REF 0
       entries       = REF []
       exits         = REF []
       new_nodes     = REF []
       garbage_nodes = REF []
       fun new_id () = case ! new_nodes of []  => a::length nodes
                                       | h . t => (new_nodes := t; h)
       fun garbage_collect () =
          (new_nodes := (*new_nodes) @ (*garbage_nodes); garbage_nodes := [])
       fun get_nodes () =
          a::keyed_fold_right (fn (i, THE n, l) =>(i, n) . l|(_, _, l) => l) [] (nodes, 0, NULL)
       fun get_edges () = 
          a::keyed_fold_right (fn (i, es, L) => fold_right (fn ((j, e), L) => 
                if i <= j then (i, j, e) . L else L) L es)
              [] (adj, 0, NULL)
       fun order () = *node_count
       fun size ()  = *edge_count
       fun capacity () = a::length nodes
       fun add_node (i, n) =
         (case a::sub (nodes, i) 
             of NULL => node_count := 1 + *node_count
              | _    => (); 
          a::update (nodes, i, THE n)
         )
       fun add_edge (i, j, e) = 
         (a::update (adj, i, (j, e) . a::sub (adj, i));
          if i != j then a::update (adj, j, (i, e) . a::sub (adj, j)) 
          edge_count := 1 + *edge_count)

       fun set_edges (i, edges) =
       let fun rmv ([], L) = L
             | rmv((e as (k, _)) . es, L) = rmv (es, if k == i then es else e . L)
           fun add (i, j, e) =
               if i != j then a::update (adj, j, (i, e) . a::sub (adj, j)) else ()
           old_edges = a::sub (adj, i)
       in  apply (fn (j, _) => a::update (adj, j, rmv (a::sub (adj, j),[]))) old_edges;
           apply add edges;
           a::update (adj, i, map (fn (_, j, e) => (j, e)) edges);
           edge_count := *edge_count + length edges - length old_edges
       end

       fun remove_node i =
          case a::sub (nodes, i) of
             NULL => ()
          |  THE _ => (set_edges (i,[]);
                        a::update (nodes, i, NULL);
                        node_count := *node_count - 1;
                        garbage_nodes := i . *garbage_nodes)

       fun remove_nodes ns = apply remove_node ns
       fun set_entries ns = entries := ns
       fun set_exits ns = exits := ns
       fun get_entries ()  = *entries
       fun get_exits ()  = *exits
       fun adj_edges i = map (fn (j, e) => (i, j, e)) (a::sub (adj, n))
       fun neighbors i = map #1 (a::sub (adj, i))
       fun has_edge (i, j) = list::exists (fn (k, _) => j = k) (a::sub (adj, i))
       fun has_node n = case a::sub (nodes, n) of
                           THE _ => TRUE | NULL => FALSE
       fun node_info n = case a::sub (nodes, n) of
                            THE x => x 
                          | NULL => raise exception g::NOT_FOUND
       fun forall_nodes f = 
           a::keyed_apply (fn (i, THE x) => f (i, x) | _ => ()) (nodes, 0, NULL)
       fun forall_edges f = a::keyed_apply (fn (i, es) => 
             apply (fn (j, e) => if i <= j then f (i, j, e) else ()) es)
                               (adj, 0, NULL)
       fun none _ = []

   in  g::GRAPH {
          name            = name,
          graph_info      = graph_info,
          new_id          = new_id,
          add_node        = add_node,
          add_edge        = add_edge,
          remove_node     = remove_node,
          set_in_edges    = set_edges,
          set_out_edges   = set_edges,
          set_entries     = set_entries,
          set_exits       = set_exits,
          garbage_collect = garbage_collect,
          nodes           = get_nodes,
          edges           = get_edges,
          order           = order,
          size            = size,
          capacity        = capacity,
          out_edges       = adj_edges,
          in_edges        = adj_edges,
          next            = neighbors,
          prior            = neighbors,
          has_edge        = has_edge,
          has_node        = has_node,
          node_info       = node_info,
          entries         = get_entries,
          exits           = get_exits,
          entry_edges     = none,
          exit_edges      = none,
          forall_nodes    = forall_nodes,
          forall_edges    = forall_edges
       }
   end 

};
