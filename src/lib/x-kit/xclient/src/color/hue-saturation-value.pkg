## hue-saturation-value.pkg
#
# Various color space utilities.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6



###         "I have never known any distress that an
###          hour's reading did not relieve."
###
###                             -- Charles Louis de Secondat,
###                                Baron de la Brede et de Montesquieu 



stipulate
    include rw_float_vector;							# float_vector			is from   src/lib/std/float-vector.pkg
    #
    package xt  = xtypes;							# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package fv  = rw_float_vector;						# float_vector			is from   src/lib/std/float-vector.pkg
herein
    package hue_saturation_value:  Hue_Saturation_Value {			# Hue_Saturation_Value		is from   src/lib/x-kit/xclient/src/stuff/color.api

	Hsv = fv::Rw_Vector;			# This should really be a read-only floatvector, but currently they are not actually a packed type -- See src/lib/std/src/float64-vector.pkg XXX BUGGO FIXME.
	    #					# Since we export Hsv as an opaque type, the difference is not critical.
	    # The above type was originally
	    #
	    #	Hsv = HSV { hue:          Float,
	    #		    saturation:   Float,
	    #		    value:        Float
	    #		  };
	    #
	    # which is fine when we are mainly
	    # interested in thinking of the color
	    # as a bag of components and are not
	    # doing anything particularly compute-
	    # intensive, but I'm interested in
	    # treating colors as conceptually
	    # atomic values used in ray-tracing
	    # and similar compute-intensive
	    # applications.
            #     In this context, a 3-vector of
            # floats is more time and space efficient:
	    # we replace a root record plus three
	    # boxed floats by a single vector record.
	    #     This is also more compatible with
	    # the OpenGL view of the world, which
	    # is built around float vectors rather
	    # than ML records.

	fun to_floats hsv
	    =
	    {   hue        = hsv[0];							# Eventually we'll probably want to suppress index checking here for speed, using unsafe:: operations or whatever. XXX BUGGO FIXME.
	        saturation = hsv[1];
	        value      = hsv[2];

	        { hue, saturation, value };
	    };

	fun from_floats { hue, saturation, value }					# Should do some sort of validation (restriction to [0,1) interval). What exception should we throw? Or should we silently truncate?  XXX BUGGO FIXME.
	    =
	    fv::from_list [ hue, saturation, value ];					# Eventually we need a way to avoid constructing lists while doing this; A compiler optimization or a new C primitive or something.  XXX BUGGO FIXME.

	fun max (a:  Float, b) = if (a >= b) a; else b; fi;
	fun min (a:  Float, b) = if (a <= b) a; else b; fi;

	fun rgb_to_hsv rgb
	    =
	    {   (rgb::to_floats rgb)
		    ->
		    (realr, realg, realb);

		max_v = max (realr, max (realg, realb));
		min_v = min (realr, min (realg, realb));

		delta = max_v - min_v;

		if (float::(====) (delta, 0.0))
		    #                
		    from_floats { hue=>0.0, saturation=>0.0, value=>max_v };
		else 
		    saturation = delta // max_v;

		    rc = (max_v - realr)//delta;
		    gc = (max_v - realg)//delta;
		    bc = (max_v - realb)//delta;

		    h1 = if   (float::(====) (realr, max_v) ) bc - gc;
			 elif (float::(====) (realg, max_v) ) 2.0 + rc - bc;
			 else 4.0 + gc - rc;
			 fi;
		    h2 = 60.0 * h1;                    #   Convert to degrees 

		    hue = if (h2 < 0.0)  h2 + 360.0; #  make nonnegative 
			  else           h2;
			  fi;

		    from_floats { hue, saturation, value=>max_v };
		fi;
	    };

	fun hsb_to_rgb  hsv
	    =
	    {	(to_floats hsv)
		    ->
		    { hue, saturation, value };

		if (float::(====) (saturation, 0.0))
		    #
		    rgb::from_floats (value, value, value);
		else
		    h = if (float::(====) (hue, 360.0))  0.0;
                        else                             hue//60.0;
                        fi;

		    i = floor h;

		    ri = real i;
		    f = h - ri;

		    p = value*(1.0 -  saturation);
		    q = value*(1.0 - (saturation*f));
		    t = value*(1.0 - (saturation*(1.0 - f)));


		    case i
			#
			0 =>  rgb::from_floats (value, t, p);
			1 =>  rgb::from_floats (q, value, p);
			2 =>  rgb::from_floats (p, value, t);
			3 =>  rgb::from_floats (p, q, value);
			4 =>  rgb::from_floats (t, p, value);
			_ =>  rgb::from_floats (value, p, q);
		    esac;
		fi;
	    };
    };
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
