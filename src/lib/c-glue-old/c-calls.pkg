## c-calls.pkg 

# High-level interface for calling user C functions (LIB7-C)
#
# It is critical that this file agree with:
#         runtime/c-libs/lib7-ccalls/c-calls.h
#         runtime/c-libs/lib7-ccalls/c-calls.c


generic package ccalls (package cc_info:  Cc_Info) : Ansi_C_Calls  {

	package u = unsafe
	package uc = U.c_interface

	maxWordSzB = 4

	type word = unt32::word

	package c = cc_info

	#  Assert that the C types are not larger than 32 bits 
	if (C::longSzB > maxWordSzB) or
	           (C::intSzB > maxWordSzB) or
		   (C::ptrSzB > maxWordSzB) 
		then 
		    raise exception exceptions::FAIL "size of C word too big for LIB7-C"
		

	NArgs = 15  #  must agree with c-calls.h & c-calls.c 

	my say:  String -> Void = print

	#  implementation of an abstract pointer type 
	package caddress :> api eqtype caddr
                                  my NULL:  caddr
				  my index:  (caddr * Int) -> caddr
				  my difference:  (caddr * caddr) -> word
			      end
	    {
		type caddr = word

		my NULL:  word = 0w0

		#  index and difference assume pointers to bytes 
		fun index (p: caddr, i: Int) = unt32.+(p, (unt32::from_int i))
		fun difference (p: caddr, q: caddr) = 
		    unt32.-(p, q)
	    }
	use caddress

        # NOTE: order (i.e. naming) of this data type is critical
        # because the C side of the interface (c-calls.c, c-calls.h, etc.)
        # makes assumptions about variant tags.

	type cdata = 
	    Caddr of caddr
	  | Carray of rw_vector::Rw_Vector( cdata )
	  | Cchar of char
	  | Cdouble of real
	  | Cfloat of real
	  | Cfunction of List( cdata ) -> cdata
	  | Cint of word
	  | Clong of word
	  | Cptr of cdata
	  | Cshort of unt32::word
	  | Cstring of String  #  'char *' 
	  | Cstruct of List( cdata )
	  | Cunion of cdata
	  | Cvector of vector::Vector( cdata )
	  | Cvoid

	type ctype = 
	    CaddrT
	  | CarrayT of (Int * ctype)
	  | CcharT
	  | CdoubleT
	  | CfloatT
	  | CfunctionT of (List( ctype ) * ctype)
	  | CintT 
	  | ClongT
	  | CptrT of ctype
	  | CshortT
	  | CstringT 
	  | CstructT of List( ctype )
	  | CunionT of  List( ctype )
	  | CvectorT of (Int * ctype)
	  | CvoidT

	# ctype' is the rewritten representation of ctype that extends
	# the latter with size and (sometimes) with alignment information.

	type ctype' = 
	    CaddrT'
	  | CarrayT' of { nelems: Int, elemtyp: layout }
	  | CcharT'
	  | CdoubleT'
	  | CfloatT'
	  | CfunctionT' of { argtypes: List( layout ), rettype: layout }
	  | CintT'
	  | ClongT'
	  | CptrT' of layout
	  | CshortT'
	  | CstringT'
	  | CstructT' of layout
	  | CunionT' of List( layout )
	  | CvectorT' of { nelems: Int, elemtyp: layout }
	  | CvoidT'
	  | padT'
	withtype layout = { type: ctype', size: Int, align: Null_Or( Int ) }

	arrayCode = "A"
	intCode = "I"
        shortCode = "i"  #  Baby int 
	longCode = "L"
	charCode = "C"
	doubleCode = "D"
	floatCode = "R"
	functionCode = "F" 
	addrCode = "@"
	stringCode = "S"
	openStructCode = "("
	closeStructCode = ")"
	openUnionCode = "<"
	closeUnionCode = ">"
	vectorCode = "B"
	voidCode = "V"
	ptrCode = "P"
	padCode = "#"

	cat = string::cat
	largest = fold_right int::max 0
	sum = fold_right (op +) 0

	fun forAll _ [] = TRUE
	  | forAll p (x . xs) = (p x) and (forAll p xs)

	exception EmptyAggregate
	exception AggregateTooBig

	fun has_type (Caddr _) = CaddrT
	  | has_type (Carray a) = 
	    #  how to except 0-length arrays? 
	    CarrayT (rw_vector::length a,
		    has_type (rw_vector::get (a, 0)) except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => CvoidT )
	  | has_type (Cchar _) = CcharT
	  | has_type (Cdouble _) = CdoubleT
	  | has_type (Cfloat _) = CfloatT
	  | has_type (Cshort _) = CshortT
	  | has_type (Cint _) = CintT
	  | has_type (Clong _) = ClongT
	  | has_type (Cptr p) = CptrT (has_type p)
	  | has_type (Cstring _) = CstringT
	  | has_type (Cstruct l) = CstructT (map has_type l)
	  | has_type (Cunion u) = CunionT [has_type u]
	  | has_type (Cvector v) = 
	    #  how to except 0-length vectors? 
	    CvectorT (vector::length v,
		    has_type (vector::get (v, 0)) except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => CvoidT)
	  | has_type Cvoid = CvoidT

        fun dataSz (Cint _) = c::intSzB
	  | dataSz (Cshort _) = c::shortSzB
	  | dataSz (Clong _) = c::longSzB
          | dataSz (Cstring s) = (string::length s)*c::charSzB + 1
          | dataSz (Cchar _) = c::charSzB
          | dataSz (Cdouble _) = c::doubleSzB
          | dataSz (Cfloat _) = c::floatSzB

	fun stringSpace (Cstring s) = size s + 1
	  | stringSpace (Carray a) = 
	    ((stringSpace (rw_vector::get (a, 0))) except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => 0)
	  | stringSpace (Cstruct l) = sum (map stringSpace l)
	  | stringSpace (Cunion u) = stringSpace u
	  | stringSpace (Cvector a) = 
	    ((stringSpace (vector::get (a, 0))) except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => 0)
	  | stringSpace _ = 0
		
	#  Alignment/padding computations for the C side 
	# see "C -- A Reference Manual" by S. Harbison and G. Steele, Jr.
        # for details on how C aligns union/package members and array elems.

	#  Put these into rewrite if that's the only place they're used 
	fun roundUp (i, align)
            = 
	    {   r =   int::rem (i, align);

	        if r == 0   then i
                            else (i div align + 1) * align;
	    }

	fun computePadSz (size, align)
            =
            roundUp (size, align)-size

	fun mkPad size
            =
            {   type = padT',
                size,
                align = NULL
            }

	fun memberAlign init l
            = 
	    fold_right
                (   fn ( { align=THE al, size, type }, b) => int::max (al, b)
	             | (                           _, b) => b
                )
                init
                l

        fun foldMemberSize f init
            = 
	    fold_right (fn ( { align, size, type }, b) => f (size, b)) init

	fun memberSum x = foldMemberSize (op +) 0 x
	fun memberMax x = foldMemberSize int::max 0 x

	#  rewrite: ctype -> { type: ctype', size: Int, align: Null_Or( Int ) } 
	# size is the size of the ctype thing
        # NOT including the size of pointed-to sub-package
        # e.g., sub-package of Cptrs or Cstrings

	fun rewrite CaddrT
                =
                {   type = CaddrT',
                    size = c::ptrSzB,
                    align = THE c::ptrSzB
                }

 	  | rewrite (CarrayT (n, t))
		= 
		{   my t' as { align, size, type }
                        =
                        rewrite t;

		    {   type = CarrayT'{ nelems=n, elemtyp=t'},
                        size = n*size,
                        align
                    };
		}

	  | rewrite CcharT = { type=CcharT', size=c::charSzB, align=THE c::charSzB }

	  | rewrite CdoubleT = { type=CdoubleT', size=c::doubleSzB,
				align=THE c::doubleSzB }

	  | rewrite CfloatT = { type=CfloatT', size=c::floatSzB,
			       align=THE c::floatSzB }

	  | rewrite CintT  = { type=CintT', size=c::intSzB, align=THE c::intSzB }
	  | rewrite CshortT = { type=CshortT', size=c::shortSzB, align=THE c::shortSzB }
	  | rewrite ClongT = { type=ClongT', size=c::longSzB, align=THE c::longSzB }

	  | rewrite (CptrT t)
		= 
		{   t' = rewrite t;
		    { type=CptrT' t', size=c::ptrSzB, align=THE c::ptrSzB };
		}

	  | rewrite CstringT = { type=CstringT', size=c::ptrSzB,
				align=THE c::ptrSzB }

	  | rewrite (CunionT l)
		= 
		{   l' = map rewrite l;
		    al = memberAlign 0 l';
		    size = roundUp (memberMax l', al);

		    { type=CunionT' l', size=size, align=THE al };
		}

	  | rewrite (CstructT l)
		= 
		{   l' = map rewrite l;
		    al = memberAlign 0 l';

		    fun addPads ([], acc)
                            =
                            []

		      | addPads ((x as { type, size, align=THE al } ) . xs, acc)
			    = 
			    {   slack = computePadSz (acc, al);
				result = x . (addPads (xs, acc+slack+size));

			        if slack == 0   then result
			                        else mkPad slack . result;
			    }

		    l''   =   addPads (l', 0);
		    size    =   memberSum l'';
		    extra =   computePadSz (size, al);

		    l'''  =   if extra==0   then l''
                                            else l'' @ [mkPad extra];

		    { type=CstructT' l''', size=roundUp (size, al), align=THE al }
		}

	  | rewrite (CfunctionT (argtypes, rettype))
		= 
		{   atypes = map rewrite argtypes;
		    rtype = rewrite rettype;

		    {   size  = c::ptrSzB,
                        align = THE c::ptrSzB
                        type   = CfunctionT' {   argtypes = map rewrite argtypes,
				                rettype  = rewrite rettype
                                            },
                    }
		}

 	  | rewrite (CvectorT (n, t))
		= 
		{   my t' as { align, size, type }
                        =
                        rewrite t;

		    {   align,
                        size = n*size,
                        type  = CvectorT' {   nelems  = n,
                                             elemtyp = t'
                                         }
                    };
		}

	  | rewrite CvoidT = { type=CvoidT', size=0, align=NULL }

        fun typeToCtl arg
		= 
		{   charRange = 255;	 #  not 256 since 0 is C string delim 

		    fun  uToS bytes c	 #  unsigned int to string 
                        =
			{   fun aux (0, i, acc)
				    =
				    if i != 0 then raise exception AggregateTooBig
					      else acc

			      | aux (n, i, acc)
				    = 
				    {   q =   i div charRange;
					r =   i mod charRange + 1;

				        aux (n - 1, q, string::from_char (char::from_int r) + acc);
				    };

			    aux (bytes, c, "");
			};

		    fun aux { type=CaddrT', ... }
			    =
                            addrCode

		      | aux { type=CarrayT'{ nelems, elemtyp as { size, ... }}, ... }
			    =  
			    arrayCode + (uToS 2 nelems) + (uToS 2 size) + (aux elemtyp)

		      | aux { type = CintT',   size, ... } = intCode + (uToS 1 size)
		      | aux { type = CshortT', size, ... } = shortCode + (uToS 1 size)
		      | aux { type = ClongT',  size, ... } = longCode + (uToS 1 size)
		      | aux { type = CcharT',       ... } = charCode
		      | aux { type = CdoubleT',     ... } = doubleCode
		      | aux { type = CfloatT',      ... } = floatCode

		      | aux { type = CfunctionT'{ argtypes, rettype }, ... }
			    = 
			    functionCode + (uToS 1 (length argtypes)) + 
			    (cat (map aux argtypes)) + (aux rettype)

		      | aux { type = CptrT' (t as { size, align=THE al, ... } ), ... }
			    = 
			    ptrCode + (uToS 4 size) + (uToS 1 al) + (aux t)

		      | aux { type = CstringT',   ... } = stringCode
		      | aux { type = CstructT' [], ... } = raise exception EmptyAggregate

		      | aux { type = CstructT' l, size, ... }
			    =  
			    #  need to put size in here (?) 
			    openStructCode + (cat (map aux l)) + closeStructCode

		      | aux { type = CunionT' [], ... } = raise exception EmptyAggregate

		      | aux { type = CunionT' l, size, ... }
			    = 
			    openUnionCode + (uToS 1 size) + (cat (map aux l)) + 
			    closeUnionCode

		      | aux { type = CvectorT'{ nelems, elemtyp as { size, ... }}, ... }
			    =
			    vectorCode + (uToS 2 nelems) + (uToS 2 size) + (aux elemtyp)

		      | aux { type = CvoidT',    ... } = voidCode
		      | aux { type = padT', size, ... } = padCode + (uToS 1 size);

		    aux arg;
		}
	        
	libname = "Lib7-CCalls"

	fun cfun x = uc::c_function libname x

/**     # for debugging
	fun cfun s
            =
            {   print "naming C function '";
		print s;
		print "'\n";
		uc::c_function libname s);
            }
**/

	fun cbind (mf as (moduleName, funName))
            = 
	    {   f = uc::bindCFun mf;

		if (u::cast f != 0)
                then u::cast f
		else {   print ("can't find " + moduleName + "." + funName + "\n");
		         raise exception uc::CFUN_NOT_FOUND (moduleName + "." + funName);
                     };
	    }

	type arg_desc = String     #  type requirement 

	fun mkArgDesc t = typeToCtl (rewrite t)

	type dummy = Void

        my CFnDoCCall:  ((dummy -> dummy) *                 
		       Int *
		       List( arg_desc ) * 
		       arg_desc *
		       List( cdata ) *
		       Bool) -> (cdata * List( caddr ) ) = cfun "c_call"
	    
	exception BadReturnType of ctype
	exception BadArgumentType of ctype
	exception NotAPtr of ctype
        exception UnimplementedForType
	exception TooManyArgs of Int

	#  valid return types are types are "ground" types 
	fun validRetType CintT = TRUE
	  | validRetType CshortT = c::shortSzB = c::intSzB
	  | validRetType ClongT = c::longSzB = c::intSzB
	  | validRetType CvoidT = TRUE
	  | validRetType CstringT = TRUE
	  | validRetType CaddrT = TRUE
	  | validRetType CfloatT = TRUE
	  | validRetType CdoubleT = TRUE
	  | validRetType (CptrT _) = TRUE
          | validRetType CcharT = TRUE
	  | validRetType _ = FALSE

	fun validFunctionTypes (CfunctionT (args, ret)) = 
	    validRetType ret and (forAll validArgType args)
	  | validFunctionTypes (CarrayT(_, t)) = validFunctionTypes t
	  | validFunctionTypes (CptrT t) = validFunctionTypes t
	  | validFunctionTypes (CstructT l) = forAll validFunctionTypes l
	  | validFunctionTypes (CunionT l) = forAll validFunctionTypes l
	  | validFunctionTypes (CvectorT(_, t)) = validFunctionTypes t
	  | validFunctionTypes _ = TRUE
	also validArgType CaddrT = TRUE
	  | validArgType CintT = TRUE
	  | validArgType CshortT = c::shortSzB = c::intSzB
	  | validArgType ClongT = c::longSzB = c::intSzB
	  | validArgType (p as CptrT _) = validFunctionTypes p
	  | validArgType CstringT = TRUE
	  | validArgType (f as CfunctionT _) = validFunctionTypes f
	  | validArgType _ = FALSE

	#  need to do something here about function types 
	fun validPtr (CptrT _) = TRUE
	  | validPtr CstringT = TRUE
	  | validPtr _ = FALSE

	fun register freeFlag (name: String, args: List( ctype ), result: ctype)
            = 
	    {   (validRetType result) or (raise exception (BadReturnType result));

		apply (fn x => ((validArgType x) or 
				      (raise exception (BadArgumentType x));
				      ()))
                      args;

		nargs =  length args;

                (nargs > NArgs) and (raise exception (TooManyArgs nargs));

		my f:  dummy -> dummy
                    =  cbind (libname, name);

		args'   =   map mkArgDesc args;
		result' =   mkArgDesc result;

# 		say ("function \"" + name + "\" registered\n");  

		fn x => CFnDoCCall (f, nargs, args', result', x, freeFlag)
 		except (e as (winix::SYSTEM_ERROR (msg, errno))) =>
		         (say ("C call error: " + msg);
			  raise exception e)
		     | x => raise exception x;
	    }

	fun registerAutoFreeCFn args
            =
            #1 o (register TRUE args);

	registerCFn = register FALSE

	my CFnDatumMLtoC:  arg_desc * cdata -> (caddr * List( caddr ) )
            = 
	    cfun "datumMLtoC"

	fun datumMLtoC t
            = 
	    {   (validPtr t) or (raise exception (NotAPtr t));

		desc =   mkArgDesc t;

		fn d => CFnDatumMLtoC (desc, d);
	    }

	my CFnDatumCtoML:  arg_desc * caddr -> cdata
                        =   cfun "datumCtoLib7"

	fun datumCtoLib7 t
            = 
	    {   fun noFns (CfunctionT    _) = FALSE
		  | noFns (CstructT      l) = forAll noFns l
		  | noFns (CunionT       l) = forAll noFns l
		  | noFns (CarrayT  (_, t)) = noFns t
		  | noFns (CvectorT (_, t)) = noFns t
		  | noFns _                 = TRUE;

		(validPtr t) or (raise exception (NotAPtr t));

		(noFns t) or (raise exception UnimplementedForType);

		desc = mkArgDesc t;

		fn p => CFnDatumCtoML (desc, p);
	    }


	#  sizeof:  ctype -> Int 
        /* returns the number of bytes to represent ctype as 
         * a basic C data structre, NOT including any substructure
         * such as Cstrings or Cptrs
         */
        sizeof = .size o rewrite   #  this is overkill 

	#  sizeofDatum:  cdata -> Int 
        /* returns the number of bytes needed to represent cdata
         * as a C data package, INCLUDING substructure such 
         * as Cstrings and Cptrs
         * 
	 * Only basic (flat) types currently work.
         */
	sizeofDatum = dataSz

        stipulate free' = registerAutoFreeCFn("free",[CaddrT], CvoidT)
        herein fun free p = (free' [Caddr p]; ())
        end	

}	#  generic package ccalls 



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
