## source-code-source.pkg

# Compiled by:
#     src/lib/compiler/front/basics/basics.make6


# Here we record where the source code
# for a given compilation unit came from.
#
# Typically this will be a "foo.pkg" file
# in the host filesystem, but it might have
# been typed in interactively at the Mythryl
# prompt or such.
#
# We also track some related useful information
# such as where to send error messages generated
# while compiling the source code.



###			"Trust the Source, Luke."



package source_code_source: (weak) Source_Code_Source {		# Source_Code_Source	is from   src/lib/compiler/front/basics/source/source-code-source.api


    Input_Source
        =
        { source_map:  source_map::Sourcemap,			# source_map	is from   src/lib/compiler/front/basics/source/source-map.pkg
	  file_opened: String,
	  any_errors:  Ref( Bool ),

	  error_consumer:  prettyprint::Device,			# prettyprint	is from   src/lib/prettyprint/src/prettyprint.pkg
	  interactive:     Bool,				# 
	  source_stream:   file::Input_Stream			# file	is from   src/lib/std/src/unix/posix-file.pkg
	};

    fun say (msg:  String)
        =
        control_print::say msg;					# control_print	is from   src/lib/compiler/front/basics/print/printcontrol.pkg


    lexer_initial_position
        =
        2;							#  Position of first char according to mythryl-lex :(

    fun make_source
            ( file_name,	# Filename for source_stream, else "<Input_Stream>" or such.
              line_num,
              source_stream,
              interactive,
              error_consumer
            )
        =
	{ source_stream,
          interactive,
	  error_consumer,
          file_opened =>  file_name,
          any_errors  =>  REF FALSE,
	  source_map  =>  source_map::newmap (   lexer_initial_position, 
					 	 { file_name,
						   line   =>  line_num,
						   column =>  1
						  }
					     )
        };

    fun close_source ( { interactive=>TRUE, ... } : Input_Source)
            =>
            ();

	close_source ( { source_stream, ... } )
	    =>
	    {   # Apply say ["[closing ", (Pathnames::trim fileName), "]\n"];
		#
		file::close_input  source_stream		# file			is from   src/lib/std/src/unix/posix-file.pkg
                except
                    io_exceptions::IO _ =  ();			# io_exceptions		is from   src/lib/std/src/io/io-exceptions.pkg
	    };
    end;

    fun filepos ( { source_map, ... }: Input_Source) pos
        = 
	{   my  { file_name, line, column }
                =
                source_map::filepos source_map pos;		# source_map	is from   src/lib/compiler/front/basics/source/source-map.pkg

	    (file_name, line, column);
	};

};                                      #  package source_code_source 



## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
