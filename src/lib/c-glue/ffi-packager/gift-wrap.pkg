
# This is an experimental module which provides a higher level interface
# to ffi_packager.  Use this when you can.


local

    type filename   = String
    type regexp     = String
    type expr       = String
    type structname = String

    enumErrorHandler = "raise exception lib7_ffilib_basis::TYPE_ERROR"

    use ffi_packager

in

package gift_wrap_defaults {

    #  Utilities 
    to_lower       = string::map char::to_lower
    to_upper       = string::map char::to_lower

    #  Defaults 
    remove_rtti   = TRUE
    reexports     = ""
    reincludes    = ""
    enums         = []
    defines       = []
    other_defines = NULL
    objects       = REF [] :  Ref( List( object_maker::classHier ) )
    fun cleanup _     = ()
    fun make_constructor _ = FALSE
    fun make_accessors _   = FALSE
    fun make_mutators _    = FALSE
    fun remove_fptr _ = TRUE
    fun remove_f'   _ = TRUE
    file_regexp = ""
    macros_file = ""
    macros_header = []

     /* The output directory where new stuff are placed.  DO NOT use the 
      * same name as indir
      */
    out_dir = "FFI"


    f_filter  = "^f-[a-zA-Z]"
    st_filter = ""
    su_filter = ""

    fun f_files _ = ()
    fun su_files _ = ()
    fun st_files (_, d) = d 

    #  Defaults transforms 
    local
       use ffi_transforms
       infix ||
    in
       String =
	 ForeachParam (Do [
	   If (TyIs "ro uchar_obj ptr'") StringArg,
	   If (TyIs "ro uchar_obj ptr'" || TyIs "rw uchar_obj ptr'") StringRet])
       FastString =
	 ForeachParam (Do [
	   If (TyIs "ro uchar_obj ptr'") FastStringArg,
	   If (TyIs "ro uchar_obj ptr'" || TyIs "rw uchar_obj ptr'") StringRet])
       fun BoolIfCtypeIs t =
	    ForeachParam (If (CtyIs t) (Do [BoolRet, BoolArg]))
       fun BoolIfCnameIs x =
	    ForeachParam (If (CnameIs x) (Do [BoolRet, BoolArg]))
    end
}

generic package gift_wrap_g
( 
    #  Name of this library 
    my name:  String
    my name' : String

    # The output directory where new stuff are placed.  DO NOT use the 
    # same name as indir

    my out_dir:  String

    # Should we try to remove RTTI information from the generated files?
    # Doing so will make the system more compact, but may impact on
    # its use.

    my remove_rtti:  Bool

    # A version string supplied by the client.  This will be attached to
    # all generated files. 

    my version:  String


    # Only include definitions of these struct/union definitions

    my su_filter:  regexp
    my st_filter:  regexp
    my f_filter:   regexp


    # How to generate enums.
    # Generate all enums matching <regexp> in <filename> and name the
    # package <structname>

    my enums:   List( filename * structname * regexp )


    # How to generate defines:
    # Generate all define matching <regexp> in <filename> and name the
    # package <structname>

    my defines:   List( filename * structname *  List ( regexp * Bool ) )
    my file_regexp:  regexp

    my other_defines:   Null_Or( ffi_info * ffi_str * define::define_info -> Void )


    # Names of files from the old cmfile generated by c-glue-maker
    # to reinclude or reexport in the new file.
    # Reincludes means add it, but don't export its definitions.
    # Reexport means add it and export its definitions.

    my reincludes:  regexp
    my reexports:   regexp


    # Optional transformations on files 

    my f_files:  ffi_info * ffi_str * ffi_g * ffi_g -> Void
    my su_files:  ffi_info * ffi_str -> Void
    my st_files:  ffi_info * Ast::decl -> Ast::decl


    # Should we remove fptr/f' from the packages? 

    my remove_fptr:  ffi_info * ffi_str * ffi_g -> Bool
    my remove_f' : ffi_info * ffi_str * ffi_g -> Bool

    # Objects that we should know about

    my objects:  Ref( List( object_maker::classHier ) )


    # Filter out constructors 

    my make_constructor:  Ast::id -> Bool
    my make_accessors:    Ast::id -> Bool
    my make_mutators:     Ast::id -> Bool


    # For user "macros" generation

    my macros_file:  String
    my macros_header:  List(  Ast::decl )


    # Initialization/clean up actions

    my init:      ffi_info -> Void
    my cleanup:   ffi_info -> Void

)  : api end
{
    package ffi   = ffi_packager #  FFI Packager 
    package a     = ffi::Ast
    package u     = ffi::AstUtil
    package i     = lib7_nlffi_gen_info
    package obj   = object_maker
    package trans = ffi_transforms

    use ffi

    # ------------------------------------------------------------------------
    #
    # Common definitions
    #
    # ------------------------------------------------------------------------
    fun replace f r
        =
        r := f *r

    # fun upper s = str (char::to_upper (string::get (s, 0))) + string::extract (s, 1, NULL)
    #  name' = if UPPER then upper name else name

    #  An additional comment to all generated files 
    comment = ["SML-" + name' + " version " + version]

     #  Input directory where c-glue-maker dumps its stuff 
    in_dir = name + "-ffi"

     #  IS_XXX package goes here 
    undefines_dir = "../Undefines"

     #  The name of the c file where c-glue-maker gets its input 
    c_file = name + ".h"

     #  Regular expression to filter out unneeded stuff 
    file_regexp = if file_regexp == "" then "\\Q" + name + "\\E" else file_regexp

     #  The name of the file where all defines are defined 
    define_file = c_file + "-defines"

     #  The name of the cmfile we want to be generated 
    cm_file = in_dir + ".cm"

     # The path of the library linkage file provided by the user.
     # Note: add a ".." in front because it will be included from
     # the cmfile in the directory 'outdir'

    freezefile = "../../lib/" + name + "-lib.sml"

    fun findObject myClass
	=
	list::find (fn c => obj::is_member c myClass) (*objects)

    # ------------------------------------------------------------------------
    #
    # Read information generated by C-GLUE-MAKER
    # This is just initialization.
    #
    # ------------------------------------------------------------------------
    info = ffi::init
	{ indir=in_dir, #  the directory where c-glue-maker has dumped its stuff 
	 cmfile=cm_file, #  the name of the cm file generated 
	 cfile=c_file,    #  the C file where all the C definitions are held 
	 outdir=out_dir,  #  All output goes in this directory 
	 undefinesdir=undefines_dir,
	 filere=file_regexp,
	 comment=comment
	}

    my () = tr::declare info "^f-" (trans::ForeachParam trans::Enum) 
    my () = tr::declare info "^[su]-" (trans::ForeachParam trans::Enum) 
    my () = init (info)

    fun check f filename
        =
        f filename except 
		e as i::NoRTTI ty => 
		  (print (filename + ": NoRTTI: " + Ty::show ty + "\n"); raise exception e)
	      | e => 
		  (print (filename + ": " + exception_name e + "\n"); raise exception e)

    # ------------------------------------------------------------------------
    #
    # Recipe for dealing with enums:
    #
    # ------------------------------------------------------------------------
    errorHandler = exp::parse enumErrorHandler

    fun genEnums (filename, name, prefix)
	=
	{   fun ok an_enum
		=
		re::matches prefix (#1 (hd (enum::members an_enum)));

	    enums =   list::filter ok (enum::enums info);
	    gen =   { info, structName=name, errorHandler };

	    fun genEnum an_enum
		=
		if   enum::isEnumeration          an_enum
		then enum::genEnumsAsDatatype gen an_enum
		else enum::genEnumsAsInts gen     an_enum;

	    prog =   a::PACKAGE_DECL (name,[], NULL, a::DECLsexp (map genEnum enums));

	    writeFile (info, filename, prog);
	    cm::addImport (info, winix::path::from_dir_file { dir="..", file=filename } );
	    cm::addExport (info, "package " + name);
	}

    my () = apply genEnums enums

    # ------------------------------------------------------------------------
    #
    # Generate code for iptrs.sml
    #
    # ------------------------------------------------------------------------
    my () = iptr::genCode info

    # ------------------------------------------------------------------------
    #
    # A table of package that need to have their RTTI info defined  (?)
    #
    # ------------------------------------------------------------------------
    needsRTTITable = REF s::empty 

    fun addRTTI e
	=
	{   fun add x = needsRTTITable := s::add(*needsRTTITable, x);

	    exp::apply[App::E (fn a::IDexp (a::IDENT([S], "type")) => add S
			   | _ => ())] e;
	}

    fun needsRTTI prog = s::member(*needsRTTITable,*(str::name prog))

    # ------------------------------------------------------------------------
    #
    # Recipe for processing the s/u- files: 
    #   1. Remove the S__ or U__ prefix from package name
    #   2. For each field, add accessor functions and mutator functions
    #   3. If it is a struct add a constructor function
    #   4. Add type abbreviations 
    #
    # ------------------------------------------------------------------------
    fun processSU file
	=
	if   re::matches su_filter file
	then
	     {   prog =   read_file info file;

		 replace (map i::noBuiltinEnums) (str::body prog);

		 cname =   su_file::cstructname prog;

		 #  Get the fields 

		 fields =   su_file::fields prog 
			    except
				_ =>  {   print("Warning: can't find fields for " + cname + " in file " + file); 
					  [];
				      };		#  XXX 

		 # Remove the [SU]_ prefix from the package name 

		 if    str::isAnonymous prog
		 then  () 
		 else  replace (i::structnameToMLname) (str::name prog);

		 myname =   *(str::name prog);

		 hier =   findObject cname ;

		 # If the package represents an object then
		 # change the parameter of all functions to (X XXX_tag,Z) obj'

		case hier

		  of THE hier
			 =>
			 {   pat = [a::TYPEDpat (a::IDpat "x", Ty::parse "(X,Z) self")];

			     str::addToBodyFront (prog,
			       A.@@@["type self (X,Z) = obj' (su "  + 
				      obj::ml hier cname + "_tag X, Z) "]
			     );

			     replace (map
			      (fn decl as a::FUNdecl[a::FUNbind (f,[a::CLAUSE(_, _, e)])] =>
				   a::FUNdecl[a::FUNbind (f,[a::CLAUSE (pat, NULL, e)])]
				| decl => decl
			      )) (str::body prog);
			 }

		   | NULL => ();

		 #  Change all types from t_f_xxx to t_xxx 

		 str::renameTy (re::replace "^t_f_" "t_") prog;


		 #  Change all RTTI from typ_f_xxx to typ_xxx 

		 str::renameVal (re::replace "^typ_f_" "typ_") prog;

		 #  Add accessors and mutators 

		 fun make g
		     =
		     {   fun add f
			     =
			     (str::addToBody (prog, g f) except Unsupported => ());

			 apply add fields;
		     };

		 if    make_accessors myname
		 then  make (su_file::makeAccessor prog)
		 else  ();

		 if    make_mutators myname
		 then  make (su_file::makeMutator prog)
		 else  ();

		 #  Insert the following type definition 

		 str::addToBody (prog,
			      A.@@@["/*",
				  " * Type abbreviation",
				  " */",
				 "type t = ptr' su_obj (tag, rw)  "
				 ]);

		 # If it is a object and it is not the base class then 
		 # create a cast function

		 case hier of
			    THE hier => 
			      if obj::base hier cname != cname then
			      (str::addToBody (prog,
				   A.@@@["fun cast' x:  " + obj::ml hier cname + "( base ) =",
				       "    " + obj::str hier + "Downcast::downcast(" + 
					      ml::typeName cname + "_get_type::f, x)",
				       "fun cast (x:  " + obj::ml hier (obj::root hier)  + 
						 " X ) = cast'(Ptr::inject' x)"
				      ]
				      )
			      ) else ()
			  | NULL => ();


		 #  Remove all rtti definitions 

		 if    remove_rtti
		 then
		       str::filterValDecl
			   (fn (x, e) =>
			      if re::matches "^typ_" x then
				 if re::matches "\\bT\\.arr\\b" (exp::show e) then
				    (addRTTI e; TRUE)
				 else FALSE
			      else TRUE
			   ) prog 
		 else  ();


		 #  Insert constructor 

		 if    make_constructor myname and su_file::isStruct prog
		 then
		       str::addToBody (prog, su_file::makeConstructors prog fields)
		 else  ();


		 #  Insert use 
		 case hier of 
			     THE hier => str::addToHeader (prog, A.@@@["use " + obj::str hier]) 
			   | NULL => ();

		 #  Export this package in make7 file 

		 # Problem with using multiple libraries:
		 #  So don't export [SU]_[nnn] packages for now

		 export =   not (re::matches "^[SU]_[0-9]" myname);

		 str::export     prog :=   export;
		 str::cm_options prog :=   "(lambdasplit: infinity)";

		 outfile =   re::replace "-_" "-" file;

		 #  Apply client transformations  
		 su_files (info, prog);

		 str::write (outfile, prog);
	     }
	else ()

    my () = apply (check processSU) (listFiles info "^[su]-")



    # ------------------------------------------------------------------------
    #
    # Process the fptr-rtti-* files 
    # Remove the runtime type info on functions.
    # I'm eliminating these to make the library more compact.
    #
    # ------------------------------------------------------------------------

    fun processFptr file
	=
	{   prog =   read_file info file;

	    replace (map i::noBuiltinEnums) (str::body prog)

	    if    remove_rtti and not (needsRTTI prog)
	    then
		  ()  #  str::filterVal (fn "type" => FALSE | _ => TRUE) prog 
	    else
		  {   #  str::filterVal (fn "type" => TRUE | _ => FALSE) prog; 

		      cm::addImport'(info, file, "(lambdasplit: infinity)"); 

		      str::write (file, prog);
		  };
	}

    my () = apply (check processFptr) (listFiles info "^fptr-rtti-")

    # ------------------------------------------------------------------------
    #
    # Inline FptrRTTI::xxx and Callop::xxx
    # Remove all conversion Cvt::c_xxx/Cvt::ml_xxx conversion ops
    #
    # ------------------------------------------------------------------------
    fun inlining prog
	=
	{   #  Perform inlining of makecall and callop 

	    fun getDecl (file, id)
		=
		{   prog =   io::read_file (infile (info, file));
		    prog =   i::noBuiltinEnums prog;

		    fun decl (d as a::FUNdecl[a::FUNbind (x,[a::CLAUSE (ps, NULL, e)])], found)
                            =
			    if x == id   then THE (a::LETexp([d],[u::ID id]))
                                         else found;

		      | decl (d as a::VALdecl[a::VALbind (a::IDpat x, e)], found)
                            = 
			    if x == id   then THE e
                                         else found

		      | decl (d, found)
                            =
                            found

		    case decl::fold [Fold::D decl] NULL prog of
		      THE e => e
		    | NULL => raise exception FAIL("Can't find " + id + " in " + file);
		};

	    fun exp ===> (e as a::IDexp (a::IDENT([rtti], "makecall")))
                =
		(case re::grep "^FPtrRTTI_(\\d+) + " rtti of
		   THE [n] => 
		     ===>
		      (getDecl("fptr-rtti-" + n + ".sml", "makecall"))
		|  _ => e
		) 
	      | exp ===> (e as a::IDexp (a::IDENT([callop], "callop"))) = 
		(case re::grep "^Callop_(\\d+) + " callop of
		   THE [n] => 
		      getDecl("callop-" + n + ".sml", "callop")
		|  _ => e
		)
	      | exp ===> e = e;

	    prog =   map (decl::rewrite [Rewrite::E exp]) prog;

	    fun on f g prog
		= 
		{   fun decl (d as a::FUNdecl[a::FUNbind (x, _)])
			    = 
			    if f == x   then g d
					else d

		      | decl d
                            =
                            d;

		    map (decl::map [Map::D decl]) prog;
		};


	    #  Make a copy of f' and fptr 

	    fun copy (d as a::FUNdecl[a::FUNbind (f as "fptr", cs)])
		    =
		    [ d, a::FUNdecl[a::FUNbind("my_" + f, cs) ] ]

	      | copy d
                    =
                    [d];

	    prog =   list::cat (map copy prog);


	    #  Strip away conversions 

	    stripCvt
                =
                decl::map [Map::E 
		 (fn exp as a::APPexp (a::IDexp (a::IDENT(["Cvt"], convert)), e) => 
		    if re::matches "^(c|ml)_.*" convert then e else exp
		   | e => e)];


	    #  Strip away call/make_fptr 

	    stripCall
                =
                decl::map [Map::E
		(fn a::APPexp (a::IDexp (a::IDENT([], "call")),
			     a::TUPLEexp[funAddr, args]) =>
		    a::APPexp (funAddr, args)
		  | a::APPexp (a::IDexp (a::IDENT([], "make_fptr")),
			      a::TUPLEexp[makecall, link]) =>
		    a::APPexp (makecall, link)
		  | e => e)];

	    prog =   on "my_fptr" (stripCvt o stripCall) prog;


	    #  Strip away makecall 

	    stripMakecall
                =
                decl::map [Map::D
		    (fn a::FUNdecl[a::FUNbind("makecall",
				    [a::CLAUSE([a::IDpat "a", p], NULL, e)])] =>
		       a::FUNdecl[a::FUNbind("my_f'",[a::CLAUSE([p], NULL,
			   exp::subst [Subst::E (fn "a" => THE (u::APPLY("h", u::UNIT))
						|  _  => NULL)] e)])]
		      | a::FUNdecl[a::FUNbind("my_fptr",
				    [a::CLAUSE([a::TUPLEpat []], NULL,
					 a::APPexp (a::LETexp([f], _), _))])] =>
			  f 
		      | d => d
		    )];

	    prog =   on "my_fptr" stripMakecall prog;


	    fun decl (a::FUNdecl[a::FUNbind("my_f'", cs)])
                    =
		    a::FUNdecl[a::FUNbind("f'", cs)]

	      | decl (a::FUNdecl[a::FUNbind("f'", cs)])
                    =
                    a::SEQdecl []

	      | decl (a::SEQdecl[d]) =   d
	      | decl d               =   d;


	    prog =   map (decl::map [Map::D decl]) prog;

	    prog;
	}

    # ------------------------------------------------------------------------
    #
    # recipe for processing the f- files: 
    #
    # ------------------------------------------------------------------------
    fun processF file
	=
	if   re::matches f_filter file
        then
	     {   prog =   read_file info file;


		 # Remove the f_ prefix from the package name 

		 replace i::structnameToMLFunname (str::name prog);


		 # Remove c-glue-maker enum stuff: 
		 replace (map i::noBuiltinEnums) (str::body prog);
		 replace (map i::noBuiltinEnums) (str::sign prog);


		 #  Create a nice function called f with all the type conversions 

		 f =   f_file::makeNiceFun prog;


		 #  Perform inlining 

		 replace inlining (str::body prog);

		 f =   tr::apply prog f;

		 str::addToSig  (prog, fn::genSig  f);
		 str::addToBody (prog, fn::genCode f);


		 #  Add a function called g with labeled type arguments 

		 g =   f_file::makeLabeledFun f;

		 {   str::addToBody (prog, fn::genCode g);
		     str::addToSig  (prog, fn::genSig  g);
		 }
                 except
                     MissingCname => ();


		 #  Apply client transformations  

		 f_files (info, prog, f, g);


		 #  Remove runtime type info 

		 if    remove_rtti
                 then  str::filterVal (fn "type" => FALSE | _ => TRUE) prog
                 else  ();


		 #  Remove the functions f' and fptr from api 

		 if    remove_fptr (info, prog, f)
                 then
		       {   # str::filterValFromSig (fn "fptr" => FALSE | _ => TRUE) prog;

			   str::filterVal (fn "fptr" => FALSE | _ => TRUE) prog;
		       }
		 else  ();

		 if    remove_f'(info, prog, f)
                 then  str::filterValFromSig (fn "f'" => FALSE | _ => TRUE) prog
		 else  ();


		 #  Export this package in CM file 

		 str::export prog := TRUE;

	         str::write (file, prog);
	     }
	else
             ()

    my () = apply (check processF) (listFiles info "^f-[a-zA-Z]")

    # ------------------------------------------------------------------------
    #
    # Recipe for processing the st- and ut- files: 
    #
    #   If it is a GtkObject then change its tag to the one we have generated
    #   in Gtk.sig, that is, we change from C's name based equivalence to
    #   the one we've hacked up with phantom types.
    #
    # ------------------------------------------------------------------------
    fun processST file
	=
	if    re::matches st_filter file
        then
	      {   fun simple ()
                      =
                      cm::reinclude' (info, "(lambdasplit: infinity)") file;

		  fun complex (hier, c)
		      =
		      {   prog =   decl::nolocations (io::read_file (infile (info, file)));

			  fun change (a::LOCALdecl([a::OPENdecl _],[a::DATATYPEdecl _]))
                              =
			      A.@@@[ "type tag = "
				      + 
				     obj::str hier  +  "."  +  obj::ml hier c  +  "_tag"
				      + 
				     " "
				      + 
				     obj::str hier  +  ".base"
				   ]

			    | change d = d;

			  prog =   decl::map [Map::D change] prog;


			  #  Apply client transformations  

			  prog =   st_files (info, prog);

		          writeFile (info, outfile (info, file), prog);
			  cm::addImport'(info, file, "(lambdasplit: infinity)")
		      };

	          case re::grep "^st-(.*)\\.sml" file

		    of THE [c]
                           => 
			   (case findObject c
			      of THE hier
                                     => 
			             if    obj::base hier c != c
                                     then  complex (hier, c)
                                     else simple()

		               | NULL => simple()
		           )

		     | _ => simple();
	      }

	else ()

    my () = apply (check processST) (listFiles info "^[su]t-")


    # ------------------------------------------------------------------------
    #
    # How to process #defines
    #
    # ------------------------------------------------------------------------

    defines = define::readDefines (define_file, file_regexp)

    fun doDefines (filename, structname, todo)
	=
	{   filename = winix::path::from_dir_file { dir="..", file=filename };

	    prog = str::empty info { filename, name=structname };

	    defs = a::SEQdecl (map (fn (regexp, signed) => 
		      define::genConstants defines { regexp, signed } )
			     todo);

	    str::addToBody (prog, defs);
	    str::addToBody (prog, comment["User supplied definitions"]);

	    case other_defines
	      of THE f => f (info, prog, defines)
	       | NULL => ();

	    str::write (filename, prog);
	};

    my () = apply doDefines defines


    # ------------------------------------------------------------------------
    #
    # Generate macros
    #
    # ------------------------------------------------------------------------
    fun genMacros info
	=
	{   macros =   decl::nolocations (io::read_file macros_file);

	    fun macrosGen (defs, d as a::FUNdecl[a::FUNbind (name, cs)])
		    =
		    {   filename = "m-" + name + ".sml";              # XXX BUGGO FIXME

			f =   a::FUNdecl[a::FUNbind("f", cs)];

			prog = str::create info
				   { filename = macros_file,
				     name,
				     export   = TRUE,
				     header   = macros_header @ defs,
				     sign     = [],
				     abs      = FALSE,
				     body     = [f]
				   };

		        str::write (filename, prog);
		    }

	      | macrosGen (defs, d)
                    =
                    raise exception FAIL ("macrosGen: " + decl::show d);

	    fun gen (a::LOCALdecl (defs, ds))
                    =
                    apply (fn d => macrosGen (defs, d)) ds

	      | gen (a::SEQdecl ds)
                    =
                    apply (fn d => macrosGen([], d)) ds

	      | gen d
                    =
                    raise exception FAIL ("gen: " + decl::show d);

	    gen (macros);
	}

    my () = if macros_file != ""   then genMacros info
                                   else ()

    # ------------------------------------------------------------------------
    #
    # Just re-include/re-export files without any processing
    #
    # ------------------------------------------------------------------------

    my () = if reincludes != ""
            then 
		apply (cm::reinclude info) (listFiles info reincludes)
	    else ()

    my () = if reexports != ""
            then
		apply (cm::reexport info) (listFiles info reexports)
	     else ()

    my () = apply (cm::reinclude' (info, "(lambdasplit: infinity)"))
		(listFiles info "^(callop-)") 

    my () = cm::addImport (info, freezefile)
    my () = cm::addImport (info, "../../common/smlnj-ffilib-basis.cm")
    my () = cleanup (info)

    # ------------------------------------------------------------------------
    #
    # Finally write out the cm file
    #
    # ------------------------------------------------------------------------
    my () = cm::writeFile info

};

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
