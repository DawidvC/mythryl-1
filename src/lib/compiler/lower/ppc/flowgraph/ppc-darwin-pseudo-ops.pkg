## ppc-darwin-pseudo-ops.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/ppc.make6



# PPC/Darwin (aka MacOS X) pseudo operations.


generic package ppc_darwin_pseudo_op_g (

    package codetree:	Codetree;		# Codetree		is from   src/lib/compiler/lower/codetree/codetree.api

    package codetree_eval
	:
	Codetree_Eval				# Codetree_Eval		is from   src/lib/compiler/lower/codetree/codetree-eval.api
	where codetree == codetree;
)

: (weak)  Pseudo_Ops_Basis			# Pseudo_Ops_Basis	is from   src/lib/compiler/lower/flowgraph/pseudo-op-basis.api

{
    package codetree = codetree;

    package t   =  codetree;
    package pb  =  pseudo_op_basis_type;	# pseudo_op_basis_type	is from   src/lib/compiler/lower/flowgraph/pseudo-op-basis-type.pkg
    package ptf =  sfprintf;			# sfprintf		is from   src/lib/src/sfprintf.pkg


    package endian
        =
        big_endian_pseudo_op_g (		# big_endian_pseudo_op_g	is from   src/lib/compiler/lower/flowgraph/big-endian-pseudo-op-g.pkg
	    package codetree = codetree;
	    package codetree_eval=codetree_eval;
	    icache_alignment = 16;
	    max_alignment = THE 7;
	    nop = { size=>4, en=>0ux60000000: unt32::Unt };  #  FIX . ori 0, 0, 0 
	);

/* EXPAND
    package gnu_assembler_pseudo_ops = 
     gnu_assembler_pseudo_op_g (		# gnu_assembler_pseudo_op_g	is from   src/lib/compiler/lower/flowgraph/gnu-assembler-pseudo-op-g.pkg
         package t = t
	 labFmt = { gPrefix="", aPrefix="L"}
     )
*/

    Pseudo_Op( X )
        =
        pb::Pseudo_Op( t::Labexp, X ); 
  

    fun error msg
        =
        lowcode_error_message::error ("ppc_darwin_pseudo_op_g.", msg);


    size_of    =  endian::size_of;
    emit_value =  endian::emit_value;

    label_to_string = label::format_for_asm { g_prefix=>"", a_prefix=>"L"};

    fun pr_integer i
        =
	if  (integer::sign i < 0)   "-" + integer::to_string (integer::neg i); 
	else 			          integer::to_string i;
        fi;

    fun pr_int i
        =
        if   (i < 0)   "-" + int::to_string(-i);
        else                 int::to_string  i;
        fi;

    # operator precedences:
    # Note: these differ from C's precedences
    #	  2 MULT, DIV, LSHIFT, RSHIFT
    #	  1 AND, OR
    #	  0 PLUS, MINUS


    fun parens (str, prec, op_prec)
        = 
	if (prec > op_prec)   "(" + str + ")";
        else                        str;
        fi;

    fun lexp_to_string le
        =
        to_string (le, 0)

    also
    fun to_string (t::LABEL lab, _) => label_to_string lab; 
	to_string (t::LABEXP le, p) => to_string (le, p);

	to_string (t::CONST c, _)
            => 
	    (pr_int (t::constant::value_of c) except _ =  t::constant::to_string c);

	to_string (t::LITERAL i, _)
            =>
            pr_integer i;

	to_string (t::MULS(_, lambda_expression1, lambda_expression2), _)
            =>
            to_string (lambda_expression1, 2) + "*" + to_string (lambda_expression2, 2);

	to_string (t::DIVS (t::DIV_TO_ZERO, _, lambda_expression1, lambda_expression2), _)
            =>
	    to_string (lambda_expression1, 2) + "/" + to_string (lambda_expression2, 2);

	to_string (t::LEFTSHIFT(_, lambda_expression, count), prec) => to_string (lambda_expression, 2) + "<<" + to_string (count, 2);
	to_string (t::RIGHTSHIFTU(_, lambda_expression, count), prec) => to_string (lambda_expression, 2) + ">>" + to_string (count, 2);

	to_string (t::BITWISEAND(_, lambda_expression, mask), prec)
            => 
	    parens (to_string (lambda_expression, 1) + "&" + to_string (mask, 1), prec, 1);

	to_string (t::BITWISEOR(_, lambda_expression, mask), prec)
            => 
	    parens (to_string (lambda_expression, 1) + "|" + to_string (mask, 1), prec, 1);

	to_string (t::ADD(_, lambda_expression1, lambda_expression2), prec)
            => 
	    parens (to_string (lambda_expression1, 0) + "+" + to_string (lambda_expression2, 0), prec, 0);

	to_string (t::SUB(_, lambda_expression1, lambda_expression2), prec)
            => 
	    parens (to_string (lambda_expression1, 0) + "-" + to_string (lambda_expression2, 0), prec, 0);

	to_string _ => error "to_string";
    end;

    fun decls (fmt, labs)
        =
        string::cat 
            (map (fn lab =  (ptf::sprintf' fmt [ptf::STRING (lexp_to_string (t::LABEL lab))]))
                 labs);

    fun to_string (pb::ALIGN_SIZE n)   => ptf::sprintf' "\t.align\t%d" [ptf::INT n];
	to_string (pb::ALIGN_ENTRY)    => "\t.align\t4";	#  16 byte boundary 
	to_string (pb::ALIGN_LABEL)    => "\t.align\t2";

	to_string (pb::DATA_LABEL lab) => label_to_string lab + ":";
	to_string (pb::DATA_READ_ONLY) => "\t.const_data";
	to_string (pb::DATA)           => "\t.data";
	to_string (pb::BSS)	       => "\t.section\t__DATA, __BSS";
	to_string (pb::TEXT)           => "\t.text";
	to_string (pb::SECTION at)     => "\t.section\t" + quickstring::to_string at;
	to_string (pb::REORDER)        => "";
	to_string (pb::NOREORDER)      => "";

	to_string (pb::ASCII  s) =>  ptf::sprintf'  "\t.ascii\t\"%s\""  [ptf::STRING (string::to_cstring s)];
	to_string (pb::ASCIIZ s) =>  ptf::sprintf'  "\t.asciz\t\"%s\""  [ptf::STRING (string::to_cstring s)];

	to_string (pb::INT { size, i } )     => {

	   fun join []                      =>  [];
	       join [lambda_expression]     =>  [lexp_to_string lambda_expression];
	       join (lambda_expression ! r) =>  lexp_to_string lambda_expression ! ", " ! join r;
           end;

	   pop = (case size
		     8 => "\t.byte\t";
		    16 => "\t.short\t";
		    32 => "\t.long\t";
		    64 => error "INT64";
		    _ => error ("pop: INT size = " + int::to_string size); esac
		 );		# end case

	     string::cat (pop ! join i);
	   };

	to_string (pb::SPACE size)
            =>
            ptf::sprintf' "\t.space\t%d" [ptf::INT size];

	to_string (pb::FLOAT { size, f } )
            =>
            {
		fun join [] => [];
		    join [f] => [f];
		    join (f ! r) => f ! ", " ! join r;
		end;

		pop =  case size
			  32 => "\t.single ";
			 64 => "\t.double ";
			 _ => error ("pop: FLOAT size = " + int::to_string size);
                       esac;

		string::cat (pop ! join f);
	    };

	to_string (pb::IMPORT labs) =>  decls("\t.extern\t%s", labs);
	to_string (pb::EXPORT labs) =>  decls("\t.globl\t%s", labs);
	to_string (pb::COMMENT txt) =>  ptf::sprintf'  "; %s"  [ptf::STRING txt];
	to_string (pb::EXT _)       =>  error "EXT";
    end;

    fun define_local_label lab
        =
        label_to_string lab  +  ":";

};


## COPYRIGHT (c) 2002 Bell labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
