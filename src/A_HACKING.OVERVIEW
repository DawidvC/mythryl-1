Some helpful hints for hacking on the Mythryl codebase:


Emacs stuff
===========

Global search and replace
-------------------------

Doing 'make etags' at the top level after a 'make clean'
generates a TAGS file indexing the complete codebase.

To search for a string or regular expression in the
entire codebase, you can then do

   M-x tags-search <RETURN> foo <RETURN>

Also, to do a conditional search-and-replace throughout
the codebase, replacing 'his' with 'her' you can do

   M-x tags-query-replace <RETURN> his <RETURN> her <RETURN>

Emacs will stop at each instance of 'this' and wait for
you to give a y/n to decide whether to replace that
particular instance.

When you're doing that, typically you don't want to stop
on words like 'this' which contain 'his'.  You can avoid
that by using a command like 

   M-x tags-query-replace <RETURN> \([^A-Za-z0-9_]\)his\([^A-Za-z0-9_]\) <RETURN> \1her\2 <RETURN>

That's a nuisance to type, so I usually keep

   \([^A-Za-z0-9_]\)

in emacs register 'x', from where I can fetch it
in three keystrokes when typing such things.

Read the emacs manual section on tags-* for more
information on this stuff.



Outline Minor Mode
------------------

When one dives into an unfamiliar sourcefile, one
usually feels that sight of the forest is blocked
by the trees:  It is really hard to get a sense of
the overall structure of the code in the file,
resulting in a lost-in-the-code-maze sensation.

Emacs' under-appreciated outline-minor-mode can be
a big help.  Here's an example:

 o  Open a big Mythryl sourcefile.
 o  Do    <ESC>: (setq outline-regexp "[ \t]*\\(fun \\)") <RETURN>
 o  Do    <ESC>x outline-minor-mode <RETURN>
 o  Do    Ctrl-C @ Ctrl-Q      This will quickfold the file, exposing the top-level structure.
 o  Do    Ctrl-C @ Ctrl-A      This will restore the normal view of the file.

For more information on outline-minor-mode, do

 Ctrl-H F outline-mode <RETURN>

or do

 Ctrl-H I

to invoke the 'info' reader and read the
outline-mode section in the emacs manual.


