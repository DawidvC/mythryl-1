#!/usr/bin/mythryl

# A simple benchmark that allocates and then frees a lot of strings



fun allocate_and_discard_1000_strings ()
    =
    {   vec = rw_vector::rw_vector (1000, "");

        # Demonstrate that Perl7 does tail recursion
        # right, unlike C, Java or Perl5: :) 
        fun loop 0  = ()
          | loop n = {  n = n - 1;
                        str = int::to_string n;
                        rw_vector::update( vec, n, str );
                        loop n;
                     };

        loop 1000;

        vec; 
    };



my passes =   100000;

my started_at  =   time::now ();

my     i = ref 0;
while *i < passes do {
    allocate_and_discard_1000_strings ();
    i := *i + 1;
};

print "Elapsed time = ";
print (big_int::to_string (time::to_seconds(time::now ()) - time::to_seconds(started_at)));
print " seconds.\n";
