/*
 * This test program is translated from the Text Widget example in
 * the Gtk+ tutorial
 */

local

   use C Gtk gtk_enums gdk_enums gtk_macros

   fun text_toggle_editable text checkbutton =
       gtk_text_set_editable::f (text, 
               GtkToggleButton::get'active checkbutton)

   fun text_toggle_word_wrap text checkbutton =
       gtk_text_set_word_wrap::f (text, 
              if GtkToggleButton::get'active checkbutton then 1 else 0)

   fun close_application _ = gtk_main_quit::f()
  
in

   fun main (prog, argv) = 
   let gtk_init::f (prog . argv)
       window = gtk_window_new::f GTK_WINDOW_TOPLEVEL
       gtk_widget_set_usize::f (window, 600, 500);
       gtk_window_set_policy::f (window, 1, 1, 0);  
       gtk_signal_connect::f (window, "destroy",
                                          close_application)
       gtk_window_set_title::f (window, "Text Widget Example")
       gtk_container_set_border_width::f (window, 0w0)

       box1   = gtk_vbox_new::f (FALSE, 0)
       gtk_container_add::f (window, box1);
       gtk_widget_show::f box1
  
       box2   = gtk_vbox_new::f (FALSE, 10)
       gtk_container_set_border_width::f (box2, 0w10)
       gtk_box_pack_start::f (box1, box2, TRUE, TRUE, 0w0)
       gtk_widget_show::f box2

       table  = gtk_table_new::f (0w2, 0w2, FALSE)
       gtk_table_set_row_spacing::f (table, 0w0, 0w2)
       gtk_table_set_col_spacing::f (table, 0w0, 0w2)
       gtk_box_pack_start::f (box2, table, TRUE, TRUE, 0w0)
       gtk_widget_show::f table
  
       #  Create the GtkText widget 
       text   = gtk_text_new::f (NULL, NULL);
       gtk_text_set_editable::f (text, TRUE);
       gtk_table_attach::f (table, text, 0w0, 0w1, 0w0, 0w1,
                                      GTK_EXPAND + GTK_SHRINK + GTK_FILL,
                                      GTK_EXPAND + GTK_SHRINK + GTK_FILL, 
                                      0w0, 0w0)
       gtk_widget_show::f text

       #  Add a vertical scrollbar to the GtkText widget 
       vscrollbar = gtk_vscrollbar_new::f (GtkText::get'vadj text)
       gtk_table_attach::f 
                            (table, vscrollbar, 0w1, 0w2, 0w0, 0w1,
                             GTK_FILL, GTK_EXPAND + GTK_SHRINK + GTK_FILL, 
                             0w0, 0w0)
       gtk_widget_show::f vscrollbar

       #  Get the system color map and allocate the color red 
       cmap = gdk_colormap_get_system::f()
       color = c::new' GdkColor::size
       GdkColor::set_red (color, 0wxffff) 
       GdkColor::set_green (color, 0w0) 
       GdkColor::set_blue (color, 0w0) 
       if gdk_color_alloc::f (cmap, &color) then ()
                   else raise exception FAIL "couldn't allocate color"

       #  Load a fixed font 
      fixed_font = 
            gdk_font_load::f ("-misc-fixed-medium-r-*-*-*-140-*-*-*-*-*-*")

       /* Realizing a widget creates a window for it,
        *    * ready for us to insert some text */
      gtk_widget_realize::f text

      #  Freeze the text widget, ready for multiple updates 
      gtk_text_freeze::f text
  
      #  Insert some colored text 
      style = GtkWidget::get'style text
      black = GtkStyle::get'black style
      gtk_text_insert::f (text, NULL, &black, NULL, "Supports ", -1)
      gtk_text_insert::f (text, NULL, &color, NULL, "colored ", -1)
      gtk_text_insert::f (text, NULL, &black, NULL, "text and different ", -1)
      gtk_text_insert::f (text, fixed_font, &black, NULL, "fonts\n\n", -1);
  
      #  Load the file text.pkg into the text window 
      infile  = file::open_for_read "text.pkg"
      buffer  = file::read_all infile
      file::close_input infile
      gtk_text_insert::f (text, fixed_font, NULL,
                                       NULL, buffer, 
                                       int32::from_int (size buffer))
        
      /* Thaw the text widget, allowing the updates to become visible */  
      gtk_text_thaw::f text
  
      hbox = gtk_hbutton_box_new::f ()
      gtk_box_pack_start::f (box2, hbox, FALSE, FALSE, 0w0)
      gtk_widget_show::f hbox

      check = gtk_check_button_new_with_label::f "Editable"
      gtk_box_pack_start::f (hbox, check, FALSE, FALSE, 0w0)
      gtk_signal_connect::f (check, "toggled",
                                        text_toggle_editable text)
      gtk_toggle_button_set_active::f (check, TRUE)
      gtk_widget_show::f check
      check = gtk_check_button_new_with_label::f "Wrap Words"
      gtk_box_pack_start::f (hbox, check, FALSE, TRUE, 0w0)
      gtk_signal_connect::f (check, "toggled",
                                        text_toggle_word_wrap text)
      gtk_toggle_button_set_active::f (check, FALSE)
      gtk_widget_show::f check

      separator = gtk_hseparator_new::f ()
      gtk_box_pack_start::f (box1, separator, FALSE, TRUE, 0w0)
      gtk_widget_show::f separator

      box2 = gtk_vbox_new::f (FALSE, 10)
      gtk_container_set_border_width::f (box2, 0w10)
      gtk_box_pack_start::f (box1, box2, FALSE, TRUE, 0w0)
      gtk_widget_show::f box2
  
      button = gtk_button_new_with_label::f "close"
      gtk_signal_connect::f (button, "clicked",
                                         close_application)
      gtk_box_pack_start::f (box2, button, TRUE, TRUE, 0w0)
      gtk_widget_set_flags (button, GTK_CAN_DEFAULT)
      gtk_widget_grab_default::f button
      gtk_widget_show::f button

      gtk_widget_show::f window
   in gtk_main::f ();
      0
   end
end #  local 
