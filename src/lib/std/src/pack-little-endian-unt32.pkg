## pack-little-endian-unt32.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

# This is the non-native implementation of 32-bit big-endian packing
# operations.

###                     "If there were in the world today any large number of people
###                      who desired their own happiness more than they desired the
###                      unhappiness of others, we could have a paradise in a few years."
###
###                                                    -- Bertrand Russell



stipulate
    package unt= unt_guts;				# unt_guts		is from   src/lib/std/src/bind-word-32.pkg
    package large_unt= large_unt_guts;			# large_unt_guts	is from   src/lib/std/src/bind-largeword-32.pkg
    package unt8= unt8_guts;				# unt8_guts		is from   src/lib/std/src/unt8.pkg
    #
    package lun = large_unt;				# large_unt		is from   src/lib/std/types-only/bind-largest32.pkg
    package w8  = unt8;					# unt8			is from   src/lib/std/types-only/basis-structs.pkg
    package w8v = inline_t::unt8_vector;		# inline_t		is from   src/lib/core/init/built-in.pkg
    package w8a = inline_t::rw_unt8_vector;
herein

package pack_little_endian_unt32: (weak)  Pack_Unt {	# Pack_Unt		is from   src/lib/std/src/pack-unt.api


    bytes_per_element = 4;
    is_big_endian     = FALSE;

    # Convert the byte length into word32 length
    # (n div 4), and check the index:
    #
    fun check_index (len, i)
        =
        {   len = unt::to_int_x (unt::(>>) (unt::from_int len, 0u2));
	  
	    if   (not (inline_t::default_int::ltu (i, len)))
                 
                 raise exception SUBSCRIPT;
            fi;
	};

    fun mk_word (b1, b2, b3, b4)
        =
	lun::bitwise_or (lun::(<<) (unt8::to_large_unt b4, 0u24),
	lun::bitwise_or (lun::(<<) (unt8::to_large_unt b3, 0u16),
	lun::bitwise_or (lun::(<<) (unt8::to_large_unt b2,  0u8),
		    unt8::to_large_unt b1)));

    fun get_vec (vec, i)
        =
        {   check_index (w8v::length vec, i);

	    k = unt::to_int_x (unt::(<<) (unt::from_int i, 0u2));
	  
	    mk_word (
                w8v::get (vec, k  ),
                w8v::get (vec, k+1),
	        w8v::get (vec, k+2),
                w8v::get (vec, k+3)
            );
	};

    # Since large_unt is 32-bits,
    # no sign extension is required:
    #
    fun get_vec_x (vec, i)
        =
        get_vec (vec, i);

    fun get_rw_vec (arr, i)
        =
        {   check_index (w8a::length arr, i);

	    k = unt::to_int_x (unt::(<<) (unt::from_int i, 0u2));
	  
	    mk_word (
                w8a::get (arr, k  ),
                w8a::get (arr, k+1),
	        w8a::get (arr, k+2),
                w8a::get (arr, k+3)
            );
	};

    # Since large_unt is 32-bits,
    # no sign extension is required:
    #
    fun get_rw_vec_x (arr, i)
        =
        get_rw_vec (arr, i);

    fun set (arr, i, w)
        =
        {   check_index (w8a::length arr, i);

	    k = unt::to_int_x (unt::(<<) (unt::from_int i, 0u2));
	  
	    w8a::set (arr, k,   w8::from_large_unt w);
	    w8a::set (arr, k+1, w8::from_large_unt (lun::(>>) (w,  0u8)));
	    w8a::set (arr, k+2, w8::from_large_unt (lun::(>>) (w, 0u16)));
	    w8a::set (arr, k+3, w8::from_large_unt (lun::(>>) (w, 0u24)));
	};

};
end;



## Copyright (c) 2005 by The Fellowship of SML/NJ
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
