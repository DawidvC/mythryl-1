## unix-path.pkg
## AUTHOR:   John Reppy
##	    AT&T Bell Laboratories
##	    Murray Hill, NJ 07974
##	    jhr@research.att.com


package unix_path:  Unix_Path {

    enum Access_Mode = enum winix::file::Access_Mode

    # * WHAT IS THIS IN POSIX??? *

    enum file_type = F_REGULAR | F_DIR | F_SYMLINK | F_SOCK | F_CHR | F_BLK

    # * Path lists *

    enum path_list = PathList of List( String )

    exception NoSuchFile

    fun getPath () = let
	  path = (case (UnixEnv::getEnv "PATH") of (THE p) => p | _ => "")
	  in
	    PathList (string::fields (fn ':' => TRUE | _ => FALSE) path)
	  end #  getPath 

    local
      package st = posix::ST
      fun isFileType (path, type) = let
	    st = posix::stat path
	    in
	      case type
	       of F_REGULAR => st::isReg st
		| F_DIR => st::is_directory st
		| F_SYMLINK => st::is_symbolic_link st
		| F_SOCK => st::isSock st
		| F_CHR => st::isChr st
		| F_BLK => st::isBlk st
	      #  end case 
	    end
      fun access mode pathname = (winix::file::access (pathname, mode))
      fun accessAndType (mode, ftype) pathname = (
	    winix::file::access (pathname, mode)
	    and isFileType (pathname, ftype))
	      except _ => FALSE
      # return the first path p in the pathlist, such that p/name satisfies
      # the predicate.

      fun file_file' (PathList l, prior) fname = let
	    fun find [] = raise NoSuchFile
	      | find (p . r) = let pn = winix::path::from_dir_file { dir=p, file=fname }
		  in
		    if (prior pn) then pn else find r
		  end
	    in
	      if (winix::path::is_absolute fname)
	        then if (prior fname) then fname else raise NoSuchFile
	        else find l
	    end
      # return the list of paths p in the pathlist, such that p/name satisfies
      # the predicate.

      fun find_files' (PathList l, prior) fname = let
	    fun find ([], l) = reverse l
	      | find (p . r, l) = let pn = winix::path::from_dir_file { dir=p, file=fname }
		  in
		    if (prior pn) then find (r, pn . l) else find (r, l)
		  end
	    in
	      if (winix::path::is_absolute fname)
                then if (prior fname) then [fname] else []
                else find (l, [])
	    end
    in
    fun file_file (pl, mode) = file_file' (pl, access mode)
    fun find_files (pl, mode) = find_files' (pl, access mode)
    fun findFileOfType (pl, ftype, mode) =
	  file_file' (pl, accessAndType (mode, ftype))
    fun findFilesOfType (pl, ftype, mode) =
	  find_files' (pl, accessAndType (mode, ftype))
    end #  local 

} #  unix_path 


## COPYRIGHT (c) 1991 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
