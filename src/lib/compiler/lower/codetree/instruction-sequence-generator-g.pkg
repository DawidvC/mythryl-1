## instruction-sequence-generator-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/codetree.make6

# Generate a linear sequence of instructions



###               "One has to look out for engineers --
###                they begin with sewing machines
###                and end up with the atomic bomb."
###
###                                 -- Marcel Pagnol



# We are nowhere invoked:

generic package linear_instruction_sequence_generator_g (

    package instruction_set:    Instruction_Set;		# Instruction_Set			is from   src/lib/compiler/lower/instruction/instruction-set.api
    package stream:		Instruction_Stream;		# Instruction_Stream			is from   src/lib/compiler/lower/instruction/instruction-stream.api

    package control_flow_graph
	:
	Control_Flow_Graph					# Control_Flow_Graph			is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where instruction_set == instruction_set
	also  pseudo_op == stream::pseudo_op;
)

: (weak) Instruction_Sequence_Generator_G			# Instruction_Sequence_Generator_G	is from   src/lib/compiler/lower/codetree/instruction-sequence-generator-g.api

{
    package control_flow_graph = control_flow_graph;
    package instruction_set    = instruction_set;
    package cells              = instruction_set::cells;

    package i   = instruction_set;
    package c   = cells;
    package s   = stream;

    #  Pretty stupid, eh? 
    #
    fun new_stream  instructions
	=
	stream::STREAM {
	    begin_cluster    => can't_use,
	    end_cluster      => can't_use,
	    emit,
	    emit_pseudo_op   => can't_use,
	    define_local_label     => can't_use,
	    define_global_label      => can't_use,
	    emit_comment     => can't_use,
	    add_note         => can't_use,
	    get_notes        => can't_use,
	    end_procedure      => can't_use

	} where 

	    fun emit i
		=
		instructions :=   i ! *instructions; 

	    fun can't_use _
		=
		lowcode_error_message::error("linear_instruction_sequence_generator_g", "unimplemented");
	end; 
};
