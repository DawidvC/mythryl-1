## typeoper.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



###             "You should learn from the mistakes of others,
###              because you'll never have enough time to make
###              off those mistakes yourself."
###
###                                         -- Ben Franklin



api Type_Oper {

    Kenv;
    Highcode_Kind             =  highcode_type::Highcode_Kind;
    Highcode_Type_Constructor =  highcode_type::Highcode_Type_Constructor;
    Highcode_Type             =  highcode_type::Highcode_Type;
    Highcode_Variable         =  highcode_var::Highcode_Variable;

    Anormal_Expression  = anormal::Anormal_Expression;
    Value               = anormal::Value;

    init_ke:  Kenv;  

    tk_abs:   (Kenv, List( (Highcode_Variable, Highcode_Kind) ), Highcode_Variable) -> 
		   ((Kenv, ((Anormal_Expression, Anormal_Expression) -> Anormal_Expression)));

    tc_lexp:  Kenv -> Highcode_Type_Constructor -> Anormal_Expression;
    ts_lexp:  (Kenv, List( Highcode_Type_Constructor )) -> Anormal_Expression; 

    utgc:    (Highcode_Type_Constructor, Kenv, Highcode_Type_Constructor) -> Value -> Anormal_Expression; 
    utgd:    (Highcode_Type_Constructor, Kenv, Highcode_Type_Constructor) -> Value -> Anormal_Expression; 
    tgdc:    (Int, Highcode_Type_Constructor, Kenv, Highcode_Type_Constructor) -> Value -> Anormal_Expression; 
    tgdd:    (Int, Highcode_Type_Constructor, Kenv, Highcode_Type_Constructor) -> Value -> Anormal_Expression; 

    make_wrap:   (Highcode_Type_Constructor, Kenv, Bool, Highcode_Type_Constructor) -> Anormal_Expression -> Anormal_Expression; 
    make_unwrap:   (Highcode_Type_Constructor, Kenv, Bool, Highcode_Type_Constructor) -> Anormal_Expression -> Anormal_Expression; 

    arr_sub:  (Highcode_Type_Constructor, Kenv, Highcode_Type, Highcode_Type) -> List( Value ) -> Anormal_Expression;
    arr_upd:  (Highcode_Type_Constructor, Kenv, highcode_primitive_op::Primitive_Operation, Highcode_Type, Highcode_Type) -> List( Value ) -> Anormal_Expression;
    arr_new:  (Highcode_Type_Constructor, Highcode_Variable, Highcode_Variable, Kenv) -> List( Value ) -> Anormal_Expression;

};

api Outcome {

    Outcome = YES
		     | NO
		     | MAYBE  anormal::Anormal_Expression;
};

package ot: (weak) Outcome				# Outcome			is from   src/lib/compiler/upper/reps/typeoper.pkg
          = runtime_type;				# runtime_type			is from   src/lib/compiler/upper/reps/runtime-type.pkg

package type_oper: (weak)  Type_Oper {			# Type_Oper			is from   src/lib/compiler/upper/reps/typeoper.pkg

    stipulate

	package di = debruijn_index;			# debruijn_index		is from   src/lib/compiler/front/typechecker/basics/de-bruijn-index.pkg
	package lt = highcode;				# highcode			is from   src/lib/compiler/upper/highcode/highcode.pkg
	package lv = highcode_var;			# highcode_var			is from   src/lib/compiler/upper/highcode/highcode-var.pkg
	package po = highcode_primitive_op;		# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg
	package pt = highcode_data_representation;	# highcode_data_representation	is from   src/lib/compiler/upper/highcode/highcode-data-representation.pkg
	package bt = type_types; 			# type_types			is from   src/lib/compiler/front/typechecker/types/type-types.pkg
	package tp = types;				# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	package rt = runtime_type;			# runtime_type			is from   src/lib/compiler/upper/reps/runtime-type.pkg

	include highcode_guts;
	include anormal;
	include ot;

    herein

	Highcode_Kind             = Highcode_Kind;
	Highcode_Type_Constructor = Highcode_Type_Constructor;
	Highcode_Type             = Highcode_Type;

	Highcode_Variable  = lv::Highcode_Variable;
	Anormal_Expression = Anormal_Expression;

	Value = Value;
	Kenv = rt::Kenv;

	fun bug s = error_message::impossible ("type_oper: " + s);
	fun say (s:  String) = controls::print::say s;
	fun make_var _ = lv::make_highcode_variable();

	ident = fn le = le;

	fkfun = { is_recursive         => NULL,
                  all_call_sites_known => FALSE,
                  inlining_hint        => INLINE_WHENEVER_POSSIBLE,
                  calling_convention   => CALLING_CONVENTION_FUNCTION lt::ffc_fixed
                };

	fun make_arrow (ts1, ts2)
            =
            lt::tcc_arrow (lt::ffc_fixed, ts1, ts2);

	lt_arw = lt::ltc_tyc o lt::tcc_arrow;

	fun wty tc
	    =
	    (NULL, po::WRAP, lt_arw (lt::ffc_fixed, [tc], [lt::tcc_void]), []);

	fun uwty tc
	    =
	    (NULL, po::UNWRAP, lt_arw (lt::ffc_fixed, [lt::tcc_void], [tc]), []);

	fun fu_wrap   (tc, vs, v, e) =  PRIMOP (wty tc, vs, v, e);
	fun fu_unwrap (tc, vs, v, e) =  PRIMOP (uwty tc, vs, v, e);

	fu_rk_tuple = anormal_stuff::rk_tuple;

	fun wrap_x (t, u)
	    = 
	    {   v = make_var(); 
		fu_wrap (t, [u], v, RET [VAR v]); 
	    };

	fun unwrap_x (t, u)
	    = 
	    {   v = make_var(); 
		fu_unwrap (t, [u], v, RET [VAR v]); 
	    };

	#############################################################################
	#                  UTILITY FUNCTIONS AND CONSTANTS
	#############################################################################

	fun split (RET [v])
                =>
                (v, ident);

	    split x
                =>
                {   v = make_var();
		    (VAR v, fn z = LET([v], x, z));
		};
        end;

	fun select_g (i, e)
            = 
	    {   my (v, header) = split e;
	        x = make_var();
	        header (SELECT (v, i, x, RET [VAR x]));
	    };

	fun fn_g (vts, e)
            = 
	    {   f = make_var();
	        MUTUALLY_RECURSIVE_FNS([(fkfun, f, vts, e)], RET [VAR f]);
	    };

	fun select_v (i, u)
            = 
	    {   x = make_var();
	        SELECT (u, i, x, RET [VAR x]);
	    };

	fun app_g (e1, e2)
            = 
	    {   my (v1, h1) = split e1;
	        my (v2, h2) = split e2;
	        h1 (h2 (APPLY (v1, [v2])));
	    };

	fun record_g es
            = 
	    f (es, [], ident)
            where
	        fun f ([], vs, header)
                        => 
		        {   x = make_var();
			    header (RECORD (fu_rk_tuple, reverse vs, x, RET [VAR x]));
		        };

		    f (e ! r, vs, header)
                        => 
		        {   my (v, h) = split e;
			    f (r, v ! vs, header o h);
		        };
                end;
	    end;

	fun srecord_g es
            = 
	    f (es, [], ident)
            where
	        fun f ([], vs, header)
                        => 
		        {   x = make_var();
			    header (RECORD (RK_STRUCT, reverse vs, x, RET [VAR x]));
		        };

		    f (e ! r, vs, header)
                        => 
		        {   my (v, h) = split e;
			    f (r, v ! vs, header o h);
		        };
                end;
	    end;

	fun wrap_g (z, b, e)
            = 
	    {   my (v, h) = split e;
	        h (wrap_x (z, v));
	    };

	fun unwrap_g (z, b, e)
            = 
	    {   my (v, h) = split e;
	        h (unwrap_x (z, v));
	    };

	fun wrap_cast (z, b, e)
            = 
	    {   my (v, h) = split e;
	        pt = lt::ltc_arrow (lt::ffc_fixed, [lt::ltc_tyc z], [lt::ltc_void]);
	        pv = (NULL, po::CAST, pt,[]);
	        x = make_var();
	        h (PRIMOP (pv, [v], x, RET [VAR x]));
	    };

	fun unwrap_cast (z, b, e)
            = 
	    {   my (v, h) = split e;
	        pt = lt::ltc_arrow (lt::ffc_fixed, [lt::ltc_void], [lt::ltc_tyc z]);
	        pv = (NULL, po::CAST, pt,[]);
	        x = make_var();
	        h (PRIMOP (pv, [v], x, RET [VAR x]));
	    };

	fun switch_g (e, s, ce, d)
            = 
	    {   my (v, h) = split e;
	        h (SWITCH (v, s, ce, d));
	    };

	fun cond (u, e1, e2)
            =
            u (e1, e2);


	/****************************************************************************
	 *                           KIND DICTIONARIES                              *
	 ****************************************************************************/ 

	fun add_ke (kenv, vs, ks)
            =
            rt::add_ke;


	/****************************************************************************
	 *                            MAIN FUNCTIONS                                *
	 ****************************************************************************/

	/* my tkAbsGen:  kenv * List( Highcode_Variable ) * List( Highcode_Kind ) * Highcode_Variable * fkind 
			  -> kenv * ((Anormal_Expression * Anormal_Expression) -> Anormal_Expression) */
	#  tkAbsGen = rt::tkAbsGen 


	#  my tkAbs: kenv * List( tvar * Highcode_Kind ) -> kenv * (Anormal_Expression * Anormal_Expression -> Anormal_Expression) 
	tk_abs = rt::tk_abs;

	#  my tkTfn: kenv * List( Highcode_Kind ) -> kenv * (Anormal_Expression -> Anormal_Expression) 
	#
	tk_tfn    = rt::tk_tfn;
	ieq_lexp  = rt::ieq_lexp;
	iadd_lexp = rt::iadd_lexp;


	tovalue      = rt::tovalue;
	tcode_void   = rt::tcode_void;
	tcode_record = rt::tcode_record;
	tcode_int32  = rt::tcode_int32;
	tcode_pair   = rt::tcode_pair;
	tcode_fpair  = rt::tcode_fpair;
	tcode_real   = rt::tcode_real;
	tcode_real_n = rt::tcode_real_n;


	#  tcLexp maps TC_VAR to proper highcode_variables,
        #              TC_PRIM to proper constants 
	#  my tcLexp:  kenv -> Highcode_Type_Constructor -> Anormal_Expression 

	init_ke = rt::init_ke;

	tc_lexp = rt::rt_lexp;
	ts_lexp = rt::ts_lexp;

	is_float  = rt::is_float; 

	is_pair = rt::is_pair;


	/****************************************************************************
	 *                      TYPED INTERPRETATION OF UNTAGGED                    *
	 ****************************************************************************/

	# * tc is of kind Omega; this function tests whether tc can be int31 ? 
	#
	fun tc_tag (kenv, tc)
	    = 
	    loop tc
            where
	        fun loop x     #  A lot of approximations in this function 
		    =
		    case (type_constructor_project x)

			TC_PRIM pt =>   pt::unboxed pt  ??   NO
                                                        ::   YES;
			        #  if pt::ubxupd pt then YES else NO 
				#  this is just an approximation 

			TC_ARROW (_, tc1, tc2) => YES;			#  NO 
			TC_RECURSIVE(_, i)     => YES;

			TC_TUPLE (_, [])       => YES;
			TC_TUPLE (_, ts)       => NO;


			TC_ABSTRACT tx             => loop tx;
			TC_EXTENSIBLE_TOKEN(_, tx) => loop tx;

			TC_APPLY (tx, _)
                            => 
			    case (type_constructor_project tx)

				(TC_APPLY _ | TC_PROJ _ | TC_VAR _)
                                    => 
				    MAYBE (tc_lexp kenv x);

				_ => YES;
                            esac;

			_   =>  MAYBE (tc_lexp kenv x);
		    esac;

	    end;			# fun tc_tag 

	#  my utgc:  Highcode_Type_Constructor * kenv * Highcode_Type_Constructor -> value -> Anormal_Expression 
	#
	fun utgc (tc, kenv, rt)
	    = 
	    case (tc_tag (kenv, tc))

		YES =>  fn u = {   v = make_var();

				   RECORD
				     ( fu_rk_tuple,
				       [u],
				       v, 
				       wrap_x  (lt::tcc_tuple [rt],  VAR v)
				     );
				};

		NO =>   fn u = wrap_x (rt, u);

		MAYBE ne
		    => 
		    fn u =  {   v = make_var();
				hh = ieq_lexp (ne, tcode_void);

				cond ( hh,
				       RECORD ( fu_rk_tuple,
						[u],
						v,
						wrap_x (lt::tcc_tuple [rt], VAR v)
					      ),
				       wrap_x (rt, u)
				     );
			    };
	    esac;

	# my utgd:  Highcode_Type_Constructor * kenv * Highcode_Type_Constructor -> value -> Anormal_Expression:
	#
	fun utgd (tc, kenv, rt)
	    = 
	    case (tc_tag (kenv, tc))

		 YES =>  fn u = {   v = make_var();
				    z = make_var();

				    fu_unwrap (lt::tcc_tuple [rt], [u], v, 
					  SELECT (VAR v, 0, z, RET [VAR z]));
				};

		 NO  =>   fn u = unwrap_x (rt, u);

		 MAYBE ne
                     => 
		     fn u = {   v = make_var ();
				z = make_var ();

				hh = ieq_lexp (ne, tcode_void);

				cond (hh, fu_unwrap (lt::tcc_tuple [rt], [u], v, 
					  SELECT (VAR v, 0, z, RET [VAR z])),
				       unwrap_x (rt, u));
			    };
	   esac;

	#  my tgdc:  Int * Highcode_Type_Constructor * kenv * Highcode_Type_Constructor -> value -> Anormal_Expression 
	#
	fun tgdc (i, tc, kenv, rt)
	    = 
	    {   nt = lt::tcc_tuple [lt::tcc_int, rt];

		fn u
                    =
                    {   x = make_var();
			RECORD (fu_rk_tuple, [INT i, u], x, wrap_x (nt, VAR x));
		    };
	    };

	#  my tgdd:  Int * Highcode_Type_Constructor * kenv * Highcode_Type_Constructor -> value -> Anormal_Expression 
	#
	fun tgdd (i, tc, kenv, rt)
	    = 
	    {   nt = lt::tcc_tuple [lt::tcc_int, rt];

		fn u = {  x = make_var();
			  v = make_var();

			  fu_unwrap (nt, [u], x, SELECT (VAR x, 1, v, RET [VAR v]));
		       };
	    };

	/****************************************************************************
	 *                      TYPED INTERPRETATION OF FP RECORD                   *
	 ****************************************************************************/

	# tc is a ground Highcode_Type_Constructor of kind Omega,
        # only record types also arrow types are 
	# interesting for the time being.

	# all of these wrappers probably should be lifted to the top of the
	# program, otherwise we may run into space blow-up !			XXX BUGGO FIXME

	#  my tcCoerce:  kenv * Highcode_Type_Constructor * Bool * Bool ->  Null_Or( Anormal_Expression -> Anormal_Expression )
	#
	fun tc_coerce (kenv, tc, nt, wflag, b)
	    = 
	    case (type_constructor_project tc, type_constructor_project nt)

		 (TC_TUPLE (_, ts), _)
                     =>
		     h (ts, 0, RET [INT 0], [], 0)
                     where
		         fun h ([], i, e, el, 0)
                                 =>
                                 NULL;

			     h([], i, e, el, result)
                                 => 
				 {   w = make_var();                 
				     wx = VAR w;

				     fun g (i, NULL)
                                             =>
                                             select_v (i, wx);

					 g (i, THE _)
                                             => 
					     wflag   ??   unwrap_g (lt::tcc_real, b, select_v (i, wx))
					             ::     wrap_g (lt::tcc_real, b, select_v (i, wx));
                                     end;

				     ntc = lt::tcc_tuple (map (fn _ => lt::tcc_real; end ) ts);

				     ne = record_g (map g (reverse el));
				     test = ieq_lexp (e, tcode_real_n result); 

				     fun hdr0 xe
                                         = 
				         if wflag  
					     cond (test, LET([w], xe, wrap_cast (ntc, b, ne)), 
							wrap_cast (nt, b, xe));
				         else
                                             cond (test, LET([w], unwrap_cast (ntc, b, xe), ne), 
						       unwrap_cast (nt, b, xe));
                                         fi;

				     fun header (xe as (RET [(VAR _)]))
                                             =>
                                             hdr0 xe;

					 header xe
                                             =>
                                             {   z = make_var();
						 LET([z], xe, hdr0 (RET [VAR z]));
					     };
                                     end;

				     THE header;
				};

			     h (a ! r, i, e, el, result)
                                 => 
				 case (is_float (kenv, a) )

				     NO      => NULL;
				     YES     => h (r, i+1, e, (i, NULL) ! el, result);
				     MAYBE z => h (r, i+1, iadd_lexp (e, z), 
						  (i, THE a) ! el, result+1);
                                 esac;
                         end;
		     end;

		 (TC_ARROW _, _)			#  (tc1, tc2) => 
                     =>
		     {   my (tc1, _) = lt::tcd_parrow tc;
		         my (_, tc2) = lt::tcd_parrow nt;

			 case (is_pair (kenv, tc1))

			      (YES | NO) => NULL;

			      MAYBE e
				  =>
				  {   w = make_var();

				      test1 = ieq_lexp (RET [(VAR w)], tcode_pair);
				      test2 = ieq_lexp (RET [(VAR w)], tcode_fpair);

				      m = make_var();   m2 = make_var();
				      n = make_var();   n2 = make_var();

				      tc_real = lt::tcc_real;
				      tc_breal = lt::tcc_void; #  lt::tcc_wrap tc_real 
				      lt_breal = lt::ltc_tyc tc_breal;
				      tc_void = lt::tcc_void;
				      lt_void = lt::ltc_void;
				      tc_pair = lt::tcc_tuple [tc_void, tc_void];
				      tc_fpair = lt::tcc_tuple [tc_real, tc_real];
				      tc_bfpair = lt::tcc_tuple [tc_breal, tc_breal];
				      lt_pair = lt::ltc_tyc tc_pair;
				      lt_fpair = lt::ltc_tyc tc_fpair;
				      lt_bfpair = lt::ltc_tyc tc_bfpair;
				      ident = fn le => le; end ;

				      my (argt1, body1, hh1)
					  = 
					  if wflag				#  wrapping 

					     ( [(m, lt_void), (m2, lt_void)], 

					       fn sv
						   =
						   {   xx = make_var();
						       yy = make_var();

						       RECORD (fu_rk_tuple, [VAR m, VAR m2], xx,
							 fu_wrap (tc_pair, [VAR xx], yy,
							   APPLY (sv, [VAR yy])));
						   },

					       fn le
						   = 
						   wrap_cast
						     ( make_arrow([tc_void, tc_void],[tc2]), 
						       TRUE,
						       le
						     )
					     );
					  else					#  unwrapping 

					       x = make_var();
					       y = make_var();
					       z = make_var();

					       ( [(m, lt_void)], 

						 fn sv
						     =
						     {   xx = make_var(); 

							 LET
							   ( [xx], 

							     unwrap_cast
							       ( make_arrow([tc_void, tc_void], [tc2]),
								 TRUE,
								 RET [sv]
							       ),

							     fu_unwrap
							       ( tc_pair,
								 [VAR m],
								 x, 
								 SELECT
								   ( VAR x,
								     0,
								     y, 
								     SELECT
								       ( VAR x,
									 1,
									 z, 
									 APPLY (VAR xx, [VAR y, VAR z])
							   )   )   )   );
						     },

						 ident
					       );
					  fi;

				      my (argt2, body2, hh2)
					  = 
					  if wflag					#  wrapping 

					      ( [(n, lt_breal), (n2, lt_breal)],

						fn sv
                                                    =
						    {   xx = make_var();
						        yy = make_var();

							LET ( [xx], 
							      record_g [ unwrap_x (tc_real, VAR n),
								         unwrap_x (tc_real, VAR n2)
                                                                       ],

							      fu_wrap (tc_fpair, [VAR xx], yy, APPLY (sv, [VAR yy]))
                                                            );
						    },

						fn le = wrap_cast (make_arrow([tc_breal, tc_breal],[tc2]), 
								  TRUE, le)
                                              );

					  else						#  unwrapping 

					      x = make_var();
					      y = make_var();
					      z = make_var();

					      q0 = make_var();
					      q1 = make_var();

					      ( [(n, lt_void)],

						fn sv
                                                    =
						    {   xx = make_var();

						        LET
                                                          ( [xx],

							    unwrap_cast
                                                              ( make_arrow ([tc_breal, tc_breal], [tc2]),
							        TRUE,
                                                                RET [sv]
                                                              ),

							    fu_unwrap
                                                              ( tc_fpair,
                                                                [VAR n],
                                                                x, 
							        SELECT
                                                                  ( VAR x,
                                                                    0,
                                                                    y, 
							            fu_wrap
                                                                      ( tc_real,
                                                                        [VAR y],
                                                                        q0,
							                SELECT
                                                                          ( VAR x,
                                                                            1,
                                                                            z, 
							                    fu_wrap
                                                                              ( tc_real,
                                                                                [VAR z],
                                                                                q1,
							                        APPLY (VAR xx, [VAR q0, VAR q1])
                                                          )   )   )   )   )   );
						   },

					        ident
                                              );
					  fi;

				      hh3 =    wflag  ??   (fn le =   wrap_cast (nt, TRUE, le))
						      ::   (fn le = unwrap_cast (nt, TRUE, le));

				      # ** NEEDS MORE WORK TO DO THE RIGHT COERCIONS **		XXX BUGGO FIXME
				      #
				      fun hdr0 (sv)
					  =
					  LET([w], e, 
					    cond (test1, hh1 (fn_g (argt1, body1 sv)),
					      cond (test2, hh2 (fn_g (argt2, body2 sv)),
						   hh3 (RET [sv]))));

				      fun header (xe as RET [sv])
                                              =>
                                              hdr0 sv;

					  header xe
                                              =>
                                              {   z = make_var();
						  LET([z], xe, hdr0 (VAR z));
					      };
				      end;

				      THE header;
				  };
                        esac;
		  };
		_ => NULL;
	    esac;

	#  my make_wrap:  Highcode_Type_Constructor * kenv * Bool * Highcode_Type_Constructor -> Anormal_Expression -> Anormal_Expression 
	#
	fun make_wrap (tc, kenv, b, nt)
	    = 
	    case (tc_coerce (kenv, tc, nt, TRUE, b))

		 THE header => header;
		 NULL       => (fn le =  wrap_g (nt, b, le));
	    esac;

	#  my make_unwrap:   (Highcode_Type_Constructor, kenv, Bool, Highcode_Type_Constructor) -> Anormal_Expression -> Anormal_Expression 
	#
	fun make_unwrap (tc, kenv, b, nt)
	    = 
	    case (tc_coerce (kenv, tc, nt, FALSE, b))

		 THE header =>  header;
		 NULL       =>  (fn le = unwrap_g (nt, b, le));
	    esac;

	real_sub = po::NUMSUBSCRIPT { kind=>po::FLOAT 64, checked=>FALSE, immutable=>FALSE };
	real_upd = po::NUMUPDATE    { kind=>po::FLOAT 64, checked=>FALSE };

	fun rsub_lexp (vs, t)
            = 
	    {   x = make_var();
	        PRIMOP((NULL, real_sub, t, []), vs, x, RET [VAR x]);
	    };

	fun rupd_lexp (vs, t)
            = 
	    {   x = make_var();
	        PRIMOP((NULL, real_upd, t, []), vs, x, RET [VAR x]);
	    };

	fun sub_lexp (vs, t)
            = 
	    {   x = make_var();
	        PRIMOP((NULL, po::SUBSCRIPT, t, []), vs, x, RET [VAR x]);
	    };

	fun upd_lexp (po, vs, t)
            = 
	    {   x = make_var();
	        PRIMOP((NULL, po, t, []), vs, x, RET [VAR x]);
	    };


	fun arr_sub (tc, kenv, blt, rlt)
            = 
	    {   nt = blt;
	        rnt = rlt;

	        case (is_float (kenv, tc))

		    NO  => (fn vs = sub_lexp (vs, nt));
		    YES => (fn vs = wrap_g (lt::tcc_real, TRUE, rsub_lexp (vs, rnt)));

		    MAYBE z
                        =>
		        {   test = ieq_lexp (z, tcode_real);

			    (fn vs =
			     cond (test, wrap_g (lt::tcc_real, TRUE, rsub_lexp (vs, rnt)),
				  sub_lexp (vs, nt)));
		        };
                esac;
	  };

	fun arr_upd (tc, kenv, po, blt, rlt)
            = 
	    {   nt = blt;
	        rnt = rlt;

	        case (is_float (kenv, tc))

		    NO  => (fn vs = upd_lexp (po, vs, nt));

		    YES
                        =>
			f
                        where
                            fun f [x, y, z]
                                    =>
				    {   nz = make_var();
				        LET([nz], unwrap_g (lt::tcc_real, TRUE, RET [z]),
					rupd_lexp([x, y, VAR nz], rnt));
				    };

				f _
                                    =>
                                    bug "arrUpd: YES";
                            end;
			end;

		    MAYBE z
                        => 
		        f
                        where
		            test = ieq_lexp (z, tcode_real);

			    fun f (vs as [x, y, z])
				    =>
				    cond ( test, 
					   {   nz = make_var();
					       LET([nz], unwrap_g (lt::tcc_real, TRUE, RET [z]),
						  rupd_lexp([x, y, VAR nz], rnt));
					   },
					   upd_lexp (po, vs, nt)
                                         );

				 f _ => bug "arrUpd: MAYBE";
			     end;
		        end;
                esac;
	    };

	fun arr_new (tc, pv, rv, kenv)
	    = 
	    case (is_float (kenv, tc))

		 NO => fn vs
                           = 
			   {   x= make_var();
			       LET([x], app_g (RET [VAR pv], ts_lexp (kenv, [tc])),
				  APPLY (VAR x, vs));
			   }; 

		 YES
                     =>
		     f
                     where
			 fun f (vs as [x, y])
                                 =>
			         {   z = make_var();
			             LET([z], unwrap_g (lt::tcc_real, TRUE, RET [y]),
				     APPLY (VAR rv, [x, VAR z]));
			         };

			     f _ => bug "arrNew: YES";
                         end;
		     end;

		MAYBE z
                    => 
		    f
                    where 
		        test = ieq_lexp (z, tcode_real);

			fun f (vs as [x, y])
                                =>
				cond ( test, 

				       {   z = make_var();
					   LET([z], unwrap_g (lt::tcc_real, TRUE, RET [y]),
					      APPLY (VAR rv, [x, VAR z]));
				       },

				       {   z= make_var();
					   LET([z], app_g (RET [VAR pv], ts_lexp (kenv, [tc])),
					      APPLY (VAR z, vs));
				       }
                                     );

			    f _ => bug "arrNew: MAYBE";
                        end;
		    end;
	    esac;

    end;		#  toplevel stipulate 
};			#  package type_oper 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
