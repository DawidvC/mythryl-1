## safely.pkg

# Compiled by:
#     src/lib/std/stdlib.make6

# Guarding IO against file descriptor leakage...

api Safely {

    do: { open_it:   Void -> X,
	  close_it:  X -> Void,
	  cleanup:   Bool -> Void	# Arg is TRUE when called due to an interrupt.  Whatever "interrupt" means.
	}
	->
	(X -> Y)
	->
	Y;
};


package safely: Safely
{

    package s = signals;		# signals	is from   src/lib/std/src/nj/signals.pkg


    fun do { open_it, close_it, cleanup }
           work
        =
        {   old_handler
                =
                s::get_signal_handler  s::interrupt_signal;

	    int_mask
                =
                s::MASK [s::interrupt_signal];

	    s::mask_signals  int_mask;

	    s =  open_it ()
		 except
                     e =  {   s::unmask_signals  int_mask;
			      cleanup  FALSE;
			      raise exception  e;
			  };

	    fun reset ()
                =
                {   close_it  s;
                    ignore  (s::set_signal_handler  (s::interrupt_signal, old_handler));
	        };

	    fun int_handler arg
		=
		{  include winix::process;

                   reset ();
		   cleanup TRUE;

		   case old_handler
		     
                        s::HANDLER h =>  h arg;
		        _            =>  exit failure;
                   esac;
		};
	
	    s::override_signal_handler (
		s::interrupt_signal,
		s::HANDLER int_handler
	    );

	    s::unmask_signals  int_mask;

	    (  work s
	       except
		   e =  {   reset ();
			    cleanup  FALSE;
			    raise exception  e;
			}
	    )
	    before
		reset ();
	};				# fun do

};



## Copyright (c) 1998 by Lucent Bell Laboratories
## author: Matthias Blume (blume@cs.princeton.edu)
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
