
#  Build a DDG from a basic block

generic package BasicBlockSchedulerDDGBuilder
   (package ddg:         SCHEDULER_DDG
    package instruction_properties:   Instruction_Properties
      sharing DDG::I = instruction_properties::I
   ) : BASIC_BLOCK_SCHEDULER_DDG_BUILDER =
pkg

   package ddg        = DDG
   package i          = DDG::I
   package c          = i::C
   package SchedProps = DDG::SchedProps
   package h          = c::ColorTable
   package g          = graph

   type architecture = String
   type ddg = DDG::ddg (i::instruction, DDG::latency)

   fun error msg = lowcode_error_message::error("BasicBlockSchedulerDDGBuilder", msg)

   COPY_LATENCY = 0

   exception NOT_THERE

  /*
   * Build a DAG from a list of instructions (in reverse order)
   * This is just a simple def/use analysis.
   */
   fun buildDDG { cpu_info, ddg=g::GRAPH ddg } =
   let my SchedProps::CPU_INFO { defUse, ... } = cpu_info
       fun buildDAG instructions =
       let defMap    = h::make_table (31, NOT_THERE) 
           useMap    = h::make_table (31, NOT_THERE) 
           findUse   = h::find useMap
           findDef   = h::find defMap
           rmvUse    = h::remove useMap
           rmvDef    = h::remove defMap
           fun lookupUse r = case findUse r of NULL => [] | THE x => x
           fun lookupDef r = case findDef r of NULL => [] | THE x => x
           insertUse = h::set useMap
           insertDef = h::set defMap

           fun flowDep i (r, latency) = 
               apply (fn j => ddg.add_edge (i, j, latency)) (lookupUse r)
           fun outputDep i (r, _) = 
               apply (fn j => ddg.add_edge (i, j,-1)) (lookupDef r)
           fun antiDep i r = 
               apply (fn j => ddg.add_edge (i, j,-1)) (lookupDef r)
           fun ctrlDep i j = ddg.add_edge (i, j,-1)
           fun addDefs n (r, l) = (rmvUse r; insertDef (r, [n]))
           fun addUses n r = insertUse (r, n . lookupUse r)

           fun copyDstSrc i' =
           let my (dst, src) = instruction_properties::moveDstSrc i'
               fun coalesce (d . ds, s . ss, dst, src) = 
                   if c::sameColor (d, s) then coalesce (ds, ss, dst, src)
                   else coalesce (ds, ss, (d, COPY_LATENCY) . dst, s . src)
                 | coalesce([], [], dst, src) = (dst, src)
                 | coalesce _ = error "coalesce"

               my (dst, src) = coalesce (dst, src, [], [])
               dst = case instruction_properties::moveTmpR i' of
                           NULL => dst
                         | THE tmp => (tmp,-1) . dst
           in  (dst, src) end

           fun scan (i,[], branches, succs) = ()
             | scan (i, i' . instructions, branches, succs) = 
           let ddg.add_node (i, i') #  Create node 
               kind = instruction_properties::instrKind i' 
               my (defs, uses) = 
                   case kind of
                     instruction_properties::IK_COPY => copyDstSrc i'
                   | _ => defUse i'
               ddg.add_node (i, i')
               apply (flowDep i) defs
               apply (outputDep i) defs
               apply (antiDep i) uses
               apply (ctrlDep i) branches
               apply (addDefs i) defs
               apply (addUses i) uses
               branches = 
                   case kind of
                     instruction_properties::IK_JUMP => [i]
                   | instruction_properties::IK_CALL => (apply (ctrlDep i) succs; [i])
                   | _  => branches
           in  scan (i+1, instructions, branches, i . succs)
           end
       in  scan (0, instructions,[],[])
       end
   in  buildDAG
   end

end
