## get-display.pkg
#
# Utility code for getting the display name and authentication information.

# Compiled by:
#     src/lib/x-kit/draw/xkit-draw.make6

# This package is (only) used in:
#
#     src/lib/x-kit/widget/lib/run-xkit.pkg

stipulate
    package xc  =  xcore;			# xcore			is from   src/lib/x-kit/xclient/src/api/build.pkg
    package xau =  x11_authentication;		# x11_authentication	is from   src/lib/x-kit/draw/x11-authentication.pkg
    package ss  =  substring;			# substring		is from   src/lib/std/substring.pkg
    package dns =  dns_host_lookup;		# dns_host_lookup	is from   src/lib/std/src/socket/dns-host-lookup.pkg
herein

    package get_display: (weak)  Get_Display {	# Get_Display		is from   src/lib/x-kit/draw/get-display.api

	fun get_display_name NULL
		=>
		case (threadkit_winix::process::get_env  "DISPLAY")
		    #
		    THE display =>  display;
		    NULL        =>  "";
		esac;

	    get_display_name (THE display)
		=>
		display;
	end;


	# Parse a string specifying a X display into its components. 
	#
	fun parse_display ""
		=>
		{ host=>"", display=>"0", screen=>"0"};

	    parse_display d
		=>
		{   my (host, rest)
			=
			ss::split_off_prefix  .{ #c != ':'; }   (ss::from_string d);

		    my (display, screen)
			=
			ss::split_off_prefix   .{ #c != '.'; }  rest;

		    if (ss::size display < 2)
			#
			raise exception xc::BAD_ADDRESS "No display field";
		    else
			if (ss::size screen == 1)
			    #
			    raise exception xc::BAD_ADDRESS "No screen number";
			else
			    { host    =>   ss::to_string host,
			      display =>   ss::to_string (ss::drop_first 1 display),
			      screen  =>   ss::to_string (ss::drop_first 1 screen)
			    };
			fi;
		    fi;
		};
	end;



	# Given an optional display name, return the
	# display and authentication information.
	#
	# If the argument is NULL, then we use the
	# DISPLAY unix environment variable if any
	# else "".
	#
	fun get_display  display_option
	    = 
	    {   display =   get_display_name  display_option;

		auth =  case display
			    #                        
			    "" =>   xau::get_xauthority_file_entry_by_address
				      {
					family  =>  xau::family_wild,
					address =>  dns::get_host_name (),	# Necessary to look up xrdb record -- ddeboer, 110.59.
					display =>  "0"
				      };

			    d => {  my { display, host, ... }
					=
					parse_display d;


				    fun make_xa  family  address				# "xa" may be "x-window authentication (string)"
					=
					xau::get_xauthority_file_entry_by_address { family, address, display };


				    # We must obtain the string to be used for comparison
				    # in get_xauthority_file_entry_by_address for family_local.  This is the local hostname.
				    # For family_internet, this is the IP address (as a string). -- ddeboer, 110.59
				    #	
				    case host

					("" | "localhost")
					    =>
					    make_xa   xau::family_local   (dns::get_host_name ());

					_   =>
					    make_xa

                                                xau::family_internet

						# This should more properly be set to the
						# peer address of the connection, *after*
						# the connection has been made.  However,
						# that would be a bit difficult with this
						# architecture. -- ddeboer 110.59
						#
						case (dns::get_by_name  host)
						    #
						    THE entry =>  dns::to_string (dns::address  entry);
						    NULL      =>  "";
						esac;
				    esac;
				 };
			 esac;


		(display, auth);
	    };
    };

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
