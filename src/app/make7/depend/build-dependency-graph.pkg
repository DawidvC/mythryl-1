## build-dependency-graph.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



# Build the dependency graph for one group/library.

# XXX BUGGO FIXME  We usually use 'make' in such
# situations.  If there isn't a clear, consistent
# difference between 'build' and 'make', we
# probably should rename:



api Build_Dependency_Graph {

    Oh7_View
        =
        inter_library_dependency_graph::Oh7_View;


    build
        :
 	( { imports:              symbol_map::Map( Oh7_View ),
	    source_files:         List( (bare_o7::Bare_O7, symbol_set::Set) ),
	    localdefs:            symbol_map::Map( bare_o7::Bare_O7 ),
	    sublibraries:         X,
	    sources:              Y,
	    required_privileges:  inter_library_dependency_graph::Privileges
          },
	  symbol_set::Set,				#  filter 
	  make7_state::Make7_State,
	  intra_library_dependency_graph::Far_O7
        )		#  pervasive dictionary 
	->
        ( symbol_map::Map( Oh7_View	),		#  exports 
	  inter_library_dependency_graph::Privileges,	#  required privileges (aggregate) 
	  symbol_set::Set				#  imported symbols 
        );


    #  For the autoloader: 
    Looker
        =
        symbol::Symbol
        ->
        exports_dictionary::Dictionary;

    get
        :
        Looker
        ->
        exports_dictionary::Dictionary
        ->
        Looker;

    process_one_module_dependencies_summary
        :
        Looker
        ->
        module_dependencies_summary::Decl
        ->
        Void;
};

package build_dependency_graph
:
Build_Dependency_Graph
{

    package s  =  symbol;				# symbol				is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
    package ss =  symbol_set;				# symbol_set				is from   src/app/make7/util/symbolset.pkg
    package sm =  symbol_map;				# symbol_map				is from   src/app/make7/util/symbolmap.pkg
    package sk =  module_dependencies_summary;				# module_dependencies_summary				is from   src/app/make7/o7/module-dependencies-summary.pkg
    package lg =  inter_library_dependency_graph;	# inter_library_dependency_graph	is from   src/app/make7/depend/inter-library-dependency-graph.pkg
    package sg =  intra_library_dependency_graph;	# intra_library_dependency_graph	is from   src/app/make7/depend/intra-library-dependency-graph.pkg
    package em =  error_message;			# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package sp =  symbol_path;				# symbol_path				is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
							# exports_dictionary			is from   src/app/make7/depend/exports-dictionary.pkg
    package de
        =
        exports_dictionary;

    Oh7_View
        =
        lg::Oh7_View;

    Looker
        =
        symbol::Symbol
        ->
        exports_dictionary::Dictionary;


    # NB: 'e' (exports) is a
    #         exports_dictionary::Dictionary
    #     all through the following code.
    #     See src/app/make7/depend/exports-dictionary.pkg

    fun get  otherwise  de::EMPTY  symbol
            =>
            otherwise symbol;

	get otherwise (de::NAMING (symbol', value)) symbol
	    =>
	    if (s::eq (symbol, symbol')    )   value;
			                  else   otherwise symbol;   fi;

	get otherwise (de::LAYER (e, e')) symbol
	    =>
	    get (get otherwise e') e symbol;

	get otherwise (de::FCTENV looker) symbol
	    =>
	    case (looker symbol)
              
                 NULL  =>  otherwise symbol;
                 THE v =>  v;
            esac;

	get otherwise (de::FILTER (symbol_set, e)) symbol
	    =>
	    if (symbol_set::member (symbol_set, symbol)   )   get otherwise e symbol;
					                 else   otherwise symbol;       fi;

	get otherwise (de::SUSPEND eth) symbol						# "eth" == "exports thunk"
	    =>
	    get otherwise (eth ()) symbol;
    end;


    fun evaluate_one_module_dependencies_summary  lookimport
        =
	evaluate
        where

            #  Build the lookup function for sg::dictionary 
	    lookup
                =
                get  lookimport;


	    fun get_symbol_path e (sp::SYMBOL_PATH [])
                    =>
                    de::EMPTY;

	        get_symbol_path e (sp::SYMBOL_PATH (p as (h ! t)))
                    =>
                    {   # Again, if we don't find it here we just ignore
			# the problem and let the compiler catch it later.

			lookup'
                            =
                            get (fn _ =  de::EMPTY);

			fun loop (e,    []) =>  e;
			    loop (e, h ! t) =>  loop (lookup' e h, t);
                        end;

			loop (lookup e h, t);
		};
            end;


	    #  "evaluate" -- compute the export dictionary of a module_dependencies_summary 	# XXX BUGGO FIXME so name it "compute_module_dependencies_summary_exports" or some such!!

	    fun evaluate module_dependencies_summary
                =
		evaluate_decl  de::EMPTY  module_dependencies_summary
                where
                    fun evaluate_decl e (sk::BIND (name, def))
			    =>
			    de::NAMING (name, evaluate_mod_expression e def);

		        evaluate_decl e (sk::LOCAL (d1, d2))
			    =>
			    evaluate_decl (de::LAYER (evaluate_decl e d1, e)) d2;

		        evaluate_decl e (sk::SEQ l)
			    =>
			    evaluate_seq_decl e l;

		        evaluate_decl e (sk::PAR [])
			    =>
			    de::EMPTY;

		        evaluate_decl e (sk::PAR (h ! t))
			    =>
			    fold_left
                                (fn (x, r) =  de::LAYER (evaluate_decl e x, r))
				(evaluate_decl e h)
				t;

		        evaluate_decl e (sk::OPEN s)
			    =>
			    evaluate_mod_expression e s;

		        evaluate_decl e (sk::REF s)
			    =>
			    {   ss::apply (ignore o lookup e) s;
				de::EMPTY;
			    };
                    end 

		    also
		    fun evaluate_seq_decl e []
                            =>
                            de::EMPTY;

		        evaluate_seq_decl e (h ! t)
			    =>
			    { fun one (d, e')
				    =
				    de::LAYER (evaluate_decl (de::LAYER (e', e)) d, e');

				fold_left one (evaluate_decl e h) t;
			    };
                    end 

		    also
		    fun evaluate_mod_expression  e  (sk::VARIABLE  symbol_path)		# "mod" is likely "module" here...?
			    =>
			    get_symbol_path  e  symbol_path;

			evaluate_mod_expression  e  (sk::DECL list)
			    =>
			    evaluate_seq_decl e list;

			evaluate_mod_expression  e  (sk::LET (d, m))
			    =>
			    evaluate_mod_expression  (de::LAYER (evaluate_seq_decl e d, e))  m;

			evaluate_mod_expression e (sk::IGN1 (m1, m2))
			    =>
			    {   ignore (evaluate_mod_expression e m1);
				evaluate_mod_expression e m2;
			    };
		     end;
		end;
	end;

    fun process_one_module_dependencies_summary  lookimport  module_dependencies_summary
        =
	ignore (evaluate_one_module_dependencies_summary  lookimport  module_dependencies_summary);


    # Get the description for a symbol 
    fun sym_desc (s, r)
        =
	s::name_space_to_string (s::name_space s) ! " " ! s::name s ! r;


    fun build (coll, filter, make7_state, perv_fsbnode)
        =
        {   coll
                ->
                { imports,
                  source_files,
                  localdefs,
                  sublibraries,
		  sources,
                  required_privileges
                };

	    per_file_exports
                =
		fold_left
                    (fn ((p, s), m) =  bare_o7_map::set (m, p, s))
		    bare_o7_map::empty
                    source_files;




	    blackboard			# The "blackboard" where analysis results are announced 
                =			#  (also used for cycle detection) 
                REF  bare_o7_map::empty;

	    fun lock i          =   blackboard := bare_o7_map::set (*blackboard, i, NULL);
	    fun release (i, r)  = { blackboard := bare_o7_map::set (*blackboard, i, THE r);    r; };
	    fun fetch i         =  bare_o7_map::get (*blackboard, i);


	    # We collect all imported symbols so that
	    # we can then narrow the list of libraries.
	    #
	    far_import_symbols
                =
                REF  symbol_set::empty;

	    fun add_far_import_symbol symbol
                =
                far_import_symbols
                    :=
                    symbol_set::add
                        (*far_import_symbols, symbol);


            # NB: In the rest of this file, "i" and "i'" variables
            #     almost always mean "info node", which is to say,
            #     bare_o7 instances, or close relatives.


	    #  - get the result from the blackboard if it is there 
	    #  - otherwise trigger analysis 
	    #  - detect cycles using locking 
	    #  - maintain root set 

	    fun get_result (i, history)
                =
		case (fetch i)
		  
		     NULL
                         =>
                         {   lock i;
                             release (i, analyze (i, history));
                         };

		     THE (THE r)
                         =>
                         r;

		     THE NULL
                         =>
                         {   #  Cycle found --> error message 
			     f = bare_o7::sourcepath i;

			     fun pphist pps
				 =
				 {   fun recur (_, [])
                                             =>
                                             ();	# Shouldn't happen.

					 recur (n'', (s, i') ! r)
					      =>
					      {   f' =  bare_o7::sourcepath i';
						  n' =  anchor_dictionary::describe f';

						  if   (not (bare_o7::eq (i, i')))
						       
						       recur (n', r);
                                                  fi;

						  l   =
						      n' ! " refers to "
						      !  sym_desc (s, [" defined in ", n'']);

						  apply  (prettyprint::string pps)  l;

						  prettyprint::newline  pps;
					      };
                                     end;

				     prettyprint::newline pps;

				     recur (anchor_dictionary::describe f, history);
				 };

			     bare_o7::error make7_state i em::ERROR
				  "cyclic Mythryl dependencies" pphist;

			     release (
                                 i,
                                 (   sg::BARE_O7 {

                                       bare_o7  =>  i,
				       near_imports  =>  [],
				       far_imports =>  []
				     },

				     de::EMPTY
                                 )
			     );
		      };
                esac


	    # Do the actual analysis of a source file
	    # and generate the corresponding node:

	    also
	    fun analyze (i, history)
                =
                {   near_imports =  REF [];			# "li" == "local imports"
		    far_imports =  REF [perv_fsbnode];		# "gi" == "global imports"


		    # Register a local import 		# XXX BUGGO FIXME -- So rename it "register_local_import"!!

		    fun local_import node
                        =
			if   (not   (list::exists  (fn node' =  sg::seq (node, node'))  *near_imports))
                             
			     near_imports :=  node ! *near_imports;
                        fi;


		    # Register a global import, 	# XXX BUGGO FIXME -- So rename it "register_global_import"!!
                    # maintain filter sets: 

		    fun global_import (symbol, (filter, node))
                        =
                        {   fun same_node (_, node')
                                =
                                sg::sbeq (node, node');
			
			    add_far_import_symbol  symbol;

			    case (list::find  same_node  *far_imports)
			      
				  NULL
                                      =>
                                      far_imports :=  (filter, node) ! *far_imports;		# Brand new 

				  THE (NULL, node')
                                      =>
                                      ();				# No filter -> no change 

				  THE (THE filter', node')
				      =>
				      {   # There is a filter:
					  # Calculate "union", see if there is a change,
					  # and if so, replace the filter:
					  #
					  fun replace filt
					      =
					      far_imports :=  (filt, node)
                                                              !
                                                              list::filter (not o same_node) *far_imports;

					  case filter
					    
					       NULL  => replace NULL;

					       THE filter
                                                   =>
                                                   if   (not (ss::equal (filter, filter')))
                                                       
						        replace (THE (ss::union (filter, filter')));
                                                   fi;
                                          esac;
				     };
                            esac;
			};					# fun global_import

		    f = bare_o7::sourcepath i;		# 'f' must be 'filename' or something close.

		    fun is_self i'
                        =
                        bare_o7::eq (i, i');



		    # A lookup function for things not defined in the same Mythryl file.
		    # As a side effect, this function registers local and global imports.

		    fun lookimport symbol
                        =
                        {   fun dontcomplain symbol
                                =
                                de::EMPTY;

			    fun lookfar ()
                                =
				case (sm::get (imports, symbol))
				  
				     THE (farnth, e, _)		# "farnth" is probably "far node thunk"
                                         =>
                                         {   global_import (symbol, farnth ());
					     get dontcomplain e symbol;
                                         };

				     NULL =>
					  # We could complain here about an undefined
					  # name.  However, since make7 doesn't have the
					  # proper source locations available, it is
					  # better to handle this case silently and
					  # have the compiler catch the problem later.
					  de::EMPTY;
                                esac;
			
			    case (sm::get (localdefs, symbol))
			      
			         THE i'
                                     =>
				     if   (is_self i')
                                          lookfar ();
				     else
					  my (n, e)
                                              =
                                              get_result (i', (symbol, i) ! history);
					
					  local_import n;
					  get dontcomplain e symbol;
				     fi;

			         NULL
                                     =>
                                     lookfar ();
                            esac;
			};				# fun lookimport

		    evaluate
                        =
                        evaluate_one_module_dependencies_summary  lookimport;

		    module_dependencies_summary_exports
                        =
                        case (bare_o7::module_dependencies_summary  make7_state  i)
			  
			     THE module_dependencies_summary =>  evaluate module_dependencies_summary;
			     NULL         =>  de::EMPTY;
                        esac;

		    node
                        =
                        sg::BARE_O7 {
                          bare_o7  =>  i,
			  near_imports  =>  *near_imports,
			  far_imports =>  *far_imports
			};
		
		    ( node,
                      module_dependencies_summary_exports
                    );
		};



	    # Run the analysis on one Mythryl file -- causing
	    # the blackboard to be updated accordingly:
	    #
	    fun do_source_file (i, _)
                =
                ignore (get_result (i, []));

	    # Run the analyses:
            apply  do_source_file  source_files;

	    # Invert the "localdefs" map
            # so that each bare_o7
	    # is mapped to the corresponding
            # _set_ of symbols:
	    #
	    stipulate
		fun add (symbol, i, info_map)
                    =
		    case (bare_o7_map::get (info_map, i))
                      
                         NULL           =>   bare_o7_map::set (info_map, i, symbol_set::singleton        symbol );
		         THE symbol_set =>   bare_o7_map::set (info_map, i, symbol_set::add (symbol_set, symbol));
                    esac;
	    herein
		inverse_localdefs
                    =
                    symbol_map::keyed_fold_left
                        add
                        bare_o7_map::empty
                        localdefs;
	    end;


	    fun add_dummy_filt i
                =
                {   my (sn, e)
                        =
                        the (the (fetch i));

		    sbn  =  sg::O7_IS_BARE  sn;

		    fsbn =  ( bare_o7_map::get (per_file_exports, i),
                              sbn
                            );
		

		    #  We also thunkify the fsbn so that
                    #  the result is an import_export. 
		    #
		    ( fn () =  fsbn,
                      e,
                      the (bare_o7_map::get (inverse_localdefs, i))
                    );
		};



	    # First we make a map of all symbols defined 
	    # locally  to the local "far sb node"
	    # but with only a dummy filter attached.
            #
	    # This makes it consistent with the current state
	    # of "imports" where there can be filters, but
	    # where those filters are not yet strengthened
	    # according to filter:

	    localmap
                =
                sm::map  add_dummy_filt  localdefs;


	    exports
                =
		ss::fold_left
		    add_node_for
		    sm::empty
		    symbol_set

                where

                    symbol_set
                        =
                        filter;


		    # We now always have a filter.
                    #
		    # We export only the things in the filter.
                    #
		    # They can be taken from either localmap
		    # or else from imports.
                    #
                    # In either case, it is necessary to strengthen
		    # the filter attached to each node:

		    fun strengthen (node_thunk, e, allsyms)
                        =
                        {   my (fopt', sbn)
                                =
                                node_thunk ();

			    new_fopt
                                =
				case fopt'
				  
				     NULL            =>  THE symbol_set;
				     THE symbol_set' =>  THE (ss::intersection (symbol_set, symbol_set'));
                                esac;

			    fun node_thunk' ()
                                =
                                (new_fopt, sbn);
			
			    (   node_thunk',
                                de::FILTER (symbol_set, e),
                                ss::intersection (allsyms, symbol_set)
                            );
			};


		    fun add_node_for  (symbol,  symbol_map)
                        =
			case (sm::get (localmap, symbol))
			  
			     THE node_thunk
                                 =>
                                 sm::set  (symbol_map,  symbol,  strengthen node_thunk);

			     NULL
				 =>
				 case (sm::get (imports, symbol))
				   
				      THE node_thunk
                                          =>
                                          {   add_far_import_symbol  symbol;
					      sm::set  (symbol_map,  symbol,  strengthen node_thunk);
                                          };

				      NULL
                                          => 
					  # This should never happen since we
					  # checked beforehand during
					  # parsing/semantic analysis
					  em::impossible "build: undefined export";
                                 esac;
                       esac;
		
		end;
	
	    check_sharing::check (exports, make7_state);
	    (exports, required_privileges, *far_import_symbols);
	};
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
