## integer.pkg

# This package is derived from Andrzej Filinski's bignum package.  It is very
# close to the definition of the optional 'integer' package in the SML'97 basis.
# 
# It is implemented almost totally on the abstraction presented by
# the big_nat package. The only concrete type information it assumes 
# is that big_nat::bignat = X List and that big_nat::zero = [].
# Some trivial additional efficiency could be obtained by assuming that
# type bignat is really int List, and that if (v:  bignat) == [d], then
# bignat d = [d].
#
# At some point, this should be reimplemented to make use of unt32, or
# have compiler/runtime support.
#
# Also, for booting, this module could be broken into one that has
# all the types and arithmetic functions, but doesn't use num_scan,
# constructing values from strings using bignum arithmetic. Various
# integer and word scanning, such as num_scan, could then be constructed 
# from 'integer'. Finally, a user-level 'integer' could be built by 
# importing the basic 'integer', but replacing the scanning functions
# by more efficient ones based on the functions in num_scan.			XXX BUGGO FIXME



# XXX BUGGO FIXME This package doesn't appear to get built by the current makefiles.
# It should either be added to them if current, or deleted if it is dead code.
# The currently-active equivalent appears to be   src/lib/std/src/integer-guts.pkg

package integer   :> Integer {


  # It is not clear what advantage there is to having num_format as
  # a submodule.


    package num_scan:  api

        my skipWS:  string_conversion::Reader( char, X ) -> X -> X

        my scanWord:  string_conversion::radix
	      ->  string_conversion::Reader (char, X)
	        -> X -> Null_Or( unt32::word * X )

        my scanInt:  string_conversion::radix
	        -> string_conversion::Reader( char, X )
	        -> X -> Null_Or (Int * X)
	    # * should be to int32 *

      end = pkg

        package w = unt32
        package i = Int31
    
        my op <  = w::(<)
        my op >= = w::(>=)
        my op +  = w::(+)
        my op -  = w::(-)
        my op *  = w::(*)
    
        my largestWordDiv10:  unt32::word = 0w429496729#  2^32-1 divided by 10 
        my largestWordMod10:  unt32::word = 0w5	#  remainder 
        my largestNegInt:  unt32::word = 0w1073741824	#  Absolute value of -2^30 
        my largestPosInt:  unt32::word = 0w1073741823	#  2^30-1 
    
        type chr_strm( X ) = { getc:  string_conversion::Reader( char, X ) }
    
      # A table for mapping digits to values.  Whitespace characters map to
      # 128, "+" maps to 129, "-", "~" map to 130, "." maps to 131, and the
      # characters 0-9, A-Z, a-z map to their * base-36 value.  All other
      # characters map to 255.

        stipulate
          cvtTable = "\
    	    \\255\255\255\255\255\255\255\255\255\128\128\255\255\255\255\255\
    	    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    	    \\128\255\255\255\255\255\255\255\255\255\255\129\255\130\131\255\
    	    \\000\001\002\003\004\005\006\007\008\009\255\255\255\255\255\255\
    	    \\255\010\011\012\013\014\015\016\017\018\019\020\021\022\023\024\
    	    \\025\026\027\028\029\030\031\032\033\034\035\255\255\255\255\255\
    	    \\255\010\011\012\013\014\015\016\017\018\019\020\021\022\023\024\
    	    \\025\026\027\028\029\030\031\032\033\034\035\255\255\255\130\255\
    	    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    	    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    	    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    	    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    	    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    	    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    	    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    	    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    	  \"
        ord = char::to_int
        herein
	fun code (c:  char) = w::from_int (ord (char_vector::get (cvtTable, ord c)))
        my wsCode:  unt32::word = 0w128
        my plusCode:  unt32::word = 0w129
        my minusCode:  unt32::word = 0w130
        end #  local 
    
        fun skipWS (getc:  string_conversion::Reader( char, X ) ) cs = let
              fun skip cs = (case (getc cs)
		     of NULL => cs
		      | (THE (c, cs')) => if (code c == wsCode) then skip cs' else cs
		    )		# end case
              in
                skip cs
              end
    
      #  skip leading whitespace and any sign (+, -, or ~) 
        fun scanPrefix (getc:  string_conversion::Reader (char, X) ) cs = let
    	  fun skipWS cs = (case (getc cs)
    		 of NULL => NULL
    		  | (THE (c, cs')) => let c' = code c
    		      in
    			if (c' == wsCode) then skipWS cs' else THE (c', cs')
    		      end
    		)		# end case
    	  fun getNext (neg, cs) = (case (getc cs)
    		 of NULL => NULL
    		  | (THE (c, cs)) => THE { neg, next=code c, rest=cs }
    		)		# end case
    	  in
    	    case (skipWS cs)
    	     of NULL => NULL
    	      | (THE (c, cs')) =>
    		  if (c == plusCode) then getNext (FALSE, cs')
    		  else if (c == minusCode) then getNext (TRUE, cs')
    		  else THE { neg=FALSE, next=c, rest=cs'}
    	    #  end case 
    	  end
    
      /* for power of 2 bases (2, 8 & 16), we can check for overflow by looking
       * at the hi (1, 3 or 4) bits.
       */
        fun chkOverflow mask w =
    	  if (w::bitwise_and (mask, w) == 0w0) then () else raise OVERFLOW
    
        fun scanBin (getc:  string_conversion::Reader (char, X) ) cs = (case (scanPrefix getc cs)
    	   of NULL => NULL
    	    | (THE { neg, next, rest } ) => let
    		fun is_digit (d:  unt32::word) = (d < 0w2)
    		chkOverflow = chkOverflow 0wx80000000
    		fun convert (w, rest) = (case (getc rest)
    		       of NULL => THE { neg, word=w, rest }
    			| THE (c, rest') => let d = code c
    			    in
    			      if (is_digit d)
    				then (
    				  chkOverflow w;
    				  convert (w::(+) (w::(<<) (w, 0w1), d), rest'))
    				else THE { neg, word=w, rest }
    			    end
    		      )		# end case
    		in
    		  if (is_digit next)
    		    then convert (next, rest)
    		    else NULL
    		end
    	  )		# end case
    
        fun scanOct getc cs = (case (scanPrefix getc cs)
    	   of NULL => NULL
    	    | (THE { neg, next, rest } ) => let
    		fun is_digit (d:  unt32::word) = (d < 0w8)
    		chkOverflow = chkOverflow 0wxE0000000
    		fun convert (w, rest) = (case (getc rest)
    		       of NULL => THE { neg, word=w, rest }
    			| THE (c, rest') => let d = code c
    			    in
    			      if (is_digit d)
    				then (
    				  chkOverflow w;
    				  convert (w::(+) (w::(<<) (w, 0w3), d), rest'))
    				else THE { neg, word=w, rest }
    			    end
    		      )		# end case
    		in
    		  if (is_digit next)
    		    then convert (next, rest)
    		    else NULL
    		end
    	  )		# end case
    
        fun scanDeclaration getc cs = (case (scanPrefix getc cs)
    	   of NULL => NULL
    	    | (THE { neg, next, rest } ) => let
    		fun is_digit (d:  unt32::word) = (d < 0w10)
    		fun convert (w, rest) = (case (getc rest)
    		       of NULL => THE { neg, word=w, rest }
    			| THE (c, rest') => let d = code c
    			    in
    			      if (is_digit d)
    				then (
    				  if ((w >= largestWordDiv10)
    				  and ((largestWordDiv10 < w)
    				    or (largestWordMod10 < d)))
    				    then raise OVERFLOW
    				    
    				  convert (0w10*w+d, rest'))
    				else THE { neg, word=w, rest }
    			    end
    		      )		# end case
    		in
    		  if (is_digit next)
    		    then convert (next, rest)
    		    else NULL
    		end
    	  )		# end case

        # Eat a possible "0x" or "0X" prefix on a hex literal:
	#
	fun scan0x getc NULL = NULL
	  | scan0x getc (orig as THE { neg, next, rest } ) =
	      if (next == 0w0)
		then (case getc rest
		   of THE(('x' | 'X'), rest1) => (case getc rest1
			 of THE (c, rest2) => let
			      d = code c
			      in
				if (d < 0w16)
				  then THE { neg, next=d, rest=rest2 }
				  else orig
			      end
			  | NULL => orig
			)		# end case
		    | _ => orig
		  )		# end case
		else orig

        fun scanHex getc cs = (case scan0x getc (scanPrefix getc cs)
    	   of NULL => NULL
    	    | (THE { neg, next, rest } ) => let
    		fun is_digit (d:  unt32::word) = (d < 0w16)
    		chkOverflow = chkOverflow 0wxF0000000
    		fun convert (w, rest) = (case (getc rest)
    		       of NULL => THE { neg, word=w, rest }
    			| THE (c, rest') => let d = code c
    			    in
    			      if (is_digit d)
    				then (
    				  chkOverflow w;
    				  convert (w::(+) (w::(<<) (w, 0w4), d), rest'))
    				else THE { neg, word=w, rest }
    			    end
    		      )		# end case
    		in
    		  if (is_digit next)
    		    then convert (next, rest)
    		    else NULL
    		end
    	  )		# end case
    
        fun finalWord scan_g getc cs = (case (scan_g getc cs)
    	   of NULL => NULL
    	    | (THE { neg=TRUE, ... } ) => NULL
    	    | (THE { neg=FALSE, word, rest } ) => THE (word, rest)
    	  )		# end case
    
        fun scanWord string_conversion::BIN = finalWord scanBin
          | scanWord string_conversion::OCT = finalWord scanOct
          | scanWord string_conversion::DEC = finalWord scanDec
          | scanWord string_conversion::HEX = finalWord scanHex
    
        fun finalInt scan_g getc cs = (case (scan_g getc cs)
    	   of NULL => NULL
    	    | (THE { neg=TRUE, word, rest } ) =>
    		if (largestNegInt < word)
    		  then raise OVERFLOW
    		  else THE (i::(-_)(w::toInt word), rest)
    	    | (THE { word, rest, ... } ) =>
    		if (largestPosInt < word)
    		  then raise OVERFLOW
    		  else THE (w::toInt word, rest)
    	  )		# end case
    
        fun scanInt string_conversion::BIN = finalInt scanBin
          | scanInt string_conversion::OCT = finalInt scanOct
          | scanInt string_conversion::DEC = finalInt scanDec
          | scanInt string_conversion::HEX = finalInt scanHex
    
      end #  package num_scan 

    package num_format:  api

        my fmtWord:  string_conversion::radix -> unt32::word -> String
        my fmtInt:  string_conversion::radix -> Int -> String	# * should be int32 *

      end = pkg

        package w = unt32
        package i = Int
    
        my op < = w::(<)
        my op - = w::(-)
        my op * = w::(*)
        my op div = w::div
    
        fun mkDigit (w:  unt32::word) =
    	  char_vector::get("0123456789abcdef", w::toInt w)
    
        fun wordToBin w = let
    	  fun mkBit w = if (w::bitwise_and (w, 0w1) == 0w0) then '0' else '1'
    	  fun f (0w0, n, l) = (i::(+) (n, 1), '0' . l)
    	    | f (0w1, n, l) = (i::(+) (n, 1), '1' . l)
    	    | f (w, n, l) = f (w::(>>) (w, 0w1), i::(+) (n, 1), (mkBit w) . l)
    	  in
    	    f (w, 0, [])
    	  end
        fun wordToOct w = let
    	  fun f (w, n, l) = if (w < 0w8)
    		then (i::(+) (n, 1), (mkDigit w) . l)
    		else f (w::(>>) (w, 0w3), i::(+) (n, 1), mkDigit (w::bitwise_and (w, 0w7)) . l)
    	  in
    	    f (w, 0, [])
    	  end
        fun wordToDec w = let
    	  fun f (w, n, l) = if (w < 0w10)
    		then (i::(+) (n, 1), (mkDigit w) . l)
    		else let j = w div 0w10
    		  in
    		    f (j,  i::(+) (n, 1), mkDigit (w - 0w10*j) . l)
    		  end
    	  in
    	    f (w, 0, [])
    	  end
        fun wordToHex w = let
    	  fun f (w, n, l) = if (w < 0w16)
    		then (i::(+) (n, 1), (mkDigit w) . l)
    		else f (w::(>>) (w, 0w4), i::(+) (n, 1), mkDigit (w::bitwise_and (w, 0w15)) . l)
    	  in
    	    f (w, 0, [])
    	  end
    
        fun fmtW string_conversion::BIN = #2 o wordToBin
          | fmtW string_conversion::OCT = #2 o wordToOct
          | fmtW string_conversion::DEC = #2 o wordToDec
          | fmtW string_conversion::HEX = #2 o wordToHex
    
        fun fmtWord radix = string::implode o (fmtW radix)
    
	/** NOTE: this currently uses 31-bit integers, but really should use 32-bit
	 ** ints (once they are supported).                      XXX BUGGO FIXME
	 **/
        fun fmtInt radix = let
    	  fmtW = fmtW radix
    	  itow = w::from_int
    	  fun fmt i = if i::(<) (i, 0)
    		then let
    		  my (digits) = fmtW (itow (i::(-_) i))
    		  in
    		    string::implode('-' . digits)
    		  end
    		    except _ => (case radix
    		       of string_conversion::BIN => "-1111111111111111111111111111111"
    			| string_conversion::OCT => "-7777777777"
    			| string_conversion::DEC => "-1073741824"
    			| string_conversion::HEX => "-3fffffff"
    		      )		# end case
    		else string::implode (fmtW (itow i))
    	  in
    	    fmt
    	  end
    
      end #  package num_format 

    package big_nat =
      pkg

	exception Negative

        itow = unt::from_int
	wtoi = unt::toIntX

	lgBase = 30             #  No. of bits per digit; must be even 
	nbase = -0x40000000     #  = -2^lgBase 

	maxDigit = -(nbase + 1)
	realBase = (real maxDigit) + 1.0

	lgHBase = int::quot (lgBase, 2)    #  half digits 
	hbase = unt::(<<) (0w1, itow lgHBase)
	hmask = hbase - 0w1

	fun quotrem (i, j) = (int::quot (i, j), int::rem (i, j))
	fun scale i = if i == maxDigit then 1 else nbase div (-(i+1))

	type bignat = List( Int ) #  least significant digit first 

	zero = []
	one = [1]

	fun bignat 0 = zero
	  | bignat i = let
	      notNbase = unt::bitwise_not (itow nbase)
              fun bn 0w0 = []
        	| bn i = let
		    fun dmbase n = 
		      (unt::(>>) (n, itow lgBase), unt::bitwise_and (n, notNbase))
		    my (q, r) = dmbase i
		  in
		    (wtoi r) . (bn q)
		  end
              in
        	if i > 0 
        	  then if i <= maxDigit then [i] else bn (itow i)
        	  else raise Negative
              end

	fun int [] = 0
	  | int [d] = d
	  | int [d, e] = -(nbase*e) + d
	  | int (d . r) = -(nbase*int r) + d

	fun consd (0, []) = []
	  | consd (d, r) = d . r

	fun hl i = let
	  w = itow i
        in
	  (wtoi (unt::(>>>) (w, itow lgHBase)),  #  MUST sign-extend 
	   wtoi (unt::bitwise_and (w, hmask)))
        end

	fun sh i = wtoi (unt::(<<) (itow i, itow lgHBase))

	fun addOne [] = [1]
	  | addOne (m . rm) = let
              c = nbase+m+1
              in
        	if c < 0 then (c-nbase) . rm else c . (addOne rm)
              end

	fun add ([], digits) = digits
	  | add (digits, []) = digits
	  | add (dm . rm, dn . rn) = addd (nbase+dm+dn, rm, rn)
	and addd (s, m, n) = 
              if s < 0 then (s-nbase) . add (m, n) else (s . addc (m, n))
	and addc (m, []) = addOne m
	  | addc ([], n) = addOne n
	  | addc (dm . rm, dn . rn) = addd (nbase+dm+dn+1, rm, rn)

	fun subtOne (0 . mr) = maxDigit . (subtOne mr)
	  | subtOne [1] = []
	  | subtOne (n . mr) = (n - 1) . mr
	  | subtOne [] = raise FAIL ""

	fun subt (m, []) = m
	  | subt ([], n) = raise Negative
	  | subt (dm . rm, dn . rn) = subd (dm-dn, rm, rn)
	and subb ([], n) = raise Negative
	  | subb (dm . rm, []) = subd (dm - 1, rm, [])
	  | subb (dm . rm, dn . rn) = subd (dm-dn - 1, rm, rn)
	and subd (d, m, n) = 
              if d >= 0 then consd (d, subt (m, n)) else consd (d-nbase, subb (m, n))

               #  multiply 2 digits 
	fun mul2 (m, n) = let 
              my (mh, ml) = hl m
              my (nh, nl) = hl n
              x = mh*nh
              y = (mh-ml)*(nh-nl) #  x-y+z = mh*nl + ml*nh 
              z = ml*nl
              my (zh, zl) = hl z
              my (uh, ul) = hl (nbase+x+z-y+zh) #  Can't overflow 
              in (x+uh+wtoi hbase, sh ul+zl) end

            #  multiply bigint by digit 
	fun muld (m, 0) = []
	  | muld (m, 1) = m #  speedup 
	  | muld (m, i) = let
              fun muldc ([], 0) = []
        	| muldc ([], c) = [c]
        	| muldc (d . r, c) = let
                    my (h, l) = mul2 (d, i)
                    l1 = l+nbase+c
                    in 
                      if l1 >= 0 
                	then l1 . muldc (r, h+1)
                	else (l1-nbase) . muldc (r, h) 
                    end
              in muldc (m, 0) end

	fun mult (m, []) = []
	  | mult (m, [d]) = muld (m, d) #  speedup 
	  | mult (m, 0 . r) = consd (0, mult (m, r)) #  speedup 
	  | mult (m, n) = let 
              fun muln [] = []
        	| muln (d . r) = add (muld (n, d), consd (0, muln r))
              in muln m end

            #  Divide DP number by digit; assumes u < i, i >= base/2 
	fun divmod2 ((u, v), i) = let
              my (vh, vl) = hl v
              my (ih, il) = hl i
              fun adj (q, r) = if r<0 then adj (q - 1, r+i) else (q, r)
              my (q1, r1) = quotrem (u, ih)
              my (q1, r1) = adj (q1, sh r1+vh-q1*il)
              my (q0, r0) = quotrem (r1, ih)
              my (q0, r0) = adj (q0, sh r0+vl-q0*il)
              in (sh q1+q0, r0) end

            #  Divide bignat by digit>0 
	fun divmodd (m, 1) = (m, 0) #  speedup 
	  | divmodd (m, i) = let
              scale = scale i
              i' = i * scale
              m' = muld (m, scale)
              fun dmi [] = ([], 0)
        	| dmi (d . r) = let 
                    my (qt, rm) = dmi r
                    my (q1, r1) = divmod2 ((rm, d), i')
                    in (consd (q1, qt), r1) end
              my (q, r) = dmi m'
              in (q, r div scale) end

            #  From Knuth Vol II, 4.3.1, but without opt. in step D3 
	fun divmod (m, []) = raise DIVIDE_BY_ZERO
	  | divmod ([], n) = ([], []) #  speedup 
	  | divmod (d . r, 0 . s) = let 
              my (qt, rm) = divmod (r, s)
              in (qt, consd (d, rm)) end #  speedup 
	  | divmod (m, [d]) = let 
              my (qt, rm) = divmodd (m, d)
              in (qt, if rm==0 then [] else [rm]) end
	  | divmod (m, n) = let
              ln = length n #  >= 2 
              scale = scale (list::nth (n, ln - 1))
              m' = muld (m, scale)
              n' = muld (n, scale)
              n1 = list::nth (n', ln - 1) #  >= base/2 
              fun divl [] = ([], [])
        	| divl (d . r) = let
                    my (qt, rm) = divl r
                    m = consd (d, rm)
                    fun msds ([], _) = (0, 0)
                      | msds ([d], 1) = (0, d)
                      | msds ([d2, d1], 1) = (d1, d2)
                      | msds (d . r, i) = msds (r, i - 1)
                    my (m1, m2) = msds (m, ln)
                    tq = if m1 == n1 then maxDigit
                             else #1 (divmod2 ((m1, m2), n1))
                    fun try (q, qn') = (q, subt (m, qn'))
                	  except Negative => try (q - 1, subt (qn', n'))
                    my (q, rr) = try (tq, muld (n', tq))
                    in (consd (q, qt), rr) end
              my (qt, rm') = divl m'
              my (rm, _/*0*/) = divmodd (rm', scale)
              in (qt, rm) end

	fun eq ([], []) = TRUE
	  | eq ((i:  Int) . ri, j . rj) = (i = j) and eq (ri, rj)
	  | eq _ = FALSE

	fun neq ([], []) = FALSE
	  | neq ((i:  Int) . ri, j . rj) = (i != j) or neq (ri, rj)
	  | neq _ = TRUE

	fun cmp ([],[]) = EQUAL
	  | cmp (_,[]) = GREATER
	  | cmp ([], _) = LESS
	  | cmp ((i:  Int) . ri, j . rj) =
              case cmp (ri, rj) of
        	EQUAL => if i == j then EQUAL 
                         else if i < j then LESS 
                         else GREATER
              | c => c

	fun expression (_, 0) = one
	  | expression ([], n) = if n > 0 then zero else raise DIVIDE_BY_ZERO
	  | expression (m, n) = 
              if n < 0 then zero
              else let
        	fun expm 0 = [1]
        	  | expm 1 = m
        	  | expm i = let
                      r = expm (i div 2)
                      r2 = mult (r, r)
                      in
                	if i mod 2 == 0 then r2 else mult (r2, m)
                      end
        	in expm n end

        local 
          fun try n = if n >= lgHBase then n else try (2*n)
          pow2lgHBase = try 1
        in
        fun log2 [] = raise DOMAIN
          | log2 (h . t) = let
              fun qlog (x, 0) = 0
                | qlog (x, b) = 
		  if x >= wtoi (unt::(<<) (0w1, itow b)) then
		    b+qlog (wtoi (unt::(>>) (itow x, itow b)), b div 2)
                                 else qlog (x, b div 2)
              fun loop (d,[], lg) = lg + qlog (d, pow2lgHBase)
                | loop (_, h . t, lg) = loop (h, t, lg + lgBase)
            in
              loop (h, t, 0)
            end
        end #  local 

            /* find maximal maxpow s.t. radix^maxpow < base 
             * basepow = radix^maxpow
             */
        fun mkPowers radix = let
	      powers = let
                    bnd = int::quot (nbase, (-radix))
                    fun try (tp, l) =
                          (if tp <= bnd then try (radix*tp, tp . l)
                          else (tp . l))
                            except _ => tp . l
                    in vector::from_list (reverse (try (radix,[1]))) end
	      maxpow = vector::length powers - 1
              in
                (maxpow, vector::get (powers, maxpow), powers)
              end

        powers2  = mkPowers 2
        powers8  = mkPowers 8
        powers10 = mkPowers 10
        powers16 = mkPowers 16

	fun fmt (pow, radpow, puti) n = let 
              pad = string_conversion::padLeft '0' pow
              fun ms0 (0, a) = (pad "") . a
        	| ms0 (i, a) = (pad (puti i)) . a
              fun ml (n, a) =
                    case divmodd (n, radpow) of
                      ([], d) => (puti d) . a
                    | (q, d) => ml (q, ms0 (d, a)) 
              in 
                cat (ml (n,[])) 
              end

        fmt2 = fmt (#1 powers2, #2 powers2, num_format::fmtInt string_conversion::BIN)
        fmt8 = fmt (#1 powers8, #2 powers8, num_format::fmtInt string_conversion::OCT)
        fmt10 = fmt (#1 powers10, #2 powers10, num_format::fmtInt string_conversion::DEC)
        fmt16 = fmt (#1 powers16, #2 powers16, num_format::fmtInt string_conversion::HEX)

        fun scan (bound, powers, geti) getc cs
            =
            let
              fun get (l, cs) = if l == bound then NULL
                               else case getc cs of
                                 NULL => NULL
                               | THE (c, cs') => THE (c, (l+1, cs'))

              fun loop (acc, cs) =
                    case geti get (0, cs) of
                      NULL => (acc, cs)
                    | THE (0, (sh, cs')) => 
                        loop (add (muld (acc, vector::get (powers, sh)),[]), cs')
                    | THE (i, (sh, cs')) => 
                        loop (add (muld (acc, vector::get (powers, sh)),[i]), cs')
            in
                case geti get (0, cs) of
                  NULL => NULL
                | THE (0, (_, cs')) => THE (loop([], cs'))
                | THE (i, (_, cs')) => THE (loop([i], cs'))
            end

        fun scan2 getc = scan(#1 powers2, #3 powers2, num_scan::scanInt string_conversion::BIN) getc
        fun scan8 getc = scan(#1 powers8, #3 powers8, num_scan::scanInt string_conversion::OCT) getc
        fun scan10 getc = scan(#1 powers10, #3 powers10, num_scan::scanInt string_conversion::DEC) getc
        fun scan16 getc = scan(#1 powers16, #3 powers16, num_scan::scanInt string_conversion::HEX) getc

      end #  package big_nat 


    package bn = big_nat

    enum sign = POS | NEG
    enum Int = BI of {
        sign:  sign,
        digits:  bn::bignat
      }

    zero = BI { sign=POS, digits=bn::zero }
    one = BI { sign=POS, digits=bn::one }
    minus_one = BI { sign=NEG, digits=bn::one }
    fun posi digits = BI { sign=POS, digits }
    fun negi digits = BI { sign=NEG, digits }
    fun zneg [] = zero
      | zneg digits = BI { sign=NEG, digits }

    local
    minNeg = the int::min_int
    bigNatMinNeg = bn::addOne (bn::bignat (-(minNeg+1)))
    bigIntMinNeg = negi bigNatMinNeg
    in

    fun toInt (BI { digits=[], ... } ) = 0
      | toInt (BI { sign=POS, digits } ) = bn::int digits
      | toInt (BI { sign=NEG, digits } ) =
              (-(bn::int digits)) except _ =>
                if digits == bigNatMinNeg then minNeg else raise OVERFLOW

    fun from_int 0 = zero
      | from_int i =
          if i < 0
            then if (i == minNeg)
              then bigIntMinNeg
              else BI { sign=NEG, digits= bn::bignat (-i) }
            else BI { sign=POS, digits= bn::bignat i }
    end #  local 

      /* The following assumes large_int = int32.
       * If 'integer' is provided, it will be large_int and toLarge and fromLarge
       * will be the identity function.
       */
    local
    minNeg = the large_int::min_int
    maxDigit = large_int::from_int bn::maxDigit
    nbase = large_int::from_int bn::nbase
    lgBase = unt::from_int bn::lgBase
    notNbase = unt32::bitwise_not (unt32::from_int bn::nbase)
    fun largeNat (0:  large_int::Int) = []
      | largeNat i = let
          fun bn (0w0:  unt32::word) = []
       	    | bn i = let
	        fun dmbase n = (unt32.>> (n, lgBase), unt32::bitwise_and (n, notNbase))
	        my (q, r) = dmbase i
	      in
	        (unt32::toInt r) . (bn q)
	      end
          in
       	    if i <= maxDigit then [large_int::toInt i] else bn (unt32::from_large_int i)
          end

    fun large [] = 0
      | large [d] = large_int::from_int d
      | large [d, e] = -(nbase*(large_int::from_int e)) + (large_int::from_int d)
      | large (d . r) = -(nbase*large r) + (large_int::from_int d)

    bigNatMinNeg = bn::addOne (largeNat (-(minNeg+1)))
    bigIntMinNeg = negi bigNatMinNeg
    in

    fun toLarge (BI { digits=[], ... } ) = 0
      | toLarge (BI { sign=POS, digits } ) = large digits
      | toLarge (BI { sign=NEG, digits } ) =
              (-(large digits)) except _ =>
                if digits == bigNatMinNeg then minNeg else raise OVERFLOW

    fun fromLarge 0 = zero
      | fromLarge i =
          if i < 0
            then if (i == minNeg)
              then bigIntMinNeg
              else BI { sign=NEG, digits= largeNat (-i) }
            else BI { sign=POS, digits= largeNat i }
    end #  local 

    fun negSign POS = NEG
      | negSign NEG = POS

    fun subtNat (m, []) = { sign=POS, digits=m }
      | subtNat ([], n) = { sign=NEG, digits=n }
      | subtNat (m, n) =
            ( { sign=POS, digits = bn::subt (m, n) } )
              except bn::Negative => ( { sign=NEG, digits = bn::subt (n, m) } )

    precision = NULL
    min_int = NULL
    max_int = NULL

    fun ~ (i as BI { digits=[], ... } ) = i
      | ~ (BI { sign=POS, digits } ) = BI { sign=NEG, digits }
      | ~ (BI { sign=NEG, digits } ) = BI { sign=POS, digits }

    fun op * (_, BI { digits=[], ... } ) = zero
      | op * (BI { digits=[], ... }, _) = zero
      | op * (BI { sign=POS, digits=d1 }, BI { sign=NEG, digits=d2 } ) =
          BI { sign=NEG, digits=bn::mult (d1, d2) }
      | op * (BI { sign=NEG, digits=d1 }, BI { sign=POS, digits=d2 } ) =
          BI { sign=NEG, digits=bn::mult (d1, d2) }
      | op * (BI { digits=d1, ... }, BI { digits=d2, ... } ) =
          BI { sign=POS, digits=bn::mult (d1, d2) }

    fun op + (BI { digits=[], ... }, i2) = i2
      | op + (i1, BI { digits=[], ... } ) = i1
      | op + (BI { sign=POS, digits=d1 }, BI { sign=NEG, digits=d2 } ) =
          BI (subtNat (d1, d2))
      | op + (BI { sign=NEG, digits=d1 }, BI { sign=POS, digits=d2 } ) =
          BI (subtNat (d2, d1))
      | op + (BI { sign, digits=d1 }, BI { digits=d2, ... } ) =
          BI { sign, digits=bn::add (d1, d2) }

    fun op - (i1, BI { digits=[], ... } ) = i1
      | op - (BI { digits=[], ... }, BI { sign, digits } ) =
          BI { sign=negSign sign, digits }
      | op - (BI { sign=POS, digits=d1 }, BI { sign=POS, digits=d2 } ) =
            BI (subtNat (d1, d2))
      | op - (BI { sign=NEG, digits=d1 }, BI { sign=NEG, digits=d2 } ) =
            BI (subtNat (d2, d1))
      | op - (BI { sign, digits=d1 }, BI { digits=d2, ... } ) =
          BI { sign, digits=bn::add (d1, d2) }

    fun quotrem (BI { sign=POS, digits=m }, BI { sign=POS, digits=n } ) =
          (case bn::divmod (m, n) of (q, r) => (posi q, posi r))
      | quotrem (BI { sign=POS, digits=m }, BI { sign=NEG, digits=n } ) =
          (case bn::divmod (m, n) of (q, r) => (zneg q, posi r))
      | quotrem (BI { sign=NEG, digits=m }, BI { sign=POS, digits=n } ) =
          (case bn::divmod (m, n) of (q, r) => (zneg q, zneg r))
      | quotrem (BI { sign=NEG, digits=m }, BI { sign=NEG, digits=n } ) =
          (case bn::divmod (m, n) of (q, r) => (posi q, zneg r))

    fun divmod (BI { sign=POS, digits=m }, BI { sign=POS, digits=n } ) =
          (case bn::divmod (m, n) of (q, r) => (posi q, posi r))
      | divmod (BI { sign=POS, digits=[] }, BI { sign=NEG, digits=n } ) = (zero, zero)
      | divmod (BI { sign=POS, digits=m }, BI { sign=NEG, digits=n } ) = let
          my (q, r) = bn::divmod (bn::subtOne m, n)
          in (negi (bn::addOne q), zneg (bn::subtOne (bn::subt (n, r)))) end
      | divmod (BI { sign=NEG, digits=m }, BI { sign=POS, digits=n } ) = let
          my (q, r) = bn::divmod (bn::subtOne m, n)
          in (negi (bn::addOne q), posi (bn::subtOne (bn::subt (n, r)))) end
      | divmod (BI { sign=NEG, digits=m }, BI { sign=NEG, digits=n } ) =
          (case bn::divmod (m, n) of (q, r) => (posi q, zneg r))

    fun op div arg = #1 (divmod arg)
    fun op mod arg = #2 (divmod arg)
    fun op quot arg = #1 (quotrem arg)
    fun op rem arg = #2 (quotrem arg)

    fun compare (BI { sign=NEG, ... }, BI { sign=POS, ... } ) = LESS
      | compare (BI { sign=POS, ... }, BI { sign=NEG, ... } ) = GREATER
      | compare (BI { sign=POS, digits=d }, BI { sign=POS, digits=d'} ) = bn::cmp (d, d')
      | compare (BI { sign=NEG, digits=d }, BI { sign=NEG, digits=d'} ) = bn::cmp (d', d)

    fun op < arg = case compare arg of LESS => TRUE | _ => FALSE
    fun op > arg = case compare arg of GREATER => TRUE | _ => FALSE
    fun op <= arg = case compare arg of GREATER => FALSE | _ => TRUE
    fun op >= arg = case compare arg of LESS => FALSE | _ => TRUE

    fun abs (BI { sign=NEG, digits } ) = BI { sign=POS, digits }
      | abs i = i

    fun max arg = case  compare arg  of  GREATER => #1 arg | _ => #2 arg
    fun min arg = case  compare arg  of  LESS    => #1 arg | _ => #2 arg

    fun sign (BI { sign=NEG, ... } ) = -1
      | sign (BI { digits=[], ... } ) = 0
      | sign _ = 1

    fun sameSign (i, j) = sign i = sign j

    local
      fun fmt' fmtFn i =
            case i of 
              (BI { digits=[], ... } ) => "0"
            | (BI { sign=NEG, digits } ) => "-"$(fmtFn digits)
            | (BI { sign=POS, digits } ) => fmtFn digits
    in
    fun fmt string_conversion::BIN = fmt' (bn::fmt2)
      | fmt string_conversion::OCT = fmt' (bn::fmt8)
      | fmt string_conversion::DEC = fmt' (bn::fmt10)
      | fmt string_conversion::HEX = fmt' (bn::fmt16)
    end

    to_string = fmt string_conversion::DEC

    local
      fun scan' scan_g getc cs = let
            cs' = num_scan::skipWS getc cs
            fun convert (NULL, _) = NULL
              | convert (THE (i, cs), wr) = THE (wr i, cs)
            in
              case (getc cs')
               of (THE('-', cs'')) => convert (scan_g getc cs'', zneg)
                | (THE('+', cs'')) => convert (scan_g getc cs'', posi)
                | (THE _) => convert (scan_g getc cs', posi)
                | NULL => NULL
              #  end case 
            end
    in
    fun scan string_conversion::BIN = scan' (bn::scan2)
      | scan string_conversion::OCT = scan' (bn::scan8)
      | scan string_conversion::DEC = scan' (bn::scan10)
      | scan string_conversion::HEX = scan' (bn::scan16)
    end

    fun from_string s = string_conversion::scan_string (scan string_conversion::DEC) s

    fun pow (_, 0) = one
      | pow (BI { sign=POS, digits }, n) = posi (bn::expression (digits, n))
      | pow (BI { sign=NEG, digits }, n) = 
          if int::mod (n, 2) == 0
            then posi (bn::expression (digits, n))
            else zneg (bn::expression (digits, n))

    fun log2 (BI { sign=POS, digits } ) = bn::log2 digits
      | log2 _ = raise DOMAIN

    # -------------------------------------------------------------------
    # Bit level operators are implemented here.
    # Allen Leung 
    # Last Updated: 12/13/2000
    #
    # Note: 
    #  o  The base is 30 so there is no way that the sign bit is 1 after
    #     bitwise_and, bitwise_or, or bitwise_xor.  But bitwise_not require a hack.
    #  o  I use unt::word as the intermediate type for 
    #     computing results because the conversion back to int does not
    #     require a range check.  
    #  o  Negative values are assumed to have an infinite number of
    #     leading ones. 
    # -------------------------------------------------------------------
    package bit_ops =
    pkg
       package w = Unt
       i2w = w::from_int
       w2i = w::toIntX
       my op - = w::(-)

       base   = w::(<<) (0w1, i2w bn::lgBase)
       maxVal = w::(-) (base, 0w1)
       fun stripSignBit w = w::bitwise_and (w, maxVal)

       fun bitwise_not x = -(x + one)

       /* Internally we are store things in one's complement+sign form.
        * But we have to simulate 2's complement arithmetic.
        */ 
       fun binary (f, g) (BI { sign=sx, digits=xs }, BI { sign=sy, digits=ys } ) =
       let sign = g (sx, sy)  #  sign of result, if non-zero 

            /* convert to two's complement;
             * Compute (- x - borrow)
             */
           fun twos (POS, x, borrow) = (x, 0w0)
             | twos (NEG, 0w0, 0w0) = (0w0, 0w0) #  no borrow 
             | twos (NEG, x, borrow) =(base - x - borrow, 0w1) #  Borrow 

           #  Convert to ones's complement 
           ones = twos 

           fun loop([], [], _, _, _) = []
             | loop([], y . ys, bx, by, bz)  = 
                    loop1 (0w0, [], i2w y, ys, bx, by, bz)
             | loop (x . xs, [], bx, by, bz) = 
                    loop1 (i2w x, xs, 0w0, [], bx, by, bz)
             | loop (x . xs, y . ys, bx, by, bz) = 
                    loop1 (i2w x, xs, i2w y, ys, bx, by, bz)
           and loop1 (x, xs, y, ys, bx, by, bz) = 
               let #  Convert from ones complement 
                   my (x, bx) = twos (sx, x, bx)
                   my (y, by) = twos (sy, y, by)
                   z  = f (x, y)
                    #  Convert back to ones complement 
                   my (z, bz) = ones (sign, z, bz)
                   z  = w2i z
                   zs = loop (xs, ys, bx, by, bz)
               in  case (z, zs) of  #  strip leading zero 
                     (0, []) => []
                   | (z, zs) => z . zs
               end

       in  case loop (xs, ys, 0w0, 0w0, 0w0) of
             []     => zero
           | digits => BI { sign, digits } 
       end


       bitwise_and = binary (w::bitwise_and, fn (NEG, NEG) => NEG | _ => POS)
       #  negative if any are negative 
       bitwise_or  = binary (w::bitwise_or,  fn (POS, POS) => POS | _ => NEG)
       #  negative if only one is negative 
       bitwise_xor = binary (fn (x, y) => stripSignBit (w::bitwise_xor (x, y)),
                          fn (NEG, POS) => NEG 
                           | (POS, NEG) => NEG
                           | _         => POS)

       fun shiftAmount (w) = { bytes=w::div (w, i2w bn::lgBase), 
                             bits=w::mod (w, i2w bn::lgBase) }

       /* left shift; just shift the digits, no special treatment for
        * signed versus unsigned.
        */
       fun <<(i as BI { digits=[], sign }, w) = i #  0 << n = 0 
         | <<(i as BI { digits, sign }, w) =
       let my { bytes, bits } = shiftAmount w
           fun pad (0w0, digits) = digits 
             | pad (n, digits) = pad (n - 0w1, 0 . digits)
       in  if bits == 0w0 then BI { sign, digits==pad (bytes, digits) }
           else
              let shift = i2w bn::lgBase - bits
                  fun shiftAll([], 0w0)   = []
                    | shiftAll([], carry) = [w2i carry]
                    | shiftAll (x . xs, carry) =
                      let x = i2w x
                          digit  = 
                               stripSignBit (w::bitwise_or (carry, w::(<<) (x, bits)))
                          carry' = w::(>>) (x, shift)
                      in  w2i digit . shiftAll (xs, carry')
                      end
              in  BI { sign, digits=shiftAll (pad (bytes, digits), 0w0) }
              end
       end

       /* 
        * Right shift
        */
       fun >>>(i as BI { digits=[], sign }, w) = i #  0 >>> n = n 
         | >>>(i as BI { digits, sign }, w) = 
       let my { bytes, bits } = shiftAmount w
           fun drop (0w0, i) = i 
             | drop (n, []) = []
             | drop (n, x . xs) = drop (n - 0w1, xs)
           digits =
              if bits == 0w0 then drop (bytes, digits)
              else 
              let shift = i2w bn::lgBase - bits
                  fun shiftAll [] = ([], 0w0)
                    | shiftAll (x . xs) =  
                      let my (zs, borrow) = shiftAll xs
                          x       = i2w x
                          z       = w2i (w::bitwise_or (borrow, w::(>>) (x, bits)))
                          borrow' = stripSignBit (w::(<<) (x, shift))
                      in  case (z, zs) of
                            (0, []) => ([], borrow') #  strip leading zero 
                          |  _ => (z . zs, borrow')
                      end
                  my (zs, _) = shiftAll (drop (bytes, digits))
              in  zs
              end
       in  case digits of
             [] => zero
           | _  => BI { digits, sign }
       end

    end


    bitwise_not   = bit_ops::bitwise_not
    bitwise_and   = bit_ops::bitwise_and
    bitwise_or    = bit_ops::bitwise_or
    bitwise_xor   = bit_ops::bitwise_xor
    my <<     = bit_ops::(<<)
    my >>>    = bit_ops::(>>>)

    # these are not in the BASIS api, but they are useful since integer::Int
    # is not a builtin type yet.

    fun ==== (BI { sign=s1, digits=d1 }, BI { sign=s2, digits=d2 } )
        =
	(s1 = s2) and bn::eq (d1, d2)

    fun !== (BI { sign=s1, digits=d1 }, BI { sign=s2, digits=d2 } )
        =
	  (s1 != s2) or bn::neq (d1, d2)

};	#  package integer 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 by AT&T Bell Laboratories. See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
