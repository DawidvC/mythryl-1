# codetree-rewrite.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/codetree.make6

###          "How lowly is the poor man!
###           A mill (for him) (is) the edge of the oven;
###           His ripped garment will not be mended;
###           What he has lost will not be sought for!"
###
###                        -- Sumerian saying

# Compiled by:
#     src/lib/compiler/lower/make7/codetree.make6



generic package codetree_rewrite (

    package t:  Codetree;				# Codetree		is from   src/lib/compiler/lower/codetree/codetree.api

    #  Tree-walk extensions 
    sext:  t::Rewrite_Fns -> t::Sext -> t::Sext;
    rext:  t::Rewrite_Fns -> t::Rext -> t::Rext;
    fext:  t::Rewrite_Fns -> t::Fext -> t::Fext;
    ccext: t::Rewrite_Fns -> t::Ccext -> t::Ccext;
)

: (weak) Codetree_Rwrite				# Codetree_Rwrite	is from   src/lib/compiler/lower/codetree/codetree-rewrite.api

{
    package t = t;

    Rewriters
	=
	{ statement:    t::Statement -> t::Statement,
	  int_expression:   t::Int_Expression -> t::Int_Expression,
	  float_expression:   t::Float_Expression -> t::Float_Expression,
	  bool_expression:  t::Bool_Expression -> t::Bool_Expression
	};

    fun rewrite { int_expression=>do_int_expression, float_expression=>do_float_expression, bool_expression=>do_bool_expression, statement=>do_statement }
	= 
	{   fun statement s
		=
		do_statement statement s
                where
		    s = case s
			     t::MOVE_INT (type, dst, e) => t::MOVE_INT (type, dst, int_expression e);
			     t::MOVE_BOOL (dst, e) => t::MOVE_BOOL (dst, bool_expression e);
			     t::MOVE_FLOAT (fty, dst, e) => t::MOVE_FLOAT (fty, dst, float_expression e);
			     t::COPY_INTS _  => s;
			     t::COPY_FLOATS _ => s;
			     t::JUMP (e, cf) => t::JUMP (int_expression e, cf);
			     t::BCC (cc, l) => t::BCC (bool_expression cc, l);
			     t::CALL { funct, targets, defs, uses, region, pops } => 
				t::CALL { funct=>int_expression funct, targets,
				       defs=>lowcodes defs, uses=>lowcodes uses,
				       region, pops };
			     t::FLOW_TO (s, controlflow) => t::FLOW_TO (statement s, controlflow);
			     t::RET _ => s;
			     t::IF (cc, yes, no) => t::IF (bool_expression cc, statement yes, statement no);
			     t::STORE (type, ea, d, r) => t::STORE (type, int_expression ea, int_expression d, r);
			     t::FSTORE (fty, ea, d, r) => t::FSTORE (fty, int_expression ea, float_expression d, r);
			     t::REGION (s, ctrl) => t::REGION (statement s, ctrl);
			     t::SEQ s => t::SEQ (statements s);
			     t::DEFINE _ => s;
			     t::NOTE (s, an) => t::NOTE (statement s, an);
			     t::EXT s => 
				 t::EXT (sext { int_expression, float_expression, bool_expression, statement } s);
			     t::PHI _ => s; 
			     t::SOURCE => s; 
			     t::SINK => s; 
			     t::RTL _ => s;
			     t::ASSIGN (type, x, y) => t::ASSIGN (type, int_expression x, int_expression y);
			     t::LIVE ls => t::LIVE (lowcodes ls);
			     t::DEAD ks => t::DEAD (lowcodes ks);
                        esac;
		end

	   also
	   fun statements ss
		=
		map statement ss

	   also
	   fun int_expression e
		= 
		do_int_expression int_expression e
                where
		    e = case e

			     t::REG _ => e;
			     t::LITERAL _ => e;
			     t::LABEL _ => e; 
			     t::LABEXP _ => e; 
			     t::CONST _ => e;
			     t::NEG (type, x)   => t::NEG (type, int_expression x);
			     t::ADD (type, x, y) => t::ADD (type, int_expression x, int_expression y);
			     t::SUB (type, x, y) => t::SUB (type, int_expression x, int_expression y);
			     t::MULS (type, x, y) => t::MULS (type, int_expression x, int_expression y);
			     t::DIVS (m, type, x, y) => t::DIVS (m, type, int_expression x, int_expression y);
			     t::REMS (m, type, x, y) => t::REMS (m, type, int_expression x, int_expression y);
			     t::MULU (type, x, y) => t::MULU (type, int_expression x, int_expression y);
			     t::DIVU (type, x, y) => t::DIVU (type, int_expression x, int_expression y);
			     t::REMU (type, x, y) => t::REMU (type, int_expression x, int_expression y);
			     t::NEGT (type, x)   => t::NEGT (type, int_expression x);
			     t::ADDT (type, x, y) => t::ADDT (type, int_expression x, int_expression y);
			     t::SUBT (type, x, y) => t::SUBT (type, int_expression x, int_expression y);
			     t::MULT (type, x, y) => t::MULT (type, int_expression x, int_expression y);
			     t::DIVT (m, type, x, y) => t::DIVT (m, type, int_expression x, int_expression y);
			     t::BITWISEAND (type, x, y) => t::BITWISEAND (type, int_expression x, int_expression y);
			     t::BITWISEOR (type, x, y) => t::BITWISEOR (type, int_expression x, int_expression y);
			     t::BITWISEXOR (type, x, y) => t::BITWISEXOR (type, int_expression x, int_expression y);
			     t::BITWISEEQV (type, x, y) => t::BITWISEEQV (type, int_expression x, int_expression y);
			     t::BITWISENOT (type, x) => t::BITWISENOT (type, int_expression x);
			     t::RIGHTSHIFT (type, x, y) => t::RIGHTSHIFT (type, int_expression x, int_expression y);
			     t::RIGHTSHIFTU (type, x, y) => t::RIGHTSHIFTU (type, int_expression x, int_expression y);
			     t::LEFTSHIFT (type, x, y) => t::LEFTSHIFT (type, int_expression x, int_expression y);
			     t::SIGNEXTEND (t, t', e) => t::SIGNEXTEND (t, t', int_expression e);
			     t::ZEROEXTEND (t, t', e) => t::ZEROEXTEND (t, t', int_expression e);
			     t::CONVERTFLOATTOINT (type, mode, fty, e) => t::CONVERTFLOATTOINT (type, mode, fty, float_expression e);
			     t::COND (type, cc, yes, no) => t::COND (type, bool_expression cc, int_expression yes, int_expression no);
			     t::LOAD (type, ea, r) => t::LOAD (type, int_expression ea, r);
			     t::PRED (e, ctrl) => t::PRED (int_expression e, ctrl);
			     t::LET (s, e) => t::LET (statement s, int_expression e);
			     t::REXT (type, e) => 
				 t::REXT (type, rext { int_expression, float_expression, bool_expression, statement } e);
			     t::MARK (e, an) => t::MARK (int_expression e, an);
			     t::ATATAT(type, k, e) => t::ATATAT(type, k, int_expression e);
			     t::ARG _ => e;
			     t::PARAM _ => e;
			     t::BITSLICE (type, sl, e) => t::BITSLICE (type, sl, int_expression e);
			     t::QQQ => t::QQQ;
			     t::OP (type, oper, es) => t::OP (type, oper, rexps es);
                        esac;
		end

	   also
	   fun rexps es
		=
		map int_expression es

	   also
	   fun float_expression e
		=
		do_float_expression float_expression e
                where
		    e = case e
			     t::FREG _ => e;
			     t::FLOAD (fty, e, r) => t::FLOAD (fty, int_expression e, r);
			     t::FADD (fty, x, y) => t::FADD (fty, float_expression x, float_expression y);
			     t::FSUB (fty, x, y) => t::FSUB (fty, float_expression x, float_expression y);
			     t::FMUL (fty, x, y) => t::FMUL (fty, float_expression x, float_expression y);
			     t::FDIV (fty, x, y) => t::FDIV (fty, float_expression x, float_expression y);
			     t::FABS (fty, x) => t::FABS (fty, float_expression x);
			     t::FNEG (fty, x) => t::FNEG (fty, float_expression x);
			     t::FSQRT (fty, x) => t::FSQRT (fty, float_expression x);
			     t::COPY_FLOAT_SIGN (fty, x, y) => t::COPY_FLOAT_SIGN (fty, float_expression x, float_expression y);
			     t::FCOND (fty, c, x, y) => t::FCOND (fty, bool_expression c, float_expression x, float_expression y);
			     t::CVTI2F (fty, type, e) => t::CVTI2F (fty, type, int_expression e);
			     t::CVTF2F (fty, fty', e) => t::CVTF2F (fty, fty', float_expression e);
			     t::FPRED (e, ctrl) => t::FPRED (float_expression e, ctrl);
			     t::FEXT (fty, e) => 
				 t::FEXT (fty, fext { int_expression, float_expression, bool_expression, statement } e);
			     t::FMARK (e, an) => t::FMARK (float_expression e, an);
                        esac;
		end

	   also
	   fun fexps es
		=
		map float_expression es

	   also
	   fun bool_expression e
		=
		do_bool_expression bool_expression e
                where
		    e = case e
			     t::CC _ => e;
			     t::FCC _ => e; 
			     t::TRUE => e;
			     t::FALSE => e;
			     t::NOT e => t::NOT (bool_expression e);
			     t::AND (x, y) => t::AND (bool_expression x, bool_expression y);
			     t::OR (x, y) => t::OR (bool_expression x, bool_expression y);
			     t::XOR (x, y) => t::XOR (bool_expression x, bool_expression y);
			     t::EQV (x, y) => t::EQV (bool_expression x, bool_expression y);
			     t::CMP (type, cond, x, y) => t::CMP (type, cond, int_expression x, int_expression y);
			     t::FCMP (type, fcond, x, y) => t::FCMP (type, fcond, float_expression x, float_expression y);
			     t::CCMARK (e, an) => t::CCMARK (bool_expression e, an);
			     t::CCEXT (type, e) => 
				t::CCEXT (type, ccext { int_expression, float_expression, bool_expression, statement } e);
                        esac;
		end

	   also
	   fun lowcodes m
		=
		map lowcode m

	   also
	   fun lowcode m
		=
	        m
                where
		    m = case m
			     t::BOOL_EXPRESSION e => t::BOOL_EXPRESSION (bool_expression e);
			     t::INT_EXPRESSION e => t::INT_EXPRESSION (int_expression e);
			     t::FLOAT_EXPRESSION e => t::FLOAT_EXPRESSION (float_expression e);
                         esac;
		end;

            { int_expression, float_expression, bool_expression, statement };
        };
};

