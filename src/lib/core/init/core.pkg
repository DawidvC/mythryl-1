## core.pkg

# Compiled by:
#     src/lib/core/init/init.cmi


# 'core' assumes that the following namings
# are already in the symbol table: 
#
#   1. Built-in packages, defined in primitive_types (symbol-table/primitives-symbol-table.pkg): 
#        primitive_types inline
#   
#   2. Built-in type constructors, defined in primitive_types (symbol-table/primitives-symbol-table.pkg): 
#        Int String Bool Void Float List Rw_Vector Ref Exception
#
#   3. Built-in data constructors, also from primitive_types (symbol-table/primitives-symbol-table.pkg):
#        . NIL REF TRUE FALSE
#
#   4. Built-in primitive operators, defined in inline (symbol-table/primitives-symbol-table.pkg).
#      The inline package is not typed (all values have type alpha, this
#      will change in the future though !). 
#       
#   5. The 'assembly' package, which for typechecking purposes is declared
#      in the file src/lib/core/init/runtime-system-placeholder.pkg
#      and whose implementation is provided by the runtime system.
#
# In addition, all matches in this file should be exhaustive; the match and 
# bind exceptions are not defined at this stage of bootup, so any uncaught 
# match will cause an unpredictable error. 



###                     "I am no lazier now than I was forty years ago,
###                      but that is because I reached the limit forty years ago.
###                      You can't go beyond possibility."
###
###                                        -- Mark Twain in Eruption



package core {

    # We build an 'assembly' package from the implementation module provided 
    # from the runtime systems. The coercions are implemented via inline::cast, 
    # a primitive operator hardwired inside the compiler. In the future, the 
    # linkage should be done safely without using cast (ZHONG).
    #
    # Note: in the future, the assembly::a subpackage will be replaced by
    # a dynamic run vector (John H Reppy).

    package assembly: (weak)  Assembly {		# Assembly	is from   src/lib/core/init/runtime-system.api

	include assembly;

	my cast:  X -> Y
               =  inline::cast;  	# inline	is from   x

        Pair (X, Y) = PAIR  (X, Y);

        package a {

	    package aa = assembly::a;

	    Cfunction        = aa::Cfunction;
	    Unt8_Rw_Vector   = aa::Unt8_Rw_Vector;
	    Float64_Rw_Vector = aa::Float64_Rw_Vector;     # ??? XXX BUGGO FIXME -- can this possibly be right??
	    Spin_Lock        = aa::Spin_Lock;

            my array_p:  Pair( Int, X ) -> Rw_Vector( X )
                      =  cast aa::rw_vector;

	    my array:  (Int, X) -> Rw_Vector( X )
                    =  fn x =  array_p (PAIR x);
                  
            my bind_cfun_p:  Pair( String, String ) -> Cfunction
                          =  cast aa::bind_cfun;

	    my bind_cfun:  ((String, String)) -> Cfunction
                        =  fn x =  bind_cfun_p (PAIR x);

            my callc_p:  Pair( Cfunction, X ) -> Z
                     =  cast aa::callc;

	    my callc:  ((Cfunction, X)) -> Z
                    =  fn x =  callc_p (PAIR x);

	    my create_b:  Int -> Unt8_Rw_Vector = cast aa::create_b;
	    my create_r:  Int -> Float64_Rw_Vector = cast aa::create_r;
	    my create_s:  Int -> String = cast aa::create_s;
            my create_v_p:  Pair( Int, List( X ) ) -> Vector( X ) = cast aa::create_v;

	    my create_v:  (Int, List( X )) -> Vector( X )
                       =  fn x =  create_v_p (PAIR x);

	    my floor:    Float -> Int                 = cast aa::floor;
	    my logb:     Float -> Int                 = cast aa::logb;
            my scalb_p:  Pair( Float, Int ) -> Float   = cast aa::scalb;

	    my scalb:  (Float, Int) -> Float
                    =  fn x =  scalb_p (PAIR x);

	    my try_lock:  Spin_Lock -> Bool   = cast aa::try_lock;
	    my unlock:    Spin_Lock -> Void   = cast aa::unlock;
           
	  }; #  package a 

	  my vector0:  Vector( X ) = cast vector0;

    }; #  package assembly 

    infix  val 80  * / % quot mod rem div;
    infix  val 70 $ ^ + - ;
    infixr val 60 ! . @ ;
    infix  val 50 > < >= <= ;
    infix  val 40 := o;
    infix  val 10 before;

    exception BIND;
    exception MATCH;

    exception RANGE;      		#  for Unt8_Rw_Vector update 
    exception SUBSCRIPT;  		#  for all bounds checking 
    exception INDEX_OUT_OF_BOUNDS;  	#  for all bounds checking 
    exception SIZE; 

    stipulate
        exception NO_PROFILER;
    herein
        profile_register
	    =
	    REF (fn s: String = (raise exception NO_PROFILER): (Int, Rw_Vector( Int ), Ref( Int )) );
    end;

    stipulate

	my ieql:  (Int, Int) -> Bool = inline::i31eq;
	my peql:  (X, X) -> Bool = inline::ptreql;
	my ineq:  (Int, Int) -> Bool = inline::i31ne;
	my i32eq:  (Int32, Int32) -> Bool = inline::i32eq;
	my boxed:  X -> Bool = inline::boxed;
	my (+) : (Int, Int) -> Int = inline::i31add;
	my (-) : (Int, Int) -> Int = inline::i31sub;
	my (*) : (Int, Int) -> Int = inline::i31mul;
	my (:=): (Ref( X ), X) -> Void = (inline::(:=));
	my ordof:  (String, Int) -> Int = inline::ordof;
	my cast:  X -> Y = inline::cast;
	my get_chunk_tag:  X -> Int = inline::gettag;
	my get_chunk_len:  X -> Int = inline::chunklength;
	my get_data:  X -> Y = inline::get_seq_data;
	my rec_get:  ((X, Int)) -> Y = inline::record_get;
	my vec_len:  X -> Int = inline::length;
	my vec_get:  (Vector( X ), Int) -> X = inline::vec_get;
	my bitwise_and:  (Int, Int) -> Int = inline::i31andb;

	width_tags = 0u7;  #  5 tag bits plus "10" 

	#  the type annotation is just to work around an bug - sm 
	my ltu:  (Int, Int) -> Bool = inline::i31ltu;

    herein 

       # Limit of vector, string, etc. element count is one greater than 
       # the maximum length field value (sign should be 0).
       #	
       max_length
           =
	   {   my (-) = inline::w31sub;

	       infix val << ;

               my (<<) = inline::w31lshift;

	       int = inline::copy_31_31_wi;
	   
	       int ((0u1 << (0u31 - width_tags)) - 0u1);
	   };


       fun mk_norm_array (n, init)
           = 
	   if   (ieql (n, 0))
               
                inline::new_array0();
	   else
                if   (ltu (max_length, n))
                     raise exception SIZE; 
		else assembly::a::array (n, init);
                fi;
           fi;


       my mkrarray:  Int -> Rw_Vector( Float )
           =
           inline::cast  assembly::a::create_r;

       fun mk_real_array (n:  Int, v:  Float) : Rw_Vector( Float )
           =
           if   (ieql (n, 0))
               
                inline::new_array0 ();
           else
                if   (ltu (max_length, n))
                     raise exception SIZE; 
                else 
                     x = mkrarray n;

                     fun init i
                         = 
                         if   (ieql (i, n))
                             
                              x;
    			 else 
                              inline::f64_update (x, i, v); 
                              init ((+) (i, 1));
                         fi;

                     init 0;
                fi;
           fi;

       vector0
           =
           assembly::vector0;  #  needed to compile ``#[]'' 

      
       # LAZY: The following definitions are essentially stolen from
       #  lib7::Suspension.  Unfortunately, they had to be copied here in
       #  order to implement laziness (in particular, in order to be
       #  able to compute pids for them.)

       stipulate
	   package suspension
           :
           api {
	        Suspension( X );
	        delay:  (Void -> X) -> Suspension( X );
	        force:  Suspension( X ) -> X;
	   }
           =
           package {

	       # LAZY:  The following is hard-wired and needs to track the chunk
	       # descriptor definitions.

	       tsus = 0;  #  == ChunkDesc::special_unevaled_susp 
	       tses = 1;  #  == ChunkDesc::special_evaled_susp 


               Suspension X	       #  Just a hack for bootstrapping: 
                   =
                   SOMETHING  X;

	       fun delay (f:  Void -> X)
                   =
                   inline::make_special (tsus, f): Suspension( X );

	       fun force (x:  Suspension( X ))
                   =
		   if   (inline::i31eq((inline::getspecial x), tsus))
		       
                        my y:  X = rec_get (inline::cast x, 0) ();
			inline::cast x := y;
			inline::setspecial (inline::cast x, tses);
			y;
		   else
                        rec_get (inline::cast x, 0);
                   fi;
	   };
       herein
           include suspension;
       end;

       #  equality primitives 

    fun stringequal (a:  String, b:  String)
        =
	  if (peql (a, b))
	         TRUE;
          else
	       len = vec_len a;
              
	       if (ieql (len, vec_len b))

		    f len
                    where
			fun f 0 => TRUE;
			    f i => {   j = i - 1;
				       ieql (ordof (a, j), ordof (b, j)) and f j;
				   };
			end;
		    end;	            

	       else
                    FALSE;
               fi;
	fi;

    fun polyequal (a:  X, b:  X)
        =
        peql (a, b)
        or
        (   boxed a
            and
            boxed b
	    and
            {

		# NOTE: since GC may strip the header from the pair in question,
		# we must fetch the length before getting the tag, whenever we
		# might be dealing with a pair.

		a_len = get_chunk_len a;
		a_tag = get_chunk_tag a;

		fun pair_eq ()
		    =
		    {
			b_len = get_chunk_len b;
			b_tag = get_chunk_tag b;

			((ieql (b_tag, 0x02) and ieql (b_len, 2))
			  or ineq (bitwise_and (b_tag, 0x3), 0x2))
			and polyequal (rec_get (a, 0), rec_get (b, 0))
			and polyequal (rec_get (a, 1), rec_get (b, 1));
		      };

		fun eq_vec_data (len, a, b)
		    =
		    f 0
		    where
			fun f i
			    =
			    ieql (i, len)
			    or (polyequal (rec_get (a, i), rec_get (b, i))
			      and f (i+1));

		    end;

		case a_tag

		     0x02 /* tag_record */
                         =>
			 (ieql (a_len, 2) and pair_eq())
			 or (
			  ieql (get_chunk_tag b, 0x02) and ieql (get_chunk_len b, a_len)
			  and eq_vec_data (a_len, a, b));

		     0x06 /* tag_vec_hdr */
                         =>
			 # Length encodes element type:
			 #
			 case (get_chunk_len a)

			     0 /* seq_poly */
                                 =>
                                 {   a_len = vec_len a;
			             b_len = vec_len b;

				     ieql (a_len, b_len)
				     and eq_vec_data (a_len, get_data a, get_data b);
			         };

			     1 /* seq_word8 */
                                 =>
                                 stringequal (cast a, cast b);

			     _   => raise exception MATCH;  #  shut up compiler 
			 esac;

		     0x0a /* tag_arr_hdr */              =>  peql (get_data a, get_data b);
		     0x0e /* tag_arr_data and tag_ref */ =>  FALSE;
		     0x12 /* tag_raw32 */                =>  i32eq (cast a, cast b);
		     _    /* tagless pair */             =>  pair_eq();
		esac;
	    }
         );

    #  trace/debug/profile generation hooks:
    #
    Tdp_Plugin
	=
	{ name:      String,	#  name identifying plugin 
	  save:      Void -> Void -> Void,
	  push:      (Int, Int) -> Void -> Void,
	  nopush:    (Int, Int) -> Void,
	  enter:     (Int, Int) -> Void,
	  register:  (Int, Int, Int, String) -> Void
	};

    stipulate

	next = REF 0;
	hook = REF [] : Ref(  List(  Tdp_Plugin ) );

	my ( *) = inline::deref;

	infix val := ;

	my (:=)   =   inline::(:=);

	fun runwith a f
	    =
	    f a;

	fun map f
	    =
	    loop
	    where
		fun loop []      =>  [];
		    loop (h ! t) =>  f h ! loop t;
		end;
	    end;


	fun apply f
	    =
	    loop
	    where
		fun loop []      =>   ();
		    loop (h ! t) =>   { f h;  loop t;};
		end;
	    end;


	fun revmap f l
	    =
	    loop (l, [])
	    where
		fun loop ([],    a) =>  a;
		    loop (h ! t, a) =>  loop (t, f h ! a);
		end;
	    end;


	fun onestage sel ()
	    =
	    {   fns = map sel *hook;

		fn arg =  apply  (runwith arg)  fns;
	    };

	fun twostage sel ()
	    =
	    {   stage1_fns = map sel *hook;

		fn arg
		    =
		    {   stage2_fns = revmap (runwith arg) stage1_fns;

			fn () =  apply (runwith ()) stage2_fns;
		    };
	    };

    herein

	fun tdp_reserve n
	    =
	    {   r = *next;
		next := r + n;
		r;
	    };

	fun tdp_reset ()
	    =
	    next := 0;



	#  pre-defined kinds of IDs (to be passed to "register") 

	tdp_idk_entry_point   = 0;
	tdp_idk_non_tail_call = 1;
	tdp_idk_tail_call     = 2;

	tdp_save     =  twostage .save;
	tdp_push     =  twostage .push;

	tdp_nopush   =  onestage .nopush;
	tdp_enter    =  onestage .enter;
	tdp_register =  onestage .register;

	tdp_active_plugins = hook;
    end;

    assign      = inline::(:=);
    deref       = inline::deref;

    unboxed_set = inline::unboxed_set;
    get         = inline::rw_vec_get;
    iadd        = inline::i31add;

    test_inf           = core_integer::test_inf;
    trunc_inf          = core_integer::trunc_inf;
    fin_to_inf         = core_integer::fin_to_inf;

    make_neg_inf       = core_integer::make_neg_inf;
    make_pos_inf       = core_integer::make_pos_inf;

    make_small_neg_inf = core_integer::make_small_neg_inf;
    make_small_pos_inf = core_integer::make_small_pos_inf;

    inf_low_value      = core_integer::low_value;

end; #  with

    profile_sregister
        =
        REF (fn (x: assembly::Chunk, s: String)= x);

};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
