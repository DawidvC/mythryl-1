# transitive-closure.pkg
#
# In place transitive closures.
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6



###         "Images of broken light
###             which dance before me like a million eyes
###          that call me on and on
###             across the Universe.
###          Limitless undying love
###              which shines around me like a million suns,
###          it calls me on and on
###              across the Universe."
###
###                      -- The Beatles 1968


api Transitive_Closure {

    acyclic_transitive_closure
         :
         { plus:    (E, E) -> E,
           simple:  Bool
         }
         ->
         graph::Graph( N, E, G )
         ->
         Void;

    acyclic_transitive_closure2
       :
       { plus: (E, E) -> E,
         max:  (E, E) -> E
       }
       ->
       graph::Graph( N, E, G )
       ->
       Void;

    transitive_closure
       :
       ((E, E) -> E)
       ->
       graph::Graph( N, E, G )
       ->
       Void;
};

package transitive_closure: (weak)  Transitive_Closure {		# Transitive_Closure	is from   src/lib/graph/transitive-closure.pkg


    package g= graph;		# graph		is from   src/lib/graph/graph.pkg
    package a= rw_vector;	# rw_vector	is from   src/lib/std/src/rw-vector.pkg

    # Transitive closure for an acyclic graph.
    # Should probably use a better algorithm.		# XXX BUGGO FIXME

    fun acyclic_transitive_closure { plus, simple } (ggg' as g::GRAPH ggg)
	=
	{   nnn   =  ggg.capacity ();
	    reach =  a::make_rw_vector (nnn,-1);     #  reach[v] = u iff v -> u 

	    fun visit u
		=
		{   fun visit_edge (v, u, e)
			=
			{   fun trans (w, v, e')
				=
				if  (a::get (reach, w)  !=  u)
				     a::set (reach, w, u);
				     ggg.add_edge (w, u, plus(e,e'));
				fi;

			    apply trans (ggg.in_edges v);
			};

		    in_edges =   ggg.in_edges u;

		    if   simple
			 apply
			     (fn (v, _, _) =  a::set (reach, u, v))
			     in_edges;
		    fi;

		    apply  visit_edge  in_edges;
		};

	    list =   graph_topological_sort::topological_sort ggg' (map #1 (ggg.nodes ()));

	    apply visit list;
	};

    fun acyclic_transitive_closure2 { plus, max } (ggg' as g::GRAPH ggg)
	=
	{   nnn    = ggg.capacity ();
	    reach  = a::make_rw_vector (nnn,-1);	#  reach[v] = u iff v -> u 
	    labels = a::make_rw_vector (nnn,[]);	#  l in labels[v] iff v ->l u 

	    fun visit u
		=
		{   fun ins (v, e, nodes)
			=
			if   (a::get (reach, v)  ==  u)

			     a::set (labels, v, e ! a::get (labels, v));
                             nodes;
			else 
                             a::set (reach, v, u);
                             a::set (labels, v,[e]);
                             v ! nodes;
                        fi;

		    fun init ([], nodes) => nodes;
			init((v, u, e) ! es, nodes) => init (es, ins (v, e, nodes));
		    end;

		    fun add_trans ([], nodes)
                            =>
                            nodes;

			add_trans((v, u, e) ! es, nodes)
			    => 
			    {   fun trans ([], nodes)
                                        =>
                                        nodes;

				    trans((w, v, e') ! es, nodes)
                                        =>
                                        trans (es, ins (w, plus(e, e'), nodes));
                                end;

			        add_trans (es, trans (ggg.in_edges v, nodes));
                            };
		    end;

		    in_edges =  ggg.in_edges u;

		    nodes =  init      (in_edges, []   );       #  insert v -> u 
		    nodes =  add_trans (in_edges, nodes);	#  insert w -> u if w -> v 

		    fun fold_all ([], es)
                            =>
                            es;

			fold_all (v ! vs, es)
			    =>
			    case (a::get (labels, v))
                              
			         []       =>  raise exception graph::BAD_GRAPH "acyclic_transitive_closure2";
			         [e]      =>  fold_all (vs, (v, u, e) ! es);
			         e' ! es' =>  fold_all (vs, (v, u, fold_right max e' es') ! es);
			    esac;
		    end;

		    ggg.set_in_edges (u, fold_all (nodes,[])); 
		};

	    list =  graph_topological_sort::topological_sort ggg' (map #1 (ggg.nodes ()));

	    apply visit list;
	};

    fun transitive_closure f (g::GRAPH ggg)
	=
	raise exception graph::UNIMPLEMENTED;
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
