## sparc-props.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/sparc.make6

# We are invoked from:
#
#     src/lib/compiler/codegen/sun/sparc-codetree.pkg

generic package sparc_instructionset_properties_g (

    package instruction_set
	:
	Instruction_Set_Sparc;						# Instruction_Set_Sparc		is from   src/lib/compiler/lower/sun/instruction/instruction-set-sparc.api

    package codetree_eval
	:
	Codetree_Eval							# Codetree_Eval			is from   src/lib/compiler/lower/codetree/codetree-eval.api
	where codetree == instruction_set::codetree;

    package codetree_hash
	:
	Codetree_Hash							# Codetree_Hash			is from   src/lib/compiler/lower/codetree/codetree-hash.api
	where codetree == instruction_set::codetree;
)

: (weak) Instruction_Properties						# Instruction_Properties	is from   src/lib/compiler/lower/instruction/instruction-properties.api

{
    package instruction_set =  instruction_set;
    package cells           =  instruction_set::cells;
    package codetree        =  instruction_set::codetree;

    package i = instruction_set;
    package c = cells;
    package t = codetree;
    package cb= cells_basis;						# cells_basis			is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    exception NEGATE_CONDITIONAL;

    fun error msg
	=
	lowcode_error_message::error("sparc_instructionset_properties_g", msg);

     Kind = IK_JUMP | IK_NOP | IK_INSTRUCTION | IK_COPY | IK_CALL 
	  | IK_CALL_WITH_CUTS | IK_PHI | IK_SOURCE | IK_SINK;

     Target = LABELLED  label::Label | FALLTHROUGH | ESCAPES;

    zero_r = null_or::the (c::zero_reg cb::REGISTER);
    r15   = c::reg cb::REGISTER 15;
    r31   = c::reg cb::REGISTER 31;


    # ========================================================================
    #  Instruction Kinds
    # ========================================================================

    fun instruction_kind (i::NOTE { instruction, ... } )
            =>
            instruction_kind instruction;

	instruction_kind (i::COPY _)
            =>
            IK_COPY;

	instruction_kind (i::BASE_INSTRUCTION instruction)
	    => 
	    case instruction
	      
		(i::BICC _)  => IK_JUMP;
		(i::FBFCC _) => IK_JUMP;
		(i::JMP _)   => IK_JUMP;
		(i::RET _)   => IK_JUMP;
		(i::BR _)    => IK_JUMP;
		(i::BP _)    => IK_JUMP;
		(i::TICC { t=>i::BA, ... } ) => IK_JUMP;		#  trap always 
		(i::CALL { cuts_to=>_ ! _, ... } )  => IK_CALL_WITH_CUTS;
		(i::CALL _)   => IK_CALL;
		(i::JMPL { cuts_to=>_ ! _, ... } )  => IK_CALL_WITH_CUTS;
		(i::JMPL _)   => IK_CALL;
		(i::PHI _)    => IK_PHI;
		(i::SOURCE _) => IK_SOURCE;
		(i::SINK _)   => IK_SINK;
		 _            => IK_INSTRUCTION;
            esac;

	instruction_kind _ => error "instrKind";
    end;

    fun branch_targets (i::NOTE { instruction, ... } )
            =>
            branch_targets instruction;

	branch_targets (i::BASE_INSTRUCTION instruction)
	    => 
	    case instruction 
	      
                (i::BICC { b=>i::BA, label, ... } )   =>   [LABELLED label];
		(i::BICC { label, ... } )             =>   [LABELLED label, FALLTHROUGH]; 
		(i::FBFCC { b=>i::FBA, label, ... } ) =>   [LABELLED label];
		(i::FBFCC { label, ... } )            =>   [LABELLED label, FALLTHROUGH];
		(i::BR { label, ... } )               =>   [LABELLED label, FALLTHROUGH];
		(i::BP { label, ... } )               =>   [LABELLED label, FALLTHROUGH];
		(i::JMP { labs => [], ... } )         =>   [ESCAPES]; 
		(i::RET _)                            =>   [ESCAPES];
		(i::JMP { labs, ... } )               =>   map LABELLED labs;
		(i::CALL { cuts_to, ... } )           =>   FALLTHROUGH ! map LABELLED cuts_to;
		(i::JMPL { cuts_to, ... } )           =>   FALLTHROUGH ! map LABELLED cuts_to;
		(i::TICC { t=>i::BA, ... } )          =>   [ESCAPES];
		_ => error "branchTargets";
            esac;

	branch_targets _  => error "branchTargets";
    end;


    fun set_jump_target (i::NOTE { note, instruction }, l)
            =>
            i::NOTE { note, instruction => set_jump_target (instruction, l) };

        set_jump_target (i::BASE_INSTRUCTION (i::BICC { b=>i::BA, a, nop, ... } ), l)
            => 
	    i::bicc { b=>i::BA, a, label=>l, nop };

        set_jump_target _ => error "setJumpTarget";
    end;


    fun set_branch_targets { i=>i::NOTE { note, instruction }, t, f }
            => 
	    i::NOTE { note, instruction=>set_branch_targets { i=>instruction, t, f }};

	set_branch_targets { i=>i::BASE_INSTRUCTION (i::BICC { b=>i::BA, a, nop, ... } ), ... }
	     =>  
	     error "setBranchTargets: Bicc";

	set_branch_targets { i=>i::BASE_INSTRUCTION (i::BICC { b, a, nop, ... } ), t, f }
	     =>
	     i::bicc { b, a, label=>t, nop };

	set_branch_targets { i=>i::BASE_INSTRUCTION (i::FBFCC { b, a, nop, ... } ), t, ... }
	     => 
	     i::fbfcc { b, a, label=>t, nop };

	set_branch_targets { i=>i::BASE_INSTRUCTION (i::BR { rcond, p, r, a, nop, ... } ), t, ... }
	     => 
	     i::br { rcond, p, r, a, label=>t, nop };

	set_branch_targets { i=>i::BASE_INSTRUCTION (i::BP { b, cc, p, a, nop, ... } ), t, ... }
	     => 
	     i::bp { b, cc, p, a, label=>t, nop };

	set_branch_targets _ => error "setBranchTargets";
    end;

    fun rev_cond i::BA   => i::BN;
	rev_cond i::BN   => i::BA;
	rev_cond i::BNE  => i::BE;
	rev_cond i::BE   => i::BNE;
	rev_cond i::BG   => i::BLE;
	rev_cond i::BLE  => i::BG;
	rev_cond i::BGE  => i::BL;
	rev_cond i::BL   => i::BGE;
	rev_cond i::BGU  => i::BLEU;
	rev_cond i::BLEU => i::BGU;
	rev_cond i::BCC  => i::BCS;
	rev_cond i::BCS  => i::BCC;
	rev_cond i::BPOS => i::BNEG;
	rev_cond i::BNEG => i::BPOS;
	rev_cond i::BVC  => i::BVS;
	rev_cond i::BVS  => i::BVC;
    end;

    fun rev_fcond i::FBA   => i::FBN;
	rev_fcond i::FBN   => i::FBA;
	rev_fcond i::FBU   => i::FBO;
	rev_fcond i::FBG   => i::FBULE;
	rev_fcond i::FBUG  => i::FBLE;
	rev_fcond i::FBL   => i::FBUGE;
	rev_fcond i::FBUL  => i::FBGE;
	rev_fcond i::FBLG  => i::FBUE;
	rev_fcond i::FBNE  => i::FBE;
	rev_fcond i::FBE   => i::FBNE;
	rev_fcond i::FBUE  => i::FBLG;
	rev_fcond i::FBGE  => i::FBUL;
	rev_fcond i::FBUGE => i::FBL;
	rev_fcond i::FBLE  => i::FBUG;
	rev_fcond i::FBULE => i::FBG;
	rev_fcond i::FBO   => i::FBU;
    end;

    fun rev_rcond i::RZ   => i::RNZ;
	rev_rcond i::RLEZ => i::RGZ;
	rev_rcond i::RLZ  => i::RGEZ;
	rev_rcond i::RNZ  => i::RZ;
	rev_rcond i::RGZ  => i::RLEZ;
	rev_rcond i::RGEZ => i::RLZ;
    end;

    fun rev_p i::PT => i::PN;
        rev_p i::PN => i::PT;
    end;

    fun negate_conditional (i::BASE_INSTRUCTION (i::BICC { b, a, nop, ... } ), lab)
            =>
	    i::bicc { b=>rev_cond b, a, label=>lab, nop };

	negate_conditional (i::BASE_INSTRUCTION (i::FBFCC { b, a, nop, ... } ), lab)
            =>
	    i::fbfcc { b=>rev_fcond b, a, label=>lab, nop }; 

	negate_conditional (i::BASE_INSTRUCTION (i::BR { p, r, rcond, a, nop, ... } ), lab)
            =>
	    i::br { p=>rev_p p, a, r, rcond=>rev_rcond rcond, label=>lab, nop }; 

	negate_conditional (i::BASE_INSTRUCTION (i::BP { b, cc, p, a, nop, ... } ), lab)
            =>
	    i::bp { p=>rev_p p, a, b=>rev_cond b, cc, label=>lab, nop }; 

	negate_conditional (i::NOTE { instruction, note }, lab)
            => 
	    i::NOTE { instruction => negate_conditional (instruction, lab), note };

	negate_conditional _ => raise exception NEGATE_CONDITIONAL;
    end;

    fun jump label
        =
        i::bicc { b=>i::BA, a=>TRUE, label, nop=>TRUE };

    immed_range = { lo=> -4096, hi => 4095 };

    fun load_immed { immed, t }
        = 
	i::arith
          { a=>i::OR,
            r=>zero_r,
            i=> if (immed_range.lo <= immed and immed <= immed_range.hi)
		     i::IMMED immed;
                else i::LAB (t::LITERAL (integer::from_int immed));
                fi,
            d=>t
          };

    fun load_operand { opn, t }
        =
        i::arith { a=>i::OR, r=>zero_r, i=>opn, d=>t };

    fun move_instruction (i::NOTE { instruction, ... } ) => move_instruction instruction;
	move_instruction (i::COPY _)	            => TRUE;
	move_instruction (i::LIVE _)               => FALSE;
	move_instruction (i::DEAD _)               => FALSE;
	move_instruction _                         => FALSE;
    end;

    fun nop ()
        =
        i::sethi { d=>zero_r, i=>0 };

    # ========================================================================
    #  Parallel Move
    # ========================================================================
    fun move_tmp_r (i::COPY { tmp, ... } )
	    => 
	    case  tmp 
	      
	        THE (i::DIRECT  r) =>   THE r;
		THE (i::FDIRECT f) =>   THE f;
		_                  =>   NULL;
	    esac;

	move_tmp_r (i::NOTE { instruction, ... } ) => move_tmp_r instruction;
	move_tmp_r _ => NULL;
    end;


    fun move_dst_src (i::COPY { dst, src, ... } ) => (dst, src);
        move_dst_src (i::NOTE { instruction, ... } ) => move_dst_src instruction;
        move_dst_src _ => error "move_dst_src";
    end;

    # ========================================================================
    #  Equality and hashing
    # ========================================================================

    fun hash_opn (i::REG r) => cb::hash_cell r;
	hash_opn (i::IMMED i) => unt::from_int i;
	hash_opn (i::LAB l) => codetree_hash::hash l;
	hash_opn (i::LO l) => codetree_hash::hash l;
	hash_opn (i::HI l) => codetree_hash::hash l;
    end;

    fun eq_opn (i::REG a, i::REG b) => cb::same_color (a, b);
	eq_opn (i::IMMED a, i::IMMED b) => a == b;
	eq_opn (i::LAB a, i::LAB b) => codetree_eval::(====) (a, b);
	eq_opn (i::LO a, i::LO b) => codetree_eval::(====) (a, b);
	eq_opn (i::HI a, i::HI b) => codetree_eval::(====) (a, b);
	eq_opn _ => FALSE;
    end;

    fun def_use_r instruction
	=
	{   fun oper (i::REG r, def, uses) => (def, r ! uses);
		oper (_, def, uses)        => (def, uses);
	    end;

	    fun sparc_du instruction
	       =
	       case  instruction 

		   i::LOAD   { r, d, i, ... }  => oper (i,[d],[r]);
		   i::STORE  { r, d, i, ... }  => oper (i,[],[r, d]);
		   i::FLOAD  { r, d, i, ... }  => oper (i,[],[r]);
		   i::FSTORE { r, d, i, ... }  => oper (i,[],[r]);
		   i::SETHI  { d,      ... }  => ([d],[]);
		   i::ARITH  { r, i, d, ... }  => oper (i,[d],[r]);
		   i::SHIFT  { r, i, d, ... }  => oper (i,[d],[r]);
		   i::BR { r, ... }            => ([],[r]);
		   i::MOVICC { i, d, ... }    => oper (i,[d],[d]);
		   i::MOVFCC { i, d, ... }    => oper (i,[d],[d]);
		   i::MOVR { r, i, d, ... }    => oper (i,[d],[r, d]);
		   i::CALL { defs, uses, ... } => (r15 ! c::get_reg defs, c::get_reg uses);
		   i::JMP { r, i, ... }       => oper (i,[],[r]);
		   i::RET { leaf=>FALSE, ... } => ([],[r31]);
		   i::RET { leaf=>TRUE, ... }  => ([],[r15]);
		   i::SAVE { r, i, d }       => oper (i,[d],[r]);
		   i::RESTORE { r, i, d }    => oper (i,[d],[r]);
		   i::TICC { r, i, ... }       => oper (i,[],[r]); 
		   i::RDY { d, ... }           => ([d],[]); 
		   i::WRY { r, i, ... }        => oper (i,[],[r]); 

		   i::JMPL   { defs, uses, d, r, i, ... }
		       => 
		       oper (i, d ! c::get_reg defs, r ! c::get_reg uses);

		   _                         => ([],[]);
	       esac;

	    case instruction

		i::NOTE { instruction, ... } => def_use_r instruction;
		i::LIVE { regs, ... } => ([], c::get_reg regs);
		i::DEAD { regs, ... } => (c::get_reg regs, []);
		i::BASE_INSTRUCTION i => sparc_du i;
		i::COPY { kind, dst, src, tmp, ... }
		    =>
		    {   my (d, u)
                            =
                            case kind
                                cb::REGISTER => (dst, src);
                                _            => ([], []);
                            esac;

			case tmp 
			   THE (i::DIRECT r) => (r ! d, u);
			   THE (i::DISPLACE { base, ... } ) => (d, base ! u);
			  _ => (d, u);
			esac;
		    };
	    esac;
        };

    # Use of FP registers:
    #
    fun def_use_f instruction
        =
        {   fun sparc_du instruction
		=
		case  instruction
                  
		    i::FLOAD  { r, d, i, ... }    => ([d],[]);
		    i::FSTORE { r, d, i, ... }    => ([],[d]);
		    i::FPOP1  { r, d, ... }       => ([d],[r]);
		    i::FPOP2  { r1, r2, d, ... }  => ([d],[r1, r2]);
		    i::FCMP   { r1, r2, ... }     => ([],[r1, r2]);
		    i::JMPL   { defs, uses, ... } => (c::get_freg defs, c::get_freg uses);
		    i::CALL   { defs, uses, ... } => (c::get_freg defs, c::get_freg uses);
		    i::FMOVICC { r, d, ... }      => ([d],[r, d]);
		    i::FMOVFCC { r, d, ... }      => ([d],[r, d]);

		    _                           => ([],[]);
                esac;

	     case instruction
	       
		 i::NOTE { instruction, ... } => def_use_f instruction;
		 i::LIVE { regs, ... } => ([], c::get_freg regs);
		 i::DEAD { regs, ... } => (c::get_freg regs, []);
		 i::BASE_INSTRUCTION i => sparc_du i;

		 i::COPY { kind, dst, src, tmp, ... }
                     =>
                     {   my (d, u)
                             =
                             case  kind
                               
                                 cb::FLOAT_REGISTER => (dst, src);
                                 _ => ([],[]);
                             esac;

		         case  tmp
		           
                             THE (i::FDIRECT f) => (f ! d, u);
			     _                  => (d, u);
                         esac;
		     };
             esac;
    };

    fun def_use cb::REGISTER       =>   def_use_r;
        def_use cb::FLOAT_REGISTER =>   def_use_f;
        def_use _                  =>   error "defUse";
    end;


    # ========================================================================
    #  Annotations 
    # ========================================================================*/

    fun get_notes (i::NOTE { instruction, note } )
	    => 
	    {   my (instruction, notes) = get_notes instruction;
		(instruction, note ! notes);
	    };

        get_notes i
            =>
            (i, []);
    end;

    fun annotate (instruction, note)
        =
        i::NOTE { instruction, note };


    # ========================================================================
    #  Replicate an instruction
    # ========================================================================*/

    fun replicate (i::NOTE { instruction, note } )
            =>
            i::NOTE { instruction => replicate instruction, note };

        replicate (i::COPY { kind, size_in_bits, tmp=>THE _, dst, src } )
	    =>  
	    i::COPY { kind, size_in_bits, tmp=>THE (i::DIRECT (c::new_reg())), dst, src };

	replicate i =>   i;
    end;
};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
