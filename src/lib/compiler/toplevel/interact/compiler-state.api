## compiler-state.api

# Compiled by:
#     src/lib/compiler/core.make6



# This defines the core toplevel datastructures
# used to track known symbols, loaded modules &tc
# during a compile.
#
# (But see   src/app/make7/main/make7-state.pkg
# for a still higher level in the state hierarchy.)
#
# As a rough guide to the lay of the land,
# here we implement references to compiler_table_set
# records, which is to say, compiler_table_set records
# which we can update via side-effect.
#
# compiler_table_set records are defined in
#
#     src/lib/compiler/toplevel/compiler-state/compiler-table-set.sml
#
# and are composed of three principal parts:
#
#    A symbol table holding per-symbol type information &tc
#    A linking table tracking loaded libraries.
#    An inlining table tracking cross-module function inlining info.


api Compiler_State {

    Compiler_Table_Set
        =
        compiler_table_set::Compiler_Table_Set;			# compiler_table_set	is from   src/lib/compiler/toplevel/compiler-state/compiler-table-set.pkg

    Compiler_Table_Set_Reference
        =
        { get: Void -> Compiler_Table_Set,
	  set: Compiler_Table_Set -> Void
	};

    Compiler_State
        =
        { top_level:     Compiler_Table_Set_Reference,
	  base:          Compiler_Table_Set_Reference,
	  property_list:  property_list::Property_List			# property_list		is from   src/lib/src/property-list.pkg
        };

    compiler_state:    Void -> Compiler_State;

    top_level:      Void -> Compiler_Table_Set_Reference;		#  Interactive top level dictionary 
    base:           Void -> Compiler_Table_Set_Reference;
    pervasive:              Compiler_Table_Set_Reference;

    property_list:  Void -> property_list::Property_List;


    combined:  Void -> Compiler_Table_Set;

    # Push a given Compiler_State onto the stack,
    # run the thunk, then pop the state:

    run_thunk_in_compiler_state:  (((Void -> X), Compiler_State))   -> X;

    list_bound_symbols:  Void -> List( symbol::Symbol );	# symbol	is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
};





##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
