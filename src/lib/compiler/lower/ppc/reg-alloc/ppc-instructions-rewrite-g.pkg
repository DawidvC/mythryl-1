## ppc-instructions-rewrite-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/ppc.make6

# We get invoked from:
#
#     src/lib/compiler/codegen/ppc/ppc-codegen.pkg
#     src/lib/compiler/lower/ppc/reg-alloc/ppc-spill-instructions-g.pkg

generic package ppc_instructions_rewrite_g (

    instruction_set:  Instruction_Set_Ppc		# Instruction_Set_Ppc	is from   src/lib/compiler/lower/ppc/instruction/instruction-set-ppc.api
)

{
    package instruction_set = instruction_set;
    package cells           = instruction_set::cells;

    package i  = instruction_set;
    package c  = cells;
    package cb = cells_basis;				# cells_basis		is from   src/lib/compiler/lower/instruction/cells-basis.pkg
    package cs = cb::cell_set;

    fun error msg
        =
        lowcode_error_message::error ("ppc_instructions_rewrite_g", msg);

    fun ea (e as THE (i::DIRECT r), rs, rt)
            =>
	    if (cb::same_color (r, rs))  THE (i::DIRECT rt);
            else                         e;
            fi; 

        ea (e as THE (i::FDIRECT r), rs, rt)
            => 
	    if (cb::same_color (r, rs))  THE (i::FDIRECT rt);
            else                         e;
            fi; 

        ea (e as THE (i::DISPLACE { base, disp, mem } ), rs, rt)
            =>
	    if (cb::same_color (base, rs))   THE (i::DISPLACE { base=>rt, disp, mem } ); 
	    else                             e;
            fi;

        ea (NULL, _, _)
            =>
            NULL;
    end; 

    fun rewrite_use (instruction, rs, rt)
	=
	{
	    fun rplac r
                =
                if (cb::same_color (r, rs))  rt;
                else                         r;
                fi;

	    fun rw_operand (operand as i::REG_OP r)
                    => 
		    if (cb::same_color (r, rs))  i::REG_OP rt;
                    else                         operand;
                    fi;

	        rw_operand operand => operand;
            end;

	    fun ea (THE (i::DISPLACE { base, disp, mem } ))
                    => 
		    THE (i::DISPLACE { base=>rplac base, disp, mem } ); 

	        ea x => x;
            end;

	    fun ppc_use  instruction
	      = 
	      case instruction

		  i::LL { ld, rt, ra, d, mem }
		      =>
		      i::LL { ld, rt, ra=>rplac ra, d=>rw_operand d, mem };

		  i::LF { ld, ft, ra, d, mem }
		      =>
		      i::LF { ld, ft, ra=>rplac ra, d=>rw_operand d, mem };

		  i::ST { st, rs, ra, d, mem }
		      => 
		      i::ST { st, rs=>rplac rs, ra=>rplac ra, d=>rw_operand d, mem };

		  i::STF { st, fs, ra, d, mem }
		      => 
		      i::STF { st, fs, ra=>rplac ra, d=>rw_operand d, mem };

		  i::UNARY { oper, rt, ra, rc, oe }
                      =>
		      i::UNARY { oper, rt, ra=>rplac ra, rc, oe };

		  i::ARITH { oper, rt, ra, rb, rc, oe }
                      => 
		      i::ARITH { oper, rt, ra=>rplac ra, rb=>rplac rb, rc, oe };

		  i::ARITHI { oper, rt, ra, im }
                      => 
		      i::ARITHI { oper, rt, ra=>rplac ra, im=>rw_operand im };

		  i::ROTATE { oper, ra, rs, sh, mb, me }
                      =>
		      i::ROTATE { oper, ra, rs=>rplac rs, sh=>rplac sh, mb, me };

		  i::ROTATEI { oper, ra, rs, sh, mb, me }
                      =>
		      i::ROTATEI { oper, ra, rs=>rplac rs, sh=>rw_operand sh, mb, me };

		  i::COMPARE { cmp, bf, l, ra, rb }
                      =>
		      i::COMPARE { cmp, bf, l, ra=>rplac ra, rb=>rw_operand rb };

		  i::MTSPR { rs, spr } => i::MTSPR { rs=>rplac rs, spr };
		  i::TW { to, ra, si } => i::TW { to, ra=>rplac ra, si=>rw_operand si };
		  i::TD { to, ra, si } => i::TD { to, ra=>rplac ra, si=>rw_operand si };

		  i::CALL { def, uses, cuts_to, mem }
                      => 
		      i::CALL { def, uses=>cs::map { from=>rs, to=>rt } uses, 
			     cuts_to, mem };

		  i::LWARX { rt, ra, rb }
                      =>
		      i::LWARX { rt, ra=>rplac ra, rb=>rplac rb };

		  i::STWCX { rs, ra, rb }
                      =>
		      i::STWCX { rs=>rplac rs, ra=>rplac ra, rb=>rplac rb };

		  _ => instruction;
	    esac;


	    case instruction

		i::NOTE { instruction, ... }
                    =>
                    rewrite_use (instruction, rs, rt);

	        i::BASE_INSTRUCTION instruction
                    =>
                    i::BASE_INSTRUCTION (ppc_use instruction);

	        i::COPY { kind, size_in_bits, dst, src, tmp }
                   =>
		   i::COPY { kind, size_in_bits, dst, tmp=> ea tmp,
		             src=>case kind    cb::REGISTER => map rplac src;  _ => src; esac
                           };

	        i::LIVE { regs, spilled }
                    => 
		    i::LIVE { regs=>c::add_reg (rt, c::rmv_reg (rs, regs)), spilled };

	        _ => error "rewrite_use";
	    esac;
	};


    fun rewrite_def (instruction, rs, rt)
	=
	{   fun rplac r
                =
                if (cb::same_color (r, rs))  rt;
                else                         r;
                fi;

	    fun ea (THE (i::DIRECT r)) => THE (i::DIRECT (rplac r));
	        ea x => x;
            end;

	    fun ppc_def  instruction
		= 
		case instruction

		    i::LL { ld, rt, ra, d, mem }
                        =>
		        i::LL { ld, rt=>rplac rt, ra, d, mem };

		    i::UNARY { oper, rt, ra, rc, oe }
                        =>
		        i::UNARY { oper, rt=>rplac rt, ra, rc, oe };

		    i::ARITH { oper, rt, ra, rb, rc, oe }
                        =>
		        i::ARITH { oper, rt=>rplac rt, ra, rb, rc, oe };

		    i::ARITHI { oper, rt, ra, im }
                        =>
		        i::ARITHI { oper, rt=>rplac rt, ra, im };

		    i::ROTATE { oper, ra, rs, sh, mb, me }
                        =>
		        i::ROTATE { oper, ra=>rplac ra, rs, sh, mb, me };

		    i::ROTATEI { oper, ra, rs, sh, mb, me }
                        =>
		        i::ROTATEI { oper, ra=>rplac ra, rs, sh, mb, me };

		    i::MFSPR { rt, spr }
                        =>
                        i::MFSPR { rt=>rplac rt, spr };

		    i::CALL { def, uses, cuts_to, mem }
                        => 
		        i::CALL { def=>cs::map { from=>rs, to=>rt } def, uses, 
			     cuts_to, mem };

		    i::LWARX { rt, ra, rb }
                        =>
			i::LWARX { rt=>rplac rt, ra, rb };

		    _   =>
                        instruction;
               esac;


	    case instruction

		i::NOTE { instruction, ... }
                    =>
                    rewrite_def (instruction, rs, rt);

		i::BASE_INSTRUCTION i
                    =>
                    i::BASE_INSTRUCTION (ppc_def i);

		i::DEAD { regs, spilled }
                    => 
		    i::DEAD { regs=>c::add_reg (rt, c::rmv_reg (rs, regs)), spilled };

		i::COPY { kind, size_in_bits, dst, src, tmp }
		    =>
		    i::COPY { kind, size_in_bits, src, tmp=>ea tmp, 
			      dst => case kind
                                         cb::REGISTER => map rplac dst;
                                         _            => dst;
                                     esac
			    };

		_ => error "rewriteDef";
	    esac;
	};


    fun frewrite_use (instruction, fs, ft)
	=
	{   fun rplac r
                =
                if (cb::same_color (r, fs) ) ft; else r;fi;

	    fun ppc_use  instruction
		= 
		case instruction
                  
		   i::STF { st, fs, ra, d, mem }
                       =>
		       i::STF { st, fs=>rplac fs, ra, d, mem };

		   i::CALL { def, uses, cuts_to, mem }
                       => 
		       i::CALL { def, uses=>cs::map { from=>fs, to=>ft } uses, cuts_to, mem };

		   i::FCOMPARE { cmp, bf, fa, fb }
                       =>
		       i::FCOMPARE { cmp, bf, fa=>rplac fa, fb=>rplac fb };

		   i::FUNARY { oper, ft, fb, rc }
                       =>
		       i::FUNARY { oper, ft, fb=>rplac fb, rc };

		   i::FARITH { oper, ft, fa, fb, rc }
                       =>
		       i::FARITH { oper, ft, fa=>rplac fa, fb=>rplac fb, rc };

		   i::FARITH3 { oper, ft, fa, fb, fc, rc }
                       =>
		       i::FARITH3 { oper, ft, fa=>rplac fa, fb=>rplac fb, fc=>rplac fc, rc };

		   _   => instruction;
              esac;


	    case instruction
              
		i::NOTE { instruction, ... }
                    =>
                    frewrite_use (instruction, fs, ft);

		i::BASE_INSTRUCTION i
                    =>
                    i::BASE_INSTRUCTION (ppc_use i);

		i::LIVE { regs, spilled }
                    => 
		    i::LIVE { regs=>c::add_freg (ft, c::rmv_freg (fs, regs)), spilled };

		i::COPY { kind as cb::FLOAT_REGISTER, size_in_bits, dst, src, tmp }
		    =>
		    i::COPY { kind, size_in_bits, dst, src=>map rplac src, tmp };

		_ => error "frewriteUse";
            esac;

	};

    fun frewrite_def (instruction, fs, ft)
	=
	{   fun rplac r
                =
                if (cb::same_color (r, fs) ) ft; else r;fi;

	    fun rplac_ea (THE (i::FDIRECT f))
                    =>
                    THE (i::FDIRECT (rplac f));

	        rplac_ea ea
                    =>
                    ea;
            end;

	    fun ppc_def  instruction
		= 
		case instruction
                  
		    i::LF { ld, ft, ra, d, mem }
                        =>
		        i::LF { ld, ft=>rplac ft, ra, d, mem };

		    i::FUNARY { oper, ft, fb, rc }
                        =>
		        i::FUNARY { oper, ft=>rplac ft, fb, rc };

		    i::FARITH { oper, ft, fa, fb, rc }
                        =>
		        i::FARITH { oper, ft=>rplac ft, fa, fb, rc };

		    i::FARITH3 { oper, ft, fa, fb, fc, rc }
                        =>
		        i::FARITH3 { oper, ft=>rplac ft, fa, fb, fc, rc };

		    #  CALL = BCLR { bo=ALWAYS, bf=0, bit=0, LK=TRUE, labels=[] 
		    #
		    i::CALL { def, uses, cuts_to, mem }
                        => 
		        i::CALL { def=>cs::map { from=>fs, to=>ft } def, uses, cuts_to, mem };

		    _ => instruction;
                esac;

	      case instruction   

		  i::NOTE { instruction, ... }
		      =>
		      frewrite_def (instruction, fs, ft);

		  i::BASE_INSTRUCTION  i
		      =>
		      i::BASE_INSTRUCTION (ppc_def  i);

		  i::DEAD { regs, spilled }
		      => 
		      i::DEAD { regs=>c::add_freg (ft, c::rmv_freg (fs, regs)), spilled };

		  i::COPY { kind as cb::FLOAT_REGISTER, size_in_bits, dst, src, tmp }
		      =>
		      i::COPY { kind, size_in_bits, dst=>map rplac dst, src,  tmp=>rplac_ea tmp };

		  _ => error "frewriteDef";
	      esac;
	};
};

