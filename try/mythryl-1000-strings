#!/usr/bin/mythryl

# A simple benchmark that allocates and then frees a lot of strings

include rw_vector;

fun allocate_and_discard_1000_strings ()
    =
    {   vec = rw_vector::make_rw_vector (1000, "");

        # Demonstrate that Mythryl does tail recursion
        # right, unlike C, Java or Perl5: :) 
	#
        fun loop 0 => ();
            loop n => {  n = n - 1;
                        string = int::to_string n;
                        vec[n] := string;
                        loop n;
                     };
        end;

        loop 1000;

        vec; 
    };



passes =   100000;

started_at  =   time::get ();

i = REF 0;
for (*i < passes) {
    allocate_and_discard_1000_strings ();
    i := *i + 1;
};

print "Elapsed time = ";
print (large_int::to_string (time::to_seconds(time::get ()) - time::to_seconds(started_at)));
print " seconds.\n";
