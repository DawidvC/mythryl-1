# A tool for running arbitrary shell commands from make7.
#
#   (C) 2000 Lucent Technologies, Bell Laboratories
#
# Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/tools/shell/shell-tool.make6

package shell_tool {

    stipulate

	include tools;
	package subst =   string_substitution;		# string_substitution	is from   src/app/make7/util/string-substitution.pkg

	tool = "Shell-Command";
	ilk = "shell";
	kw_ilk = "ilk";
	kw_options = "options";
	kw_source = "source";
	kw_target = "target";
	kwl = [kw_ilk, kw_options, kw_source, kw_target];

	fun err msg
            =
            raise exception TOOL_ERROR { tool, msg };

	fun badspec kw
            =
            err (cat ["bad specification for keyword `",
				      kw, "'"]);

	fun rule { spec, context, native2pathmaker, default_ilk_of, sysinfo }
            =
            {   spec ->  { name => str, make_path, opts => too, derived, ... } : Spec;

		sysinfo ->  { host_property, platform };
                    

		specpath =  srcpath (make_path ());
		specname =  native_spec specpath;

		my (sname, tname, tilk, topts, cmdline)
                    =
		    case too					# "too" is  something like "tool opts"
		      
		         NULL
                             =>
                             err "missing options";

		         THE ol
			     =>
			     {   my { matches, remaining_options }
				     =
				     parse_options
					{ tool, keywords => kwl, options => ol };

				 fun fmatch kw
				     =
				     case (matches kw)
				       
					  NULL => NULL;

					  THE [STRING { name, make_path } ]
                                              =>
                                              THE (native_spec (srcpath (make_path ())));

					  _ => badspec kw;
                                     esac;

				 tilk
				     =
				     case (matches kw_ilk)
				       
				          NULL => NULL;

					  THE [STRING { name, ... } ]
                                              =>
                                              THE name;

					  _ => badspec kw_ilk;
                                     esac;

				 topts =  matches  kw_options;

				 fun return (sname, tname)
				     =
				     {   fun subst s
					     =
					     {   fun otherpercents ss
						     =
						     if   (substring::size ss == 2)
                                                          
                                                          THE (string::from_char (substring::get (ss, 1)));
						     else NULL;   fi;

						 fun sv ss
						     =
						     THE  case (host_property (substring::to_string ss))
							    
							       NULL  =>  "";
							       THE i =>  int::to_string  i;
                                                          esac;


						 fun qsv ss
						     =
						     {   sslen =  substring::size  ss;

							 fun doqsv (var, value)
                                                             =
                                                             case (host_property (substring::to_string var))
							       
							          NULL  =>  THE "";
								  THE _ =>  THE (substring::to_string value);
                                                             esac;

							 fun findcolon i
							     =
							     if   (i >= sslen) 
							         
                                                                  doqsv (ss, ss);
							     else
                                                                  if   (substring::get (ss, i) == ':')
								      
                                                                       doqsv (substring::make_slice (ss, 0, THE i),
											      substring::make_slice (ss, i+1, THE (sslen-i - 1))
									     );
								  else
                                                                       findcolon (i+1);
                                                                  fi;
                                                             fi;

							 findcolon 0;
						     };

						 subst::substitute [ { prefix => "$?(",
								      substitutions =>
								      [ subst::submap (3, ')') qsv ]
								    },
								    { prefix => "$(",
								      substitutions =>
								      [ subst::submap (2, ')') sv ]
								    },
								    { prefix => "%",
								      substitutions =>
								      [ subst::subfor "%s" sname,
									subst::subfor "%t" tname,
									subst::subfor "%a" platform,
									otherpercents
								      ]
								    }
								  ]
								  s;
					     };

				     fun ad (x, l)
                                         =
                                         " " ! subst x ! l;

				     cmdline
                                         =
					 case remaining_options
					   
					      []     =>  err "no command line specified";
					       h ! t =>  cat (subst h ! fold_right ad [] t);
                                         esac;
				 
				     (sname, tname, tilk, topts, cmdline);
				 };
			 
			     case (fmatch kw_source, fmatch kw_target)
			       
				  (THE src, NULL    ) =>   return (src, specname);
				  (NULL,    THE tgt ) =>   return (specname, tgt);
				  (THE _,   THE _   ) =>   err "only one of `source: ' and `target: ' can be specified";
				  (NULL,    NULL    ) =>   err "either `source: ' or `target: ' must be specified";
                             esac;
			 };
                    esac;

		spath = srcpath (native2pathmaker sname ());

		partial_expansion
                    =
		    ( { source_files => [], make7_files => [],
		        # If str was the target, then "derived" does not really
			# make much sense.  I guess the best thing is to get
			# rid of the "source:" option. XXX BUGGO FIXME
		       sources => [(spath, { ilk, derived } )] },
		     [{ name => tname, make_path => native2pathmaker tname,
			ilk => tilk, opts => topts, derived => TRUE } ]);

		fun run_command ()
                    =
                    {   vsay [ "[", cmdline, "]\n" ];

			if   (winix::process::system cmdline != winix::process::success)
			     
			     err cmdline;
			fi;
		    };

		fun rulefn ()
                    =
                    {   if   (outdated tool ([tname], sname))
                            
                             run_command ();
			fi;

			partial_expansion;
		    };
	    
		context rulefn;
	    };
    herein                                                         my _ =
        tools::note_ilk (ilk, rule);
    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
