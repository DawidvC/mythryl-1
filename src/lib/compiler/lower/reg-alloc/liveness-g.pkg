## liveness-g.pkg -- Compute live variables.

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


# I've moved the parameters of the generic to the function arguments 
# so that it is more flexible.
#
# -- Allen Leung 4/28/00


# TODO: The liveness module should take a 
#  int_hash_table::Hash_Table( List( c::cellset ) )


# We are invoked by:
# 
#     src/lib/compiler/codegen/compile-fps/check-garbage-collector-calls-g.pkg
#     src/lib/compiler/lower/x86/reg-alloc/x86-register-allocation-g.pkg

generic package liveness_g (flowgraph:  Control_Flow_Graph)		# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api

: (weak)  Liveness						# Liveness		is from   src/lib/compiler/lower/reg-alloc/liveness.api

{
    package control_flow_graph = flowgraph;

    package i   = control_flow_graph::instruction_set;
    package sc  = cells_basis::sorted_cells;			# cells_basis		is from   src/lib/compiler/lower/instruction/cells-basis.pkg
    package cs  = cells_basis::cell_set;
    package ht  = int_hash_table;				# int_hash_table	is from   src/lib/src/int-hash-table.pkg
    package g   = graph;					# graph			is from   src/lib/graph/graph.pkg

    Liveness_Table = ht::Hash_Table( sc::Sorted_Cells );

    Du = (List( cells_basis::Cell ), List( cells_basis::Cell ));

    fun error msg
        =
        lowcode_error_message::error("liveness", msg);

    not_found = exceptions::FAIL("liveness: Not Found");	# exception 

    fun pr_list (l, msg: String)
        =
	{   fun pr ([]) => print "\n";
	        pr (x ! xs) => { print (int::to_string x + " "); pr xs;};
            end;

	    print msg;
            pr l;
       };

    fun du_step def_use (instruction, (def, uses))
	=
	{   my (d, u) = def_use instruction;
	    d0 = sc::uniq d;
	    def' = sc::union (d0, def);
	    use = sc::union (sc::uniq u, sc::difference (uses, d0));

	    (def', use);
	};

    fun live_step def_use (instruction, liveout)
        =
	{   my (d, u) =   def_use instruction;

	    sc::union (sc::uniq u, sc::difference (liveout, sc::uniq d));
	};

    fun liveness { def_use, get_cell }
        =
	dataflow
        where

	    get_cell = sc::uniq o get_cell;

	    fun dataflow (cfg as g::GRAPH graph)
                =
                {
		    blocks = graph.nodes ();
		    n_nodes = graph.order ();

		    my live_in:   ht::Hash_Table( sc::Sorted_Cells )  = ht::make_table (n_nodes, not_found);
		    my live_out:  ht::Hash_Table( sc::Sorted_Cells ) = ht::make_table (n_nodes, not_found);

		    my uses:  ht::Hash_Table( sc::Sorted_Cells ) = ht::make_table (n_nodes, not_found);
		    my defs:  ht::Hash_Table( sc::Sorted_Cells ) = ht::make_table (n_nodes, not_found);

		    #  Compute block aggregate definition use. 
		    fun init_def_use (nid, control_flow_graph::BLOCK { instructions, ... } )
			=
			{   my (def, a_use)
				=
				fold_left
				    (du_step def_use)
				    (sc::empty, sc::empty)
				    *instructions;

			    ht::set uses (nid, a_use);
			    ht::set defs (nid, def);
			};


		    # Gather the live-out information: 

		    fun init_live_out (nid, control_flow_graph::BLOCK { notes, ... } )
		       = 
		      case (control_flow_graph::liveout.get *notes)

			   NULL   =>   ht::set live_out (nid, sc::empty);
			   THE cs =>   ht::set live_out (nid, get_cell cs);
		      esac;


		    fun init_live_in ()
			= 
			graph.forall_nodes (fn (nid, _) => ht::set live_in (nid, sc::empty); end );


		    fun init ()
			=
			{   graph.forall_nodes init_def_use;  
			    graph.forall_nodes init_live_out;
			    init_live_in();
			};

		    fun in_b (nid)
			=
			changed
			where
			    a_use    =  ht::get  uses      nid; 
			    def      =  ht::get  defs      nid;
			    live_out =  ht::get  live_out  nid;

			    livein  =  sc::union (a_use, sc::difference (live_out, def));
			    changed =  sc::not_eq (ht::get  live_in  nid, livein);

			    ht::set live_in (nid, livein);
			end;


		    fun out_b (nid, control_flow_graph::BLOCK { notes, ... } )
			=
			{   fun in_succ ([], acc)
				    =>
				    acc;

				in_succ (nid ! ns, acc)
				    => 
				    in_succ (ns, sc::union (ht::get  live_in  nid, acc));
			    end;

			    old_live_out =   ht::get  live_out  nid; 
			    new_live_out =   in_succ (graph.next nid, sc::empty);

			    ht::set live_out (nid, new_live_out);
			    sc::not_eq (old_live_out, new_live_out);
			};

		    fun bottomup ()
			=
			{   my visited_table:  ht::Hash_Table( Bool )
				=
				ht::make_table (n_nodes, not_found);

			    fun is_visited nid
				= 
				case (ht::find visited_table nid)

				     NULL =>   FALSE;
				     _    =>   TRUE;
				esac;

			    fun visit (nid, changed)
				=
				{   fun visit_succ ([], changed')
					    =>
					    changed';

					visit_succ (nid ! ns, changed')
					    =>
					    {   my control_flow_graph::BLOCK { kind, ... }
						    =
						    graph.node_info nid;

						case kind

						     control_flow_graph::STOP
							 =>
							 visit_succ (ns, changed');

						     control_flow_graph::NORMAL
							 =>
							 if (is_visited nid ) visit_succ (ns, changed');
							 else visit_succ (ns, visit (nid, changed'));fi;

						     _ => error "visit::visitSucc";

						esac;
					    };
				    end;

				   ht::set visited_table (nid, TRUE);

				   changed' =   visit_succ (graph.next nid, changed);
				   block    =   graph.node_info nid;

				   change1  =   out_b (nid, block);
				   change2  =   in_b (nid);

				   changed' or change1 or change2;
				 };

			     fun forall ([], changed)
				     =>
				     changed;

				 forall((nid, block) ! rest, changed)
				     => 
				     if   (is_visited  nid)

					  forall (rest, changed);
				     else
					  forall (rest, visit (nid, changed));
				     fi;
			     end;

			     forall (blocks, FALSE);
		      }; 

		    fun repeat n
			=
			if   (bottomup ())

			     repeat  (n+1);
			else
			     n+1;
			fi;


		    init();
		    repeat 0;

		    { live_in, live_out };
		  };  

	  end;
};



## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
