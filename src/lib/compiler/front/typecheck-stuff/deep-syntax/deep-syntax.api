## deep-syntax.api
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# Deep syntax.  The typechecker accepts a raw syntax
# expression and returns a deep syntax expression:
#
#     src/lib/compiler/front/semantic/typecheck/typecheck-toplevel-statement.pkg
#
# Raw syntax is defined in
#     src/lib/compiler/front/parse/raw-syntax/raw-syntax.api
#     src/lib/compiler/front/parse/raw-syntax/raw-syntax.pkg
#
# Deep syntax differs from raw syntax primarily in
# that (surprise) everything now has an associated
# type.
#
# Deep syntax, per se, is also much simpler, since
# much of the complexity of raw syntax relates to
# type declarations &tc, which stuff is handed off to
#    src/lib/compiler/front/typecheck-stuff/types/types.api
#    src/lib/compiler/front/typecheck-stuff/types/types.pkg
#    src/lib/compiler/front/typecheck-stuff/modules/module.api
#    src/lib/compiler/front/typecheck-stuff/modules/module.pkg
# &tc.
#
# Deep syntax gets translated into A-Normal form using
# a polymorphically typed lambda calculus as a stepping
# stone:
#
#    src/lib/compiler/upper/polylambda/polylambda.api
#    src/lib/compiler/upper/anormal/anormal.api
#    src/lib/compiler/upper/translate/translate-deep-syntax-to-polylambda.pkg



###             "One word in the wrong place
###              ruins the most precious thought."
###
###                              -- Voltaire



api Deep_Syntax {

    Source_Code_Region;

    Numbered_Label
	=
	NUMBERED_LABEL { name:   symbol::Symbol,
			 number: Int
		       };

							# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
							# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
							# integer			is from   src/lib/std/integer.pkg

    Deep_Expression

      = VARIABLE_IN_EXPRESSION             (Ref( variables_and_constructors::Variable ),      List( types::Type ))
      | CONSTRUCTOR_EXPRESSION             (variables_and_constructors::Constructor, List( types::Type ))
      | INT_CONSTANT_IN_EXPRESSION         (integer::Int, types::Type)
      | UNT_CONSTANT_IN_EXPRESSION         (integer::Int, types::Type)
      | FLOAT_CONSTANT_IN_EXPRESSION       String
      | STRING_CONSTANT_IN_EXPRESSION      String
      | CHAR_CONSTANT_IN_EXPRESSION        String
      | RECORD_EXPRESSION                  List ((Numbered_Label, Deep_Expression))
      | RECORD_SELECTOR_EXPRESSION         (Numbered_Label, Deep_Expression)
      | VECTOR_EXPRESSION                  (List( Deep_Expression ), types::Type)        
      | PACK_EXPRESSION                    (Deep_Expression, types::Type, List( types::Type_Constructor ))
      | APPLY_EXPRESSION                   (Deep_Expression, Deep_Expression)
      | EXCEPT_EXPRESSION                  (Deep_Expression, Fnrules)
      | RAISE_EXPRESSION                   (Deep_Expression, types::Type)              
      | CASE_EXPRESSION                    (Deep_Expression, List( Case_Rule ), Bool)
      | OR_EXPRESSION			   (Deep_Expression, Deep_Expression)
      | AND_EXPRESSION			   (Deep_Expression, Deep_Expression)
      | FN_EXPRESSION                      Fnrules
      | SEQUENTIAL_EXPRESSIONS             List( Deep_Expression )
      | LET_EXPRESSION                     (Declaration, Deep_Expression)
      | TYPE_CONSTRAINT_EXPRESSION         (Deep_Expression, types::Type)         
      | WHILE_EXPRESSION                   {   test:       Deep_Expression,
					       expression: Deep_Expression
					   }
      | IF_EXPRESSION                      {   test_case: Deep_Expression,
					       then_case: Deep_Expression,
					       else_case: Deep_Expression
					   }
      | SOURCE_CODE_REGION_FOR_EXPRESSION  (Deep_Expression, Source_Code_Region)



    also
    Case_Rule

        = CASE_RULE  (Case_Pattern, Deep_Expression)



    also
    Case_Pattern 

      = WILDCARD_PATTERN
      | NO_PATTERN
      | TYPE_CONSTRAINT_PATTERN        (Case_Pattern, types::Type)
      | AS_PATTERN                     (Case_Pattern, Case_Pattern)
      | OR_PATTERN                     (Case_Pattern, Case_Pattern)
      | VARIABLE_IN_PATTERN            variables_and_constructors::Variable
      | INT_CONSTANT_IN_PATTERN        (integer::Int, types::Type)
      | UNT_CONSTANT_IN_PATTERN        (integer::Int, types::Type)
      | FLOAT_CONSTANT_IN_PATTERN      String
      | STRING_CONSTANT_IN_PATTERN     String
      | CHAR_CONSTANT_IN_PATTERN       String
      | CONSTRUCTOR_PATTERN            (variables_and_constructors::Constructor, List( types::Type ))
      | APPLY_PATTERN                  (variables_and_constructors::Constructor, List( types::Type ), Case_Pattern)
      | VECTOR_PATTERN                 (List( Case_Pattern ), types::Type)       
      | RECORD_PATTERN                 {   fields:         List( (types::Label, Case_Pattern)), 
					   is_incomplete:  Bool,
					   type_ref:       Ref( types::Type )
				       }



    also
    Declaration	

      = EXCEPTION_DECLARATIONS           List( Named_Exception )
      | RECURSIVE_VALUE_DECLARATIONS     List( Named_Recursive_Values )
      | VALUE_DECLARATIONS               List( Named_Value )
      | TYPE_DECLARATIONS                List( types::Type_Constructor )
      | PACKAGE_DECLARATIONS             List( Named_Package )
      | GENERIC_DECLARATIONS             List( Named_Generic )
      | API_DECLARATIONS                 List( module::Api )
      | GENERIC_API_DECLARATIONS         List( module::Generic_Api )
      | INCLUDE_DECLARATIONS             List ((symbol_path::Symbol_Path, module::Package))
      | LOCAL_DECLARATIONS              (Declaration, Declaration)
      | SEQUENTIAL_DECLARATIONS          List( Declaration )
      | OVERLOADED_VARIABLE_DECLARATION  variables_and_constructors::Variable
      | ENUM_DECLARATIONS                {   datatype_constructors:     List( types::Type_Constructor ),
					     with_type_constructors:     List( types::Type_Constructor )
					 }
      | ABSTRACT_TYPE_DECLARATION         {   abstract_type_constructors: List( types::Type_Constructor ), 
					      with_type_constructors:     List( types::Type_Constructor ),
					      body:                     Declaration
					  }
      | FIXITY_DECLARATION                {   fixity: fixity::Fixity,
					      ops:    List( symbol::Symbol )
					  } 
      | SOURCE_CODE_REGION_FOR_DECLARATION   (Declaration, Source_Code_Region)



    also
    Package_Expression 

      = PACKAGE_BY_NAME     module::Package 
      | PACKAGE_DEFINITION  List( symbol_table_entry::Symbol_Table_Entry )
      | PACKAGE_LET         { declaration:   Declaration,
                              expression:    Package_Expression
                            }
      | COMPUTED_PACKAGE    { a_generic:        module::Generic,
			      generic_argument: module::Package, 
			      parameter_types:  List( types::Type_Constructor_Path )
			    }
      | SOURCE_CODE_REGION_FOR_PACKAGE  (Package_Expression, Source_Code_Region)



    also
    Generic_Expression 

      = GENERIC_BY_NAME     module::Generic
      | GENERIC_LET         (Declaration, Generic_Expression)
      | GENERIC_DEFINITION  { parameter:       module::Package,
			      parameter_types: List( types::Type_Constructor_Path ), 
			      definition:      Package_Expression
			    } 
      | SOURCE_CODE_REGION_FOR_GENERIC  (Generic_Expression, Source_Code_Region)



    also
    Named_Value

        = NAMED_VALUE
              {
                pattern:                 Case_Pattern,
		expression:              Deep_Expression,
		bound_typevar_refs:      List( types::Typevar_Ref ),
		ref_typevar_refs:   Ref( List( types::Typevar_Ref ) )
	      }

    # bound_typevar_refs:
    #     List of generalized type variables.
    #     This gets generated in  src/lib/compiler/front/typechecker/types/unify-and-generalize-types-g.pkg
    #     and later used in       src/lib/compiler/upper/translate/translate-deep-syntax-to-polylambda.pkg 
    #
    # ref_typevar_refs:
    #     List of explicit user type variabls X, Y, Z ...
    #     found in patterns in function arguments &tc.
    #     This is the list of candidates for let-polymormphic
    #     type generalization.  This gets used in
    #           src/lib/compiler/front/typechecker/types/unify-and-generalize-types-g.pkg
    #     in generalize_pattern() (where it is called 'userbound') and
    #     in generalize_type()    (where it is called 'user_typevar_refs').
    #
    # Both of the above should be renamed to something clearer
    # once I understand them better.		XXX BUGGO FIXEME.

    also
    Named_Recursive_Values

        = NAMED_RECURSIVE_VALUES { variable:              variables_and_constructors::Variable,
				   expression:            Deep_Expression,
				   null_or_type:          Null_Or( types::Type ),
				   bound_typevar_refs:    List( types::Typevar_Ref ),
				   ref_typevar_refs:      Ref(  List(       types::Typevar_Ref ) )
				 }



    also
    Named_Exception

        = NAMED_EXCEPTION { exception_constructor:   variables_and_constructors::Constructor,
                            exception_type:          Null_Or( types::Type ),
                            name_string:             Deep_Expression
                          }

        | DUPLICATE_NAMED_EXCEPTION { exception_constructor:  variables_and_constructors::Constructor,
				      equal_to:               variables_and_constructors::Constructor
				    }



    also
    Named_Package

        = NAMED_PACKAGE { name_symbol: symbol::Symbol,
                          a_package:   module::Package,
                          definition:  Package_Expression
                        }



    also
    Named_Generic

        = NAMED_GENERIC { name_symbol:  symbol::Symbol,
                          a_generic:    module::Generic,
                          definition:  Generic_Expression
                        }

    withtype Fnrules = (List( Case_Rule ), types::Type);

}; #  Api Deep_Syntax 
