## rw-float64-vector.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

###                      "It has been said that man is a rational animal.
###
###                       All my life I have been searching for evidence
###                       which could support this."
###
###                                              -- Bertrand Russell



package rw_float64_vector: (weak)  Monomorphic_Rw_Vector {		# Monomorphic_Rw_Vector	is from   src/lib/std/src/monomorphic-rw-vector.api

    # Fast add/subtract avoiding
    # the overflow test:
    #
    infix val --- +++;
    #
    fun x --- y
        =
        inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x -
					     inline_t::unt31::copyf_int31 y);

    fun x +++ y
        =
        inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x +
					     inline_t::unt31::copyf_int31 y);


    # Unchecked access operations 

    unsafe_set =  inline_t::rw_float64_vector::set;
    unsafe_get =  inline_t::rw_float64_vector::get;

#   ro_unsafe_set =  inline_t::float64_vector::update     # not yet *

    ro_unsafe_get =  inline_t::float64_vector::get;
    ro_length =  inline_t::float64_vector::length;

    Rw_Vector =  assembly::a::Float64_Rw_Vector;
    Element   =  float64::Float;
    Vector    =  float64_vector::Vector;

    max_len =  core::max_length;

    fun make_rw_vector (0, _)
            =>
            inline_t::rw_float64_vector::new_array0();

        make_rw_vector (len, v)
            =>
            if   (inline_t::default_int::ltu (max_len, len))
	        
                 raise exception exceptions::SIZE;
	    else
	         arr =  assembly::a::create_r len;

	         fun init i
                     =
                     if   (i < len)
		         
                          unsafe_set (arr, i, v);
                          init (i+1);
		     fi;
	      
		 init 0;

                 arr;
	    fi;
        end;

    fun tabulate (0, _)
            =>
            inline_t::rw_float64_vector::new_array0();

        tabulate (len, f)
            =>
	    if   (inline_t::default_int::ltu (max_len, len))
	        
		 raise exception exceptions::SIZE;
	    else
		 arr =  assembly::a::create_r len;

		 fun init i
		     =
		     if   (i < len)
		         
			  unsafe_set (arr,  i,  f i);

			  init (i+1);
		     fi;

		 init 0;

		 arr;
	    fi;
    end;


    fun from_list []
            =>
            inline_t::rw_float64_vector::new_array0();

	from_list l
	    =>
	    arr
	    where
		fun length ([],     n) =>  n;
		    length (_ ! r,  n) =>  length (r, n+1);
		end;

		len = length (l, 0);

		if   (max_len < len)
                    
                     raise exception exceptions::SIZE;
                fi;

		arr =  assembly::a::create_r len;

		fun init ([],      _)
                        =>
                        ();

		    init (c ! r, i)
                        =>
                        {   unsafe_set (arr, i, c);
			    init (r, i+1);
			};
		end;

                init (l, 0); 
	    end;
    end;

    length  = inline_t::rw_float64_vector::length;

    # Note:  The (_[])   enables   'vec[index]'           notation;
    #        The (_[]:=) enables   'vec[index] := value'  notation;

    get     = inline_t::rw_float64_vector::check_sub;
    (_[])   = inline_t::rw_float64_vector::check_sub;

    set     = inline_t::rw_float64_vector::check_set;
    (_[]:=) = inline_t::rw_float64_vector::check_set;

    fun to_vector a
	=
	float64_vector::tabulate
            ( length a,
               fn i = unsafe_get (a, i)
            );

    fun copy { from, to, di }
	=
	{
	    sl = length from;
	    de = sl + di;

	    fun copy_dn (s, d)
                =
		if   (s >= 0)
                    
                     unsafe_set (to, d, unsafe_get (from, s));
		     copy_dn (s --- 1, d --- 1);
                fi;

	    if (di < 0 or de > length to) raise exception SUBSCRIPT;
	    else copy_dn (sl --- 1, de --- 1);fi;
	};

    fun copy_vec { from, to, di }
	=
	{   sl = ro_length from;
	    de = sl + di;

	    fun copy_dn (s, d)
		=
		if (s < 0 ) (); else unsafe_set (to, d, ro_unsafe_get (from, s));
				       copy_dn (s --- 1, d --- 1); fi;

	    if (di < 0 or de > length to) raise exception SUBSCRIPT;
	    else copy_dn (sl --- 1, de --- 1);
            fi;
	};

    fun keyed_apply f arr
	=
	{
	    len = length arr;
	    fun apply i =
		if (i >= len ) (); else f (i, unsafe_get (arr, i)); apply (i +++ 1); fi;

	    apply 0;
	};

    fun apply f arr
	=
	{
	    len = length arr;
	    fun apply i =
		if (i >= len ) (); else f (unsafe_get (arr, i)); apply (i +++ 1); fi;

	    apply 0;
	};

    fun modifyi f arr
	=
	{
	    len = length arr;
	    fun mdf i =
		if (i >= len ) ();
		else unsafe_set (arr, i, f (i, unsafe_get (arr, i))); mdf (i +++ 1); fi;

	    mdf 0;
	};

    fun modify f arr
	=
	{
	    len = length arr;
	    fun mdf i =
		if (i >= len ) ();
		else unsafe_set (arr, i, f (unsafe_get (arr, i))); mdf (i +++ 1); fi;

	    mdf 0;
	};

    fun keyed_fold_left f init arr
	=
	{
	    len = length arr;
	    fun fold (i, a) =
		if (i >= len ) a; else fold (i +++ 1, f (i, unsafe_get (arr, i), a));fi;

	    fold (0, init);
	};

    fun fold_left f init arr
	=
	fold (0, init)
	where
	    len = length arr;

	    fun fold (i, a)
                =
		if (i >= len ) a; else fold (i +++ 1, f (unsafe_get (arr, i), a));fi;
	end;

    fun keyed_fold_right f init arr
	=
	fold (length arr --- 1, init)
	where
	    fun fold (i, a)
                =
		if (i < 0 ) a; else fold (i --- 1, f (i, unsafe_get (arr, i), a));fi;
	end;

    fun fold_right f init arr
	=
	fold (length arr --- 1, init)
	where
	    fun fold (i, a)
                =
		if (i < 0 ) a; else fold (i --- 1, f (unsafe_get (arr, i), a));fi;
	end;

    fun findi p arr
	=
	{
	    len = length arr;
	    fun fnd i =
		if (i >= len ) NULL;
		else { x = unsafe_get (arr, i);

			 if (p (i, x) ) THE (i, x); else fnd (i +++ 1);fi;
		     };fi;

	    fnd 0;
	};

    fun find p arr
	=
	{
	    len = length arr;
	    fun fnd i =
		if (i >= len ) NULL;
		else { x = unsafe_get (arr, i);

			 if (p x ) THE x; else fnd (i +++ 1);fi;
		     };fi;

	    fnd 0;
	};

    fun exists p arr
	=
	{
	    len = length arr;
	    fun ex i = i < len and (p (unsafe_get (arr, i)) or ex (i +++ 1));

	    ex 0;
	};

    fun all p arr
	=
	{
	    len = length arr;
	    fun al i = i >= len or (p (unsafe_get (arr, i)) and al (i +++ 1));

	    al 0;
	};

    fun collate c (a1, a2)
        =
        {   l1  = length a1;
	    l2  = length a2;
	    l12 = inline_t::int31::min (l1, l2);

	    fun col i
		=
		if   (i >= l12)
                    
                     int_guts::compare (l1, l2);
		else
                     case (c (unsafe_get (a1, i), unsafe_get (a2, i)))
                       
			 EQUAL => col (i +++ 1);
			unequal => unequal;
		     esac;
		fi;

	    col 0;
	};

};	#  package float64_array 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
