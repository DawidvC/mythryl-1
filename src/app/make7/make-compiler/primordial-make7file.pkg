## primordial-make7file.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



# This file handles parsing and processing of
#
#     src/lib/core/init/init.cmi
#
# the primordial make7file which defines the life-critical
# stuff which has to exist before anything else can be
# done.
#
#  * Build a simple dependency graph from a direct DAG description.
#
#   - This is used in the bootstrap compiler to establish the
#     pervasive dictionary and the primitives which later
#     get used by the rest of the system.
#
#   - One important job is to set up a naming to "package _Core".
#
#   - For more info, see the comments in
#        src/lib/core/init/init.cmi
#
# RUNTIME INVOCATION
#     We have one entrypoint $build' which is
#     invoked exactly once, by make_compile in
#
#         src/app/make7/make-compiler/make-compiler-g.pkg


api Primordial_Make7file {

     process
         :
         make7_state::Make7_State
         ->
         anchor_dictionary::File
         ->
         Null_Or
	     { pervasive:  intra_library_dependency_graph::Bare_Or_Iced_O7,
	       others:     List( intra_library_dependency_graph::Bare_Or_Iced_O7 ),
	       src:        source_code_source::Input_Source
             };
};

							# anchor_dictionary			is from   src/app/make7/paths/anchor-dictionary.pkg
							# make7_state				is from   src/app/make7/main/make7-state.pkg
							# intra_library_dependency_graph	is from   src/app/make7/depend/intra-library-dependency-graph.pkg
							# source_code_source			is from   src/lib/compiler/front/basics/source/source-code-source.pkg
							# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
							# source_map				is from   src/lib/compiler/front/basics/source/source-map.pkg
							# controls				is from   src/lib/compiler/toplevel/main/controls.pkg

package primordial_make7file: Primordial_Make7file {

    package s  = source_code_source;			# source_code_source			is from   src/lib/compiler/front/basics/source/source-code-source.pkg
    package em = error_message;				# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package sm = source_map;				# source_map				is from   src/lib/compiler/front/basics/source/source-map.pkg

    package dg = intra_library_dependency_graph;	# intra_library_dependency_graph	is from   src/app/make7/depend/intra-library-dependency-graph.pkg
    package inl= controls::inline;			# controls				is from   src/lib/compiler/toplevel/main/controls.pkg

    fun process
            (make7_state:  make7_state::Make7_State)
            spec_library  		                #  "$ROOT/src/lib/core/init/init.cmi"   
        =
        {
	    anchor_dictionary    =  make7_state.make7_session.anchor_dictionary;
	    plaint_sink	         =  make7_state.plaint_sink;
	    library_source_index =  make7_state.library_source_index;

	    path_root
                =
                anchor_dictionary::dir  spec_library;	# anchor_dictionary	is from   src/app/make7/paths/anchor-dictionary.pkg
									      
	    file::vsay [
                "      bootstrap/primordial-make7file.pkg:   Reading primordial make7file  ",
	        anchor_dictionary::abbreviate  (anchor_dictionary::os_string'  spec_library),
                "\n"
	    ];


	    fun defined symbol
		=
		not_null (.get (make7_state.make7_session.host_property symbol) ());


	
	    safely::do
		{
		  open_it =>   .{ file::open_for_read (anchor_dictionary::os_string  spec_library); },
		  close_it =>  file::close_input,
		  cleanup  =>  fn _ = ()
		}
	       .{   source
                        =
                        s::make_source (anchor_dictionary::os_string spec_library,
					      1, #stream, FALSE, plaint_sink);

		    source_map =  source.source_map;
									       
		    library_source_index::register
                        library_source_index
                        (spec_library, source);

		    fun error r m
			=
			em::error
                            source
                            r
                            em::ERROR
                            m
                            em::null_error_body;

		    fun line_in pos
			=
			{   fun is_separator_char c
                                =
                                char::is_space c    or		# char		is from   src/lib/std/char.pkg
                                char::contains "(),=;" c;

			    sub  = string::get;			# string	is from   src/lib/std/string.pkg
			    null = list::null;			# list		is from   src/lib/std/src/list.pkg

			    fun return (pos, line)
                                =
                                THE (string::tokens is_separator_char line, pos);


			    fun loop (pos, NULL, []   )
                                    =>
                                    NULL;

				loop (pos, NULL, lines)
                                    =>
                                    return (pos, cat (reverse lines));

				loop (pos, THE line, lines)
				    =>
				    {
					len    = size line;
					newpos = pos + len;

					#  Does line end with backslash? 
					line_is_continued
					    =
					    len >= 2                    and
					    sub (line, len - 1) == '\n' and
					    sub (line, len - 2) == '\\';

					source_map::newline  source_map  newpos;

					if line_is_continued

					     loop (newpos, file::read_line #stream,
						  substring (line, 0, len - 2) ! lines);
					else
					     if   (null lines   and   sub (line, 0) == '#')
					         
						  THE ([], newpos);
					     else
						  return (newpos, cat (reverse (line ! lines)));
                                             fi;
                                        fi;
				    };
                            end;
			
			    loop (pos, file::read_line #stream, []);
			};

		    fun loop (cross_module_inlining, m, pos)
			=
			case (line_in pos)
			  
			     NULL
                                 =>
                                 {   error (pos, pos) "unexpected end of file";
                                     NULL;
                                 };

			     THE (line, newpos)
				 =>
				 {   error =  error  (pos, newpos);

				     fun sml (spec, s, extra_static_compile_dictionary, is_runtime_system, ecs)
					 =
					 {   p = anchor_dictionary::file
						      (anchor_dictionary::from_standard
							   { anchor_dictionary,
							     plaint_sink => error
							   }
							   { path_root,
							     spec
							   }
						      );

					     attributes
                                                 =
                                                 { is_runtime_system,
						   extra_static_compile_dictionary,
						   cross_module_inlining =>  s,
						   explicit_core_symbol  =>  ecs,
						   noguid                =>  FALSE
						 };


					     bare_o7::make'
						 attributes
						 make7_state
						 { sourcepath      =>  p,
						   library         =>  (spec_library, (pos, newpos)),
						   sharing_request =>  sharing_mode::DONT_CARE,

						   setup           =>  (NULL, NULL),
						   local           =>  FALSE,
						   controllers     =>  []			# 2009-06-21 CrT: was [overload_controller]
						 };
					 };

				     fun bogus n
					 =
					 dg::BARE_O7 {
					   near_imports  =>  [],
					   far_imports =>  [],
					   bare_o7  =>  sml (n, inl::use_default, NULL, FALSE, NULL)
					 };

				     fun get n
					 =
					 case (string_map::get (m, n))
					   
					      THE x => x;
					      NULL  => {   error ("undefined: " + n);
							   bogus n;
						       };
					 esac;

				     fun node (name, file, args, is_runtime_system, ecs)
					 =
					 {   fun one (arg, (near_imports, needs_primenv))
						 =
						 if   (arg == "primitive")
						      (near_imports, TRUE);
						 else (get arg ! near_imports, needs_primenv);  fi;

					     my (near_imports, needs_primitives_symbol_table)
						 =
						 fold_right one ([], FALSE) args;

					     extra_static_compile_dictionary
						 =
						 if needs_primitives_symbol_table
						      THE primitives_symbol_table::primitives_symbol_table;
						 else
						      NULL;
						 fi;

					     bare_o7
						 =
						 sml (file, cross_module_inlining, extra_static_compile_dictionary, is_runtime_system, ecs);

					     n =  dg::BARE_O7 {   bare_o7,
								   near_imports,
								   far_imports => []
							       };

					     loop  (cross_module_inlining,  string_map::set  (m, name, n),  newpos);
					 };

				     looksb =  dg::O7_IS_BARE  o  get;

				     fun split_it args
					 =
					 {   fun invalid ()
						 =
						 {   error "invalid inlining spec";
						     inl::use_default;
						 };

					     case args
					       
						  []  => inl::use_default;

						  [x] => case (lsplit_arg::arg x)
							   
							      THE ls =>  ls;
							      NULL   =>  invalid ();
							 esac;

						  _   => invalid ();
					     esac;
					 };

				     fun proc []              =>  loop (cross_module_inlining, m, newpos);
					 proc ("split" ! arg) =>  loop (split_it arg,          m, newpos);  #  XXX BUGGO FIXME split -> inlining please 
					 proc ["nosplit"]     =>  loop (inl::suggest NULL,     m, newpos);  #  XXX BUGGO FIXME nosplit -> noinlining please 

					  # The "runtime-system-placeholder" case implements
					  # part of the mechanism which allows Lib7 code
					  # to call functions in the C-coded runtime.
					  # For more info, see the comments in
					  #     src/lib/core/init/runtime-system-placeholder.pkg

					 proc ("runtime-system-placeholder"  ! name ! file ! args) =>  node (name, file, args, TRUE,  NULL);
					 proc ("bind"                        ! name ! file ! args) =>  node (name, file, args, FALSE, NULL);
					 proc ("bind-core"             ! ecs ! name ! file ! args) =>  node (name, file, args, FALSE, THE (symbol::make_package_symbol ecs));

					 proc ("return" ! pervasive ! prims) => THE {   pervasive =>  looksb pervasive,
											others    =>  map looksb prims,
											src       =>  source
										    };

					 proc ("ifdef"  ! symbol ! line) =>  proc (if (defined symbol ) line; else [];   fi);
					 proc ("ifndef" ! symbol ! line) =>  proc (if (defined symbol ) [];   else line; fi);
					 proc _ => { error "malformed line"; NULL;};
				     end;

				     proc line;
				 };
                        esac;
		
		    loop (inl::use_default, string_map::empty, 1);
		};

	};
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
