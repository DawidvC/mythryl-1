## estimate-loop-probabilities-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# Given a control_flow_graph that may have some existing edge probabilities
# (represented as BRANCHPROB annotations) add probabilities
# based on the loop package using the heuristics from Ball-Larus
# and Wu-Larus.
#
# TODO:
#	generalize to switch edges
#	Loop Header Heuristic		XXX BUGGO FIXME


###                 "Go not to the elves for counsel,
###                  for they will say both yes and no."
###
###                                -- J. R. R. Tolkien



generic package estimate_loop_probabilities_g (

    package control_flow_graph:  Control_Flow_Graph;		# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
)

: (weak) api {

    package control_flow_graph:  Control_Flow_Graph;		# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api

    estimate:  control_flow_graph::Control_Flow_Graph -> Void;

}
{
    package control_flow_graph =  control_flow_graph;

    package dom
        =
        dominator_tree_g( directed_graph );			# dominator_tree_g	is from   src/lib/graph/dominator-tree-g.pkg

    package lp
        =
        loop_structure_g (
	    package graph_guts= directed_graph;			# directed_graph	is from   src/lib/graph/directed-graph.pkg
	    package dom = dom;
        );

    package an   = note;					# note			is from   src/lib/src/note.pkg
    package prob = probability;					# probability		is from   src/lib/compiler/lower/library/probability.pkg


    # Flags 

    disable_loop_probability_estimation
        =
        low_code_control::make_bool (
	  "disable_loop_probability_estimation",
	  "TRUE to disable loop probability estimation"
        );

    dump_control_flow_graph_after_loop_probability_estimation
        =
        low_code_control::make_bool (
	  "dump_control_flow_graph_after_loop_probability_estimation",
	  "TRUE to dump control flow graph after loop probability estimatimation"
        );

    dump_strm
        =
        low_code_control::debug_stream;

    stipulate

	package a = lowcode_notes;				# lowcode_notes		is from   src/lib/compiler/lower/instruction/lowcode-notes.pkg

	my { get, set, ... } = a::branch_prob;
    herein
	fun get_edge_prob ( _, _, control_flow_graph::EDGE { notes, ... } )     =   get *notes;
	fun set_edge_prob ((_, _, control_flow_graph::EDGE { notes, ... } ), p) =   notes := set (p, *notes);
    end;

    #  probabilities 

    prob_loop_branch_heuristic =  prob::percent 88;	#  Loob Branch Heuristic 
    prob_loop_exit_heuristic   =  prob::percent 80;	#  Loop Exit Heuristic 

    prob50_50 =   50;

    # Compute loop package information 
    #
    fun compute_loop_structure cfg
        =
        {   dom_tree  = dom::make_dominator  cfg;
	    dominates = dom::dominates  dom_tree;

	    my graph::GRAPH { has_node,  forall_nodes, ... }
               =
               lp::loop_structure dom_tree;
	  
	    { is_loop_header => has_node,
	      forall_loops => forall_nodes
	    };
	};

    fun same_edge (  (_, _, control_flow_graph::EDGE { notes => notes1, ... } ),
                     (_, _, control_flow_graph::EDGE { notes => notes2, ... } )
                  )
        =
        notes1 == notes2;

    # Add loop probabilities:
    #
    fun do_estimate (cfg as graph::GRAPH { out_edges, ... } )
        =
        {
	    my { is_loop_header, forall_loops }
                =
                compute_loop_structure cfg;

	    fun compute_probs (true_e, false_e, taken_prob)
                =
                {
		    my { t, f }
                        =
                        case (get_edge_prob true_e, get_edge_prob false_e)

			    (NULL, NULL)
                                =>
			        { t=>taken_prob, f=>prob::(-) (prob::always, taken_prob) };

			    (THE p, _)
                                =>
			        prob::combine_prob2 { true_prob=>p, taken_prob };

			    (_, THE p)
                                => 
			        prob::combine_prob2
                                  {
				    true_prob=>prob::(-) (prob::always, p),
				    taken_prob
				  };
                         esac;


		    set_edge_prob (true_e, t);
		    set_edge_prob (false_e, f);
		};

	    fun do_loop (hdr_id, lp::LOOP { backedges, exits, ... } )
		=
		{
		    # Apply the Loop Branch Heuristic to a back edge:
		    # 
		    fun do_back_edge (e as (src, _, _))
                        =
                        case (out_edges src)

			    [e1, e2]
                                =>
                                same_edge (e, e1)
                                    ??  compute_probs (e1, e2, prob_loop_branch_heuristic)
				    ::  compute_probs (e2, e1, prob_loop_branch_heuristic);

			    _   => ();
                        esac;

		    # Apply the Loop Exit Heuristic to an exit edges;
		    # note that the probability is that the loop will NOT be exited.
		    #
		    fun do_exit_edge (e as (src, _, _))
			=
			case (out_edges src)
			      [e1, e2]
                                =>
				if (same_edge (e, e1))

				    if (is_loop_header (#2 e2)) ();
				    #  e1 is exit edge, so e2 is taken branch 
				    else compute_probs (e2, e1, prob_loop_exit_heuristic);
                                    fi;

				  elif (is_loop_header (#2 e1))
				         ();
				    #  e2 is exit edge, so e1 is taken branch 
				  else
                                       compute_probs (e1, e2, prob_loop_exit_heuristic);
                                  fi;
			     _ => ();
			  esac;


		      list::apply do_back_edge backedges;
		      list::apply do_exit_edge exits;
		  };

	      forall_loops do_loop;
	  };

    fun estimate cfg
        =
        if (not *disable_loop_probability_estimation)

	    do_estimate cfg;

	    if *dump_control_flow_graph_after_loop_probability_estimation

                 control_flow_graph::dump (
		   *low_code_control::debug_stream,
		   "after loop probability estimates",
                   cfg
                 );
	    fi;
        fi;
};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
