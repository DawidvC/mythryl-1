#!/usr/bin/mythryl

# This is a Mythryl version of the GTK+ tutorial
# range-controls example program:
#
#     http://library.gnome.org/devel/gtk-tutorial/stable/x745.html
#

include gtk_via_pipe;

hscale = (REF NULL) : Ref( Null_Or( Widget ) );
vscale = (REF NULL) : Ref( Null_Or( Widget ) );

# "cb" is probably "callback" through here -- and should be changed

fun cb_position_menu_select (session, position)
    =
    {   # Set the value position on both scale widgets:
	#
	set_scale_value_position (session, the *hscale, position);
	set_scale_value_position (session, the *vscale, position);
    };

fun cb_update_menu_select (session, policy)
    =
    {   # Set the update policy for both scale widgets:
	#
	set_range_update_policy (session, the *hscale, policy);
	set_range_update_policy (session, the *vscale, policy);
    };

fun cb_digits_scale (session, value)
    =
    {   # Set the number of decimal places to which
        # adjustment.value is rounded:
	#
	value = float::to_int ieee_float::TO_NEAREST value;

	set_scale_value_digits_shown (session, the *hscale, value);
	set_scale_value_digits_shown (session, the *vscale, value);
    };

fun cb_page_size { session, from, to }		# Both args are Adjustments.
    =
    {   # Set the page size and page increment of the sample
	# adjustment to the value specified by the "Page Size" scale:
	#
	value =  get_adjustment_value( session, from );
	#
	set_adjustment_page_size      (session, to, value );
	set_adjustment_page_increment (session, to, value );

	# This sets the adjustment and makes it emit the "changed" signal to
	# reconfigure all the widgets that are attached to this signal:
	#
	value = get_adjustment_value( session, to );
        min   = get_adjustment_lower( session, to );
        max   = get_adjustment_upper( session, to );
	set_adjustment_value (session, to, clamp { min, max, value });
        emit_changed_signal  (session, to);
    };

fun cb_draw_value (session, active)
    =
    {   # Turn the value display on the scale widgets off or on
        # depending on the state of the checkbutton:
        #
	set_draw_scale_value (session, the *hscale, active);
	set_draw_scale_value (session, the *vscale, active);
    };

# Convenience functions:

fun make_a_menu_item (session, name, callback)
    =
    {    menu_item = make_menu_item_with_label (session, name);

	 set_activate_callback session menu_item callback;

	 show_widget (session, menu_item);

	 menu_item;
    };

fun set_default_scale_values (session, scale)
    =
    {   set_range_update_policy      (session, scale, CONTINUOUS_UPDATES);
	set_scale_value_digits_shown (session, scale, 1);
	set_scale_value_position     (session, scale, POSITION_TOP);
	set_draw_scale_value         (session, scale, TRUE);
    };

# Make the sample window:
#
fun create_range_controls session
    =
    {   window = make_window session;

	set_delete_event_callback session window .{ exit_main session; exit 0; };
	set_destroy_callback      session window .{ exit_main session; exit 0; };

	set_window_title          (session, window, "Range Controls");

	box1 = make_vertical_box  { session, homogeneous => FALSE, spacing => 0 };
	add_kid { session, mom => window, kid => box1 };
	show_widget (session, box1);

	box2 = make_horizontal_box { session, homogeneous => FALSE, spacing => 10 };
	set_border_width (session, box2, 10);
	pack_box { session, box => box1, kid => box2, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, box2);

	# Note that the page_size only matters
        # for scrollbar widgets, and that the
        # highest value you'll actually get
        # is (upper - page_size):
	#
	adj1 = make_adjustment
                   {
                     session,
                     value =>   0.0,
                     lower =>   0.0,
                     upper => 101.0,
                     step_increment => 0.1,
                     page_increment => 1.0,
                     page_size      => 1.0
		   }; 

	vertical_scale = make_vertical_scale (session, THE adj1);
	set_default_scale_values     (session, vertical_scale);
	pack_box { session, box => box2, kid => vertical_scale, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, vertical_scale);
	vscale := THE vertical_scale;

	box3 = make_vertical_box { session, homogeneous => FALSE, spacing => 0 };
	pack_box { session, box => box2, kid => box3, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, box3);

	# Re-use the same adjustment:
	#
	horizontal_scale = make_horizontal_scale (session, THE adj1);
	set_minimum_widget_size        (session, horizontal_scale, (200, 1));	# XXX BUGGO FIXME the '1' should be '-1' but we don't support negative numbers yet, I think.
	set_default_scale_values       (session, horizontal_scale);
	pack_box { session, box => box3, kid => horizontal_scale, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, horizontal_scale);
        hscale := THE horizontal_scale;


	# Re-use the same adjustment, again:
	#
	scrollbar = make_horizontal_scrollbar (session, THE adj1);
	set_range_update_policy (session, scrollbar, CONTINUOUS_UPDATES);	# Make scales update continuously when scrollbar is moved.
	pack_box { session, box => box3, kid => scrollbar, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, scrollbar);

	box2 = make_horizontal_box { session, homogeneous => FALSE, spacing => 10 };
	set_border_width (session, box2, 10);
	pack_box { session, box => box1, kid => box2, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, box2);

	# A checkbutton to control whether the value is displayed or not:
	#
	button = make_check_button_with_label (session, "Display value on scale widgets");
	set_toggle_button_active (session, button, TRUE);
	set_toggled_callback session button .{ cb_draw_value (session, #bool); };
	pack_box { session, box => box2, kid => button, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, button);

	box2 = make_horizontal_box { session, homogeneous => FALSE, spacing => 10 };
	set_border_width (session, box2, 10);

	# An option menu to change the position of the value:
	#
	label = make_label (session, "Scale Value Position");
	pack_box { session, box => box2, kid => label, pack => FROM_START, expand => FALSE, fill => FALSE, padding => 0 };
	show_widget (session, label);

	option_menu = make_option_menu session;
	menu        = make_menu        session;

	kid = make_a_menu_item (session, "Top",     .{ cb_position_menu_select (session, POSITION_TOP   ); });   menu_shell_append { session, menu, kid };
	kid = make_a_menu_item (session, "Bottom",  .{ cb_position_menu_select (session, POSITION_BOTTOM); });   menu_shell_append { session, menu, kid };
	kid = make_a_menu_item (session, "Left",    .{ cb_position_menu_select (session, POSITION_LEFT  ); });   menu_shell_append { session, menu, kid };
	kid = make_a_menu_item (session, "Right",   .{ cb_position_menu_select (session, POSITION_RIGHT ); });   menu_shell_append { session, menu, kid };

        set_option_menu_menu   { session, option_menu, menu };
	pack_box { session, box => box2, kid => option_menu, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, option_menu);

	pack_box { session, box => box1, kid => box2, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, box2);

	box2 = make_horizontal_box { session, homogeneous => FALSE, spacing => 10 };
	set_border_width (session, box2, 10);

	# Yet another option menu, this time for the update policy
	# of the scale widgets:
	#
	label = make_label (session, "Scale Update Policy");
	pack_box { session, box => box2, kid => label, pack => FROM_START, expand => FALSE, fill => FALSE, padding => 0 };
	show_widget (session, label);

	option_menu = make_option_menu session;
	menu        = make_menu        session;

	kid = make_a_menu_item (session, "Continuous",    .{ cb_update_menu_select (session,    CONTINUOUS_UPDATES); } );	menu_shell_append { session, menu, kid };
	kid = make_a_menu_item (session, "Discontinuous", .{ cb_update_menu_select (session, DISCONTINUOUS_UPDATES); } );	menu_shell_append { session, menu, kid };
	kid = make_a_menu_item (session, "Delayed",       .{ cb_update_menu_select (session,       DELAYED_UPDATES); } );	menu_shell_append { session, menu, kid };

        set_option_menu_menu   { session, option_menu, menu };
	pack_box { session, box => box2, kid => option_menu, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, option_menu);

	pack_box { session, box => box1, kid => box2, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, box2);


	box2 = make_horizontal_box { session, homogeneous => FALSE, spacing => 10 };
	set_border_width (session, box2, 10);

	# A horizontal scale widget for adjusting the number
	# of digits on the sample scales:
	#
	label = make_label (session, "Scale Digits:");
	pack_box { session, box => box2, kid => label, pack => FROM_START, expand => FALSE, fill => FALSE, padding => 0 };
	show_widget (session, label);

	adj2 = make_adjustment
                   {
                     session,
                     value => 1.0,
                     lower => 0.0,
                     upper => 5.0,
                     step_increment => 1.0,
                     page_increment => 1.0,
                     page_size      => 0.0
		   }; 
	set_value_changed_callback session adj2 .{ cb_digits_scale (session, #value); };

	scale = make_horizontal_scale (session, THE adj2);
	set_scale_value_digits_shown (session, scale, 0);
	pack_box { session, box => box2, kid => scale, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, scale);

	pack_box { session, box => box1, kid => box2, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, box2);



	box2 = make_horizontal_box { session, homogeneous => FALSE, spacing => 10 };
	set_border_width (session, box2, 10);

	# One last horizontal scale widget for
        # adjusting the page size of the scrollbar:
	#
	label = make_label (session, "Scrollbar Page Size:");
	pack_box { session, box => box2, kid => label, pack => FROM_START, expand => FALSE, fill => FALSE, padding => 0 };
	show_widget (session, label);

	adj2 = make_adjustment
                   {
                     session,
                     value =>   1.0,
                     lower =>   1.0,
                     upper => 101.0,
                     step_increment => 1.0,
                     page_increment => 1.0,
                     page_size      => 0.0
		   }; 

	set_value_changed_callback
              session
              adj2
              .{   #ignore;

                   cb_page_size { session, from => adj2, to => adj1 };
              };

	scale = make_horizontal_scale (session, THE adj2);
	set_scale_value_digits_shown (session, scale, 0);
	pack_box   { session, box => box2, kid => scale, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, scale);

	pack_box   { session, box => box1, kid => box2, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
	show_widget (session, box2);

	separator = make_horizontal_separator  session;
	pack_box   { session, box => box1, kid => separator, pack => FROM_START, expand => FALSE, fill => TRUE, padding => 0 };
	show_widget (session, separator);


	box2 = make_vertical_box { session, homogeneous => FALSE, spacing => 10 };
	set_border_width (session, box2, 10);
	pack_box { session, box => box1, kid => box2, pack => FROM_START, expand => FALSE, fill => TRUE, padding => 0 };
	show_widget (session, box2);



	button = make_button_with_label (session, "Quit");
	set_clicked_callback session button .{  destroy_widget( session, window ); };
        pack_box { session, box => box2, kid => button, pack => FROM_END, expand => TRUE, fill => TRUE, padding => 0 };
#	grab_default (session, button);		# XXX BUGGO IMPLEMENTME
	show_widget (session, button);

	show_widget (session, window);
    };							# fun create_range_controls


session = make_session [];

create_range_controls  session;

main session;

exit 0;
