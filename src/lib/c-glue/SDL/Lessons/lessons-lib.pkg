package LessonsLib :
api

    my exit:     winix::process::status -> X
    my for:      Int -> Int -> (Int -> X) -> Void
    my LoadBMP:  String -> SDL_Surface::t

end
{

   use C c_utils SDL SDLMacros 

   fun for i n f = if i < n then (f i; for (i+1) n f) else ()

   infix 80 ~> plus diff at
   fun p ~> { get, deref } = deref p
   fun a at i = Ptr::sub (a, i)
   my plus = ptr::plus;
   my diff = ptr::diff;

   use SDL_Surface

   exit = winix::process::exit

   fun LoadBMP filename =
   let image = SDL_LoadBMP::f filename
       my () =   
          if Ptr::isNull' image then
          ( print("Unable to load "$filename$":"$SDL_GetError::f()$"\n");
            raise FAIL "LoadBMP"
          ) else ()

       #  GL surfaces are upsidedown and RGB, not BGR :-) 
       pitch  = unsigned::toInt (image~>pitch)
       tmpbuf = alloc t::uchar (unt::from_int pitch)
       rowhi = Heavy::ptr (t::pointer t::uchar) (Ptr::cast' (image~>pixels))
       rowlo = rowhi plus (signed::toInt (image~>h) * pitch - pitch)
       n = image~>h div 2
       fun loop (i, rowhi, rowlo) =
       if i < n then 
       let fun loop2 j = 
           if j < signed::toInt (image~>w) then
           let  get = get::uchar
                set = set::uchar
                tmpch = get (rowhi at (j*3))
                my ()    = set (rowhi at (j*3), get (rowhi at (j*3+2)))
                my ()    = set (rowhi at (j*3+2), tmpch)
                tmpch = get (rowlo at (j*3))
                my ()    = set (rowlo at (j*3), get (rowlo at (j*3+2)))
                my ()    = set (rowlo at (j*3+2), tmpch)
            in  loop2 (j+1)
            end else ()
        in  loop2 0; 
            memcpy (tmpbuf, rowhi, signed::from_int pitch);
            memcpy (rowhi, rowlo, signed::from_int pitch);
            memcpy (rowlo, tmpbuf, signed::from_int pitch);
            loop (i+1, rowhi plus pitch, rowlo plus (-pitch))
        end 
        else ()
   in   loop (0, rowhi, rowlo);
        free tmpbuf;
        image
   end
   
}
