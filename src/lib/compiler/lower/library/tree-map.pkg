#
# This implements a functional map 
#
# -- Allen Leung


###            "It must be remembered that there is nothing
###             more difficult to plan, more doubtful of success,
###             nor more dangerous to management than the creation
###             of a new system.
###
###                 For the initiator has the enmity of all who
###             would profit by the preservation of the old institution
###             and merely lukewarm defenders in those who gain
###             by the new ones."
###
###                                   -- Nicolo Machiavelli


api TREE_MAP =
api
    type key
    type Map( X )
    exception NOT_FOUND
    my empty:     Map( X )
    my insert:    Map( X ) * key * X -> Map( X )
    my remove:    Map( X ) * key -> Map( X )
    my lookup:    Map( X ) * key -> X
    my lookup'  : Map( X ) * key -> key * X
    my toList:    Map( X ) ->  List( key * X )
    my from_list:  List( key * X ) -> Map( X )
    my fold_left:     (key * X * Y -> Y) -> Y -> Map( X ) -> Y
    my fold_right:     (key * X * Y -> Y) -> Y -> Map( X ) -> Y 
end

generic package TreeMap
   (type key
    exception NOT_FOUND
    my compare:  key * key -> order
   ) : TREE_MAP = 
pkg
   type key = key

   enum Map X = NODE of key * X * Map( X ) * Map( X )
               | EMPTY

   exception NOT_FOUND = NOT_FOUND
   empty = EMPTY
   fun insert (EMPTY, k', v') = NODE (k', v', EMPTY, EMPTY)
     | insert (NODE (k, v, l, r), k', v') =  
          case compare (k', k) of
             EQUAL   => NODE (k, v', l, r)
          |  LESS    => NODE (k, v, insert (l, k', v'), r)
          |  GREATER => NODE (k, v, l, insert (r, k', v'))
   fun lookup'(EMPTY, k) = raise exception NOT_FOUND
     | lookup'(NODE (k, v, l, r), k') =
         case compare (k', k) of
            EQUAL   => (k, v)
         |  LESS    => lookup'(l, k')
         |  GREATER => lookup'(r, k')
   fun lookup (t, k) = #2 (lookup'(t, k))
   fun remove (EMPTY, k) = EMPTY
     | remove (NODE (k, v, l, r), k') =
       case compare (k', k) of 
          EQUAL =>
          (case (l, r) of
              (EMPTY, r) => r
           |  (l, EMPTY) => l
           |  (_, _)   => let fun remove_succ EMPTY = EMPTY
                               | remove_succ (NODE(_, _, EMPTY, r)) = r
                               | remove_succ (NODE (k, v, l, r)) =
                                     NODE (k, v, remove_succ l, r)
                         in  NODE (k, v, l, remove_succ r)
                         end
          )
       |  LESS    => NODE (k, v, remove (l, k'), r)
       |  GREATER => NODE (k, v, l, remove (r, k'))

    fun fold_left f x =
    let fun g (EMPTY, x) = x
          | g (NODE (k, v, l, r), x) = g (l, f (k, v, g (r, x)))
    in  fn t => g (t, x) end

    fun fold_right f x = 
    let fun g (EMPTY, x) = x
          | g (NODE (k, v, l, r), x) = g (r, f (k, v, g (l, x)))
    in  fn t => g (t, x) end

    fun toList m = 
    let fun collect (EMPTY, L) = L
          | collect (NODE (k, v, l, r), L) = collect (l, collect (r, (k, v) . L))
    in  collect (m,[]) end

    fun from_list l = 
    let fun f ([], m) = m
          | f((k, v) . l, m) = f (l, insert (m, k, v))
    in  f (l, EMPTY) end
     
end

