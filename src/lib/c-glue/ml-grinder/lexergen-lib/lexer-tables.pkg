package LexerTables:  LEXER_TABLES {


   # A skeleton which represents the package of the match tree
   # when a regexp match succeeds

   enum matchtree_skel = SKEL of Int * List( matchtree_skel )

   enum group_action = OPEN of Int | CLOSE of Int | OPENCLOSE of Int

   #  Tables used by the lexer; these are not completely compressed though 
   enum lexer =
      LEXER of
      { base:     rw_vector::Rw_Vector( Int ),   #  state -> table offset 
        check:    rw_vector::Rw_Vector( Int ),   #  offset -> valid state 
        next:     rw_vector::Rw_Vector( Int ),   #  offset -> next state 
        default:  rw_vector::Rw_Vector( Int ),   #  state -> default state 
        equiv:    rw_vector::Rw_Vector( Int ),   #  Char -> equiv class 
        accept:   rw_vector::Rw_Vector( Int ),   #  state -> accept rule; -1 if none 
        groups:   rw_vector::Rw_Vector(  List(  group_action ) ), #  state -> groups 
        skels:    rw_vector::Rw_Vector(  List(  matchtree_skel ) ), #  rule -> skeleton 
        start:    rw_vector::Rw_Vector( Int ),   #  Context -> start state 
        start'  : rw_vector::Rw_Vector( Int ),   #  Context -> start state (at newline) 
        numGroups:  Int,
        state_count:  Int, 
        eof:        Int
      }

}
