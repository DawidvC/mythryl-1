# union-find.api
#
# Interface to UnionFind package.
#
# Author:
#    Fritz Henglein
#    DIKU, University of Copenhagen
#    henglein@diku.dk
#
# DESCRIPTION
#
# Union/Find data type with REF-like interface.  A Union/Find package 
# consists of a type constructor X union_find with operations for
# making an element of X union_find (make), getting the contents of
# an element (!!), checking for equality of two elements (equal), and
# for joining two elements (union).  union_find is analogous to REF as
# expressed in the following table:
#
# -------------------------------------------------------------------
# type                  REF X                 union_find X
# -------------------------------------------------------------------
# introduction          REF                   union_find
# elimination           !                     !!
# equality              =                     equal
# updating              :=                    ::=
# unioning                                    link, union, unify
# -------------------------------------------------------------------
#
# The main difference between X REF and X union_find is in the union
# operation.  Without union X REF and X union_find can be used
# interchangebly.  An assignment to a reference changes only the
# contents of the reference, but not the reference itself.  In
# particular, any two pointers that were different (in the sense of the
# equality predicate = returning FALSE) before an assignment will still
# be so.  Their contents may or may not be equal after the assignment,
# though.  In contrast, applying the union operations (link, union,
# unify) to two union_find elements makes the two elements themselves
# equal (in the sense of the predicate equal returning TRUE).  As a
# consequence their contents will also be identical: in the case of link
# and union it will be the contents of one of the two unioned elements,
# in the case of unify the contents is determined by a binary
# function parameter.  The link, union, and unify functions return TRUE
# when the elements were previously NOT equal.

# Compiled by:
#     src/lib/src/lib7.make6

###             "It is not enough to have a good mind.
###              The main thing is to use it well."
###
###                            -- Rene Descartes



api Union_Find {

     Union_Find( X );
	# type of union_find-elements with contents of type X

      
     u_ref: X -> Union_Find( X );
	#  union_find x creates a new element with contents x 


     equal: (Union_Find( X ), Union_Find( X )) -> Bool;
	# equal (e, e') returns TRUE if and only if e and e' are either made by
	# the same call to union_find or if they have been unioned (see below).


     !! : Union_Find( X ) -> X;
	# !!e returns the contents of e. 
	# Note: if X is an equality type then !!(union_find x) == x, and 
	# equal (union_find (!!x), x) = FALSE.



     set:  (Union_Find( X ), X) -> Void;
	#  update (e, x) updates the contents of e to be x 

     unify:  ((X, X) -> X) -> (Union_Find( X ), Union_Find( X )) -> Bool;
	# unify f (e, e') makes e and e' equal; if v and v' are the 
	# contents of e and e', respectively, before unioning them, 
	# then the contents of the unioned element is f (v, v').  Returns
	# TRUE, when elements were not equal prior to the call.


     union:  (Union_Find( X ), Union_Find( X )) -> Bool;
	# union (e, e') makes e and e' equal; the contents of the unioned
	# element is the contents of one of e and e' before the union operation.
	# After union (e, e') elements e and e' will be congruent in the
	# sense that they are interchangeable in any context..  Returns
	# TRUE, when elements were not equal prior to the call.


     link:  (Union_Find( X ), Union_Find( X )) -> Bool;
	# link (e, e') makes e and e' equal; the contents of the linked
	# element is the contents of e' before the link operation.  Returns
	# TRUE, when elements were not equal prior to the call.


  }; #  UNION_FIND 

