## interact-g.pkg

# Compiled by:
#     src/lib/compiler/core.make6



# Here we define the backend interactive-compilation
# facility exported to the front end.
#
# Our generic is invoked (only) by
#
#     src/lib/compiler/toplevel/backend/compiler-client-interface-g.pkg
#
# Our generic argument is generated by read_eval_print_loop_g in
#
#     src/lib/compiler/toplevel/interact/read-eval-print-loop-g.pkg
#


###         "Every society honors its live conformists
###                 and its dead troublemakers."
###
###                         -- Mignon McLaughlin


generic package   interact_g   (
    read_eval_print_loop: Read_Eval_Print_Loop						# Read_Eval_Print_Loop		is from   src/lib/compiler/toplevel/interact/read-eval-print-loop.api
)

: (weak)  Interact									# Interact			is from   src/lib/compiler/toplevel/interact/interact.api

{
    exception CONTROL_C_SIGNAL
        =
        read_eval_print_loop::CONTROL_C_SIGNAL;


											# compiler_state		is from   src/lib/compiler/toplevel/interact/compiler-state.pkg
											# read_eval_print_loop_g	def in    src/lib/compiler/toplevel/interact/read-eval-print-loop-g.pkg
											# winix				is from   src/lib/std/winix.pkg
    Compiler_Table_Set_Reference
        =
        compiler_state::Compiler_Table_Set_Reference;

    fun read_eval_print_from_script ()
        =
        {   read_eval_print_loop::read_eval_print_from_script ();
            winix::process::exit  winix::process::success;
        };

    fun read_eval_print_from_user ()
        =
        {   read_eval_print_loop::read_eval_print_from_user ();
            winix::process::exit  winix::process::success;
        };


    with_error_handling
        =
        read_eval_print_loop::with_error_handling;


    fun read_eval_print_from_file   filename
        =
	{   apply
                controls::print::say
                ["[including ", filename, "]\n"];

	    read_eval_print_loop::read_eval_print_from_stream
	       (
		 filename,

		 file::open_for_read filename
		 except
		    e as io_exceptions::IO _
			=
			{   apply controls::print::say [ "[include failed: ",
						    exceptions::exception_message e,
						    "]\n"
						  ];

			    raise exception error_message::COMPILE_ERROR;
			}
               );
        };
											# controls		is from   src/lib/compiler/toplevel/main/controls.pkg
											# file			is from   src/lib/std/src/unix/file.pkg
											# io_exceptions		is from   src/lib/std/src/io/io-exceptions.pkg
    fun read_eval_print_from_stream   stream
        =
        read_eval_print_loop::read_eval_print_from_stream
            ("<Input_Stream>", stream);

    fun evaluate_stream (stream, base_dictionary)
        =
        {   r =  REF  compiler_table_set::null_compiler_table_set;			# compiler_table_set		is from   src/lib/compiler/toplevel/compiler-state/compiler-table-set.pkg

            base
                =
                { set =>  fn _  =  raise exception FAIL "evaluate_stream: base.set",
                  get =>  fn () =  base_dictionary
                };

            top_level
                =
                { set =>  fn e  =   r := e,
                  get =>  fn () =  *r
                };

            property_list =  property_list::make_property_list ();				# property_list		is from   src/lib/src/property-list.pkg

            compiler_state = { top_level, base, property_list };

	    compiler_state::run_thunk_in_compiler_state					# compiler_state	is from   src/lib/compiler/toplevel/interact/compiler-state.pkg
                (
                  fn ()
                      =
                      {   read_eval_print_loop::read_eval_print_from_stream ("<Input_Stream>", stream);
			  *r;
		      },

		    compiler_state
		);
	};

    stipulate

	include fate;									# fate		is from   src/lib/std/src/nj/fate.pkg

    herein

	my redump_heap_fate:   Ref( Fate( String ) )
	    =
	    REF (call_with_current_fate
                    (fn return_fate
                        =
                        {   call_with_current_fate
                                (fn fate =  resume_fate  return_fate  fate);

			    raise exception FAIL "redump_heap_fate init";
                        }
                )   );
    end;

};	#  generic package interact 


## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
