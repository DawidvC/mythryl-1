/*
 * The glxdino program
 * ``OpenGL Programming for the X Window System'', Mark J. Kilgard, 
 * Addison Wesley Developers Press, 1996..
 *
 * NOT finished
 */ 
package Dino:  
api 
    my main:  String * List( String ) -> winix::process::status
end
{

   use C mlrep                    #  Import C stuff 
        #  Gtk gtk_enums GtkGadgets #  Import Gtk stuff 
        OpenGLMacros OpenGLUMacros #  Import OpenGL stuff 
        SDL SDLMacros SDLEnums     #  Import SDL stuff 

   exit = winix::process::exit

   /* 
    * Dinosaur model
    */
   body = 
     #[(0.0, 3.0), (1.0, 1.0), (5.0, 1.0), (8.0, 4.0), (10.0, 4.0), (11.0, 5.0),
       (11.0, 11.5), (13.0, 12.0), (13.0, 13.0), (10.0, 13.5),
       (13.0, 14.0), (13.0, 15.0),
       (11.0, 16.0), (8.0, 16.0), (7.0, 15.0), (7.0, 13.0), (8.0, 12.0),
       (7.0, 11.0), (6.0, 6.0),
       (4.0, 3.0), (3.0, 2.0), (1.0, 2.0)]
   arm = 
     #[(8.0, 10.0), (9.0, 9.0), (10.0, 9.0), (13.0, 8.0), (14.0, 9.0),
       (16.0, 9.0), (15.0, 9.5), (16.0, 10.0), (15.0, 10.0), 
       (15.5, 11.0), (14.5, 10.0),
       (14.0, 11.0), (14.0, 10.0), (13.0, 9.0), (11.0, 11.0), (9.0, 11.0)]
   leg = 
     #[(8.0, 6.0), (8.0, 4.0), (9.0, 3.0), (9.0, 2.0), (8.0, 1.0), (8.0, 0.5),
       (9.0, 0.0), (12.0, 0.0), (10.0, 1.0), (10.0, 2.0), (12.0, 4.0),
       (11.0, 6.0), (10.0, 7.0), (9.0, 7.0)]
   eye = 
     #[(8.75, 15.0), (9.0, 14.7), (9.6, 14.7), (10.1, 15.0),
       (9.6, 15.25), (9.0, 15.25)]

   type displaylist = unsigned::word
   RESERVED   = 0w0:  displaylist
   BODY_SIDE  = 0w1:  displaylist
   BODY_EDGE  = 0w2:  displaylist
   BODY_WHOLE = 0w3:  displaylist
   ARM_SIDE   = 0w4:  displaylist
   ARM_EDGE   = 0w5:  displaylist
   ARM_WHOLE  = 0w6:  displaylist
   LEG_SIDE   = 0w7:  displaylist
   LEG_EDGE   = 0w8:  displaylist
   LEG_WHOLE  = 0w9:  displaylist
   EYE_SIDE   = 0w10:  displaylist
   EYE_EDGE   = 0w11:  displaylist
   EYE_WHOLE  = 0w12:  displaylist
   DINOSAUR   = 0w13:  displaylist

   skinColor = (0.1, 1.0, 0.1, 1.0) #  green 
   eyeColor  = (1.0, 0.2, 0.2, 1.0) #  red 

   fun for i j f = if i < j then (f i; for (i+1) j f) else ()

   fun fcast fptr = u::fcast (Light::fptr fptr)

   fun makeDinosaur() =
   let bodyWidth = 3.0
   in  extrudeSolidFromPolygon (body, bodyWidth, BODY_SIDE, BODY_EDGE, BODY_WHOLE);
       extrudeSolidFromPolygon (arm, bodyWidth/4.0, ARM_SIDE, ARM_EDGE, ARM_WHOLE);
       extrudeSolidFromPolygon (leg, bodyWidth/2.0, LEG_SIDE, LEG_EDGE, LEG_WHOLE);
       extrudeSolidFromPolygon (eye, bodyWidth+0.2, EYE_SIDE, EYE_EDGE, EYE_WHOLE);
       glNewList::f (DINOSAUR, GL_COMPILE);
         glMaterialfv::f (GL_FRONT, GL_DIFFUSE, skinColor);
         glCallList::f BODY_WHOLE;
         glPushMatrix::f();
           glTranslatef::f (0.0, 0.0, bodyWidth);
           glCallList::f ARM_WHOLE;
           glCallList::f LEG_WHOLE;
           glTranslatef::f (0.0, 0.0, -bodyWidth-bodyWidth/4.0);
           glCallList::f ARM_WHOLE;
           glTranslatef::f (0.0, 0.0, -bodyWidth/4.0);
           glCallList::f LEG_WHOLE;
           glTranslatef::f (0.0, 0.0, bodyWidth/2.0 - 0.1);
           glMaterialfv::f (GL_FRONT, GL_DIFFUSE, eyeColor);
           glCallList::f EYE_WHOLE;
         glPopMatrix::f();
       glEndList::f()
   end
 
   and extrudeSolidFromPolygon (data, thickness, side, edge, whole) =
   let tobj = gluNewTess::f()
   in  gluTessCallback::f (tobj, GLU_BEGIN, fcast (glBegin::fptr()));
       gluTessCallback::f (tobj, GLU_VERTEX, 
                         fcast (glVertex2fv::fptr())); #  tricky 
       gluTessCallback::f (tobj, GLU_END, fcast (glEnd::fptr()));
       glNewList::f (side, GL_COMPILE);
         glShadeModel::f GL_SMOOTH; /* smooth miminizes seeing tessellation */ 
         gluBeginPolygon::f tobj;
         vector::apply (fn (x, y) => 
             let my (arr, _) = c_utils::c_list' (set::float', s::float) [x, y] 
             in  gluTessVertex::f (tobj, (x, y, 0.0), Ptr::inject' arr)
             end) data;
         gluEndPolygon::f tobj; 
       glEndList::f(); 
       glNewList::f (edge, GL_COMPILE);
         glShadeModel::f GL_FLAT; /* flat shade keeps angular hands from
                                    being "smoothed" */
         glBegin::f GL_QUAD_STRIP;
         for 0 (vector::length data + 1)
           (fn i => 
            let n = vector::length data
                my (x, y) = vector::get (data, i mod n)
            in  glVertex3f::f (x, y, 0.0);
                glVertex3f::f (x, y, thickness);
                /* Calcluate a unit normal by dividing by Euclidean distance.
                   We could be lazy and use glEnable::f GL_NORMALIZE
                   so we could pass in arbitrary normals for a very slight
                   performance hit. */
                let my (x', y') = vector::get (data, (i+1) mod n)
                    dx      = x' - y
                    dy      = y - x'
                    len     = math::sqrt (dx * dx + dy * dy)
                in  glNormal3f::f (dx / len, dy / len, 0.0)
                end
             end);
       glEndList::f();
       glNewList::f (whole, GL_COMPILE);
         glFrontFace::f GL_CW;
         glCallList::f edge;
         glNormal3f::f (0.0, 0.0, -1.0); #  Constant normal for side 
         glCallList::f side;
         glPushMatrix::f ();
           glTranslatef::f (0.0, 0.0, thickness);
           glFrontFace::f GL_CCW;
           glNormal3f::f (0.0, 0.0, 1.0); #  Reverse normal for other side 
           glCallList::f side;
         glPopMatrix::f ();
       glEndList::f ()
   end


   lightZeroPosition = (10.0, 4.0, 10.0, 1.0)
   lightZeroColor    = (0.8, 1.0, 0.8, 1.0)  #  green-tinted 
   lightOnePosition  = (-1.0, -2.0, 1.0, 0.0)
   lightOneColor     = (0.6, 0.3, 0.2, 1.0)  #  red-tinted 

   fun contextInit() =
   ( glEnable::f GL_CULL_FACE; /* up to 50% better performance than no 
                                 back-face culling */
     glEnable::f GL_DEPTH_TEST; #  Enable depth buffering 
     glLightModeli::f (GL_LIGHT_MODEL_LOCAL_VIEWER, 1);
     glLightfv::f (GL_LIGHT0, GL_POSITION, lightZeroPosition);
     glLightfv::f (GL_LIGHT0, GL_DIFFUSE, lightZeroColor);
     glLightf::f (GL_LIGHT0, GL_CONSTANT_ATTENUATION, 0.1);
     glLightf::f (GL_LIGHT0, GL_LINEAR_ATTENUATION, 0.05);
     glLightfv::f (GL_LIGHT1, GL_POSITION, lightOnePosition);
     glLightfv::f (GL_LIGHT1, GL_DIFFUSE, lightOneColor);

     #  Enable both lights 
     glEnable::f GL_LIGHT0;
     glEnable::f GL_LIGHT1;
     glEnable::f GL_LIGHTING;
   
     #  Set up projection transform 
     glMatrixMode::f GL_PROJECTION;
     gluPerspective::g {
       fovy=40.0,   #  Field of view in degree 
       aspect=1.0,  #  Aspect ratio 
       zNear=1.0,   #  Z near 
       zFar=40.0    #  Z far 
     };

     #  Now change to modelview 
     glMatrixMode::f GL_MODELVIEW;
     gluLookAt::f(
       0.0, 0.0, 30.0, #  Eye is at (0, 0, 30) 
       0.0, 0.0, 0.0,  #  Center is at (0, 0, 0) 
       0.0, 1.0, 0.0   #  Up is in positive Y direction 
     );

     glPushMatrix::f ()  #  Dymmy push so we can pop on model recalc 
   )

   fun redraw () = 
     (glClear::f (GL_COLOR_BUFFER_BIT + GL_DEPTH_BUFFER_BIT);
      glCallList::f DINOSAUR;
      glFlush::f();
      SDL_GL_SwapBuffers::f()
     )

   fun main (prog, args) =
   let done  = REF FALSE
       event = new' SDL_Event::size
   in
     #  Initialize SDL for video output 
     if ( SDL_Init::f (SDL_INIT_VIDEO) < 0 ) then
     ( print("Unable to initialize SDL: "$SDL_GetError::f()$"\n");
       exit (1)
     ) 

     #  Create a 640x480 OpenGL screen 
     if Ptr::isNull'(SDL_SetVideoMode::f (640, 480, 0, SDL_OPENGL)) then
     ( print("Unable to create OpenGL screen: "$SDL_GetError::f()$"\n");
       SDL_Quit::f();
       exit (2)
     ) 

     #  Set the title bar in environments that support it 
     SDL_WM_SetCaption::f("Dinosaur", "");

     makeDinosaur();
     contextInit();

     while not *done
     do
     (
       redraw();
       SDL_Delay::f 0w50; #  sleep a while 
       #  This could go in a separate function 
       while SDL_PollEvent::f(&event) != 0 do
       ( if SDL_event_type event == SDL_QUIT or
            ( SDL_event_type event == SDL_KEYDOWN and
              SDL_event_keysym event == SDLK_ESCAPE ) then
           done := TRUE
         else ()
       )
     );
     SDL_Quit::f();
     1
   end
          
}


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
