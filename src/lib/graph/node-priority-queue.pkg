#
# This implements a priority queue for nodes in a graph
# 
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

generic package node_priority_queue (a:  Rw_Vector)		# Rw_Vector	is from   src/lib/std/src/rw-vector.api
: (weak)
Node_Priority_Queue						# Node_Priority_Queue	is from   src/lib/graph/node-priority-queue.api
{
    package g= graph;	# graph	is from   src/lib/graph/graph.pkg

    exception EMPTY_PRIORITY_QUEUE;

    Node_Priority_Queue
        = 
	PQ  { less:  (g::Node_Id, g::Node_Id) -> Bool,
	       heap:  a::Rw_Vector( g::Node_Id ), 
	       pos:   a::Rw_Vector( Int ), 
	       size:  Ref( Int )
	     };

    fun create n less
        =
        PQ { less, 
	     heap => a::make_rw_vector (n, 0),
	     pos  => a::make_rw_vector (n, 0),
	     size => REF 0
	   };

    fun is_empty (PQ { size => REF 0, ... } ) =>   TRUE;
        is_empty _                            =>   FALSE;
    end;

    fun clear (PQ { size, ... } )
        =
        size := 0;

    fun min (PQ { size => REF 0, ... } ) =>   raise exception EMPTY_PRIORITY_QUEUE;
        min (PQ { heap,          ... } ) =>   a::get (heap, 0);
    end;

    fun decrease_weight (PQ { size, heap, pos, less }, x)
	=
	{   fun siftup 0 => 0;

	        siftup i
                    =>
	    {   j =  (i - 1) / 2;
			y =  a::get (heap, j);

		        if   (less (x, y))
                             a::set (heap, i, y);
                             a::set (pos, y, i);
                             siftup j;
			else
                             i;
                        fi;
		    };
            end; 

	    x_pos =  siftup (a::get (pos, x));

	    a::set (heap, x_pos, x);
            a::set (pos, x, x_pos);
	};

    fun set (q as PQ { size, heap, pos, ... }, x)
	=
	{   nnn =  *size;

	    a::set (heap, nnn, x);
            a::set (pos, x, nnn);

            size :=  nnn + 1;

	    decrease_weight (q, x);
	};

    fun delete_min (PQ { size => REF 0, ... } )
            =>
            raise exception EMPTY_PRIORITY_QUEUE;

        delete_min (PQ { size, heap, pos, less } )
	    =>
	    {   nnn = *size - 1;

		fun siftdown (i, x)
		    = 
		    {   j =  i + i + 1;
			k =  j + 1;

		        if   (j >= nnn)
                             i;
			else
                             y =  a::get (heap, j);

			     if  (k >= nnn)

				  if  (less (y, x))
                                       go (i, x, j, y);
                                  else
                                       i;
                                  fi; 
			     else 
				    z = a::get (heap, k);

				    if   (less (y, x))

					 if   (less (z, y)   )   go (i, x, k, z); 
					 else                    go (i, x, j, y);   fi;
				    else
                                         if   (less (z, x)   )   go (i, x, k, z);
				         else                    i;                 fi;
                                    fi;
			     fi;
		       fi;
		    }

		also
                fun go (i, x, j, y)
                    =
                    {   a::set (heap, i, y);
                        a::set (pos, y, i);
                        siftdown (j, x);
                    };

		min   =  a::get (heap, 0);
		x     =  a::get (heap, nnn);
		x_pos =  siftdown (0, x);

		a::set (heap, x_pos, x);
                a::set (pos, x, x_pos); 

		size := nnn;
		min;
	    };
    end;				# fun delete_min

    fun from_graph less (g::GRAPH ggg)
	=
	{   nnn  = ggg.order ();
	    heap = a::make_rw_vector (nnn, 0); 
	    pos  = a::make_rw_vector (ggg.capacity (), 0); 

	    fun siftdown (i, x)
		= 
		{   j = i*2 + 1;
		    k = j + 1;

		    if  (j >= nnn)

                         a::set (heap, i, x);
		    else
			 if  (k >= nnn)

			      y = a::get (heap, j);

			      if   (less (y, x))   go (i, x, j, y);
			      else                 a::set (heap, i, x);     fi;

			 else 
			      y =  a::get (heap, j);
			      z =  a::get (heap, k);

			      if  (less (y, x))

				   if   (less (z, y))   go (i, x, k, z); 
				   else                 go (i, x, j, y);      fi;
			      else
				   if   (less (z, x))   go (i, x, k, z);
				   else                 a::set (heap, i, x);  fi;
			      fi;
			 fi;
                    fi;
		}

	    also
            fun go (i, x, j, y)
                =
                {   a::set (heap, i, y);
                    siftdown (j, x);
                };

	    fun make_heap -1
                    =>
                    ();

	        make_heap i
                    =>
                    {   siftdown (i, a::get (heap, i));
                        make_heap (i - 1);
                    };
            end;

	    i =  REF 0; 

	    ggg.forall_nodes
                (fn (u, _)
                    =
		    {   i' = *i;
                        a::set (heap, i', u);
                        i := i'+1;
                    });

	    make_heap ((nnn+1) / 2);

	    a::keyed_apply
                (fn (i, x) =  a::set (pos, x, i))
                heap;

	    PQ { less, heap, pos, size => REF nnn }; 

	};			# fun from_graph
};
