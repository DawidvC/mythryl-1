## printcontrol.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/basics/basics.make6



###               "The limits of my language are the limits of my world."
###
###                                        -- Ludwig Wittgenstein



api Control_Print {

    print_depth:    Ref( Int  );
    print_length:   Ref( Int  );
    string_depth:   Ref( Int  );
    integer_depth:  Ref( Int  );

    print_loop:     Ref( Bool );

    apis:           Ref( Int  );
    print_includes: Ref( Bool );

    out :
        Ref {
          say:     String -> Void,
          flush:   Void -> Void
        }; 

    linewidth:     Ref(  Int );
    say:           String -> Void; 
    flush:         Void -> Void;
};


###            "I never guess. It is a shocking
###             habit -- destructive to the
###             logical faculty."
###
###                           -- "Sherlock Holmes"


package control_print: (weak)  Control_Print {		# Control_Print	is from   src/lib/compiler/front/basics/print/printcontrol.pkg

    priority  =  [10, 10, 2];
    obscurity =  2;
    prefix    =  "print";

    registry = control_index::make { help => "compiler print settings" };
										my _ = 
    basic_control::note_subindex (prefix, registry, priority);

    convert_boolean =  control_utilities::convert::bool;
    convert_int     =  control_utilities::convert::int;

    nextpri = REF 0;

    fun new (c, n, h, d)
        =
        {   r =   REF d;
	    p =   *nextpri;

	    control
                =
                control::control {

                    name => n,
		    pri => [p],
		    obscurity,
		    help => h,
		    control => r
		};

	    nextpri := p + 1;

	    control_index::note_control
		registry
		{   control         =>  control::string_control c control,
		    dictionary_name =>  THE (control_utilities::dictionary_name::to_upper "PRINT_" n)
                };

	    r;
	};

    print_depth    =  new (convert_int,     "depth",          "max print depth",                    20 );
    print_length   =  new (convert_int,     "length",         "max print length",                  200 );
    string_depth   =  new (convert_int,     "string_depth",   "max string print depth",             70 );
    integer_depth  =  new (convert_int,     "integer_depth",  "max integer::Int print depth",       70 );
    print_loop     =  new (convert_boolean, "loop",           "print loop",                       TRUE ); #  ? 
    apis           =  new (convert_int,     "apis",           "max api expansion depth",             2 ); #  ? 
    print_includes =  new (convert_boolean, "print_includes", "print `include'",                  TRUE );
    linewidth      =  new (convert_int,     "linewidth",      "line-width hint for pretty printer", 79 );

# XXX BUGGO FIXME This stuff is mainly (only?) used for compiler
#                 error messages, so it probably should be going
#		  to stderr instead of stdout.
# 
    out = REF { say   =>  fn s  =  file::write (file::stdout, s),
		flush =>  fn () =  file::flush file::stdout
	      };



#    fun say s     =   .say   *out s;
    fun flush ()   =   .flush *out ();

    fun say s
        =
        {
            .say   *out s;
        };

};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
