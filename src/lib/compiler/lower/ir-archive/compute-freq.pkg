#
# This module computes frequencies when given branch probabilities.
# Bug fix: 
#   This module didn't work on irreducible flowgraphs!
#   The problem was caused 
#
# -- Allen Leung



###            "The most likely way for the world to be destroyed,
###              most experts agree, is by accident.
###
###              That's where we come in; we're computer professionals.
###              We cause accidents."
###
###                                -- Nathaniel Borenstein



generic package ComputeFrequencies
    (package loop:  Loop_Structure
     package freq:  FREQ
    ) : COMPUTE_FREQUENCIES
{

   package loop = Loop
   package dom  = Loop::Dom
   package g    = graph
   package s    = bit_set  
   package w    = freq
   package a    = rw_vector
   package h    = sparse_rw_vector

   my op div = w::div

   fun compute_frequencies
         { cfg, loop, loopMultiplier, nodeFreq, edgeFreq, branchProb, isTakenBranch } =
   let my g::GRAPH cfg          = cfg
       my Loop as g::GRAPH loop = loop 
       ENTRY                = case cfg.entries () of
                                     [ENTRY] => ENTRY
                                   | _ => raise exception graph::NOT_SINGLE_ENTRY
       N                    = cfg.capacity ()
       marked               = s::create N
       number_of_entries    = length (cfg.out_edges ENTRY)     
       entry_weight         = W.*(w::from_int 100, number_of_entries)

          #  indexed by headers 
       likely_exits         = h::rw_vector (N,[])
       exit_counts          = h::rw_vector (N, 0)

          #  indexed by nodes 
       entry_edges          = a::tabulate (N, cfg.in_edges)
       header_of            = Loop::header Loop
       nodeFreqs            = a::rw_vector (N, 0)
       branchProbs          = a::rw_vector (N, 0)
       TIMES                = 20
 
       cfg.forall_nodes (fn (b, b') =>
                  (a::update (nodeFreqs, b,*(nodeFreq b'));
                   a::update (branchProbs, b, branchProb b')
                  ))

       fun is_exit_edge (e as (i, j, _)) = 
            list::exists (fn (i', j', _) => i = i' and j = j')
               (h::sub (likely_exits, a::sub (header_of, i)))

       sum = list::fold_right (fn ((_, _, e), m) => *(edgeFreq e) + m) 0

       fun exit_weight_of i = 
       let h = a::sub (header_of, i)
           w = a::sub (nodeFreqs, h)
       in  w div (loopMultiplier * h::sub (exit_counts, h))
       end

       entryEdges = Loop::entryEdges Loop

       fun preprocess (header, Loop::LOOP { exits, ... } ) = 
       let real_exits = 
               list::filter (fn (i, _, _) => a::sub (branchProbs, i) > 0) exits
       in  h::update (likely_exits, header, real_exits);
           h::update (exit_counts, header, length real_exits);
           a::update (entry_edges, header, entryEdges header) 
       end

       fun propagate (0, _) = (print "Out of time\n")
         | propagate (n,[]) = ()
         | propagate (n, i . worklist) =
       let s::reset (marked, i)
           old_weight = a::sub (nodeFreqs, i)
           new_weight = sum (a::sub (entry_edges, i))
           new_weight = if i == ENTRY then entry_weight
                            else (case h::sub (likely_exits, i) of
                                   [] => new_weight #  not a real loop! 
                                 | _ => W.*(new_weight, loopMultiplier) 
                                 )
       in  if old_weight == new_weight then
                propagate (n, worklist)
           else (a::update (nodeFreqs, i, new_weight);
                 propagate_edge_weight (cfg.out_edges i, new_weight,[]);
                 propagate'(n, cfg.out_edges i, worklist)
                )
       end

       and propagate'(n,[], worklist) = propagate (n, worklist)
         | propagate'(n, (i, j, _) . es, worklist) =
           if s::markAndTest (marked, j) then 
                propagate'(n, es, worklist)
           else propagate'(int.-(n, 1), es, j . worklist)

       and propagate_edge_weight([], W, es') = process_non_exits (W, es')
         | propagate_edge_weight((edge as (i, _, e)) . es, W, es') =
           if is_exit_edge edge then 
              let exit_weight = exit_weight_of (a::sub (header_of, i))
                  w = edgeFreq e
              in  w := exit_weight; 
                  propagate_edge_weight (es, W-exit_weight, es')
              end
           else
              propagate_edge_weight (es, W, edge . es')

       and process_non_exits (W,[]) = ()
         | process_non_exits (W,[(_, _, e)]) = edgeFreq e := W
         | process_non_exits (W, es as [edge1 as (i, _, e1), (_, _, e2)]) =
           if i == ENTRY then divide_evenly (W, es) else
           let w = edgeFreq e1
               w' = edgeFreq e2
               my (w_F, w_T) = if isTakenBranch edge1 then (w', w) else (w, w')
               p = a::sub (branchProbs, i)
           in  w_T := W.*(W, p) div 100;
               w_F := W - *w_T
           end
         | process_non_exits (W, es) = divide_evenly (W, es)

       and divide_evenly (W, es) = 
           let W' = W div (length es)
           in  apply (fn (_, _, e) => edgeFreq e := W') es
           end

   in
       loop.forall_nodes preprocess;
       propagate (TIMES * N, [ENTRY]);
       cfg.forall_nodes (fn (b, b') => nodeFreq b' := a::sub (nodeFreqs, b))
   end
   except
       OVERFLOW = print "[OVERFLOW]\n";

}
