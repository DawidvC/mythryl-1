## codetree.api

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



###          "[The IBM Stretch computer] is immensely ingenious,
###           immensely complicated, and extremely effective but
###           somehow at the same time crude, wasteful and inelegant;
###           and one feels that there must be a better way of doing things."
###
###                           -- Christopher Strachey, 1962 


api Codetree {

    package constant:     Constant;		# Constant		is from   src/lib/compiler/lower/instruction/constant.api
    package region:       Region;		# Region		is from   src/lib/compiler/lower/instruction/region.api
#   package stream:       Instruction_Stream	# Instruction_Stream	is from   src/lib/compiler/lower/instruction/instruction-stream.api
    package basis:        Codetree_Basis;	# Codetree_Basis	is from   src/lib/compiler/lower/codetree/codetree-basis.api
    package extension:    Codetree_Extension;	# Codetree_Extension	is from   src/lib/compiler/lower/codetree/codetree-extension.api
    package machine_int:  Machine_Int;		# Machine_Int		is from   src/lib/compiler/lower/codetree/machine-int.api

    Some_Type = basis::Some_Type;

    Fty = basis::Fty;
    Var = cells_basis::Cell;	#  variable 
    Src = Var;			#  source variable 
    Dst = Var;			#  Destination variable 
    Reg = Var;			#  physical register 

    Note = note::Note;

    Cond  == basis::Cond;
    Fcond == basis::Fcond;

    Rounding_Mode     == basis::Rounding_Mode;
    Div_Rounding_Mode == basis::Div_Rounding_Mode;

    Ext == basis::Ext;

    # Statements/effects.  These types are parameterized by the statement
    # extension type.  Unfortunately, this has to be made polymorphic to make
    # it possible for recursive type definitions to work.
    #
    Statement
      #  Assignment 
      = MOVE_INT   (Some_Type, Dst, Int_Expression)
      | MOVE_BOOL  (Dst, Bool_Expression)
      | MOVE_FLOAT (Fty, Dst, Float_Expression)

      #  parallel copies 
      | COPY_INTS   (Some_Type, List( Dst ), List( Src ))
      | COPY_FLOATS (Fty,       List( Dst ), List( Src ))

      #  Control flow 
      | JUMP      (Int_Expression, Controlflow)

#     | SWITCH  of
#        { tableLab: label::label,		 #  label associated with table 
#	 base:  Null_Or( int_expression ),		 #  Base pointer -- if any 
#	 table:  label::label( fn ) -> int_expression, #  get table address 
#	 index:  int_expression,			 #  index into table  
#	 targets:  controlflow }		 #  targets of switch 

      | BCC      (Bool_Expression, label::Label)
      | CALL     { funct:    Int_Expression,
                   targets: Controlflow,
		   defs:    List( Expression ),
                   uses:    List( Expression ),
		   region:  region::Region,
		   pops:    int32::Int
                 }
      | FLOW_TO  (Statement, Controlflow)
      | RET      Controlflow
      | IF       (Bool_Expression, Statement, Statement)

	#  memory update: ea, data 
      | STORE   (Some_Type, Int_Expression, Int_Expression, region::Region)
      | FSTORE  (Fty, Int_Expression, Float_Expression, region::Region)

	#  Control dependence 
      | REGION  (Statement, Ctrl)

      | SEQ     List( Statement )	# Sequencing 
      | DEFINE  label::Label		# Define local label 

      | NOTE (Statement, Note)
      | EXT  Sext  #  extension 

      # Synthetic instructions to indicate
      # that the regs are live or dead at
      # this program point.
      #
      # The spilled list must always
      # start out as the empty list.
      #
      | LIVE  List( Expression )
      | DEAD  List( Expression )

      # RTL operators:						# "RTL" == "Register Transfer Language" (most likely)
      # The following are used internally
      # for describing instruction semantics.
      # The frontend must not use these.

      | PHI     { preds: List( Int ), block: Int }
      | ASSIGN  (Some_Type, Int_Expression, Int_Expression)
      | SOURCE
      | SINK
      | RTL     { hash: Unt, attributes: Ref( basis::Attributes ), e: Statement }

    also
    Int_Expression
      = REG     (Some_Type, Reg)

      #  sizes of constants are inferred by context 
      | LITERAL machine_int::Machine_Int
      | LABEL   label::Label
      | CONST   constant::Const
      | LABEXP  Int_Expression

      | NEG     (Some_Type, Int_Expression)
      | ADD     (Some_Type, Int_Expression, Int_Expression)
      | SUB     (Some_Type, Int_Expression, Int_Expression)

      #  signed multiplication etc. 
      | MULS    (Some_Type, Int_Expression, Int_Expression)
      | DIVS    (Div_Rounding_Mode, Some_Type, Int_Expression, Int_Expression)
      | REMS    (Div_Rounding_Mode, Some_Type, Int_Expression, Int_Expression)

      #  unsigned multiplication etc. 
      | MULU    (Some_Type, Int_Expression, Int_Expression)
      | DIVU    (Some_Type, Int_Expression, Int_Expression)
      | REMU    (Some_Type, Int_Expression, Int_Expression)

      #  overflow-trapping versions of above. These are all signed 
      | NEGT    (Some_Type, Int_Expression)
      | ADDT    (Some_Type, Int_Expression, Int_Expression)
      | SUBT    (Some_Type, Int_Expression, Int_Expression)
      | MULT    (Some_Type, Int_Expression, Int_Expression)
      | DIVT    (Div_Rounding_Mode, Some_Type, Int_Expression, Int_Expression)
      #  there is no REMT because remainder never overflows 

      #  Bit operations 
      | BITWISEAND    (Some_Type, Int_Expression, Int_Expression)
      | BITWISEOR     (Some_Type, Int_Expression, Int_Expression)
      | BITWISEXOR    (Some_Type, Int_Expression, Int_Expression)
      | BITWISEEQV    (Some_Type, Int_Expression, Int_Expression)
      | BITWISENOT    (Some_Type, Int_Expression)

      | RIGHTSHIFT  (Some_Type, Int_Expression, Int_Expression)    #  value, shift 
      | RIGHTSHIFTU (Some_Type, Int_Expression, Int_Expression)
      | LEFTSHIFT   (Some_Type, Int_Expression, Int_Expression)

      #  type promotion/conversion 
      | SIGNEXTEND      (Some_Type, Some_Type, Int_Expression)  #  toType, fromType 
      | ZEROEXTEND      (Some_Type, Some_Type, Int_Expression)  #  toType, fromType 
      | CONVERTFLOATTOINT  (Some_Type, Rounding_Mode, Fty, Float_Expression)


      # COND (Some_Type, cc, e1, e2):
      # Evaluate into either e1 or e2, depending on cc.
      # Both e1 and e2 are allowed to be evaluated eagerly.

      | COND  (Some_Type, Bool_Expression, Int_Expression, Int_Expression)

      #  integer load 
      | LOAD  (Some_Type, Int_Expression, region::Region)

      #  predication 
      | PRED  (Int_Expression, Ctrl)

      | LET  (Statement, Int_Expression)

      | REXT  (Some_Type, Rext)

      | MARK  (Int_Expression, Note)

      | OP     (Some_Type, Operator, List( Int_Expression ))
      | ARG    (Some_Type, Ref( Rep ), String)
      | ATATAT   (Some_Type, cells_basis::Cellkind, Int_Expression)
      | PARAM  Int
      | BITSLICE  (Some_Type, List ((Int, Int)), Int_Expression)
      | QQQ

    also
    Rep  = REP  String

    also
    Operator = OPERATOR  basis::Misc_Op

    also
    Float_Expression
      = FREG    (Fty, Src)
      | FLOAD   (Fty, Int_Expression, region::Region)

      | FADD    (Fty, Float_Expression, Float_Expression)
      | FMUL    (Fty, Float_Expression, Float_Expression)
      | FSUB    (Fty, Float_Expression, Float_Expression)
      | FDIV    (Fty, Float_Expression, Float_Expression)
      | FABS    (Fty, Float_Expression)
      | FNEG    (Fty, Float_Expression)
      | FSQRT   (Fty, Float_Expression)
      | FCOND   (Fty, Bool_Expression ,
		 Float_Expression, Float_Expression)
      | COPY_FLOAT_SIGN  (Fty,
		    Float_Expression,    # sign
		    Float_Expression)    # magnitude

      | CVTI2F  (Fty, Some_Type, Int_Expression)  #  from signed integer 
      | CVTF2F  (Fty, Fty, Float_Expression) #  float to float conversion 

      | FPRED  (Float_Expression, Ctrl)

      | FEXT  (Fty, Fext)

      | FMARK  (Float_Expression, Note)

    also
    Bool_Expression
      = CC      (basis::Cond, Src)
      | FCC     (basis::Fcond, Src)
      | TRUE
      | FALSE
      | NOT     Bool_Expression
      | AND     (Bool_Expression, Bool_Expression)
      | OR      (Bool_Expression, Bool_Expression)
      | XOR     (Bool_Expression, Bool_Expression)
      | EQV     (Bool_Expression, Bool_Expression)
      | CMP     (Some_Type, basis::Cond, Int_Expression, Int_Expression)
      | FCMP    (Fty, basis::Fcond, Float_Expression, Float_Expression)
      | CCMARK  (Bool_Expression, Note)
      | CCEXT   (Some_Type, Ccext)

    also
    Expression
      = BOOL_EXPRESSION  Bool_Expression
      | INT_EXPRESSION   Int_Expression
      | FLOAT_EXPRESSION Float_Expression

    withtype
    Controlflow = List( label::Label )			#  Control flow info 
       also Ctrl   = Var                   		#  Control dependence info 
       also Ctrls  = List( Ctrl )
       also Sext   = extension::Sx  (Statement, Int_Expression, Float_Expression, Bool_Expression)
       also Rext   = extension::Rx  (Statement, Int_Expression, Float_Expression, Bool_Expression)
       also Fext   = extension::Fx  (Statement, Int_Expression, Float_Expression, Bool_Expression)
       also Ccext  = extension::Ccx (Statement, Int_Expression, Float_Expression, Bool_Expression)
       also Labexp = Int_Expression;

    # Useful type abbreviations for working for Codetree.

    Rewrite_Fns           #  rewriting functions 
      =
      { statement:   Statement   -> Statement,
        int_expression:  Int_Expression  -> Int_Expression,
        float_expression:  Float_Expression  -> Float_Expression,
        bool_expression: Bool_Expression -> Bool_Expression
      };

    Fold_Fns( X )        #  Aggregation functions 
      =
      { statement:  (Statement,    X) -> X,
        int_expression: (Int_Expression,   X) -> X,
        float_expression: (Float_Expression,   X) -> X,
        bool_expression: (Bool_Expression, X) -> X
      };

    Hash_Fns    #  hashing functions 
      =
      { statement: Statement         -> Unt,
        int_expression: Int_Expression   -> Unt,
        float_expression: Float_Expression -> Unt,
        bool_expression: Bool_Expression -> Unt
      };

    Eq_Fns   #  Comparison functions 
      =
      { statement: (Statement, Statement)                -> Bool,
        int_expression: (Int_Expression, Int_Expression)     -> Bool,
        float_expression: (Float_Expression, Float_Expression) -> Bool,
        bool_expression: (Bool_Expression, Bool_Expression)  -> Bool
      };

    Prettyprint_Fns    #  pretty printing functions 
      =
      { statement: Statement             -> String,
        int_expression: Int_Expression       -> String,
        float_expression: Float_Expression     -> String,
        bool_expression: Bool_Expression     -> String,
        dst_reg:  (Some_Type, Var) -> String,
        src_reg:  (Some_Type, Var) -> String
      };

}; #  Codetree 


## COPYRIGHT (c) 1994 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
