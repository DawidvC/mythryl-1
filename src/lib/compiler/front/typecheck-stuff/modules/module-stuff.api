## module-stuff.api 

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# The center of the typechecker is
#
#     src/lib/compiler/front/typechecker/typecheck/typecheck-package-language-g.pkg
#
# -- see it for a higher-level overview.
#
# This file contains support functions used mainly
# during typechecking of module-language stuff.
#
# In particular, we implement looking up things
# in nested packages:
#     Source code like "a::b.c" accessing stuff
# in such nested packages parses into a list
# of symbols [a, b, c] called a "symbol_path".
#     To actually turn a symbol_path into something
# useful, we must look up 'a' in the symbol table,
# look up 'b' in the value of 'a', look up 'c' in
# the value of 'b', &tc to the end of the path.
#    In this file, we implement the busywork of
# actually doing so.
#    To keep things nicely typed, we need one
# get_xxx_via_path function for each type of
# thing XXX that we want to fetch.  To keep
# the redundancy level down, we implement one
# generic routine and then one wrapper per
# result type.


api Module_Stuff {

    exception UNBOUND  symbol::Symbol;

    get_api_element:   (module::Elements, symbol::Symbol) -> module::Api_Element;
    get_api_element_variable:  module::Api_Element -> Null_Or( module_path::Module_Stamp );

    package_definition_to_package:  (module::Package_Definition,
			    module::Typechecker_Dictionary)
			 -> module::Package;

    # ** getTypeConstructor, get_package and get_generic are used in modules/sigmatch.sml only **

    get_type_constructor
        :
        ( module::Elements,
	  module::Typechecker_Dictionary,
	  symbol::Symbol
        ) 
        ->
        ( types::Type_Constructor,
	  module_path::Module_Stamp
        );

    get_package
        :
        ( module::Elements,
	  module::Typechecker_Dictionary,
	  symbol::Symbol,
	  var_home::Var_Home,
	  inlining_information::Inlining_Information
	)
	->
	( module::Package,
	  module_path::Module_Stamp
	);

    get_generic
        :
        ( module::Elements,
	  module::Typechecker_Dictionary,
	  symbol::Symbol,
	  var_home::Var_Home,
	  inlining_information::Inlining_Information
	)
	->
	( module::Generic,
	  module_path::Module_Stamp
	);

    # These functions are used in eqtypes.pkg:
    #
    get_package_stamp:      module::Package -> stamp::Stamp;
    get_package_name:       module::Package -> inverse_path::Inverse_Path;
    get_packages:           module::Package -> List( module::Package );
    get_type_constructors:  module::Package -> List( types::Type_Constructor );
    get_package_symbols:    module::Package -> List( symbol::Symbol );



    # These functions should be called in
    # dictionary/find-in-symbol-table.pkg only:

    get_package_via_path:  (module::Package,
			      symbol_path::Symbol_Path,
			      symbol_path::Symbol_Path) 
			   -> module::Package;

    get_package_definition_via_path:  (module::Package,
					 symbol_path::Symbol_Path,
					 symbol_path::Symbol_Path) 
				      -> module::Package_Definition;

    get_generic_via_path
        :
        ( module::Package,
	  symbol_path::Symbol_Path,
	  symbol_path::Symbol_Path
        )
	->
        module::Generic;

    get_type_constructor_via_path:  (module::Package,
				     symbol_path::Symbol_Path,
				     symbol_path::Symbol_Path)
				  -> types::Type_Constructor;

    get_value_via_path:  (module::Package,
			 symbol_path::Symbol_Path,
			 symbol_path::Symbol_Path)
		      -> variables_and_constructors::Variable_Or_Constructor;

    check_path_sig:  (module::Api,
		      symbol_path::Symbol_Path)
		   -> Null_Or( symbol::Symbol );

    apis_equal: (module::Api, module::Api) -> Bool;
    eq_origin:  (module::Package, module::Package) -> Bool;

    type_identifier:      types::Type_Constructor -> module_map::Type_Identifier;
    package_identifier:   module::Package         -> module_map::Package_Identifier;
    generic_identifier:   module::Generic         -> module_map::Generic_Identifier;

    package_identifier2: (module::Api,         module::Typechecked_Package) -> module_map::Package_Identifier;
    generic_identifier2: (module::Generic_Api, module::Typechecked_Generic)   -> module_map::Generic_Identifier;

    # Translate type_constructor or type
    # in a Typechecker_Dictionary:
    #
    translate_type_constructor:  module::Typechecker_Dictionary -> types::Type_Constructor -> types::Type_Constructor;
    translate_type:              module::Typechecker_Dictionary -> types::Type -> types::Type;

    # Relativize type or type_constructor
    # in an module_path_context:
    #
    relativize_type_constructor:  module_path_context::Context -> types::Type_Constructor -> (types::Type_Constructor, Bool);
    relativize_type:              module_path_context::Context -> types::Type -> (types::Type, Bool);

    include_package:  ( symbol_table::Symbol_Table,
		        module::Package
                      )
		      ->
                      symbol_table::Symbol_Table;

    # Extract inlining_info
    # from a list of namings: 
    #
    extract_inlining_info:  symbol_table_entry::Symbol_Table_Entry
                            ->
                            inlining_information::Inlining_Information;

    get_api_symbols: module::Api -> List( symbol::Symbol );
    get_api_names:   module::Package -> List( symbol::Symbol );

    debugging:  Ref(  Bool );

}; #  Api Module_Stuff 





## COPYRIGHT (c) 1996 Bell Laboratories. 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
