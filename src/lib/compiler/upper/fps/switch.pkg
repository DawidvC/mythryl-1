## switch.pkg 

# Compiled by:
#     src/lib/compiler/core.make6

api Switch {

  exception TOO_BIG;

  switch: 
     { e_int: Int -> A_value,   /* may raise TOO_BIG; not all ints need 
			    be representable */
       e_real: String -> A_value,
       e_switchlimit:  Int,
       e_neq: A_comparison,
       e_w32neq: A_comparison,
       e_i32neq: A_comparison,
       e_word32: unt32::Unt -> A_value,
       e_int32: unt32::Unt -> A_value,
       e_wneq: A_comparison,
       e_word: Unt -> A_value,
       e_pneq: A_comparison,
       e_fneq: A_comparison,
       e_less: A_comparison,
       e_branch: (A_comparison, A_value, A_value, A_cexp, A_cexp) -> A_cexp,
       e_strneq: (A_value, String, A_cexp, A_cexp) -> A_cexp,
       e_switch: (A_value, List( A_cexp )) -> A_cexp,
       e_add:  (A_value, A_value, (A_value -> A_cexp)) -> A_cexp,
       e_gettag: (A_value, (A_value -> A_cexp)) -> A_cexp,
       e_getexn: (A_value, (A_value -> A_cexp)) -> A_cexp,
       e_length: (A_value, (A_value -> A_cexp)) -> A_cexp,
       e_unwrap: (A_value, (A_value -> A_cexp)) -> A_cexp,
       e_boxed:  (A_value, A_cexp, A_cexp) -> A_cexp,
       e_path:  (var_home::Var_Home, (A_value -> A_cexp)) -> A_cexp
     }
     -> 
     { expression: A_value,
       an_api: var_home::Constructor_Signature,
       cases:  List( (anormal::Con, A_cexp) ),
       default: A_cexp
     }
     ->
     A_cexp;

};


package switch: (weak)  Switch {		# Switch	is from   src/lib/compiler/upper/fps/switch.pkg

    stipulate

	package l= anormal;	# anormal	is from   src/lib/compiler/upper/anormal/anormal.pkg
	package a= var_home;	# var_home	is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg

    herein

	fun bug s
            =
            error_message::impossible ("Switch: " + s);

	exception TOO_BIG;

	fun sublist test
	      =
	      subl
              where
	          fun subl (a ! r)
                          =>
                          test a   ??   a ! (subl r)
                                   ::       (subl r);
		      subl x
                          =>
                          x;
                  end;
              end;

	fun nthcdr (l, 0) => l; 
	    nthcdr (a ! r, n) => nthcdr (r, n - 1);
	    nthcdr _ => bug "nthcdr in switch";
	end;

	fun count test
	    =
	    subl 0
            where
	        fun subl acc (a ! r)
                        =>
                        subl
			    (test a  ??  1+acc
				     ::    acc
                            )
			    r;

		    subl acc NIL
                        =>
                        acc;
		end;
	    end;

	fun switch
	    { e_int: Int -> A_value,   # May raise TOO_BIG; not all ints need be representable.
	      e_real: String -> A_value,
	      e_switchlimit:  Int,
	      e_neq: A_comparison,
	      e_w32neq: A_comparison,
	      e_i32neq: A_comparison,
	      e_word32: unt32::Unt -> A_value,
	      e_int32: unt32::Unt -> A_value,
	      e_wneq: A_comparison,
	      e_word: Unt -> A_value,
	      e_pneq: A_comparison,
	      e_fneq: A_comparison,
	      e_less: A_comparison,
	      e_branch: (A_comparison, A_value, A_value, A_cexp, A_cexp) -> A_cexp,
	      e_strneq: (A_value, String, A_cexp, A_cexp) -> A_cexp,
	      e_switch: (A_value, List( A_cexp )) -> A_cexp,
	      e_add:  (A_value, A_value, (A_value -> A_cexp)) -> A_cexp,
	      e_gettag: (A_value, (A_value -> A_cexp)) -> A_cexp,
	      e_getexn: (A_value, (A_value -> A_cexp)) -> A_cexp,
	      e_length: (A_value, (A_value -> A_cexp)) -> A_cexp,
	      e_unwrap: (A_value, (A_value -> A_cexp)) -> A_cexp,
	      e_boxed:  (A_value, A_cexp, A_cexp) -> A_cexp,
	      e_path:  (var_home::Var_Home, (A_value -> A_cexp)) -> A_cexp
	    }
	    =
	    {
		fun switch1 (e:  A_value, cases:   List( (Int, A_cexp) ), default:  A_cexp, (lo, hi))
		    =
		    {   delta = 2;

			fun collapse (l as (li, ui, ni, xi) ! (lj, uj, nj, xj) ! r )
                                =>
			        (ni+nj) * delta > ui-lj
                                    ??  collapse((lj, ui, ni+nj, xj) ! r)
			            ::  l;

			    collapse l
                                =>
                                l;
			end;

			fun f (z, x as (i, _) ! r)
                                =>
                                f (collapse((i, i, 1, x) ! z), r);

			    f (z, NIL)
                                =>
                                z;
			end;

			fun tackon (stuff as (l, u, n, x) ! r)
				=> 
				(n*delta > u-l and n>e_switchlimit and hi>u)
				    ??  tackon((l, u+1, n+1, x @ [(u+1, default)]) ! r)
				    ::  stuff;

			    tackon NIL
                                =>
                                bug "switch.3217";
			end;

			fun separate((z as (l, u, n, x)) ! r)
                                =>
			        if  (n < e_switchlimit
                                and  n > 1
                                ) 

				    my ix as (i, _)
                                        =
                                        list::nth (x, (n - 1));

				    (i, i, 1,[ix]) ! separate((l, l, n - 1, x) ! r);
			        else             z ! separate r;
                                fi;

			    separate NIL => NIL;
			end;

			chunks = reverse (separate (tackon (f (NIL, cases))));

			fun g (1, (l, h, 1, (i, b) ! _) ! _, (lo, hi))
				=> 
				if (lo==i and hi==i)  b;
				else                  e_branch (e_neq, e, e_int i, default, b);
				fi;

			    g (1, (l, h, n, x) ! _, (lo, hi))
			        =>
			        {   fun f (0, _, _)
                                            => 
                                            NIL;

					f (n, i, l as (j, b) ! r)
                                            =>
					    if (i+lo == j)
                                                 b ! f (n - 1, i+1, r);
					    else (default ! f (n, i+1, l));
                                            fi;

					f _ => bug "switch.987";
				    end;

				    list = f (n, 0, x);

				    body = if (lo==0)
                                                e_switch (e,  list);
					   else e_add    (e,  e_int(-lo),  fn v = e_switch (v, list));
                                           fi;

				    a = if (lo < l)  e_branch (e_less, e, e_int l, default, body); else body; fi;
				    b = if (hi > h)  e_branch (e_less, e_int h, e, default, a   ); else    a; fi;

				    b;
				};

			    g (n, cases, (lo, hi))
				=>
				{   n2 = n / 2;
				    c2 = nthcdr (cases, n2);

				    my (l, r)
                                        =
                                        case c2
                                            (l1, _, _, _) ! r1
                                                =>
                                                (l1, r1);

					    _ => bug "switch.111";
                                        esac;

				    e_branch
                                      ( e_less,
                                        e,
                                        e_int l,
                                        g (n2, cases, (lo, l - 1)),
                                        g (n-n2, c2, (l, hi))
                                      );
				};
			end;

		        g (list::length chunks, chunks, (lo, hi));
		    };

		sortcases
                    =
                    list_mergesort::sort
                        (fn ((i: Int, _), (j, _)) =  i>j);

		fun int_switch (e: A_value, l, default, inrange)
		    =
		    {   len = list::length l;

			fun isbig i
                            =
                            {   e_int i;
                                FALSE;
                            }
                            except
                                TOO_BIG = TRUE;

			anybig = list::exists (isbig o #1) l;

			fun construct (i, c)
			    =
			    if (isbig i)

				 j = i / 2;

				 construct
                                   ( j,
                                     fn j' = construct
                                               ( i-j,
                                                 fn k' = e_add (j', k', c)
                                               )
                                   );

			    else
				 c (e_int i);
			    fi;


			fun ifelse NIL
                                =>
                                default;

			    ifelse ((i, b) ! r)
                                => 
			        construct (i, fn i' = e_branch (e_neq, i', e, ifelse r, b));
			end;

			fun ifelse_n [(i, b)] => b;
			    ifelse_n ((i, b) ! r) => e_branch (e_neq, e_int i, e, ifelse_n r, b);
			    ifelse_n _ => bug "switch.224";
			end;  

			l = sortcases l;

			case (anybig or len<e_switchlimit, inrange)

			    (TRUE, NULL)
                                =>
                                ifelse l;

			    (TRUE, THE n)
                                =>
                                if (n+1==len)  ifelse_n l;
                                else           ifelse   l;
                                fi;

			    (FALSE, NULL)
                                =>
				{   hi = #1 (list::last l 
					     except list::EMPTY = bug "switch::last132"
                                            );

				    my (low, r)
                                        =
                                        case l
                                            (low', _) ! r' => (low', r');
					    _              => bug "switch.23";
                                        esac;

				  e_branch (e_less, e, e_int low, default,
				      e_branch (e_less, e_int hi, e, default,
						  switch1 (e, l, default, (low, hi))));
				};

			    (FALSE, THE n)
                                =>
                                switch1 (e, l, default, (0, n));
			esac;
		    };

		  fun isboxed (l::DATACON((_, a::CONSTANT _, _),  _, _)) => FALSE;
		      isboxed (l::DATACON((_, a::LISTNIL, _),     _, _)) => FALSE;
		      isboxed (l::DATACON((_, representation, _), _, _)) => TRUE;

		      isboxed (l::REALCON   _) => TRUE;
		      isboxed (l::STRINGCON s) => TRUE;

		      isboxed _ => FALSE;
		  end;

		  fun isexn (l::DATACON((_, a::EXCEPTION _, _), _, _)) => TRUE;
		      isexn _ => FALSE;
		  end;

		 fun exn_switch (w, l, default)
		   =
		   e_getexn
                     ( w,
                       fn u = g l
			      where
				  fun g((l::DATACON((_, a::EXCEPTION p, _), _, _), x) ! r)
                                          =>
					  e_path (p, fn v = e_branch (e_pneq, u, v, g r, x));

				      g NIL =>  default;
				      g _   =>  bug "switch.21";
                                  end;
			      end
                     );

		 fun datacon_switch (w, an_api, l:  List( (l::Con, A_cexp) ), default)
		   =
		   { 
		       fun tag (l::DATACON((_, a::CONSTANT i, _), _, _)) => i;
			   tag (l::DATACON((_, a::TAGGED i, _), _, _)) => i;
		 #         tag (l::DATACON((_, a::TAGGEDREC (i, _), _), _, _)) = i;
			   tag _ => 0;
		       end;

		       fun tag'(c, e)
                           =
                           (tag c, e);

		       boxed   = sublist       (isboxed o #1) l;
		       unboxed = sublist (not o isboxed o #1) l;

		       b = map tag' boxed;
		       u = map tag' unboxed;

		       case an_api

			   a::CONSTRUCTOR_SIGNATURE (0, n)
			       => 
			       e_unwrap (w, fn w' =  int_switch (w', u, default, THE (n - 1)));

			   a::CONSTRUCTOR_SIGNATURE (n, 0)
			       => 
			       e_gettag (w, fn w' =  int_switch (w', b, default, THE (n - 1)));

			   a::CONSTRUCTOR_SIGNATURE (1, nu)
			       => 
			       e_boxed (w, int_switch (e_int 0, b, default, THE 0),
				 e_unwrap (w, fn w' =  int_switch (w', u, default, THE (nu - 1))));

			   a::CONSTRUCTOR_SIGNATURE (nb, nu)
			       => 
			       e_boxed (w, 
				e_gettag (w, fn w' = int_switch (w', b, default, THE (nb - 1))),
				 e_unwrap (w, fn w' = int_switch (w', u, default, THE (nu - 1))));

			   a::NULLARY_CONSTRUCTOR => bug "datacon_switch";
		     esac;
		   };

		 fun coalesce (l: List( (String, X) )) :  List ((Int, List( (String, X) )) )
		     =
		     gather (size s, l',[],[])
                     where

			 l' = list_mergesort::sort
                                  (fn ((s1, _), (s2, _)) =  size s1 > size s2)
                                  l;

			 s = #1 (list::head l');

			 fun gather (n,[], current, acc)
                                 =>
                                 (n, current) ! acc;

			     gather (n, (x as (s, a)) ! rest, current, acc)
				 =>
				 {   s1 = size s;

				     if (s1 == n)  gather (n,  rest, x ! current, acc);
				     else          gather (s1, rest,[x], (n, current) ! acc);
				     fi;
				 };
			 end;
		     end;

		 fun string_switch (w, l, default)
		     = 
		     {   fun strip (l::STRINGCON s, x)
                                 =>
                                 (s, x);

			     strip _
                                 =>
                                 bug "string_switch";
			 end;

			 b = map strip l;

			 bylength = coalesce b;

			 fun one_len (0, (_, e) ! _)
                                 =>
                                 (0, e);

			     one_len (len, l)
				 => 
				 (len, try l)
                                 where
				     fun try NIL => default;
					 try ((s, e) ! r) => e_strneq (w, s, try r, e);
                                     end;
				 end;
			 end;

			 genbs = e_length ( w,
					    fn len = int_switch (len, map one_len bylength, default, NULL)
					  );

			 genbs;
		     };


		 fun real_switch (w, (l::REALCON rval, x) ! r, default)
                         =>
		         e_branch (e_fneq, w, e_real rval, real_switch (w, r, default), x);

		     real_switch(_, NIL, default) =>  default;
		     real_switch _                =>  bug "switch.81";
		 end;


		 fun word_switch (w, (l::WORDCON wval, e) ! r, default)
                         =>
		         e_branch (e_wneq, w, e_word wval, word_switch (w, r, default), e);

		     word_switch(_, NIL, default) =>  default; 
		     word_switch _                =>  bug "switch.88";
		  end;


		 fun word32_switch (w, (l::WORD32CON i32val, e) ! r, default)
                         =>
		         e_branch (e_w32neq, w, e_word32 i32val, word32_switch (w, r, default), e);

		     word32_switch(_, NIL, default) =>  default;
		     word32_switch _                =>  bug "switch.78";
		 end;


		 fun int32_switch (w, (l::INT32CON i32val, e) ! r, default)
                         =>
                         {   int32to_word32 = unt32::from_large_int o int32::to_large;

			     e_branch (e_i32neq, w, e_int32 (int32to_word32 i32val), 
				      int32_switch (w, r, default), e);
			 };

		      int32_switch(_, NIL, default) =>  default;
		      int32_switch _                =>  bug "switch.77";
		  end;

		  fn { cases=>NIL, default, ... }
			 =>
			 default;

		     { expression, an_api, cases as (c, _) ! _, default }
			 =>
			 case c

			     l::INTCON _
                                 => 
				 int_switch (expression, map un_int cases, default, NULL)
                                 where
				     fun un_int (l::INTCON i, e) => (i, e);
					 un_int _ => bug "un_int";
				     end;
				 end;

			     l::DATACON((_, a::EXCEPTION _, _), _, _)
                                 =>
                                 exn_switch (expression, cases, default);

			     l::DATACON   _ =>   datacon_switch (expression, an_api, cases, default);
			     l::REALCON   _ =>   real_switch    (expression, cases, default);
			     l::STRINGCON _ =>   string_switch  (expression, cases, default);
			     l::WORDCON   _ =>   word_switch    (expression, cases, default);
			     l::WORD32CON _ =>   word32_switch  (expression, cases, default);
			     l::INT32CON  _ =>   int32_switch   (expression, cases, default);

			     _ => bug "unexpected Constructor in make_switch";
			  esac;
		   end ;

	    }; 

    end;		# toplevel stipulate 
};			# package switch 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
