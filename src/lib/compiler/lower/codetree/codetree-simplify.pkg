# WARNING: this is generated by running 'nowhere codetree-simplify.in'.
# Do not edit this file directly.
# Version 1.2.2

# Compiled by:
#     src/lib/compiler/lower/make7/codetree.make6


# We are nowhere invoked.

###line 15.1 "codetree-simplify::in"
generic package codetree_simplifier_g (
###line 16.4 "codetree-simplify::in"
                         package codetree:  Codetree;			# Codetree	is from   src/lib/compiler/lower/codetree/codetree.api

###line 17.4 "codetree-simplify::in"
                         package size:  Codetree_Size		# Codetree_Size	is from   src/lib/compiler/lower/codetree/codetree-size.api
                                        where codetree == codetree;

###line 20.4 "codetree-simplify::in"
                          sext:  codetree::Rewrite_Fns -> codetree::Sext -> codetree::Sext;

###line 21.4 "codetree-simplify::in"
                          rext:  codetree::Rewrite_Fns -> codetree::Rext -> codetree::Rext;

###line 22.4 "codetree-simplify::in"
                          fext:  codetree::Rewrite_Fns -> codetree::Fext -> codetree::Fext;

###line 23.4 "codetree-simplify::in"
                          ccext:  codetree::Rewrite_Fns -> codetree::Ccext -> codetree::Ccext;
)

: (weak) Codetree_Simplifier					# Codetree_Simplifier	is from   src/lib/compiler/lower/codetree/codetree-simplify.api

=
package {

###line 27.4 "codetree-simplify::in"
   package codetree = codetree;
   package t        = codetree;

###line 28.4 "codetree-simplify::in"
   package i = t::machine_int;

###line 29.4 "codetree-simplify::in"
   package r = codetree_rewrite
      (
###line 30.7 "codetree-simplify::in"
       package t = t;

###line 31.7 "codetree-simplify::in"
       sext = sext;
       rext = rext;
       fext = fext;
       ccext = ccext;
      );


###line 34.4 "codetree-simplify::in"
    Simplifier = t::Rewrite_Fns;

###line 36.4 "codetree-simplify::in"
   lit_11 = (integer::from_int 0);
   lit_16 = (integer::from_int 1);

###line 37.4 "codetree-simplify::in"
   zero = (integer::from_int 0);

###line 38.4 "codetree-simplify::in"
   zero_t = t::LITERAL zero;

###line 40.4 "codetree-simplify::in"
   fun simplify { address_width, signed_address } = 
       { 
###line 43.4 "codetree-simplify::in"
           fun dm (t::DIV_TO_ZERO) => i::DIV_TO_ZERO;
              dm (t::DIV_TO_NEGINF) => i::DIV_TO_NEGINF; end;

###line 46.4 "codetree-simplify::in"
           fun sim ===> expression = 
                  { v_3 = expression;
                      fun state_165 e = e;
                      fun state_149 () = zero_t;
                      fun state_158 () = zero_t;
                      fun state_180 v_3 = 
                          { expression = v_3;
                           expression;
                          };
                      fun state_118 (v_1, v_4) = 
                          { b = v_4;
                            type = v_1;
                           b;
                          };
                      fun state_15 (v_1, v_0) = 
                          { a = v_0;
                            type = v_1;
                           a;
                          };
                      fun state_148 v_1 = 
                          { type = v_1;
                           zero_t;
                          };
                      fun state_140 v_1 = 
                          { type = v_1;
                           zero_t;
                          };
                      fun state_157 v_1 = 
                          { type = v_1;
                           zero_t;
                          };
                      fun state_109 v_4 = 
                          { b = v_4;
                           b;
                          };
                      fun state_45 (v_1, v_4) = 
                          { type = v_1;
                            x = v_4;
                           x;
                          };
                      fun state_43 v_1 = 
                          { type = v_1;
                           zero_t;
                          };
                      fun state_47 (v_1, v_0) = 
                          { type = v_1;
                              x = v_0;
                           x;
                          };
                      fun state_85 (v_1, v_4) = 
                          { type = v_1;
                              x = v_4;
                           x;
                          };
                      fun state_83 v_1 = 
                          { type = v_1;
                           zero_t;
                          };
                      fun state_87 (v_1, v_0) = 
                          { type = v_1;
                              x = v_0;
                           x;
                          };
                      fun state_23 (v_1, v_4) = 
                          { type = v_1;
                              x = v_4;
                           x;
                          };
                      fun state_21 v_1 = 
                          { type = v_1;
                           zero_t;
                          };
                      fun state_25 (v_1, v_0) = 
                          { type = v_1;
                              x = v_0;
                           x;
                          };
                      fun state_127 (v_1, v_4) = 
                          { b = v_4;
                              type = v_1;
                           zero_t;
                          };
                      fun state_100 v_0 = 
                          { a = v_0;
                           a;
                          };
                      fun state_69 (v_1, v_0) = 
                          { type = v_1;
                              x = v_0;
                           x;
                          };
                      fun state_5 (v_1, v_0) = 
                          { type = v_1;
                              x = v_0;
                           x;
                          };
                      fun state_1717 (v_3, v_1, v_10, v_4)
                          =
                             if ((integer::compare (v_10, lit_11)) == EQUAL)
                                  (state_118 (v_1, v_4));
                             else (state_180 v_3);fi;

                      fun state_1450 (v_3, v_1, v_0, v_2)
                          =
                          if ((integer::compare (v_2, lit_11)) == EQUAL)
                               (state_15 (v_1, v_0));
                          else (state_180 v_3);fi;

                      fun state_1279 (v_3, v_1, v_10) = (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                  (state_148 v_1);
                             else (state_180 v_3);fi);

                      fun state_1192 (v_3, v_1, v_10) = (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                  (state_140 v_1);
                             else (state_180 v_3);fi);
                      fun state_1021 (v_3, v_1, v_10) = (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                  (state_157 v_1);
                             else (state_180 v_3);fi);
                      fun state_916 (v_3, v_10, v_4) = (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                  (state_109 v_4);
                             else (state_180 v_3);fi);
                      fun state_820 (v_3, v_1, v_0, v_2) = (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                  (state_43 v_1);
                             else (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                     (state_47 (v_1, v_0));
                                else (state_180 v_3);fi);fi);
                      fun state_731 (v_3, v_1, v_0, v_2) = (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                  (state_83 v_1);
                             else (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                     (state_87 (v_1, v_0));
                                else (state_180 v_3);fi);fi);
                      fun state_642 (v_3, v_1, v_0, v_2) = (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                  (state_21 v_1);
                             else (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                     (state_25 (v_1, v_0));
                                else (state_180 v_3);fi);fi);
                      fun state_555 (v_3, v_1, v_10, v_4) = (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                  (state_127 (v_1, v_4));
                             else (state_180 v_3);fi);
                      fun state_441 (v_3, v_0, v_10) = (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                  (state_100 v_0);
                             else (state_180 v_3);fi);
                      fun state_354 (v_3, v_1, v_0, v_2) = (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                  (state_69 (v_1, v_0));
                             else (state_180 v_3);fi);
                      fun state_181 (v_3, v_1, v_0, v_2) = (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                  (state_5 (v_1, v_0));
                             else (state_180 v_3);fi);
                      fun state_1451 (v_3, v_1, v_0, v_4) = 
                          (case v_4   
                            t::LITERAL v_2 => state_1450 (v_3, v_1, v_0, v_2);
                           _ => state_180 v_3; esac
                          );
                      fun state_182 (v_3, v_1, v_0, v_4) = 
                          (case v_4   
                            t::LITERAL v_2 => state_181 (v_3, v_1, v_0, v_2);
                           _ => state_180 v_3; esac
                          );
                   
                     (case v_3   
                       t::ADD v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_0   
                            t::ADD v_10 => 
                            { my (v_7, v_9, v_13) = v_10;
                             
                               (case v_13   
                                 t::LITERAL v_12 => 
                                 (case v_4   
                                   t::LITERAL v_2 => 
                                   { a = v_9;
                                       type = v_1;
                                       type' = v_7;
                                       x = v_12;
                                       y = v_2;
                                    (if ((type == type'))
                                              (t::ADD (type, a, t::LITERAL (i::add (type, x, y))));
                                         else (state_181 (v_3, v_1, v_0, v_2));fi);
                                   };
                                  _ => state_180 v_3; esac
                                 );
                                _ => state_182 (v_3, v_1, v_0, v_4); esac
                               );
                            };
                           t::LABEXP v_10 => 
                            (case v_4   
                              t::LABEXP v_2 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::ADD (type, x, y));
                              };
                             t::LITERAL v_2 => state_181 (v_3, v_1, v_0, v_2);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                    
                               { type = v_1;
                                   x = v_4;
                                x;
                               };
                               else 
                               (case v_4   
                                 t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                         (state_5 (v_1, v_0));
                                    else 
                                    { type = v_1;
                                        x = v_10;
                                        y = v_2;
                                     t::LITERAL (i::add (type, x, y));
                                    };fi);
                                _ => state_180 v_3; esac
                               );fi);
                           _ => state_182 (v_3, v_1, v_0, v_4); esac
                          );
                       };
                      t::ADDT v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_0   
                            t::LABEXP v_10 => 
                            (case v_4   
                              t::LABEXP v_2 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::ADDT (type, x, y));
                              };
                             t::LITERAL v_2 => state_354 (v_3, v_1, v_0, v_2);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                    
                               { type = v_1;
                                   x = v_4;
                                x;
                               };
                               else 
                               (case v_4   
                                 t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                         (state_69 (v_1, v_0));
                                    else 
                                    { type = v_1;
                                        x = v_10;
                                        y = v_2;
                                     ((t::LITERAL (i::addt (type, x, y))) except OVERFLOW => expression; end 
);
                                    };fi);
                                _ => state_180 v_3; esac
                               );fi);
                           _ => 
                            (case v_4   
                              t::LITERAL v_2 => state_354 (v_3, v_1, v_0, v_2);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::BITWISEAND v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            (case v_0   
                              t::LABEXP v_10 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::BITWISEAND (type, x, y));
                              };
                             t::LITERAL v_10 => state_441 (v_3, v_0, v_10);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                    
                               { b = v_4;
                                b;
                               };
                               else 
                               (case v_0   
                                 t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                         (state_100 v_0);
                                    else 
                                    { type = v_1;
                                        x = v_10;
                                        y = v_2;
                                     t::LITERAL (i::bitwise_and (type, x, y));
                                    };fi);
                                _ => state_180 v_3; esac
                               );fi);
                           t::BITWISENOT v_2 => 
                            (case v_0   
                              t::LITERAL v_10 => state_441 (v_3, v_0, v_10);
                             t::BITWISENOT v_10 => 
                              { my (v_7, v_9) = v_10;
                               
                                 { my (v_6, v_8) = v_2;
                                  
                                    { a = v_9;
                                        b = v_8;
                                        type = v_1;
                                        type' = v_7;
                                        type'' = v_6;
                                     (if (((type == type') and (type' == type'')))
                                               (t::BITWISENOT (type, t::BITWISEOR (type, a, b)));
                                          else (state_180 v_3);fi);
                                    };
                                 };
                              };
                             _ => state_180 v_3; esac
                            );
                           _ => 
                            (case v_0   
                              t::LITERAL v_10 => state_441 (v_3, v_0, v_10);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::COND v_5 => 
                       { my (v_1, v_0, v_4, v_18) = v_5;
                        
                          (case v_0   
                            t::FALSE => 
                            { a = v_4;
                                b = v_18;
                                type = v_1;
                             b;
                            };
                           t::TRUE => 
                            { a = v_4;
                                b = v_18;
                                type = v_1;
                             a;
                            };
                           _ => state_180 v_3; esac
                          );
                       };
                      t::DIVS v_5 => 
                       { my (v_1, v_0, v_4, v_18) = v_5;
                        
                          (case v_18   
                            t::LABEXP v_17 => 
                            (case v_4   
                              t::LABEXP v_2 => 
                              { m = v_1;
                                  type = v_0;
                                  x = v_2;
                                  y = v_17;
                               t::LABEXP (t::DIVS (m, type, x, y));
                              };
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_17 => (if (((integer::compare (v_17, lit_16)) == EQUAL))
                                    
                               { a = v_4;
                                   m = v_1;
                                   type = v_0;
                                a;
                               };
                               else 
                               (case v_4   
                                 t::LITERAL v_2 => 
                                 { m = v_1;
                                     type = v_0;
                                     x = v_2;
                                     y = v_17;
                                  (if ((y != zero))
                                            (t::LITERAL (i::divs (dm m, type, x, y)));
                                       else (state_180 v_3);fi);
                                 };
                                _ => state_180 v_3; esac
                               );fi);
                           _ => state_180 v_3; esac
                          );
                       };
                      t::DIVT v_5 => 
                       { my (v_1, v_0, v_4, v_18) = v_5;
                        
                          (case v_18   
                            t::LABEXP v_17 => 
                            (case v_4   
                              t::LABEXP v_2 => 
                              { m = v_1;
                                  type = v_0;
                                  x = v_2;
                                  y = v_17;
                               t::LABEXP (t::DIVT (m, type, x, y));
                              };
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_17 => (if (((integer::compare (v_17, lit_16)) == EQUAL))
                                    
                               { a = v_4;
                                   m = v_1;
                                   type = v_0;
                                a;
                               };
                               else 
                               (case v_4   
                                 t::LITERAL v_2 => 
                                 { m = v_1;
                                     type = v_0;
                                     x = v_2;
                                     y = v_17;
                                  (if ((y != zero))
                                            (t::LITERAL (i::divt (dm m, type, x, y)));
                                       else (state_180 v_3);fi);
                                 };
                                _ => state_180 v_3; esac
                               );fi);
                           _ => state_180 v_3; esac
                          );
                       };
                      t::DIVU v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            (case v_0   
                              t::LABEXP v_10 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::DIVU (type, x, y));
                              };
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_2 => (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                    
                               { a = v_0;
                                   type = v_1;
                                a;
                               };
                               else 
                               (case v_0   
                                 t::LITERAL v_10 => 
                                 { type = v_1;
                                     x = v_10;
                                     y = v_2;
                                  (if ((y != zero))
                                            (t::LITERAL (i::divu (type, x, y)));
                                       else (state_180 v_3);fi);
                                 };
                                _ => state_180 v_3; esac
                               );fi);
                           _ => state_180 v_3; esac
                          );
                       };
                      t::BITWISEEQV v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            (case v_0   
                              t::LABEXP v_10 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::BITWISEEQV (type, x, y));
                              };
                             t::LITERAL v_10 => state_555 (v_3, v_1, v_10, v_4);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                    
                               { a = v_0;
                                   type = v_1;
                                zero_t;
                               };
                               else 
                               (case v_0   
                                 t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                         (state_127 (v_1, v_4));
                                    else 
                                    { type = v_1;
                                        x = v_10;
                                        y = v_2;
                                     t::LITERAL (i::eqvb (type, x, y));
                                    };fi);
                                _ => state_180 v_3; esac
                               );fi);
                           _ => 
                            (case v_0   
                              t::LITERAL v_10 => state_555 (v_3, v_1, v_10, v_4);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::MULS v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_0   
                            t::LABEXP v_10 => 
                            (case v_4   
                              t::LABEXP v_2 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::MULS (type, x, y));
                              };
                             t::LITERAL v_2 => state_642 (v_3, v_1, v_0, v_2);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                    
                               { type = v_1;
                                zero_t;
                               };
                               else (if (((integer::compare (v_10, lit_16)) == EQUAL))
                                       
                                  (case v_4   
                                    t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                            (state_21 v_1);
                                       else (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                               (state_23 (v_1, v_4));
                                          else (state_23 (v_1, v_4));fi);fi);
                                   _ => state_23 (v_1, v_4); esac
                                  );
                                  else 
                                  (case v_4   
                                    t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                            (state_21 v_1);
                                       else (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                               (state_25 (v_1, v_0));
                                          else 
                                          { type = v_1;
                                              x = v_10;
                                              y = v_2;
                                           t::LITERAL (i::muls (type, x, y));
                                          };fi);fi);
                                   _ => state_180 v_3; esac
                                  );fi);fi);
                           _ => 
                            (case v_4   
                              t::LITERAL v_2 => state_642 (v_3, v_1, v_0, v_2);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::MULT v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_0   
                            t::LABEXP v_10 => 
                            (case v_4   
                              t::LABEXP v_2 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::MULT (type, x, y));
                              };
                             t::LITERAL v_2 => state_731 (v_3, v_1, v_0, v_2);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                    
                               { type = v_1;
                                zero_t;
                               };
                               else (if (((integer::compare (v_10, lit_16)) == EQUAL))
                                       
                                  (case v_4   
                                    t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                            (state_83 v_1);
                                       else (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                               (state_85 (v_1, v_4));
                                          else (state_85 (v_1, v_4));fi);fi);
                                   _ => state_85 (v_1, v_4); esac
                                  );
                                  else 
                                  (case v_4   
                                    t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                            (state_83 v_1);
                                       else (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                               (state_87 (v_1, v_0));
                                          else 
                                          { type = v_1;
                                              x = v_10;
                                              y = v_2;
                                           ((t::LITERAL (i::mult (type, x, y))) except OVERFLOW => expression; end 
);
                                          };fi);fi);
                                   _ => state_180 v_3; esac
                                  );fi);fi);
                           _ => 
                            (case v_4   
                              t::LITERAL v_2 => state_731 (v_3, v_1, v_0, v_2);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::MULU v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_0   
                            t::LABEXP v_10 => 
                            (case v_4   
                              t::LABEXP v_2 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::MULU (type, x, y));
                              };
                             t::LITERAL v_2 => state_820 (v_3, v_1, v_0, v_2);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                    
                               { type = v_1;
                                zero_t;
                               };
                               else (if (((integer::compare (v_10, lit_16)) == EQUAL))
                                       
                                  (case v_4   
                                    t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                            (state_43 v_1);
                                       else (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                               (state_45 (v_1, v_4));
                                          else (state_45 (v_1, v_4));fi);fi);
                                   _ => state_45 (v_1, v_4); esac
                                  );
                                  else 
                                  (case v_4   
                                    t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                            (state_43 v_1);
                                       else (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                               (state_47 (v_1, v_0));
                                          else 
                                          { type = v_1;
                                              x = v_10;
                                              y = v_2;
                                           t::LITERAL (i::mulu (type, x, y));
                                          };fi);fi);
                                   _ => state_180 v_3; esac
                                  );fi);fi);
                           _ => 
                            (case v_4   
                              t::LITERAL v_2 => state_820 (v_3, v_1, v_0, v_2);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::NEGT v_5 => 
                       { my (v_1, v_0) = v_5;
                        
                          (case v_0   
                            t::LABEXP v_10 => 
                            { type = v_1;
                                x = v_10;
                             t::LABEXP (t::NEGT (type, x));
                            };
                           t::LITERAL v_10 => 
                            { type = v_1;
                                x = v_10;
                             ((t::LITERAL (i::negt (type, x))) except OVERFLOW => expression; end 
);
                            };
                           _ => state_180 v_3; esac
                          );
                       };
                      t::BITWISENOT v_5 => 
                       { my (v_1, v_0) = v_5;
                        
                          (case v_0   
                            t::LABEXP v_10 => 
                            { type = v_1;
                                x = v_10;
                             t::LABEXP (t::BITWISENOT (type, x));
                            };
                           t::LITERAL v_10 => 
                            { n = v_10;
                                type = v_1;
                             t::LITERAL (i::bitwise_not (type, n));
                            };
                           t::BITWISENOT v_10 => 
                            { my (v_7, v_9) = v_10;
                             
                               { a = v_9;
                                   type = v_1;
                                   type' = v_7;
                                (if ((type == type'))
                                          a;
                                     else (state_180 v_3);fi);
                               };
                            };
                           _ => state_180 v_3; esac
                          );
                       };
                      t::BITWISEOR v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            (case v_0   
                              t::LABEXP v_10 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::BITWISEOR (type, x, y));
                              };
                             t::LITERAL v_10 => state_916 (v_3, v_10, v_4);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                    
                               { a = v_0;
                                a;
                               };
                               else 
                               (case v_0   
                                 t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                         (state_109 v_4);
                                    else 
                                    { type = v_1;
                                        x = v_10;
                                        y = v_2;
                                     t::LITERAL (i::bitwise_or (type, x, y));
                                    };fi);
                                _ => state_180 v_3; esac
                               );fi);
                           t::BITWISENOT v_2 => 
                            (case v_0   
                              t::LITERAL v_10 => state_916 (v_3, v_10, v_4);
                             t::BITWISENOT v_10 => 
                              { my (v_7, v_9) = v_10;
                               
                                 { my (v_6, v_8) = v_2;
                                  
                                    { a = v_9;
                                        b = v_8;
                                        type = v_1;
                                        type' = v_7;
                                        type'' = v_6;
                                     (if (((type == type') and (type' == type'')))
                                               (t::BITWISENOT (type, t::BITWISEAND (type, a, b)));
                                          else (state_180 v_3);fi);
                                    };
                                 };
                              };
                             _ => state_180 v_3; esac
                            );
                           _ => 
                            (case v_0   
                              t::LITERAL v_10 => state_916 (v_3, v_10, v_4);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::REMS v_5 => 
                       { my (v_1, v_0, v_4, v_18) = v_5;
                        
                          (case v_18   
                            t::LABEXP v_17 => 
                            (case v_4   
                              t::LABEXP v_2 => 
                              { m = v_1;
                                  type = v_0;
                                  x = v_2;
                                  y = v_17;
                               t::LABEXP (t::REMS (m, type, x, y));
                              };
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_17 => (if (((integer::compare (v_17, lit_16)) == EQUAL))
                                    
                               { a = v_4;
                                   m = v_1;
                                   type = v_0;
                                zero_t;
                               };
                               else 
                               (case v_4   
                                 t::LITERAL v_2 => 
                                 { m = v_1;
                                     type = v_0;
                                     x = v_2;
                                     y = v_17;
                                  (if ((y != zero))
                                            (t::LITERAL (i::rems (dm m, type, x, y)));
                                       else (state_180 v_3);fi);
                                 };
                                _ => state_180 v_3; esac
                               );fi);
                           _ => state_180 v_3; esac
                          );
                       };
                      t::REMU v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            (case v_0   
                              t::LABEXP v_10 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::REMU (type, x, y));
                              };
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_2 => (if (((integer::compare (v_2, lit_16)) == EQUAL))
                                    
                               { a = v_0;
                                   type = v_1;
                                zero_t;
                               };
                               else 
                               (case v_0   
                                 t::LITERAL v_10 => 
                                 { type = v_1;
                                     x = v_10;
                                     y = v_2;
                                  (if ((y != zero))
                                            (t::LITERAL (i::remu (type, x, y)));
                                       else (state_180 v_3);fi);
                                 };
                                _ => state_180 v_3; esac
                               );fi);
                           _ => state_180 v_3; esac
                          );
                       };
                      t::LEFTSHIFT v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            (case v_0   
                              t::LABEXP v_10 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::LEFTSHIFT (type, x, y));
                              };
                             t::LITERAL v_10 => state_1021 (v_3, v_1, v_10);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                    
                               { a = v_0;
                                   type = v_1;
                                a;
                               };
                               else 
                               (case v_0   
                                 t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                         (state_157 v_1);
                                    else 
                                    { n = v_2;
                                        type = v_1;
                                     (if ((integer::(<=) (integer::from_int type, n)))
                                               (state_158 ());
                                          else 
                                          { type = v_1;
                                              x = v_10;
                                              y = v_2;
                                           t::LITERAL (i::sll_x (type, x, y));
                                          };fi);
                                    };fi);
                                _ => 
                                 { n = v_2;
                                     type = v_1;
                                  (if ((integer::(<=) (integer::from_int type, n)))
                                            (state_158 ());
                                       else (state_180 v_3);fi);
                                 }; esac
                               );fi);
                           _ => 
                            (case v_0   
                              t::LITERAL v_10 => state_1021 (v_3, v_1, v_10);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::RIGHTSHIFT v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            (case v_0   
                              t::LABEXP v_10 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::RIGHTSHIFT (type, x, y));
                              };
                             t::LITERAL v_10 => state_1192 (v_3, v_1, v_10);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                    
                               { a = v_0;
                                   type = v_1;
                                a;
                               };
                               else 
                               (case v_0   
                                 t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                         (state_140 v_1);
                                    else 
                                    { type = v_1;
                                        x = v_10;
                                        y = v_2;
                                     t::LITERAL (i::sra_x (type, x, y));
                                    };fi);
                                _ => state_180 v_3; esac
                               );fi);
                           _ => 
                            (case v_0   
                              t::LITERAL v_10 => state_1192 (v_3, v_1, v_10);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::RIGHTSHIFTU v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            (case v_0   
                              t::LABEXP v_10 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::RIGHTSHIFTU (type, x, y));
                              };
                             t::LITERAL v_10 => state_1279 (v_3, v_1, v_10);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                    
                               { a = v_0;
                                   type = v_1;
                                a;
                               };
                               else 
                               (case v_0   
                                 t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                         (state_148 v_1);
                                    else 
                                    { n = v_2;
                                        type = v_1;
                                     (if ((integer::(<=) (integer::from_int type, n)))
                                               (state_149 ());
                                          else 
                                          { type = v_1;
                                              x = v_10;
                                              y = v_2;
                                           t::LITERAL (i::srl_x (type, x, y));
                                          };fi);
                                    };fi);
                                _ => 
                                 { n = v_2;
                                     type = v_1;
                                  (if ((integer::(<=) (integer::from_int type, n)))
                                            (state_149 ());
                                       else (state_180 v_3);fi);
                                 }; esac
                               );fi);
                           _ => 
                            (case v_0   
                              t::LITERAL v_10 => state_1279 (v_3, v_1, v_10);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::SUB v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_0   
                            t::LABEXP v_10 => 
                            (case v_4   
                              t::LABEXP v_2 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::SUB (type, x, y));
                              };
                             t::LITERAL v_2 => state_1450 (v_3, v_1, v_0, v_2);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_10 => 
                            (case v_4   
                              t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                      (state_15 (v_1, v_0));
                                 else 
                                 { type = v_1;
                                     x = v_10;
                                     y = v_2;
                                  t::LITERAL (i::sub (type, x, y));
                                 };fi);
                             t::SUB v_2 => 
                              { my (v_6, v_8, v_14) = v_2;
                               (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                         
                                    (case v_8   
                                      t::LITERAL v_15 => (if (((integer::compare (v_15, lit_11)) == EQUAL))
                                              
                                         { a = v_14;
                                             type = v_1;
                                             type' = v_6;
                                          (if ((type == type'))
                                                    a;
                                               else (state_180 v_3);fi);
                                         };
                                         else (state_180 v_3);fi);
                                     _ => state_180 v_3; esac
                                    );
                                    else (state_180 v_3);fi);
                              };
                             _ => state_180 v_3; esac
                            );
                           t::SUB v_10 => 
                            { my (v_7, v_9, v_13) = v_10;
                             
                               (case v_13   
                                 t::LITERAL v_12 => 
                                 (case v_4   
                                   t::LITERAL v_2 => 
                                   { a = v_9;
                                       type = v_1;
                                       type' = v_7;
                                       x = v_12;
                                       y = v_2;
                                    (if ((type == type'))
                                              (t::SUB (type, a, t::LITERAL (i::add (type, x, y))));
                                         else (state_1450 (v_3, v_1, v_0, v_2));fi);
                                   };
                                  _ => state_180 v_3; esac
                                 );
                                _ => state_1451 (v_3, v_1, v_0, v_4); esac
                               );
                            };
                           _ => state_1451 (v_3, v_1, v_0, v_4); esac
                          );
                       };
                      t::SUBT v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            (case v_0   
                              t::LABEXP v_10 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::SUBT (type, x, y));
                              };
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                    
                               { a = v_0;
                                   type = v_1;
                                a;
                               };
                               else 
                               (case v_0   
                                 t::LITERAL v_10 => 
                                 { type = v_1;
                                     x = v_10;
                                     y = v_2;
                                  ((t::LITERAL (i::subt (type, x, y))) except OVERFLOW => expression; end 
);
                                 };
                                _ => state_180 v_3; esac
                               );fi);
                           _ => state_180 v_3; esac
                          );
                       };
                      t::SIGNEXTEND v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            { e = v_4;
                                type = v_1;
                                type' = v_0;
                             (if ((type == type'))
                                       (state_165 e);
                                  else 
                                  { type = v_1;
                                      type' = v_0;
                                      x = v_2;
                                   t::LABEXP (t::SIGNEXTEND (type, type', x));
                                  };fi);
                            };
                           t::LITERAL v_2 => 
                            { e = v_4;
                                type = v_1;
                                type' = v_0;
                             (if ((type == type'))
                                       (state_165 e);
                                  else 
                                  { n = v_2;
                                      type = v_1;
                                      type' = v_0;
                                   t::LITERAL (i::sx (type, type', n));
                                  };fi);
                            };
                           t::LOAD v_2 => 
                            { type = v_1;
                                type' = v_0;
                             expression;
                            };
                           _ => 
                            { e = v_4;
                                type = v_1;
                                type' = v_0;
                             (if ((type == type'))
                                       (state_165 e);
                                  else (state_180 v_3);fi);
                            }; esac
                          );
                       };
                      t::BITWISEXOR v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          (case v_4   
                            t::LABEXP v_2 => 
                            (case v_0   
                              t::LABEXP v_10 => 
                              { type = v_1;
                                  x = v_10;
                                  y = v_2;
                               t::LABEXP (t::BITWISEXOR (type, x, y));
                              };
                             t::LITERAL v_10 => state_1717 (v_3, v_1, v_10, v_4);
                             _ => state_180 v_3; esac
                            );
                           t::LITERAL v_2 => (if (((integer::compare (v_2, lit_11)) == EQUAL))
                                    
                               { a = v_0;
                                   type = v_1;
                                a;
                               };
                               else 
                               (case v_0   
                                 t::LITERAL v_10 => (if (((integer::compare (v_10, lit_11)) == EQUAL))
                                         (state_118 (v_1, v_4));
                                    else 
                                    { type = v_1;
                                        x = v_10;
                                        y = v_2;
                                     t::LITERAL (i::bitwise_xor (type, x, y));
                                    };fi);
                                _ => state_180 v_3; esac
                               );fi);
                           t::BITWISENOT v_2 => 
                            (case v_0   
                              t::LITERAL v_10 => state_1717 (v_3, v_1, v_10, v_4);
                             t::BITWISENOT v_10 => 
                              { my (v_7, v_9) = v_10;
                               
                                 { my (v_6, v_8) = v_2;
                                  
                                    { a = v_9;
                                        b = v_8;
                                        type = v_1;
                                        type' = v_7;
                                        type'' = v_6;
                                     (if (((type == type') and (type' == type'')))
                                               (t::BITWISENOT (type, t::BITWISEXOR (type, a, b)));
                                          else (state_180 v_3);fi);
                                    };
                                 };
                              };
                             _ => state_180 v_3; esac
                            );
                           _ => 
                            (case v_0   
                              t::LITERAL v_10 => state_1717 (v_3, v_1, v_10, v_4);
                             _ => state_180 v_3; esac
                            ); esac
                          );
                       };
                      t::ZEROEXTEND v_5 => 
                       { my (v_1, v_0, v_4) = v_5;
                        
                          { e = v_4;
                              type = v_1;
                              type' = v_0;
                           (if ((type == type'))
                                     e;
                                else 
                                (case v_4   
                                  t::LABEXP v_2 => 
                                  { type = v_1;
                                      type' = v_0;
                                      x = v_2;
                                   t::LABEXP (t::ZEROEXTEND (type, type', x));
                                  };
                                 t::LITERAL v_2 => 
                                  { n = v_2;
                                      type = v_1;
                                      type' = v_0;
                                   t::LITERAL (i::zx (type, type', n));
                                  };
                                 _ => state_180 v_3; esac
                                );fi);
                          };
                       };
                      _ => state_180 v_3; esac
                     );
                  }
           also
           fun sim_statement ===> (t::IF (t::TRUE, yes, no)) => yes;
              sim_statement ===> (t::IF (t::FALSE, yes, no)) => no;
              sim_statement ===> (t::SEQ [x]) => x;
              sim_statement ===> s => s; end 
           also
           fun sim_f p_0 p_1 = 
               { v_29 = (p_0, p_1);
                   fun state_8 (v_19, v_20) = 
                       { my ===> = v_19;
                           expression = v_20;
                        expression;
                       };
                
                  { my (v_19, v_20) = v_29;
                   
                     (case v_20   
                       t::CVTF2F v_26 => 
                       { my (v_22, v_25, v_27) = v_26;
                        
                          { my ===> = v_19;
                              e = v_27;
                              type = v_22;
                              type' = v_25;
                           (if ((type == type'))
                                     e;
                                else (state_8 (v_19, v_20));fi);
                          };
                       };
                      t::FCOND v_26 => 
                       { my (v_22, v_25, v_27, v_28) = v_26;
                        
                          (case v_25   
                            t::FALSE => 
                            { my ===> = v_19;
                                no = v_28;
                                type = v_22;
                                yes = v_27;
                             no;
                            };
                           t::TRUE => 
                            { my ===> = v_19;
                                no = v_28;
                                type = v_22;
                                yes = v_27;
                             yes;
                            };
                           _ => state_8 (v_19, v_20); esac
                          );
                       };
                      t::FNEG v_26 => 
                       { my (v_22, v_25) = v_26;
                        
                          (case v_25   
                            t::FNEG v_24 => 
                            { my (v_21, v_23) = v_24;
                             
                               { my ===> = v_19;
                                   e = v_23;
                                   type = v_22;
                                   type' = v_21;
                                (if ((type == type'))
                                          e;
                                     else (state_8 (v_19, v_20));fi);
                               };
                            };
                           _ => state_8 (v_19, v_20); esac
                          );
                       };
                      _ => state_8 (v_19, v_20); esac
                     );
                  };
               }
           also
           fun cc FALSE => t::FALSE;
              cc TRUE => t::TRUE; end 
           also
           fun sim_cc ===> (t::CMP (type, t::EQ, t::LITERAL x, t::LITERAL y)) => cc (i::eq (type, x, y));
		sim_cc ===> (t::CMP (type, t::NE, t::LITERAL x, t::LITERAL y)) => cc (i::ne (type, x, y));
		sim_cc ===> (t::CMP (type, t::GT, t::LITERAL x, t::LITERAL y)) => cc (i::gt (type, x, y));
		sim_cc ===> (t::CMP (type, t::GE, t::LITERAL x, t::LITERAL y)) => cc (i::ge (type, x, y));
		sim_cc ===> (t::CMP (type, t::LT, t::LITERAL x, t::LITERAL y)) => cc (i::lt (type, x, y));
		sim_cc ===> (t::CMP (type, t::LE, t::LITERAL x, t::LITERAL y)) => cc (i::le (type, x, y));
		sim_cc ===> (t::CMP (type, t::GTU, t::LITERAL x, t::LITERAL y)) => cc (i::gtu (type, x, y));
		sim_cc ===> (t::CMP (type, t::LTU, t::LITERAL x, t::LITERAL y)) => cc (i::ltu (type, x, y));
		sim_cc ===> (t::CMP (type, t::GEU, t::LITERAL x, t::LITERAL y)) => cc (i::geu (type, x, y));
		sim_cc ===> (t::CMP (type, t::LEU, t::LITERAL x, t::LITERAL y)) => cc (i::leu (type, x, y));
		sim_cc ===> (t::AND (t::TRUE, x)) => x;
		sim_cc ===> (t::AND (x, t::TRUE)) => x;
		sim_cc ===> (t::AND (t::FALSE, x)) => t::FALSE;
		sim_cc ===> (t::AND (x, t::FALSE)) => t::FALSE;
		sim_cc ===> (t::OR (t::FALSE, x)) => x;
		sim_cc ===> (t::OR (x, t::FALSE)) => x;
		sim_cc ===> (t::OR (t::TRUE, x)) => t::TRUE;
		sim_cc ===> (t::OR (x, t::TRUE)) => t::TRUE;
		sim_cc ===> (t::XOR (t::TRUE, t::TRUE)) => t::FALSE;
		sim_cc ===> (t::XOR (t::FALSE, x)) => x;
		sim_cc ===> (t::XOR (x, t::FALSE)) => x;
		sim_cc ===> (t::XOR (t::TRUE, x)) => t::NOT x;
		sim_cc ===> (t::XOR (x, t::TRUE)) => t::NOT x;
		sim_cc ===> (t::EQV (t::FALSE, t::FALSE)) => t::TRUE;
		sim_cc ===> (t::EQV (t::TRUE, x)) => x;
		sim_cc ===> (t::EQV (x, t::TRUE)) => x;
		sim_cc ===> (t::EQV (t::FALSE, x)) => t::NOT x;
		sim_cc ===> (t::EQV (x, t::FALSE)) => t::NOT x;
		sim_cc ===> expression => expression;
           end;

        r::rewrite { int_expression=>sim, float_expression=>sim_f, bool_expression=>sim_cc, statement=>sim_statement };
       };
};








##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################

