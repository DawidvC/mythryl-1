
# Generate the <architecture>Props generic.
# This package extracts information about the instruction set.


generic package MDLGenInstructionProps (RTLComp:  Mdl_Rtl_Comp) : Mdl_Gen_Module2 =
pkg

   package RTLComp  = RTLComp
   package Comp     = RTLComp::Comp
   package raw_syntax      = Comp::raw_syntax
   package m        = RTLComp::lowcode_types

   use raw_syntax Comp::Util

   typeDefs = 
       @@@ ["/* ilkify instructions */",
          "enum kind = IK_JUMP   /* branches, including returns */",
          "  | IK_NOP    /* no ops */",
          "  | IK_INSTRUCTION  /* normal instructions */",
          "  | IK_COPY   /* parallel copy */",
          "  | IK_CALL   /* call instructions */",
          "  | IK_PHI    /* A phi node (SSA) */",
          "  | IK_SINK   /* A sink node (SSA) */",
          "  | IK_SOURCE /* A source node (SSA) */",
          "",
          "enum target = LABELLED of label::label",
          "                | FALLTHROUGH" ,
          "                | ESCAPES",
          "",
          "exception NegateCondtional",
          ""
         ]

   funDefs = 
       @@@ ["fun get_notes (i::NOTE { instruction, note } ) =",
          "    let my (instruction, notes) = get_notes instruction in (instruction, note . notes) end",
          "  | get_notes instruction = (instruction,[])",
          "fun annotate (instruction, note) = i::NOTE { instruction, note }"
         ]
 
   fun gen compiled_rtls =
   let md      = RTLComp::md compiled_rtls

       #  name of the package/api 
       strName = Comp::strname md "Props"  
       sigName = "Instruction_Properties"

       #  The instructions 
       instructions = Comp::instructions md

       #  Arguments to the instruction generic 
       args =
           ["I:  "$Comp::signame md "INSTR"
           ]

       #  Function that determines the type of an instruction 
       instrKind  = DUMMYfun "instrKind"

       #  Functions for dealing with parallel copies 
       moveInstr  = DUMMYfun "moveInstr"
       moveTmpR   = DUMMYfun "moveTmpR"
       moveDstSrc = DUMMYfun "moveDstSrc"

       nop        = DUMMYfun "nop"
       jump       = DUMMYfun "jump"

       loadImmed  = DUMMYfun "loadImmed"

       branchTargets = DUMMYfun "branchTargets"
       setTargets    = DUMMYfun "setTargets"

       negateConditional  = DUMMYfun "negateConditional"
       immedRange    = DUMMYfun "immedRange"
       loadOperand   = DUMMYfun "loadOperand"

       eqOpn         = DUMMYfun "eqOpn"
       hashOpn       = DUMMYfun "hashOpn"

       fun mkDefUse (cellKind as CELLdecl { id, ... } ) = 
       let my { get, decl } = m::getOpnd
                [("int", m::IGNORE),
                 ("int32", m::IGNORE),
                 ("intinf", m::IGNORE),
                 ("word", m::IGNORE),
                 ("word32", m::IGNORE),
                 ("label", m::IGNORE),
                 ("cells", m::MULTI "x"),
                 ("cell", m::CONV "x"),
                 ("cellset", m::MULTI("c::cellSet::get C."$id$" x")),
                 ("operand", m::IGNORE) #  XXX 
                ]

           fun defUse (x, expression, L) = 
               if m::ofCellKind (expression, cellKind) then THE (get (x, expression, L))
               else NULL

       in  RTLComp::mkDefUseQuery compiled_rtls 
             { name="defUse"$id,
              decls=[decl],
              args=[["instruction"]],
              namedArguments=FALSE,
              def=defUse,
              use=defUse
             }
       end

       defUseFuns = SEQdecl (Comp::forallUserCellKinds md mkDefUse)
       defUse     = Comp::mkQueryByCellKind md "defUse"

       #  The generic 
       strBody = 
           [@@@ ["package i  = I",
               "package c  = i::C",
               "package le = label_expression",
               "",
               "exception NEGATE_CONDITIONAL",
               ""
              ],
            Comp::errorHandler md "Props",
            typeDefs,
            instrKind,
            moveInstr,
            moveTmpR,
            moveDstSrc,
            nop,
            jump,
            loadImmed,
            branchTargets,
            setTargets,
            negateConditional,
            immedRange,
            loadOperand,
            eqOpn,
            hashOpn,
            defUseFuns,
            defUse,
            funDefs
           ]

   in  Comp::codegen md "instruction/Props2"
         [Comp::make_generic md "Props2" args sigName strBody
         ]
   end
end
