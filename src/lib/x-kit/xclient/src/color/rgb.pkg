## rgb.pkg
#
# RGB colors 
#
# See also:
#     src/lib/x-kit/xclient/src/color/hue-saturation-value.pkg
#     src/lib/x-kit/xclient/src/color/rgb8.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6

stipulate
    include rw_float_vector;							# Enable   vec[i]   and   vec[i] := f   notations.
    #
    package fv  = rw_float_vector;						# float_vector			is from   src/lib/std/float-vector.pkg
herein

    package rgb: Rgb {								# Rgb		is from   src/lib/x-kit/xclient/src/color/rgb.api

	# We represent an RGB color value by a
	# packed 3-vector of 64-bit floats holding
	# red, green, blue in that order:
	# 
	Rgb = fv::Rw_Vector;							# This should really be a read-only floatvector, but currently they are not actually a packed type -- See src/lib/std/src/float64-vector.pkg XXX BUGGO FIXME.
	    #									# Since we export Rgb as an opaque type, the difference is not critical.


	fun from_floats (red, green, blue)					# Should do some sort of validation (restriction to [0,1) interval). What exception should we throw? Or should we silently truncate?  XXX BUGGO FIXME.
	    =
	    {	rgb = fv::make_rw_vector (3, 0.0);

		rgb[0] := red;							# Eventually we'll probably want to suppress index checking here for speed, using unsafe:: operations or whatever. XXX BUGGO FIXME.
		rgb[1] := green;
		rgb[2] := blue;

		rgb;
	    };

	fun to_floats rgb
	    =
	    (rgb[0], rgb[1], rgb[2]);						# Eventually we'll probably want to suppress index checking here for speed, using unsafe:: operations or whatever. XXX BUGGO FIXME.



        fun from_unts  (red, green, blue)
	    =
	    from_floats
              ( unt_to_float  red,
                unt_to_float  green,
                unt_to_float  blue
	      )
	    where
		fun unt_to_float u
		    =
		    {   i  = unt::to_int     u;
			f  = float::from_int  i;

			f  = f // 65535.0;		# Our unts run 0 -> 65535.

			f;
		    };
	      end;		
	

        fun to_unts  rgb
	    =
	    {   (to_floats  rgb)
		    ->
		    (red, green, blue);

		( float_to_unt  red,
		  float_to_unt  green,
		  float_to_unt  blue
		);
	    }
	    where
		fun float_to_unt f
		    =
		    {   f = (f < 0.0) ?? 0.0 :: f;
			f = (f > 1.0) ?? 1.0 :: f;

			f = f * 65535.99;		# Our unts run 0 -> 65535.

			unt::from_int (float::truncate f);
		    };
	    end;


	fun same (a, b)
	    =  float::(====) (a[0], b[0])
            && float::(====) (a[1], b[1])
            && float::(====) (a[2], b[2])
	    ;


	# Ensure that all color components
	# are in 0.0 -> 1.0 inclusive:
	#
	fun normalize rgb
	    =
	    {   (to_floats rgb) -> (red, green, blue);

		if (red   >= 0.0   &&   red   <= 0.0
                &&  green >= 0.0   &&   green <= 0.0
                &&  blue  >= 0.0   &&   blue  <= 0.0
		)
		    rgb;
		else
		    red   =  red   >= 0.0  ??  red    ::  0.0;
		    red   =  red   <= 1.0  ??  red    ::  1.0;
		    #
		    green =  green >= 0.0  ??  green  ::  0.0;
		    green =  green <= 1.0  ??  green  ::  1.0;
		    #
		    blue  =  blue  >= 0.0  ??  blue   ::  0.0;
		    blue  =  blue  <= 1.0  ??  blue   ::  1.0;
		    #
		    from_floats (red, green, blue);
		fi;
	    };

        fun from_name  colorname
	    =
	    from_floats  (x11_color_name::to_floats  colorname);


	# Predefine a few common colors for convenience:
	#
	black   = from_floats (0.0, 0.0, 0.0);
	white   = from_floats (1.0, 1.0, 1.0);
	red     = from_floats (1.0, 0.0, 0.0);
	green   = from_floats (0.0, 1.0, 0.0);
	blue    = from_floats (0.0, 0.0, 1.0);
	cyan    = from_floats (0.0, 1.0, 1.0);
	magenta = from_floats (1.0, 0.0, 1.0);
	yellow  = from_floats (1.0, 1.0, 0.0);
    };
end;

## COPYRIGHT (c) 1994 by AT&T Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
