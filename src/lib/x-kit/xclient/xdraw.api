## xdraw.api
#
# This api brings together all of the
# drawing-related types and operations.
#
# For Gansner+Reppy's original 1993 drawing docs
# see Chapter 5 (page 16) in their eXene library manual:
#
#     http:://mythryl.org/pub/exene/1993-lib.ps
#

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6






###            "Classes struggle,
###             some classes triumph,
###             others are eliminated."
###
###                  -- Mao Zedong


# This api is implemented in
#
#     src/lib/x-kit/xclient/xdraw.pkg
#
# with the bulk of the code coming from:
#
#     src/lib/x-kit/xclient/src/window/draw.pkg

api Xdraw {

    package xc:  Xcore;			# Xcore		is from   src/lib/x-kit/xclient/xcore.api
    package xg:  Xgeometry;		# Xgeometry	is from   src/lib/x-kit/xclient/xgeometry.api

    Window;
    Rw_Pixmap;
    Ro_Pixmap;
    Font;
    Rgb8;

    Plane_Mask = PLANEMASK  Unt;	# This may belong elsewhere

    Pen;

    # Graphics functions -- the sixteen
    # possible functions of two boolean inputs:
    #
    Graphics_Op
      = OP_CLR			#  0 
      | OP_AND			#  src AND dst 
      | OP_AND_NOT		#  src AND NOT dst 
      | OP_COPY			#  src 
      | OP_AND_INVERTED		#  NOT src AND dst 
      | OP_NOP			#  Dst 
      | OP_XOR			#  src XOR dst 
      | OP_OR			#  src OR dst 
      | OP_NOR			#  NOT src AND NOT dst 
      | OP_EQUIV		#  NOT src XOR dst 
      | OP_NOT			#  NOT dst 
      | OP_OR_NOT		#  src OR NOT dst 
      | OP_COPY_NOT		#  NOT src 
      | OP_OR_INVERTED		#  NOT src OR dst 
      | OP_NAND			#  NOT src OR NOT dst 
      | OP_SET			#  1 
      ;

     Pen_Trait
      = FUNCTION  Graphics_Op
      | PLANE_MASK  Plane_Mask
      | FOREGROUND  Rgb8
      | BACKGROUND  Rgb8
      | LINE_WIDTH  Int
      | LINE_STYLE_SOLID
      | LINE_STYLE_ON_OFF_DASH
      | LINE_STYLE_DOUBLE_DASH
      | CAP_STYLE_NOT_LAST
      | CAP_STYLE_BUTT
      | CAP_STYLE_ROUND
      | CAP_STYLE_PROJECTING
      | JOIN_STYLE_MITER
      | JOIN_STYLE_ROUND
      | JOIN_STYLE_BEVEL
      | FILL_STYLE_SOLID
      | FILL_STYLE_TILED
      | FILL_STYLE_STIPPLED
      | FILL_STYLE_OPAQUE_STIPPLED
      | FILL_RULE_EVEN_ODD
      | FILL_RULE_WINDING
      | ARC_MODE_CHORD
      | ARC_MODE_PIE_SLICE
      | CLIP_BY_CHILDREN
      | INCLUDE_INFERIORS
      | RO_PIXMAP  Ro_Pixmap
      | STIPPLE  Ro_Pixmap
      | STIPPLE_ORIGIN  xg::Point
      | CLIP_ORIGIN     xg::Point
      | CLIP_MASK_NONE
      | CLIP_MASK  Ro_Pixmap
      | CLIP_MASK_UNSORTED_BOXES  List( xg::Box )
      | CLIP_MASK_YSORTED_BOXES   List( xg::Box )
      | CLIP_MASK_YXSORTED_BOXES  List( xg::Box )
      | CLIP_MASK_YXBANDED_BOXES  List( xg::Box )
      | DASH_OFFSET Int
      | DASH_FIXED  Int
      | DASH_LIST   List( Int )
      ;

    exception BAD_PEN_TRAIT;

    make_pen:	   List(Pen_Trait) -> Pen;
    clone_pen:   (Pen, List(Pen_Trait)) -> Pen;		# Make a copy of given pen, with given differences.
    default_pen:   Pen;



    # Destinations for drawing operations.
    
    #    "A drawable [window] is an abstract type that collects
    #	  together windows, [pixmaps] and overlays."
    #
    #	      -- p20 http:://mythryl.org/pub/exene/1993-lib.ps
    #            (Reppy + Gansner's 1993 eXene library manual.)
    #
    Drawable_Window;

    drawable_of_rw_pixmap:  Rw_Pixmap -> Drawable_Window;
    drawable_of_window:        Window -> Drawable_Window;

    depth_of_drawable:   Drawable_Window -> Int;



    # Drawing operations.
    #
    #     "The semantics are essentially the same as in xlib,
    #      although the names are different.
    #
    #     "Functions that draw ``paths'' treat their List(Point)
    #      argument as a list of relative coordinates.  The
    #      first element specifies an absolute coordinate and
    #      each successive element specifies an offset relative
    #      to the previous coordinate.
    #
    #     "All other operations use absolute coordinates.. 
    #
    #     "The exception BAD_DRAW_PARAMETER is raised if the
    #      argument to a drawable is invalid."
    #
    #	      -- p20 http:://mythryl.org/pub/exene/1993-lib.ps
    #            (Reppy + Gansner's 1993 eXene library manual.)
    #
    exception BAD_DRAW_PARAMETER;

    draw_points:      Drawable_Window -> Pen -> List( xg::Point ) -> Void;
    draw_point_path:  Drawable_Window -> Pen -> List( xg::Point ) -> Void;
    draw_point:       Drawable_Window -> Pen ->       xg::Point   -> Void;

    draw_lines:    Drawable_Window -> Pen -> List( xg::Point ) -> Void;
    draw_path:     Drawable_Window -> Pen -> List( xg::Point ) -> Void;
    draw_segs:     Drawable_Window -> Pen -> List( xg::Line  ) -> Void;
    draw_seg:      Drawable_Window -> Pen ->       xg::Line    -> Void;

    Shape = COMPLEX_SHAPE | NONCONVEX_SHAPE | CONVEX_SHAPE;

    fill_polygon:  Drawable_Window -> Pen -> { verts: List( xg::Point ), shape:  Shape } -> Void;
    fill_path:     Drawable_Window -> Pen -> { path:  List( xg::Point ), shape:  Shape } -> Void;

    draw_boxes:    Drawable_Window -> Pen -> List( xg::Box ) -> Void;
    draw_box:      Drawable_Window -> Pen ->       xg::Box   -> Void;
    fill_boxes:    Drawable_Window -> Pen -> List( xg::Box ) -> Void;
    fill_box:      Drawable_Window -> Pen ->       xg::Box   -> Void;

    draw_arcs:     Drawable_Window -> Pen -> List( xg::Arc ) -> Void;
    draw_arc:      Drawable_Window -> Pen ->       xg::Arc   -> Void;
    fill_arcs:     Drawable_Window -> Pen -> List( xg::Arc ) -> Void;
    fill_arc:      Drawable_Window -> Pen ->       xg::Arc   -> Void;

    draw_circle:   Drawable_Window -> Pen -> { center:  xg::Point, rad:  Int } -> Void;
    fill_circle:   Drawable_Window -> Pen -> { center:  xg::Point, rad:  Int } -> Void;


    # Polytext drawing.
    #
    #    "There are two styles of text drawing: opaque and transparent.
    #
    #    "Opaque text [...] is drawn by first filling in the bounding box
    #     with the background color and then drawing the text with the
    #     foreground color.  The function and fill-style of the pen are
    #     ignored, replaced in effect by OP_COPY and pen::FILL_STYLE_SOLID
    #
    #    "In transparent text [...] the pixels corresponding to bits set in
    #     a character's glyph are drawn using the foreground color in the
    #     context of the other relevant pen values, while the other pixels
    #     are unmodified.
    #
    #    "The [draw_transparent_text] function provides a user-level batching
    #     mechanism for drawing multiple strings of the same line with possible
    #     intervening font changes or horizontal shifts."
    #
    #	      -- p22-3 http:://mythryl.org/pub/exene/1993-lib.ps
    #            (Reppy + Gansner's 1993 eXene library manual.)
    #
    package t: api {
	Text = TEXT (Font, List(Text_Item))
	#
	also
	Text_Item
	  = FONT         (Font, List(Text_Item))
	  | STRING        String
	  | BLANK_PIXELS  Int			# Skip this many pixels before next STRING.
	  ;
    };
	
    draw_opaque_string:        Drawable_Window -> Pen -> Font -> (xg::Point, String ) -> Void;
    draw_transparent_string:   Drawable_Window -> Pen -> Font -> (xg::Point, String ) -> Void;
    draw_transparent_text:     Drawable_Window -> Pen ->         (xg::Point, t::Text) -> Void;



    #    "The X-protocol provides two operations for copying a rectangle
    #     from one drawable to another: CopyArea and CopyPlane.
    #
    #    "To further complicate things, these operations can have replied
    #     in the form of GraphicsExpose and NoExpose X-events.  When the
    #     source drawable is a window, then it is possible that some or
    #     all of the source rectangle might be obscured; in this case,
    #     the portions of the destination that did not get updated need
    #     to be redrawn.
    #
    #    "In [x-kit] we provde three versions of four operations, which
    #     are fully synchronous."
    #
    #	      -- p21 http:://mythryl.org/pub/exene/1993-lib.ps
    #            (Reppy + Gansner's 1993 eXene library manual.)

    # Sources for bitblt operations 
    #
    Draw_From
      = FROM_WINDOW          Window
      | FROM_RW_PIXMAP    Rw_Pixmap
      | FROM_RO_PIXMAP    Ro_Pixmap
      ;

    exception DEPTH_MISMATCH;
    exception BAD_PLANE;

    # *_mailop versions
    # =================
    #
    # The synchronous (non- _mailop) versions of the
    # blt operations can be slow because they have
    # wait for a reply from the X server.  If the
    # X server is remote, this can involve a network
    # round-trip of tens or even hundreds of milliseconds.
    # Even if the X server is local, it can involve two
    # or more slow process switches.
    #
    # We address this problem by providing asynchronous
    # _mailop versions of these operations:
    #
    #     pixel_blt_mailop
    #     bitblt_mailop
    #     plane_blt_mailop
    #     copy_blt_mailop
    #
    # These return mailops which will evaluate to the
    # result boxlists when the relevant X events arrive
    # from the X server:  By doing a do_mailop() on them
    # in a throwaway thread, or by doing a select() on
    # themspinning off

    pixel_blt
	:  Drawable_Window
        -> Pen
        -> { from:      Draw_From,
             from_box:  xg::Box,
             to_pos:    xg::Point
	   }
        -> List( xg::Box )
        ;
	# Provides CopyArea semantics.
	# Raises DEPTH_MISMATCH if 'to' and 'from'
        # drawables do not have same depth.
	#
	# Return value is list of rectangles on
	# 'to' which need to be redrawn because
	# the corresponding 'from' areas were
	# obscured. (This can only happen when
	# 'from' is an onscreen window.)
	#
	# If 'from' is smaller than the 'to' box,
	# the unspecified pixels are zero-filled
	# -- color0.

    pixel_blt_mailop
	:  Drawable_Window
        -> Pen
        -> { from:       Draw_From,
             from_box:   xg::Box,
             to_pos:     xg::Point
	   }
        ->  threadkit::Mailop( List( xg::Box ) )
        ;
	# pixel_blt with asynchronous resultlist
	# handling for performance:  Do a select()
	# or do_mailop() on the result to obtain
	# and redraw the resulting boxlist. list.
	#
	# If 'to' is known not to be a Window
	# (i.e., if it is an Pixmap
	# or Ro_Pixmap) -- or if it is known
	# not to be obscured -- then the returned
	# mailop can simply be discarded, since
	# is the obtained boxlist will always be
	# empty.

    bitblt
	:  Drawable_Window
        -> Pen
        -> { from:      Draw_From,
             from_box:  xg::Box,
             to_pos:    xg::Point
	   }
        ->  List( xg::Box )
        ;
	# Same as plane_blt with 'plane' == 0.

    bitblt_mailop
	:  Drawable_Window
        -> Pen
        -> { from:       Draw_From,
             from_box:   xg::Box,
             to_pos:     xg::Point
	   }
        -> threadkit::Mailop( List( xg::Box ) )
        ;
	# bit_blt with asynchronous resultlist
	# handling for performance:  Do a select()
	# or do_mailop() on the result to obtain
	# and redraw the resulting boxlist. list.
	#
	# If 'to' is known not to be a Window
	# (i.e., if it is a Rw_Pixmap
	# or Ro_Pixmap) -- or if it is known
	# not to be obscured -- then the returned
	# mailop can simply be discarded, since
	# is the obtained boxlist will always be
	# empty.

    plane_blt
	:  Drawable_Window
        -> Pen
        -> { from:      Draw_From,
             from_box:  xg::Box,
             to_pos:    xg::Point,
             plane:     Int
	   }
        -> List( xg::Box )
        ;   #
	    # Provides CopyPlane semantics;
	    # Raises BAD_PLANE if 'plane' is not
	    # a legal bitplan in 'from'.
	    #
	    # Return value is list of rectangles on
	    # 'to' which need to be redrawn because
	    # the corresponding 'from' areas were
	    # obscured. This can only happen when
	    # 'from' is an onscreen Sindow: if it
	    # is an Rw_Pixmap or Ro_Pixmap
	    # the return list will always be empty.
	    #
	    # If 'from' is smaller than the 'to' box,
	    # the unspecified pixels are zero-filled
	    # -- color0.

    plane_blt_mailop
	:  Drawable_Window
        -> Pen
        -> { from:      Draw_From,
             from_box:  xg::Box,
             to_pos:    xg::Point,
             plane:     Int
	   }
        -> threadkit::Mailop( List( xg::Box ) )
        ;
	# plane_blt with asynchronous resultlist
	# handling for performance:  Do a select()
	# or do_mailop() on the result to obtain
	# and redraw the resulting boxlist. list.
	#
	# If 'to' is known not to be a Window
	# (i.e., if it is a Rw_Pixmap
	# or Ro_Pixmap) -- or if it is known
	# not to be obscured -- then the returned
	# mailop can simply be discarded, since
	# is the obtained boxlist will always be
	# empty.


    texture_blt:  Drawable_Window -> Pen -> { from:  Ro_Pixmap, to_pos:  xg::Point } -> Void;
    tile_blt:     Drawable_Window -> Pen -> { from:  Ro_Pixmap, to_pos:  xg::Point } -> Void;
	#
	# tile_blt is a bitblt where 'from'
	# is all of a depth-1 Ro_Pixmap. 

    copy_blt
	:  Drawable_Window
        -> Pen
        -> { to_pos:    xg::Point,
             from_box:  xg::Box
           }
	-> List( xg::Box )
        ;
	# A pixel_blt where 'to' and 'from'
	# are the same drawable.

    copy_blt_mailop
	:  Drawable_Window
        -> Pen
	-> { to_pos:   xg::Point,
             from_box: xg::Box
           }
	-> threadkit::Mailop( List( xg::Box ) )
        ;
	# copy_blt with asynchronous resultlist
	# handling for performance:  Do a select()
	# or do_mailop() on the result to obtain
	# and redraw the resulting boxlist. list.
	#
	# If 'to' is known not to be a Window
	# (i.e., if it is a Rw_Pixmap
	# or Ro_Pixmap) -- or if it is known
	# not to be obscured -- then the returned
	# mailop can simply be discarded, since
	# is the obtained boxlist will always be
	# empty.


    #     "Clear a rectangular region (or all) of a drawable.
    #
    #     "For a window, these functions will with the background color;
    #      For an offscreen window, they fill with 0.
    #
    #     "If the retangle's width is zero, then the cleared rectangle
    #      is extended to the right edge of the drawable, and if the
    #      height is zero, then the cleared rectangle is extended to
    #      the bottom of the drawable."
    #
    #	      -- p21 http:://mythryl.org/pub/exene/1993-lib.ps
    #            (Reppy + Gansner's 1993 eXene library manual.)
    #
    clear_box:       Drawable_Window -> xg::Box -> Void;
    clear_drawable:  Drawable_Window -> Void;			# Clear entire drawable.


    # Create a locked version of the given window.
    # This provides exclusive access to its drawing
    # surface (and that of its descendents) during
    # OP_XOR rubber-banding.  Usually used in conjunction
    # with unbuffered drawing (below).	
    # 
    # The first result is the locked window on which to draw,
    # the second is the unlock operation for the drawable.
    # By convention, the overlay drawable is unbuffered.
    #
    # This call appears to be unused at present, but see
    # much related-looking "overlay" code in
    #     src/lib/x-kit/xclient/src/window/draw-imp.pkg
    # this may be a half-implemented idea.
    #
    make_locked_window
	:
        Window
        ->
        { drawable:  Drawable_Window,
          release:   Void -> Void
        };

    make_unbuffered_drawable:  Drawable_Window -> Drawable_Window;
	#
	# An unbuffered drawable is used to provide immediate
	# graphical response to user interaction.  (Currently
	# this is implemented by transparently adding a flush
	# command after each draw command.)
	#
	# This call is used in many of the src/lib/x-kit/tut
        # programs, for an example in:
	#
	#     src/lib/x-kit/tut/ml-viewer/util/get-mouse-selection.pkg

};			# api Drawing


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
