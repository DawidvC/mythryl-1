## risc-register-allocation-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# This generic factors out the machine independent part of the register
# allocator.  It performs integer and floating register allocation.
# This works well for RISC machines; but not applicable to x86.



###             "We are going to set up a great computer program.
###              We are going to introduce the many variables now
###              known to be operative in the world around industrial
###              economics. We will store all the basic data in the
###              machine's memory bank; where and how much of each
###              class of the physical resources; where are the people,
###              where are the trendings and important needs of world man?"
###
###                             -- Buckminster Fuller, 1965


# We are invoked from:
#
#     src/lib/compiler/codegen/ppc/ppc-codegen.pkg
#     src/lib/compiler/codegen/sun/sparc-codegen.pkg

generic package risc_register_allocation_g (

    package instruction_set:          Instruction_Set;			# Instruction_Set				is from   src/lib/compiler/lower/instruction/instruction-set.api

    package asm
	:
	Instruction_Emitter						# Instruction_Emitter				is from   src/lib/compiler/lower/emit/instruction-emitter.api
	where instruction_set == instruction_set; 

    package control_flow_graph
	:
        Control_Flow_Graph						# Control_Flow_Graph				is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where instruction_set == instruction_set
	also  pseudo_op == asm::instruction_stream::pseudo_op;

    package instruction_properties
	:
	Instruction_Properties						# Instruction_Properties			is from   src/lib/compiler/lower/instruction/instruction-properties.api
	where instruction_set == instruction_set;

    package rewrite
	:
        Rewrite_Instructions						# Rewrite_Instructions				is from   src/lib/compiler/lower/instruction/rewrite.api
	where instruction_set == instruction_set;

    package spill_instr
	:
	Architecture_Specific_Spill_Instructions			# Architecture_Specific_Spill_Instructions	is from   src/lib/compiler/lower/reg-alloc/arch-spill-instruction.api
	where instruction_set == instruction_set;

       # Spilling heuristics determines which node should be spilled.
       # You can use Chaitin, ChowHenessey, or one of your own.

    package spill_heuristic:  Register_Allocation_Spill_Heuristics;	# Register_Allocation_Spill_Heuristics		is from   src/lib/compiler/lower/reg-alloc/ra-spill-heuristic.api

       # The Spill module figures out the strategies for inserting
       # spill code.  You can use register_allocation_spilling_g,
       # or register_allocator_spilling_with_renaming_g,
       # or write your own if you are feeling adventurous.

    package spill
	:
	Register_Allocation_Spilling					# Register_Allocation_Spilling			is from   src/lib/compiler/lower/reg-alloc/register-allocation-spilling.api
	where instruction_set == instruction_set;

    architecture_name:  String;						# "ppc", "sparc" or "x86".

    # Is this a pure instruction?
    # 
    pure:  instruction_set::Instruction -> Bool;


    Spill_Operand_Kind = SPILL_LOC | CONST_VAL;
    Spill_Info;						# User-defined abstract type 

     # Called before register allocation begins:
     #
     before_ra:  control_flow_graph::Control_Flow_Graph -> Spill_Info;

     package int:
     api {

	 avail:      List( cells_basis::Cell ); #  list of available registers 
	 dedicated:  List( cells_basis::Cell ); #  list of registers that are dedicated 

	 spill_loc
	     :
	     { info: Spill_Info,
	       an  :Ref( note::Notes ),
	       cell: cells_basis::Cell, #  spilled cell 
	       id  :register_allocation_graph::Logical_Spill_Id
	     } 
	     ->
             { operand:  instruction_set::Ea,
	       kind:  Spill_Operand_Kind
	     };

	#  Mode for RA optimizations 
	 mode:  register_allocation_graph::Mode;
     };

     package float:
     api {

	 avail:      List( cells_basis::Cell ); #  list of available registers 
	 dedicated:  List( cells_basis::Cell ); #  list of registers that are dedicated 

	 spill_loc
	     :   
	     ( Spill_Info, Ref( note::Notes ), register_allocation_graph::Logical_Spill_Id) 
	     ->
             instruction_set::Ea;

	#  Mode for RA optimizations 
	 mode:  register_allocation_graph::Mode;
     };
)

: (weak)  Control_Flow_Graph_Optimization					# Control_Flow_Graph_Optimization	is from   src/lib/compiler/lower/flowgraph/cfg-optimization.api

{
    package control_flow_graph = control_flow_graph;
    package instruction_set    = control_flow_graph::instruction_set;
    package cells              = instruction_set::cells;

    package i   = control_flow_graph::instruction_set;
    package p   = instruction_properties;
    package c   = cells;
    package g   = register_allocation_graph;					# register_allocation_graph		is from   src/lib/compiler/lower/reg-alloc/ra-graph.pkg
    package cb  = cells_basis;							# cells_basis				is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    # The generic register allocator:
    #
    package ra
	=
	register_allocator_g							# register_allocator_g			is from   src/lib/compiler/lower/reg-alloc/register-allocator-g.pkg
	( spill_heuristic ) 
	 # ( chow_hennessy_spill_heuristic ) 
	 (cluster_register_allocation_g (					# cluster_register_allocation_g		is from   src/lib/compiler/lower/reg-alloc/cluster-register-allocation-g.pkg
	    package flowgraph = control_flow_graph;
	    package asm = asm;
	    package instruction_properties = instruction_properties;
	    package spill = spill;
	   )
	 );

    name = "risc_register_allocation";

    #  Counters for register allocation:
    # 
    ra_int_spills_count    = low_code_control::make_counter ("ra_int_spills_count", "RA int spill count");
    ra_int_reloads_count   = low_code_control::make_counter ("ra_int_reloads_count", "RA int reload count");
    ra_int_renames_count   = low_code_control::make_counter ("ra_int_renames_count", "RA int rename count");
    ra_float_spills_count  = low_code_control::make_counter ("ra_float_spills_count", "RA float spill count");
    ra_float_reloads_count = low_code_control::make_counter ("ra_float_reloads_count", "RA float reload count");
    ra_float_renames_count = low_code_control::make_counter ("ra_float_renames_count", "RA float rename count");

    fun inc c
	=
	c :=  *c + 1;

    fun error msg
	=
	lowcode_error_message::error("RISC RA " + architecture_name, msg);


    # Make arithmetic non-overflow trapping.
    # This makes sure that if we happen to run the compiler for a long
    # period of time overflowing counters will not crash the compiler. 
    #
    fun x + y =  unt::to_int_x (unt::(+) (unt::from_int x, unt::from_int y));
    fun x - y =  unt::to_int_x (unt::(-) (unt::from_int x, unt::from_int y));

    # get_reg specialized to integer and floating point registers 
    #
    fun is_dedicated (len, arr, others) r
	= 
	(r < len and rw_vector::get (arr, r))
	or
	list::exists
	   (fn d =  r == d)
	   others;

    fun mark (arr, _, [], others)
            =>
            others;

	mark (arr, len, r ! rs, others)
            =>
            {   r = cells_basis::register_id r;

		if (r >= len )
                     mark (arr, len, rs, r ! others);
		else
                     rw_vector::set (arr, r, TRUE);
                     mark (arr, len, rs, others);
                fi;
	    };
    end;

    fun annotate ([], instruction)
	    =>
	    instruction;

	annotate (note ! notes, instruction)
	    =>
	    annotate (notes, i::NOTE { note, instruction } );
    end;

    stipulate

	(c::cell_range cells_basis::REGISTER)
	    ->	
	    { low, high };

	arr = rw_vector::make_rw_vector (high+1, FALSE);

	others = mark (arr, high+1, int::dedicated, []);

    herein

	package gr
	    =
	    get_reg_g (					# get_reg_g		is from   src/lib/compiler/lower/reg-alloc/getreg-g.pkg
		first=low;
		n_regs=high-low+1; 
		available=map cells_basis::register_id int::avail;
	    );

	my dedicated_r:  Int -> Bool
                      = is_dedicated (high+1, arr, others);
    end;

    fun get_reg_loc (s, an, cell, ra::FRAME loc)
	    => 
	    int::spill_loc { info=>s, an, cell, id=>loc };

	get_reg_loc _
	    =>
	    error "getRegLoc";
    end;

    fun copy ((rds as [d], rss as [s]), i::COPY { size_in_bits, ... } )
	    => 
	    if (cb::same_color (d, s) ) []; 
	    else [i::COPY { kind => cb::REGISTER, size_in_bits, dst=>rds, src=>rss, tmp=>NULL } ];
            fi;

	copy((rds, rss), i::COPY { tmp, size_in_bits, ... } )
	    => 
	    [i::COPY { kind => cb::REGISTER, size_in_bits, dst=>rds, src=>rss, tmp } ];

	copy _ => error "copy: COPY?";
    end;

    fun spill_r s { notes, kill=>TRUE, reg, spill_loc, instruction }
	    => 
	    if (pure instruction )
                 { code => [], prohibitions => [], new_reg=>NULL };
	    else
                 spill_r s { notes, kill=>FALSE,
		             spill_loc,
		             reg, instruction
                            };
            fi;

	spill_r s { notes=>an, kill, reg, spill_loc, instruction }
	    =>
	    spill ([], instruction)
            where

	        fun annotate ([], instruction)
                        =>
                        instruction;

		    annotate (note ! notes, instruction)
			=>
			annotate (notes, i::NOTE { note, instruction } );
                end;

		# Preserve annotation on instruction:
		#	
		fun spill (instr_an, i::NOTE { note, instruction } )
			=>
			spill (note ! instr_an, instruction);

		    spill (instr_an, i::DEAD { regs, spilled } )
			=> 
			{ code => [annotate
			  (instr_an, 
			   i::DEAD { regs=>c::rmv_reg (reg, regs), 
				   spilled=>c::add_reg (reg, spilled) } )],
			  prohibitions => [], 
			  new_reg=>NULL
			};

		    spill (instr_an, i::LIVE _) => error "spillR: LIVE";
		    spill(_, i::COPY _) => error "spillR: COPY";

		    spill (instr_an, i::BASE_INSTRUCTION _)
			=>
			{   my { operand=>spill_loc: i::Ea, kind } = get_reg_loc (s, an, reg, spill_loc);

			    inc ra_int_spills_count;
			    spill_instr::spill cb::REGISTER (instruction, reg, spill_loc);
			};
		end;
	    end;
    end; 

    # Spill src at the spill location for reg i.e. spillLoc:
    #
    fun spill_reg s { notes=>an, src, reg, spill_loc }
	=
	{   inc ra_int_spills_count;
	    .code (spill_instr::spill_to_ea cb::REGISTER (src, .operand (get_reg_loc (s, an, reg, spill_loc))));
	};


    # Spill the temporary associated with a copy:
    #
    fun spill_tmp s { notes=>an, reg, copy=>i::COPY { kind => cb::REGISTER, size_in_bits, tmp, dst, src }, spill_loc }
	=>
	{
	   loc = .operand (get_reg_loc (s, an, reg, spill_loc));

	    inc ra_int_spills_count;
	    i::COPY { kind => cb::REGISTER, size_in_bits, tmp=>THE loc, dst, src };
	};

	spill_tmp _ _
            =>
            error "spillTmp";
    end;

    # Rename integer register:
    #
    fun rename_r { from_src, to_src, instruction }
	= 
	{   inc ra_int_renames_count;
	    instruction' = rewrite::rewrite_use (instruction, from_src, to_src);
	    { code => [instruction'], prohibitions => [], new_reg => THE to_src };
	};

    # Reload integer register:
    #
    fun reload_r s { notes=>an, reg, spill_loc, instruction }
	=
	reload ([], instruction)
	where
	    fun reload (instr_an, i::NOTE { note, instruction } )
		    =>
		    reload (note ! instr_an, instruction);

		reload (instr_an, i::LIVE { regs, spilled } )
		    => 
		    { code => [i::LIVE { regs=>c::rmv_reg (reg, regs), spilled=>c::add_reg (reg, spilled) } ],
		      prohibitions => [],
		      new_reg=>NULL
		    };

	       reload (_, i::DEAD _) => error "reloadR: DEAD";
	       reload (_, i::COPY _) => error "reloadR: COPY";

	       reload (instr_an, instruction as i::BASE_INSTRUCTION _)
		   =>
		   {
		       spill_loc = .operand (get_reg_loc (s, an, reg, spill_loc));

		       inc ra_int_reloads_count;
		       spill_instr::reload cb::REGISTER (instruction, reg, spill_loc);
		   };
	    end;
	end;

    # Reload the register dst from the spill
    # location for reg, i.e. spillLoc:
    #
    fun reload_reg s { notes=>an, reg, dst, spill_loc }
	= 
	{   inc ra_int_reloads_count;
	    .code (spill_instr::reload_from_ea cb::REGISTER (dst, .operand (get_reg_loc (s, an, reg, spill_loc))));
	};


   # -------------------------------------------------------------
    stipulate 

	my { low, high } = c::cell_range cells_basis::FLOAT_REGISTER;
	arr = rw_vector::make_rw_vector (high+1, FALSE);
	others = mark (arr, high+1, float::dedicated, []);

    herein

	package fr
	    =
	    get_reg_g (				# get_reg_g		is from   src/lib/compiler/lower/reg-alloc/getreg-g.pkg
		first=low;
		n_regs=high-low+1; 
		available=map cells_basis::register_id float::avail;
	    );

	my dedicated_f:  Int -> Bool = is_dedicated (high+1, arr, others);
    end;

    fun get_freg_loc (s, an, ra::FRAME loc) => float::spill_loc (s, an, loc);
	get_freg_loc _ => error "getFregLoc";
    end;

    fun fcopy ((rds as [d], rss as [s]), i::COPY { size_in_bits, ... } )
	    => 
	    if (cb::same_color (d, s))  []; 
	    else                        [i::COPY { kind => cb::FLOAT_REGISTER, size_in_bits, dst=>rds, src=>rss, tmp=>NULL } ];
            fi;

	fcopy((rds, rss), i::COPY { tmp, size_in_bits, ... } )
	    => 
	    [i::COPY { kind => cb::FLOAT_REGISTER, size_in_bits, dst=>rds, src=>rss, tmp } ];

	fcopy _
	    =>
	    error "fcopy: COPY?";
    end;

    # Spill floating point register:
    #
    fun spill_f s { notes, kill=>TRUE, reg, spill_loc, instruction }
	    => 
	    if (pure instruction)
		 { code => [], prohibitions => [], new_reg => NULL };
	    else spill_f s { notes, kill=>FALSE,
			 spill_loc, reg, instruction };
	    fi;

	spill_f s { notes=>an, kill, reg, spill_loc, instruction }
	    =>
	    spill ([], instruction)
            where

		# Preserve annotation on instruction:
		#
		fun spill (instr_an, i::NOTE { note, instruction } )
                        =>
                        spill (note ! instr_an, instruction);

		    spill (instr_an, i::DEAD { regs, spilled } )
                        => 
		        { code=> [ annotate
				   (instr_an, 
				    i::DEAD { regs=>c::rmv_freg (reg, regs), 
					    spilled=>c::add_freg (reg, spilled) } )
                                 ],
			  prohibitions => [], 
			  new_reg=>NULL
                        };

		    spill (instr_an, i::LIVE _) => error "spillF: LIVE";
		    spill(        _, i::COPY _) => error "spillF: COPY";

		    spill (instr_an, i::BASE_INSTRUCTION _)
                        => 
		        {   inc ra_float_spills_count;
			    spill_instr::spill cb::FLOAT_REGISTER (instruction, reg, get_freg_loc (s, an, spill_loc));
                        };
		end;
	    end;
    end;

    # Spill src at the spill location  for reg, i.e. spillLoc:
    #
    fun spill_freg s { notes=>an, reg, src, spill_loc }
	= 
	{   inc ra_float_spills_count;

	    .code (spill_instr::spill_to_ea cb::FLOAT_REGISTER (src, get_freg_loc (s, an, spill_loc)));
	};

    # Spill the temporary associated with a copy:
    #
    fun spill_ftmp s { notes=>an, reg, copy=>i::COPY { kind => cb::FLOAT_REGISTER, size_in_bits, tmp, dst, src }, spill_loc }
	    =>
	    {   loc = get_freg_loc (s, an, spill_loc);

		inc ra_float_spills_count;

		i::COPY { kind => cb::FLOAT_REGISTER, size_in_bits, tmp=>THE loc, dst, src };
	    };

	spill_ftmp _ _
	    =>
	    error "spillFtmp";
    end;


    # Rename floating point register:
    #
    fun rename_f { from_src, to_src, instruction }
	=
	{   inc ra_float_renames_count;
	    instruction' = rewrite::frewrite_use (instruction, from_src, to_src);

	    { code => [instruction'], prohibitions => [], new_reg=>THE to_src };
	};

    # Reload floating point register:
    #
    fun reload_f s { notes=>an, reg, spill_loc, instruction }
	=
	reload([], instruction)
        where
	    fun reload (instr_an, i::NOTE { note, instruction } )
		    =>
		    reload (note ! instr_an, instruction);

		reload (instr_an, i::LIVE { regs, spilled } )
		    => 
		    { code => [i::LIVE { regs=>c::rmv_freg (reg, regs), spilled=>c::add_freg (reg, spilled) } ],
		      prohibitions => [],
		      new_reg=>NULL
		    };

		reload (_, i::DEAD _) =>  error "reloadF: DEAD";
		reload (_, i::COPY _) =>  error "reloadF: COPY";

		reload (instr_an, instruction as i::BASE_INSTRUCTION _)
		    => 
		    {   inc ra_float_reloads_count;
			spill_instr::reload cb::FLOAT_REGISTER (instruction, reg, get_freg_loc (s, an, spill_loc));
		    };
	    end;
	end;

    # Reload register dst from the
    # spill location for reg, i.e. spill_loc 
    #
    fun reload_freg s { notes=>an, reg, dst, spill_loc }
	=
	{   inc ra_float_reloads_count;
	    .code (spill_instr::reload_from_ea cb::FLOAT_REGISTER (dst, get_freg_loc (s, an, spill_loc)));
	};

    kr = length int::avail;
    kf = length float::avail;

    fun parameters sss
	=
	[ { cellkind       => cells_basis::REGISTER,
	    getreg         => gr::getreg,
	    spill          => spill_r sss,
	    spill_src      => spill_reg sss,
	    spill_copy_tmp => spill_tmp sss,
	    reload         => reload_r sss,
	    reload_dst     => reload_reg sss,
	    rename_src     => rename_r,
	    k              => kr,
	    dedicated      => dedicated_r,
	    copy_instr     => copy,
	    spill_prohibitions     => [],
	    mem_regs       => [],
	    mode           => int::mode
	  } : ra::Register_Allocation_Client,

	  { cellkind       => cells_basis::FLOAT_REGISTER,
	    getreg         => fr::getreg,
	    spill          => spill_f sss,
	    spill_src      => spill_freg sss,
	    spill_copy_tmp => spill_ftmp sss,
	    reload         => reload_f sss,
	    reload_dst     => reload_freg sss,
	    rename_src     => rename_f,
	    k              => kf,
	    dedicated      => dedicated_f,
	    copy_instr     => fcopy,
	    spill_prohibitions     => [],
	    mem_regs       => [],
	    mode           => float::mode
	  } : ra::Register_Allocation_Client
	] : List ra::Register_Allocation_Client;

    fun run cluster
	=
	{   sss = before_ra cluster;

	    gr::reset();
	    fr::reset();

	    ra::ra (parameters sss) cluster;
	};

};

