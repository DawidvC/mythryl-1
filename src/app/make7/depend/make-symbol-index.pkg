## make-symbol-index.pkg -- dump listing mapping toplevel symbols to the files that define them.
## author: Matthias Blume (blume@research.bell-labs.com)

# Compiled by:
#     src/app/make7/Make7.make6

# For a given library (makefile), generate a
# .INDEX file for human consumption which lists
# for each top-level symbol (which in practice
# means for each package or generic) the file
# which defines it.
#
#
#
# RUNTIME CONTEXT:
# 
#     Our make_symbol_index is (only) invoked from
#
#         src/app/make7/semant/source-file-collection.pkg
#
#     a trivial (pointless?) wrapper which in turn
#     is (only) invoked from
#
#         src/app/make7/semant/make7-grammar-actions.pkg



api Make_Symbol_Index {

    make_symbol_index
        :
        ( make7_state::Make7_State,
	  anchor_dictionary::File,

 	  { imports:   symbol_map::Map( inter_library_dependency_graph::Oh7_View ),
	    source_files: Y,
	    localdefs: symbol_map::Map( bare_o7::Bare_O7 ),
	    sublibraries: List( ( anchor_dictionary::File,
                                  inter_library_dependency_graph::Library
                                  , anchor_dictionary::Renamings		# MUSTDIE
                                 ) ),
	    sources: Z,
	    required_privileges: D
	  }
        )
	->
        Void;
};



package make_symbol_index: Make_Symbol_Index {			# Make_Symbol_Index	is from   src/app/make7/depend/make-symbol-index.pkg

    fun make_symbol_index (

            make7_state: make7_state::Make7_State,
            group,
            {   imports,
                source_files,
                localdefs,
                sublibraries,
                sources,
                required_privileges
            }
        )
        =
	if   (make7_defaults::generate_index.get ())
            

             #  Get name of file to create: 
	     index_file_name
		 =
		 filename_policy::make_indexfile_name
		     make7_state.make7_session.filename_policy
		     group;

	     fun localinfo i
		 =
		 ( anchor_dictionary::os_string_relative  (bare_o7::sourcepath  i),
		   FALSE
		 );

								# make7_state			is from   src/app/make7/main/make7-state.pkg
								# error_message			is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
								# inter_library_dependency_graph	is from   src/app/make7/depend/inter-library-dependency-graph.pkg
								# symbol_map			is from   src/app/make7/util/symbolmap.pkg
								# filename_policy		is from   src/app/make7/main/filename-policy.pkg
								# anchor_dictionary		is from   src/app/make7/paths/anchor-dictionary.pkg
	     fun globalinfo (symbol, _)
		 =
		 find sublibraries
                 where
		     fun find []
			     =>
			     error_message::impossible "make-symbol-index.pkg: globalinfo not found";

			 find ( ( g,
                                  inter_library_dependency_graph::LIBRARY { o7_views_by_name, ... }
                                  , _	# MUSTDIE
                              ) ! r)
			     =>
			     if   (symbol_map::contains_key (o7_views_by_name, symbol))
			         
				  (anchor_dictionary::describe g, TRUE);
			     else
				  find r;
                             fi;

			 find (_ ! r)
			     =>
			     find r;
                     end;
		 end;

	     local_index    =   symbol_map::map        localinfo   localdefs;
	     global_index   =   symbol_map::keyed_map  globalinfo  imports;

	     fun combine ((local_symbol, _), (global_symbol, _))
		 =
		 (   cat [local_symbol, " (overrides ", global_symbol, ")"],
		     FALSE
		 );

	     combined_index
		 =
		 symbol_map::union_with
		     combine
		     (local_index, global_index);

	     # Generate one line like
	     #
	     #     api Posix_Signal: $ROOT/src/lib/std/stdlib.make6

	     fun oneline (symbol, (s, f), result_list)
		 =
		 (   cat [   symbol::name_space_to_string (symbol::name_space symbol),
				" ",
				symbol::name symbol,
				": ",
				s,
				"\n"
			    ],
		     f
		 )
		 ! result_list;

								# symbol		is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
								# symbol_map		is from   src/app/make7/util/symbolmap.pkg
								# list_mergesort	is from   src/lib/src/list-mergesort.pkg

	     line_list
                 =
                 symbol_map::keyed_fold_left oneline  []  combined_index;

	     fun gt ((_,        TRUE ), (_, FALSE))   =>   TRUE;
	 	 gt ((_,        FALSE), (_, TRUE ))   =>   FALSE;
		 gt ((x: String,    _), (y, _    ))   =>   x > y;
             end;

	     sorted_list
                 =
                 list_mergesort::sort  gt  line_list;


								# autodir	is from   src/app/make7/util/autodir.pkg
								# file	is from   src/lib/std/src/unix/posix-file.pkg
								# winix		is from   src/lib/std/winix.pkg
								# safely	is from   src/lib/std/safely.pkg

	     safely::do
                 { open_it  =>   .{ autodir::open_text_output  index_file_name; },
		   close_it =>   file::close_output,
		   cleanup  =>   fn _ =  winix::file::remove_file  index_file_name
		 }
		.{   fun out x
			 =
			 file::write (#stream, x);

		     fun bottomhalf [] => ();
			 bottomhalf ((x, _) ! r)   =>   { out x;   bottomhalf r;};
                     end;

		     fun tophalf [] => ();
			 tophalf ((x, FALSE) ! r)   =>   { out x;   tophalf r;};
			 tophalf ((x, TRUE ) ! r)
			     =>
			     {   out "--------------IMPORTS--------------\n";
				 out x;
				 bottomhalf r;
			     };
                     end;

		     out "---------LOCAL DEFINITIONS---------\n";
		     tophalf sorted_list;
		 };
	fi;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 2001 by Lucent Technologies, Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
