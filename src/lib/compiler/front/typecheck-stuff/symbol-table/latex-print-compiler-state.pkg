## latex-print-compiler-state.pkg

# Compiled by:
#     src/lib/compiler/core.make6

# This is a clone of unparse-compiler-state.pkg
# specialized to produce LaTeX output intended to be
# run through Hevea to produce online HTML docs of
# our interfaces.
#
# We expect to be invoked primarily by   
#     latex_dump_api_reference  filename
# in
#     src/app/make7/main/make7-g.pkg
# 

package latex_print_compiler_state:  Latex_Print_Compiler_State {		# Latex_Print_Compiler_State	is from   src/lib/compiler/front/typecheck-stuff/symbol-table/latex-print-compiler-state.api

					# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
					# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
					# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
					# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
					# symbol_table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
					# symbol_table_entry		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg

    package pp = prettyprint;		# prettyprint			is from   src/lib/prettyprint/src/prettyprint.pkg
					# prettyprint_symbol_table	is from   src/lib/compiler/front/typecheck-stuff/symbol-table/prettyprint-symbol-table.pkg

    fun latex_print_compiler_table_set
            { directory:       String,
              filename_prefix: String,
              filename_suffix: String
            }
	    (compiler_table_set:  compiler_table_set::Compiler_Table_Set)
	=
	{
	    include  compiler_table_set;

            stipulate

		prettyprint_filename
		    =
		    directory + "/"   +
		    filename_prefix   +
		    "global-symbols"  +
		    filename_suffix;

	    herein
		pp  = prettyprinter::make_file_prettyprinter  prettyprint_filename;
	        pps = pp.stream;
	    end;

	    latex_print_symbol_table::latex_print_symbol_table
                pps
		{ directory,
                  filename_prefix,
		  filename_suffix
		}
		(symbol_table_part  compiler_table_set);

            pp::newline  pps;
            pp::newline  pps;
            pp::newline  pps;
	    pp::string   pps   "% This file generated by latex_print_compiler_state_to_file  from";           pp::newline  pps;
            pp::string   pps   "%    src/lib/compiler/front/typecheck-stuff/symbol-table/latex-print-compiler-state.pkg";
            pp::newline  pps;

	    pp.flush ();
	    pp.close ();



            stipulate

		prettyprint_filename
		    =
		    directory + "/"   +
		    filename_prefix   +
		    "linking-table"   +
		    filename_suffix;

	    herein
		pp  = prettyprinter::make_file_prettyprinter  prettyprint_filename;
	        pps = pp.stream;
	    end;

	    latex_print_symbol_table::latex_print_symbol_table
                pps
		{ directory,
                  filename_prefix,
		  filename_suffix
		}
		(symbol_table_part  compiler_table_set);

            pp::newline pps;
            pp::newline pps;
            pp::newline pps;
            pp::string  pps   "Linking table";            pp::newline pps;
            pp::string  pps   "-------------";            pp::newline pps;
            pp::newline pps;
            pp::string  pps   "(unimplemented)";          pp::newline pps;

	    pp::string   pps   "% This file generated by latex_print_compiler_state_to_file  from";           pp::newline  pps;
            pp::string   pps   "%    src/lib/compiler/front/typecheck-stuff/symbol-table/latex-print-compiler-state.pkg";
            pp::newline  pps;

	    pp.flush ();
	    pp.close ();


            stipulate

		prettyprint_filename
		    =
		    directory + "/"   +
		    filename_prefix   +
		    "inlining-table"  +
		    filename_suffix;

	    herein

		pp  = prettyprinter::make_file_prettyprinter  prettyprint_filename;
	        pps = pp.stream;

	    end;

            pp::newline pps;
            pp::newline pps;
            pp::newline pps;
            pp::string  pps   "Inlining table";           pp::newline pps;
            pp::string  pps   "--------------";           pp::newline pps;
            pp::newline pps;
            pp::string  pps   "(unimplemented)";          pp::newline pps;

	    pp::string   pps   "% This file generated by latex_print_compiler_state_to_file  from";          pp::newline  pps;
            pp::string   pps   "%    src/lib/compiler/front/typecheck-stuff/symbol-table/latex-print-compiler-state.pkg";
            pp::newline  pps;

	    pp.flush ();
	    pp.close ();
        };


    fun latex_print_compiler_table_set_reference
            { directory:       String,
              filename_prefix: String,
              filename_suffix: String
            }
	    (compiler_table_set_reference:   compiler_state::Compiler_Table_Set_Reference)
	=
	latex_print_compiler_table_set
            { directory,
              filename_prefix,
              filename_suffix
            }
            (compiler_table_set_reference.get ());


    fun latex_print_compiler_state
            { directory,
              filename_prefix: String,
              filename_suffix: String
            }
	=
	{
#           pp::string   pps   "Combined (top_level + base) compiler tableset";            pp::newline  pps;
#	    pp::string   pps   "=============================================";            pp::newline  pps;

	    # In practice virtually everything is in the top_level
	    # symbol table, and the end user just cares	what is
	    # available, not whether it arrived via base, pervasive
	    # or whatever, so for routine production documentation
	    # we just print out the combined symboltable:
	    #
            latex_print_compiler_table_set
		{ directory,
                  filename_prefix,
		  filename_suffix
		}
                (compiler_state::combined ());

#           pp::newline  pps;
#           pp::newline  pps;
#           pp::newline  pps;
#	    pp::string   pps   "Toplevel compiler tableset";            pp::newline  pps;
#	    pp::string   pps   "==========================";            pp::newline  pps;
#           latex_print_compiler_table_set_reference  pps  (compiler_state::top_level ());
#
#           pp::newline  pps;
#           pp::newline  pps;
#           pp::newline  pps;
#	    pp::string   pps   "Base compiler tableset";            pp::newline  pps;
#	    pp::string   pps   "======================";            pp::newline  pps;
#           latex_print_compiler_table_set_reference  pps  (compiler_state::base ());
#
#           pp::newline  pps;
#           pp::newline  pps;
#           pp::newline  pps;
#           pp::string   pps   "Pervasive compiler tableset";            pp::newline  pps;
#	    pp::string   pps   "===========================";            pp::newline  pps;
#           latex_print_compiler_table_set_reference  pps  compiler_state::pervasive;
        };


    fun latex_print_compiler_state_to_file
            { directory:       String,
              filename_prefix: String,
              filename_suffix: String
            }
	=
	{
            latex_print_compiler_state
		{ directory,
                  filename_prefix,
		  filename_suffix
		};
        };

};















##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Code by Jeff Prothero: Copyright (c) 2010,
## released under Gnu Public Licence version 3.
