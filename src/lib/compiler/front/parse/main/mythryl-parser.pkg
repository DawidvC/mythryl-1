## mythryl-parser.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/parse/parser.make6



# The Mythryl parser proper is implemented in
#
#     src/lib/compiler/front/parse/main/mythryl-parser-guts.pkg
#
# The external interface to it is implemented in
#
#     src/lib/compiler/front/parse/main/parse-mythryl.pkg



###       "Consistently separating words
###        by spaces became a general custom
###        about the tenth century A.D.,
###        and lasted until about 1957,
###        when FORTRAN abandoned the practice."
###
###                -- (Sun FORTRAN Reference Manual)



api Mythryl_Parser {

    primary_prompt:                 Ref( String );
    secondary_prompt:               Ref( String );
    show_interactive_result_types:  Ref( Bool   );

    edit_request_stream:     Ref (Null_Or file::Output_Stream);            # XXX BUGGO DELETEME this is temporary codebase conversion infrastructure


    # Turn on lazy keywords and lazy declaration processing:
    #
    lazy_is_a_keyword:      Ref( Bool );		#  Default FALSE.                  

    quotation:         Ref( Bool );            # Controls backquote quotation.   
    interactive:       Ref( Bool );            # Used to issue prompts to interactive users, but not when executing a script.
    unparse_result:    Ref( Bool );            # TRUE to have read-eval-print-loop unparse to stdout the result of evaluated expressions.
    log_edit_requests: Ref( Bool );            # XXX BUGGO DELETEME this is temporary codebase conversion infrastructure

};

package mythryl_parser: (weak)  Mythryl_Parser {

    priority    =   [10, 10, 3];
    obscurity   =   3;
    prefix      =   "mythryl_parser";

    registry    =   control_index::make { help => "parser settings" };
                                                                my _ = 
    basic_control::note_subindex (prefix, registry, priority);

    convert_string =  control_utilities::convert::string;
    convert_bool   =  control_utilities::convert::bool;

    nextpri     = REF 0;

    fun make (c, name, help, d)
        =
	r
        where 

            r =   REF d;
	    p =   *nextpri;

	    control
                =
                control::control
		    {
			name,
			obscurity,
			help,
			pri => [p],
			control => r
		    };

	    nextpri := p + 1;

	    control_index::note_control
		registry
		{   control         => control::string_control c control,
		    dictionary_name => THE (control_utilities::dictionary_name::to_upper "PARSER_" name)
                };
	end;


    primary_prompt
        =
	make (convert_string, "primary_prompt", "primary prompt", "\n\neval:  ");

    secondary_prompt
        =
	make (convert_string, "secondary_prompt", "secondary prompt", "more:  ");

    show_interactive_result_types
	=
	make ( convert_bool,
	       "show_interactive_result_types",
	       "whether to print types of interactively evaluated expressions",
	       FALSE
	     );


    # log_file is not intended to be user-settable,
    # so we don't create an actual control for it.
    # It's purpose is to communicate the per-source-file
    # logfile stream to mythryl.grammar actions.  Alas, there
    # doesn't seem to be a clean pipeline for passing
    # such info to them at present.   XXX BUGGO FIXME.
    # That makes this yet another bit of thread-unsafe
    # global mutable state... :-(

    edit_request_stream
        =
        REF (NULL: Null_Or file::Output_Stream);            # XXX BUGGO DELETEME this is temporary codebase conversion infrastructure

    my log_edit_requests           # XXX BUGGO DELETEME this is temporary codebase conversion infrastructure
        =
	make (   convert_bool,
                 "log_edit_requests",
	         "whether to log per-source-file compile stuff",
                 FALSE
             );

    lazy_is_a_keyword
        =
	make (   convert_bool,
                 "lazy_is_a_keyword",
	         "whether `lazy' is considered a keyword",
                 FALSE
             );

    interactive
        =
	make (   convert_bool,
                 "do_prompts",
	         "TRUE for interactive use, FALSE when running scripts",
                 TRUE
             );

    unparse_result
        =
	make (   convert_bool,
                 "unparse_result",
	         "TRUE to have read-eval-print-loop unparse expression result to stdout",
                 TRUE
             );

    quotation
        =
	make (   convert_bool,
                 "quotations",
	         "whether (anti-)quotations are recognized",
                 FALSE
             );
};









##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
