Below is the original SML/NJ README for this directory,
lightly edited.  It contains information which needs to
be integrated into documentation elsewhere.

READER BEWARE: Much of the below is now badly out of date!

============================================================================
This README file describes the overall package of the
current version of the Mythryl7 compiler source tree.
============================================================================

NOTES
   Some informal implementation notes. 

README 
   This file. It gives an overview of the overall compiler package.

all-files.make6
   The standard Makefile for compiling the compiler. It is similar
   to the idea of Makefile.make6 used by CM.make, except that 
   all-files.make6 is designed for bootstrapping the compiler itself
   only (i.e., make_compiler.make). The resulting .o7 files from doing make_compiler.make 
   are placed in a single directory, e.g. build7-o7-files.

   CM's preprocessor directives are used in such a way that the compiler,
   the compilation manager, and the batch compilation manager
   for the current architecture will be built.

   In addition to that, it is possible to also build additional .o7 files
   that are useful for "retargeting" the compiler.  This is optional (and
   turned off by default), because it is not strictly necessary.  If the
   .o7 files for the cross-compiler are not present at the time of
   make_compiler.retarget, then make_compiler.retarget will create them.

Makefile.make6
   This file is an alias for viscomp-lib.make6 and makes it possible to
   use make_compiler.make6.make (); for experimenting with the compiler.
   (Don't use CM.make because it has a different idea of where the .o7 files
    live.)
   This can be useful for debugging purpose. You can type make_compiler.make6.make() 
   to immediately build up a new, interactive visible compiler. To
   access the newly built compiler, you use the 
       "XXXVisComp.interact.read_eval_print_from_file"
   function to compile ML programs. Notice none of the bootstrap glue
   is in Makefile.make6 (viscomp-lib.make6).

viscomp-lib.make6
   This file specifies the "library" of visible compilers for various
   supported architectures.

Retarget/<arch>-<os>.{cm,sml}
   WARNING!
     After you do a 'make_compiler::retarget { cpu = "<arch>", os = "<os>" };'
     you can access the "make_compiler" package for the newly-loaded cross compiler
     as <Arch><Os>make_compiler.  The original package make_compiler will *not* be redefined!
   For further details on retargeting see Retarget/README.

============================================================================
Tips:
   The current source code is organized as a two-level directory tree.
   All source files (except those in Retarget/* wich are not part of the
   ordinary compiler) can be grep-ed by typing "grep xxx */*/*.{sig,sml}", 
   assuming you are looking for naming "xxx". 

   The following directories are organized based on the compilation phases.
   Within each phase, the "main" sub-directory always contains the top-level 
   module and some important data structures for that particular compilation 
   phase.

   File name conventions: 
     *.api --- the Mythryl api file 
     *.pkg --- the Mythyrl source program (occasionally with apis)
     *.grammar --- Mythryl-Yacc file
     *.lex --- Mythryl-Lex file
     *.make6  --- the Make7 makefile

PervasiveEnv
   The Lib7 Initial Bootstrapping Library and the SML97 Basis Library. 
   When recompiling the compiler (i.e., via make_compiler.make), files in this 
   directory are always compiled first. More specifically, their order
   of compilation is as follows:
       (0)  Build the initial primitive static environment.
            (See Semant/statenv/prim.sml)
       (1)  Compile runtime-system.api and runtime-system-placeholder.pkg.
            These two files supply the Lib7-visible interface definition
            for the runtime package which is implemented in the the
            ../runtime/kernel/globals.c file.
            The dynamic chunk from executing runtime-system-placeholder.pkg
            is discarded, and replaced by a hard-wired chunk coming from the
            runtime system.
       (2)  compile core.pkg, which defines a bunch of useful exceptions
            and utilty functions such as polymorphic equality, string
            equality, delay and force primitives, etc.
       (4)  files in all-files.make6 (must follow the exact order)
       (5)  files in pervasive.make6 (must follow the exact order)

TopLevel
   This directory contains the top-level glue files for different versions
   of the batch and interactive compiler.  To understand, how the compiler
   is organized, you can read the main directory.
TopLevel/batch/
   Utility files for the compilation manager make7 and make_compiler; 
TopLevel/make-compiler/
   How to bootstrap an interactive compiler. Details are in boot.sml and
   shareglue.sml. Before building an interactive compiler, one should have
   already gotten a visible compiler (for that particular architecture),
   see the viscomp directory. To build a compiler for SPARC architecture,
   all we need to do is to load and run the IntSparc (in sparcglue.sml) 
   package.
TopLevel/environ/
   A top-level environment include static environment, dynamic environment
   and symbolic environment. The definitions of static environments are in
   the Semant/statenv directory, as they are mostly used by the elaboration
   and type checking.
TopLevel/interact/
   How the top-level interactive loop is organized. The evalloop.sml contains
   the details on how a ML program is compiled from source code to binary
   code and then later being executed.
TopLevel/main/
   The top-level compiler package is shown in the compile.api and 
   compile-g.pkg. The compile-g.pkg contains details on how ML programs
   are compiled into the FLINT intermediate format, but the details
   on how FLINT gets compiled into the binary code segments are not
   detailed here, instead, they are described in the 
   FLINT/main/flintcomp.sml file. The CODEGENERATOR api
   in codes.sig defines the interface about this FLINT code generator.
   Note: all the uses of the compilation facility goes throught the "compile"
   function defined in compile-g.pkg. The common intermediate formats are 
   stated in the compbasic.sig and compbasic.sml files. The version.pkg 
   defines the version numbers.
TopLevel/viscomp/
   How to build the visible compiler viscomp --- this is essentially 
   deciding what to export to the outside world. All the Compiler 
   control flags are defined in the control.api and control.pkg files
   placed in this directory.

parse/
   Phase 1 of the compilation process. Turning the SML source code into
   the Concrete Synatx. The definition of concrete syntax is in ast/ast.pkg.
   The frontend.sig and frontend.sml files in the main directory contain 
   the big picture on the front end.

semantic
   This phase does semantic analysis, more specifically, it does the 
   elaboration (of concrete syntax into abstract syntax) and type-checking 
   of the core and module languages. The semantic chunks are defined in 
   main/bindings.pkg. The result is the Abstract Syntax, defined the 
   main/absyn.sml file. 
semantic/basics/
   Definition of several data structures and utility functions. They are
   used by the code that does semantic analysis. The env.sig and env.pkg
   files defines the underlying data structures used to represent  the 
   static environment. 
semantic/typechecker/
   How to turn a piece of code in the Concrete Syntax into one in the
   Abstract Syntax. The top-level organization is in the following 
   elabtop.sml file.
semantic/main/absyn.sml
   Definition of Abstract Syntax
semantic/main/bindings.pkg
   Top-level view of what semantic chunks we have
semantic/main/typecheck-toplevel-expression.sml
   Top-level view of the elaboration process. Notice that each piece
   of core-ML program is first translated into the Abstract Syntax, 
   and gets type-checked. The type-checking does change the contents
   of abstract syntax, as certain type information won't be known
   until type-checking is done.
semantic/modules/
   Utility functions for elaborations of modules. The module.sig and
   module.sml contains the definitions of module-level semantic chunks.
semantic/pickle/
   How to write the static environments into a file! This is important
   if you want to create the .o7 file. It is also useful to infer 
   a unique persistant id for each compilation unit (useful to detect
   the cut-off compilation dependencies).
semantic/symboltable/
   The definition of SymbolTable. The CM-ed version of Static
   Environment is used to avoid environment blow-up in the pickling.
   The prim.sml contains the list of primitive operators and primitive 
   types exported in the initial static environment (i.e., PrimEnv).
   During bootstrapping, PrimEnv is the first environment you have to
   set up before you can compile files in the Boot directory.
semantic/types/
   This directory contains all the data structures and utility functions
   used in type-checking the Core-ML language.
semantic/typing/
   The type-checking and type-inference code for the core-ML programs.
   It is performed on Abstract Syntax and it produces Abstract Syntax
   also.

highcode
   This phase translates the deep syntax successively into polylambda,
   A-Normal, and FPS (fate-passing stle) form.
   During the translation from deep syntax into polylambda, it compiles
   the Pattern Matches (see the mcomp directory). Then it does a bunch
   of optimizations in A-Normal form, after which it does representation
   analysis, converts the A-Normal code into FPS, and finally does closure 
   conversion. 
upper/clos/
   The closure conversion step. Check out Shao/Appel LFP94 paper for
   the detailed algorithm.
upper/fps/
   Definition of FPS plus on how to convert the highcode code into the 
   FPS code. The compilation of the Switch statement is done in this
   phase.
upper/fps-optimize/
   The FPS-based optimizations (check Appel's "Compiling with 
   Fates" book for details). Eventually, all optimizations
   in this directory will be migrated into highcode.
upper/flint/
   This directory defines the highcode language. The detailed definitions
   of primitive tycs, primitive operators, kinds, type constructors, 
   and types are in the upper/kernel directory.
upper/kernel/
   Definiton of the kernel data structures used in the highcode language.
   This includes: deBruijn indices, primitive tycs, primitive operators,
   highcode kinds, highcode constructors, and highcode types. When you write 
   code that manipulates the highcode code, please restrict yourself to 
   use the functions defined in the LTYEXTERN interface only.
upper/main/
   The flintcomp.sml describes how the highcode code gets compiled into
   the optimized and closure-converted FPS code (eventually, it should
   produce optimized, closure-converted, adn type-safe highcode code).
upper/optimize/
   The highcode-based optimizations, such as contraction, type 
   specializations, etc.
upper/polylambda/
   An older version of the Lambda language (not in the A-Normal form)
   [ However, trying to compile without it produces lots of errors! -- Cynbe ]
upper/reps/
   Code for performing the representation analysis on highcode
upper/trans/
   Translation of Abstract Syntax into the polylambda code, then to the highcode
   code. All semantic chunks used in the elaboration are translated into
   the highcode types as well. The translation phase also does match 
   compilation. The translation from polylambda to highcode does the (partial)
   type-based argument flattening.

codegen/compile-fps/
   Compilation of FPS into the lowcode abstract machine code
codegen/main/
   The big picture of the codegenerator; including important
   files on machine specifications and runtime tagging schemes.

OldCGen
   The old code generator. May eventually go away after Lal's new
   code generator becomes stable on all platforms. Each code generator 
   should produce a package of api CODEGENERATOR (defined in 
   the Toplevel/main/codes.sig file).
OldCGen/coder/
   This directory contains the machine-independent parts of the
   old code generator. Some important apis are also here.
OldCGen/cpsgen/
   Compilation of FPS into the abstract machine in the old code 
   generator. Probably the spill.pkg and limit.pkg files should
   not be placed here. A counterpart of this in the new 
   code generator is the NewCGen/compile-fps directory.
OldCGen/rs6000/
   RS6000 code generator
OldCGen/sparc/
   SPARC code generator
OldCGen/x86/
   X86 code generator

lowcode
   Lal George's code generator (Lowcode).

src/
   Contains various kinds of utility programs
src/bignum/
   Bignum packages. I have no clue how stable this is.
src/fixityparse
src/lazycomp
   Some code for implementation of the lazy evaluation primitives.
src/print/
   Pretty printing. Very Adhoc, needs major clean up.
src/profile/
   The time and the space profiler.
src/util/
   Important utility functions including the Inputsource (for 
   reading in a program), and various Hashtable and Dictionary
   implementations.

============================================================================
A. SUMMARY of PHASES:

    0. symbol_table    : symbol -> naming
       linkerMap      : picklehash -> chunk
       inliningMap    : picklehash -> highcode
    1. parsing        : source -> rawSyntax
    2. typechecker    : rawSyntax + symbol_table -> deepSyntax + pickle + new symbol_table
    3. highcode       : deepSyntax -> highcode -> FPS -> CLO
    4. code-generation: FPS -> csegments (via lowcode)

============================================================================   
B. CREATING all-files.make6

   How to recover the all-files.make6 (or Makefile.make6) file after making 
   dramatic changes to the directory package. Notice that the difference
   between all-files.make6 and Makefile.make6 is just the bootstrap glue files.

   1. ls -1 [toplevel,parse,semantic,highcode,code-generation,utilities]*/*/*.{sig,sml} \
        | grep -i -v glue | grep -v obsol > xxx
   2. Add ../lower/lowcode.make6
   3. Remove mythryl.lex.* nada.lex.* nada.grammar.* and mythryl.grammar.* files
   4. Add ../comp-lib/UTIL.make6
   5. Add ../yacc/lib/Makefile.make6
============================================================================   
