#
# These graph wrappers allow the client to attach triggers to 
# various graph methods.
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

api Graph_Wrappers {

    do_before_new_id:         (Void -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );

    do_after_new_id:          (graph::Node_Id -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );

    do_before_add_node:       (graph::Node( N ) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_after_add_node:        (graph::Node( N ) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_before_add_edge:       (graph::Edge( E ) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_after_add_edge:        (graph::Edge( E ) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );

    do_before_remove_node:    (graph::Node_Id -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_after_remove_node:     (graph::Node_Id -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );

    do_before_set_in_edges:   ((graph::Node_Id, List( graph::Edge( E ) )) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_after_set_in_edges:    ((graph::Node_Id, List( graph::Edge( E ) )) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_before_set_out_edges:  ((graph::Node_Id, List( graph::Edge( E ) )) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_after_set_out_edges:   ((graph::Node_Id, List( graph::Edge( E ) )) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );

    do_before_set_entries:    (List( graph::Node_Id ) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_after_set_entries:     (List( graph::Node_Id ) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_before_set_exits:      (List( graph::Node_Id ) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_after_set_exits:       (List( graph::Node_Id ) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );

    do_before_changed:        (graph::Graph( N, E, G ) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
    do_after_changed:         (graph::Graph( N, E, G ) -> Void) -> graph::Graph( N, E, G ) -> graph::Graph( N, E, G );
};

package graph_wrappers: (weak)  Graph_Wrappers {		# Graph_Wrappers	is from   src/lib/graph/wrappers.pkg

    package g= graph;		# graph	is from   src/lib/graph/graph.pkg

    fun do_before_new_id f (g::GRAPH graph)
	=
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => .{ f();  graph.new_id (); },
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_after_new_id f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => .{ x = graph.new_id ();  f x; x; },
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_before_add_node f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => fn n =  { f n;  graph.add_node n; },
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_after_add_node f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => fn n =  { graph.add_node n;   f n; },
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_before_add_edge f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => fn e =  { f e;  graph.add_edge e;},
	  remove_node     => graph.remove_node,
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_after_add_edge f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => fn e =  { graph.add_edge e;  f e;},
	  remove_node     => graph.remove_node,
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_before_remove_node f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => fn n =  { f n;  graph.remove_node n;},
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_after_remove_node f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => fn n =  { graph.remove_node n;  f n;},
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_before_set_in_edges f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_in_edges    => fn e =  { f e;  graph.set_in_edges e;},
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_after_set_in_edges f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_in_edges    => fn e =  { graph.set_in_edges e;  f e;},
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_before_set_out_edges f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_out_edges   => fn e =  { f e;  graph.set_out_edges e;},
	  set_in_edges    => graph.set_in_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_after_set_out_edges f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_out_edges   => fn e =  { graph.set_out_edges e;   f e;},
	  set_in_edges    => graph.set_in_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_before_set_entries f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => fn ns =  { f ns;  graph.set_entries ns;},
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_after_set_entries f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => fn ns =  { graph.set_entries ns;  f ns;},
	  set_exits       => graph.set_exits,
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_before_set_exits f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => fn ns =  { f ns;   graph.set_exits ns;},
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_after_set_exits f (g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => graph.new_id,
	  add_node        => graph.add_node,
	  add_edge        => graph.add_edge,
	  remove_node     => graph.remove_node,
	  set_in_edges    => graph.set_in_edges,
	  set_out_edges   => graph.set_out_edges,
	  set_entries     => graph.set_entries,
	  set_exits       => fn ns =  { graph.set_exits ns;  f ns;},
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_before_changed f (graph' as g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => (fn x =  { f graph';  graph.new_id        x;}),
	  add_node        => (fn x =  { f graph';  graph.add_node      x;}),
	  add_edge        => (fn x =  { f graph';  graph.add_edge      x;}),
	  remove_node     => (fn x =  { f graph';  graph.remove_node   x;}),
	  set_in_edges    => (fn x =  { f graph';  graph.set_in_edges  x;}),
	  set_out_edges   => (fn x =  { f graph';  graph.set_out_edges x;}),
	  set_entries     => (fn x =  { f graph';  graph.set_entries   x;}),
	  set_exits       => (fn x =  { f graph';  graph.set_exits     x;}),
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};

    fun do_after_changed f (graph' as g::GRAPH graph)
        =
	g::GRAPH {
	  name            => graph.name,
	  graph_info      => graph.graph_info,
	  new_id          => (fn x =  (graph.new_id        x before  f graph')),
	  add_node        => (fn x =  (graph.add_node      x before  f graph')),
	  add_edge        => (fn x =  (graph.add_edge      x before  f graph')),
	  remove_node     => (fn x =  (graph.remove_node   x before  f graph')),
	  set_out_edges   => (fn x =  (graph.set_out_edges x before  f graph')),
	  set_in_edges    => (fn x =  (graph.set_in_edges  x before  f graph')),
	  set_entries     => (fn x =  (graph.set_entries   x before  f graph')),
	  set_exits       => (fn x =  (graph.set_exits     x before  f graph')),
	  garbage_collect => graph.garbage_collect,
	  nodes           => graph.nodes,
	  edges           => graph.edges,
	  order           => graph.order,
	  size            => graph.size,
	  capacity        => graph.capacity,
	  out_edges       => graph.out_edges,
	  in_edges        => graph.in_edges,
	  next            => graph.next,
	  prior            => graph.prior,
	  has_edge        => graph.has_edge,
	  has_node        => graph.has_node,
	  node_info       => graph.node_info,
	  entries         => graph.entries,
	  exits           => graph.exits,
	  entry_edges     => graph.entry_edges,
	  exit_edges      => graph.exit_edges,
	  forall_nodes    => graph.forall_nodes,
	  forall_edges    => graph.forall_edges
	};
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
