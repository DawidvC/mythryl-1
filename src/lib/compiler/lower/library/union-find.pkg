#
# Union-find
#
# -- Allen Leung



###                 "Not all comments are bad.
###                  But they are generally deodorant;
###                  they cover up mistakes in the code."
###
###                           -- Christian Sepulveda


api UNION_FIND =
api

    type union_find( X )

    my union_find:  Int * (Int -> X) -> union_find( X )
    my find:        union_find( X ) -> Int -> X
    my union'     : union_find( X ) -> Int * Int -> Bool
    my union:       union_find( X ) -> (X * X -> X) -> Int * Int -> Bool
    my ====        : union_find( X ) -> Int * Int -> Bool
end

package Unionfind :> UNION_FIND =
pkg

   package a = rw_vector 
   package u = UnionFindRef

   type union_find( X ) = a::Rw_Vector( u::union_find( X ) )
 
   fun union_find (n, f) = a::tabulate (n, (fn i => u::union_find (f i)))
 
   fun find U x = U.!!(a::sub (U, x))

   fun union' U (x, y) = u::union' (a::sub (U, x), a::sub (U, y))

   fun union  U f (x, y) = u::union f (a::sub (U, x), a::sub (U, y))

   fun ==== U (x, y) = U::(====) (a::sub (U, x), a::sub (U, y)) 

end
