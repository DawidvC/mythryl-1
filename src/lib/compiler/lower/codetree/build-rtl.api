
# Functions for building an RTL.

###   "Avoir de l'audacité, toujours l'audacité,
###    encore une fois l'audacité!"
###
###                         -- Danton

api BUILD_RTL =
api
   package rtl:  Codetree_Rtl
   type Some_Type = Int

   my map:    Int -> (X -> Y) -> List( X ) -> List( Y )

   my fetch:  Some_Type -> RTL::loc -> RTL::expression
   my :=    : Some_Type -> RTL::loc * RTL::expression -> RTL::action
   my aggb:   Some_Type * Some_Type -> RTL::cell -> RTL::loc 
   my aggl:   Some_Type * Some_Type -> RTL::cell -> RTL::loc
   my idaggr: Some_Type -> RTL::cell -> RTL::loc
   my copy:   Some_Type -> X * X -> RTL::action
   my !     : Some_Type * String * String -> RTL::expression
   my @@@   : String * Some_Type -> RTL::expression -> RTL::cell 
   my @@    : String * Some_Type -> RTL::expression * RTL::expression -> RTL::cell 

   my intConst:    Some_Type -> Int -> RTL::expression
   my wordConst:   Some_Type -> unt32::word -> RTL::expression

   my newOp:  String -> List( RTL::expression ) -> RTL::expression
   my newCond:  String -> List( RTL::expression ) -> RTL::expression


   my immed:    Some_Type -> RTL::expression -> RTL::expression
   my operand:  Some_Type -> RTL::expression -> RTL::expression
   my label:    Some_Type -> RTL::expression -> RTL::expression
   my forall:   Some_Type -> RTL::expression -> RTL::expression
   my ?       : Some_Type -> RTL::expression

   my not:    RTL::cond -> RTL::cond
   my False:  RTL::cond
   my True:   RTL::cond

   my sx:     Some_Type * Some_Type -> RTL::expression -> RTL::expression
   my zx:     Some_Type * Some_Type -> RTL::expression -> RTL::expression
   my bitslice:  Some_Type -> List (Int * Int) -> RTL::expression -> RTL::expression

   #  Integer operators 
   my (-_)  : Some_Type -> RTL::expression -> RTL::expression
   my +     : Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my -     : Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my muls:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my mulu:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my divs:   Some_Type -> RTL::div_rounding_mode * RTL::expression * RTL::expression -> RTL::expression
   my divu:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my rems:   Some_Type -> RTL::div_rounding_mode * RTL::expression * RTL::expression -> RTL::expression
   my remu:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression

   my bitwise_and:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my bitwise_or:    Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my bitwise_xor:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my eqvb:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my bitwise_not:   Some_Type -> RTL::expression -> RTL::expression
   my <<    : Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my >>    : Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my >>>   : Some_Type -> RTL::expression * RTL::expression -> RTL::expression  

   #  Trapping operators 
   my addt:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my subt:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my mult:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my divt:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my remt:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression

   my cond:   Some_Type -> RTL::cond * RTL::expression * RTL::expression -> RTL::expression

   #  Integer comparisons 
   my ====  : Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my <>    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my >     : Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my <     : Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my <=    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my >=    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my ltu:    Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my leu:    Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my gtu:    Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my geu:    Some_Type -> RTL::expression * RTL::expression -> RTL::cond

   #  Floating point operators 
   my fadd:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my fsub:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my fmul:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my fdiv:   Some_Type -> RTL::expression * RTL::expression -> RTL::expression
   my fabs:   Some_Type -> RTL::expression -> RTL::expression
   my fneg:   Some_Type -> RTL::expression -> RTL::expression
   my fsqrt:  Some_Type -> RTL::expression -> RTL::expression

   #  Floating point comparisons 
   my |?|     : Some_Type -> RTL::expression * RTL::expression -> RTL::cond  
   my |!<=>|  : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |====|  : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?=|    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!<>|   : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?>=|  : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |<|     : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?<|    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!>=|   : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?>|   : Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my |<=|    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?<=|   : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!>|    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?<=|  : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |>|     : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?>|    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!<=|   : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?<|   : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |>=|    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?>=|   : Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my |!<|    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?=|   : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |<>|    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!=|    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |!?|    : Some_Type -> RTL::expression * RTL::expression -> RTL::cond
   my |<=>|   : Some_Type -> RTL::expression * RTL::expression -> RTL::cond 
   my |?<>|   : Some_Type -> RTL::expression * RTL::expression -> RTL::cond

   #  Action combinators 
   my ||    : RTL::action * RTL::action -> RTL::action   #  parallel RTL::actions 
   my Nop:    RTL::action                    #  empty RTL::action 
   my Jmp:    Int -> RTL::expression -> RTL::action    #  jump to address 
   my Call:   Int -> RTL::expression -> RTL::action    #  Call address 
   my Ret:    RTL::action                    #  return 
   my If:     RTL::cond * RTL::action * RTL::action -> RTL::action #  if/then/else 
end
