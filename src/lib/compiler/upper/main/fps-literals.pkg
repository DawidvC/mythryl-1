## fps-literals.pkg
## COPYRIGHT (c) 1998 YALE FLINT PROJECT.

# Compiled by:
#     src/lib/compiler/core.make6



# This file implements one of the fate-passing-style transforms.
# For context, see the comments in
#
#     src/lib/compiler/upper/highcode/highcode.api



###                "There is no such thing as group
###                 originality or group creativity."
###
###                                 -- Edwin Land


api Fps_Literals {

    Literal_Expression;
    split_off_fps_literals:  fate_passing_style::Function -> (fate_passing_style::Function, Literal_Expression);
    literal_expression_to_bytevector:  Literal_Expression -> unt8_vector::Vector;
};

package fps_literals

: (weak)  Fps_Literals				# Fps_Literals			is from   src/lib/compiler/upper/main/fps-literals.pkg

{

    package w8v= unt8_vector;			# unt8_vector			is from   src/lib/std/src/unt8-vector.pkg

    stipulate

	package intset {

	    Intset = Ref( int_red_black_set::Set );

	    fun new () = REF int_red_black_set::empty;

	    fun add set i = set := int_red_black_set::add(*set, i);
	    fun mem set i =  int_red_black_set::member(*set, i);
	    fun rmv set i = set := int_red_black_set::delete(*set, i);
	};

	include fate_passing_style;

    herein

	fun bug msg = error_message::impossible ("Literals: " + msg); 

	ident =  fn x = x;

						# highcode_var	is from   src/lib/compiler/upper/highcode/highcode-var.pkg

	fun make_var _
            =
            highcode_var::make_highcode_variable ();



	# **************************************************************************
	#                         A MINI-LITERAL LANGUAGE                          *
	# **************************************************************************



	Literal_Value
	  = LI_INT  Unt
	  | LI_STRING  String
	  | LI_VAR  Highcode_Variable;

	Block_Kind
	  = LI_RECORD		#  record of tagged ML values 
	  | LI_VECTOR;		#  vector of tagged ML values 

	Literal_Expression
	  = LI_TOP        List( Literal_Value )
	  | LI_BLOCK     (Block_Kind, List( Literal_Value ), Highcode_Variable, Literal_Expression)
	  | LI_F64BLOCK  (List( String ), Highcode_Variable, Literal_Expression)
	  | LI_I32BLOCK  (List( unt32::Unt ), Highcode_Variable, Literal_Expression);

	fun rk2bk fate_passing_style::RK_VECTOR	=> LI_VECTOR;
	    rk2bk fate_passing_style::RK_RECORD	=> LI_RECORD;
	    rk2bk _		=> bug "rk2bk: unexpected block kind";
	end;

	fun val2lit (fate_passing_style::VAR v) => LI_VAR v;
	    val2lit (fate_passing_style::INT i) => LI_INT (unt::from_int i);
	    val2lit (fate_passing_style::STRING s) => LI_STRING s;
	    val2lit _ => bug "unexpected case in val2lit";
	end;



	# **************************************************************************
	#                 TRANSLATING THE LITERAL EXP TO BYTES                     *
	# **************************************************************************



	# Literals are encoded as instructions for a "literal machine."  The abstract
	# description of these instructions is as follows:
	#
	#	INT (i)			-- push the int31 literal i on the stack
	#	RAW32[i1, ..., in]	-- form a 32-bit raw data record from the
	#				   i1..in and push a pointer to it.
	#	RAW64[r1, ..., rn]	-- form a 64-bit raw data record from the
	#				   r1..rn and push a pointer to it.
	#	STR[c1, ..., cn]		-- form a string from the characters c1..cn
	#				   and push it on the stack.
	#	LIT (k)			-- push the contents of the stack element
	#				   that is k slots from the top of the stack.
	#	VECTOR (n)		-- pop n elements from the stack, make a vector
	#				   from them and push a pointer to the vector.
	#	RECORD (n)		-- pop n elements from the stack, make a record
	#				   from them and push a pointer.
	#	RETURN			-- return the literal that is on the top of the
	#				   stack.


	fun w32to_bytes' (w, l)
            =
	    unt8::from_large_unt   (unt32::(>>) (w, 0u24))
	    ! unt8::from_large_unt (unt32::(>>) (w, 0u16))
	    ! unt8::from_large_unt (unt32::(>>) (w, 0u08))
	    ! unt8::from_large_unt w
            ! l;

	fun w32to_bytes w = w32to_bytes' (w, []);
	fun w31to_bytes w = w32to_bytes (unt31::to_large_unt_x w);

	fun int_to_bytes i       = w32to_bytes (unt32::from_int i);
	fun int_to_bytes' (i, l) = w32to_bytes'(unt32::from_int i, l);

	fun string_to_bytes s
            =
            map byte::char_to_byte (explode s);



	###                      "A Thaum is the basic unit of magical strength.
	###                       It has been universally established as the amount
	###                       of magic needed to create one small white pigeon
	###                       or three normal-sized billiard balls."
	###
	###                                               -- Terry Pratchett



	emit_magic =   w8v::from_list [ 0ux19, 0ux98, 0ux10, 0ux22 ];

	fun emit_depth n = w8v::from_list (int_to_bytes n);
	fun emit_int i = w8v::from_list (0ux01 ! w31to_bytes i);

	fun emit_raw32 [i] => w8v::from_list (0ux02 ! w32to_bytes i);
	    emit_raw32 l =>
	      w8v::from_list (0ux03 ! (int_to_bytes'(length l, list::fold_right w32to_bytes' [] l)));
        end;

	fun emit_raw64 [r] => w8v::from_list (0ux04 ! string_to_bytes r);
	    emit_raw64 l => w8v::cat(
	      w8v::from_list (0ux05 ! int_to_bytes (length l)) ! map byte::string_to_bytes l);
        end;

	fun emit_string s
            =
            w8v::cat [
		w8v::from_list (0ux06 ! int_to_bytes (size s)),
		byte::string_to_bytes s
	      ];

	fun emit_lit    k = w8v::from_list (0ux07 ! int_to_bytes k);
	fun emit_vector n = w8v::from_list (0ux08 ! int_to_bytes n);
	fun emit_record n = w8v::from_list (0ux09 ! int_to_bytes n);

	emit_return = w8v::from_list [0uxff];

	fun literal_expression_to_bytevector (LI_TOP [])
		=>
		w8v::from_list [];

	    literal_expression_to_bytevector lit_expression
		=>
		{
		    fun depth (LI_TOP ls, d, max_depth)
			    =>
			    int::max (max_depth, d+length ls);

			depth (LI_BLOCK(_, ls, _, rest), d, max_depth)
			    =>
			    depth (rest, d+1, int::max (max_depth, d+length ls));

			depth (LI_F64BLOCK (ls, _, rest), d, max_depth)
			    =>
			    depth (rest, d+1, int::max (max_depth, d+length ls));

			depth (LI_I32BLOCK (ls, _, rest), d, max_depth)
			    =>
			    depth (rest, d+1, int::max (max_depth, d+length ls));
		    end;

		    fun emit_lit_expression (dictionary, expression, code)
			=
			{
			    fun emit_lit_vals ([], _, code)
				    =>
				    code;

				emit_lit_vals (lit ! r, d, code)
                                    =>
                                    {
				        instruction
                                            =
                                            case lit
						(LI_INT i) => emit_int i;
						(LI_STRING s) => emit_string s;

						(LI_VAR v)
                                                    =>
						    emit_lit (f (dictionary, d))
                                                    where
                                                        fun f ([], _) => bug "unbound Highcode_Variable";
							    f (v' ! r, d) => if (v == v')  d; else f (r, d+1);fi;
							end;
						    end;
                                            esac;


				        emit_lit_vals (r, d+1, instruction ! code);
				    };
                            end;

			    fun emitablock (LI_RECORD, ls, code)
				    =>
				    emit_record (length ls) ! emit_lit_vals (ls, 0, code);

				emitablock (LI_VECTOR, ls, code)
				    =>
				    emit_vector (length ls) ! emit_lit_vals (ls, 0, code);
			    end;

			    fun emit_f64block (ls, code)
				=
				emit_raw64 (map ieee_float_constants::realconst ls) ! code;

			    fun emit_i32block (ls, code)
                                =
                                emit_raw32 ls ! code;

			    case expression

				 (LI_TOP ls) => emit_return ! emitablock (LI_RECORD, ls, code);

				 (LI_BLOCK (bk, ls, v, rest)) =>
				    emit_lit_expression (v ! dictionary, rest, emitablock (bk, ls, code));

				 (LI_F64BLOCK (ls, v, rest)) =>
				    emit_lit_expression (v ! dictionary, rest, emit_f64block (ls, code));

				 (LI_I32BLOCK (ls, v, rest)) =>
				    emit_lit_expression (v ! dictionary, rest, emit_i32block (ls, code));
			    esac;
			};

		    max_depth = depth (lit_expression, 0, 1);

		    code = emit_magic
			 ! emit_depth max_depth
			 ! list::reverse (emit_lit_expression([], lit_expression, []));

		    w8v::cat code;
	      };
	end;


	# *************************************************************************
	#                    LIFTING LITERALS ON HIGHCODE                         *
	# *************************************************************************


	#  fun liftlits body = bug "highcode version currently not implemented yet"
	#  
	#  fun split_off_fps_literals (FK_FCT, f, [(v, t)], body) = 
	#        if lt::ltp_str t then
	#          let my (nbody, lit, llt) = liftlits body
	#              nt = lt::ltc_str ((lt::ltd_str t)@[llt])
	#           in ((FK_FCT, f, [(v, nt)], body), lit)
	#          end
	#        else bug "unexpected highcode header in split_off_fps_literals (case 1)"
	#    | split_off_fps_literals _ = bug "unexpected highcode header in split_off_fps_literals (case 2)"



	# **************************************************************************
	#                    LIFTING LITERALS ON FPS                               *
	# **************************************************************************

	Info 
	  = ZZ_STR  String
	  | ZZ_FLT  String
	  | ZZ_RCD  (Record_Kind, List( Value ));

	exception LITERAL_INFO;

	Rlit = RLIT  (String, Unt);


	fun to_rlit s
            =
            RLIT (s, hash_string::hash_string s);


	fun from_rlit (RLIT (s, _))
            =
            s;


	fun rlitcmp (RLIT (s1, i1), RLIT (s2, i2))
	    = 
	    if   (i1 < i2)  LESS;
	    elif (i1 > i2)  GREATER;
	    else            string::compare (s1, s2);
	    fi;


	package rlit_dictionary
            =
            red_black_map_g (
                Key = Rlit;
		compare = rlitcmp;
	    );

	# Lifting all literals from a FPS program:
        #
	fun liftlits (body, root, offset)
            = 
	    {   # The list of record, string, or real constants 
		#
		my m:  int_hash_table::Hash_Table( Info ) = int_hash_table::make_table (32, LITERAL_INFO);
		my freevars:    Ref( List( Highcode_Variable ) ) = REF [];

		fun addv x = (freevars := (x ! *freevars));

		#  Check if a Highcode_Variable is used by the main program 
		my refset:  intset::Intset = intset::new();
		my used:  Highcode_Variable -> Void = intset::add refset; 
		my is_used:  Highcode_Variable -> Bool = intset::mem refset;

		#  memoize the information on which corresponds to what 

		fun enter (v, i)
		    =
		    {   int_hash_table::set m (v, i);
			addv v;
		    };

		fun const (VAR v) => ({ int_hash_table::get  m  v; TRUE;} except _ = FALSE);
		    const (INT _ | INT32 _ | REAL _ | STRING _) => TRUE;
		    const _ => bug "unexpected case in const";
		end;

		fun cstlit (VAR v) => ({ int_hash_table::get  m  v; TRUE;} except _ = FALSE);
		    cstlit (REAL _ | STRING _) => TRUE;
		    cstlit _ => FALSE;
		end;

		# Register a string literal:
		#
		stipulate

		    my strs:   Ref( List( String ) )
			=
			REF [];

		    my strs_n:   Ref( Int )
			=
			REF 0;

		    sdict  =   REF (rlit_dictionary::empty);
		    srtv   =   make_var();
		    srtval =   VAR srtv;

		herein

		    fun typechecked_package_package s
			= 
			{   v = make_var();		# Should hash to remove duplicates	XXX BUGGO FIXME
			    sd = *sdict;
			    rlit = to_rlit s;

			    n = 
			       case (rlit_dictionary::get (sd, rlit))

				    THE k => k;

				    _ => { (strs := (s ! *strs));
					    k = *strs_n;
					    (strs_n := (k+1)); 
					    (sdict := (rlit_dictionary::set (sd, rlit, k)));
					  k;
					};
			       esac;

			    (VAR v, fn ce =  SELECT (n, srtval, v, bogt, ce));
			};

	      /* old definition of typechecked_package_package

		      let sd = *sdict
			  rlit = toRlit s
		       in (case RlitDict::peek (sd, rlit)
			    of THE v => (VAR v, ident)
			     | _ => let v = make_var()
					(enter (v, ZZ_STR s); used v)
					(sdict := RlitDict::set (sd, rlit, v))
				     in (VAR v, ident)
				    end)
		      end
	      */

		    fun apply_package ()
			=
			{   fun g (a ! r, z) =>  g (r, (STRING a) ! z);  
				g ([],    z) =>  z;			 # Reverse to get correct order.
			    end;

			    all_strs = *strs;

			    case *strs

				 [] => ();
				 xs => {   enter (srtv, ZZ_RCD (RK_RECORD, g (xs,[])));
					   used srtv;
				       };
			    esac;
		      };
		end;			# stipulate

		# * a special treatment of real constants 
		stipulate

		      my reals:   Ref( List( String ) ) = REF [];
		      my reals_n:  Ref( Int ) = REF 0;

		      rdict  =  REF (rlit_dictionary::empty);
		      rrtv   =  make_var();
		      rrtval =  VAR rrtv;

		herein				       

		    fun typechecked_package_real s
			= 
			{   v    = make_var();		# Should hash to remove duplicates XXX BUGGO FIXME
			    rd   = *rdict;

			    rlit = to_rlit s;

			    n    = case (rlit_dictionary::get (rd, rlit))
					 THE k => k;
					 _     => {   reals := (s ! *reals);
						      k = *reals_n;
						      reals_n := (k+1);
						      rdict := (rlit_dictionary::set (rd, rlit, k));
						      k;
						  };
                                   esac;


			    ( VAR v,
			      fn ce = SELECT (n, rrtval, v, FLTT, ce)
			    );
			};

		    fun apply_real ()
			= 
			{   fun g (a ! r, z) => g (r, (REAL a) ! z);  
			        g (   [], z) => z;		 		#  reverse to reflecting the correct order 
			    end;

			    all_reals = *reals;

			    case *reals 
				[] => ();
			        xs => {   enter (rrtv, ZZ_RCD (RK_FBLOCK, g (xs,[])));
					  used rrtv;
				      };
                            esac;
			};

		end;				# stipulate of special treatment of real constants 

		# Translation on the FPS values:
		#
		fun lpsv u
		   = 
		   case u

		       REAL   s =>   typechecked_package_real s;
		       STRING s =>   typechecked_package_package s;

		       VAR    v =>   { used v; (u, ident);};
		       _        =>   (u, ident);
		   esac;

		fun lpvs vs
		    = 
		    fold_right g ([], ident) vs
                    where
		        fun g (u, (xs, hh))
			    = 
			    { my (nu, nh) = lpsv u; 
			      (nu ! xs, nh o hh); 
			    };
		    end;

		#  If all fields of a record are "constant", then we lift it:
		# 
		fun field' ul
		    = 
		    h (ul, [], FALSE)
                    where
		        fun h ((x, OFFP 0) ! r, z, rsflag)
                                => 
			        if (const x ) h (r, x ! z, rsflag or (cstlit x)); else NULL;fi;

			    h ([], z, rsflag) => if rsflag  THE (reverse z); else NULL;fi;
			    h _ => bug "unexpected case in field";
			end;
		    end;

		#  Register a constant record:
		# 
		fun record (rk, ul, v)
		    =
		    case (field' ul)

			THE xl
			    =>
			    {   enter (v, ZZ_RCD (rk, xl));
				ident;
			    };

			NULL =>
			    {   fun g ((u, p as OFFP 0), (r, hh))
				    => 
				    {   my (nu, nh) = lpsv u;
					((nu, p) ! r, nh o hh);
				    };

				    g _ => bug "unexpected non-zero OFFP in record";
				end;

				my (nl, header) = fold_right g ([], ident) ul;

				fn ce = header (RECORD (rk, nl, v, ce));
			    };
		    esac;

		# Register a wrapped float literal:
		#
		fun wrapfloat (u, v, t)
		    = 
		    if (const u )
			enter (v, ZZ_RCD (RK_FBLOCK, [u]));
			ident;
		    else 
			my (nu, hh) = lpsv u;
			(fn ce => hh (PURE (p::FWRAP, [nu], v, t, ce)); end );
		    fi;

		# Fetch literal information:
		#
		fun get_info ()
		    = 
		    {   apply_real();   #  register all Reals as a record 
			apply_package();   #  register all Strings as a record 
			allvars = *freevars;
			exports = list::filter is_used allvars;

			toplit
			    = 
			    g (exports, [])
			    where
				fun g ([], z)
					=>
					LI_TOP z;

				    g (x ! r, z)
					=> 
					case (int_hash_table::get  m  x)
					     ZZ_STR s => g (r, (LI_STRING s) ! z);
					    _ => g (r, (LI_VAR x) ! z);
					esac;
			       end;
			    end;

			fun make_literal (v, lit)
			    =
			    {
				fun un_real (fate_passing_style::REAL s) => s;
				    un_real _ => bug "unREAL";
				end;

				fun un_int32 (fate_passing_style::INT32 w) => w;
				    un_int32 _ => bug "unINT32";
				end;

				case (int_hash_table::get  m  v)   

				    (ZZ_FLT _)		# Float is wrapped.
				        => 
					bug "currently we don't expect ZZ_FLT in make_literal";

				    #  LI_F64BLOCK([s], v, lit) 
				    (ZZ_STR s)
                                        => 
					bug "currently we don't expect ZZ_STR in make_literal";

				    # Lit   --- or we could inline string:
				    # 
				    (ZZ_RCD (fate_passing_style::RK_FBLOCK, vs))
                                        =>
					LI_F64BLOCK (map un_real vs, v, lit);

				    (ZZ_RCD (fate_passing_style::RK_I32BLOCK, vs))
                                        =>
				        LI_I32BLOCK (map un_int32 vs, v, lit);

				    (ZZ_RCD (rk, vs))
                                        => 
				        LI_BLOCK (rk2bk rk, map val2lit vs, v, lit);
				esac;
			    };

			# Build up the literal package:
			#
			lit = fold_left make_literal toplit allvars;

			n = length exports;

			header
                            = 
			    if (n == 0)

				ident;
			    else
				rv   =   make_var();
				rval =   VAR rv;
				rhdr =   fn ce => SELECT (offset, root, rv, PTRT (RPT n), ce); end ;

				fun make_header (v, (i, hh))
				    = 
				    {   nh = case (int_hash_table::get  m  v)

						 (ZZ_FLT _) => bug "ZZ_FLT in make_header";
						    /* (fn ce => 
							 (SELECT (i, rval, w, PTRT (FPT 1),
							  SELECT (0, VAR w, v, FLTT, ce)))) */

						 (ZZ_STR s) => bug "ZZ_STR in make_header";
						    /* (fn ce => 
							  SELECT (i, rval, v, bogt, ce)) */

						 (ZZ_RCD (rk, vs))
						     =>
						     {   n = length vs;

							 t = case rk 

								RK_FBLOCK => PTRT (FPT n);
								RK_VECTOR => bogt;
								_ => PTRT (RPT n);
							     esac;

							 fn ce = SELECT (i, rval, v, t, ce);
						     };
					     esac;

					(i+1, hh o nh);
				    };

				#2 (fold_right make_header (0, rhdr) exports);
			    fi;

			(lit, header);
		    };					# fun get_info 

		fun lpfn (fk, f, vl, cl, e)		# "lpfn" may be "loop_fn"...?
		    =
		    (fk, f, vl, cl, loop e)

		also
		fun loop ce
		    =
		    case  ce

			RECORD (rk, ul, v, e)
			    =>
			    record (rk, ul, v) (loop e);

			SELECT (i, u, v, t, e)
			    => 
			    { my (nu, hh) = lpsv u;
			      hh (SELECT (i, nu, v, t, loop e));
			    };

			OFFSET _ => bug "unexpected OFFSET in loop";

			APPLY (u, ul)
			    => 
			    {   my (nu, h1) = lpsv u;
				my (nl, h2) = lpvs ul;
				h1 (h2 (APPLY (nu, nl)));
			    };

			MUTUALLY_RECURSIVE_FNS (fns, e)
			    =>
			    MUTUALLY_RECURSIVE_FNS (map lpfn fns, loop e);

			SWITCH (u, v, es)
			    => 
			    {   my (nu, hh) = lpsv u;
				hh (SWITCH (nu, v, map loop es));
			    };

			BRANCH (p, ul, v, e1, e2)
			    => 
			    {   my (nl, hh) = lpvs ul;
				hh (BRANCH (p, nl, v, loop e1, loop e2));
			    };

			SETTER (p, ul, e)
			    => 
			    {   my (nl, hh) = lpvs ul;
				hh (SETTER (p, nl, loop e));
			    };

			LOOKER (p, ul, v, t, e)
			    =>
			    {   my (nl, hh) = lpvs ul;
				hh (LOOKER (p, nl, v, t, loop e));
			    };

			ARITH (p, ul, v, t, e)
			    =>
			    {   my (nl, hh) = lpvs ul;
				hh (ARITH (p, nl, v, t, loop e));
			    };

			PURE (p::FWRAP, [u], v, t, e)
			    =>
			    wrapfloat (u, v, t) (loop e);

			PURE (p, ul, v, t, e)
			    => 
			    {   my (nl, hh) = lpvs ul;
				hh (PURE (p, nl, v, t, loop e));
			    };

			RAW_C_CALL (k, l, p, ul, vtl, e)
			    =>
			    {   my (nl, hh) = lpvs ul;
				hh (RAW_C_CALL (k, l, p, nl, vtl, loop e));
			    };
		    esac;

		    newbody = loop body;

		    my (lit, header) = get_info ();

		    (header newbody, lit);
	  };


	# Main function:
	#
	fun split_off_fps_literals (fk, f, vl as [_, x], [cntt, t as PTRT (RPT n)], body)
		=> 
		{   nt =   PTRT (RPT (n+1));

		    my (nbody, lit) =   liftlits (body, VAR x, n);

		    ((fk, f, vl, [cntt, nt], nbody), lit);
		};

	   split_off_fps_literals _
		=>
		bug "unexpected FPS header in split_off_fps_literals";
        end;

    end;	# toplevel stipulate 
};		# package split_off_fps_literals


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
