#!/usr/bin/mythryl

# This is a Mythryl version of the GTK+ tutorial
# example program 'scribble-simple.c':
#
#     docs:   http://library.gnome.org/devel/gtk-tutorial/stable/c2424.html
#     source: http://linfoline.homedns.org/gtk/x2939.html
#

include gtk_via_pipe;

fun round x
    =
    float::to_int  ieee_float::TO_NEAREST  x;

pixmap = (REF NULL):  Ref (Null_Or Widget);

session = make_session [];

window = make_window  session;

set_delete_event_callback session window .{ exit_main session; exit 0; };
set_destroy_callback      session window .{ exit_main session; exit 0; };

set_widget_name (session, window, "Test Input");

vbox = make_vertical_box { session, homogeneous => FALSE, spacing => 0 };

add_kid { session, mom => window, kid => vbox };
show_widget (session, vbox);

drawing_area = make_drawing_area session;

set_minimum_widget_size (session, drawing_area, (200, 200));
pack_box { session, box => vbox, kid => drawing_area, pack => FROM_START, expand => TRUE, fill => TRUE, padding => 0 };
show_widget (session, drawing_area);

fun draw_brush (widget, x, y)
    =
    {   gcontext = get_black_graphics_context (session, widget);

printf "draw_brush: %d, %d\n" x y;
        x = x - 5;
	y = y - 5;

	wide = 10;
	high = 10;

	draw_box
	    { session,
	      drawable => the *pixmap,
	      gcontext,
	      filled   => TRUE,
	      x, y, wide, high
	    };
    }
    except _ = ();

set_expose_event_callback  session  drawing_area
    .{
	#event -> {  window, count,  x, y, wide, high };

	gcontext = get_black_graphics_context (session, window);

	draw_box
	    { session,
	      drawable => the *pixmap,
	      gcontext,
	      filled   => TRUE,
	      x, y, wide, high
	    };
    };

set_configure_event_callback  session  drawing_area
   .{
print "configure_event/AAA\n";
        #event -> { window => widget, ... };

print "configure_event/BBB\n";
        unref_object (session, the *pixmap)   except _ = ();

print "configure_event/CCC\n";
	window = get_widget_window (session, widget);

print "configure_event/DDD\n";
        (get_widget_allocation (session, widget))
	    ->
            { wide, high, ... };

print "configure_event/EEE\n";
	gcontext = get_white_graphics_context (session, widget);

print "configure_event/FFF\n";
        pixmap := THE (make_pixmap (session, window, wide, high));

print "configure_event/GGG\n";
	draw_box
            {
              session,
              drawable => the *pixmap,
              gcontext,
              filled => TRUE,
              x      => 0, 
              y      => 0, 
	      wide,
	      high
	    };
print "configure_event/ZZZ\n";
    };

set_motion_notify_event_callback  session  drawing_area
   .{
	#event -> { window, x, y, is_hint, modifiers, ... };

printf "motion_notify callback: x => %f y => %f is_hint => %s #modifiers d=%d \n" x y (is_hint ?? "TRUE" :: "FALSE") (length modifiers);
        my { x, y, modifiers }
	    =
	    if   is_hint

                 get_window_pointer (session, window);
	    else
		 { x => round x, y => round y, modifiers };
	    fi;

	if (list::exists .{ #x == BUTTON1_MODIFIER; } modifiers)

	    case *pixmap
		THE _ => draw_brush (window, x, y);
		NULL  => ();
	    esac;
        fi;
    };


set_button_press_event_callback  session  drawing_area
   .{
	#event -> { button, x, y, ... };

	draw_brush (the *pixmap, round x, round y)  except _ = ();
    };

set_widget_events
    (
      session,
      drawing_area,
      [ EXPOSURE_MASK,
	BUTTON_PRESS_MASK, 
	POINTER_MOTION_MASK,
	POINTER_MOTION_HINT_MASK
      ]
    );

button = make_button_with_label (session, "Quit");
pack_box { session, box => vbox, kid => button, pack => FROM_START, expand => FALSE, fill => FALSE, padding => 0 };
set_clicked_callback session button .{  destroy_widget( session, window );  };

show_widget (session, button);
show_widget (session, window);

main session;

exit 0;
