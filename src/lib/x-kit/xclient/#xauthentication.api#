# xauthentication.api
#
# Motivation
# ----------
#
# When I started programming in the 1970s workstations were shipped
# with X configured to accept all client connections and most people
# left them that way;  consequently, in general anyone anywhere on
# the ARPANET could in open up an X window on any other machine
# connected to the ARPANET.  Requiring passwords to log onto a machine
# was considered by many people to be anti-social;  Stallman used to
# advertise that he used an accountname of "rms" and password also "rms"
# as protest against the imposition of passwords.  As late as 1990 muds
# were resisting the use of passwords. 
#
# That was a different era;  such openness is not very practical on
# today's savage Internet.  Consequently some way must be found to
# restrict the set of people/machines allowed to connect to a given
# X server.  The typical X authentication scheme used these days is
# MIT-MAGIC-COOKIE-1, which works roughly so:
#
#  o When an X server is started, it is given a list of
#    128-bit random numbers ("cookies"); it will accept
#    any X client presenting one of those cookies.
#
#  o At user login XDM stores the cookie for the machine in the
#    user's ~/.Xauthority file, keyed by machine address.  This
#    file may contain multiple cookies to allow connection to
#    multiple X servers.
#
#  o When an X client program is run, it looks up the X server
#    (typically obtained from the DISPLAY environment variable)
#    in ~/.Xauthority, locates the corresponding cookie, and
#    forwards it as part of the X connection request message to
#    the X server.  For X clients written in C this is usually
#    handled transparently by xlib.
#
# (xlib and the X server do no encryption themselves, consequently it
# is best to use ssh X forwarding to avoid sending cookies in the clear.)
#
# In this file we define an API to functionality for fetching cookies
# from ~/.Xauthority, plus related functionality for parsing X server
# addresses obtained from DISPLAY environment variables.  Typical usage:
#
#     my (display, cookie) = get_xdisplay_string_and_xauthentication NULL;
#
#     root_window = make_root_window (display, cookie);
#
# or simply
#
#     root_window = make_root_window (


# Compiled by:
#     src/lib/x-kit/xclient/xclient.make6

###         "The right word may be effective,
###          but no word was ever as effective
###          as a rightly timed pause."
###
###                -- Mark Twain's Speeches


stipulate
    package xc =  xcore;								# xcore		is from   src/lib/x-kit/xclient/src/api/xkit-lib-external-interface.pkg
herein

    api Xauthentication {

	# The different network protocol families:
	#
	family_internet:  Int;
	family_decnet:    Int;
	family_chaos:     Int;
	family_local:     Int;
	family_wild:      Int;

	get_xauthority_filename:  Void -> String;
	    #
	    # Return the default name of the authentication file (either
	    # specified by the XAUTHORITY dictionary variable, or the
	    # file $HOME/.Xauthority.  If neither XAUTHORITY or HOME 
	    # are defined, then ".Xauthority" is returned.


	get_xauthority_file_entry_by_address
	    :
	    { family:   Int,			# family_wild, family_local, family_internet ...
	      address:  String,			# Identity of our workstation, from gethostname(2) or such.
	      display:  String			# E.g. "0" -- from "localhost:0.1" DISPLAY string or such.
	    }
	    ->
	    Null_Or( xc::Xauthentication );
	    #
	    # Search the default xauthority file for the first entry that
	    # matches the family, network address and display number.  If no
	    # such match is found, then NULL is returned.  The * value family_wild
	    # matches anything, as do the empty strings when given for address or display.


	get_best_xauthority_file_entry_by_address
	    :
	    { family:      Int,			# family_wild, family_local, family_internet ...
	      address:     String,		# Identity of our workstation, from gethostname(2) or such.
	      display:     String,		# E.g. "0" -- from "localhost:0.1" DISPLAY string or such.
	      # 	
	      acceptable_authentication_methods:  List( String )	# E.g.  [ "MIT-MAGIC-COOKIE-1" ]
	    }
	    ->
	    Null_Or( xc::Xauthentication );
	    #
	    # This is similar to get_xauthority_file_entry_by_address,
	    # except that a list of acceptable authentication methods
	    # is specified by the list acceptable_authentication_methods.
	    # This contains one or more strings like
	    #
	    #     "MIT-MAGIC-COOKIE-1"
	    #     "XDM-AUTHORIZATION-1"
	    #     "SUN-DES-1"
	    #     "MIT-KERBEROS-5"
	    #
	    # to match literally against the contents of ~/.Xauthority entries.
	    #
	    # Not all of these are available everywhere; the de facto standard
	    # method is MIT-MAGIC-COOKIE-1.  For more information about the
	    # various authentication methods see (e.g.):
	    #
	    #     man 7 Xsecurity
	    #     http://manpages.ubuntu.com/manpages/jaunty/man7/Xsecurity.7.html
	    #
	    # We return the matching authentication info that matches the earliest
	    # name on the list.
	    #
	    # We return NULL if no match is found.


	get_selected_xauthority_file_entries
	    :
	    (xc::Xauthentication -> Bool)
	    ->
	    String
	    ->
	    List( xc::Xauthentication );
	    #
	    # Read the specified authentication file
	    # (usually ~/.Xauthority) and return a list
	    # of the entries that satisfy the given predicate.


	# Parse a string specifying an
	# X display into its components:
	#
	parse_xdisplay_string
	    :
	    String
	    ->
	    { host:    String,
	      display: String,
	      screen:  String
	    };

	# Given an optional display name, return
	# the display and authentication information.
	#
	# If the argument is NULL we use the unix DISPLAY
	# environment variable if defined else  "".
	#
	get_xdisplay_string_and_xauthentication
	    :
	    Null_Or( String )
	    ->
	    (String, Null_Or( xc::Xauthentication ));

    };

end;