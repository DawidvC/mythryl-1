api Graph_Tokens {
    Token (X,Y);
    Semantic_Value;
    eof: (X, X) -> Token (Semantic_Value,X);
    at: (X, X) -> Token (Semantic_Value,X);
    dot: (X, X) -> Token (Semantic_Value,X);
    equal: (X, X) -> Token (Semantic_Value,X);
    rparen: (X, X) -> Token (Semantic_Value,X);
    rbracket: (X, X) -> Token (Semantic_Value,X);
    rbrace: (X, X) -> Token (Semantic_Value,X);
    lparen: (X, X) -> Token (Semantic_Value,X);
    lbracket: (X, X) -> Token (Semantic_Value,X);
    lbrace: (X, X) -> Token (Semantic_Value,X);
    comma: (X, X) -> Token (Semantic_Value,X);
    semicolon: (X, X) -> Token (Semantic_Value,X);
    colon: (X, X) -> Token (Semantic_Value,X);
    symbol: ((String), X, X) -> Token (Semantic_Value,X);
    edgeop: (X, X) -> Token (Semantic_Value,X);
    edge: (X, X) -> Token (Semantic_Value,X);
    node: (X, X) -> Token (Semantic_Value,X);
    strict: (X, X) -> Token (Semantic_Value,X);
    subgraph: (X, X) -> Token (Semantic_Value,X);
    digraph: (X, X) -> Token (Semantic_Value,X);
    graph: (X, X) -> Token (Semantic_Value,X);
};
api Graph_Lrvals{
    package tokens:  Graph_Tokens;
    package parser_data: Parser_Data;
    sharing parser_data::token::Token == tokens::Token;
    sharing parser_data::Semantic_Value == tokens::Semantic_Value;
};
