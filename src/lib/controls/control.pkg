## control.pkg

# Compiled by:
#     src/lib/controls/controls-lib.make6

package control: (weak)   Control			# Control	is from   src/lib/controls/control.api
{
			# control_reps	is from   src/lib/controls/control-reps.pkg

    include control_reps;

    fun control { name, pri, obscurity, help, control }
        =
        CONTROL {
	    name => quickstring::from_string name,
	    get  => fn () = *control,
	    set  => fn THE v =>  (fn () =  control := v);
		       NULL  =>  { v = *control;   fn () = control := v; };
                    end,
	    priority => pri,
	    obscurity,
	    help
	};

    fun gen_control { name, pri, obscurity, help, default }
        =
        control {
	    name, pri, obscurity, help,
	    control => REF default
	};

    # This exception is raised to announce
    # that there is a syntax error in a
    # string representation of a control value:
    #
    exception
        BAD_VALUE_SYNTAX  {
          type_name:     String,
          control_name:  String,
          value:         String
        };

    fun string_control { type_name, from_string, to_string } (CONTROL c)
        =
	{   my { name, get, set, priority, obscurity, help }
                =
                c;

	    fun from_string' s
                =
		case (from_string s)
		  
		     NULL => raise exception BAD_VALUE_SYNTAX { type_name,
						      control_name =>  quickstring::to_string name,
						      value        =>  s
						    };
		     THE v => v;
                esac;

	    CONTROL { name,
		  get => to_string o get,
		  set => set o null_or::map from_string',
		  priority,
		  obscurity,
		  help };
	};

    fun name (CONTROL { name, ... }  ) =  quickstring::to_string name;
    fun get  (CONTROL { get, ... }   ) =  get ();
    fun set  (CONTROL { set, ... }, v) =  set (THE v) ();
    fun set' (CONTROL { set, ... }, v) =  set (THE v);

    fun info (CONTROL { priority, obscurity, help, ... } )
        =
	{ priority, obscurity, help };

    fun save'restore (CONTROL { set, ... } )
        =
        set NULL;

    fun compare (CONTROL { priority=>p1, ... }, CONTROL { priority=>p2, ... } )
        =
	list::collate int::compare (p1, p2);

};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
