## tree.pkg




# generic for tree data package and manipulation functions 



generic package TreeFun (S:  TREE_SUPPORT) : TREE = 
pkg 

package s = S 

exception EmptyTree

enum tree_node =  
           Ground
         | TreeNode of { value: Ref( s::node_value ),
			current_subtree:  Ref( Bool ), 
			parent:  Ref( tree_node ),
                        left_sibling:  Ref( tree_node ),
                        right_sibling:  Ref( tree_node ),
			children:  Ref( List( Ref( tree_node) ) )
	                }
	   
type tree
    = 
    Ref  {   root:    Ref( tree_node ),
             subtree: Ref( tree_node )
         }

type node_id = Ref( tree_node )

/* basic functions */ 

fun get_subtree (ts: tree) =  .subtree *ts
fun get_subtree_node (ts: tree) = *(get_subtree ts)
fun get_tree (ts: tree) =  .root(*ts)
fun get_tree_node (ts: tree) = *(get_tree ts)

fun get_value t =
       case *t
	 of Ground => raise exception EmptyTree
          | (TreeNode r) => *r.value
       
fun get_value_ref t =
       case *t
	 of Ground => raise exception EmptyTree
          | (TreeNode r) => r.value

fun get_subtree_flag t =
       case *t
	 of Ground => raise exception EmptyTree
          | (TreeNode r) => r.current_subtree
       
fun get_parent_node t = 
       case *t
	 of Ground => raise exception EmptyTree
          | (TreeNode r) => *r.parent

fun get_parent t = 
       case *t
	 of Ground => raise exception EmptyTree 
          | (TreeNode r) => r.parent
       

fun get_left_sibling t = 
       case *t
	 of Ground => raise exception EmptyTree
          | (TreeNode r) => r.left_sibling
	
fun get_right_sibling t = 
       case *t
	 of Ground => raise exception EmptyTree
          | (TreeNode r) => r.right_sibling
       
fun get_children t = 
       case *t
	 of Ground => raise exception EmptyTree 
          | (TreeNode r) => r.children 

fun get_children_list t = 
       case *t
	 of Ground => raise exception EmptyTree 
	          | (TreeNode r) => *r.children

fun get_ground () = REF Ground

fun get_ancestor_right_sibling (REF Ground) = (REF Ground)
  | get_ancestor_right_sibling (node as (REF (TreeNode r))) = 	    
         case (get_right_sibling node)
	     of (REF Ground) => get_ancestor_right_sibling (get_parent node)
	      | right_sibling  => right_sibling

fun current_node_value tt = get_value (get_subtree tt)

fun new_tree g  = 
	let new = REF (TreeNode { value = REF g,
				     current_subtree = REF TRUE,
				     parent = REF Ground,
				     left_sibling = REF Ground,
				     right_sibling = REF Ground,
				     children = REF [] } )
 
	in 
	    REF { root = new, subtree = REF (*new) }
        end 

fun delete_children ts = 
     (let f = get_children (get_subtree ts)
       in f := []  end;
     ts)

current_subtree  = get_subtree

fun is_null_tree t = case *t of Ground => TRUE | _ => FALSE
fun at_ground (t: tree)  = is_null_tree (.subtree (*t))

fun at_top ts  = is_null_tree (get_parent (get_subtree ts))

fun move_to_top ts = 
     (let st = get_subtree ts 
          t = get_tree ts 
      in ((get_subtree_flag st) := FALSE; (get_subtree_flag t) := TRUE; st := *t)
      end;ts)

fun move_to_parent ts = 
     (let t = get_subtree ts 
        in let p = (get_parent t)
            in if is_null_tree p 
               then () 
               else ((get_subtree_flag t) := FALSE; (get_subtree_flag p) := TRUE; t := *p)
            end 
        end;ts)
		      
fun move_to_left_sibling ts = 
     (let t = get_subtree ts 
        in let r = get_left_sibling t 
	   in if is_null_tree r 
	      then () 
              else ((get_subtree_flag t) := FALSE; (get_subtree_flag r) := TRUE; t := *r) end 
        end;
     ts)

fun move_to_right_sibling ts = 
     (let t = get_subtree ts 
        in let r = get_right_sibling t 
	   in if is_null_tree r 
              then () 
              else ((get_subtree_flag t) := FALSE; 
		    (get_subtree_flag r) := TRUE; 
		    t := *r) 
            end 
        end;
     ts)


fun move_to_children ts  = 
     (let t = get_subtree ts 
        in (case get_children_list t 
	     of [] => () 
	      | (r . _) => ((get_subtree_flag t) := FALSE; 
		            (get_subtree_flag r) := TRUE; 
		            t := *r) )
        end;
     ts)

fun move_to_subtree ts r  = 
     (let t = get_subtree ts 
        in ((get_subtree_flag t) := FALSE; 
            (get_subtree_flag r) := TRUE; 
	    t := *r) 
	end; ts)

fun move_to_ancestor tt gval (test, key) = 
	let fun move_up t = 
		if test (key, gval (current_node_value t)) or (at_top t)
		    then t
		    else move_up (move_to_parent t)
	
	in move_up (move_to_parent tt) end

fun change_children ts [] = ((get_children (get_subtree ts)) := []; ts)
  | change_children ts (hd . tl) = 
    (let t = get_subtree ts
         new_p = REF (*t )
         first = REF (TreeNode { value = REF hd,
				   parent = new_p,
				   current_subtree = REF FALSE, 
				   left_sibling = REF Ground,
				   right_sibling = REF Ground,
				   children = REF [] } )
         fun make_siblings (left,[]) = [left]
           | make_siblings (left, v . l) = 
                 let new = REF 
		     (TreeNode { value = REF v,
			      parent = new_p,
			      current_subtree = REF FALSE, 
			      left_sibling = left,
			      right_sibling = REF Ground,
			      children = REF[] } )
		 in (get_right_sibling left) := (*new);
		     left . (make_siblings (new, l))
		 end 
     in (get_children t) := (make_siblings (first, tl)) end;
     ts)

fun change_node_value (tt, v) = ((get_value_ref (get_subtree tt)) := v; tt) 

fun bottom_up (ts, f1, f2) = 
     let fun aux t = 
       case *t 
	 of Ground => raise exception EmptyTree
	  | (TreeNode r) => 
	        let kids = *r.children
		in case kids 
		     of [] => (f1 (*r.value))
		      | _  => (f2 ((*r.value), map aux kids))
                end
     in aux (get_tree ts) end 

fun node_apply f n_id = f (get_value n_id)

fun preorder (dt: tree) (visit, g, h, oper) []  = g
 |  preorder dt (visit, g, h, oper) (node . stack) = 
	oper ((visit node), preorder dt (visit, g, h, oper) ((h node) @ stack))

fun search_subtree (node as (REF (TreeNode n))) test_func = let
    right_sibling = get_right_sibling node
    left_most_child = (hd (get_children_list node) except Hd => (REF Ground))
			   
	  
in
    case (test_func node)
	of FALSE => (case (search_subtree left_most_child test_func)
			of NULL => (search_subtree right_sibling test_func)
		        | found_node => found_node)
       | TRUE => THE node
end

  | search_subtree (REF Ground) _ = NULL

end




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1992 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
