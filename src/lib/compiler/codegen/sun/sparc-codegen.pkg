# sparc-codegen.pkg
# Sparc specific backend

# Compiled by:
#     src/lib/compiler/backend-sparc.make6

package sparc_codegen
    = 
    codegen_g (									# codegen_g			is from   src/lib/compiler/codegen/main/codegen-g.pkg

	package machine_properties= sparc_machine_properties;				# sparc_machine_properties			is from   src/lib/compiler/codegen/sun/sparc-machine-properties.pkg
	abi_variant        = NULL;
	package t          = sparc_codetree;					# sparc_codetree		is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
	package cb         = cells_basis;					# cells_basis			is from   src/lib/compiler/lower/instruction/cells-basis.pkg
	package client_pseudo_ops= sparc_client_pseudo_ops;			# sparc_client_pseudo_ops	is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
	package pseudo_op = sparc_pseudo_ops;					# sparc_pseudo_ops		is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
	package ext        = sparc_lib7codetree_ext;				#  sparc specific 
	package fps_regs   = sparc_fps_regs;					# sparc_fps_regs		is from   src/lib/compiler/codegen/sun/sparc-fps-registers.pkg
	package instruction_properties= sparc_props;				# sparc_props			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
	package asm        = sparc_asm_emitter;					# sparc_asm_emitter		is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
	package shuffle    = sparc_shuffle;					# sparc_shuffle			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg

	package ccalls
	    =
	    sparc_ccalls_g (							# sparc_ccalls_g		is from   src/lib/compiler/lower/sun/c-calls/sparc-c-calls.pkg
		package codetree = sparc_codetree;
		fun ix x = x;
	    );

	package omit_frame_ptr {

	    package control_flow_graph = sparc_cfg;				# sparc_cfg			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
	    package instruction_set = instruction_set_sparc;			# instruction_set_sparc		is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg

	    virtual_frame_pointer
                =
                fps_regs::virtual_frame_pointer;

	    # No rewriting necessary, backend
            # uses %fp instead of %sp
            # 
	    fun omitframeptr _ = ();
	};

	package translate_codetree_to_target_machine
           =
	   translate_codetree_to_sparc_g (				# translate_codetree_to_sparc_g	is from   src/lib/compiler/lower/sun/codetree/translate-codetree-to-sparc-g.pkg
		 package instruction_set = instruction_set_sparc;
		 package sparc_codetree = sparc_codetree;
		 package pseudo_instrs= sparc_pseudo_instrs;			# sparc_pseudo_instrs		is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg

		 package extension_comp
                     =
                     sparc_codetree_extention_compiler_g (			# sparc_codetree_extention_compiler_g	is from   src/lib/compiler/codegen/sun/sparc-codetree-ext-comp.pkg
			 package instruction_set = instruction_set_sparc;
			 package codetree = sparc_codetree;
			 package codetree_stream= sparc_codetree_stream;	# sparc_codetree_stream		is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
			 package control_flow_graph= sparc_cfg;			# sparc_cfg			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
		     );

		 v9 = FALSE;
		 mulu_cost = REF 5;
		 mult_cost = REF 3;
		 divu_cost = REF 5;
		 divt_cost = REF 5;
		 registerwindow = REF FALSE;
		 use_br = REF FALSE;
		);

	package jumps
            =
	    sparc_span_dependent_jumps_g (					# sparc_span_dependent_jumps_g		is from   src/lib/compiler/lower/sun/span/sparc-jumps.pkg
                package instruction_set = instruction_set_sparc;		# instruction_set_sparc				is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
	        package codetree_eval= sparc_codetree_eval;			# sparc_codetree_eval			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
	        package shuffle= sparc_shuffle;					# sparc_shuffle				is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
            );

	package back_patch
            =
	    span_dependency_resolution_g (					# span_dependency_resolution_g		is from   src/lib/compiler/lower/span/span-dependency-resolution-g.pkg

		package control_flow_graph= sparc_cfg;				# sparc_cfg				is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
		package jumps     = jumps;
		package emitter= sparc_mcemitter;				# sparc_mcemitter			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg

		package delay_slot
                    =
                    sparc_delay_slots_g (					# sparc_delay_slots_g			is from   src/lib/compiler/lower/sun/span/sparc-delay-slots-g.pkg
		        package instruction_set        = instruction_set_sparc;	# instruction_set_sparc			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
		        package instruction_properties = instruction_properties;
                    );

		package instruction_properties = instruction_properties;
		package asm= sparc_asm_emitter;					# sparc_asm_emitter			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
	     );

	package register_allocation
            = 
	    risc_register_allocation_g (					# risc_register_allocation_g		is from   src/lib/compiler/lower/reg-alloc/risc-register-allocation-g.pkg

		package instruction_set = instruction_set_sparc;		# instruction_set_sparc			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
		package control_flow_graph= sparc_cfg;				# sparc_cfg				is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
		package instruction_properties = instruction_properties; 

		package rewrite
		    =
		    sparc_instructions_rewrite_g (				# sparc_instructions_rewrite_g		is from   src/lib/compiler/lower/sun/reg-alloc/sparc-rewrite.pkg
			instruction_set_sparc
		    );

		package spill_instr
		    =
		    sparc_spill_instructions_g (				# sparc_spill_instructions_g		is from   src/lib/compiler/lower/sun/reg-alloc/sparc-spill-instruction.pkg
			instruction_set_sparc
		    );

		package asm= sparc_asm_emitter;					# sparc_asm_emitter			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg

		package spill_heuristic= chaitin_spill_heuristic;		# chaitin_spill_heuristic		is from   src/lib/compiler/lower/reg-alloc/chaitin-spill-heuristic.pkg

		package spill
                    =
                    register_allocation_spilling_g (				# register_allocation_spilling_g	is from   src/lib/compiler/lower/reg-alloc/register-allocation-spilling-g.pkg
                        package instruction_properties = instruction_properties;
			package asm= sparc_asm_emitter;				# sparc_asm_emitter			is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
                    );

		package spill_table
                    =
                    spill_table_g (						# spill_table_g				is from   src/lib/compiler/codegen/main/spill-table-g.pkg
			sparc_machine_properties
		    );

		fp = instruction_set_sparc::cells::frameptr_r;

		spill = cpsregions::spill;

		Spill_Operand_Kind
                    =
                    SPILL_LOC | CONST_VAL;

		Spill_Info = Void;

		fun before_ra _
                    =
                    spill_table::spill_init();

		architecture_name						# "ppc", "sparc" or "x86".
		    =
		    sparc_machine_properties::architecture_name;

		package i = instruction_set_sparc;

		fun pure (i::NOTE { instruction, ... } ) => pure instruction;
		    pure (i::BASE_INSTRUCTION (i::LOAD  _)) => TRUE;
		    pure (i::BASE_INSTRUCTION (i::FLOAD _)) => TRUE;
		    pure (i::BASE_INSTRUCTION (i::SETHI _)) => TRUE;
		    pure (i::BASE_INSTRUCTION (i::SHIFT _)) => TRUE;
		    pure (i::BASE_INSTRUCTION (i::FPOP1 _)) => TRUE;
		    pure (i::BASE_INSTRUCTION (i::FPOP2 _)) => TRUE;
		    pure _ => FALSE;
                end;

		# Make copy:
                #
		package int {

		    avail     = sparc_fps_regs::avail_r;
		    dedicated = sparc_fps_regs::dedicated_r;

		    fun make_disp loc
			=
			t::LITERAL (t::machine_int::from_int (32, spill_table::get_reg_loc loc));

		    fun spill_loc { info, an, cell, id }
			= 
			{   kind => SPILL_LOC,

			    operand => i::DISPLACE {
					base => fp,
					disp => make_disp (register_allocation_graph::FRAME id),
					mem  => spill
				    }

			};

		    mode = register_allocation_core::no_optimization;
		};

		package float {

		    avail     = sparc_fps_regs::avail_f;
		    dedicated = sparc_fps_regs::dedicated_f;

		    fun make_disp loc
			=
			t::LITERAL (t::machine_int::from_int (32, spill_table::get_freg_loc loc));

		    fun spill_loc (s, an, loc)
			= 
			i::DISPLACE {
			    base => fp,
			    disp => make_disp (register_allocation_graph::FRAME loc),
			    mem  => spill
			};

		    mode = register_allocation_core::no_optimization;
		};
	    );
  );


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
