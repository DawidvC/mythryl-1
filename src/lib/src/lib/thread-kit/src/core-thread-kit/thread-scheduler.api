## thread-scheduler.api
## COPYRIGHT (c) 1989-1991 John H. Reppy

# Compiled by:
#     src/lib/std/stdlib.make6

# This api is implemented in:
#
#     src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg

api Thread_Scheduler {

    Thread_Id;

    Fate(X)    = fate::Fate(X);

    foreground_ready_queue:   internal_threadkit_types::Threadkit_Queue( (Thread_Id,  Fate( Void)) );

    get_current_thread:  Void -> Thread_Id;
    set_current_thread:  Thread_Id -> Void;

    enqueue_thread:  ((Thread_Id, Fate( Void )) ) -> Void;

    enqueue_and_switch_current_thread:  ((Fate( Void ), Thread_Id)) -> Void;
	#
	# Enqueue the given fate with the
	# current thread ID, and make the
	# given thread ID be the current one.


    enqueue_tmp_thread:  (Void -> Void) -> Void;
	#
	# Create a temporary thread (with dummy ID) to run the given
	# function and then exit.  The thread is placed on the front
	# of the scheduling queue.


    Scheduler_State = MULTI_THREAD | MONO_THREAD | SIGNAL_PENDING;

    scheduler_state:  Ref(  Scheduler_State );

    disable_thread_switching:  Void -> Void;
    reenable_thread_switching:  Void -> Void;
	#
	# Enter/leave a critical section.
	# These do NOT nest!

    reenable_thread_switching_and_dispatch_next_thread:  Void -> X;
	#
	# Leave the critical section
	# and dispatch the next thread.

    dispatch_next_thread:  Void -> X;
	#
	# Dispatch the next thread.
	#
	# This should NOT be called
        # while in a critical section.
	# In a critical section use:
        #     reenable_thread_switching_and_dispatch_next_thread ();


    reenable_thread_switching_and_switch_to_thread:  (Thread_Id, Fate(X), X) -> Void;
	#
	# Switch to the given thread
	# while leaving a critical section.

    reenable_thread_switching_and_yield_to_next_thread:  Fate( Void ) -> X;
	#
	# Yield control to the next thread
	# while leaving the critical section.


    scheduler_hook:  Ref(  Fate(  Void ) );
	#
	# This hook points to a fate that
        # gets dispatched when a preemption
	# is received or when a thread exits
	# a critical section and there is a
        # signal pending.
	#
	# It is invoked after re-enabling
	# thread scheduling -- that is,
	# after exiting the critical section.


    pause_hook:  Ref(  Fate(  Void ) );
	#
	# This hook points to a fate that gets invoked when
	# when the scheduler has nothing else to do.


    shutdown_hook:    Ref( Fate ((Bool, winix::process::Status)) );
	#
	# This hook points to a fate that
	# gets invoked when the system is
	# otherwise deadlocked.  It is
	# also invoked by  run_threadkit::shutdown.
	#
	# It takes two arguments:
	#  o A boolean flag that says whether to do clean-up.
	#  o The exit status.


    get_approximate_time:  Void -> time::Time;
	#
	# Get an approximation of the current time of day.
	#
	# The value returned was obtained from the operating
	# system via
        #     time::get_time ();
	# during the current timeslice, so it is off
        # by at most the length of that timeslice.


    reset:  Bool -> Void;

    # Control over the preemptive timer 
    #
    start_timer:    time::Time -> Void;
    stop_timer:     Void -> Void;
    restart_timer:  Void -> Void;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
