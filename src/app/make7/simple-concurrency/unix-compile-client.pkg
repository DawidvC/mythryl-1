## unix-compile-client.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/simple-concurrency/Simple_Concurrency.make6



# This is a simple facility to allow spreading
# the work of a complete 'make' across multiple
# processors on one machine, or even across
# multiple machines sharing a common filesystem,
# using Unix processes connected by pipes and ssh
# connections and such.
#
# This is still rather crude and not very robust.
#
# In this file we implement the client side of
# the protocol;  the server side is implemented in
#
#     src/app/make7/main/compile-server.pkg
#
#
# We are invoked (only) from
#
#     src/app/make7/make-compiler/make-compiler-g.pkg
#     src/app/make7/main/make7-g.pkg
#
# which use us to implement parallel compiles during
# a make, to take advantage of multiple CPUs, multiple
# cores, and/or multiple workstations.
#
# For additional discussion, see
#
#     src/app/make7/doc/13-parallel.tex


# We must (alas!) use transparent sealing here;
# otherwise the hack in
#     $ROOT/src/lib/core/make7/make7.make6
# fails.


package compile_client: (weak)  Compile_Client {		# Compile_Client	is from   src/app/make7/simple-concurrency/compile-client.api

    package p = posix;				# posix		is from   src/lib/std/src/posix/posix.pkg


    # To allow compiling test versions &tc in a
    # different filetree than the default, we
    # we allow optional rewriting of absolute
    # pathnames.  (We presume relative pathnames
    # will stay ok, and that anchored pathnames
    # will be handled by resetting the anchors.)

    Path_Translator
        =
        Null_Or( String -> String ); 


    Server
        =
        SERVER
            { id:      Int,
	      name:    String,
	      process: spawn::Process( file::Input_Stream, file::Output_Stream ),

	      path_translator: Path_Translator,
	      preference:      Int,
	      decommissioned:  Ref( Bool )
            };

					# spawn		is from   src/lib/std/src/unix/spawn.pkg
					# file		is from   src/lib/std/src/unix/posix-file.pkg


    Server_Handle
        =
        (Int, String);			#  id and name 



    fun handle_of              (SERVER { id, name,            ... } ) =  (id, name);
    fun server_id              (SERVER { id,                  ... } ) =  id;

    fun decommission           (SERVER { decommissioned,      ... } ) =  decommissioned := TRUE;
    fun decommissioned         (SERVER { decommissioned => d, ... } ) =  *d;

    fun server_name            (SERVER { name,                ... } ) =  name;
    fun server_preference      (SERVER { preference,          ... } ) =  preference;

    fun server_path_translator (SERVER { path_translator,     ... } ) =  path_translator;
    fun server_process         (SERVER { process,             ... } ) =  process;

    server_input_stream  =  #1 o spawn::streams_of o server_process;
    server_output_stream =  #2 o spawn::streams_of o server_process;



    # Build a function which returns
    # successive integers on successive calls:
    #
    new_id
        =
        {   next =  REF 0;
                    
            fn ()
                =
                {   result =  *next;

                    next  :=   result + 1;

                    result;
                };
        };


    enabled              =  REF FALSE;
    idle_compile_servers =  REF ([]: List( Server ));
    some_idle            =  REF (simple_thread::spawn_virtual_thread ());

    stipulate

	all = REF (int_map::empty: int_map::Map( Server ));

	fun nservers ()
            =
            int_map::vals_count *all;
    herein
        fun server_of (h: Server_Handle)
            =
            int_map::get (*all, #1 h);

        fun all_idle ()    =   length (*idle_compile_servers) == nservers ();
	fun no_servers ()  =   nservers () == 0;
	fun all_servers () =   int_map::vals_list *all;

	fun add_server s
            =
            {   ns   =  nservers ();
	        all :=  int_map::set (*all, server_id s, s);
	    };

	fun del_server s
            =
            {   all :=   #1 (int_map::drop (*all, server_id s));

		# If this was the last server, then we need to wake up
		# everyone who is currently waiting to grab a server.
		# The "grab"-loop will then gracefully fail and
		# not cause a deadlock.
		#
		if (no_servers ())
		    
		    file::dsay ["No more servers -> back to sequential mode.\n"];

		    simple_thread::terminate_virtual_thread
                        *some_idle;
		fi;
	    };
    end;
						# say			is from   src/lib/std/src/io/say.pkg
						# thread		is from   src/app/make7/simple-concurrency/thread.pkg
						# int_map		is from   src/app/make7/util/int-map.pkg
						# anchor_dictionary	is from   src/app/make7/paths/anchor-dictionary.pkg
						# unix_signals		is from   src/lib/std/src/unix/unix-signals.pkg
						# signals		is from   src/lib/std/src/nj/signals.pkg


    # Translate absolute pathname encoding;
    # relative and anchored paths stay unchanged:
    #
    fun maybe_translate_filename (filename, server)
        =
        case (server_path_translator  server)
	  
	     NULL          =>  filename;
	     THE translate =>  if   (anchor_dictionary::encoding_is_absolute  filename)
		                    translate filename;
		               else           filename;   fi;
        esac;


    #  Protect some code segments from sigPIPE signals... 
    #
    fun protect_from_sigpipe work
        =
	{   pipe        = unix_signals::sig_pipe;

	    fun disable ()  =          signals::set_signal_handler (pipe, signals::IGNORE);
	    fun reenable sa =  ignore( signals::set_signal_handler (pipe, sa));

	    safely::do
                { open_it  => disable,
		  close_it => reenable,
		  cleanup  => fn _ = ()
		}
	        (fn _ = work ());
	};
					# safely	is from   src/lib/std/safely.pkg
					# file	is from   src/lib/std/src/unix/posix-file.pkg


    #  Send a message to a server. This must be sigPIPE-protected. 
    #
    fun send (server, msg)
        =
        {   output_stream =  server_output_stream  server;

	    file::dsay ["-> ", server_name server, " : ", msg];

	    protect_from_sigpipe (  fn () =  {  file::write (output_stream, msg);
						file::flush output_stream;
					     }
					     except _ = ()
		                 );
	};

    fun show_idle ()
        =
        file::dsay ("Idle:" ! fold_right (fn (s, l) =  " " ! server_name s ! l)
                                        ["\n"]
                                        *idle_compile_servers
                  );



    # Mark a server idle;
    # signal all those who are
    # currently waiting for that:
    #
    fun mark_idle  server
        =
        {  idle_compile_servers   :=   server ! *idle_compile_servers;

	   simple_thread::terminate_virtual_thread
               *some_idle;

	   file::dsay ["Scheduler: server ", server_name server, " has become idle.\n"];
	   show_idle ();
        };



									# say		is from   src/lib/std/src/io/say.pkg
									# thread	is from   src/app/make7/simple-concurrency/thread.pkg
    # Grab an idle server;
    # wait if necessary;
    # reinitialize condition if taking the only server:
    #
    fun grab ()
        =

	# We need to check the following every time (at least the
	# "no_servers" part) because it might be that all servers
	# have meanwhile gone away for some reason (crashed, etc.).

# WE APPEAR TO HAVE AN INFINITE LOOP RUNNING THROUGH HERE :(
	if (not *enabled  or  no_servers ())

             NULL;

	else
             case *idle_compile_servers
	       
	          []  =>
                      {
                          simple_thread::result  *some_idle;

			  # 2007-10-03 CrT: The below grab() call results in
                          # a tight spinloop when all servers
                          # are busy -- which will frequently
                          # be the case in practice!
                          # This whole design sucks, obviously :(                             XXX BUGGO FIXME
                          #
                          # Also, one second is an awfully long
                          # time to sleep, but we apparently don't
                          # currently have a library call capable
                          # of waiting for less than a second
                          # (e.g., I can't find ML level access to
                          # select().                             XXX BUGGO FIXME
                          #
			  posix::sleep (time::from_seconds (large_int::from_int 1));	# A quick hack to ameliorate a spinwait loop.
                          grab ();
                      };

	          [only_server]
                      =>
                      {   file::dsay ["Scheduler: taking last idle server (",  server_name  only_server,  ").\n"];
			  idle_compile_servers := [];
			  some_idle := simple_thread::spawn_virtual_thread ();
			  THE only_server;
                      };

		  first ! rest
                      =>
                      {   fun find_best_server (best_yet, [], tried)
                                  =>
                                  (best_yet, tried);

			      find_best_server (best_yet, this_try ! untried, tried)
                                  =>
				  {   best_pref =  server_preference  best_yet;
				      this_pref =  server_preference  this_try;
					   
				      if   (this_pref > best_pref)
				           find_best_server (this_try, untried, best_yet ! tried);
				      else find_best_server (best_yet, untried, this_try ! tried);
                                      fi;
				  };
                          end;

			  my (best_server, rest)
                              =
                              find_best_server (first, rest, []);
				   
			  file::dsay ["Scheduler: taking idle server (", server_name best_server, ").\n"];
			  idle_compile_servers := rest;
			  show_idle ();
			  THE best_server;
		      };
             esac;
        fi;

    fun wait_status (server, echo)
        =
        {
	    name = server_name server;

	    input_stream
                =
                server_input_stream  server;

	    fun unexpected l
		=
		{   fun word (w, l)
                        =
                        " " ! w ! l;

		    file::say ("! Unexpected response from server " ! name ! ":" ! fold_right word ["\n"] l);
		};

	    fun server_exit ()
                =
                {   what =  if  (protect_from_sigpipe
                                     (fn () =  spawn::reap (server_process server))   ==   winix::process::success
			    )    "shut down";
			    else "crashed";   fi;
							# spawn	is from   src/lib/std/src/unix/spawn.pkg
		
		    decommission server;
		    file::say ["[!Server ", name, " has ", what, ".]\n"];
		    del_server server;
		};

	    show =  if echo   fn report =  file::say (reverse report);
		    else      fn _      =  ();                     fi;

	    fun loop report
                =
		if (decommissioned server)

                    FALSE;

		else

		    simple_thread::result
			(simple_thread::spawn_stream_proxy_thread
			    input_stream
			);

		    case (file::read_line  input_stream)

			 NULL
			     =>
			     {
				 server_exit ();

				 FALSE;
			     };

			 THE line
			     =>
			     {   file::dsay ["<- ", name, ": ", line];

				 case (string::tokens  char::is_space  line)

				      ["SLAVE:", "ok"   ]
					  =>
					  {
					      mark_idle server;
					      show report;
					      TRUE;
					  };

				      ["SLAVE:", "error"]
					  =>
					  {
					      mark_idle server;
					      # In the case of error we don't show
					      # the report because it will be re-enacted
					      # locally.
					      FALSE;
					  };

				      "SLAVE:" ! l
					  =>
					  {
					      unexpected l;
					      loop report;
					  };

				      _   =>
					  {
					      loop (line ! report);
					  };
				 esac;
			     };
		    esac;
               fi;
	
	    loop [];
	};



    # Send a "ping" to all servers and wait for the "pong" responses.
    # 
    # This should work for all servers, busy or no.  Busy servers will
    # take longer to respond because they first need to finish what
    # they are doing.
    #
    # We use wait_all after we receive an interrupt signal.
    #
    # The ping-pong protocol does not suffer from
    # the race condition that we would have if we wanted
    # to only wait for "ok"s from currently busy servers.
    #
    # The race would happen when an interrupt occurs between receiving
    # "ok" and marking the corresponding server idle).
    #
    fun wait_all  is_int
        =
        {   all =  all_servers ();

	    fun ping server
                =
                {   name =  server_name  server;

		    input_stream
                        =
                        server_input_stream  server;


								# thread	is from   src/app/make7/simple-concurrency/thread.pkg
								# file	is from   src/lib/std/src/unix/posix-file.pkg
								# say		is from   src/lib/std/src/io/say.pkg
								# string	is from   src/lib/std/string.pkg
								# list		is from   src/lib/std/src/list.pkg


		    fun loop ()
                        =
			if   (not (decommissioned server))
			     
			     simple_thread::result
                                 (simple_thread::spawn_stream_proxy_thread
                                     input_stream
                                 );

			     case (file::read_line  input_stream)
			       
			          NULL
                                      =>
                                      file::dsay ["<-(EOF) ", name, "\n"];     #  server has gone away -> no pong 

				  THE line
                                      =>
                                      {   file::dsay ["<- ", name, ": ", line];

					  case (string::tokens  char::is_space  line)
					    
					       ["SLAVE:", "pong"] =>  ();
					       _                  =>  loop ();
                                          esac;
                                      };
                             esac;
                        fi;
		
		    send (server, "ping\n");
		    loop ();
		};

	    some_servers_idle
                =
                simple_thread::spawn_virtual_thread ();
	
	    if (not (list::null all))
	        
		simple_thread::terminate_virtual_thread
		    some_servers_idle;

		if is_int
		    file::say ["Waiting for attached servers to become idle...\n"];
		fi;
	    fi;

	    apply ping all;

	    idle_compile_servers :=  all;
	    some_idle            :=  some_servers_idle;
	};

    fun shutdown (server, method')
        =
        {   i =  server_id  server;

	    fun unidle ()
                =
                idle_compile_servers
                    :=
                    #2 (   list::partition 
                               (fn s' =  server_id s' == i)
                               *idle_compile_servers
                       );

	    fun wait_for_exit ()
                =
                {   unidle ();
		    ignore (wait_status (server, FALSE));

		    if   (not (decommissioned server))
		        
                         wait_for_exit ();
		    fi;
		};
	
	    method' ();
	    wait_for_exit ();
	};


    #                         "If any question why we died,
    #                          Tell them, because our fathers lied."
    #
    #                                           -- Rudyard Kipling

    fun stop server   =   shutdown (server, fn () =  send (server, "shutdown\n"));
    fun kill server   =   shutdown (server, fn () =  spawn::kill (server_process server, p::signal::term));

							# spawn	is from   src/lib/std/src/unix/spawn.pkg

    # This function is (only) invoked
    # by start_a_compile_server in
    # 
    #     src/app/make7/main/make7-g.pkg
    # 
    # (via the trivial 'start' wrapper at bottom of this file).
    # 
    # A typical invocation would be
    # 
    #    make7::compile_server::start_a_compile_server
    #        {
    #          name            =>  "A",
    #          path_translator =>  NULL,
    #          preference      =>  0,
    #          cmd             =>  ("/path/to/bin/mythryld", ["--compile-server"])
    #        };
    # 
    fun start
        { name,			# String name for server.  Arbitrary, used to label server output for human consumption.
          cmd,			# String value passed to spawn::execute.
          path_translator,	# Usually NULL, used to translate filenames on remote compile servers with different directory trees.
          preference		# Integer priority affecting which compile server to use if more than one is idle (rare).
        }
        =
        {   process =  spawn::spawn_process  cmd;
	    i       =  new_id ();
	    s       =  SERVER { id      => i,
			       name,
			       process,

			       path_translator,
			       preference,

			       decommissioned => REF FALSE
			     };
	
	    if   (wait_status (s, FALSE))
                
                 add_server s;
                 THE s;
	    else
                 NULL;
            fi;
	};


    fun compile project
        =
        case (grab ())
	  
	     NULL
                 =>
                 FALSE;

	     THE server
                 =>
                 {   filename =  maybe_translate_filename (project, server);
		       
		     file::vsay ["[(", server_name server, "): compiling ", filename, "]\n"];
		     send (server, cat ["compile ", filename, "\n"]);
		     wait_status (server, TRUE);
		 };
        esac;					# say		is from   src/lib/std/src/io/say.pkg


    fun reset  is_int
        =
        {   simple_thread::reset_thread_manager ();
            wait_all  is_int;
        };


    fun start_all  st
        =
        {   l  = *idle_compile_servers;
	                                                           
            idle_compile_servers := [];

	    tl =
               map
                   (fn s =  simple_thread::make_simple_thread .{ st s;})
                   l;
	
	    safely::do {			# safely	is from   src/lib/std/safely.pkg
                open_it  =>  fn () = (),
		close_it =>  fn () = (),
		cleanup  =>  reset
            }
	    .{ apply simple_thread::result tl; };
	};


    fun cd directory
        =
	start_all  st
        where
            fun st server
                =
                {   directory' =  maybe_translate_filename (directory, server);
		
		    send (server, cat ["cd ", directory', "\n"]);

		    ignore (wait_status (server, FALSE));
		};
	end;


    # This is called from make7_g in
    #
    #     src/app/make7/main/make7-g.pkg
    #
    # as part of set-up for doing makes:
    #
    fun make
        { platform,        #  "x86-linux" or such.                         
          project          #  Sourcefile path for the project .make6 file. 
        }
        =
	start_all st
        where
            fun st server
		=
		{   filename   =   maybe_translate_filename (project, server);

		    send (server, cat ["cm ", platform, " ", filename, "\n"]);

		    ignore  (wait_status (server, FALSE));
		};
	end;


    fun make_compiler { build_directory,
              platform,                          #  "x86-linux" or such. 
              root
            }
        =
	start_all st
        where
            fun st server
                =
		{   send (server, cat ["cmb ", build_directory, " ", platform, " ", root, "\n"]);

		    ignore (wait_status (server, FALSE));
                };
	
	end;


    fun make_compiler_reset {
            platform				#  "x86-linux" or such. 
        }
        =
	start_all st
        where
            fun st server
                =
		{   send (server, cat ["cmb_reset ", platform, "\n"]);
		    ignore (wait_status (server, FALSE));
                };
	
	end;

    fun enable  ()   =   enabled := TRUE;
    fun disable ()   =   enabled := FALSE;

    fun with_servers f
        =
        safely::do				# safely	is from   src/lib/std/safely.pkg
            {
              open_it  =>  enable,
	      close_it =>  disable,
	      cleanup  =>  reset
	    }
	    f;

    fun name ((i, n)   :   Server_Handle)
        =
        n;

    fun handle_fun  function  handle
        =
        case (server_of handle)
	  
	     NULL       =>  ();
	     THE server =>  function server;
        esac;

    #                           "Too much work and too much energy
    #                            kill a man just as effectively as
    #                            too much assorted vice or too much drink."
    #
    #                                           -- Rudyard Kipling


    stop  =  handle_fun  stop;
    kill  =  handle_fun  kill;

    start =  null_or::map  handle_of  o  start;

    my _ = anchor_dictionary::add_cwd_watcher  cd;

							# null_or		is from   src/lib/std/src/null-or.pkg
							# anchor_dictionary	is from   src/app/make7/paths/anchor-dictionary.pkg

};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
