/*
 * This module performs liveness analysis.
 * It is implemented by instantiating the data flow analyzer module.
 *
 * -- Allen Leung
 */

api LIVENESS_ANALYSIS =
api
  
   package control_flow_graph:  Control_Flow_Graph
   package i:    Instruction_Set
       sharing control_flow_graph::I = I

   my liveness:  
       { cfg:       control_flow_graph::cfg,
         liveOut:   control_flow_graph::block graph::node ->  List( i::C::cell ),
         defUse:    control_flow_graph::block graph::node -> List( i::C::cell ) * List( i::C::cell ),
         result:    { block: graph::node( control_flow_graph::block ), 
                     liveIn: List( i::C::cell ), liveOut: List( i::C::cell ) } -> Void
       } -> Void

end

generic package LivenessAnalysis (control_flow_graph:  Control_Flow_Graph) : LIVENESS_ANALYSIS {


   package control_flow_graph = control_flow_graph
   package i   = control_flow_graph::I
   package c   = i::C
   package a   = Annotations
   package sl  = c::SortedCells
   package g   = graph

   package liveness =
      Dataflow
         (pkg
              package control_flow_graph    = control_flow_graph
              type domain    = sl::sorted_cells
              forward    = FALSE
              bot        = sl::empty
              my  ====   = sl::eq
              join       = list::fold_right sl::union sl::empty 
              my  op +       = sl::union
              my  op -       = sl::difference
              type dataflow_info = 
                  { liveOut:  control_flow_graph::block graph::node -> List( c::cell ),
                    defUse:   control_flow_graph::block graph::node -> 
                                List( c::cell ) * List( c::cell ),
                    result:   { block: graph::node( control_flow_graph::block ), 
                               liveIn: List( i::C::cell ), 
                               liveOut: List( i::C::cell ) } -> Void
                  }

              fun prologue (cfg,{ defUse, liveOut, ... }:dataflow_info) (b, b') =
                  let my (def, use) = defUse (b, b')
                      def       = sl::uniq def
                      use       = sl::uniq use
                      live_out  = sl::uniq (liveOut (b, b'))
                  in  { input    = live_out,
	                output   = (live_out - def) + use,
	                transfer = fn live_out => (live_out - def) + use
                      }
                  end

              fun epilogue (cfg,{ result, ... }:dataflow_info)
                          { node, input=liveOut, output=liveIn } = 
                  result { block=node, liveIn=sl::return liveIn, 
                                     liveOut=sl::return liveOut }
         end
        )

   fun liveness { cfg, liveOut, defUse, result } = 
       (liveness::analyze (cfg, { liveOut=liveOut, defUse=defUse, result=result } );
        ()
       )

}
