/*
 * This is the example I used in the PACT '98 paper
 */
package Test1 =
pkg

   package g = directed_graph

   fun makeDag nodes edges =
   let my dag as graph::GRAPH G = g::graph("Test1", (), 10)
   in  apply (fn n => G.add_node (n, n)) nodes;
       apply G.add_edge edges;
       dag
   end

   dag = makeDag [1, 2, 3, 4, 5, 6, 7, 8]
                     [(1, 2, 0),
                      (1, 4, 0),
                      (2, 3, 0),
                      (2, 5, 0),
                      (4, 3, 1),
                      (4, 5, 1),
                      (3, 6, 1),
                      (7, 6, 0)
                     ]

   fun close dag =
       transitive_closure::acyclic_transitive_closure2 
          {+   = fn (i, j) => i+j+1,
           max = int::max
          } dag

   fun palemSimons (dag as graph::GRAPH G) =
   let my dag' as graph::GRAPH G' = g::graph("Tmp", (), 10)
       G.forall_nodes G'.add_node
       G.forall_edges G'.add_edge
   in  PalemSimons::rank { dag = dag',
                        l   = fn(_, _, l) => l,
                        d   = fn _ => 10,
                        m   = 1
                       } 
   end

   package view = graph_viewer_g (da_vinci)
   package l    = graph_layout

   fun view dag =
       view::view(
          l::makeLayout { node=fn (n, _)=>[l::LABEL (int::to_string n)],
                       edge=fn (i, j, l)=>[l::LABEL (int::to_string l), l::COLOR "red"],
                       graph=fn _ =>[] } dag
       )

end
