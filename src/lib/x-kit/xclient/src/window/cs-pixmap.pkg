## cs-pixmap.pkg
#
#   Client-side rectangular arrays of pixels,
#   Support for copying back and forth between them
#   and server-side windows makes them useful for
#   specifying icons, tiling patterns and other
#   client-originated image data intended for X display.
#
# See also the server-side windows:
#     src/lib/x-kit/xclient/src/window/ro-pixmap.pkg
#     src/lib/x-kit/xclient/src/window/window.pkg
#     src/lib/x-kit/xclient/src/window/rw-pixmap.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6



#
# TODO			XXX BUGGO FIXME
#   - support a left-pad
#   - support Z format



###                  "Science is what we understand well enough to explain
###                   to a computer.  Art is everything else we do."
###
###                                          -- Donald Knuth

stipulate
    include threadkit;			# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package w8v= unt8_vector;		# unt8_vector		is from   src/lib/std/src/unt8-vector.pkg
    package w8= unt8;			# unt8			is from   src/lib/std/unt8.pkg
    #
    package di  =  draw_imp;		# draw_imp		is from   src/lib/x-kit/xclient/src/window/draw-imp.pkg
    package dt  =  draw_types;		# draw_types		is from   src/lib/x-kit/xclient/src/window/draw-types.pkg
    package dy  =  display;		# display		is from   src/lib/x-kit/xclient/src/wire/display.pkg
    package ge  =  geometry;		# geometry		is from   src/lib/x-kit/xclient/src/window/geometry.pkg
    package sn  =  xsession;		# xsession		is from   src/lib/x-kit/xclient/src/window/xsession.pkg
    package w2v =  wire_to_value;	# wire_to_value		is from   src/lib/x-kit/xclient/src/wire/wire-to-value.pkg
    package wpm =  rw_pixmap;		# rw_pixmap		is from   src/lib/x-kit/xclient/src/window/rw-pixmap.pkg
    package v2w =  value_to_wire;	# value_to_wire		is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
    package xok =  xsocket;		# xsocket		is from   src/lib/x-kit/xclient/src/wire/xsocket.pkg
    package xt  =  xtypes;		# xtypes		is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
herein

    package cs_pixmap: (weak) Cs_Pixmap {


	exception BAD_CS_PIXMAP_DATA;

	w8vextract
	    =
	    unt8_vector_slice::to_vector
	    o
	    unt8_vector_slice::make_slice;

	Cs_Pixmap
	    =
	    CS_PIXMAP
	      { size:  ge::Size,
		data:  List(  List(  unt8_vector::Vector ) )
	      };

	# Map a row of data coded as
	# a string to a bit representation.
	# The data may be either encoded
	# in hex (with a preceeding "0x")
	# or in binary (with a preceeding "0b"):
	#
	fun string_to_data (wid, s)
	    =
	    case (string::explode s)

		('0' ! 'x' ! r)
		    =>
		    make_row (nbytes, r, [])
		    where
			nbytes = ((wid + 7) / 8);   #  # of bytes per line 

			fun cvt_char c
			    =
			    if (char::is_digit c)

				 byte::char_to_byte c - byte::char_to_byte '0';
			    else
				 if (char::is_hex_digit c)

				      char::is_upper c
				      ??  byte::char_to_byte c - byte::char_to_byte 'A'
				      ::  byte::char_to_byte c - byte::char_to_byte 'a';
				 else
				      raise exception BAD_CS_PIXMAP_DATA;
				 fi;
			    fi;

			fun make_row (0, [], l) =>  w8v::from_list (reverse l);
			    make_row (0,  _, _) =>  raise exception BAD_CS_PIXMAP_DATA;

			    make_row (i, d1 ! d0 ! r, l)
				=>
				make_row (i - 1, r,
				  w8::bitwise_or (w8::(<<) (cvt_char d1, 0u4), cvt_char d0) ! l);

			    make_row _
				=>
				raise exception BAD_CS_PIXMAP_DATA;
			end;
		    end;

		('0' ! 'b' ! r)
		    =>
		    make_row (wid, 0ux80, r, 0u0, [])
		    where
			fun make_row (0, _, [], b, l)
				=>
				w8v::from_list (reverse (b ! l));

			    make_row (_, _, [], _, _)
				=>
				raise exception BAD_CS_PIXMAP_DATA;

			    make_row (i, 0u0, l1, b, l2)
			       =>
			       make_row (i, 0ux80, l1, 0u0, b ! l2);

			    make_row (i, m, '0' ! r, b, l)
			       =>
			       make_row (i - 1, w8::(>>) (m, 0u1), r, b, l);

			    make_row (i, m, '1' ! r, b, l)
			       =>
			       make_row (i - 1, w8::(>>) (m, 0u1), r, w8::bitwise_or (m, b), l);

			    make_row _
				=>
				raise exception BAD_CS_PIXMAP_DATA;
			end;
		    end;

		_   => raise exception BAD_CS_PIXMAP_DATA;
	    esac;


	# Reverse the bit-order of a byte 
	#
	fun rev_bits b					# XXX BUGGO FIXME this should be a general library routine somewhere.
	    =
	    {
		rev_table = byte::string_to_bytes "\
		      \\000\128\064\192\032\160\096\224\
		      \\016\144\080\208\048\176\112\240\
		      \\008\136\072\200\040\168\104\232\
		      \\024\152\088\216\056\184\120\248\
		      \\004\132\068\196\036\164\100\228\
		      \\020\148\084\212\052\180\116\244\
		      \\012\140\076\204\044\172\108\236\
		      \\028\156\092\220\060\188\124\252\
		      \\002\130\066\194\034\162\098\226\
		      \\018\146\082\210\050\178\114\242\
		      \\010\138\074\202\042\170\106\234\
		      \\026\154\090\218\058\186\122\250\
		      \\006\134\070\198\038\166\102\230\
		      \\022\150\086\214\054\182\118\246\
		      \\014\142\078\206\046\174\110\238\
		      \\030\158\094\222\062\190\126\254\
		      \\001\129\065\193\033\161\097\225\
		      \\017\145\081\209\049\177\113\241\
		      \\009\137\073\201\041\169\105\233\
		      \\025\153\089\217\057\185\121\249\
		      \\005\133\069\197\037\165\101\229\
		      \\021\149\085\213\053\181\117\245\
		      \\013\141\077\205\045\173\109\237\
		      \\029\157\093\221\061\189\125\253\
		      \\003\131\067\195\035\163\099\227\
		      \\019\147\083\211\051\179\115\243\
		      \\011\139\075\203\043\171\107\235\
		      \\027\155\091\219\059\187\123\251\
		      \\007\135\071\199\039\167\103\231\
		      \\023\151\087\215\055\183\119\247\
		      \\015\143\079\207\047\175\111\239\
		      \\031\159\095\223\063\191\127\255";

		w8v::get (rev_table, w8::to_int b);
	    };

	# Routines to re-order bits and bytes to the server's format (stolen from
	# XPutImage::c in Xlib).  We represent data in the following format:
	#
	#   scan-line unit = 1 byte
	#   byte-order     = MSB first (doen't matter for 1-byte scan units)
	#   bit-order      = MSB first (bit 0 is leftmost on display)
	#
	# This is the "1Mm" format of XPutImage::c in Xlib.  The relevant lines
	# in the conversion table are:
	#
	#         1Mm 2Mm 4Mm 1Ml 2Ml 4Ml 1Lm 2Lm 4Lm 1Ll 2Ll 4Ll
	#   1Mm:   n   n   n   R   S   L   n   s   l   R   R   R
	#   1Ml:   R   R   R   n   s   l   R   S   L   n   n   n
	#
	#   legend:
	#		n   no changes
	#		s   reverse 8-bit units within 16-bit units
	#		l   reverse 8-bit units within 32-bit units
	#		R   reverse bits within 8-bit units
	#		S   s+R
	#		L   l+R

	fun no_swap x = x;

	fun swap_bits data
	    =
	    w8v::from_list (w8v::fold_right (fn (b, l) = rev_bits b ! l) [] data);

	fun explode_v data
	    =
	    w8v::fold_right (!) [] data;

	fun swap2bytes s
	    =
	    {   fun swap [] => [];
		    swap (a ! b ! r) => b ! a ! (swap r);
		    swap _ => (xgripe::impossible "[swap2Bytes: bad image data]");
		end;

		w8v::from_list (swap (explode_v s));
	    };

	fun swap4bytes s
	    =
	    {
		fun swap [] => [];
		    swap (a ! b ! c ! d ! r) => d ! c ! b ! a ! (swap r);
		    swap _ => (xgripe::impossible "[swap4Bytes: bad image data]");
		end;

		w8v::from_list (swap (explode_v s));
	    };

	fun swap_bits_and2bytes s
	    =
	    {
		fun swap [] => [];
		    swap (a ! b ! r) => (rev_bits b) ! (rev_bits a) ! (swap r);
		    swap _ => (xgripe::impossible "[swapBitsAnd2Bytes: bad image data]");
		end;

		w8v::from_list (swap (explode_v s));
	    };

	fun swap_bits_and4bytes  s
	    =
	    {
		fun swap []
			=>
			[];

		    swap (a ! b ! c ! d ! r)
			=>
			(rev_bits d) ! (rev_bits c) ! (rev_bits b) ! (rev_bits a) ! (swap r);

		    swap _
			=>
			(xgripe::impossible "[swapBitsAnd4Bytes: bad image data]");
		end;

		w8v::from_list (swap (explode_v s));
	    };

	fun swap_func ( xt::RAW8, xt::MSBFIRST, xt::MSBFIRST) => no_swap;
	    swap_func (xt::RAW16, xt::MSBFIRST, xt::MSBFIRST) => no_swap;
	    swap_func (xt::RAW32, xt::MSBFIRST, xt::MSBFIRST) => no_swap;
	    swap_func ( xt::RAW8, xt::MSBFIRST, xt::LSBFIRST) => swap_bits;
	    swap_func (xt::RAW16, xt::MSBFIRST, xt::LSBFIRST) => swap_bits_and2bytes;
	    swap_func (xt::RAW32, xt::MSBFIRST, xt::LSBFIRST) => swap_bits_and4bytes;
	    swap_func ( xt::RAW8, xt::LSBFIRST, xt::MSBFIRST) => no_swap;
	    swap_func (xt::RAW16, xt::LSBFIRST, xt::MSBFIRST) => swap2bytes;
	    swap_func (xt::RAW32, xt::LSBFIRST, xt::MSBFIRST) => swap4bytes;
	    swap_func ( xt::RAW8, xt::LSBFIRST, xt::LSBFIRST) => swap_bits;
	    swap_func (xt::RAW16, xt::LSBFIRST, xt::LSBFIRST) => swap_bits;
	    swap_func (xt::RAW32, xt::LSBFIRST, xt::LSBFIRST) => swap_bits;
	end;

	fun pad_to_bits xt::RAW8 => 0u8;
	    pad_to_bits xt::RAW16 => 0u16;
	    pad_to_bits xt::RAW32 => 0u32;
	end;

	fun round_down (nbytes, pad)
	    =
	    unt::to_int_x(
	      unt::bitwise_and (unt::from_int nbytes, unt::bitwise_not((pad_to_bits pad) - 0u1)));

	fun round_up (nbytes, pad)
	    =
	    {
		bits = (pad_to_bits pad) - 0u1;

		unt::to_int_x (unt::bitwise_and (unt::from_int nbytes + bits, unt::bitwise_not bits));
	    };

	# Pad and re-order image data as necessary
	# to match the server's format.
	#
	stipulate

	    pad1 = w8v::tabulate (1, fn _ = 0u0);
	    pad2 = w8v::tabulate (2, fn _ = 0u0);
	    pad3 = w8v::tabulate (3, fn _ = 0u0);

	herein

	    fun adjust_image_data (dy::XDISPLAY dpy_info)
		=
		{
		    fun extra (v, m)
			=
			unt::bitwise_and (unt::from_int (w8v::length v), m);

		    pad_scan_line
			=
			case dpy_info.bitmap_scanline_pad

			    xt::RAW8
				=>
				fn s = s;

			    xt::RAW16
				=>
				fn s =
				    if (extra (s, 0u1) == 0u0)  s;
				    else                        w8v::cat [s, pad1];
				    fi;

			    xt::RAW32
				=>
				fn s =  case (extra (s, 0u3))
					    #
					    0u0 => s;
					    0u1 => w8v::cat [s, pad3];
					    0u2 => w8v::cat [s, pad2];
					    _   => w8v::cat [s, pad1];
					esac;


			esac;

		    swapfn
			=
			swap_func
			  (
			    dpy_info.bitmap_scanline_unit,
			    dpy_info.image_byte_order,
			    dpy_info.bitmap_bit_order
			  );

		    fn data
			=
			map (fn s = swapfn (pad_scan_line s))
			    data;
		};
	end;

	# Copy rectangle from clientside window
	# into server-side offscreen window.
	#
	# It wouldn't take much to generalize
	# this to all drawables & pens. Additional
	# efficiency could be gained by having the
	# extract_row function extract rows already
	# padded correctly for the display when possible. XXX BUGGO FIXME
	#
	fun copy_from_clientside_pixmap_to_pixmap pm { from=>CS_PIXMAP { size, data }, from_box, to_point }
	    =
	    {   #  Clip from_box to clientside window:
		#
		from_box' = ge::intersection (from_box, ge::make_box (ge::point_00, size));

		delta
		    =
		    ge::sub_pt
		      ( ge::upperleft_of_box  from_box',
			ge::upperleft_of_box  from_box
		      );

		depth =  list::length data;

		pm  -> dt::RW_PIXMAP { id, screen, screen_depth=>sn::SCREEN_DEPTH_IMPS { draw_fn, ... }, ... };

		screen -> sn::SCREEN { xsession=>sn::XSESSION { xdisplay as dy::XDISPLAY dpy_info, ... }, ... } ;

		scanline_pad  =  dpy_info.bitmap_scanline_pad;
		scanline_unit =  dpy_info.bitmap_scanline_unit;

		# Minimum no. of 4-byte words needed for PutImage.
		# There should be a function in XRequest to provide this.	XXX BUGGO FIXME
		#
		request_size = 6;

		# Number of image bytes per request:
		#
		available = (int::min (dpy_info.max_request_length, 65536) - request_size) * 4;

		fun copy_from_clientside_pixmap_to_pixmap_request (r as ge::BOX { col, row, wide, high }, to_point)
		    =
		    {
			left_pad
			    =
			    unt::to_int_x (
				unt::bitwise_and (unt::from_int col, pad_to_bits scanline_unit - 0u1)
			    );

			byte_offset = (col - left_pad) / 8;

			num_bytes   = round_up (wide + left_pad, xt::RAW8) / 8;

			adjust      = adjust_image_data xdisplay;

			# Given the list of data for a plane, extract a list of substrings
			# corresponding to given rectangle, to the nearest byte.
			#
			fun extract_box (rows:  List( w8v::Vector ))
			    =
			    {
				fun skip (0, r) => r;
				    skip (i, _ ! r) => skip (i - 1, r);
				    skip (i, []) => xgripe::impossible "cs_pixmap: extract_box (skip)";
				end;


				fun extract_row (0, _)
					=>
					[];

				    extract_row (i, my_row ! rest)
					=>
					if (   byte_offset == 0
					   and num_bytes == w8v::length my_row
					   )

					     my_row ! (extract_row (i - 1, rest));
					else
					     (w8vextract (my_row, byte_offset, THE num_bytes))
					     !
					     (extract_row (i - 1, rest));
					fi;

				    extract_row (i,[])
					=>
					xgripe::impossible "cs_pixmap: extract_row";
				end;

				extract_row (high, skip (row, rows));
			    };

			xdata =  map  extract_box  data;

			draw_fn
			    (di::DMSG
			      {
				to  => id,
				pen => pen::default_pen,
				op  => di::DOP_PUT_IMAGE {
				    to_point,
				    size => ge::SIZE { wide, high },
				    depth,
				    lpad => left_pad,
				    format => xt::XYPIXMAP,
	  /*** THIS SHOULD BE
				    data = w8v::cat (list::cat (map adjust xdata))
	  ***/
				    data => w8v::cat (map (w8v::cat o adjust) xdata)
				  }
			      }
			    );
		      };					# fun copy_from_clientside_pixmap_to_pixmap_request

		# Decompose copy_from_clientside_pixmap_to_pixmap
		# into multiple requests smaller than max size.
		#
		# First try to use as many rows as possible;
		# if there is only one row left and it is
		# still too large, decompose by columns:
		#
		fun put_sub_image (r as ge::BOX { col, row, wide, high }, pt as ge::POINT { col=>dx, row=>dy } )
		    =
		    {   left_pad
			    =
			    unt::to_int_x (unt::bitwise_and (unt::from_int col,  pad_to_bits scanline_unit - 0u1));

			bytes_per_row
			    =
			    (round_up (wide + left_pad, scanline_pad) / 8) * depth;

			if ((bytes_per_row * high) <= available)
			    #
			    copy_from_clientside_pixmap_to_pixmap_request (r, pt);
			else
			    if (high > 1)
				#
				high' = int::max (1, available / bytes_per_row);

				put_sub_image (ge::BOX { col, row, wide, high=>high' }, pt);
				put_sub_image (ge::BOX { col, row=>row+high', wide, high=>high-high' }, ge::POINT { col=>dx, row=>dy+high' } );
			    else
				wide' = round_down (available * 8, scanline_pad) - left_pad;

				put_sub_image (ge::BOX { col, row, wide=>wide', high=>1 }, pt);
				put_sub_image (ge::BOX { col=>col+wide', row, wide=>wide-wide', high=>1 }, ge::POINT { col=>dx+wide', row=>dy } );
			    fi;
			fi;
		    };

		put_sub_image (from_box', ge::add_pt (to_point, delta));

	    };				# fun copy_from_clientside_pixmap_to_pixmap 



	#  Create image data from an ascii representation 
	#
	fun make_clientside_pixmap_from_ascii (wide, p0 ! rest)
		=>
		{   fun mk (n, [],    l) =>   (n, reverse l);
			mk (n, s ! r, l) =>   mk (n+1, r, string_to_data (wide, s) ! l);
		    end;

		    my (high, plane0)
			=
			mk (0, p0, []);

		    fun check data
			=
			{   my (h, plane)
				=
				mk (0, data,[]); 


			    if (h == high)    plane;
			    else              raise exception  BAD_CS_PIXMAP_DATA;
			    fi;
			};

		    CS_PIXMAP {
			size   =>   ge::SIZE { wide, high },
			data =>   plane0 ! (map check rest)
		    };
	       };

	    make_clientside_pixmap_from_ascii (wide, [])
		=>
		raise exception BAD_CS_PIXMAP_DATA;
	end;



	# Create a server-side offscreen window from
	# data in a client-side window:
	#
	fun make_readwrite_pixmap_from_clientside_pixmap
		screen
		(cs_pixmap as CS_PIXMAP { size, data } )
	    =
	    pixmap
	    where
		depth = length data;

		pixmap
		    =
		    wpm::make_readwrite_pixmap
			screen
			(size, depth);

		copy_from_clientside_pixmap_to_pixmap
		    pixmap
		    {
		      from     =>  cs_pixmap, 
		      from_box =>  ge::make_box (ge::point_00, size), 
		      to_point =>  ge::point_00
		    };
	    end;


	# Create an pixmap from ascii data:
	#
	fun make_readwrite_pixmap_from_ascii_data
		screen
		(wide, ascii_rep)
	    =
	    make_readwrite_pixmap_from_clientside_pixmap
		screen
		(make_clientside_pixmap_from_ascii (wide, ascii_rep));

	# Create a client-side window from
	# a server-side offscreen window.
	#
	# This should be better integrated with
	# the draw_imp to avoid a possible race
	# condition: We need to be sure the
	# draw_imp flush has occurred before we
	# ask for the clientside window.	XXX BUGGO FIXME
	#
	fun make_clientside_pixmap_from_readwrite_pixmap (dt::RW_PIXMAP { id, size => size as ge::SIZE szinfo, screen_depth, screen } )
	    =
	    {   screen_depth -> sn::SCREEN_DEPTH_IMPS { depth, draw_fn, ... };

		my sn::XSESSION { xdisplay => dy::XDISPLAY dpy_info, ... }
		    =
		    sn::xsession_of_screen screen;

		draw_fn (di::DMSG_FLUSH);

		all_planes = unt::bitwise_not 0u0;

		msg = v2w::encode_get_image { 
			drawable => id, 
			box => ge::make_box (ge::point_00, size),
			plane_mask => xt::PLANEMASK all_planes, 
			format => xt::XYPIXMAP
		      };

		my { depth, data, visualid }
		    = 
		    w2v::decode_get_image_reply
			(
			do_mailop
			    (
			    xok::request_reply  dpy_info.xsocket  msg
			    )
			);

		swapfn
		    =
		    swap_func
		      (
			dpy_info.bitmap_scanline_unit,
			dpy_info.image_byte_order,
			dpy_info.bitmap_bit_order
		      );

		lines_per_plane = szinfo.high;

		bytes_per_line  = round_up (szinfo.wide, dpy_info.bitmap_scanline_pad) / 8;
		bytes_per_plane = bytes_per_line * lines_per_plane;

		fun do_line start
		    =
		    swapfn (w8vextract (data, start, THE bytes_per_line));

		fun make_line (i, start)
		    =
		    i == lines_per_plane
		    ??  []
		    ::  (do_line start) ! (make_line (i+1, start+bytes_per_line));

		fun make_plane (i, start)
		    =
		    i == depth
		    ??  []
		    ::  (make_line (0, start)) ! (make_plane (i+1, start+bytes_per_plane));

		  CS_PIXMAP { size, data=>make_plane (0, 0) };
	      };						# fun make_clientside_pixmap_from_readwrite_pixmap 


	fun make_clientside_pixmap_from_readonly_pixmap (dt::RO_PIXMAP pm)
	    =
	    make_clientside_pixmap_from_readwrite_pixmap   pm;

    };									# package cs_pixmap

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
