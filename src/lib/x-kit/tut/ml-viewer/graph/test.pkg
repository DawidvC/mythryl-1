
					# attribute_graph_g	is from   src/lib/x-kit/tut/ml-viewer/graph/attribute-graph-g.pkg

package ag
    =
    attribute_graph_g (
	Graph_Info = Void; 
        Edge_Info  = Void;
        Node_Info  = Void;
    );

package test {

    stipulate

	exception FAIL String;
	fun dummy () = ()

	package gio = GraphIO (package io = io
				 package g = AG
				 mkGraphInfo = dummy
				 mkNodeInfo = dummy
				 mkEdgeInfo = dummy)
    herein

	fun rg name				# "rg" may be "read graph"
	    =
	    let
		ins = (open_in name) except Io msg => raise exception FAIL msg
		g = 
		  (GIO::readGraph ins)
		    except (ag::Graph msg) => (close_in ins;raise exception FAIL ("Graph " + msg))
		      | e => (close_in ins; raise exception FAIL ("Exception "$(System::exn_name e)))
	    in
		close_in ins;
		g
	    end

	fun wg (g, name)
	    =
	    let			# "wg" may be "write graph"
	        outs = open_out name
	    in
		(GIO::write_graph (outs, g)) except e => (close_out outs; raise exception e);
		close_out outs
	    end

	fun do_it fname
	    =
            (output (std_out, fname + "\n");wg (rg fname, "_" + fname)) 
	    except
                FAIL msg => output (std_err, fname + ": " + msg + "\n")
		   | e => output (std_err, "Exception " + (System::exn_name e) + "\n")

	fun main (argv, _)
	    =
	    apply do_it (tail argv)
    end;			# stipulate
};				# package test
