# unpickle-utilities.pkg

# Compiled by:
#     src/lib/compiler/src/library/pickle-lib.make6



# This is the new "generic" unpickle utility.
#
# It replaces Andrew Appel's original "shareread" module.
#
# The main difference is that instead of using a "universal"
# type together with numerous injections and projections
# it uses separate maps.
#
# This approach proves to be a lot more lightweight.
#
# The benefits are:
#
#   - No projections, hence no "match nonexhaustive" warnings and...
#
#   - No additional run-time overhead (all checking is done during
#     the map membership test which is common to both implementations)
#
#   - No necessity for those many tiny "fn"-functions that litter the
#        original code, resulting in...
#
#   - A more "natural" style for writing the actual unpickling code
#        that makes for shorter source code
#
#   - A lot less generated machine code (less than 50% of the original
#        version)
#
#   - Slightly faster operation (around 15% speedup)
#        (My guess is that it is a combination of fewer projections and
#         fewer generated thunks that make the code run faster.)
#
# July 1999, Matthias Blume
#
# We now use the high bit in char codes of shareable nodes to indicate
# that actual sharing has occured.  If the high bit is not set, we
# no longer bother to insert the node into its sharing map.  This
# improves unpickling speed (e.g., for autoloading) by about 25% and
# saves tons of memory.
#
# October 2000, Matthias Blume



###                          "If we wish to count lines of code,
###                           we should not regard them as lines
###                           *produced* but as lines *spent*."
###
###                                        -- Edsger J Dijkstra




api Unpickle_Utilities {

    exception FORMAT;

    Map( V );			# One for each type.
    Session;			# Encapsulates unpickling state.		# XXX BUGGO FIXME so rename it "Unpickler_State"

    # Make a type-specific sharing map using "make_map".
    #
    # Be sure to create such maps only locally, otherwise you have a
    # space leak.
    #
    # The ML type system will prevent you from accidentially using the
    # same map for different types, so don't worry.  But using TOO MANY
    # maps (i.e., more than one map for the same type) will likely
    # cause problems because the unpickler might try to get for a
    # back reference that is in a different map than the one where the
    # value is actually registered.
    #
    # By the way, this warning is not unique to the many-maps approach.
    # The same thing would happen with the original "universal domain"
    # unpickler if you declare two different constructors for the
    # same type.  Given that there are about 100 types (and thus
    # 100 constructors or maps) in the Lib7 dictionary pickler,
    # the possibility for such a mistake is not to be dismissed. *)

    make_map:  Void -> Map( V );

    Reader( V )
        =
        Void -> V;

    # A "char_getter" is the mechanism that gets actual characters from
    # the pickle.  For ordinary pickles, the unpickler will never call
    # "seek".  Moreover, the same is TRUE if you read the pickles created
    # by pickleN sequentially from the first to the last (i.e., not
    # "out-of-order"). "currentPosition" determines the current position
    # and must be implemented.

    Char_Getter
        =
	{ read:             Reader( Char ),
          seek:             Int -> Void,
          current_position: Void -> Int
        };

    string_getter
        :
        String -> Char_Getter;    #  The string is the pickle string. 


    # string_getter' is a souped-up version of stringGetter:
    #  It takes a function to produce (and re-produce) the pickle string
    #  on demand and returns the actual char_getter together with a
    #  "deleter" -- a function to let go of the pickle string.
    #  When suspended unpickling resumes after the string got deleted,
    #  the char_getter will automatically re-fetch the pickle string
    #  using the function provided:

    string_getter'
        :
        ( Null_Or( String ),
          (Void -> String)
        )
        ->
        { getter:         Char_Getter,
          clear_pickle_cache: Void -> Void
        };



    # Open the unpickling session - everything is parameterized by this;
    # the char_getter provides the bytes of the pickle:

    make_session
        :
        Char_Getter -> Session;



    # The typical style is to write a "reader" function for each type.
    # 
    # The reader function uses a local helper function which takes the
    # first character of a pickle (this is usually the discriminator that
    # was given to @@@ or % in the pickler) and returns the unpickled
    # value.  The function recursively calls other "reader" functions.
    # 
    # To actually get the value from the pickle, pass the helper
    # to "share" -- together with the current session and the
    # type-specific map.  "share" will take care of back-references
    # (using the map) and pass the first character to your helper
    # when necessary.  The standard pattern for writing a "my_type reader"
    # therefore is:
    #
    # session = unpickle_utilities::make_session pickle
    # fun share typeSpecificSharedValueMap helper
    #     =
    #     unpickle_utilities::share session typeSpecificSharedValueMap helper
    # ...
    # typeSpecificSharedValueMap = Unpickleutil::make_map ()
    # ...
    # fun readMytype () = let
    #     fun helper 'a' = ... #  Case a 
    #       | helper 'b' = ... #  Case b 
    #       ...
    #       | _ = raise unpickle_utilities::FORMAT
    # in
    #     share typeSpecificSharedValueMap helper
    # end

    share:  Session -> Map( V ) -> (Char -> V) -> V;



    # If you know that you don't need a map because there can be no
    # sharing, then you can use "nonshare" instead of "share".

    nonshare
        :
        Session -> (Char -> V) -> V;


    # Making readers for some common types: 

    read_int:      Session -> Reader( Int         );
    read_int32:    Session -> Reader( int32::Int  );
    read_word:     Session -> Reader( Unt        );
    read_word32:   Session -> Reader( unt32::Unt );
    read_bool:     Session -> Reader( Bool        );
    read_string:   Session -> Reader( String      );



    # Readers for parametric types need their own map:
    read_list:    Session -> Map( List(    V ) )  -> Reader( V )                -> Reader( List( V )  );
    read_option:  Session -> Map( Null_Or( V ) )  -> Reader( V )                -> Reader( Null_Or( V ) );
    read_pair:    Session -> Map( (X, Y) )        -> (Reader( X ), Reader( Y )) -> Reader( (X, Y) );


    # The laziness generated here is in the unpickling.
    # In other words unpickling state is not discarded
    # until the last lazy value has been forced.

    read_lazy:    Session -> Reader( X ) -> Reader( Void -> X );
};

package unpickle_utilities:  Unpickle_Utilities {			# Unpickle_Utilities	is from   src/lib/compiler/src/library/unpickle-utilities.pkg

    package m = int_red_black_map;	# int_red_black_map	is from   src/lib/src/int-red-black-map.pkg

    exception FORMAT;


    Map( V )
        =
        Ref( m::Map( (V, Int) ) );


    State
        =
        Map( String );


    Reader( V )
        =
        Void -> V;


    Char_Getter
        =
 	{   read:            Reader( Char ),
            seek:            Int -> Void,
            current_position: Void -> Int
        };


    Session
        =
        { state: State,
          getter: Char_Getter
        };


    fun make_map ()
        =
        REF m::empty;


    fun string_getter pickle_string
        =
        {   position = REF 0;

	    fun read ()
                =
                {   old_position = *position;
		
		    position := old_position + 1;

		    string::get (pickle_string, old_position)
                    except
                        (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) = raise exception FORMAT;
		};


	    fun seek new_position
                =
                position :=  new_position;


	    fun current_position ()
                =
                *position;
	
	    { read, seek, current_position };
	};


    fun string_getter' (initial_pickle, fetch_string)
        =
        {   position   =   REF 0;

	    pickle_string_ref
                =
                REF  initial_pickle;


	    fun grab_string ()
                =
		case *pickle_string_ref
		  
		     THE string => string;

		     NULL
			 =>
			 { string = fetch_string ();

			     pickle_string_ref := THE string;
			     string;
			 };
                esac;


	    fun clear_pickle_cache ()
                =
                pickle_string_ref := NULL;


	    fun read ()
                =
                {   s =  grab_string ();
		    p =  *position;
		
		    position :=  p + 1;

		    string::get (s, p)
                    except
                        (SUBSCRIPT|INDEX_OUT_OF_BOUNDS)
                        =
                        raise exception FORMAT;
		};

	    fun seek  new_position
                =
                position :=  new_position;


	    fun current_position ()
                =
                *position;
	

	    { clear_pickle_cache
                  =>
                  clear_pickle_cache,

              getter
                  =>
                  { read,
                    seek,
                    current_position
                  }
            };
	};

    stipulate

	fun from_any_int  byte_source ()
            =
            {   & =  unt8::bitwise_and;
		#
		infix val  & ;

		large = unt8::to_large_unt;

								# unt8	is from   src/lib/std/unt8.pkg
								# byte	is from   src/lib/std/src/byte.pkg

		fun loop n
                    =
                    {   w8 =  byte::char_to_byte (byte_source ());
		     
			if   ((w8 & 0u128) == 0u0)
			    
                             (n * 0u64 + large (w8 & 0u63), (w8 & 0u64) != 0u0);
			else
                             loop (n * 0u128 + large (w8 & 0u127));
                        fi;
		    };
	    
		loop 0u0;
	    };


	fun from_large_unt convert byte_source ()
            =
	    case (from_any_int byte_source ())
	      
	         (w, FALSE) =>   convert w        except _ = raise exception FORMAT;
	         _          =>   raise exception FORMAT;
            esac;


	fun from_large_int convert byte_source ()
            =
            {   my (wpos, negative)
                    =
                    from_any_int byte_source ();

		# Negation must be done in word domain
		# to prevent overflow on min_int.
                #
                # For the same reason we must
		# then use to_int_x.

		w =    negative   ??   0u0 - wpos
                                  ::   wpos;

		i = large_unt::to_large_int_x  w;
	    
		convert i         except _ = raise exception FORMAT;
	    };
    herein

	from_int    =  from_large_int   int::from_large;
	from_int32  =  from_large_int   int32::from_large;
	from_word   =  from_large_unt  unt::from_large_unt;
	from_word32 =  from_large_unt  unt32::from_large_unt;

    end;


    fun make_session  char_getter
        =
	(  {   state  => make_map (),
               getter => char_getter
           }
           : Session
        );


    # The main duty of 'share' is to abstract off
    # from the rest of the unpickling code the job
    # of dealing with references to shared values
    # -- values referenced by more than one pointer
    # in the pickled datastructure.
    #
    # Such shared values are flagged in the pickle
    # bytestream by a 0xFF byte (255 decimal)
    # followed by an integer backreference to the
    # offset in the pickle at which the actual
    # value may be found.
    #
    # The first time we unpickle such a shared value,
    # we salt it away in our typeSpecificSharedValueMap.
    #
    # When we encounter subsequent backreferences to
    # that particular value, we can then just fish
    # the previously-unpickled value out of our
    # typeSpecificSharedValueMap and return it, thus
    # re-establishing the desired value sharing.

    fun share   { state,   getter => { read, seek, current_position } }   type_specific_shared_value_map   helper
        =
        {   # Caller guarantees that character 'c'
            # has the high bit set:

	    fun first_time (position, c)
                =
                {   v = helper (char::from_int (char::to_int c - 128));

		    position'
                        =
                        current_position ();
		
		    type_specific_shared_value_map
                        :=
                        m::set (*type_specific_shared_value_map, position, (v, position'));
		    v;
		};

	    c = read ();
	
	    if   (char::to_int c < 128)
	        
		 # High-bit is not set, so this is not a shared node.
		 # Therefore, it can't possibly be in the map, and
		 # we can call helper directly.

		 helper c;
	    else
                 if   (c == '\255')
		     
		      position =  from_int  read  ();

		      case (m::get  (*type_specific_shared_value_map,  position))
		        
			   THE (v, _) => v;

			   NULL
			       =>
			       {   here =  current_position ();

				   seek position;

				   # It is ok to use "read" here because
				   # there won't be back-references that jump
				   # to other back-references.
				   # (Since we are jumping to something that
				   # was shared, it has the high-bit set, so
				   # calling "firstTime" is ok.)

				   first_time (position, read())
				   before
				       seek here;
			       };
		      esac;

		 else
                      #  Must subtract one to get back in front of c. 
		      position = current_position () - 1;
		      
		      case (m::get (*type_specific_shared_value_map, position))
		        
		           THE (v, position')
                               =>
                               {   seek position';
                                   v;
                               };

			   NULL
                               =>
                               first_time (position, c);
                      esac;
		 fi;
            fi;
	};

    # "nonshare" gets around backref detection.  Certain integer
    # encodings may otherwise be mis-identified as back references.
    # Moreover, unlike in the case of "share" we don't need a map
    # for "nonshare".  This could be used as an optimization for
    # types that are known to never be shared anyway (Bool, etc.).

    fun nonshare (session: Session) f
        =
        f (session.getter.read ());

    stipulate
	fun f2r from_x (session: Session)
            =
            from_x session.getter.read;
    herein
	read_int    =  f2r from_int;
	read_int32  =  f2r from_int32;
	read_word   =  f2r from_word;
	read_word32 =  f2r from_word32;
    end;


    # read_lazy advances 'currentPosition' as though it
    # had read the next value, but does not actually
    # do so.  Instead, it returns a memoized thunk
    # which will do so at need:

    fun read_lazy session helper ()
        =
        {   memo
                =
                REF  (fn () =  raise exception FAIL "unpickle_utilities::readLazy");

	    my { getter => { current_position, seek, ... }, ... }
                =
                session;

	    # The size may have leading 0s because of padding,
            # so loop reading integers until we get a nonzero 
            # value to return:

	    fun get_size ()
                =
                {   size = read_int session ();
		
		    if (size == 0   )   get_size ();
                                   else   size;    fi;
		};


            # Read size of value to
            # read lazily:

	    size = get_size ();			#  size of v 



            # Remember position at which
            # lazily read value starts,
            # so we can come back later
            # and actually read it:

	    start = current_position ();		#  start of v 



            # Construct a thunk to do the real
            # (lazily delayed) read of the
            # value, when it comes time to do so.
            #
            # To do this we need to 'seek' back to
            # the proper position in the stream,
            # but to maintain sanity (since this
            # will happen at an unpredictable
            # time) we write it to save and
            # restore the 'current_position' value
            # in force at the time of thunk
            # invocation.
            #
            # We also memo-ize our thunk to cache
            # the value lazily read, so that on
            # second and subsequent thunk invocations,
            # we can immediately return the cached
            # value rather than actually having to
            # do the complete read again. 

	    fun thunk ()
                =
                {   wherever = current_position ();	#  Remember prevailing stream position.             
		    seek start;				#  Reset stream to start of our lazily-read value.  
		    v = helper ();			#  Do the actual read of lazily-read value.         
		
		    seek wherever;			#  Restore prevailing stream position.              
		    memo :=  (fn () =  v);		#  Set memo to return cached value instead of re-reading. 
		    v;                                  #  Return lazily read value.                        
		};
	
	    memo := thunk;				#  Set up lazy read of value on initial thunk invocation.  
	    seek (start + size);			#  Advance stream position if though we had read the value 
	    .{ *memo (); };				#  Return thunk that will do the lazy read on request.     
	};


    fun read_list  session  type_specific_shared_value_map  helper  ()
        =
	share  session  type_specific_shared_value_map  readlist
        where
            fun read_chops ()
		=
		share  session  type_specific_shared_value_map  readchopslist
                where
		    fun readchopslist 'N' => [];
			readchopslist 'C' => helper ()
					   ! helper ()
					   ! helper ()
					   ! helper ()
					   ! helper ()
					   ! read_chops ();
			readchopslist _ => raise exception FORMAT;
		    end;
		end;

	    fun readlist '0' =>  [];
		readlist '1' =>  [helper ()];
		readlist '2' =>  [helper (), helper ()];
		readlist '3' =>  [helper (), helper (), helper ()];
		readlist '4' =>  [helper (), helper (), helper (), helper ()];
		readlist '5' =>  read_chops ();
		readlist '6' =>  helper () ! read_chops ();
		readlist '7' =>  helper () ! helper () ! read_chops ();
		readlist '8' =>  helper () ! helper () ! helper () ! read_chops ();
		readlist '9' =>  helper () ! helper () ! helper () ! helper () ! read_chops ();
		readlist _   =>  raise exception FORMAT;
            end;
	end;

    fun read_option session type_specific_shared_value_map helper ()
        =
        {   fun readoption 'n' =>  NULL;
	        readoption 's' =>  THE (helper ());
	        readoption _   =>  raise exception FORMAT;
            end;
	
	    share  session  type_specific_shared_value_map  readoption;
	};

    fun read_pair session type_specific_shared_value_map (read_a, read_b) ()
        =
        {   fun readpair 'p'   =>   (read_a (), read_b ());
	        readpair  _    =>   raise exception FORMAT;
            end;
	
	    share  session  type_specific_shared_value_map  readpair;
	};

    fun read_bool session ()
        =
        {   fun readbool 't' =>  TRUE;
	        readbool 'f' =>  FALSE;
	        readbool _   =>  raise exception FORMAT;
            end;
	
	    nonshare  session  readbool;
	};

    fun read_string session ()
        =
        {   my {   state => type_specific_shared_value_map,
                    getter
                }
                = session;


	    my { read, ... }
                =
                getter;


	    fun readstring '"'
                =>
		loop ([], read ())
                where
		    fun loop (l, '"')   =>   string::implode (reverse l);
		        loop (l, '\\')  =>   loop (read () ! l, read ());
		        loop (l, c)     =>   loop (c ! l, read ());
                    end;
		end;

	       readstring _
                   =>
                   raise exception FORMAT;
            end;
	
	    share  session  type_specific_shared_value_map  readstring;
	};
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


# Copyright (C) 1999, 2000 Matthias Blume
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
