## cfg-expand-copies-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# This module expands all parallel copies into normal instructions

# We get invoked by   src/lib/compiler/codegen/main/codegen-g.pkg

generic package cfg_expand_copies_g (

    package control_flow_graph:     Control_Flow_Graph;			# Control_Flow_Graph			is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api

    package shuffle
	:
	Shuffle								# Shuffle				is from   src/lib/compiler/lower/instruction/shuffle.api
	where instruction_set
              ==
              control_flow_graph::instruction_set;
)

: (weak) Control_Flow_Graph_Optimization				# Control_Flow_Graph_Optimization	is from   src/lib/compiler/lower/flowgraph/cfg-optimization.api

{
    package control_flow_graph = control_flow_graph;
    package i = control_flow_graph::instruction_set;

    name = "expand copies";

    fun run (cfg as graph::GRAPH graph)
        =
	cfg
        where
	    fun expand (i::COPY { kind,  dst, src, tmp, ... } )
		    =>
		    shuffle { dst, src, tmp }
                    where
		        shuffle
                            = 
			    case kind 
				 cells_basis::REGISTER => shuffle::shuffle; 
				 cells_basis::FLOAT_REGISTER => shuffle::shufflefp;
				 _               =>  lowcode_error_message::error ("cfg_expand_copies", "shuffle");
			    esac;
		    end;

		expand (i::NOTE { instruction, note } )
		    => 
		    map (fn instruction = i::NOTE { instruction, note })
			(expand instruction);

		expand i => [i];
	    end;

	    fun expand_instrs (_, control_flow_graph::BLOCK { instructions, ... } )
		= 
		instructions := list::fold_right 
			   (fn (i, rest) =  list::reverse_and_prepend (expand (i), rest))
			   []
			   *instructions;

	    graph.forall_nodes  expand_instrs;

	end;
};


## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
