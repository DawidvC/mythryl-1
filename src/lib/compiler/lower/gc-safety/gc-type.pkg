## gc-type.pkg

# Abstract interface for GC types.

generic package GCType (ChunkType:  CHUNK_TYPE) : Garbage_Collector_Type {


   package o = ChunkType

   type Atype = Int

   enum Gc_Type = 
     CONST  of Int                   #  integer constant 
   | NONREF of Ref( o::chunktype )   #  non-reference value 
   | REF    of Ref( o::chunktype )   #  A reference, pointer to a gc chunk 
   | ADD of Atype * Gc_Type * Gc_Type  #  Address arithmetic + 
   | SUB of Atype * Gc_Type * Gc_Type  #  Address arithmetic - 
   | BOT
   | TOP

   type Gcmap = int_map::Intmap( Gc_Type )

   exception GCTYPE

   fun int i = if i >= 0 then int::to_string i else "-"$int::to_string(-i)

   fun to_string BOT = "bot"
     | to_string TOP = "top"
     | to_string (CONST i) = int i
     | to_string (NONREF (REF chunk)) = "nonref "$o::to_string chunk
     | to_string (REF (REF chunk)) = "REF "$o::to_string chunk
     | to_string (ADD (type, a, b)) = "("$to_string a$"+"$to_string b$")"
     | to_string (SUB (type, a, b)) = "("$to_string a$"-"$to_string b$")"

   fun mapToString gcmap =
   let lookup = int_map::map gcmap
       fun f r = "{ "$to_string (lookup r)$"}" except _ => "{?}"
   in  f end

   GCMAP       = note::new NULL:  Annotations::property(  gcmap )
   GCSAFEPOINT = note::newFlag ""

}
