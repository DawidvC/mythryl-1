package TestMatchGen =
pkg

local
   package raw_syntax_stuff = mdl_abstract_syntax_utilities (mdl_raw_syntax)
   package RawSyntaxTreePP   = mdl_raw_syntax_prettyprinter_g (raw_syntax_stuff) 
   package RawSyntaxTreeRewriter   = mdl_raw_syntax_rewriter_g (mdl_raw_syntax) 

   package mg
       =
       match_gen_g (					# See src/lib/compiler/lower/tools/match-compiler/match-gen-g.pkg
               package RawSyntaxTreePP   = RawSyntaxTreePP
               package raw_syntax_stuff = raw_syntax_stuff
               package RawSyntaxTreeRewriter = RawSyntaxTreeRewriter 
              )
   package mc = mg::MC

   use RawSyntaxTreePP raw_syntax_stuff RawSyntaxTreePP::raw_syntax

   fun newDatatype (id, cbs) = DATATYPE (id,[], cbs)
   fun type id = IDty (IDENT([], id))

   footy = type "foo"

   defs =
       [newDatatype("foo",[CONS("A", THE (TUPLEty[footy, footy])),
                           CONS("B", NULL),
                           CONS("C", NULL),
                           CONS("D", THE (RECORDty[("x", footy), ("y", footy)]))
                          ]
                   )
       ]
   info = mg::compileTypes defs

   fun test root rules =  
   let clauses = map (fn (p, g, x) => CLAUSE([p], g, INT_CONSTANT_IN_EXPRESSION (x))) rules
       print (pp::text (RawSyntaxTreePP::expression (CASE_EXPRESSION (root, clauses)))$"\n")
       dfa  = mg::compile info clauses
       #  print (mc::to_string dfa) 
       fun fail () = RAISE_EXPRESSION (ID "MATCH")
       code = mg::codeGen { root=root, dfa=dfa, fail=fail }
   in  print (pp::text (RawSyntaxTreePP::expression code)$"\n")
   end except mc::MATCH_COMPILER msg => print msg

   fun cons_fn (x,[])  = CONSpat (IDENT([], x), NULL)
     | cons_fn (x,[a]) = CONSpat (IDENT([], x), THE a)
     | cons_fn (x, xs)  = CONSpat (IDENT([], x), THE (TUPLEpat xs))

   wild = WILDCARD_PATTERN

in

   fun rule1 () = 
       test
       (ID "B")
       [ (cons_fn("A",[wild, wild]), NULL, 0)
       ]

   fun rule2 () =
       test
       (ID "B")
       [ (cons_fn("A",[wild, wild]), NULL, 0),
         (cons_fn("B",[]), NULL, 1)
       ]

   fun rule3 () =
       test
       (ID "B")
       [ (cons_fn("A",[wild, cons_fn("B",[])]), NULL, 0),
         (cons_fn("A",[cons_fn("B",[]), wild]), NULL, 1)
       ]

   fun rule4 () =
       test
       (ID "B")
       [ (cons_fn("A",[cons_fn("B",[]), cons_fn("B",[])]), NULL, 0),
         (cons_fn("A",[IDpat "a", IDpat "b"]), NULL, 1)
       ]

   fun rule5 () =
       test
       (ID "B")
       [ (cons_fn("A",[cons_fn("B",[]), cons_fn("B",[])]), NULL, 0),
         (cons_fn("A",[IDpat "c", cons_fn("B",[])]), NULL, 1),
         (cons_fn("A",[IDpat "a", IDpat "b"]), NULL, 2),
         (ASpat("u", cons_fn("B",[])), NULL, 3)
       ]

   fun rule6 () =
       test
       (TUPLEexp[ID "B", ID "C"])
       [ (TUPLEpat[cons_fn("A",[wild, wild]), cons_fn("B",[])], NULL, 0),
         (TUPLEpat[wild, wild], NULL, 1)
       ]

   fun rule7 () =
       test
       (ID "B")
       [ (cons_fn("D",[RECORD_PATTERN([("x", IDpat "x"),
                               ("y", cons_fn("B",[]))], FALSE)]), NULL, 0)
       ]

   fun rule8 () =
       test
       (ID "B")
       [ (cons_fn("D",[RECORD_PATTERN([("x", IDpat "x"), ("y", cons_fn("B",[]))], FALSE)]), 
                    THE (APPLY("=", TUPLEexp[ID "x", ID "C"])), 0)
       ]
         
   fun rule9 () =
       test
       (ID "B")
       [ (cons_fn("A",[IDpat "x", cons_fn("B",[])]), 
                  THE (APPLY("=", TUPLEexp[ID "x", ID "C"])), 0),
         (cons_fn("A",[cons_fn("B",[]), ASpat("z", cons_fn("C",[]))]), 
                  THE (APPLY("=", TUPLEexp[ID "z", ID "C"])), 1),
         (cons_fn("A",[cons_fn("B",[]), cons_fn("C",[])]), NULL, 2),
         (cons_fn("A",[cons_fn("B",[]), cons_fn("B",[])]), NULL, 3),
         (IDpat "z", NULL, 4)
       ]
 
end
end
