## prettyprint-fps.pkg 

# Compiled by:
#     src/lib/compiler/core.make6


api Prettyprint_Fps {

   printcps		# This entrypoint is not currently called from outside this file.
       :
       ((fate_passing_style::Function, int_hash_table::Hash_Table( highcode_type::Highcode_Type )) )
       ->
       Void;

   print_fps_expression:  fate_passing_style::Fps_Expression     -> Void;
   print_fps_function:    fate_passing_style::Function -> Void;

   prettyprint_fps_function
       :
       prettyprinter::Prettyprinter 
       ->
       fate_passing_style::Function
       ->
       Void;

};

package prettyprint_fps: (weak)  Prettyprint_Fps {

    stipulate

        include fate_passing_style;

	package lv =  highcode_var;		# highcode_var		is from   src/lib/compiler/upper/highcode/highcode-var.pkg
        package pp =  prettyprint;		# prettyprint		is from   src/lib/prettyprint/src/prettyprint.pkg

    herein

	say = controls::print::say;

	fun numkind_name (p::INT   bits) =>  "i" + int::to_string bits;
	    numkind_name (p::UINT  bits) =>  "u" + int::to_string bits;
	    numkind_name (p::FLOAT bits) =>  "f" + int::to_string bits;
	end;

	fun looker_name p::BANG                        =>  "bang";
	    looker_name p::GETHANDLER                  =>  "gethandler";
	    looker_name p::SUBSCRIPT                   =>  "subscript";
	    looker_name (p::NUMSUBSCRIPT { kind } )    =>  ("numsubscript" + numkind_name kind);
	    looker_name p::GETRUNVEC                   =>  "getrunvec";
	    looker_name p::GET_CURRENT_THREAD_REGISTER =>  "get_current_thread_register";
	    looker_name p::DEFLVAR                     =>  "deflvar";
	    looker_name p::GETSPECIAL                  =>  "getspecial";
	    looker_name p::GETPSEUDO                   =>  "getpseudo";
	    looker_name (p::RAWLOAD { kind } )         =>  ("rawload" + numkind_name kind);
	end;

	fun branch_name p::BOXED => "boxed";
	    branch_name p::UNBOXED => "unboxed";
	    branch_name (p::CMP { oper, kind } )
		=>
		numkind_name kind
                +
		case oper
                  
		     p::GT  =>  ">";  
		     p::LT  =>  "<";
		     p::GE  =>  ">="; 
		     p::LE  =>  "<=";
		     p::EQL =>  "=";
		     p::NEQ =>  "!=";
		esac; 

	    branch_name (p::FCMP { oper, size } )
		=> 
		numkind_name (p::FLOAT size)
                +
		case oper
                  
		     p::F_EQ   => "=";
		     p::F_ULG  => "?<>";
		     p::F_GT   => ">";
		     p::F_GE   => ">=";
		     p::F_LT   => "<";
		     p::F_LE   => "<=";
		     p::F_LG   => "<>";
		     p::F_LEG  => "<=>";
		     p::F_UGT  => "?>";
		     p::F_UGE  => "?>=";
		     p::F_ULT  => "?<";
		     p::F_ULE  => "?<=";
		     p::F_UE   => "?=";
		     p::F_UN   => "?";
		esac;

	    branch_name p::PNEQ   =>  "pneq";
	    branch_name p::PEQL   =>  "peql";
	    branch_name p::STREQ  =>  "streq";
	    branch_name p::STRNEQ =>  "strneq";
        end;

	fun setter_name p::UNBOXED_SET                 =>  "unboxed_set";
	    setter_name p::BOXED_SET                   =>  "boxedupdate";
	    setter_name p::UPDATE                      =>  "update";
	    setter_name (p::NUMUPDATE { kind } )       =>  ("numupdate" + numkind_name kind);
	    setter_name p::UNBOXEDASSIGN               =>  "unboxedassign";
	    setter_name p::ASSIGN                      =>  "assign";
	    setter_name p::SETHANDLER                  =>  "sethandler";
	    setter_name p::SET_CURRENT_THREAD_REGISTER =>  "set_current_thread_register";
	    setter_name p::USELVAR                     =>  "uselvar";
	    setter_name p::FREE                        =>  "free";
	    setter_name p::SETSPECIAL                  =>  "setspecial";
	    setter_name p::SETPSEUDO                   =>  "setpseudo";
	    setter_name p::SETMARK                     =>  "setmark";
	    setter_name p::ACCLINK                     =>  "acclink";
	    setter_name (p::RAWSTORE { kind } )        =>  ("rawstore" + numkind_name kind);
	    setter_name (p::RAWUPDATE cty)             =>  ("rawupdate" + fate_passing_style::cty_to_string cty);
        end;

	cvt_param =  int::to_string;

	fun cvt_params (from, to)
	    =
	    cat [cvt_param from, "_", cvt_param to];

	fun arith_name (p::ARITH { oper, kind } )
		=>
		case oper
                  
		     p::ADD       =>  "+";
		     p::SUBTRACT  =>  "-"; 
		     p::MULTIPLY  =>  "*";
		     p::DIVIDE    =>  "/";
		     p::NEGATE    =>  "-_";
		     p::ABS       =>  "abs"; 
		     p::FSQRT     =>  "fsqrt"; 
		     p::FSIN      =>  "sin";
		     p::FCOS      =>  "cos";
		     p::FTAN      =>  "tan";
		     p::RSHIFT    =>  "rshift";
		     p::RSHIFTL   =>  "rshiftl";
		     p::LSHIFT    =>  "lshift";
		     p::BITWISEAND      =>  "bitwise_and";
		     p::BITWISEOR       =>  "bitwise_or";
		     p::BITWISEXOR      =>  "bitwise_xor";
		     p::BITWISENOT      =>  "bitwise_not";
		     p::REM       =>  "rem";
		     p::DIV       =>  "div";
		     p::MOD       =>  "mod";
		 esac
		 +
                 numkind_name  kind;

	    arith_name (p::TEST arg)   => "test_"     +  cvt_params arg;
	    arith_name (p::TESTU arg)  => "testu_"    +  cvt_params arg;
	    arith_name (p::TEST_INF i) => "test_inf_" +  cvt_param i;

	    arith_name (p::ROUND { floor=>TRUE, fromkind=>p::FLOAT 64, tokind=>p::INT 31 } )
                =>
	        "floor";

	    arith_name (p::ROUND { floor=>FALSE, fromkind=>p::FLOAT 64, tokind=>p::INT 31 } )
                =>
	        "round";

	    arith_name (p::ROUND { floor, fromkind, tokind } )
                =>
	        if floor  "floor"; else "round"; fi
		+
                numkind_name fromkind
                +
                "_"
                +
                numkind_name tokind;
	end;

	fun pure_name  p::LENGTH         =>  "length";
	    pure_name (p::PURE_ARITH x)  =>  arith_name (p::ARITH x);
	    pure_name  p::CHUNKLENGTH    =>  "chunklength";
	    pure_name  p::MAKEREF        =>  "makeref";
	    pure_name (p::EXTEND arg)    =>  "extend_" + cvt_params arg;
	    pure_name (p::COPY arg)      =>  "copy_" + cvt_params arg;
	    pure_name (p::TRUNC arg)     =>  "trunc_" + cvt_params arg;
	    pure_name (p::TRUNC_INF  i)  =>  "trunc_inf_" + cvt_param i;
	    pure_name (p::COPY_INF   i)  =>  cat ["copy_", cvt_param i, "_inf"];
	    pure_name (p::EXTEND_INF i)  =>  cat ["extend_", cvt_param i, "_inf"];

	    pure_name  p::SUBSCRIPTV     => "subscriptv";
	    pure_name  p::GETTAG         => "gettag";
	    pure_name  p::MAKE_SPECIAL   => "make_special";
	    pure_name  p::WRAP           => "wrap";
	    pure_name  p::UNWRAP         => "unwrap";
	    pure_name  p::CAST           => "cast";
	    pure_name  p::GETCON         => "getcon";
	    pure_name  p::GETEXN         => "getexn";
	    pure_name  p::FWRAP          => "fwrap";
	    pure_name  p::FUNWRAP        => "funwrap";
	    pure_name  p::IWRAP          => "iwrap";
	    pure_name  p::IUNWRAP        => "iunwrap";
	    pure_name  p::I32WRAP        => "i32wrap";
	    pure_name  p::I32UNWRAP      => "i32unwrap";
	    pure_name  p::GETSEQDATA     => "getseqdata";
	    pure_name  p::RECSUBSCRIPT   => "recsubscript";
	    pure_name  p::RAW64SUBSCRIPT => "raw64subscript";
	    pure_name  p::NEWARRAY0      => "newarray0";
	    pure_name (p::RAWRECORD rk)  => "rawrecord_" + the_else (null_or::map rkstring rk, "notag");
	    pure_name (p::CONDMOVE b)    => "condmove " + branch_name b;

	    pure_name (p::PURE_NUMSUBSCRIPT { kind } )
                =>
                ("numsubscriptv" + numkind_name kind);

	    pure_name (p::REAL { fromkind=>p::FLOAT 64, tokind=>p::INT 31 } )
                => "real";

	    pure_name (p::REAL { fromkind, tokind } )
                =>
	        ("real" + numkind_name fromkind + "_" + numkind_name tokind);
	end 

	also
        fun rkstring rk
            =
            case rk 
	      
		  RK_VECTOR   =>  "RK_VECTOR";
		  RK_RECORD   =>  "RK_RECORD";
		  RK_SPILL    =>  "RK_SPILL";
		  RK_ESCAPE   =>  "RK_ESCAPE";
		  RK_EXN      =>  "RK_EXN";
		  RK_CONT     =>  "RK_CONT";
		  RK_FCONT    =>  "RK_FCONT";
		  RK_KNOWN    =>  "RK_KNOWN";
		  RK_BLOCK    =>  "RK_BLOCK";
		  RK_FBLOCK   =>  "RK_FBLOCK";
		  RK_I32BLOCK =>  "RK_I32BLOCK";
            esac;


	fun show0 say
            =
	    {   fun sayc ('\n') =>  say "\\n";
		    sayc c      =>  say (string::from_char c);
                end;

		fun sayv (VAR v)    =>  say (lv::name_of_highcode_variable v);
		    sayv (LABEL v)  =>  say ("(L)" + lv::name_of_highcode_variable v);
		    sayv (INT i)    =>  say ("(I)" + int::to_string i);
		    sayv (INT32 i)  =>  say ("(I32)" + unt32::to_string i);
		    sayv (REAL r)   =>  say r;
		    sayv (STRING s) =>  { say "\"";   apply sayc (explode s);   say "\""; };
		    sayv (CHUNK _)  =>  say ("(chunk)");
		    sayv (VOID)     =>  say ("(void)");
		end;

		fun sayvlist [v]      =>  sayv v;
		    sayvlist NIL      =>  ();
		    sayvlist (v ! vl) =>  { sayv v;   say ", ";   sayvlist vl; };
		end;


		fun sayrk (RK_RECORD, n) => ();
		    sayrk (RK_VECTOR, n) => ();
		    sayrk (k, n:  Int)
			=>
			{    say (rkstring k);
			     say " ";
			     say (int::to_string n);
			     say ", ";
			};
		end;

	        sayt = say o fate_passing_style::cty_to_string;

		fun sayparam ([v],[ct])        =>  { sayv v;   sayt ct; };
		    sayparam (NIL, NIL)        =>  ();
		    sayparam (v ! vl, ct ! cl) =>  { sayv v;   sayt ct;   say ", ";   sayparam (vl, cl); };
		    sayparam _                 =>  error_message::impossible "sayparam in ppcps.pkg";
		end;

		fun saypath (OFFP 0) => ();
		    saypath (OFFP i) => { say "+"; say (int::to_string i);};

		    saypath (SELP (j, p))
			=>
			{   say ".";
			    say (int::to_string j);
			    saypath p;
			};
		end;

		fun sayvp (v, path)
                    =
                    {   sayv v;
                        saypath path;
                    };

		fun saylist f [x]     =>   f x;
                    saylist f NIL     => (); 
		    saylist f (x ! r) =>  { f x;  say ", ";  saylist f r;};
		end;

		fun indent n
		    =
		    f
                    where
		        fun space 0 => ();
                            space k => { say " ";  space (k - 1); };
                        end;

			fun nl () = say "\n";

			recursive val f
			    =
			    fn  RECORD (k, vl, v, c)
                                    =>
                                    {   space n;

					case k
                                          
                                             RK_VECTOR => say "#{ ";
                                             _         => say "{ ";
                                        esac;

					sayrk (k, length vl);
					saylist sayvp vl;
                                        say "} -> ";
					sayv (VAR v);
					nl();
                                        f c;
                                    };

				SELECT (i, v, w, t, c)
                                    =>
				    {   space n;
                                        sayv v;
                                        say ".";
                                        say (int::to_string i);
                                        say " -> ";
				        sayv (VAR w);
                                        sayt t;
                                        nl();
                                        f c;
                                    };

				OFFSET (i, v, w, c)
                                    =>
				    {   space n;
                                        sayv v;
                                        say "+";
                                        say (int::to_string i);
                                        say " -> ";
				        sayv (VAR w);
                                        nl();
                                        f c;
                                    };

				APPLY (w, vl)
                                    =>
				    {   space n;
                                        sayv w;
                                        say "(";
                                        sayvlist vl;
                                        say ")\n";
                                    };

				MUTUALLY_RECURSIVE_FNS (bl, c)
                                    =>
				    {   apply g bl;
                                        f c;
                                    }
                                    where
				        fun g (_, v, wl, cl, d)
					    = 
					    {   space n;
						sayv (VAR v);
						say "("; 
						sayparam (map VAR wl, cl);
						say ") =\n"; 
						indent (n+3) d;
					    };
				    end;

				SWITCH (v, c, cl)
                                    =>
				    {   fun g (i, c ! cl)
                                                =>
					        {   space (n+1);
                                                    say (int::to_string (i: Int));
					            say " =>\n";
                                                    indent (n+3) c;
                                                    g (i+1, cl);
                                                };
					    g (_, NIL)
                                                =>
                                                ();
                                        end;

				        space n;
                                        say "case ";
                                        sayv v;
                                        say "  ["; 
					say (int::to_string (c));
					say "] of\n"; 
					g (0, cl);
				    };

				LOOKER (i, vl, w, t, e)
                                    =>
				    {   space n;
                                        say (looker_name i);
                                        say "(";
                                        sayvlist vl;
				        say ") -> ";
                                        sayv (VAR w);
                                        sayt t;
                                        nl();
                                        f e;
                                    };

				ARITH (i, vl, w, t, e)
                                    =>
				    {   space n;
                                        say (arith_name i);
                                        say "(";
                                        sayvlist vl;
				        say ") -> ";
                                        sayv (VAR w);
                                        sayt t;
                                        nl();
                                        f e;
                                    };

				PURE (i, vl, w, t, e)
                                    =>
				    {   space n;
                                        say (pure_name i);
                                        say "(";
                                        sayvlist vl;
				        say ") -> ";
                                        sayv (VAR w);
                                        sayt t;
                                        nl();
                                        f e;
                                    };

				SETTER (i, vl, e)
                                    =>
				    {   space n;
                                        say (setter_name i);
                                        say "(";
                                        sayvlist vl;
				        say ")";
                                        nl();
                                        f e;
                                    };

				BRANCH (i, vl, c, e1, e2)
                                    =>
				    {   space n;
                                        say "if ";
                                        say (branch_name i);
					say "("; sayvlist vl;
                                        say ") ["; 
					sayv (VAR c);
                                        say "] then\n";
				        indent (n+3) e1;
				        space n; say "else\n";
				        indent (n+3) e2;
                                    };

				RAW_C_CALL (k, l, p, vl, wtl, e)
                                    =>
				    {   space n; 
				        if   (k == REENTRANT_RCC   )   say "reentrant ";  fi;
				        if   (l != "" ) say l; say " ";  fi;
				        say "rcc(";
                                        sayvlist vl;
                                        say ") -> ";
				        apply (fn (w, t) =  { sayv (VAR w);   sayt t; })
                                              wtl;
				        nl();
                                        f e;
                                    };
                            end;
		    end;
	     indent;
	 };

	fun printcps ((_, f, vl, cl, e), m)
	    =
	    {

		if *controls::cg::debug_representation

		     fun ptv (v, t)
			 =
			 {   say (lv::name_of_highcode_variable v);
			     say " type ===>>>";
			     say (highcode::lt_print t);
			     say "\n";
			 };

                     say "************************************************\n";
		     int_hash_table::keyed_apply ptv m;
		     say "************************************************\n";
		fi;

		fun sayv (v)
                    =
                    say (lv::name_of_highcode_variable v);

	        sayt = say o fate_passing_style::cty_to_string;

		fun sayparam ([v],[ct]) => { sayv v;   sayt ct; };
		    sayparam (NIL, NIL) => ();
		    sayparam (v ! vl, ct ! cl) => { sayv v;   sayt ct;   say ", ";   sayparam (vl, cl); };
		    sayparam _ => error_message::impossible "sayparam in ppcps.pkg 3435";
                end;


		{   say (lv::name_of_highcode_variable f);
                    say "(";
                    sayparam (vl, cl);
                    say ") =\n";  
		    show0 say 3 e;
                };
	    };


	exception NULLTABLE;


	my  nulltable:  int_hash_table::Hash_Table( highcode_type::Highcode_Type )
            =
	    int_hash_table::make_table (8, NULLTABLE);


	fun print_fps_expression (ce)
            =
            show0 (controls::print::say) 1 ce;


	fun print_fps_function f
            =
            printcps (f, nulltable);


	fun prettyprint_fps_function  (pp: prettyprinter::Prettyprinter)  f
            =
            prettyprintcps (f, nulltable)
            where

		fun prettyprintcps ((_, f, vl, cl, e), m)
		    =
		    {
			if *controls::cg::debug_representation

			     fun ptv (v, t)
				 =
				 {   pp.put (lv::name_of_highcode_variable v);
				     pp.put " type ===>>>";
				     pp.put (highcode::lt_print t);
				     pp.put "\n";
				 };

			     pp.put "************************************************\n";
			     int_hash_table::keyed_apply ptv m;
			     pp.put "************************************************\n";
			fi;

                        say =  pp.put;

			fun sayv v
			    =
			    pp.put (lv::name_of_highcode_variable v);

	                sayt = say o fate_passing_style::cty_to_string;

			fun sayparam ([v],[ct]) => { sayv v;   sayt ct; };
			    sayparam (NIL, NIL) => ();
			    sayparam (v ! vl, ct ! cl) => { sayv v;   sayt ct;   say ", ";   sayparam (vl, cl); };
			    sayparam _ => error_message::impossible "sayparam in ppcps.pkg 3435";
			end;


			{   pp.put (lv::name_of_highcode_variable f);
			    pp.put "(";
			    sayparam (vl, cl);
			    pp.put ") =\n";  
			    show0 pp.put 3 e;
			};
		    };
            end;


    end;	#  toplevel stipulate 
};		#  package prettyprint_fps 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
