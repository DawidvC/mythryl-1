## list.api

# Compiled by:
#     src/lib/std/src/Base-imp.make6



# Available (unqualified) at top level:
#   type list
#   my NIL, . , head, tail, null, length, @, apply, map, fold_right, fold_left, reverse
#
# Consequently the following are not visible at top level:
#   my last, nth, take, drop, cat, revAppend, map_maybe_null_fn, find, filter,
#       partition, exists, all, tabulate
#   exception EMPTY
#
# The following infix declarations will hold at top level:
#   infixr 60 . @

# See also:
#     src/lib/src/list-fns.api



###                    "We were not out to win over the Lisp programmers;
###                     we were after the C++ programmers.  We managed to
###                     drag a lot of them about halfway to Lisp."
###
###                               -- Guy Steele, author of Java
###                                  (and  Scheme and CommonLisp) spec



api List {

    List X = NIL
           | !  ((X, List(X)) );

    exception EMPTY;

    null:  List(X) -> Bool; 
    head:  List(X) -> X;                # Raises EMPTY 
    tail:  List(X) -> List(X);          # Raises EMPTY 
    last:  List(X) -> X;                # Raises EMPTY 

    get_item:  List(X) ->  Null_Or( (X, List(X)));

    nth:   (List(X), Int) -> X;         # Raises SUBSCRIPT 
    take:  (List(X), Int) -> List(X);   # Raises SUBSCRIPT 
    drop:  (List(X), Int) -> List(X);   # Raises SUBSCRIPT 

    length:  List(X) -> Int; 

    reverse:  List(X) -> List(X); 

    @  :                  (List(X), List(X)) -> List(X);
    cat:                   List( List(X) ) -> List(X);
    reverse_and_prepend:  (List(X), List(X)) -> List(X);

    apply:         (X -> Void) -> List(X) -> Void;
    map:           (X -> Y)    -> List(X) -> List(Y);

    map_maybe_null_fn:  (X -> Null_Or(Y)) -> List(X) -> List(Y);

    find:       (X -> Bool) -> List(X) -> Null_Or(X);
    filter:     (X -> Bool) -> List(X) -> List(X);
    partition:  (X -> Bool) -> List(X) -> ((List(X), List(X)));

    fold_right:  ((X, Y) -> Y) -> Y -> List(X) -> Y;
    fold_left:   ((X, Y) -> Y) -> Y -> List(X) -> Y;

    exists:  (X -> Bool) -> List(X) -> Bool;
    all:     (X -> Bool) -> List(X) -> Bool;

    tabulate:  ((Int, (Int -> X))) -> List(X);   #  Raises SIZE 

    collate:  ((X, X) -> Order) -> (List(X), List(X)) -> Order;

    in:       (_X, List _X) -> Bool; 

}; #  Api List 



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
