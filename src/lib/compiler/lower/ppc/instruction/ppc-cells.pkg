/*
 * WARNING: This file was automatically generated by mdl_g (v3.0)
 * from the machine description file "ppc/ppc.mdl".
 * DO NOT EDIT this file directly
 */

# Compiled by:
#     src/lib/compiler/lower/make7/ppc.make6


api Ppccells {

    include Cells;		# Cells	is from   src/lib/compiler/lower/instruction/cells.api

    spr:  cells_basis::Cellkind;
    cellset:  cells_basis::Cellkind;
    show_gp:  cells_basis::Register_Id -> String;
    show_fp:  cells_basis::Register_Id -> String;
    show_cc:  cells_basis::Register_Id -> String;
    show_spr:  cells_basis::Register_Id -> String;
    show_mem:  cells_basis::Register_Id -> String;
    show_ctrl:  cells_basis::Register_Id -> String;
    show_cellset:  cells_basis::Register_Id -> String;
    show_gpwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_fpwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_ccwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_sprwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_memwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_ctrlwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_cellsetwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    r0:  cells_basis::Cell;
    xer:  cells_basis::Cell;
    lr:  cells_basis::Cell;
    ctr:  cells_basis::Cell;
    add_gp:  (cells_basis::Cell, Cellset) -> Cellset;
    add_fp:  (cells_basis::Cell, Cellset) -> Cellset;
    add_cc:  (cells_basis::Cell, Cellset) -> Cellset;
    add_spr:  (cells_basis::Cell, Cellset) -> Cellset;
    add_mem:  (cells_basis::Cell, Cellset) -> Cellset;
    add_ctrl:  (cells_basis::Cell, Cellset) -> Cellset;
    add_cellset:  (cells_basis::Cell, Cellset) -> Cellset;
};

package ppccells: (weak)  Ppccells {		# Ppccells	is from   src/lib/compiler/lower/ppc/instruction/ppc-cells.pkg

    exception PPC_CELLS;

    fun error msg = lowcode_error_message::error("PPC_CELLS", msg);

    include cells_basis;

    fun show_gpwith_size (r, type) = (fn (r, _) => (if (*ppcasm_syntax::ibm_syntax)
					     (int::to_string r);
					else ("r" + (int::to_string r));fi); end 
				 ) (r, type)
    also fun show_fpwith_size (r, type) = (fn (f, _) => (if (*ppcasm_syntax::ibm_syntax)
					     (int::to_string f);
					else ("f" + (int::to_string r));fi); end 
				 ) (r, type)
    also fun show_ccwith_size (r, type) = (fn (cr, _) => "cr" + (int::to_string cr); end 
				 ) (r, type)
    also fun show_sprwith_size (r, type) = (fn (1, _) => "xer";
				     (8, _) => "lr";
				     (9, _) => "ctr";
				     (r, _) => int::to_string r; end 
				  ) (r, type)
    also fun show_memwith_size (r, type) = (fn (r, _) => "m" + (int::to_string r); end 
				  ) (r, type)
    also fun show_ctrlwith_size (r, type) = (fn (r, _) => "ctrl" + (int::to_string r); end 
				   ) (r, type)
    also fun show_cellsetwith_size (r, type) = (fn _ => "CELLSET"; end 
				      ) (r, type);

    fun show_gp r = show_gpwith_size (r, 64);
    fun show_fp r = show_fpwith_size (r, 64);
    fun show_cc r = show_ccwith_size (r, 4);
    fun show_spr r = show_sprwith_size (r, 64);
    fun show_mem r = show_memwith_size (r, 8);
    fun show_ctrl r = show_ctrlwith_size (r, 8);
    fun show_cellset r = show_cellsetwith_size (r, 0);

    spr     = cells_basis::new_cell_kind { name=>"SPR", nickname=>"spr"};
    cellset = cells_basis::new_cell_kind { name=>"CELLSET", nickname=>"cellset"};

    package my_cells
        =
        cells_g (						# cells_g	is from   src/lib/compiler/lower/instruction/cells-g.pkg

	    exception CELLS = PPC_CELLS;

	    first_pseudo = 256;

	    desc_gp = cells_basis::DESC { low=>0, high=>31, kind=>cells_basis::REGISTER, default_values => [], 
		   zero_reg=>NULL, to_string=>show_gp, to_string_with_size=>show_gpwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_fp = cells_basis::DESC { low=>32, high=>63, kind=>cells_basis::FLOAT_REGISTER, 
		   default_values => [], zero_reg=>NULL, to_string=>show_fp, to_string_with_size=>show_fpwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_cc = cells_basis::DESC { low=>64, high=>71, kind=>cells_basis::CONDITION_CODES, 
		   default_values => [], zero_reg=>NULL, to_string=>show_cc, to_string_with_size=>show_ccwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_spr = cells_basis::DESC { low=>72, high=>103, kind=>spr, default_values => [], 
		   zero_reg=>NULL, to_string=>show_spr, to_string_with_size=>show_sprwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_mem = cells_basis::DESC { low=>104, high=>103, kind=>cells_basis::RAM_CELL, 
		   default_values => [], zero_reg=>NULL, to_string=>show_mem, to_string_with_size=>show_memwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_ctrl = cells_basis::DESC { low=>104, high=>103, kind=>cells_basis::CONTROL_DEPENDENCY, 
		   default_values => [], zero_reg=>NULL, to_string=>show_ctrl, to_string_with_size=>show_ctrlwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_cellset = cells_basis::DESC { low=>104, high=>103, kind=>cellset, 
		   default_values => [], zero_reg=>NULL, to_string=>show_cellset, to_string_with_size=>show_cellsetwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    cell_kind_descs = [(cells_basis::REGISTER, desc_gp), (cells_basis::FLOAT_REGISTER, desc_fp), 
		   (cells_basis::CONDITION_CODES, desc_cc), (spr, desc_spr), (cells_basis::RAM_CELL, desc_mem), 
		   (cells_basis::CONTROL_DEPENDENCY, desc_ctrl), (cellset, desc_cellset)];
        );

    include my_cells;

    add_gp = cell_set::add;
    add_fp = cell_set::add;
    add_cc = cell_set::add;
    add_spr = cell_set::add;
    add_mem = cell_set::add;
    add_ctrl = cell_set::add;
    add_cellset = cell_set::add;

    reg_gp = reg REGISTER;
    reg_fp = reg FLOAT_REGISTER;
    reg_cc = reg CONDITION_CODES;
    reg_spr = reg spr;
    reg_mem = reg RAM_CELL;
    reg_ctrl = reg CONTROL_DEPENDENCY;
    reg_cellset = reg cellset;

    stackptr_r = reg_gp 1;
    asm_tmp_r = reg_gp 28;
    fasm_tmp = reg_fp 0;
    r0 = reg_gp 0;
    xer = reg_spr 1;
    lr = reg_spr 8;
    ctr = reg_spr 9;
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
