/* ######################################################################
   #                     THREADKIT_TRACE_MENU.SML                             #
   ###################################################################### */

/* An implementation of an xkit interface to the TraceTHREADKIT package.

   AUTHOR:  Clifford Krumvieda
            Department of Computer Science
            Cornell University
            Ithaca, NY 14850
            cliff@cs.cornell.edu
 */

/* ######################################################################

   Trace menus:  The mkTraceMenu function can be used to create a menu of 
    certain TraceTHREADKIT modules.  Each line in the menu consists of a box
    and a module name; the box has a checkmark in it if its module is
    being traced.  Clicking in the box toggles the checkmark and trace
    status.  
   The second argument to mkTraceMenu is a list of module names that 
    determine the "frontier" of modules appearing in the menu.  A 
    typical value is ["/"].

   ###################################################################### */

generic package MakeTHREADKITTraceMenu (package buffer_chan:  BUFFER_CHAN
			  and TraceTHREADKIT:  TRACE_THREADKIT
			  and Box: BOX
			  and Label: LABEL
			  and Toggle: TOGGLE
			  sharing box::W = label::W = toggle::W) : Threadkit_Trace_Menu
=
package {
    
    package w = box::W;

    local
        package bc = buffer_chan
        use Box Label Toggle w::threadkit
    in

      type trace_menu = box_layout;
      widgetOf = box::widgetOf;

      fun mkTraceMenu root only
	  =
	  {   toggleCh = bc::buffer ();

	      fun transform (name, isTraced)
                 =
                 {   toggle
                         =
                         mkToggleCheck root {
                             state = w::Active isTraced,
			     action = fn x =>
				          if     (x and TraceTHREADKIT::amTracing name) or
					     not (x or  TraceTHREADKIT::amTracing name)
                                          then ()
				          else bc::bufferSend (toggleCh, (name, x)),

			     color = NULL,
			     size = 30
                         };

		     label
                         =
                         mkLabel root {
                             label = TraceTHREADKIT::nameOf name,
				font = NULL,
				foreground = NULL,
				background = NULL,
				align = label::W.HLeft
                         };

		     box = (HzCenter
			   [WBox (toggle::widgetOf toggle),
			    Glue { nat = 5, min = 0, max = THE 5 },
			    WBox (label::widgetOf label),
			    Glue { nat = 5, min = 0, max = NULL } ]);

	      ((name, toggle), box);
	  };

	my (toggles, boxes)
            = 
	    fold (fn (x, (ts, bs)) => 
		  (fn (t, b) => (t . ts, b . bs)) (transform x))
	      (fold (fn (x, a) => TraceTHREADKIT::status (TraceTHREADKIT::moduleOf x) @ a) only [])
		([], []);

	fun imp ()
            =
	    {   fun handleToggle (name, x)
                    = 
		    ((if x then TraceTHREADKIT::traceOn else TraceTHREADKIT::traceOff) name;
		     map (fn (n, t) => setState (t, TraceTHREADKIT::amTracing n)) toggles; ());

	        handleToggle (bc::bufferAccept toggleCh);
	        imp ();
	    };

	make_thread "trace_menu" imp;

	mkLayout root (VtCenter boxes);
      }

    end
};

package threadkit_trace_menu = 
  MakeTHREADKITTraceMenu (package buffer_chan = buffer_chan
		    and TraceTHREADKIT = TraceTHREADKIT
		    and Box = Box
		    and Label = Label
		    and Toggle = Toggle);


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
