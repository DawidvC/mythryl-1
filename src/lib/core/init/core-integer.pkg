## core-integer.pkg
## (C) 2003 The SML/NJ Fellowship.
## Author: Matthias Blume (blume@tti-c::org)

# Compiled by:
#     src/lib/core/init/init.cmi



# Basic integer functionality for translating certain primops and
# integer::Int literals within the compiler.  This gets expanded
# into a full-functionality indefinite-precision integer arithmetic
# package in
#
#     src/lib/std/src/integer-guts.pkg



package core_integer : api {

    # We use a 30-bit representation, stored in 31-bit words for digits.
    # This way we avoid the extra boxing that would come with 32-bit values
    # and also have the benefit of an extra bit that can be used to store
    # carries.

    Rep = BI  { negative:  Bool, digits:  List( Unt ) };

    # This is the abstract built-in type "intinf".  It comes with no
    # operations of its own.  We use casts to go back and forth between
    # the representation type "rep" and the abstract type "intinf".

    Intinf = primitive_types::Intinf;

    #  Here are the "cast" operations: 
    abstract:  Rep    -> Intinf;
    concrete:  Intinf -> Rep;

    #  the number of bits in one "big digit" 
    base_bits:  Unt;

    #  the actual base: 
    base:  Unt;

    #  maximum value of a "big digit": 
    max_digit:  Unt;

    # The following three functions are copied into package _Core
    # from where the compiler's "translate" phase will pick them to
    # implement precision-extending and precision-shrinking conversions
    # that involve Intinf.  We only provide operations between
    # Int32 and Intinf.  For precisions less than 32 bits the compiler
    # must insert an additional conversion:

    test_inf:    Intinf -> Int32;		# fit value (2's complement) in Int32, raise OVERFLOW if too large 
    trunc_inf:   Intinf -> Int32;		#  truncate value (2's complement repr) to fit in Int32: 
    copy_inf:    Int32 -> Intinf;		#  Copy bits from Int32 into (non-negative) Intinf: 

    extend_inf:  Int32 -> Intinf;		#  sign-extend Int32: 
    fin_to_inf:   (Int32, Bool) -> Intinf;	#  Combined (sign-extension takes place when second argument is TRUE): 
    test_inf64:    Intinf -> (Unt32, Unt32);	#  fit value (2's complement) in "int64", raise OVERFLOW if too large 

    trunc_inf64:   Intinf -> (Unt32, Unt32);    #  truncate value (2's complement repr) to fit in "int64": 
    copy_inf64:    (Unt32, Unt32) -> Intinf;    #  Copy bits from "int64" into (non-negative) Intinf: 
    extend_inf64:  (Unt32, Unt32) -> Intinf;    #  sign-extend "int64": 

    fin_to_inf64:   (Unt32, Unt32, Bool) -> Intinf;	#  Combined (sign-extension takes place when second argument is TRUE): 

    # These two directly take the list of digits
    # to be used by the internal representation:
    #
    make_neg_inf:  List( Unt ) -> Intinf;
    make_pos_inf:  List( Unt ) -> Intinf;

    # In the common case where only one big digit is involved,
    # use a shortcut without list allocation:
    #
    make_small_neg_inf:  Unt -> Intinf;
    make_small_pos_inf:  Unt -> Intinf; 

    # For -base < i < base we have low_value i = i.
    # For other i we have low_value i = -base (= neg_base_as_int).
    # This can be used to implement faster pattern-match code for
    # the common case that the pattern consists of small values.
    #
    low_value:  Intinf -> Int;
    neg_base_as_int:  Int;

    # Various primitive operations for use by the pervasive dictionary,
    # plus stuff that we have to implement here anyway, so the
    # real package integer can pick them up:
    #
    (-_) : Intinf -> Intinf;
    neg  : Intinf -> Intinf;
    + : (Intinf, Intinf) -> Intinf;
    - : (Intinf, Intinf) -> Intinf;
    * : (Intinf, Intinf) -> Intinf;
    div:  (Intinf, Intinf) -> Intinf;
    mod:  (Intinf, Intinf) -> Intinf;
    quot:  (Intinf, Intinf) -> Intinf;
    rem:  (Intinf, Intinf) -> Intinf;
    < : (Intinf, Intinf) -> Bool;
    <= : (Intinf, Intinf) -> Bool;
    > : (Intinf, Intinf) -> Bool;
    >= : (Intinf, Intinf) -> Bool;
    compare:  (Intinf, Intinf) -> order::Order;
    abs:  Intinf -> Intinf;
    pow:  (Intinf, Int) -> Intinf;

    div_mod:  (Intinf, Intinf) -> (Intinf, Intinf);
    quot_rem:  (Intinf, Intinf) -> (Intinf, Intinf);

    # Support for scanning and formatting:
    #
    natdivmodd:  (List( Unt ), Unt) -> (List( Unt ), Unt);
    natmadd:  (Unt, List( Unt ), Unt) -> List( Unt );

}
{
    infixr val 60 ! ;

    not = inline::inlnot;

    w31to_i32  = inline::copy_31_32_i;
    w32to_i32  = inline::copy_32_32_wi;
    w31to_w32  = inline::copy_31_32_w;
    i32to_w31  = inline::trunc_32_31_i;
    i32to_w32  = inline::copy_32_32_iw;
    w32to_w31  = inline::trunc_32_31_w;

    my (-_) = inline::i32neg;
    my neg  = inline::i32neg;

    infix val | & >> ^ <<;

    (|)  = inline::w32orb;
    (^)  = inline::w32xorb;
    (&)  = inline::w32andb;
    (>>) = inline::w32rshiftl;
    (<<) = inline::w32lshift;

    #  ******************* 
    Intinf = primitive_types::Intinf;

    # assuming 30-bit digits (must match actual implementation),
    # least significant digit first,
    # normalized (last digit != 0)

    Rep = BI  { negative:  Bool, digits:  List( Unt ) };

    fun abstract (r:  Rep) : Intinf = inline::cast r;
    fun concrete (i:  Intinf) : Rep = inline::cast i;

    my h_base_bits:  Unt = 0u15;
    my base_bits:  Unt = inline::w31lshift (h_base_bits, 0u1);
    my max_digit:  Unt = 0ux3fffffff;
    max_digit32 = w31to_w32 max_digit;
    my max_digit_l:  Unt = 0ux7fff;	#  lower half of maxDigit 
    max_digit_l32 = w31to_w32 max_digit_l;
    my base:  Unt = 0ux40000000;
    base32 = w31to_w32 base;
    my neg_base_as_int:  Int = -0x40000000;

    gap = inline::w31sub (0u32, base_bits); #  32 - base_bits 
    slc = inline::w31sub (base_bits, gap);  #  BaseBits - gap 

    fun neg64 (hi, 0u0) => (inline::w32neg hi, 0u0);
        neg64 (hi, lo) => (inline::w32notb hi, inline::w32neg lo);
    end;
	      
    fun test_inf i
        =
	{   my BI { negative, digits } = concrete i;

	    fun negif i32
                =
                if negative  -i32; else i32;fi;

	    case digits
              
		 []         => 0;
		 [d]        => negif (w31to_i32 d);
		 [d0, 0u1]  => negif (w32to_i32 (w31to_w32 d0 | base32));

		 [0u0, 0u2] => if negative  -0x80000000;
			                   else raise exception assembly::OVERFLOW; fi;

		 _ => raise exception assembly::OVERFLOW;
            esac;
	};

    fun test_inf64 i
        =
	{   my BI { negative, digits }
                =
                concrete i;

	    fun negif hilo
                =
                if negative  neg64 hilo;
                else               hilo;
                fi;

	    case digits
              
	         []  =>  (0u0, 0u0);
	         [d] =>  negif (0u0, w31to_w32 d);

	         [d0, d1]
                     =>
	             {   my (w0, w1) = (w31to_w32 d0, w31to_w32 d1);
	                 negif (w1 >> gap, w0 | (w1 << base_bits));
	             };

	         [0u0, 0u0, 0u8]
                     =>
	             if negative  (0ux80000000, 0u0);
		     else raise exception assembly::OVERFLOW;fi;

	         [d0, d1, d2]
                     =>
	             if   (inline::w31ge (d2, 0u8))
                         
                          raise exception assembly::OVERFLOW;
		     else
                          my (w0, w1, w2)
                              =
			      (w31to_w32 d0, w31to_w32 d1, w31to_w32 d2);

		          negif ((w1 >> gap) | (w2 << slc),
				w0 | (w1 << base_bits));
		     fi;

	         _   => raise exception assembly::OVERFLOW;
            esac;
	};

    fun trunc_inf i
        =
	{   my BI { negative, digits } =   concrete i;

	    b = case digits
                  
		     []          =>   0u0;
		     [d]         =>   w31to_w32 d;
		     d0 ! d1 ! _ =>   w31to_w32 d0 | (w31to_w32 d1 << base_bits);
                esac;

	    w32to_i32 (if negative  inline::w32neg b; else b; fi);
	};

    fun trunc_inf64 i
        =
	{   my BI { negative, digits } = concrete i;

	    hilo =
		case digits
                  
		    []   =>  (0u0, 0u0);
		    [d0] =>  (0u0, w31to_w32 d0);

		    [d0, d1]
                        =>
		        {   my (w0, w1) = (w31to_w32 d0, w31to_w32 d1);
		            (w1 >> gap, w0 | (w1 << base_bits));
		        };

		   d0 ! d1 ! d2 ! _
                        =>
		        {   my (w0, w1, w2)
                               =
			       (w31to_w32 d0, w31to_w32 d1, w31to_w32 d2);

		            ((w1 >> gap) | (w2 << slc), w0 | (w1 << base_bits));
		        };
                esac;

	    if negative    neg64 hilo;
            else                 hilo;
            fi;
	};

    fun extend_inf i32
        =
        {   fun e (_, 0u0)
                    =>
                    BI { negative => FALSE, digits => [] };

	        e (negative, w31)
                    =>
		    BI { negative,

		         digits   => if (inline::w31ge (w31, base))
                                         
				          [inline::w31sub (w31, base), 0u1];
				     else
                                          [w31];
                                     fi
                       };
            end;
    
	abstract (if   (inline::i32eq (i32, -0x80000000) )  BI { negative => TRUE, digits => [0u0, 0u2 ] };
		  elif (inline::i32lt (i32, 0) )            e (TRUE, i32to_w31 (-i32));
		  else                                      e (FALSE, i32to_w31 i32);
                  fi
                 );
    };

    fun copy_inf64' (_, (0u0, 0u0))
            =>
            abstract (BI { negative => FALSE,
						 digits => [] } );
        copy_inf64' (negative, (hi, lo))
	    => 
	    {   infix val <>;

                my (<>) = inline::w31ne;

		d0 = w32to_w31 (lo & 0ux3fffffff);
		d1 = w32to_w31 (((hi & 0uxfffffff) << 0u2) | (lo >> 0u30));
		d2 = w32to_w31 (hi >> 0u28);

	     abstract (BI { negative,
			    digits => if   (d2 <> 0u0 ) [d0, d1, d2];
				      elif (d1 <> 0u0 ) [d0, d1];
				      elif (d0 <> 0u0 ) [d0];
				      else [];
                                      fi
                           }
                       );
	    };
    end;

    fun copy_inf64 hilo
        =
        copy_inf64' (FALSE, hilo);

    fun extend_inf64 (hi, lo)
        =
	if   (inline::w32ne (hi & 0ux80000000, 0u0))
            
	     copy_inf64' (TRUE, neg64 (hi, lo));
	else copy_inf64' (FALSE,      (hi, lo)); fi;

    fun copy_inf i32
        =
	{   w32 = i32to_w32 i32;

	    digits
                =
		if (inline::w32eq (w32, 0u0) ) [];
		elif (inline::w32ge (w32, base32) )
		    [w32to_w31 (w32 & max_digit32), w32to_w31 (w32 >> base_bits)];
		else [w32to_w31 w32];
                fi;

	    abstract (BI { negative => FALSE, digits } );
	};

    fun fin_to_inf (i32, extend)
        =
	if extend  extend_inf i32;
        else         copy_inf i32;
        fi;

    fun fin_to_inf64 (hi, lo, extend)
        =
	if extend  extend_inf64 (hi, lo);
        else         copy_inf64 (hi, lo);
        fi;

    fun make_inf negative digits
        =
	abstract (BI { negative, digits } );

    make_neg_inf = make_inf TRUE;
    make_pos_inf = make_inf FALSE;

    fun make_small_inf _ 0u0
            =>
	    abstract (BI { negative => FALSE, digits => [] } );

       make_small_inf negative digit
           =>
	   abstract (BI { negative, digits => [digit] } );
    end;

    make_small_neg_inf =  make_small_inf TRUE;
    make_small_pos_inf =  make_small_inf FALSE;

    fun low_value i
        =
	case (concrete i)
          
	     BI { digits => [], ... }                =>   0;
	     BI { digits => [d], negative => FALSE } =>   inline::copy_31_31_wi d;
	     BI { digits => [d], negative => TRUE  } =>   inline::i31neg (inline::copy_31_31_wi d);
	     _                                       =>   neg_base_as_int;
       esac;

    # Concrete->abstract wrappers for unary and binary functions 
    #
    fun fabs1 f x = abstract (f (concrete x));
    fun fabs2 f (x, y) = abstract (f (concrete x, concrete y));
    fun fabs2c f (x, y) = f (concrete x, concrete y);

    fun fabs22 f (x, y)
	=
	{   my (a, b) =  f (concrete x, concrete y);

	    (abstract a, abstract b);
	};

    # Like BI, but make sure that digits = [] implies not negative 
    #
    fun bi { digits => [], ... } => BI { digits => [], negative => FALSE };
        bi arg => BI arg;
    end;

    fun abs' (BI { negative, digits } )
        =
	BI { negative => FALSE, digits };

    fun neg (BI { digits, negative } )
        =
	bi { digits, negative => not negative };

    include order;
	     
    fun dcmp (x, y)
        =
	if   (inline::w31lt (x, y) ) LESS;
        elif (inline::w31gt (x, y) ) GREATER;
        else                         EQUAL;
        fi;

    fun natcmp ([], []) =>  EQUAL;
	natcmp ([], _)  =>  LESS;
	natcmp (_, [])  =>  GREATER;

	natcmp (x ! xs, y ! ys)
            =>
	    case (natcmp (xs, ys))
              
		EQUAL   =>  dcmp (x, y);
	        unequal =>  unequal;
            esac;
    end;

    fun lt (BI { negative => FALSE, ... },
            BI { negative => TRUE, ... } )
            =>
            FALSE;

	lt (BI { negative => TRUE, ... },
            BI { negative => FALSE, ... } )
            =>
            TRUE;

	lt (BI { negative, digits => d1 },
            BI { digits => d2, ... } )
            =>
	    (inline::(==)) (natcmp (d1, d2), if negative  GREATER; else LESS;fi);
    end;

    fun gt (x, y) =  lt (y, x);
    fun ge (x, y) =  not (lt (x, y));
    fun le (x, y) =  not (gt (x, y));

    fun adddig (d1, d2)
        =
        {   sum = inline::w31add (d1, d2);

	    { carry  =>  inline::w31ge (sum, base),
	      result =>  inline::w31andb (sum, max_digit)
            };
	};

    # Add one to nat:
    # 
    fun natinc [] => [0u1];

        natinc (x ! xs)
            =>
	    if   (inline::w31eq (x, max_digit))
                
                 0u0 ! natinc xs;
	   else
                 inline::w31add (x, 0u1) ! xs;
           fi;
    end;

    fun natdec (0u0 ! xs) =>  max_digit ! natdec xs;
	natdec [0u1]      =>  [];
	natdec (x ! xs)   =>  inline::w31sub (x, 0u1) ! xs;
	natdec []         =>  raise exception assembly::OVERFLOW;			# Should never happen! 
    end;


    # Add two nats plus 1 (carry):
    #
    fun natadd1 (x, []) =>  natinc x;
	natadd1 ([], y) =>  natinc y;

	natadd1 (x ! xs, y ! ys)
            =>
            {   my { carry, result } =  adddig (x, y);

		my (carry, result)
                    =
		    if   (inline::w31eq (result, max_digit))
                        
                         (TRUE, 0u0);
		    else
                         (carry, inline::w31add (result, 0u1));
                    fi;

		result ! natadd01 (carry, xs, ys);
	    };
    end 

    # Add two nats:
    #
    also
    fun natadd0 (x, []) => x;
        natadd0 ([], y) => y;

        natadd0 (x ! xs, y ! ys)
	    =>
	    {   my { carry, result }
                    =
                    adddig (x, y);

		result ! natadd01 (carry, xs, ys);
	    };
    end 

    # Add two nats with optional carry:
    #
    also
    fun natadd01 (carry, xs, ys)
         =
	 if carry   natadd1 (xs, ys);
         else       natadd0 (xs, ys);        fi;

    exception NEGATIVE;

    # natsub hopes that xs >= ys + carry, raises NEGATIVE otherwise 
    #
    fun natsub (xs, [], FALSE) => xs;
	natsub (xs, [], TRUE) => natsub (xs, [0u0], TRUE);
	natsub ([], _, _) => raise exception NEGATIVE;

	natsub (x ! xs, y ! ys, c)
            =>
            {   y' =  if c  inline::w31add (y, 0u1); else y;fi;

		my (result, carry)
                    =
		    if   (inline::w31lt (x, y'))
                        
			 (inline::w31sub (inline::w31add (x, base), y'), TRUE);
		    else
                         (inline::w31sub (x, y'), FALSE);
                    fi;

		case (natsub (xs, ys, carry))
                  
		     []   =>  if (inline::w31eq (result, 0u0) ) []; else [result];fi;
		     more =>  result ! more;
                esac;
	    };
    end;



    fun natsub0 (xs, ys)
        =
        natsub (xs, ys, FALSE);



    fun sub0 (xs, ys)
        =
	BI { negative => FALSE,
             digits   => natsub0 (xs, ys)
           }
	except
            NEGATIVE =  bi { negative => TRUE, digits => natsub0 (ys, xs) };



    fun add0 (FALSE, xs1, FALSE, xs2)
	    =>
	    BI { negative => FALSE, digits => natadd0 (xs1, xs2) };

       add0 (TRUE, xs1, TRUE, xs2)
           =>
	   BI { negative => TRUE, digits => natadd0 (xs1, xs2) };

       add0 (FALSE, xs1, TRUE, xs2)
           =>
	   sub0 (xs1, xs2);

       add0 (TRUE, xs1, FALSE, xs2)
           =>
	   sub0 (xs2, xs1);
    end;



    fun add (BI b1, BI b2)
        =
	add0 (b1.negative, b1.digits, b2.negative, b2.digits);



    fun sub (BI b1, BI b2)
        =
	add0 (b1.negative, b1.digits, not b2.negative, b2.digits);



    fun compare' (BI { negative => TRUE, ... }, BI { negative => FALSE, ... } )
            =>
	    LESS;

	compare' (BI { negative => FALSE, ... }, BI { negative => TRUE, ... } )
            =>
	    GREATER;

	compare' (BI { negative, digits => d1 }, BI { digits => d2, ... } )
            =>
	    if negative  natcmp (d2, d1); else natcmp (d1, d2);fi;
    end;

    fun ddmul (x, y)
	=
	{   fun high w32 = w32 >> h_base_bits;
	    fun low w32 = w32 & max_digit_l32;
	    fun hl w32 = (high w32, low w32);

	    my (xh, xl) = hl (w31to_w32 x);
	    my (yh, yl) = hl (w31to_w32 y);

	    a = inline::w32mul (xh, yh);
	    c = inline::w32mul (xl, yl);

	    #  B = b' - a - c = xh * yl + xl * yh 
	    b' = inline::w32mul (inline::w32add (xh, xl), inline::w32add (yh, yl));
	    b = inline::w32sub (b', inline::w32add (a, c));

	    my (bh, bl) = hl b;

	    l0 = inline::w32add (c, inline::w32lshift (bl, h_base_bits));
	    l32 = l0 & max_digit32;
	    lc = l0 >> base_bits;
	    h32 = inline::w32add (inline::w32add (a, bh), lc);

	    (w32to_w31 h32, w32to_w31 l32);
	};

    fun natmadd (0u0, _,  0u0) =>  [];
	natmadd (0u0, _,    c) =>  [c];
	natmadd (_, [],   0u0) =>  [];
	natmadd (_, [],     c) =>  [c];
	natmadd (0u1, xs, 0u0) =>  xs;
	natmadd (0u1, xs,   c) =>  natadd0 (xs, [c]);

	natmadd (w, x ! xs, c)
            =>
            {   my (h, l) = ddmul (w, x);
		my { carry,  result => l' } = adddig (l, c);
		h' = if carry  inline::w31add (h, 0u1); else h;fi;

		l' ! natmadd (w, xs, h');
	    };
    end;

    fun natmul ([], _) => [];
	natmul (_, []) => [];

	natmul (xs, [0u1]) => xs;
	natmul ([0u1], ys) => ys;

	natmul (x ! xs, ys)
            =>
	    natadd0 (natmadd (x, ys, 0u0), 0u0 ! natmul (xs, ys));
    end;

    fun mul (BI x, BI y)
        =
	bi { negative => (inline::(!=)) (x.negative, y.negative),
	     digits => natmul (x.digits, y.digits) };

    one = BI { negative => FALSE, digits => [0u1] };
    zero = BI { negative => FALSE, digits => [] };

    fun posi digits =  BI { digits, negative => FALSE };
    fun negi digits =  BI { digits, negative => TRUE };
    fun zneg digits =  bi { digits, negative => TRUE };

    fun consd (0u0, []) => [];
        consd (x, xs) => x ! xs;
    end;

    fun scale w = inline::w31div (base, inline::w31add (w, 0u1));

    # Return length-1 and last element:
    #
    fun length'n'last []  =>  (0, 0u0);		# Should not happen. 
        length'n'last [x] =>  (0, x);

        length'n'last (_ ! l)
	    =>
	    {   my (len, last) =  length'n'last l;

		(inline::i31add (len, 1), last);
	    };
    end;

    fun nth (_, []) => 0u0;
        nth (0, x ! _ ) =>  x;
        nth (n, _ ! xs) =>  nth (inline::i31sub (n, 1), xs);
    end;

    # Divide DP number by digit; assumes u < i, i >= base/2:
    #
    fun natdivmod2 ((u, v), i)
        =
	{   fun low  w =  inline::w31andb    (w, max_digit_l);
	    fun high w =  inline::w31rshiftl (w, h_base_bits);

	    my (vh, vl) = (high v, low v);
	    my (ih, il) = (high i, low i);

	    fun adj (q, r, vx)
                =
		loop (q, x)
                where
		    x = inline::w31add (inline::w31lshift (r, h_base_bits), vx);
		    y = inline::w31mul (q, il);

		    fun loop (q, x)
                        =
			if (inline::w31ge (x, y))    (q, inline::w31sub (x, y));
			else                       loop (inline::w31sub (q, 0u1), inline::w31add (x, i));
                        fi;
		end;

	    q1 = inline::w31div (u, ih);
	    r1 = inline::w31mod (u, ih);
	    my (q1, r1) = adj (q1, r1, vh);
	    q0 = inline::w31div (r1, ih);
	    r0 = inline::w31mod (r1, ih);

	    my (q0, r0) = adj (q0, r0, vl);

	    (inline::w31add (inline::w31lshift (q1, h_base_bits), q0), r0);
	};

    # Divide bignat by digit > 0:
    #
    fun natdivmodd (m, 0u1) => (m, 0u0); #  speedup 

        natdivmodd (m, i)
            =>
            { 
		scale = scale i;
		i' = inline::w31mul (i, scale);
		m' = natmadd (scale, m, 0u0);

		fun dmi [] => ([], 0u0);

		    dmi (d ! r)
                        =>
                        {   my (qt, rm) = dmi r;
			    my (q1, r1) = natdivmod2 ((rm, d), i');

			    (consd (q1, qt), r1);
			};
                end;

		my (q, r) = dmi m';

		(q, inline::w31div (r, scale));
	    };
    end;

    # From Knuth Vol II, 4.3.1, but without opt. in step D3:
    #
    fun natdivmod (m, []) => raise exception assembly::DIVIDE_BY_ZERO;

	natdivmod ([], n) => ([], []); #  speedup 

	natdivmod (d ! r, 0u0 ! s)
            =>
            { 
	        my (qt, rm) = natdivmod (r, s);
	        (qt, consd (d, rm));
            }; #  speedup 

	natdivmod (m, [d])
            =>
            { 
	        my (qt, rm) = natdivmodd (m, d);
	        (qt, if (inline::w31eq (rm, 0u0) ) []; else [rm];fi);
            };

	natdivmod (m, n)
            =>
            {   my (ln, last) = length'n'last n; #  ln >= 1 

		scale = scale last;

		m' = natmadd (scale, m, 0u0);
		n' = natmadd (scale, n, 0u0);

		n1 = nth (ln, n');	#  >= base/2 

		fun divl [] => ([], []);

		    divl (d ! r)
                        =>
                        {
			     my (qt, rm) = divl r;
			     m = consd (d, rm);

			     fun msds ([], _) => (0u0, 0u0);
				 msds ([d], 0) => (0u0, d);
				 msds ([d2, d1], 0) => (d1, d2);
				 msds (d ! r, i) => msds (r, inline::i31sub (i, 1));
                             end;

			     my (m1, m2) = msds (m, ln);

			     tq = if (inline::(==) (m1, n1))  max_digit;
				  else                        #1 (natdivmod2 ((m1, m2), n1));
                                  fi;

			     fun try (q, qn')
                                 =
                                 (q, natsub0 (m, qn'))
				 except
                                     NEGATIVE
                                         =
                                         try (inline::w31sub (q, 0u1),
							 natsub0 (qn', n'));

			     my (q, rr) = try (tq, natmadd (tq, n', 0u0));

			     (consd (q, qt), rr);
                        };
                end;

		my (qt, rm') = divl m';
		my (rm, _/*0*/) = natdivmodd (rm', scale);

		(qt, rm);
	    };
    end;

    fun quot_rem' (_, BI { digits => [], ... } )
            =>
            raise exception assembly::DIVIDE_BY_ZERO;

	quot_rem' (BI { digits => [], ... }, _)
            =>
            (zero, zero);

	quot_rem' (BI x, BI y)
            =>
            {
		my (q, r) = natdivmod (x.digits, y.digits);

		# Construct return tuple:
		#
		( if (((inline::(!=)) (x.negative, y.negative)))  zneg q; else posi q;fi,

		  if x.negative  zneg r; else posi r;fi
                );
	    };
    end;

    fun div_mod' (_, BI { digits => [], ... }   ) =>  raise exception assembly::DIVIDE_BY_ZERO;
	div_mod' (   BI { digits => [], ... }, _) =>  (zero, zero);

	div_mod' (BI x, BI y)
            =>
	    if   (inline::(==) (x.negative, y.negative))
                
		 my (q, r) = natdivmod (x.digits, y.digits);

		 (posi q, if x.negative  zneg r; else posi r;fi);
		
	    else
		 my (m, n) = (x.digits, y.digits);
		 my (q, r) = natdivmod (natdec m, n);
		 mdd = natsub (n, r, TRUE);

		 (negi (natinc q),
		 if x.negative  posi mdd; else zneg mdd;fi);
	    fi;
    end;

    fun div'  arg =  #1 (div_mod' arg);
    fun quot' arg =  #1 (quot_rem' arg);

    # For div and mod we special-case a divisor of 2 (common even-odd test):
    #
    fun mod' (BI { digits => [], ... }, _) => zero;
	mod' (BI { digits => low ! _, ... },
	       BI { digits => [0u2], negative } )
            =>
	    if (inline::w31eq (inline::w31andb (low, 0u1), 0u0) ) zero;
	    else BI { digits => [0u1], negative };
	    fi;

	mod' arg => #2 (div_mod' arg);
    end;

    fun rem' (BI { digits => [], ... }, _) => zero;

	rem' (BI { digits => low ! _, negative },
	       BI { digits => [0u2], ... } )
            =>
	   if (inline::w31eq (inline::w31andb (low, 0u1), 0u0) )
                zero;
	   else BI { digits => [0u1], negative };
           fi;

	rem' arg =>  #2 (quot_rem' arg);
    end;

    fun natpow (_,  0) => [0u1];
	natpow ([], n) => if (inline::i31lt (n, 0) ) raise exception assembly::DIVIDE_BY_ZERO; else [];fi;

	natpow (x, n)
	    =>
	    if (inline::i31lt (n, 0))
                
                 [];
	    else
		 exp (x, inline::copy_31_31_iw n)
                 where
		     fun exp (m, 0u0) => [0u1];
			 exp (m, 0u1) => m;
			 exp (m, n) => {
			      x = exp (m, inline::w31rshiftl (n, 0u1));
			      y = natmul (x, x);

			      if (inline::w31eq (inline::w31andb (n, 0u1), 0u0) )
				  y;
			      else natmul (y, m);fi;
			  };
		     end;
		 end;

            fi;
    end;

    fun pow (_, 0)
            =>
            abstract (BI { negative => FALSE, digits => [0u1] } );

	pow (i, n)
            =>
            {   my BI { negative, digits }
                    =
                    concrete i;

	        abstract (bi { negative => negative and
				       inline::i31eq (inline::i31rem (n, 2), 1),
			    digits => natpow (digits, n) } );
	    };
    end;

    my (-_) =  fabs1 neg;
    my neg  =  fabs1 neg;
    my   -  =  fabs2 sub;
    my   +  =  fabs2 add;
    my   *  =  fabs2 mul;

    div  = fabs2 div';
    mod  = fabs2 mod';
    quot = fabs2 quot';
    rem  = fabs2 rem';

    div_mod = fabs22 div_mod';
    quot_rem = fabs22 quot_rem';

    my <  = fabs2c lt;
    my >  = fabs2c gt;
    my <= = fabs2c le;
    my >= = fabs2c ge;

    abs = fabs1 abs';

    compare = fabs2c compare';
};





##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
