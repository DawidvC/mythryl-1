#!@SHELL@

# This script gets called by the ./build scripts
# which generate our various standalone apps:
#
#    src/lib/compiler/lower/tools/nowhere/build
#    src/app/lex/build
#    src/app/yacc/build
#    src/app/burg/build
#    src/app/heap2asm/build
#    src/app/c-glue-maker/build
#
# We do various minor wrapper-type stuff here, then
# invoke mythryld with the
#
#     --build-an-executable-mythryl-heap-image
#
# kludge that triggers execution of our second half,
# the function
#
#    build_an_executable_mythryl_heap_image
#
# in
#
#    src/app/make7/main/make7-g.pkg




if [ x${LIB7_HOME} = x ] ; then
    BIN_DIR="@BIN_DIR@"
else
    BIN_DIR=${LIB7_HOME}/bin
fi

MYTHRYLD=$BIN_DIR/mythryld
LD7=$BIN_DIR/ld7

this_script=$0

echo " _build-an-executable-mythryl-heap-image:   Starting."

xx=$$
pkgfile=tmp-make7-pid-$xx-export.pkg
make7file=tmp-make7-pid-$xx-export.make6
listfile=tmp-make7-pid-$xx.OH7_FILES_TO_LOAD
linkargsfile=tmp-make7-pid-$xx.LINKARGS

dulist=''

# XXX BUGGO UNCOMMENTME
# trap 'rm -rf $pkgfile $make7file $listfile $linkargsfile' 0 1 2 3 15

usage() {
    echo ${this_script}: $*
    echo Usage: $this_script '[-S setup] root-group [main-function [heapfile]]'
    exit 1
}

setup=

while [ $# != 0 ] ; do
    case $1 in
    -D*|-U*|-C*)
	dulist="$dulist $1"
	shift
	;;
    -S)
	shift
	if [ $# = 0 ] ; then
	    usage missing argument for -S
	fi
	setup=$1
	shift
	;;
    *)
	break
	;;
    esac
done

if [ $# = 4 ] ; then
    setup=$1
    root=$2
    main=$3
echo " _build-an-executable-mythryl-heap-image:   main=$main (I)"
    heap=$4
elif [ $# = 3 ] ; then
    root=$1
    main=$2
echo " _build-an-executable-mythryl-heap-image:   main=$main (II)"
    heap=$3
elif [ $# = 2 ] ; then
    root=$1
    main=$2
echo " _build-an-executable-mythryl-heap-image:   main=$main (III)"
    heap=`basename "$root" .make6`
elif [ $# = 1 ] ; then
    root=$1
    # quick hack for now:
    main=Test::main
    heap=`basename "$root" .make6`
else
    usage 'No .make6 file specified!'
fi
main=`echo "$main"|sed -e 's/\./::/g'`
echo " _build-an-executable-mythryl-heap-image:   main=$main (after sed)"
# main="main::main" # XXX BUGGO REMOVEME!

rare_string=xyzzy_plugh

cat >$pkgfile <<EOF
package ${rare_string} { my _ = lib7::spawn_to_disk ("${heap}", ${main}); };
EOF

echo " _build-an-executable-mythryl-heap-image:   Listing $pkgfile:"
echo
cat $pkgfile
echo

cat >$make7file <<EOF
group_exports package ${rare_string} LIBRARY_GROUP_COMPONENTS \$ROOT/src/lib/std/stdlib.make6 ${root} ${pkgfile}
EOF

echo " _build-an-executable-mythryl-heap-image:   Listing make7file:"
echo
cat $make7file
echo

# Invoke mythryld with the '--build-an-executable-mythryl-heap-image' kludge
# that triggers execution of our second half, which is embedded in
#    src/app/make7/main/standard-compiler-g.pkg   
# as the function build_lib7_executable_heap_image.           XXX BUGGO FIXME -- should be a   mythryld -e '...'   or such.
#
# Unless the heap image exists and is up-to-date, build_lib7_executable_heap_image
# will write the arguments for ld7 into $linkargsfile.
#
echo " _build-an-executable-mythryl-heap-image:   Doing:                  \"$MYTHRYLD\" $dulist --build-an-executable-mythryl-heap-image $setup \"$root\" \"$make7file\" \"$heap\" \"$listfile\" \"$linkargsfile\""
if "$MYTHRYLD" $dulist --build-an-executable-mythryl-heap-image $setup "$root" "$make7file" "$heap" "$listfile" "$linkargsfile"
then
    if [ -r "$linkargsfile" ]; then
         echo " _build-an-executable-mythryl-heap-image:   Doing:  	              \"$LD7\" \`cat \"$linkargsfile\"\`"
	"$LD7" `cat "$linkargsfile"`
        chmod +x "$heap"
    fi
else
    exit $?
fi
