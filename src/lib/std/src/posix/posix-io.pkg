## posix-io.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

# Package for POSIX 1003.1 primitive I/O operations
# This is a subpackage of the POSIX 1003.1 based
# 'Posix' package
#
#     src/lib/std/src/posix/posix.pkg

# An alternate portable (cross-platform)
# I/O interface is defined and implemented in:
#
#     src/lib/std/src/winix/winix-io.api
#     src/lib/std/src/unix/winix-io.pkg

stipulate
    package host_unt      =      host_unt_guts;		# host_unt_guts		is from   src/lib/std/src/bind-sysword-32.pkg
    package int           =           int_guts;		# int_guts		is from   src/lib/std/src/bind-int-32.pkg
    package file_position = file_position_guts;		# file_position_guts	is from   src/lib/std/src/bind-position-31.pkg
herein
package posix_io {

    package fs
        =
        posix_file;				# posix_file		is from   src/lib/std/src/posix/posix-file.pkg

    package om: (weak)  api { 
                       Open_Mode = O_RDONLY | O_WRONLY | O_RDWR; 
                 }
        = fs;

    include om;

    Sy_Unt = host_unt::Unt;
    Sy_Int = host_int::Int;

#    my op | = host_unt::bitwise_or;
#    my op & = host_unt::bitwise_and;

    fun cfun x
        =
        c_interface::c_function "POSIX-IO" x;

    my osval:  String -> Sy_Int = cfun "osval";			# osval		is from  src/runtime/c-libs/posix-io/osval.c
    w_osval = host_unt::from_int o osval;

    fun fail (fct, msg)
        =
        raise exception FAIL ("POSIX_IO." + fct + ": " + msg);

    File_Descriptor = fs::File_Descriptor;
    Process_Id = posix_process::Process_Id;
    
    my pipe' : Void -> (Sy_Int, Sy_Int)
        =
        cfun "pipe";						# pipe		is from  src/runtime/c-libs/posix-io/pipe.c

    fun pipe ()
        =
        {   my (ifd, ofd) = pipe' ();
          
            { infd => fs::int_to_fd ifd, outfd => fs::int_to_fd ofd };
        };

    my dup'  : Sy_Int -> Sy_Int         = cfun "dup";		# dup		is from  src/runtime/c-libs/posix-io/dup.c
    my dup2' : (Sy_Int, Sy_Int) -> Void = cfun "dup2";		# dup2		is from  src/runtime/c-libs/posix-io/dup2.c

    fun dup fd = fs::int_to_fd (dup' (fs::fd_to_int fd));
    fun dup2 { old, new } = dup2'(fs::fd_to_int old, fs::fd_to_int new);

    my close' : Sy_Int -> Void
        =
        cfun "close";						# close		is from  src/runtime/c-libs/posix-io/close.c

    fun close fd
        =
        close' (fs::fd_to_int fd);

    my read' : (Int, Int) -> unt8_vector::Vector
        =
        cfun "read";						# read		is from  src/runtime/c-libs/posix-io/read.c

    my readbuf' : (Int, rw_unt8_vector::Rw_Vector, Int, Int) -> Int
        =
        cfun "readbuf";						# readbuf	is from  src/runtime/c-libs/posix-io/readbuf.c

    fun read_rw_vector (fd, asl)
	=
	{
	    my (buf, i, len) = rw_unt8_vector_slice::base asl;

	    readbuf' (fs::fd_to_int fd, buf, len, i);
	};

    fun read_vector (fd, count)
        = 
        if  (count < 0  )  raise exception SIZE;
                     else  read'(fs::fd_to_int fd, count);  fi;

    my writevec' : ((Int, unt8_vector::Vector, Int, Int)) -> Int
        =
        cfun "writebuf";					# writebuf	is from  src/runtime/c-libs/posix-io/writebuf.c

    my writearr' : ((Int, rw_unt8_vector::Rw_Vector, Int, Int)) -> Int
        =
        cfun "writebuf";

    fun write_rw_vector (fd, asl)
	=
	{   my (buf, i, len)
                =
                rw_unt8_vector_slice::base asl;

	    writearr' (fs::fd_to_int fd, buf, len, i);
	};

    fun write_vector (fd, vsl)
	=
	{   my (buf, i, len)
                =
                unt8_vector_slice::base vsl;

	    writevec' (fs::fd_to_int fd, buf, len, i);
	};

    Whence = SEEK_SET | SEEK_CUR | SEEK_END;

    seek_set = osval "SEEK_SET";
    seek_cur = osval "SEEK_CUR";
    seek_end = osval "SEEK_END";

    fun wh_to_word SEEK_SET => seek_set;
        wh_to_word SEEK_CUR => seek_cur;
        wh_to_word SEEK_END => seek_end;
    end;

    fun wh_from_word wh
        =
	if   (wh == seek_set ) SEEK_SET;
	elif (wh == seek_cur ) SEEK_CUR;
	elif (wh == seek_end ) SEEK_END;
	else                   fail ("whFromWord", "unknown whence " + (int::to_string wh));
        fi;
    
    package fd
      =
      package {
        stipulate package bf = bit_flags_g ();
	herein
	    include bf;
	end;

        cloexec = from_word (w_osval "cloexec");
      };

    package flags
      =
      package {
        stipulate package bf = bit_flags_g ();
	herein
	    include bf;
	end;

        append   = from_word (w_osval "append");
        dsync    = from_word (w_osval "dsync");
        nonblock = from_word (w_osval "nonblock");
        rsync    = from_word (w_osval "rsync");
        sync     = from_word (w_osval "sync");
      };

    my fcntl_d:    (Sy_Int, Sy_Int) -> Sy_Int    = cfun "fcntl_d";	# fcntl_d	is from  src/runtime/c-libs/posix-io/fcntl_d.c
    my fcntl_gfd:  Sy_Int -> Sy_Unt              = cfun "fcntl_gfd";	# fcntl_gfd	is from  src/runtime/c-libs/posix-io/fcntl_gfd.c
    my fcntl_sfd:  ((Sy_Int, Sy_Unt)) -> Void    = cfun "fcntl_sfd";	# fcntl_sfd	is from  src/runtime/c-libs/posix-io/fcntl_sfd.c
    my fcntl_gfl:  Sy_Int -> ((Sy_Unt, Sy_Unt))  = cfun "fcntl_gfl";	# fcntl_gfl	is from  src/runtime/c-libs/posix-io/fcntl_gfl.c
    my fcntl_sfl:  ((Sy_Int, Sy_Unt)) -> Void    = cfun "fcntl_sfl";	# fcntl_sfl	is from  src/runtime/c-libs/posix-io/fcntl_sfl.c

    fun dupfd { old, base }
        =
        fs::int_to_fd (fcntl_d (fs::fd_to_int old, fs::fd_to_int base));

    fun getfd fd
        =
        fd::from_word (fcntl_gfd (fs::fd_to_int fd));

    fun setfd (fd, fl)
        =
        fcntl_sfd (fs::fd_to_int fd, fd::to_word fl);

    fun getfl fd
        =
        {   my (status, omode) = fcntl_gfl (fs::fd_to_int fd);
          
            (flags::from_word status, fs::omode_from_unt omode);
        };

    fun setfl (fd, status)
        =
        fcntl_sfl (fs::fd_to_int fd, flags::to_word status);

    Lock_Type
        =
        F_RDLCK | F_WRLCK | F_UNLCK;

    package flock
      =
      package {
         Flock = FLOCK  {
             ltype:  Lock_Type,
             whence: Whence,
             start:  file_position::Int,
             len:    file_position::Int,
             pid:    Null_Or( Process_Id )
           };

        fun flock fv = FLOCK fv;
        fun ltype (FLOCK fv) = fv.ltype;
        fun whence (FLOCK fv) = fv.whence;
        fun start (FLOCK fv) = fv.start;
        fun len (FLOCK fv) = fv.len;
        fun pid (FLOCK fv) = fv.pid;
      };

    Flock_Rep
        =
        (Sy_Int, Sy_Int, int31::Int, int31::Int, Sy_Int);

    my fcntl_l:  (Sy_Int, Sy_Int, Flock_Rep) -> Flock_Rep
        =
        cfun "fcntl_l";						# fcntl_l	is from  src/runtime/c-libs/posix-io/fcntl_l.c

    f_getlk = osval "F_GETLK";
    f_setlk = osval "F_SETLK";
    f_setlkw = osval "F_SETLKW";
    f_rdlck = osval "F_RDLCK";
    f_wrlck = osval "F_WRLCK";
    f_unlck = osval "F_UNLCK";

    fun flock_to_rep (flock::FLOCK { ltype, whence, start, len, ... } )
        =
        {
            fun ltype_of F_RDLCK => f_rdlck;
                ltype_of F_WRLCK => f_wrlck;
                ltype_of F_UNLCK => f_unlck;
            end;
          
            (ltype_of ltype, wh_to_word whence, start, len, 0);
          };

    fun flock_from_rep (usepid, (ltype, whence, start, len, pid))
        =
        {
            fun ltype_of ltype
                = 
                if   (ltype == f_rdlck ) F_RDLCK;
                elif (ltype == f_wrlck ) F_WRLCK;
                elif (ltype == f_unlck ) F_UNLCK;
                else                     fail ("flockFromRep", "unknown lock type " + (int::to_string ltype));
                fi;
          
            flock::FLOCK { 
              ltype => ltype_of ltype,
              whence => wh_from_word whence,
              start,
              len,
              pid => if usepid  THE (posix_process::PID pid); else NULL;fi
            };
          };


    fun getlk (fd, flock)
        =
        flock_from_rep (TRUE, fcntl_l (fs::fd_to_int fd, f_getlk, flock_to_rep flock));


    fun setlk (fd, flock)
        =
        flock_from_rep (FALSE, fcntl_l (fs::fd_to_int fd, f_setlk, flock_to_rep flock));


    fun setlkw (fd, flock)
        =
        flock_from_rep (FALSE, fcntl_l (fs::fd_to_int fd, f_setlkw, flock_to_rep flock));


    my lseek' : (Sy_Int, int31::Int, Sy_Int) -> int31::Int
        =
        cfun "lseek";						# lseek		is from  src/runtime/c-libs/posix-io/lseek.c


    fun lseek (fd, offset, whence)
        =
       lseek'(fs::fd_to_int fd, offset, wh_to_word whence);


    my fsync' : Sy_Int -> Void
        =
        cfun "fsync";						# fsync		is from  src/runtime/c-libs/posix-io/fsync.c


    fun fsync fd
        =
        fsync' (fs::fd_to_int fd);



    # Making readers and writers...
    #   (code lifted from posix-binary-primitive-io.pkg and posix-text-primitive-io.pkg)

    fun announce s x y
        =
        {
# print "Posix: "; print (s: String); print "\n"; 

	    x y;
        };

    buffer_size_b = 4096;

    fun is_reg_file  fd
        =
        fs::stat::is_file (fs::fstat fd);

    fun pos_fns (closed, fd)
        =
	if   (is_reg_file fd)
            
	     pos = REF (file_position::from_int 0);

	     fun get_position ()
                 =
                 *pos;

	     fun set_position p
                 =
		 {   if *closed  raise exception io_exceptions::CLOSED_IO_STREAM; fi;
		     pos := announce "lseek" lseek (fd, p, SEEK_SET);
                 };

	     fun end_position ()
                 =
		 {   if *closed  raise exception io_exceptions::CLOSED_IO_STREAM;  fi;
		     fs::stat::size (announce "fstat" fs::fstat fd);
                 };

	     fun verify_position ()
                 =
		 {   cur_pos = lseek (fd, file_position::from_int 0, SEEK_CUR);

		     pos := cur_pos; cur_pos;
		 };

	     ignore (verify_position ());

	     { pos,
	       get_position    =>  THE get_position,
	       set_position    =>  THE set_position,
	       end_position    =>  THE end_position,
	       verify_position =>  THE verify_position
	     };

	else
             { pos        =>  REF (file_position::from_int 0),
	       get_position    =>  NULL,
               set_position    =>  NULL,
               end_position    =>  NULL,
               verify_position =>  NULL
             };
        fi;

    fun make_reader { mk_rd, cvt_vec, cvt_arr_slice } { fd, name, blocking_mode }
        =
	{   closed = REF FALSE;

            (pos_fns (closed, fd))
                ->
                { pos, get_position, set_position, end_position, verify_position };


            blocking = REF blocking_mode;

            fun blocking_on  () = { setfl (fd, flags::flags []);  blocking := TRUE;  };
	    fun blocking_off () = { setfl (fd, flags::nonblock);  blocking := FALSE; };

	    fun inc_pos k
                =
                pos := file_position::(+) (*pos, file_position::from_int k);

	    fun r_read_ro_vector n
                =
		{   v = announce "read" read_vector (fd, n);
		
		    inc_pos (unt8_vector::length v);
		    cvt_vec v;
		};

	    fun r_read_rw_vector arg
                =
		{   k = announce "readBuf" read_rw_vector (fd, cvt_arr_slice arg);
		
		    inc_pos k; k;
		};

	    fun block_wrap f x
                =
		{   if   *closed              raise exception io_exceptions::CLOSED_IO_STREAM;  fi;
		    if   (not *blocking   )   blocking_on ();                         fi;
		    f x;
                };

	    fun no_block_wrap f x
                =
		{   if   *closed        raise exception io_exceptions::CLOSED_IO_STREAM;   fi;
		    if   *blocking      blocking_off();                          fi;

		    THE (f x)
		    except
                        (e as assembly::SYSTEM_ERROR(_, THE cause))
                            =
			    if   (cause == posix_error::again   )   NULL;
			                                       else   raise exception e;   fi;

                };

	    fun r_close ()
                 =
		if   (not *closed)
                    
		     closed := TRUE;
                     announce "close" close fd;
                fi;

	    is_reg = is_reg_file fd;

	    fun avail ()
                =
		if *closed
                     THE 0;
		else if  is_reg
                          THE (file_position::to_int (fs::stat::size (fs::fstat fd) - *pos));
		     else NULL;fi;
                fi;
	
	    mk_rd { name,
		    chunk_size => buffer_size_b,
		    read_vector                => THE (   block_wrap r_read_ro_vector),
		    read_rw_vector             => THE (   block_wrap r_read_rw_vector),
		    read_vector_nonblocking    => THE (no_block_wrap r_read_ro_vector),
		    read_rw_vector_nonblocking => THE (no_block_wrap r_read_rw_vector),
		    block => NULL,
		    can_read => NULL,
		    avail,
		    get_position,
		    set_position,
		    end_position,
		    verify_position,
		    close => r_close,
		    io_descriptor => THE (fs::fd_to_iod fd)
                 };
	};

    fun make_writer { mk_wr, cvt_vec_slice, cvt_arr_slice }
		 { fd, name, blocking_mode, append_mode, chunk_size }
        =
	{   closed = REF FALSE;

            (pos_fns (closed, fd))
                ->
                { pos, get_position, set_position, end_position, verify_position };

	    fun inc_pos k
                =
                {   pos := file_position::(+) (*pos, file_position::from_int k);
                    k;
                };

	    blocking = REF blocking_mode;
	    append_fs = flags::flags (if append_mode  [flags::append]; else NIL; fi);

	    fun update_status ()
                =
		{   flgs = if *blocking
                                append_fs;
			   else flags::flags [flags::nonblock, append_fs];  fi;
		
		    announce "setfl" setfl (fd, flgs);
		};

	  fun ensure_open ()
              =
              if   *closed      raise exception io_exceptions::CLOSED_IO_STREAM;   fi;

	  fun ensure_block x
              =
	      if   (*blocking != x)
                  
                   blocking := x;
                   update_status();
              fi;

	  fun write_vector' (fd, s) =  write_vector    (fd, cvt_vec_slice s);
	  fun write_rw_vector' (fd, s) =  write_rw_vector (fd, cvt_arr_slice s);

	  fun put_v x =  inc_pos (announce "writeVec" write_vector' x);
	  fun put_a x =  inc_pos (announce "writeArr" write_rw_vector' x);

	  fun write (put, block) arg
              =
	      {   ensure_open();
	          ensure_block block; 
	          put (fd, arg);
              };

	  fun handle_block writer arg
              =
	      THE (writer arg)
	      except
                  (e as assembly::SYSTEM_ERROR(_, THE cause))
		      =
		      if  (cause == posix_error::again )
			  NULL;
		      else
			  raise exception e;
		      fi;

	  fun w_close ()
              =
	      if   (not *closed)
                  
	           closed:=TRUE;
                   announce "close" close fd;
              fi;
	
	    mk_wr { name,
		   chunk_size,
		   write_vector => THE (write (put_v, TRUE)),
		   write_rw_vector => THE (write (put_a, TRUE)),
		   write_vector_nonblocking => THE (handle_block (write (put_v, FALSE))),
		   write_rw_vector_nonblocking => THE (handle_block (write (put_a, FALSE))),
		   block => NULL,
		   can_output => NULL,
		   get_position,
		   set_position,
		   end_position,
		   verify_position,
		   io_descriptor => THE (fs::fd_to_iod fd),
		   close => w_close };
	};

    stipulate
	fun c2w_vs cvs
	    =
	    {   my (cv, s, l)
                    =
                    char_vector_slice::base cvs;

		wv = byte::string_to_bytes cv;

		unt8_vector_slice::make_slice (wv, s, THE l);
	    };

	# hack!!!  This only works because rw_char_vector::Rw_Vector and
	#          rw_unt8_vector::Rw_Vector are really the same internally.

	my c2w_a:  rw_char_vector::Rw_Vector -> rw_unt8_vector::Rw_Vector
            =
            inline_t::cast;

	fun c2w_as cas
	    =
	    {   my (ca, s, l)
                    =
                    rw_char_vector_slice::base cas;

		wa = c2w_a ca;

		rw_unt8_vector_slice::make_slice (wa, s, THE l);
	    };
    herein

								# binary_primitive_io	is from   src/lib/std/src/io/binary-primitive-io.pkg
    make_binary_reader
        =
        make_reader { mk_rd         => binary_primitive_io::READER,
		      cvt_vec       => fn v = v,
		      cvt_arr_slice => fn s = s
                    };

    make_text_reader
        =
        make_reader { mk_rd         => text_primitive_io::READER,
		      cvt_vec       => byte::bytes_to_string,
		      cvt_arr_slice =>	c2w_as };

    make_binary_writer
        =
        make_writer { mk_wr         => binary_primitive_io::WRITER,
		      cvt_vec_slice => fn s = s,
		      cvt_arr_slice => fn s = s };

    make_text_writer
        =
        make_writer { mk_wr => text_primitive_io::WRITER,
				  cvt_vec_slice =>	c2w_vs,
				  cvt_arr_slice => c2w_as };

    end; #  with

  }; #  package posix_io 
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
