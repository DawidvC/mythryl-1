## o7-exports.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6


# XXX BUGGO FIXME This is a good discussion, but so far
#                 as I can see, it has nothing to do with
#                 this file, which relates only to bare_o7 files.
#                 Needs to be moved or clarified, one or the other. 
#
#
#                  OVERVIEW
#
# Information kept at the boundary between
# frozen and thawed libraries.
#
# One of our major invariants is that a FROZEN
# library may never depend upon a THAWED library.
#
# Thus, libraries are frozen from the leafs
# of the dependency tree on up, with thawed
# libraries at any given time forming a contiguous
# subtree located at the root, fringed by frozen
# libraries.
#
# Consequently, inspection across the thawed/frozen
#  library boundary is always in the direction
# of a thawed library asking for information about
# a frozen library.
#
# In this module we implement the view of frozen
# libraries which we allow to thawed libraries:
# An instance of type o7_exports::Oh7_Exports contains
# everything which a thawed library is allowed
# to know about an Iced_O7 -- a .o7 objectfile
# within a .a7 freezefile.
#
# In detail, this consists of:
#
# version:
#    A globally unique 'version' string which
#    distinguishes the Iced_O7 not only from all
#    other Iced_O7s, but also from other versions
#    of itself:  Every time the source file for
#    the o7 changes and we recompile it, the new
#    compiled version gets a new (and different)
#    version string.
#    A version string looks like:
#        version-$ROOT/src/lib/compiler/(core.make6):semantic/basics/inlining-info.api-1187727181.821
#    where the numeric suffix is the last-modification
#    time accurate to a millisecond.  You'll find such
#    strings on disk in compiler-created files like
#        src/lib/compiler/front/semantic/basics/tmp7/inlining-info.api.version
#
# symbol_table_thunk:  src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.api
#                      src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
#    This evaluates to a symbol table giving all symbols
#    exported by the o7 together with type &tc.
#    Making it a memoized thunk allows us to avoid
#    actually constructing the symbol table unless
#    and until it is actually needed.
#
# inlining_table_thunk:    src/lib/compiler/toplevel/compiler-state/inlining-table.api
#                          src/lib/compiler/toplevel/compiler-state/inlining-table.pkg
#    This evaluates to a dictionary mapping symbols to
#    high level (machine independent) intermediate code
#    implementations for those functions suitable for
#    cross-module inlining.  By replacing calls to those
#    functions with the corresponding intermediate code
#    and then compiling to completion, external calling
#    code can avoid function call overhead on those
#    functions.
#
# symbol_table_picklehash:
# inlining_table_picklehash:
#    These two picklehashes serve as message digests
#    of the symbol table and inlining table for the
#    o7 in question.  If, after recompiling that
#    o7, these two values remain unchanged, then
#    we make safely take the o7 as unchanged for
#    all external purposes, and not bother recompiling
#    or relinking dependent code.



###                           "There are two ways of constructing
###                            a software design.
###
###                            One way is to make it so simple that
###                            there are obviously no deficiencies.
###
###                            And the other way is to make it so
###                            complicated that there are no obvious
###                            deficiencies.
###
###                                            -- C.A.R. Hoare



package o7_exports
=
package {
    Oh7_Exports
        =
        { symbol_table_thunk
              :
              Void
              ->
              symbol_table::Symbol_Table,

						# symbol_table		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
						# inlining_table	is from   src/lib/compiler/toplevel/compiler-state/inlining-table.pkg
						# picklehash		is from   src/lib/compiler/front/basics/mlcomp/picklehash.pkg

	  inlining_table_thunk
	      :
              Void
              ->
              inlining_table::Dictionary,


	  symbol_table_picklehash:     picklehash::Picklehash,
	  inlining_table_picklehash:   picklehash::Picklehash,


	  version:  String			# Something like "version-$ROOT/src/lib/compiler/(core.make6):semantic/basics/inlining-info.api-1187727181.821"
        };
};
