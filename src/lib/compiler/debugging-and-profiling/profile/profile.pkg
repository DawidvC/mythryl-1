## profile.pkg

# Compiled by:
#     src/lib/compiler/debugging-and-profiling/debugprof.make6



###            "There are no significant bugs in our
###             released software that any significant 
###             number of users want fixed."
###
###                            -- Bill Gates



package profile
: (weak)
api {

    reset:  Void -> Void;          			# Reset profiling counts to zero 

    report:  file::Output_Stream -> Void;		# Print profiling report to stream 
    report_all:  file::Output_Stream -> Void;		# Print profiling report to stream; Do NOT suppress zero entries.

    report_data:					#  Return the unformatted data for a report.
        Void -> List { name: String,
                       count: Int,
                       time: time::Time
                     };

    runtime_index:  Int;
    minor_gc_index:  Int;
    major_gc_index:  Int;
    other_index:  Int;
    compile_index:  Int;
    number_of_predefined_indices:  Int;

}
{
    package a  =  rw_vector;					# rw_vector		is from   src/lib/std/src/rw-vector.pkg
    package pc =  runtime_internals::profiling_control;		# runtime_internals	is from   src/lib/std/src/nj/runtime-internals.pkg

    runtime_index  = pc::runtime_index;
    minor_gc_index = pc::minor_gc_index;
    major_gc_index = pc::major_gc_index;
    other_index    = pc::other_index;
    compile_index  = pc::compile_index;

    number_of_predefined_indices
        =
        pc::number_of_predefined_indices;

    reset = pc::reset;
 
    Entry
        =
        ENTRY  { name: String,
                 count: Int,
                 time: Int
               };

    splitlines
        =
        string::tokens
            (fn '\n' => TRUE;
                 _   => FALSE;
             end);


    fun join (entries, base, _, counts, times, NIL)
            =>
            entries;

        join (entries, base, n, counts, times, line ! lines)
            =>
            join (
                ENTRY {
		      name => line,
		      count=> a::get (counts, n),
		      time => a::get (times, base+n)
		    }
		    ! entries,
                base,
                n+1,
                counts,
                times,
                lines
            );
    end;

    fun batch (pc::UNIT { base, size, counts, names } )
        =
	join (NIL, base, 0, counts, pc::get_time_array(), splitlines names);

    fun log10 0 => 0;
        log10 i => 1 + log10 (i / 10);
    end;

    fun field' (string, width)
        =
        string_conversion::pad_left ' ' width string;		# string_conversion	is from   src/lib/std/src/string-conversion.pkg



    # Take a string of digits and a number
    # of decimal places, and return the
    # digits with the decimal point added
    # in the right place.

    fun decimal (st, w)
        =
        {   len =  size st;
	  
	    if   (len <= w)
	         string::cat [".", string_conversion::pad_left '0' w st];
	    else string::cat [
		  substring (st, 0, len-w), ".", substring (st, len-w, w)
		];
            fi;
	};

    fun muldiv (i, j, k)
        =
	(i*j / k) 
	except
            OVERFLOW =  muldiv (i, j / 2, k / 2);


    #  This convolution is required because the PPC cannot distinguish 
    #  between div-by-zero and overflow -- Lal.

    fun muldiv (i, j, 0)
            =>
            raise exception exceptions::DIVIDE_BY_ZERO;

        muldiv (i, j, k)
            => 
            (i * j / k)
            except
                OVERFLOW =  muldiv (i, j / 2, k / 2);
    end;
 
    fun decfield (n, j, k, w1, w2)
        = 
	field' (
            decimal (int::to_string (muldiv (n, j, k)), w1)
	    except
		DIVIDE_BY_ZERO = "",
            w2
        );

    fun get_big_list ()
        =
	list_mergesort::sort  compare  biglist
        where
            biglist
                =
                list::cat (list::map  batch  *pc::units);

	    fun compare (
		  ENTRY { time=>a, count=>ca, name=>na, ... },
		  ENTRY { time=>b, count=>cb, name=>nb, ... }
		)
                =
                a < b
                or
                a == b   and   (ca < cb   or   ca == cb and na > nb);
	end;

    fun report_data ()
        =
        {   microseconds_per_sample
                =
                int::to_large (pc::get_quantum());

	    fun f (ENTRY { name, count, time } )
                =
                {  name,  count,  time => time::from_microseconds (int::to_large time * microseconds_per_sample)  };
	  
	    map f (get_big_list ());
	};

    fun reportx suppress output_stream
        =
        {   biglist' =  get_big_list ();

	    tot  = list::fold_right (fn (ENTRY { time  => a, ... }, b) =  a+b             ) 0 biglist';
	    maxc = list::fold_right (fn (ENTRY { count => a, ... }, b) =  int::max (a, b) ) 0 biglist';

	    digits_cum =  log10 tot;
	    digits_count =  int::max (6, 1+log10 maxc);

	    fun pr s
                =
                file::write (output_stream, s);

	    fun printlines (ENTRY { time, name, count } ! rest, cum)
                    =>
		    if (not (suppress and count==0 and time==0))

			 pr (decfield (time, 10000, tot, 2, 6));

			 if   (digits_cum > 4)
			      pr (field' (int::to_string (cum+time+50 / 100), 7));
			 else pr (decfield (cum+time, 1, 1, 2, 7));                       fi;

			 pr (field' (int::to_string count, digits_count));
       # 		  pr (decfield (time, 50000, count, 4, 10)); 
			 pr "  "; pr name; pr "\n";
			 printlines (rest, cum+time);
                    fi;

	        printlines (NIL, _)
                   =>
                   ();
            end;

	    pr (field'("%time", 6));
	    pr (field'("cumsec", 7));
	    pr (field'("#call", digits_count));
  # 	    pr (field'("ms/call", 10)); 
	    pr("  name\n");
	    printlines (biglist', 0);
	    file::flush output_stream;
        };

   report     =  reportx TRUE;
   report_all =  reportx FALSE;

};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
