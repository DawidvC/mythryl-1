# 
# This module implements the Floyd/Warshall algorithm for computing
# all pairs shortest paths.
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

###           "Even the most subtle spider
###            may leave a weak thread."
###
###                        -- Gandalf



generic package floyd_warshals_all_pairs_shortest_path (num:  Abelian_Group_With_Infinity) 	# Abelian_Group_With_Infinity	is from   src/lib/graph/group.api
   : (weak) All_Pairs_Shortest_Paths							# All_Pairs_Shortest_Paths	is from   src/lib/graph/shortest-paths.api
{
   package num = num;
   package g= graph;									# graph				is from   src/lib/graph/graph.pkg
   package a= matrix;									# matrix			is from   src/lib/std/src/matrix.pkg

   fun all_pairs_shortest_paths { graph => g::GRAPH ggg, weight }
       =
       {   nnn = ggg.capacity ();
	   ddd = a::array (nnn, nnn, num::inf);
	   ppp = a::array (nnn, nnn,-1);

	   fun init ()
               =
	       {   fun diag -1 => ();
		       diag i  => { a::set (ddd, i, i, num::zero);   diag (i - 1); };
		   end;

		   diag (nnn - 1);

		   ggg.forall_edges
		     (fn e as (i, j, _)
			 =
			 { w   = weight e;

			   if  (num::(<) (w, a::get (ddd, i, j)))
				a::set (ppp, i, j, i);
				a::set (ddd, i, j, w);
			   fi;
			 }
		     );
	       };

	   fun  l1 (k)
               =
               if (k < nnn)
                   l2 (k, 0);
                   l1 (k+1);
               fi

	   also
           fun l2 (k, i)
               =
               if  (i < nnn)
                    l3 (k, i, 0, a::get (ddd, i, k));
                    l2 (k, i+1);
               fi

	   also
           fun l3 (k, i, j, d_ik)
               =
               if  (j < nnn)

		    d_ij = a::get (ddd, i, j);
		    d_kj = a::get (ddd, k, j);

		    x = num::(+) (d_ik, d_kj);

		    if (num::(<) (x, d_ij))
			 a::set (ppp, i, j, a::get (ppp, k, j));
			 a::set (ddd, i, j, x);
		    fi;

		    l3 (k, i, j+1, d_ik);
	       fi;

           init();

	   l1 0;

	   { dist=>ddd, prior=>ppp };
       };
};
