# simple-graph.pkg
# This view combinator converts a multigraph into a simple graph.
# -- Allen Leung


###            "It is not easy to describe
###             the sea with the mouth."
###
###                        -- Kokyu


api SIMPLE_GRAPH
=
api
    my simple_graph :
       (graph::node_id * graph::node_id *  List( E ) -> E)
       ->
       graph::graph( N, E, G )
       ->
       graph::graph( N, E, G ) 
end

package simple_graph
{
    package g = graph
    package s = list_mergesort

    fun simple_graph merge (g::GRAPH G)
	=
	let sort = s::sort (fn ((i, j, _), (i', j', _)) => 
			   i > i' or i = i' and j > j')
	    fun uniq ([], _, _,[], es'') = es''
	      | uniq([], i, j,[e], es'') = (i, j, e) . es''
	      | uniq([], i, j, es, es'') = (i, j, merge (i, j, es)) . es''
	      | uniq((i, j, e) . es, _, _,[], es'') = uniq (es, i, j,[e], es'')
	      | uniq((i, j, e) . es, i', j', es', es'') =
		  if i == i and j == j' then
		      uniq (es, i', j', e . es', es'')
		  else (case es' of
			  [e'] => uniq (es, i, j,[e], (i', j', e') . es'')
			 | _  => uniq (es, i, j,[e], (i', j', merge (i', j', es')) . es'')
		       ) 
	    fun unique es = uniq (sort es,-1,-1,[],[])
	    fun out_edges v = unique (G.out_edges v)
	    fun in_edges v  = unique (G.in_edges v)
	    fun next v      = map #2 (out_edges v)
	    fun prior v      = map #1 (in_edges v)
	    fun edges ()     = unique (G.edges ())

	in  g::GRAPH
	    { name            = G.name,
	      graph_info      = G.graph_info,
	      new_id          = G.new_id,
	      add_node        = G.add_node,
	      add_edge        = G.add_edge,
	      remove_node     = G.remove_node,
	      set_in_edges    = G.set_in_edges,
	      set_out_edges   = G.set_out_edges,
	      set_entries     = G.set_entries,
	      set_exits       = G.set_exits,
	      garbage_collect = G.garbage_collect,
	      nodes           = G.nodes,
	      edges           = edges,
	      order           = G.order,
	      size            = G.size,
	      capacity        = G.capacity,
	      out_edges       = out_edges,
	      in_edges        = in_edges,
	      next            = next,
	      prior            = prior,
	      has_edge        = G.has_edge,
	      has_node        = G.has_node,
	      node_info       = G.node_info,
	      entries         = G.entries,
	      exits           = G.exits,
	      entry_edges     = G.entry_edges,
	      exit_edges      = G.exit_edges,
	      forall_nodes    = G.forall_nodes,
	      forall_edges    = fn f => apply f (edges ())
	    }
	end
}

