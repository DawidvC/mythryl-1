## iccc-property.pkg
#
# Support for the standard X ICCCM properties and types
# as defined in version 1.0 of the ICCCM.  These routines
# can be used to build various property values, including
# the standard ones.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6



stipulate
    package g   =  geometry;				# geometry		is from   src/lib/x-kit/xclient/src/window/geometry.pkg
    package a   =  standard_x11_atoms;			# standard_x11_atoms	is from   src/lib/x-kit/xclient/src/iccc/standard-x11-atoms.pkg
    package xt  =  xtypes;				# xtypes		is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package dt  =  draw_types;				# draw_types		is from   src/lib/x-kit/xclient/src/window/draw-types.pkg
    package w8v =  unt8_vector;				# unt8_vector		is from   src/lib/std/src/unt8-vector.pkg
    package wh  =  window_manager_hint;			# window_manager_hint	is from   src/lib/x-kit/xclient/src/iccc/window-manager-hint.pkg
    package v2w =  value_to_wire;			# value_to_wire		is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
herein

    package iccc_property: (weak) Iccc_Property {	# Iccc_Property		is from   src/lib/x-kit/xclient/src/iccc/iccc-property.api

	my (|) = unt::bitwise_or;

	infix val | ;

	fun word_to_vec x
	    =
	    {   w = unt::to_large_unt x;

		fun get8 n
		    =
		    unt8::from_large_unt (large_unt::(>>) (w, n));

		w8v::from_list [get8 0u24, get8 0u16, get8 0u8, get8 0u0];
	    };

	# Convert an rw_vector of unts
	# to an unt8_vector::vector:
	#
	fun arr_to_vec arr
	    =
	    f (rw_vector::length arr, [])
	    where
		fun f (0, l)
			=>
			w8v::from_list l;

		    f (i, l)
			=>
			{   i = i - 1;
			    w = unt::to_large_unt (rw_vector::get (arr, i));
			    fun get8 n = unt8::from_large_unt (large_unt::(>>) (w, n));
			    b0 = get8 0u0;
			    b1 = get8 0u8;
			    b2 = get8 0u16;
			    b3 = get8 0u24;

			    f (i, b3 ! b2 ! b1 ! b0 ! l);
			};
		end;
	    end;

	# Map a list of hints to an unt rw_vector,
	# with position 0 containing the field mask
	# and the other positions containing the
	# field values:
	#
	fun make_hint_data (size, put_hint) lst
	    =
	    {   data = rw_vector::make_rw_vector (size, 0u0);

		put1 = put_hint  (fn (i, x) =  rw_vector::set (data, i, x));

		fun put (   [], m) =>  m;
		    put (x ! r, m) =>  put (r, put1 (x, m));
		end;

		mask = put (lst, 0u0);

		rw_vector::set (data, 0, mask);
		arr_to_vec data;
	    };

	# Build a property value
	# of type STRING: 
	#
	fun make_string_property data
	    =
	    xt::PROPERTY_VALUE
	      {
		type  =>  a::atom_string,
		#
		value =>  xt::RAW_DATA { format => xt::RAW8,
					 data   => byte::string_to_bytes data
				       }
	      };

	# Build a property value
	# of type ATOM: 
	#
	fun make_atom_property (xt::XATOM v)
	    =
	    xt::PROPERTY_VALUE
	      {
		type  =>  a::atom_atom,
		value =>  xt::RAW_DATA { format => xt::RAW32,
					 data   => word_to_vec v
				       }
	      };

	stipulate

	  size_hints_data
	      =
	      make_hint_data (18, put_hint)
	      where
		  fun put_hint upd
		      =
		      put1
		      where
			  fun put_size (i, g::SIZE { wide, high } )
			      =
			      {   upd (i,   unt::from_int  wide);
				  upd (i+1, unt::from_int  high);
			      };

			  fun put1 (wh::HINT_USPOSITION,       m) => (m | 0u1);
			      put1 (wh::HINT_PPOSITION,        m) => (m | 0u2);

			      put1 (wh::HINT_USSIZE,           m) => (m | 0u4);
			      put1 (wh::HINT_PSIZE,            m) => (m | 0u8);

			      put1 (wh::HINT_PMIN_SIZE size,   m) => { put_size (5, size); m | 0u16;};
			      put1 (wh::HINT_PMAX_SIZE size,   m) => { put_size (7, size); m | 0u32;};
			      put1 (wh::HINT_PRESIZE_INC size, m) => { put_size (9, size); m | 0u64;};

			      put1 (wh::HINT_PASPECT { min=>(x1, y1), max=>(x2, y2) }, m)
				  =>
				  {   upd (11, unt::from_int x1); upd (12, unt::from_int y1);
				      upd (13, unt::from_int x2); upd (14, unt::from_int y2);
				      m | 0u128;
				  };

			      put1 (wh::HINT_PBASE_SIZE size, m)
				  =>
				  {   put_size (15, size);
				      m | 0u256;
				  };

			      put1 (wh::HINT_PWIN_GRAVITY g, m)
				  =>
				  {   upd (17, v2w::gravity_to_wire g);
				      m | 0u512;
				  };
			  end;
		      end;

	      end;
	herein

	    fun make_window_manager_size_hints lst
		=
		xt::PROPERTY_VALUE
		  {
		    type  =>  a::atom_wm_size_hints,
		    value =>  xt::RAW_DATA { format => xt::RAW32, data => size_hints_data lst }
		  };
	end;		# stipulate

	stipulate

	    nonsize_hints_data
		=
		make_hint_data (9, put_hint)
		where
		    fun put_hint upd (hint, m)
			=
			case hint
			    #
			    wh::HINT_INPUT TRUE      => {  upd (1, 0u1);  m | 0u1;  };
			    wh::HINT_WITHDRAWN_STATE => {  upd (2, 0u0);  m | 0u2;  };
			    wh::HINT_NORMAL_STATE    => {  upd (2, 0u1);  m | 0u2;  };
			    wh::HINT_ICONIC_STATE    => {  upd (2, 0u3);  m | 0u2;  };

			    wh::HINT_ICON_RO_PIXMAP (dt::RO_PIXMAP (dt::RW_PIXMAP { id=>xt::XID pix, ... } ))
				=>
				{   upd (3, pix);
				    m | 0u4;
				};

			    wh::HINT_ICON_PIXMAP (dt::RW_PIXMAP { id=>xt::XID pix, ... } )
				=>
				{   upd (3, pix);
				    m | 0u4;
				};

			    wh::HINT_ICON_WINDOW (dt::WINDOW { window_id=>xt::XID window, ... } )
				=>
				{   upd (4, window);
				    m | 0u8;
				};

			    wh::HINT_ICON_POSITION (g::POINT { col, row } )
				=>
				{   upd (5, unt::from_int col);
				    upd (6, unt::from_int row);
				    m | 0u16;
				};

			    wh::HINT_ICON_MASK (dt::RW_PIXMAP { id=>xt::XID pix, ... } )
				=>
				{   upd (7, pix);
				    m | 0u32;
				};

			    wh::HINT_WINDOW_GROUP (dt::WINDOW { window_id=>xt::XID window, ... } )
				=>
				{   upd (8, window);
				    m | 0u64;
				};

			    _ => raise exception (xgripe::XERROR "Bad WM Hint");
			esac;
		end;
	herein

	    fun make_window_manager_nonsize_hints lst
		=
		xt::PROPERTY_VALUE {
		    type   => a::atom_wm_hints,
		    value => xt::RAW_DATA { format => xt::RAW32, data => nonsize_hints_data lst }
		  };
	end;

	# Build a command-line argument property:
	#
	fun make_command_hints args
	    =
	    make_string_property
		(string::cat
		    (map
			(fn s = s + "\000")
			args
		    )
		);

	fun make_transient_hint (dt::WINDOW { window_id=>xt::XID window, ... } )
	    =
	    xt::PROPERTY_VALUE
	      {
		type  =>  a::atom_window,
		value =>  xt::RAW_DATA { format => xt::RAW32,
					 data   => word_to_vec  window
				       }
	      };

    };					# package iccc_property 

end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
