


###               "All you need in this life is ignorance and confidence,
###                and then Success is sure."
###
###                                       -- Mark Twain,
###                                          Notebook, 1887



local

   debug = FALSE

in

package gtk_runtime:  Gtk_Runtime {

   package h = int_hash_table
   package x = gtk_runtime_common

   use C Gtk

   package gtk_init {

      fun f args = (F_smlgtk_runtime_init::f'(); x::init args)
   }

   package gtk_signal_connect {

      fun f (obj, name, f) = x::addSignalCallback (obj, name, f, 
              u::fcast (Light::fptr (F_smlgtk_signal_callback::fptr())))
   }

   package gtk_event_connect {

      fun f (obj, name, f) = x::addEventCallback (obj, name, f, 
           u::fcast (Light::fptr (F_smlgtk_event_callback::fptr())))
   }

   /* 
    *  Main event loop on ML side
    */
   fun processEvents()
       = 
       {   event       = G_smlgtk_event::obj'();
	   object    = S_smlgtk_event::f_object' event;
	   event     = S_smlgtk_event::f_event' event;
	   id        = S_smlgtk_event::f_callbackid' event;
	   castEvent = Ptr::cast' : c::voidptr -> GdkEvent::t;

	   while F_smlgtk_begin_event_wait::f'() != 0 do

	       {   if debug then print("In ML\n") 

		   object = gtk::cast (get::voidptr' object);
		   id     = mlrep::signed::toInt (get::sint' id);
		   event  = castEvent (get::voidptr' event);
		   F_smlgtk_end_event_wait::f'();

	           case x::lookupCallback id
		     of THE (name, x::SIGNAL_CALLBACK f)
			    => 
			    {   if debug then print("Signal "$name$"\n") 
				f object;
				F_smlgtk_event_reply::f'(0);
			    }

		     | THE (name, x::EVENT_CALLBACK f)
			   => 
			   {   if debug then print("Event "$name$"\n") 

			       result =   f (object, event);

			       if debug   then print("Event "$name$ " returns " $
					       bool::to_string result$"\n")
				          

			       F_smlgtk_event_reply::f'(if result then 1 else 0) ;
			   }

		     | NULL => raise exception FAIL ("Unknown callback id "$int::to_string id)
		     ;

		   if debug   then print("Exiting ML\n")
                              
	       };
       }
        
   package gtk_main {

       fun f ()
	   =
	   {   F_smlgtk_spawn_event_loop_thread::f'();
	       processEvents();
	       F_smlgtk_kill_event_loop_thread::f'();
	   }
   }

   package gtk_main_quit {

      fun f _ = gtk_main_quit::f()
   };
};

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
