"LOWCODE" is short for "low level intermediate
code representations and transformations", where
by "low-level" we mainly mean "machine-dependent".

In practice, a fair amount of the optimization
work we do here does in fact apply to all
supported architectures.

For more context, see

    src/lib/compiler/README

Our "lowcode" module is a derivative of MLRISC:

     MLRISC A Framework for retargetable and optimizing compiler back ends
     Lal George, Allen Leung
     2003 144p
     http://cs.nyu.edu/leunga/www/MLRISC/Doc/latex/mlrisc.ps

The register allocator is documented in

     Iterated Register Coalescing
     Lal George (Bell Labs), Andrew W Appel (Princeton)
     1996, 25p
     http://www.cs.purdue.edu/homes/hosking/502/george.pdf

     A New MLRISC Register Allocator (v 110.25)
     Allen Leung, Lal George
     circa 2000, 33p
     http://cm.bell-labs.com/cm/cs/what/smlnj/compiler-notes/new-ra.ps

A number of similar MLRISC implementation notes are up at
     http://www.smlnj.org//compiler-notes/

 including

     SMLNJ: Intel x86 back end: Compile Controlled Memory
     Lal George
     1999, 7p
     http://www.smlnj.org//compiler-notes/k32.ps

     MLRISC Annotations
     Allen Leung, Lal George
     circa 1999, 14p
     http://www.smlnj.org//compiler-notes/annotations.ps

