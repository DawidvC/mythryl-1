## pflatten.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



###              "Mathematicians stand on each other's shoulders while
###               computer scientists stand on each other's toes."
###
###                                        -- R. W. Hamming



package pflatten: (weak)  Pflatten {		# Pflatten	is from   src/lib/compiler/upper/polylambda/pflatten.api

    stipulate

        package lt = polylambda_type;
	package lv= highcode_var;		# highcode_var		is from   src/lib/compiler/upper/highcode/highcode-var.pkg
	package f= anormal;			# anormal		is from   src/lib/compiler/upper/anormal/anormal.pkg
	package fu= anormal_stuff;		# anormal_stuff		is from   src/lib/compiler/upper/anormal/anormal-stuff.pkg

    herein

	Llty = polylambda::Highcode_Type;
	Ltyc = polylambda::Highcode_Type_Constructor;

	Flty = anormal::Highcode_Type;
	Ftyc = anormal::Highcode_Type_Constructor;

	Anormal_Expression =  anormal::Anormal_Expression;
	Value              =  anormal::Value;
	Highcode_Variable  =  anormal::Highcode_Variable;

	fun bug s = error_message::impossible ("Pflatten:" + s);

	make_var = highcode_var::make_highcode_variable;

	say = controls::print::say;

	/*****************************************************************************
	 *                 FUNCTIONS USED BY POLYLAMBDA TO HIGHCODE NORMALIZATION          *
	 *****************************************************************************/
	# Recursively turn cooked types
        # into raw when possible:
        #
	fun ltc_raw x = x;
	fun tcc_raw x = x;

	fun v_punflatten_fn ltys
            = 
	    fn (lv, lambda_expression)
		=
		{  lvs = map (fn _ = make_var()) ltys; 

		   ( lvs,
                     f::RECORD (fu::rk_tuple, map f::VAR lvs, lv, lambda_expression)
                   ); 
		};

	fun v_pflatten_fn ltys
            =
	    (fn v
		=
		{   lvs = map (fn _ = make_var())
                              ltys; 

		    ( map  (fn v = f::VAR v)  lvs, 

		      fn lambda_expression
                          =
			  #1 (fold_left
                                 (fn (lv, (lambda_expression, field'))
                                     =
				     (f::SELECT (v, field', lv, lambda_expression), field'+1)
                                 ) 
			         (lambda_expression, 0)
                                 lvs
                             )
                    ); 
		}
            ); 

	v_punflatten_def = fn (lv, lambda_expression) = ([lv], lambda_expression); 
	v_pflatten_def   = fn v = ([v], fn lambda_expression = lambda_expression);


	# punflatten: (Highcode_Variable, Anormal_Expression) -> List( Highcode_Variable, Anormal_Expression)
	#   turn `lambda_expression' from an expression expecting a single value bound to `Highcode_Variable'
	#   to an expression expecting multiple values to be bound to `Highcode_Variable list'.
	#   It seems generally more convenient to choose the `Highcode_Variable list' inside
	#   bundlefn than outside.
	# pflatten: Value -> (List( Value ) * (Anormal_Expression -> Anormal_Expression))
	#   expand `Value' into its flattened `List(Value)' around `Anormal_Expression'.
	#   The `List(Value)' might be required in order to construct the
	#   `Anormal_Expression' argument, which is why `Value' and `Anormal_Expression'
	#   are passed in two steps.
	#
	fun t_pflatten (lambda_type:  Llty)
            =
            lt::lt_autoflat lambda_type;

	fun v_punflatten (lambda_type:  Llty)
            = 
	    {   my x as (_, ltys, flag)
                    =
                    lt::lt_autoflat  lambda_type;

	        ( x,

                  flag  ??  v_punflatten_fn  ltys
                        ::  v_punflatten_def
                );
	    };

	fun v_pflatten   (lambda_type:  Llty)
            = 
	    {   my x as (_, ltys, flag)
                    =
                    lt::lt_autoflat lambda_type;

	        ( x,

                  flag   ??  v_pflatten_fn ltys
                         ::  v_pflatten_def
                );
	    };


	###############################################################################
	#                 FUNCTIONS USED BY HIGHCODE TYPE SPECIALIZATION
	###############################################################################

	fun v_unflatten_fn ltys
	    = 
	    fn ([lv], lambda_expression)
		    => 
		    {   lvs = map (fn _ = make_var())
                                  ltys; 

		        ( lvs,

                          f::RECORD
                            ( fu::rk_tuple,
			      map f::VAR lvs,
                              lv,
                              lambda_expression
                            )
                        ); 
		   };

	       _ => bug "unexpected case in v_unflattenGen";

	    end;

	fun v_flatten_fn ltys
	    =
	    fn [v]
                => 
		{   lvs =  map  (fn _ =  make_var())
                                ltys; 

		    ( map (fn x = f::VAR x) lvs, 

		      fn lambda_expression
			  =
			  #1 (fold_left (fn  (lv, (lambda_expression, field'))
					     =
					     (f::SELECT (v, field', lv, lambda_expression), field'+1)
					) 
					(lambda_expression, 0)
					lvs
			     )
		    ); 
		  }; 

	        _ => bug "unexpected case in v_flatten_fn";
	    end;

	v_unflatten_def
            =
            fn (vs, lambda_expression)
                =
               (vs, lambda_expression);

	v_flatten_def
            =
            fn vs
                =
                ( vs,
                  fn lambda_expression =  lambda_expression
                );

	fun t_flatten ([flty], FALSE) =>  lt::lt_autoflat flty;
	    t_flatten ( fltys, TRUE ) =>  (TRUE, fltys, FALSE);
	    t_flatten _               =>  bug "unexpected case in ltc_flat";
        end;

	fun v_unflatten ([flty], FALSE)
                => 
	        {   my x as (_, fltys, flag)
                        =
                        lt::lt_autoflat flty;

	            ( x,

                      flag   ??   v_unflatten_fn fltys
                             ::   v_unflatten_def
                    );
	        };

	    v_unflatten (fltys, FALSE) => ((TRUE, fltys, FALSE), v_unflatten_def);	# Are these two -intended- to be identical?
	    v_unflatten (fltys, TRUE ) => ((TRUE, fltys, FALSE), v_unflatten_def);	# If so, why not just use v_unflatten (fltys, _) => ...  }
        end;

	fun v_flatten ([flty], FALSE)
                => 
	        {   my x as (_, fltys, flag)
                        =
                        lt::lt_autoflat flty;

	            ( x,

                      flag   ??  v_flatten_fn fltys
                             ::  v_flatten_def
                    );
	        };

	   v_flatten (fltys, FALSE) => ((TRUE, fltys, FALSE), v_flatten_def);		# Same question as above. :-)
	   v_flatten (fltys, TRUE ) => ((TRUE, fltys, FALSE), v_flatten_def);
        end;


	###########################################################################
	#                 FUNCTIONS USED BY HIGHCODE REPRESENTATION ANALYSIS
	############################################################################

	# NOTE: The implementation of v_coerce
        #       should be consistent with that
	#       of v_flattenGen and v_unflattenGen
        #
	fun v_coerce (wflag, nftcs, oftcs)
            =
	    {   nlen = length nftcs;
	        olen = length oftcs;

		if (nlen == olen) 

		     (oftcs, NULL);

		elif (nlen == 1 and (olen > 1 or olen == 0))

		      ( [lt::tcc_tuple oftcs],

			if wflag 

			    v = make_var();

			    THE ( fn vs =  ( [f::VAR v], 

				             fn le =  f::RECORD (fu::rk_tuple, vs, v, le)
                                           )
                                );

			else

                            THE (v_flatten_fn (map lt::ltc_tyc oftcs));
                        fi
                      );
		else
                     bug "unexpected case in v_coerce";
                fi;

	    };	#  function v_coerce 
    end;	#  stipulate
};		#  package pflatten 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 1997 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
