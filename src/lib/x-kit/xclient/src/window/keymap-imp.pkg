## keymap-imp.pkg
## Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts,
## and the Massachusetts Institute of Technology, Cambridge, Massachusetts.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6




# This mystery code was derived from the MIT Xlib implementation.
# The following description of the keycode to keysym translation
# is lifted from the X11 protocol definition:
#
# A KEYCODE represents a physical (or logical) key.  Keycodes lie in the
# inclusive range [8, 255].  A keycode value carries no intrinsic information,
# although server implementors may attempt to encode geometry information
# (for example, matrix) to be interpreted in a server-dependent fashion.  The
# mapping between keys and keycodes cannot be changed using the protocol.
# 
# A KEYSYM is an encoding of a symbol on the cap of a key.  The set of defined
# KEYSYMs include the character sets Latin 1, Latin 2, Latin 3, Latin 4, Kana,
# Arabic, Cryllic, Greek, Tech, Special, Publish, APL, and Hebrew as well as a
# set of symbols common on keyboards (Return, Help, Tab, and so on).  KEYSYMs
# with the most-significant bit (of the 29 bits) set are reserved as
# vendor-specific.
# 
# A list of KEYSYMs is associated with each KEYCODE.  The list is intended to
# convey the set of symbols on the corresponding key.  If the list (ignoring
# trailing NoSymbol entries) is a single KEYSYM ``[K], '' then the list is
# treated as if it were the list ``[K, NoSymbol, K, NoSymbol].''  If the list
# (ignoring trailing NoSymbol entries) is a pair of KEYSYMs ``[K1, K2]'',
# then the list is treated as if it were the list ``[K1, K2, K1, K2]''.  If
# the list (ignoring trailing NoSymbol entries) is a triple of KEYSYMs
# ``[K1, K2, K3]'', then the list is treated as if it were the list
# ``[K1, K2, K3, NoSymbol]''.  When an explicit ``void'' element is desired
# in the list, the value VoidSymbol can be used.
# 
# The first four elements of the list are split into two groups of KEYSYMs.
# Group 1 contains the first and second KEYSYMs, Group 2 contains third and
# fourth KEYSYMs.  Within each group, if the second element of the group is
# NoSymbol, then the group should be treated as if the second element were the
# same as the first element, except when the first element is an alphabetic
# KEYSYM ``K'' for which both lowercase and uppercase forms are defined. In
# that case, the group should be treated as if the first element were the
# lowercase form of ``K'' and the second element were the uppercase form
# of ``K''.
# 
# The standard rules for obtaining a KEYSYM from a KeyPress event make use of
# only the Group 1 and Group 2 KEYSYMs; no interpretation of other KEYSYMs in
# the list is given here.  Which group to use is determined by modifier state.
# Switching between groups is controlled by the KEYSYM named MODE SWITCH, by
# attaching that KEYSYM to some KEYCODE and attaching that KEYCODE to any one
# of the modifiers Mod1 through Mod5.  This modifier is called the ``group
# modifier''.  For any KEYCODE, Group 1 is used when the group modifier is
# off, and Group 2 is used when the group modifier is on.
# 
# Within a group, which KEYSYM to use is also determined by modifier state.  The
# first KEYSYM is used when the Shift and Lock modifiers are off.  The second
# KEYSYM is used when the Shift modifier is on, or when the Lock modifier is on
# and the second KEYSYM is uppercase alphabetic, or when the Lock modifier is on
# and is interpreted as ShiftLock.  Otherwise, when the Lock modifier is on and
# is interpreted as CapsLock, the state of the Shift modifier is applied first
# to select a KEYSYM, but if that KEYSYM is lowercase alphabetic, then the
# corresponding uppercase KEYSYM is used instead.
# 
# The KEYMASK modifier named Lock is intended to be mapped to either a CapsLock
# or a ShiftLock key, but which one is left as application-specific and/or
# user-specific.  However, it is suggested that the determination be made
# according to the associated KEYSYM (s) of the corresponding KEYCODE.
#
# NOTE: XReply::decodeGetKeyboardMappingReply removes trailing NoSymbol entries.



###             "For in much wisdom is much grief: and he
###              that increaseth knowledge increaseth sorrow."
###
###                              -- Ecclesiastes 1:18 


stipulate
    include threadkit;				# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package dy  = display;			# display		is from   src/lib/x-kit/xclient/src/wire/display.pkg
    package et  = event_types;			# event_types		is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
    package kb  = keys_and_buttons;		# keys_and_buttons	is from   src/lib/x-kit/xclient/src/wire/keys-and-buttons.pkg
    package ks  = keysym;			# keysym		is from   src/lib/x-kit/xclient/src/window/keysym.pkg
    package v2w = value_to_wire;		# value_to_wire		is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
    package w2v = wire_to_value;		# wire_to_value		is from   src/lib/x-kit/xclient/src/wire/wire-to-value.pkg
    package xok = xsocket;			# xsocket		is from   src/lib/x-kit/xclient/src/wire/xsocket.pkg
    package xt  = xtypes;			# xtypes		is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
herein

    package keymap_imp: (weak)  Keymap_Imp {	# Keymap_Imp		is from   src/lib/x-kit/xclient/src/window/keymap-imp.api


	my (&) = unt::bitwise_and;
    #   my (|) = unt::bitwise_or;

    #   infix val & | ;

	fun query (encode, decode) xsocket
	    =
	    {   request_reply
		    =
		    xok::request_reply  xsocket;

		fn request
		    =
		    decode (do_mailop (request_reply (encode request)));
	    };

	get_keyboard_mapping
	    =
	    query
	      ( v2w::encode_get_keyboard_mapping,
		w2v::decode_get_keyboard_mapping_reply
	      );

	get_modifier_mapping
	    =
	    query
	      ( .{ v2w::request_get_modifier_mapping; },
		w2v::decode_get_modifier_mapping_reply
	      );

	# Keycode to keysym map 
	#
	abstype
	Keycode_Map
	    =
	    KEYCODE_MAP  (Int, Rw_Vector( List( xt::Keysym ) ))
	with
	    fun new_kcmap (dy::XDISPLAY info)
		=
		{   info.min_keycode -> min_keycode as (xt::KEYCODE min_kc);
		    info.max_keycode ->                (xt::KEYCODE max_kc);

		    kbd_map
			=
			get_keyboard_mapping
			    info.xsocket
			    { first => min_keycode,
			      count => (max_kc - min_kc) + 1
			    };

		    KEYCODE_MAP (min_kc, rw_vector::from_list kbd_map);
		};

	    # NOTE: some X servers generate
	    # bogus keycodes on occasion:
	    #
	    fun lookup_kc
		    (KEYCODE_MAP (min_kc, a))
		    (xt::KEYCODE kc)
		=
		rw_vector::get (a, kc - min_kc)
		except
		    (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) = [];
	end;


	Lock_Meaning					# The meaning of the Lock modifier key.
	    =
	    NO_LOCK | LOCK_SHIFT | LOCK_CAPS;


	Shift_Mode						# The shifting mode of a key-button state.
	    =
	    UNSHIFTED | SHIFTED | CAPS_LOCKED  Bool;


	Mapping
	    =
	    MAPPING
	      {
		lookup:	            xt::Keycode -> List(xt::Keysym),
		#
		is_mode_switched:   xt::Modifier_Key_State -> Bool,
		shift_mode:	    xt::Modifier_Key_State -> Shift_Mode
	      };

	# Return the upper-case and lower-case
	# keysyms for the given keysym:
	#
	fun convert_case (xt::KEYSYM symbol)
	    =
	    {   case (unt::from_int symbol & 0uxFF00)
		    #
		    0u0 =>  #  Latin1 

			if   ((0x41 <= symbol) and (symbol <= 0x5A))	#  A..Z 

			    (xt::KEYSYM (symbol + (0x61 - 0x41)), xt::KEYSYM symbol);

			elif ((0x61 <= symbol) and (symbol <= 0x7a))	#  a..z 

			    (xt::KEYSYM symbol, xt::KEYSYM (symbol - (0x61 - 0x41)));

			elif ((0xC0 <= symbol) and (symbol <= 0xD6))	#  Agrave..Odiaeresis

			    (xt::KEYSYM (symbol + (0xE0 - 0xC0)), xt::KEYSYM symbol);

			elif ((0xE0 <= symbol) and (symbol <= 0xF6))	#  Agrave..odiaeresis

			    (xt::KEYSYM symbol, xt::KEYSYM (symbol - (0xE0 - 0xC0)));

			elif ((0xD8 <= symbol) and (symbol <= 0xDE))	#  Ooblique..Thorn

			    (xt::KEYSYM (symbol + (0xD8 - 0xF8)), xt::KEYSYM symbol);

			elif ((0xF8 <= symbol) and (symbol <= 0xFE))	#  oslash..thorn

			    (xt::KEYSYM symbol, xt::KEYSYM (symbol - (0xD8 - 0xF8)));

			else

			     (xt::KEYSYM symbol, xt::KEYSYM symbol);
			fi;

		   _ => (xt::KEYSYM symbol, xt::KEYSYM symbol);
		esac;
	    };

	lower_case =  #1 o convert_case;
	upper_case =  #2 o convert_case;

	# Return the shift-mode defined by a list of modifiers
	# with respect to the given lock meaning:
	#
	fun shift_mode lock_meaning state
	    =
	    case ( kb::shift_key_is_set state,
		   kb::shiftlock_key_is_set state,
		   lock_meaning
		 )
		 #	
		(FALSE, FALSE, _)         =>  UNSHIFTED;
		(FALSE, TRUE, NO_LOCK)    =>  UNSHIFTED;
		(FALSE, TRUE, LOCK_SHIFT) =>  SHIFTED;
		(TRUE, TRUE, NO_LOCK)     =>  SHIFTED;
		(TRUE, FALSE, _)          =>  SHIFTED;
		(shift, _, _)             =>  CAPS_LOCKED shift;
	    esac;

	# Translate a keycode plus modifier-state to a keysym:
	#	
	fun keycode_to_keysym (MAPPING { lookup, is_mode_switched, shift_mode } ) (kc, state)
	    =
	    {   # If there are more than
		# two keysyms for the keycode
		# and the shift mode is switched,
		# then discard the first two keysyms:
		#
		syms = case (lookup kc, is_mode_switched state)

			   (_ ! _ ! (r as _ ! _), TRUE) =>  r;
			   (l, _)                       =>  l;
		       esac;

		symbol
		    =
		    case (syms, shift_mode state)

		       ([], _)               => xt::NO_SYMBOL;
		       ([ks],     UNSHIFTED) => lower_case ks;
		       (ks ! _,   UNSHIFTED) => ks;
		       ([ks],       SHIFTED) => upper_case ks;
		       (_ ! ks ! _, SHIFTED) => ks;
		       ([ks], CAPS_LOCKED _) => upper_case ks;

		       (lks ! uks ! _, CAPS_LOCKED shift)
			   =>
			   {   my (lsym, usym)
				   =
				   convert_case uks;

			       if (shift or (uks == usym  and  lsym != usym))

				   usym;
			       else
				   upper_case lks;
			       fi;
			  };
		    esac;

		if (symbol == ks::void_symbol)

		     xt::NO_SYMBOL;
		else
		     symbol;
		fi;
	    };			 # fun keycode_to_keysym 

	# Get the display's modifier mapping, and analyze it to set
	# the lock semantics and which modes translate into switched mode.
	#
	fun create_map (display as dy::XDISPLAY { xsocket, ... } )
	    =
	    {
		mod_map = get_modifier_mapping  xsocket  ();
		lookup  = lookup_kc (new_kcmap display);

		# Get the lock meaning, which will be
		# LockCaps  if any lock key contains the  CAPS_LOCK keysym (KEYSYM 0xFFE5),
		# LockShift if any lock key contains the SHIFT_LOCK keysym (KEYSYM 0xFFE6),
		# NoLock otherwise.
		#
		lock_meaning
		    =
		    find (mod_map.lock_keycodes, [], NO_LOCK)
		    where
			fun find ([],     [], meaning)              =>  meaning;
			    find (kc ! r, [], meaning)              =>  find (r, lookup kc, meaning);
			    find (kcl, (xt::KEYSYM 0xFFE5) ! _, _) =>  LOCK_CAPS;
			    find (kcl, (xt::KEYSYM 0xFFE6) ! r, _) =>  find (kcl, r, LOCK_SHIFT);
			    find (kcl, _ ! r, meaning)              =>  find (kcl, r, meaning);
			end;
		    end;

		# Compute a bit-vector with a 1 in bit-i if one of ModKey[i+1] keycodes
		# has the Mode_switch keysym (KEYSYM 0xFF7E) in its keysym list.
		#
		switch_mode
		    =
		    {
			fun is_mode_switch []                         =>  FALSE;
			    is_mode_switch ((xt::KEYSYM 0xFF7E) ! _) =>  TRUE;
			    is_mode_switch (_ ! r)                    =>  is_mode_switch  r;
			end;

			check_kc = list::exists (fn kc => is_mode_switch (lookup kc); end );

			keys = check_kc  mod_map.mod1_keycodes  ??  [xt::MOD1KEY]         ::  [  ];
			keys = check_kc  mod_map.mod2_keycodes  ??  (xt::MOD2KEY ! keys)  ::  keys;
			keys = check_kc  mod_map.mod3_keycodes  ??  (xt::MOD3KEY ! keys)  ::  keys;
			keys = check_kc  mod_map.mod4_keycodes  ??  (xt::MOD4KEY ! keys)  ::  keys;
			keys = check_kc  mod_map.mod5_keycodes  ??  (xt::MOD5KEY ! keys)  ::  keys;

			kb::make_modifier_key_state  keys;
		    };

		fun switch_fn state
		    =
		    not (kb::modifier_keys_state_is_empty (kb::intersection_of_modifier_key_states (state, switch_mode)));

		  MAPPING { lookup,
			shift_mode => shift_mode lock_meaning,
			is_mode_switched => switch_fn
		      };
	      };			# fun create_map 


	Plea_Mail
	  #	
	  =	REFRESH
	  | LOOKUP  (xt::Keycode, xt::Modifier_Key_State)
	  ;


	Keymap_Imp
	    =
	    KEYMAP_IMP
	      { plea_slot:    Mailslot( Plea_Mail ),
		reply_slot:   Mailslot( xt::Keysym )
	      };


	# Create the keymap imp
	# for the display xsocket: 
	#
	fun make_keymap_imp (display as dy::XDISPLAY { xsocket, ... } )
	    =
	    KEYMAP_IMP { plea_slot, reply_slot }
	    where

		plea_slot  =  make_mailslot ();
		reply_slot =  make_mailslot ();

		fun imp ()
		    =
		    loop (keycode_to_keysym (create_map display))
		    where

			fun loop code_to_sym
			     =
			     loop (
				 case (take  plea_slot)

				     REFRESH
					 =>
					 keycode_to_keysym (create_map display);

				     LOOKUP arg
					 =>
					 {   give  (reply_slot, code_to_sym arg);

					     code_to_sym;
					 };
				 esac
			     );

		    end;

		  xtracing::xspawn ("keymap_imp", imp);
	    end;		# fun make_keymap_imp 


	fun refresh_keymap (KEYMAP_IMP { plea_slot, ... } )
	    =
	    give  (plea_slot, REFRESH);


	fun look_up_keysym (KEYMAP_IMP { plea_slot, reply_slot } ) ( {
	      keycode, mod_state, ...
	    }
	    :
	    et::Key_Xevtinfo)
	    =
	    {   give  (plea_slot, LOOKUP (keycode, mod_state));

		( take  reply_slot,
		  mod_state
		);
	    };
    };			# package keymap_imp

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
