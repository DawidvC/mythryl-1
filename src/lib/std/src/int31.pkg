## int31.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

# The following packages must be without apis so that inlining 
# can take place: bits, vector, rw_vector, rw_float_vector, int, real

###                "Lord, give us the wisdom to utter
###                 words that are gentle and tender,
###                 for tomorrow we may have to eat them."
###
###                             -- Morris K. Udall



package int31_guts: (weak)  Int {		# Int		is from   src/lib/std/src/int.api

    package i31 =  inline_t::int31;		# inline_t	is from   src/lib/core/init/built-in.pkg
    package i32 =  inline_t::int32;

    exception DIVIDE_BY_ZERO = assembly::DIVIDE_BY_ZERO;
    exception OVERFLOW       = assembly::OVERFLOW;
						# for assembly see
                                                #     src/lib/core/init/core.pkg
                                                #     src/lib/core/init/runtime-system-placeholder.pkg
                                                #     src/runtime/machine-dependent/X86.prim.asm
    Int = Int;

    precision   = THE 31;
    min_int_val = -1073741824;
    min_int     = THE min_int_val;
    max_int     = THE 1073741823;

    my to_large:    Int -> large_int::Int    = i31::to_large;
    my from_large:  large_int::Int -> Int    = i31::from_large;

    to_int   =  i31::to_int;
    from_int =  i31::from_int;

    my (-_) 	:  Int -> Int = i31::neg;
    my neg 	:  Int -> Int = i31::neg;
    my (*) 	: (Int, Int) -> Int  = i31::(*);
    my (+) 	: (Int, Int) -> Int  = i31::(+);
    my (-) 	: (Int, Int) -> Int  = i31::(-);
    my (/) : 	  (Int, Int) -> Int  = i31::div ;
    my (%) : 	  (Int, Int) -> Int  = i31::mod ;
    my (quot):   (Int, Int) -> Int  = i31::quot ;
    my (rem): 	  (Int, Int) -> Int  = i31::rem ;
    my min: 	  (Int, Int) -> Int  = i31::min ;
    my max: 	  (Int, Int) -> Int  = i31::max ;
    my abs: 	   Int -> Int = i31::abs ;

    fun sign 0 => 0;
        sign i => if   (i31::(<) (i, 0)   )   -1;
                                         else    1;   fi;
     end;

    fun 0! =>  1;
        n! =>  n * (n - 1)! ;
    end;

    fun same_sign (i, j)
        =
        (i31::bitwise_and (i31::bitwise_xor (i, j), min_int_val) == 0);

    fun compare (i, j)
        =
	if        (i31::(<) (i, j)   )   exceptions::LESS;		# exceptions	is from   src/lib/std/src/exceptions.pkg
	else if   (i31::(>) (i, j)   )   exceptions::GREATER;
	else                             exceptions::EQUAL;   fi;  fi;

    my (>) 	: (Int, Int) -> Bool =  i31::(>);
    my (>=) 	: (Int, Int) -> Bool =  i31::(>=);
    my (<) 	: (Int, Int) -> Bool =  i31::(<);
    my (<=) 	: (Int, Int) -> Bool =  i31::(<=);

    fun is_prime p			# A very simple and naive primality tester.  2009-09-02 CrT.
        =
        {   p = abs(p);			# Try to do something reasonable with negative numbers.

            if   (p < 4)       TRUE;	# Call zero prime.
            elif (p % 2 == 0)  FALSE;	# Special-case even numbers to halve our loop time.
	    else
		# Test all odd numbers less than sqrt(p):

		loop 3
		where
		    fun loop i
			=
			if   (p % i == 0)   FALSE;
			elif (i*i >= p)     TRUE;
			else                loop (i + 2);
			fi;
		end;
	    fi;
	};

    fun factors n
	=
	factors' (n, 2, [])
	where
	    fun factors' (n, p, results)
		=
		if (p*p > n)

		    reverse (n ! results);

		elif (n % p == 0)

		   factors' (n/p, p,   p ! results);

		else

		   factors' (n,   p+1,     results);
		fi;
	end;

    fun sum ints
	=
	sum' (ints, 0)
	where
	    fun sum' (      [], result) =>  result;
		sum' (i ! rest, result) =>  sum' (rest, i + result);
	    end;
	end;

    fun product ints
	=
	product' (ints, 1)
	where
	    fun product' (      [], result) =>  result;
		product' (i ! rest, result) =>  product' (rest, i * result);
	    end;
	end;

    fun format radix
        =
        (num_format::format_int radix)					# num_format	is from   src/lib/std/src/num-format.pkg
        o
        int32_guts::from_int;					# int32_guts	is from   src/lib/std/src/int32.pkg

    fun scan radix
        =
        {   scan_large
                =
                num_scan::scan_int  radix;				# num_scan	is from   src/lib/std/src/num-scan.pkg

	    fun f getc cs
                = 
	        case (scan_large getc cs)
		    #		  
		    NULL => NULL;
		    #		  
		    THE (i, cs')
			=> 
			THE (int32_guts::to_int i, cs');
					     # This check is redundant because int32::to_int does it already:
					     #		   if i32.>(i, 0x3fffffff) or i32.<(i, -0x40000000) then
					     #		     raise exception OVERFLOW
					     #		   else
                 esac;

	   f;
        };

    to_string
        =
        format  number_string::DECIMAL;				# number_string	is from   src/lib/std/src/number-string.pkg

#   from_string = PreBasis::scan_string (scan number_string::DEC)

    stipulate
	package w31 = inline_t::unt31;					# inline_t	is from   src/lib/core/init/built-in.pkg
	package cv  = inline_t::char_vector;
    herein
	# Optimized version of from_string.
	# It is about 2x as fast as using scan_string:

	fun from_string s
            =
	    {   n = size s;
		z = char::to_int '0';

		sub = cv::get;

		infix val +++;

		fun x +++ y
                    =
                    w31::to_int_x (w31::(+) (w31::from_int x, w31::from_int y));

		fun num (i, a)
                    =
		    if (i >= n)
			#                        
                        a;
		    else
			c = char::to_int (sub (s, i)) - z;

			if   (c < 0  or  c > 9)

			     a;
			else
			     num (i +++ 1, 10 * a - c);
			fi;
		    fi;

		# Do the arithmetic using the negated absolute to avoid
		# premature overflow on min_int.

		fun negabs i
                    =
		    if (i >= n)
			#                        
                        NULL;
		    else 
			c = z - char::to_int (sub (s, i));

			if (c > 0 or c < -9)
			    #
			    NULL;
			else
			    THE (num (i +++ 1, c));
			fi;
		    fi;

		fun skipwhite i
                    =
		    if (i >= n)
			#                        
                        NULL;
		    else
			c = sub (s, i);

			if (char::is_space c)
			    #
			    skipwhite (i +++ 1);
			else
			    if (c == '-')
				#
				negabs (i +++ 1);
			    else
				null_or::map (-_) (negabs i);		# null_or	is from   src/lib/std/src/null-or.pkg
			    fi;
			fi;
		    fi;

		skipwhite 0;
	    };
    end;				# stipulate
};					# package int31 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
