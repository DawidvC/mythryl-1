## x86-unix-compiler-client-interface.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/backend-x86.make6



# This file defines the compiler back-end
# used on x86-linux and related platforms.
#
# (On x86-win32, x86-win32-compiler-client-interface.pkg is used instead.)
#
# The standard compiler references us via
#
#     src/lib/core/compiler/x86-with-unix-call-conventions.pkg
#
# while the bootstrap compiler references us via the
#
#     compile_x86_unix_compiler = make_compiler_g( package compiler_client_interface = x86_unix_compiler_client_interface, ... )
#
# definition in
#
#     src/lib/core/make-compiler/x86-unix.pkg
#
#
# "compiler_client_interface_g" is defined in
#
#     src/lib/compiler/toplevel/backend/compiler-client-interface-g.pkg
#
# "x86_backend_g" is defined in
#
#     src/lib/compiler/codegen/x86/x86-backend-g.pkg



stipulate

    #  Turn on "fast-fp"... 
                                                                               my _ = 
    low_code_control::bool  "fast_floating_point"			# low_code_control	is from   src/lib/compiler/lower/control/lowcode-control.pkg
        :=
        TRUE;

    # The following is a GROSS HACK!   XXX BUGGO FIXME
    #
    # Eventually we need to generate separate binaries for the
    # IntelMac platform.  This code figures out dynamically
    # whether it is running Darwin (i.e., Mac OS X on an Intel),
    # but this does not work correctly when cross-compiling.
    # In particular, once the compiler or any of the libraries
    # that get compiled by the cross-compiler starts using NLFFI,
    # then things will start to break.
    #
    # Also, the cross-compiler will not set the ABI_Darwin symbol
    # correctly for CM's conditional compilation mechanism, so the
    # compiler sources cannot rely on it!
    #
    my (frame_alignment, return_small_structs_in_regs, abi_variant)
        =
	case (host_info::get_os_name ())
	     "Darwin" =>  (16, TRUE,  THE "Darwin");
	     _        =>  (4,  FALSE, NULL        );
        esac;
herein
								# lib7				is from   src/lib/std/lib7.pkg
    package x86_unix_compiler_client_interface
	=
	compiler_client_interface_g (				# compiler_client_interface_g	is from   src/lib/compiler/toplevel/backend/compiler-client-interface-g.pkg

            package m
                =
                x86_backend_g (					# x86_backend_g			is from   src/lib/compiler/codegen/x86/x86-backend-g.pkg

                    package ccall_params {

			frame_align =  frame_alignment;

			return_small_structs_in_regs
			    =
			    return_small_structs_in_regs;
		    };

		    abi_variant = abi_variant;
		);

	    ansi_c_prototype_convention
                =
                "unix_convention";        #  vs "windows_convention".
	);
end;
