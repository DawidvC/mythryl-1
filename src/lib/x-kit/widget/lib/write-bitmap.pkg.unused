# write-bitmap.pkg

###          "A wise man will make more opportunities than he finds."
###
###                                 -- Francis Bacon


package WriteBitmap :
  api
    exception NOT_BITMAP

    my writeBitmapFile:  (file::Output_Stream * String) -> 
          (xcore::IMAGE,  Null_Or(Int),  Null_Or(Int)) -> Void
  end

    exception NOT_BITMAP
    use Geometry file

    my << = Bits::lshift
    my >> = Bits::rshift
    my & = Bits::bitwise_and
    my ++ = Bits::bitwise_or
    infix << >> & ++

    flip = #["0", "8", "4", "c", "2", "a", "6", "e",
                 "1", "9", "5", "d", "3", "b", "7", "f"]

    fmt1 = format::format "#define %swidth %d\n#define %sheight %d\n"
    fmt2 = format::format "#define %s%s_hot %d\n"

    bytesPerRow = 12

    fun writeBitmapFile (outs, name) 
            (xcore::IMAGE { size, data=[data] }, hotx, hoty) = let
          use format
          name = case name of "" => "" | _ => name$"_"
          pr = outputc outs
          my SIZE { wid, ht } = size
          fun doChar (c, byte) = let
                v = ord c
                in
                  if byte == 0 then pr "   0x"
                  else if byte mod bytesPerRow == 0 then pr ",\n   0x"
                  else pr ", 0x";
                  pr (vector::get (flip, v & 0xF));
                  pr (vector::get (flip, v >> 4));
                  byte+1
                end
          fun doRow (row, byte) = revfold doChar (explode row) byte
          in
            pr (fmt1 [STR name, INT wid, STR name, INT ht]);
            case hotx of
              THE x => pr (fmt2 [STR name, STR "x", INT x])
            | NULL => ();
            case hoty of
              THE y => pr (fmt2 [STR name, STR "y", INT y])
            | NULL => ();
            apply pr ["static char ", name, "bits[] = {\n"];
            revfold doRow data 0;
            pr "};\n"
          end
      | writeBitmapFile _ (xcore::IMAGE { data, ... }, _, _) = raise exception NOT_BITMAP

};
