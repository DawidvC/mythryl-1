#
# This is Reif and Tarjan's algorithm (SIAM J Computing 1981) 
# for computing approximate birthpoints for expressions.   
# For each basic block B,
#   idef (x) = { defs (v_i) | i = 1 ... n in all paths 
#                           idom (x) v_1 v_2 ... v_n x where n >= 1 and
#                                   v_i != idom (x) for all 1 <= i <= n
#             }
# -- Allen Leung

api IDEFS =
api

   type var = Int

   my compute_idefs:  
       { def_use:  graph::node( N ) -> List( var ) * List( var ),
        cfg:      graph::graph (N,E,G)
       } ->
       { idefuse:       Void ->  rw_vector::Rw_Vector( List( Int ) * List( Int )),
         ipostdefuse:   Void ->  rw_vector::Rw_Vector( List( Int ) * List( Int ))
       }

end

