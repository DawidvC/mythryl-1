## basiccontrol.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/basics/basics.make6



###             "Alas, I am dying beyond my means."
###
###                          -- Oscar Wilde,
###                             as he sipped champagne
###                             on his deathbed



api Basic_Control {

    print_warnings:  Ref( Bool );	    		#  If FALSE, suppress all warning messages 

    top_index					#  The top-level registry of the compiler.
        :
        control_index::Control_Index;			# control_index	is from   src/lib/controls/control-index.pkg


    #  Nest a tier-2 registry within the top-level registry: 

    note_subindex
        :
        ( String,
	  control_index::Control_Index,
	  control::Priority				# control		is from   src/lib/controls/control.pkg
	)
	->
	Void;
};

package basic_control: (weak) Basic_Control {

    top_index		# XXX BUGGO FIXME more mutable toplevel state -- should be part of a compiler state record.
        =
        control_index::make { help => "Lib7 controls" };

    registry
        =
        control_index::make { help => "compiler settings" };

    fun note_subindex (prefix, reg, pri)
        =
	control_index::note_subindex

            top_index
		{
		  prefix => THE prefix,
		  pri,
		  obscurity => 0,
		  reg
		};

                                                        
										my _ = 
    note_subindex ("basic", registry, [10, 10, 1]);

    print_warnings
        =
        r
        where
            r = REF TRUE;

	    control
                =
                control::control {
                    name      =>  "print_warnings",
		    pri       =>  [0],
		    obscurity =>  1,
		    help      =>  "whether warnings get generated",
		    control   =>  r
		};

	    sctl
                =
                control::string_control
                    control_utilities::convert::bool		# control_utilities	is from   src/lib/controls/control-util.pkg
                    control;

	    control_index::note_control  registry
		{   control         =>  sctl,
                    dictionary_name =>  THE "PRINT_CONTROL"
                };
	end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
