## digraph.pkg

#  Directed graph in adjacency list format.
#
# -- Allen Leung


generic package directed_graph (A:  Rw_Vector) : 
api include Graph_Guts 

    type adjlist( E )   = a::Rw_Vector( List( graph::edge(E) ) ) 
    type nodetable( N ) = a::Rw_Vector( Null_Or(N) )

    #  This function exposes the internal representation! 
    my newGraph:  
        { name:   String,
          info:   G,
          next:   adjlist( E ),
          prior:   adjlist( E ),
          nodes:  nodetable( N )
        } -> graph::graph( N, E, G ) 
end
{

   package g = graph
   package a = A

   type adjlist( E )  = a::Rw_Vector( List( graph::edge(E) ) )
   type nodetable( N ) = a::Rw_Vector( Null_Or( N ) )

   fun newGraph { name, info, next, prior, nodes } =
   let node_count    = REF 0
       edge_count    = REF 0
       entries       = REF []
       exits         = REF []
       new_nodes     = REF []
       garbage_nodes = REF []
       fun new_id () = case ! new_nodes of []  => a::length nodes
                                       | h . t => (new_nodes := t; h)
       fun garbage_collect ()
          =
          (new_nodes := (*new_nodes) @ (*garbage_nodes); garbage_nodes := [])

       fun get_nodes () =
          a::keyed_fold_right (fn (i, THE n, l) =>(i, n) . l|(_, _, l) => l) [] (nodes, 0, NULL)

       fun get_edges () = list::cat (a::fold_right op . [] next)
       fun order () = *node_count
       fun size ()  = *edge_count
       fun capacity () = a::length nodes
       fun add_node (i, n) =
         (case a::sub (nodes, i) 
             of NULL => node_count := 1 + *node_count
              | _    => (); 
          a::update (nodes, i, THE n)
         )
       fun add_edge (e as (i, j, info)) = 
         (a::update (next, i, e . a::sub (next, i));
          a::update (prior, j, e . a::sub (prior, j));
          edge_count := 1 + *edge_count)

       fun set_out_edges (i, edges) =
       let fun removePred([], j, es') = a::update (prior, j, es')
             | removePred((e as (i', _, _)) . es, j, es') = 
                 removePred (es, j, if i' == i then es' else e . es')
           fun removeEdge (i', j, _) =
                (if i != i' then raise exception g::Graph "set_out_edges" 
                 removePred (a::sub (prior, j), j,[]))
           fun addPred (e as (_, j, _)) = a::update (prior, j, e . a::sub (prior, j))
           old_edges = a::sub (next, i)
       in  apply removeEdge old_edges;
           a::update (next, i, edges);
           apply addPred edges;
           edge_count := *edge_count + length edges - length old_edges
       end

       fun set_in_edges (j, edges) =
       let fun removeSucc([], i, es') = a::update (next, i, es')
             | removeSucc((e as (_, j', _)) . es, i, es') = 
                 removeSucc (es, i, if j' == j then es' else e . es')
           fun removeEdge (i, j', _) =
                (if j != j' then raise exception g::Graph "set_in_edges" 
                 removeSucc (a::sub (next, i), i,[]))
           fun addSucc (e as (i, _, _)) = a::update (next, i, e . a::sub (next, i))
           old_edges = a::sub (prior, j)
       in  apply removeEdge old_edges;
           a::update (prior, j, edges);
           apply addSucc edges;
           edge_count := *edge_count + length edges - length old_edges
       end

       fun remove_node i =
          case a::sub (nodes, i) of
             NULL => ()
          |  THE _ => (set_out_edges (i,[]);
                        set_in_edges (i,[]);
                        a::update (nodes, i, NULL);
                        node_count := *node_count - 1;
                        garbage_nodes := i . *garbage_nodes)

       fun remove_nodes ns = apply remove_node ns
       fun set_entries ns = entries := ns
       fun set_exits ns   = exits := ns
       fun get_entries ()  = *entries
       fun get_exits ()    = *exits
       fun out_edges n = a::sub (next, n)
       fun in_edges n = a::sub (prior, n)
       fun get_succ n = map #2 (a::sub (next, n))
       fun get_pred n = map #1 (a::sub (prior, n))
       fun has_edge (i, j) = list::exists (fn (_, k, _) => j = k) (a::sub (next, i))
       fun has_node n = case a::sub (nodes, n) of
                           THE _ => TRUE | NULL => FALSE
       fun node_info n = case a::sub (nodes, n) of
                            THE x => x 
                          | NULL => raise exception g::NOT_FOUND
       fun forall_nodes f = 
           a::keyed_apply (fn (i, THE x) => f (i, x) | _ => ()) (nodes, 0, NULL)
       fun forall_edges f = a::apply (list::apply f) next

   in  g::GRAPH {
          name            = name,
          graph_info      = info,
          new_id          = new_id,
          add_node        = add_node,
          add_edge        = add_edge,
          remove_node     = remove_node,
          set_in_edges    = set_in_edges,
          set_out_edges   = set_out_edges,
          set_entries     = set_entries,
          set_exits       = set_exits,
          garbage_collect = garbage_collect,
          nodes           = get_nodes,
          edges           = get_edges,
          order           = order,
          size            = size,
          capacity        = capacity,
          out_edges       = out_edges,
          in_edges        = in_edges,
          next            = get_succ,
          prior            = get_pred,
          has_edge        = has_edge,
          has_node        = has_node,
          node_info       = node_info,
          entries         = get_entries,
          exits           = get_exits,
          entry_edges     = fn _ => [],
          exit_edges      = fn _ => [],
          forall_nodes    = forall_nodes,
          forall_edges    = forall_edges
       }
   end 

   fun graph (name, info, n) = 
   let next  = a::rw_vector (n,[])
       prior  = a::rw_vector (n,[])
       nodes = a::rw_vector (n, NULL)
   in  newGraph { name=name, info=info, nodes=nodes, next=succ, prior=pred } end
}

package directed_graph = directed_graph (DynArray)



## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.

##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
