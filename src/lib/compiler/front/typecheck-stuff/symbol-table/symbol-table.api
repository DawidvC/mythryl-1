## symbol-table.api
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# First-time readers should see OVERVIEW section in:
#
#    src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg



api Symbol_Table {

    # Symbol tables now optionally contain modtrees anchored at
    # namings.  This allows for rapid on-demand construction of
    # modmaps (= pickling/unpickling contexts).
    #
    # March 2000, Matthias Blume 

    Symbol_Table;

    Entry      = symbol_table_entry::Symbol_Table_Entry;			# symbol_table_entry	is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg
    Full_Entry = (Entry, Null_Or( module::Module_Tree ));			# module		is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg

    exception UNBOUND;  

    empty:     Symbol_Table;

    get:  (Symbol_Table,  symbol::Symbol)					# symbol		is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	      ->
              Entry;

    bind:   (symbol::Symbol,  Entry,  Symbol_Table)
	    ->
            Symbol_Table;

    special:   ((symbol::Symbol -> Entry),   (Void -> List( symbol::Symbol ) ))
	       ->
               Symbol_Table;

    atop:  (Symbol_Table, Symbol_Table)
	   ->
           Symbol_Table;

    consolidate:  Symbol_Table
		  ->
                  Symbol_Table;

    consolidate_lazy:  Symbol_Table
		       ->
                       Symbol_Table;

    apply:  ((symbol::Symbol, Entry) -> Void)
	    ->
	    Symbol_Table
	    ->
	    Void;

    map:  (Entry -> Entry)
	  ->
          Symbol_Table
	  ->
          Symbol_Table;

    fold:  ((((symbol::Symbol, Entry)), X) -> X)
	   ->
           X
	   ->
           Symbol_Table
	   ->
           X;

    realfold:  ((((symbol::Symbol, Full_Entry)), X) -> X)
	       ->
               X
	       ->
               Symbol_Table
	       ->
               X;

    to_sorted_list:  Symbol_Table
	             ->
                     List ((symbol::Symbol, Entry));

    bind0:   ( symbol::Symbol,
	       Full_Entry,
	       Symbol_Table
             )
	     ->
             Symbol_Table;

    symbols:  Symbol_Table
	      ->
              List( symbol::Symbol );


    filter:  ( Symbol_Table,
	       List( symbol::Symbol )
             )
	     ->
             Symbol_Table;

}; #  Api Symbol_Table 
