#
# Generate multiplication/division by a constant.
# This module is mainly used for architectures without fast integer multiply.
#
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



###                    "Power corrupts. Absolute power is kind of neat."
###
###                          -- John Lehman, US Secretary of the Navy, 1981-1987



generic package codetree_mult_g (

    package instruction_set:  	Instruction_Set;	# Instruction_Set	is from   src/lib/compiler/lower/instruction/instruction-set.api
    package codetree:  		Codetree;		# Codetree		is from   src/lib/compiler/lower/codetree/codetree.api

    package cb:  Cells_Basis				# Cells_Basis		is from   src/lib/compiler/lower/instruction/cells-basis.api
             =  cells_basis;

    int_type:  Int;	#  width of integer type 

    Argi = { r: cb::Cell, i: Int, d: cb::Cell };
    Arg  = { r1: cb::Cell, r2: cb::Cell, d: cb::Cell }; 

    # These are always non-overflow trapping 
    #
    mov:    { r: cb::Cell, d: cb::Cell } -> instruction_set::Instruction;
    add:    Arg -> instruction_set::Instruction;
    slli:   Argi -> List( instruction_set::Instruction );
    srli:   Argi -> List( instruction_set::Instruction );
    srai:   Argi -> List( instruction_set::Instruction );
)
(    trapping:  Bool; #  trap on overflow? 
     mult_cost:  Ref( Int );  #  Cost of multiplication 

	#  Basic ops; these have to implemented by the architecture 

	#  if trapping == TRUE, then the following MUST trap on overflow 
     addv:    Arg  -> List( instruction_set::Instruction );
     subv:    Arg  -> List( instruction_set::Instruction );

       /* some architectures, like the PA-RISC
	* have these types of special ops 
	* if trapping == TRUE, then the following MUST also trap on overflow
	*/
     sh1addv:   Null_Or( Arg -> List( instruction_set::Instruction ) );  #  A*2 + b 
     sh2addv:   Null_Or( Arg -> List( instruction_set::Instruction ) );  #  a*4 + b
     sh3addv:   Null_Or( Arg -> List( instruction_set::Instruction ) );  #  A*8 + b 
)  
(    signed:    Bool; #  signed? 
)

: (weak) Codetree_Mult_Div				# Codetree_Mult_Div	is from   src/lib/compiler/lower/codetree/codetree-mult.api

{
    package codetree        = codetree;
    package instruction_set = instruction_set;
    package cells           = instruction_set::cells;

    package i = instruction_set;
    package t = codetree;
    package c = cells;
    package u = unt;					# unt			is from   src/lib/std/unt.pkg
    package a = rw_vector;				# rw_vector		is from   src/lib/std/src/rw-vector.pkg

    Arg       = Argi;

    infix val  << >> >>> | & ;
    #
    itow   = u::from_int;
    wtoi   = u::to_int_x;

    (<<)   = u::(<<);
    (>>)   = u::(>>);
    (>>>)  = u::(>>>);
    (|)    = u::bitwise_or;
    (&)    = u::bitwise_and;

    exception TOO_COMPLEX;

    fun error msg = lowcode_error_message::error("codetree_mult", msg);

    zero_r   = c::zero_reg cb::REGISTER; 
    shiftri = if signed  srai; else srli;fi;

    fun is_power_of2 w
	=
	((w - 0u1) & w) == 0u0;

    fun log2 n                 #  n must be > 0!!! 
	=
	loop (n, 0)
        where
	    fun loop (0u1, pow) => pow; 
	        loop (w, pow) => loop (w >> 0u1, pow+1);
            end;
	end;

    fun zero_bits (w, low_zero_bits)
        = 
	if ((w & 0u1) == 0u1)
             (w, low_zero_bits);
	else
             zero_bits (w >> 0u1, low_zero_bits+0u1);
        fi;

    # Non overflow trapping version of multiply: 
    # We can use add, shadd, shift, sub to perform the multiplication
    #
    fun multiply_non_trap { r, i, d }
	=
	{   fun mult (r, w, max_cost, d)
                = 
		if (max_cost <= 0)
                     raise exception TOO_COMPLEX;
		elif (is_power_of2 w ) slli { r, i=>log2 w, d };
		else
		     case (w, sh1addv, sh2addv, sh3addv)
			  #  some base cases 
			  (0u3, THE f, _, _) => f { r1=>r, r2=>r, d };
			  (0u5, _, THE f, _) => f { r1=>r, r2=>r, d };
			  (0u9, _, _, THE f) => f { r1=>r, r2=>r, d };

			  _ =>
			      #  recurse on the bit patterns of w 
			      {   tmp = c::new_reg();

				  if ((w & 0u1) == 0u1)
										 # Low order bit is 1 
				       if ((w & 0u2) == 0u2)
										 # Second bit is 1 
					    mult (r, w+0u1, max_cost - 1, tmp) @
					    subv { r1=>tmp, r2=>r, d };
				       else					# Second bit is 0 
					    mult (r, w - 0u1, max_cost - 1, tmp) @
					    addv { r1=>tmp, r2=>r, d };
				       fi;
				  else 						# Low order bit is 0 
				       my (w, low_zero_bits)
					  =
					  zero_bits (w, 0u0);

				       mult (r, w, max_cost - 1, tmp) @
					   slli { r=>tmp, i=>wtoi low_zero_bits, d };

				  fi;
			      };
                     esac;
               fi;

	    if   (i <= 0 ) raise exception TOO_COMPLEX;
	    elif (i == 1 ) [mov { r, d } ];
	    else           mult (r, itow i,*mult_cost, d);
            fi;
	};

    # The semantics of roundToZero { r, i, d } is:
    #   if r >= 0 then d <- r
    #   else d <- r + i
    #
    fun round_to_zero statement { type, r, i, d }
        =
	{   reg = t::REG (type, r);

	    statement (t::MOVE_INT (type, d,
		     t::COND (type, t::CMP (type, t::GE, reg, t::LITERAL 0), reg,
			       t::ADD (type, reg, t::LITERAL (t::machine_int::from_int (int_type, i))))));
	};



    # Simulate rounding towards zero for signed division 

    fun round_div { mode=>t::TO_NEGINF, r, ... }
            =>
            ([], r);				#  no rounding necessary 

       round_div { mode=>t::TO_ZERO, statement, r, i }
           =>
	   if signed

		d =   c::new_reg ();

		if (i == 2)
		    		#  special case for division by 2 
		     tmp_r =   c::new_reg ();

		     (   srli {   r,
				  i => int_type - 1,
				  d => tmp_r
			      }
			 @
			 [   add {   r1 => r,
				     r2 => tmp_r,
				     d
				 }
			 ],

			 d
		    );

		else
		     #  invoke rounding callback 
		     round_to_zero statement { type=>int_type, r, i=>i - 1, d };
		     ([], d);
		fi;

	   else
                ([], r);		# No rounding for unsigned division 
	   fi;

       round_div { mode, ... }
           => 
	   error("Integer rounding mode " +
		 t::basis::rounding_mode_to_string mode + " is not supported");
    end;

    fun divide_non_trap { mode, statement }{ r, i, d }
        = 
	if (i > 0 and is_power_of2 (itow i))
	     
	     my (code, r)
		 =
		 round_div { mode, statement, r, i };

	     code@shiftri { r, i=>log2 (itow i), d };

			    #  won't overflow 
	else
             raise exception TOO_COMPLEX;
        fi;

    # OVERFLOW trapping version of multiply: 
    #   We can use only add and shadd to perform the multiplication,
    #   because of overflow trapping problem.
    #
    fun multiply_trap { r, i, d }
	=
	{   fun mult (r, w, max_cost, d)
		=
		if (max_cost <= 0)
		     #	
		     raise exception TOO_COMPLEX;
		else 
		    case (w, sh1addv, sh2addv, sh3addv, zero_r)   

			# Some simple base cases:
			#
			(0u2, _, _, _, _)           => addv { r1=>r, r2=>r, d };
			(0u3, THE f, _, _, _)      => f { r1=>r, r2=>r, d };
			(0u4, _, THE f, _, THE z) => f { r1=>r, r2=>z, d };
			(0u5, _, THE f, _, _)      => f { r1=>r, r2=>r, d };
			(0u8, _, _, THE f, THE z) => f { r1=>r, r2=>z, d };
			(0u9, _, _, THE f, _)      => f { r1=>r, r2=>r, d };

			_ =>
			   {
			       # Recurse on the bit patterns of w 
			       #	
			       tmp =   c::new_reg ();

			       if ((w & 0u1) == 0u1)

				   mult (r, w - 0u1, max_cost - 1, tmp)
                                   @
                                   addv { r1=>tmp, r2=>r, d };

			       else 

				   case (w & 0u7, sh3addv, zero_r)

					(0u0, THE f, THE z)				# Times 8 
					    =>
					    mult (r, w >> 0u3, max_cost - 1, tmp)
					    @
					    f { r1=>tmp, r2=>z, d };
				       _
					    =>
					    case (w & 0u3, sh2addv, zero_r)

						 (0u0, THE f, THE z)			# Times 4 
						     =>
						     mult (r, w >> 0u2, max_cost - 1, tmp)
						     @
						     f { r1=>tmp, r2=>z, d };

						_
						    =>
						    mult (r, w >> 0u1, max_cost - 1, tmp)
						    @
						    addv { r1=>tmp, r2=>tmp, d };
					    esac;
				   esac;
			       fi;
			   };
                    esac;
		fi; 

	    if   (i <= 0)  raise exception TOO_COMPLEX;
	    elif (i == 1)  [mov { r, d } ];
	    else           mult (r, itow i,*mult_cost, d);
            fi;
	};

    fun divide_trap { mode, statement }{ r, i, d }
        =
	if   (i > 0 and is_power_of2 (itow i))
	    
	     my (code, r)
		 =
		 round_div { mode, statement, r, i };

	     code@shiftri { r, i=>log2 (itow i), d };
             							#  won't overflow 
	else
             raise exception TOO_COMPLEX;
        fi;

    fun multiply x =   if trapping    multiply_trap x;   else multiply_non_trap x;fi;
    fun divide   x =   if trapping    divide_trap   x;   else divide_non_trap   x;fi;

};
