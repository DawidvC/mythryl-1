## unify-types.pkg 

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6



# The center of the typechecker is
#
#     src/lib/compiler/front/typechecker/typecheck/typecheck-package-language-g.pkg
#
# -- see it for a higher-level overview.
#  
# We get called from 
#
#     src/lib/compiler/front/typechecker/modules/api-match-g.pkg
#     src/lib/compiler/front/typechecker/types/unify-and-generalize-types-g.pkg
#
# The Hindley-Milner type inference algorithm on which the
# typechecker is based uses Prolog-style logical unification
# to propagate type information to syntax nodes lacking
# explicit programmer-supplied type declarations.  (Which is,
# typically, the overwhelming majority of them.)
#  
# A light overview of Hindley-Milner type inference may be found here:
#     http://en.wikipedia.org/wiki/Type_inference
#
# A more detailed treatment may be found in the
#   Types and Programming Languages
# text by Benjamin C Pierce, chapter 22.
#  
# In this file we implement the required unification operation.
# 
# For unification, our primary analog of a logic variable is
# a type variable set to META_TYPE_VARIABLE;
# this represents a totally unconstrained type about which
# we as yet know nothing at all.
#
# Various other type variable values also admit specialization
# during unification to reflect additional knowledge gained.
# For example INCOMPLETE_RECORD_TYPE_VARIABLE; values represent
# incompletely specified records ("..." used), which can be
# updated to reflect the complete record definition if we find it.
#
# Unification thus mostly consists of propagating type knowledge
# by setting such type variables to something more specific, perhaps
# a compound type containing more META_TYPE_VARIABLE
# type variables to be set in their turn.
#
# The entrypoint into this file is unify_types().  It has a
# Void result type since all its work is done via side-effects,
# setting type variables embedded in its type arguments to
# less general (and thus more informative) values.

api Unify_Types {

    # If unification fails we raise
    # the exception UNIFY_TYPES with
    # a Unify_Fail value to detail
    # the exact reason for failure:
    #
    Unify_Fail
	= CIRCULARITY										# Cycle in type graph -- type variable loop.
	| NEED_EQUALITY_TYPE									# Equality type required. 
	| TYPE_CONSTRUCTOR_MISMATCH    (types::Type_Constructor, types::Type_Constructor)	# Type constructor mismatch.
	| TYPE_MISMATCH                (types::Type, types::Type)				# Type mismatch.
	| LITERAL_TYPE_MISMATCH         types::Type_Variable					# Type of literal could not be resolved.
	| USER_TYPE_VARIABLE_MISMATCH   types::Type_Variable					# USER_TYPE_VARIABLE match 
	| OVERLOADED_TYPE_VARIABLE_MISMATCH							# OVERLOADED_TYPE_VARIABLE, equality mismatch  
	| RECORD_FIELD_LABELS_MISMATCH								# Record labels did not match.
	;

    exception UNIFY_TYPES  Unify_Fail;

    fail_message: Unify_Fail -> String;

    unify_types:  (String, String, types::Type, types::Type, List(String)) -> Void;

    debugging:    Ref(  Bool );
};


package unify_types

: (weak)  Unify_Types				# Unify_Types			is from   src/lib/compiler/front/typechecker/types/unify-types.pkg

{
    # Type unification.

    debugging =   typechecking_control::unify_types_debugging;		#  REF FALSE 

    stipulate

	package t   = types;			# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	package ts  = type_stuff;		# type_stuff			is from   src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg
						# resolve_overloaded_literals	is from   src/lib/compiler/front/typechecker/types/resolve-overloaded-literals.pkg
						# typechecking_debugging	is from   src/lib/compiler/front/typechecker/typecheck/typechecking-debugging.pkg
						# unparse_type			is from   src/lib/compiler/front/typechecker/print/unparse-type.pkg
	include types; 

	#  Debugging 
	say = control_print::say;

	fun if_debugging_say (msg: String)
            =
            if *debugging
                say msg;
                say "\n";
            fi;

	fun bug msg
            =
            error_message::impossible("unify_types: " + msg);


	unparse_type
            =
            unparse_type::unparse_type  symbol_table::empty;

	fun debug_unparse_type (msg, type)
            =
	    typechecking_debugging::debug_print  debugging  (msg, unparse_type, type);

	fun debug_unparse_typevar_ref  typevar_ref
            =
	    if *debugging		# Without this 'if' (and the matching one in unify_and_generalize_types_g), compiling the compiler takes 5X as long! :-)
		typechecking_debugging::with_internals
		    (fn () =  if_debugging_say (unparse_type::typevar_ref_printname typevar_ref));
	    fi;


	prettyprint_type
            =
            prettyprint_type::prettyprint_type  symbol_table::empty;

	fun debug_pptype (msg, type)
            =
	    typechecking_debugging::debug_print  debugging  (msg, prettyprint_type, type);

    herein

	 Unify_Fail
	     = CIRCULARITY									# Cycle in type graph -- type variable loop.
	     | NEED_EQUALITY_TYPE								# Equality type required.
	     | TYPE_CONSTRUCTOR_MISMATCH    (types::Type_Constructor, types::Type_Constructor)	# Type constructor mismatch.
	     | TYPE_MISMATCH                (types::Type, types::Type)				# Type mismatch.
	     | LITERAL_TYPE_MISMATCH         types::Type_Variable				# Type of literal could not be resolved.
	     | USER_TYPE_VARIABLE_MISMATCH   types::Type_Variable				# USER_TYPE_VARIABLE match.
	     | OVERLOADED_TYPE_VARIABLE_MISMATCH						# OVERLOADED_TYPE_VARIABLE, equality mismatch.
	     | RECORD_FIELD_LABELS_MISMATCH							# Record labels did not match.
	     ;

	fun fail_message failure
            =
	    case failure
	         CIRCULARITY             	   => "circularity";
	         NEED_EQUALITY_TYPE                => "equality type required";

	         TYPE_CONSTRUCTOR_MISMATCH       _ => "type_constructor mismatch";
	         TYPE_MISMATCH                   _ => "type mismatch";

	         LITERAL_TYPE_MISMATCH           _ => "literal";
	         USER_TYPE_VARIABLE_MISMATCH     _ => "USER_TYPE_VARIABLE match";

	         OVERLOADED_TYPE_VARIABLE_MISMATCH => "OVERLOADED_TYPE_VARIABLE, equality mismatch";
	         RECORD_FIELD_LABELS_MISMATCH      => "record labels";
            esac;


	exception UNIFY_TYPES  Unify_Fail;


        ########################################################
	# Miscellaneous functions:

	eq_label = symbol::eq;

	fun literal_is_equality_kind (lk:  t::Literal_Kind)
            =
	    case lk
                 (INT | WORD | CHAR | STRING)   =>   TRUE;
                 REAL                           =>   FALSE;
            esac;

	# equality_property_of_type_constructor type_constructor:
	#
	# This function returns the equality_property
	# of type_constructor for use in determining
	# when a CONSTRUCTOR_TYPE is an equality type.
	#
	# Note: Calling this function on ERRONEOUS_TYPE_CONSTRUCTOR produces an impossible
	# because an ERRONEOUS_TYPE_CONSTRUCTOR should never occur in a CONSTRUCTOR_TYPE
        # and hence an equality_property of one of them should never be needed.
	#
	# Calling this function on a DEFINED_TYPE_CONSTRUCTOR also produces an impossible because
	# the current equality_property scheme is insufficiently expressive to describe
	# the possibilities.  (Ex: first argument must be an eq type but not
	# necessarily the second)  Because of this, it is currently necessary to
	# expand a DEFINED_TYPE_CONSTRUCTOR before computing its equality type.
	#
	fun equality_property_of_type_constructor (PRIMITIVE_TYPE_CONSTRUCTOR { eq, ... } )
		=>
		case *eq
                    EQ_ABSTRACT => NO;
                    ep          => ep;
                esac;

	    equality_property_of_type_constructor (RECORD_TYPE_CONSTRUCTOR _)  => YES;
	    equality_property_of_type_constructor (DEFINED_TYPE_CONSTRUCTOR _) => bug "equality_property_of_type_constructor: DEFINED_TYPE_CONSTRUCTOR";
	    equality_property_of_type_constructor (ERRONEOUS_TYPE_CONSTRUCTOR) => bug "equality_property_of_type_constructor: ERRONEOUS_TYPE_CONSTRUCTOR";
	    equality_property_of_type_constructor _                            => bug "equality_property_of_type_constructor: unexpected type_constructor";
        end;

	# fieldwise (just1, just2, combine, fields1, fields2):
	#
	# This function merges two sorted lists of (label, type) pairs
	# (sorted by label) into a single sorted list of (label, type) pairs.
	# If (l1, t1) occurs in fields1 but l1 doesn't occur in fields2 then
	# (l1, just1 t1) occurs in the output.  Similarly with just2.
	# If (l, t1) occurs in fields1 and (l, t2) in fields2, then 
	# (l, combine t1 t2) occurs in the output.
	#
	fun fieldwise (_, just2, _, [], fields2) =>   map  (fn (n, t) = (n, just2 t))  fields2;
	    fieldwise (just1, _, _, fields1, []) =>   map  (fn (n, t) = (n, just1 t))  fields1;

	    fieldwise (just1, just2, combine, ((n1, t1) ! r1), ((n2, t2) ! r2))
		=>
		if   (eq_label (n1, n2))
		    
		     (n1, combine (t1, t2)) ! (fieldwise (just1, just2, combine, r1, r2));
		else
		     if   (ts::label_is_greater_than (n2, n1))
		         
			  (n1, just1 t1) ! (fieldwise (just1, just2, combine, r1, ((n2, t2) ! r2)));
		     else
			  (n2, just2 t2) ! (fieldwise (just1, just2, combine, ((n1, t1) ! r1), r2));
		     fi;
		fi;
        end;


	# ************** adjust function ****************************************

        # We are about to do
	#
        #     given_type_var := RESOLVED_TYPE_VARIABLE given_type;
        #
        # or something very similar, and before doing
        # so we want to propagate any relevant type
        # information from the current value of *given_type_var
        # into 'given_type'.
        #
        # We also want to incorporate into 'given_type'
        # our given_fn_nesting and 'given_eq' values,
        # by setting
	#     given_type_var.fn_nesting  to minimum of current and given value;
        #     given_type_var.eq          to 'or' of current value and 'given_eq'.
        #
        # Raise CIRCULARITY if there is a type variable loop.
	#
	fun adjust_type
            ( given_type:          types::Type,
	      given_typevar_ref:   types::Typevar_Ref,
              given_fn_nesting:    Int,			# Count of enclosing fun/fn lexical scopes.
              given_eq:            Bool			# TRUE if type variable must resolve to an equality type.
              
            )
            : Void
            =
            adjust_type'  given_eq  given_type
            where
		if_debugging_say "\n\nadjust_type: variable ";
                debug_unparse_typevar_ref  given_typevar_ref;
	        debug_unparse_type (" ==> RESOLVED_TYPE_VARIABLE ", given_type);

		fun adjust_type' this_eq (TYPE_VARIABLE_REF (tv as { id, ref_typevar as REF type_variable } ))
			=>
			case type_variable


			    USER_TYPE_VARIABLE { fn_nesting, eq, name }
				=>
				# Check if eq is compatible and propagate fn_nesting:
				# 
				if   (this_eq and not eq)               raise exception UNIFY_TYPES  NEED_EQUALITY_TYPE;
				elif (given_fn_nesting < fn_nesting)    ref_typevar := USER_TYPE_VARIABLE { fn_nesting => given_fn_nesting, eq, name };
				fi;


			    META_TYPE_VARIABLE { eq, fn_nesting }
				=>
				# Check for circularity,
                                # propagate eq and fn_nesting
				#
				if (ts::typevar_refs_are_equal (given_typevar_ref, tv))

				     raise exception UNIFY_TYPES CIRCULARITY;
				else

				     ref_typevar := META_TYPE_VARIABLE
                                               {
                                                 fn_nesting =>  int::min (given_fn_nesting, fn_nesting),
						 eq         =>  this_eq or eq
                                               };
				fi;


			    INCOMPLETE_RECORD_TYPE_VARIABLE { known_fields, eq, fn_nesting }
				=>
				# Check for circularity,
                                # propagate eq and fn_nesting
				#
				if (ts::typevar_refs_are_equal (given_typevar_ref, tv))

				     raise exception UNIFY_TYPES CIRCULARITY;
				else
				     # Do field types recursively:
				     #	
				     apply  (fn (l, t) =  adjust_type (t, given_typevar_ref, given_fn_nesting, eq))
					    known_fields;

				     ref_typevar := INCOMPLETE_RECORD_TYPE_VARIABLE
                                               {
                                                 fn_nesting =>  int::min (given_fn_nesting, fn_nesting),
						 eq         =>  this_eq or eq,
                                                 known_fields
                                               };
				fi;


			    RESOLVED_TYPE_VARIABLE  type
                                =>
                                adjust_type'  this_eq  type;


			    LITERAL_TYPE_VARIABLE { kind, ... }
				=>
				#  Check if eq is compatible 
				#
				if (this_eq and not (literal_is_equality_kind  kind))
				     raise exception UNIFY_TYPES  NEED_EQUALITY_TYPE;
				fi;


			    OVERLOADED_TYPE_VARIABLE eq'
				=>
				if   (ts::typevar_refs_are_equal (given_typevar_ref, tv))   raise exception UNIFY_TYPES CIRCULARITY;
				elif (this_eq and not eq')		                    ref_typevar := OVERLOADED_TYPE_VARIABLE this_eq;
				fi;


			    TYPE_VARIABLE_MARK _
                                =>
                                bug "unify: adjust_type: TYPE_VARIABLE_MARK";
                        esac;


		    adjust_type'  this_eq  (type as CONSTRUCTOR_TYPE (DEFINED_TYPE_CONSTRUCTOR _, args))
			=>
			adjust_type'  this_eq  (ts::head_reduce_type  type);


		    adjust_type'  this_eq  (CONSTRUCTOR_TYPE (type_constructor, args))
			=>
			case (equality_property_of_type_constructor  type_constructor)

			     CHUNK =>  apply (adjust_type' FALSE  ) args;
			     YES   =>  apply (adjust_type' this_eq) args;

			     _     =>  if this_eq   raise exception UNIFY_TYPES  NEED_EQUALITY_TYPE;
			               else         apply (adjust_type' FALSE) args;
                                       fi;
			esac;


		    adjust_type' _ WILDCARD_TYPE
                        =>
                        ();


		    # BUG? why don't these cases blow up
		    # (in equality_property_of_type_constructor)
		    # when adjust_type' is applied to arguments that
		    # are unreduced applications of DEFINED_TYPE_CONSTRUCTOR?
		    # XXX BUGGO FIXME
		    # (Is this answered by the previous comment that
                    # a DEFINED_TYPE_CONSTRUCTOR must always be expanded
                    # before calling equality_property_of_type_constructor?)

		    adjust_type' _ (TYPE_SCHEME_TYPE _)      =>  bug "adjust_type 1";
		    adjust_type' _ (TYPE_SCHEME_ARG_I     _) =>  bug "adjust_type 2";
		    adjust_type' _ _                         =>  bug "adjust_type 3";
                end;
	    end;


	# Reorder two type_variables in descending order according to the ordering
	# LITERAL_TYPE_VARIABLE > USER_TYPE_VARIABLE > OVERLOADED_TYPE_VARIABLE > INCOMPLETE_RECORD_TYPE_VARIABLE > META_TYPE_VARIABLE
	#
	fun sort_vars (  typevar_ref1 as { id => id1, ref_typevar => REF typevar1 },
                         typevar_ref2 as { id => id2, ref_typevar => REF typevar2 }
                      )
            =
	    case (typevar1, typevar2)
	         (LITERAL_TYPE_VARIABLE _, _)    => (typevar_ref1, typevar_ref2);
		 (_, LITERAL_TYPE_VARIABLE _)    => (typevar_ref2, typevar_ref1);

		 (USER_TYPE_VARIABLE _, _)       => (typevar_ref1, typevar_ref2);
		 (_, USER_TYPE_VARIABLE _)       => (typevar_ref2, typevar_ref1);

		 (OVERLOADED_TYPE_VARIABLE _, _) => (typevar_ref1, typevar_ref2);
		 (_, OVERLOADED_TYPE_VARIABLE _) => (typevar_ref2, typevar_ref1);

		 (INCOMPLETE_RECORD_TYPE_VARIABLE _, _) => (typevar_ref1, typevar_ref2);
		 (_, INCOMPLETE_RECORD_TYPE_VARIABLE _) => (typevar_ref2, typevar_ref1);

		 _ => (typevar_ref1, typevar_ref2);  #  Both META_TYPE_VARIABLE
            esac;


	# Here is the externally visible entrypoint.
	# It is just a wrapper for unify_types':
	#
	fun unify_types
            ( name1, name2,
              type1, type2,
              stack
            )
            =
	    {   type1 = ts::prune type1;	# Reduce TYPE_VARIABLE_REF (REF (RESOLVED_TYPE_VARIABLE type))  to just  type.
		type2 = ts::prune type2;	# "                                                                              ".

		if (not *debugging)

                    unify_types' (stack, type1, type2);

		else
		    verbose = case (type1, type2)
			      (TYPE_VARIABLE_REF _, TYPE_VARIABLE_REF _) => FALSE;
			      _                                            => TRUE;
			      esac;

		    if verbose
			if_debugging_say "\n\n============= unify_types/TOP ===============";
			if_debugging_say     "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n";
			if_debugging_say ("\nCalled by:  " + (string::join " " (reverse stack)) + "\n");

			debug_unparse_type("    " + name1 + ": ", type1);
			debug_unparse_type(         name2 + ": ", type2);

#    	                if_debugging_say "\n\n----------prettyprinting unify_types args------------\n";
#    		        debug_pptype(">>unify_types: type1: ", type1);
#    		        debug_pptype(">>unify_types: type2: ", type2);
		    fi;


                    unify_types' (stack, type1, type2);


		    if verbose
			if_debugging_say "\nRESULTS:\n";
			debug_unparse_type("    " + name1 + ": ", type1);
			debug_unparse_type(         name2 + ": ", type2);

#        	        if_debugging_say "\n\n----------prettyprinting unify_types results------------\n";
#        		debug_pptype(">>unify_types: type1: ", type1);
#        		debug_pptype(">>unify_types: type2: ", type2);

			if_debugging_say "\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^";
			if_debugging_say   "============= unify_types/BOTTOM ===============\n";
		    fi;
		fi;
	    }


        # The real work is unifying type variables.
        # Here we handle interactions at the next
        # level up, the various settings in which
        # type variables are embedded:
        #
	also
	fun unify_types' (stack, type1, type2)
            =
	    {   case ( ts::head_reduce_type type1,			# Mainly evaluates DEFINED_TYPE_CONSTRUCTOR type functions.
                       ts::head_reduce_type type2			# "                                                      ".
                     )

		     ( TYPE_VARIABLE_REF var1,
                       TYPE_VARIABLE_REF var2
                     )
			 =>
			 unify_type_variables (var1, var2);

		     (TYPE_VARIABLE_REF (var1 as { id, ref_typevar }),  etype2)
			 =>
			 resolve_type_variable (var1, type2, etype2);	# E.g. if var1 is META_TYPE_VARIABLE it becomes RESOLVED_TYPE_VARIABLE(type).

		     (etype1,  TYPE_VARIABLE_REF (var2 as { id, ref_typevar }))
			 =>
			 resolve_type_variable (var2, type1, etype1);	# "                                                                                    ".

		     ( CONSTRUCTOR_TYPE (type_constructor1, args1),
                       CONSTRUCTOR_TYPE (type_constructor2, args2)
                     )
			 =>
			 if (ts::type_constructors_are_equal (type_constructor1, type_constructor2) )
if_debugging_say "--------- unify_types'/CONSTRUCTOR recursive calls TOP\n";
			     paired_lists::apply unify (args1, args2)
                             where
                                 fun unify (type1, type2) = unify_types ("1", "2", type1, type2, stack);
                             end;
if_debugging_say "--------- unify_types'/CONSTRUCTOR recursive calls BOTTOM\n";
			 else
			     raise exception UNIFY_TYPES (TYPE_CONSTRUCTOR_MISMATCH (type_constructor1, type_constructor2));
			 fi;

		     # If one of the types is WILDCARD_TYPE, propagate it down into the
		     # other type to eliminate type_variables that might otherwise cause
		     # generalize_type to complain.
		     #	
		     (WILDCARD_TYPE, CONSTRUCTOR_TYPE(_, args2))
                         => 
			 {   
if_debugging_say "--------- unify_types'/WILD+CONSTRUCTOR recursive calls TOP\n";
			     apply  (fn x =  unify_types ("1", "2", x, WILDCARD_TYPE, stack))
				    args2;
if_debugging_say "--------- unify_types'/WILD+CONSTRUCTOR recursive calls BOTTOM\n";
			 };

		     (CONSTRUCTOR_TYPE(_, args1), WILDCARD_TYPE)
                         =>
			 {   
if_debugging_say "--------- unify_types'/CONSTRUCTOR+WILD recursive calls TOP\n";
			     apply  (fn x =  unify_types ("1", "2", x,  WILDCARD_TYPE, stack))
				    args1;
if_debugging_say "--------- unify_types'/CONSTRUCTOR+WILD recursive calls BOTTOM\n";
			 };

		     (WILDCARD_TYPE, _) => ();
		     (_, WILDCARD_TYPE) => ();

		     other =>  raise exception UNIFY_TYPES (TYPE_MISMATCH other);
                esac;
	    }

	also
	fun unify_type_variables (var1, var2)
            =
            {   if_debugging_say ">>unify_type_variables";
	    
                if  (not (ts::typevar_refs_are_equal (var1, var2)))
		    unify_type_variables'  (sort_vars  (var1, var2));
                fi;
            }
            where

		# Here is the beating heart of the unification logic.
		# The essential tranforms are:
		#
		#     LITERAL_TYPE_VARIABLE    can resolve to a compatible
		#                LITERAL_TYPE_VARIABLE or a monotype of its LITERAL_TYPE_VARIABLE ilk.
		#
		#     USER_TYPE_VARIABLE cannot be changed,
		#                but its fn_nesting can be reduced.
		#
		#     FLEX       can merge with another FLEX or resolve to a META.
		#
		#     META       can resolve to anything.
		#
		# Note that our (typevar_ref1, typevar_ref2) arguments are run
		# through sort_vars() before we are called.  This reduces the
                # number of cases we must consider.
		# For example, we can have (USER, META)
                # but we can never have    (META, USER).
		#
	        fun unify_type_variables'
                    (
                      typevar_ref1 as { id => id1, ref_typevar => ref_tv1 as REF type1 },
                      typevar_ref2 as { id => id2, ref_typevar => ref_tv2 as REF type2 }
                    )
                    =
		    #  ASSERT: ref_tv1 != ref_tv2 
		    case type1

		         META_TYPE_VARIABLE
                             {
                               fn_nesting => fn_nesting1,
                               eq => eq1
                             }
			     =>
			     case type2

				   META_TYPE_VARIABLE { fn_nesting=>fn_nesting2, eq=>eq2 }
				       =>
				       {   fn_nesting = int::min (fn_nesting1, fn_nesting2);
					   eq         = eq1 or eq2;

					   ref_tv1 := META_TYPE_VARIABLE { fn_nesting, eq };
					   ref_tv2 := RESOLVED_TYPE_VARIABLE (TYPE_VARIABLE_REF typevar_ref1 );
				       };

				  _ => bug "unify_Type_variables 3";
                             esac;

		         USER_TYPE_VARIABLE { fn_nesting=>fn_nesting1, eq=>eq1, name }
			     =>
			     case type2

				   META_TYPE_VARIABLE { eq=>eq2, fn_nesting=>fn_nesting2 }
				       =>
				       if (eq1 or (not eq2))
				            if (fn_nesting2 < fn_nesting1)
					        ref_tv1 := USER_TYPE_VARIABLE { fn_nesting=>fn_nesting2, eq=>eq1, name };
					    fi;
					    ref_tv2 := RESOLVED_TYPE_VARIABLE (TYPE_VARIABLE_REF typevar_ref1);
				       else
printf "src/lib/compiler/front/typechecker/types/unify-types.pkg: USER_TYPE_VARIABLE_MISMATCH A\n";
					    raise exception UNIFY_TYPES (USER_TYPE_VARIABLE_MISMATCH type1);
				       fi;

				  _ => {
printf "src/lib/compiler/front/typechecker/types/unify-types.pkg: USER_TYPE_VARIABLE_MISMATCH B\n";
                                           raise exception UNIFY_TYPES (USER_TYPE_VARIABLE_MISMATCH type1);
                                       };
			     esac;

		         INCOMPLETE_RECORD_TYPE_VARIABLE {   known_fields => known_fields1,   fn_nesting => fn_nesting1,   eq => eq1   }
			     =>
			     case type2
				    META_TYPE_VARIABLE { eq=>eq2, fn_nesting=>fn_nesting2 }
					=>
					{   fn_nesting = int::min (fn_nesting1, fn_nesting2);
					    eq         = eq1 or eq2;

					    apply (fn (l, t) = adjust_type (t, typevar_ref2, fn_nesting, eq))
						  known_fields1;

					    ref_tv1 := INCOMPLETE_RECORD_TYPE_VARIABLE { known_fields=>known_fields1, fn_nesting, eq };
					    ref_tv2 := RESOLVED_TYPE_VARIABLE (TYPE_VARIABLE_REF typevar_ref1);


					};

				    INCOMPLETE_RECORD_TYPE_VARIABLE { known_fields=>known_fields2, eq=>eq2, fn_nesting=>fn_nesting2 }
					=>
					{   fn_nesting = int::min (fn_nesting1, fn_nesting2);
					    eq         = eq1 or eq2;

					    apply   (fn (l, t) =  adjust_type (t, typevar_ref1, fn_nesting, eq))   known_fields2;
					    apply   (fn (l, t) =  adjust_type (t, typevar_ref2, fn_nesting, eq))   known_fields1;

					    ref_tv1 := INCOMPLETE_RECORD_TYPE_VARIABLE
						      { fn_nesting,
							eq,
							known_fields => (merge_fields (TRUE, TRUE, known_fields1, known_fields2))
						      };

					    ref_tv2 := RESOLVED_TYPE_VARIABLE (TYPE_VARIABLE_REF typevar_ref1);
					};
				   _ => bug "unify_type_variables 2";
                             esac;

		         LITERAL_TYPE_VARIABLE { kind, source_code_region }
			     =>
			     case type2
				   LITERAL_TYPE_VARIABLE { kind=>kind', ... }
				       =>
				       if (kind == kind')

					    ref_tv2 := RESOLVED_TYPE_VARIABLE (TYPE_VARIABLE_REF typevar_ref1);
				       else
                                            raise exception UNIFY_TYPES (LITERAL_TYPE_MISMATCH type1);
				       fi;

				  (META_TYPE_VARIABLE { eq=>e2, ... } | OVERLOADED_TYPE_VARIABLE e2)
				       =>
				       #  Check eq compatibility 
				       if (not e2 or literal_is_equality_kind kind)

					    ref_tv2 := RESOLVED_TYPE_VARIABLE (TYPE_VARIABLE_REF typevar_ref1);
				       else
                                            raise exception UNIFY_TYPES (LITERAL_TYPE_MISMATCH type1);
				       fi;

				  _ => raise exception UNIFY_TYPES (LITERAL_TYPE_MISMATCH type1);
			    esac;

		         OVERLOADED_TYPE_VARIABLE eq1
			     =>
			     case type2
				  OVERLOADED_TYPE_VARIABLE eq2
				      =>
				      if (eq1 or not eq2)    ref_tv2 := RESOLVED_TYPE_VARIABLE (TYPE_VARIABLE_REF typevar_ref1);
				      else                   ref_tv1 := RESOLVED_TYPE_VARIABLE (TYPE_VARIABLE_REF typevar_ref2);
				      fi;

				  META_TYPE_VARIABLE { eq=>eq2, fn_nesting=>fn_nesting2 }
				      =>
				      if (eq1 or (not eq2))
				            ref_tv2 := RESOLVED_TYPE_VARIABLE (TYPE_VARIABLE_REF typevar_ref1);
				      else  ref_tv1 := OVERLOADED_TYPE_VARIABLE eq2;
					    ref_tv2 := RESOLVED_TYPE_VARIABLE (TYPE_VARIABLE_REF typevar_ref1);
				      fi;

				  _ => raise exception UNIFY_TYPES  OVERLOADED_TYPE_VARIABLE_MISMATCH;
			     esac;


		        _ => bug "unify_type_variables 4";

                esac;				# fun unify_type_variables
	    end					# where

	also
	fun resolve_type_variable
                ( var as { id, ref_typevar as REF (META_TYPE_VARIABLE { fn_nesting, eq } ) },
                  type,
                  ety
                )
		=>
		{   case ety
			 WILDCARD_TYPE => ();
			 _             => adjust_type (ety, var, fn_nesting, eq);
		    esac;

		    ref_typevar := RESOLVED_TYPE_VARIABLE type;
		};

	    resolve_type_variable (var as { id, ref_typevar as REF (INCOMPLETE_RECORD_TYPE_VARIABLE { known_fields, fn_nesting, eq } ) }, type, ety)
		=>
		case ety

		     CONSTRUCTOR_TYPE (RECORD_TYPE_CONSTRUCTOR field_names, field_types)
			 =>
			 { record_fields = paired_lists::zip (field_names, field_types);

			     apply  (fn t = adjust_type (t, var, fn_nesting, eq))
                                    field_types;

			     merge_fields (FALSE, TRUE, known_fields, record_fields);

			     ref_typevar := RESOLVED_TYPE_VARIABLE type;
			 };

		     WILDCARD_TYPE	#  propagate WILDCARD_TYPE to the fields 
			 =>
			 apply  (fn (lab, type) =  unify_types ("1", "2", WILDCARD_TYPE, type, ["resolve_type_variable"]))
				known_fields;

		    _ => raise exception UNIFY_TYPES (TYPE_MISMATCH (TYPE_VARIABLE_REF (var), ety));
		esac;


	    resolve_type_variable (var as { id, ref_typevar as REF (i as OVERLOADED_TYPE_VARIABLE eq) }, type, ety)
		=>
		{  adjust_type (ety, var, infinity, eq);
		   ref_typevar := RESOLVED_TYPE_VARIABLE type;
		};

	    resolve_type_variable (var as { id, ref_typevar as REF (i as LITERAL_TYPE_VARIABLE { kind, ... } ) }, type, ety)
                =>
	        case ety
		     WILDCARD_TYPE => ();
		    _ => if   (resolve_overloaded_literals::is_literal_type (kind, ety))

                              ref_typevar := RESOLVED_TYPE_VARIABLE type;
			 else
                              raise exception UNIFY_TYPES (LITERAL_TYPE_MISMATCH i);		# Should return the type for error msg. XXX BUGGO FIXME
                         fi;
                esac;   

	    resolve_type_variable ({ id, ref_typevar as REF (i as USER_TYPE_VARIABLE _) }, _, ety)
                =>
	        case ety
		     WILDCARD_TYPE => ();
		     _ => {
printf "src/lib/compiler/front/typechecker/types/unify-types.pkg: USER_TYPE_VARIABLE_MISMATCH C\n";
                              raise exception UNIFY_TYPES (USER_TYPE_VARIABLE_MISMATCH i);	# Should return the type for error msg. XXX BUGGO FIXME.
			  };
                esac;

	    resolve_type_variable ({ id, ref_typevar as REF (RESOLVED_TYPE_VARIABLE _) }, _, _) =>  bug "resolve_type_variable: RESOLVED_TYPE_VARIABLE";
	    resolve_type_variable ({ id, ref_typevar as REF (TYPE_VARIABLE_MARK     _) }, _, _) =>  bug "resolve_type_variable: TYPE_VARIABLE_MARK";
        end 

	# merge_fields (extra1, extra2, fields1, fields2):
	#
	#    This function merges the 2 sorted field lists.  Fields occurring
	# in both lists have their types unified.  If a field occurs in only
	# one list, say fields { i } then if extra { i } is TRUE, a unify_types
	# error is raised.

	also
	fun merge_fields (extra1, extra2, fields1, fields2)
            =
	    {   fun extra allowed t
                    =
		    if   (not allowed)
		         raise exception UNIFY_TYPES  RECORD_FIELD_LABELS_MISMATCH;
		    else t;
                    fi;
	    
                fieldwise (   extra extra1,
                              extra extra2, 
			      (fn (t1, t2) =  { unify_types ("1", "2", t1, t2, ["unify_types::merge_fields"]); t1;}),
			      fields1,
                              fields2
                          );
	    };

    end;	#  local 
};		#  package unify_types 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1997 Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
