## make7-grammar-actions.pkg -- Semantic actions .make6 file syntax grammar.
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6


##                   "Computer language design is just
##                    like a stroll in the park.
##
##                   "Jurassic Park, that is."
##
##                                -- Larry Wall in <1994Jun15.074039.2654@netlabs.com>



api Make7_Grammar_Actions {

    Context
	=
	anchor_dictionary::Path_Root;

    Source_Code_Region
	=
	source_map::Source_Code_Region;

    Ml_Symbol;
    Cm_Symbol;
    Cm_Ilk;

    Cm_Version
	=
	version::Version;

					# inter_library_dependency_graph	is from   src/app/make7/depend/inter-library-dependency-graph.pkg

    Library = inter_library_dependency_graph::Library;

    Privilege_Spec;
    Aexp;
    Expression;

    Members;			#  Still conditional 
    Exports;			#  Still conditional 

    Tool_Option;
    Tool_Index;

    Plaint_Sink = String -> Void;

    make_tool_index:  Void -> Tool_Index;

    #  Getting elements of primitive types (pathnames and symbols) 

    file_native
	:
	( String,
	  Context,
	  Plaint_Sink
	)
	->
	anchor_dictionary::Basename;

    file_standard
	:
	make7_state::Make7_State
	->
	( String,
	  Context,
	  Plaint_Sink
	)
	->
	anchor_dictionary::Basename;

    cm_version
	:
	( String,
	  Plaint_Sink
	)
	->
	Cm_Version;

    cm_symbol:     String -> Cm_Symbol;

    my_package:  String -> Ml_Symbol;
    my_api:  String -> Ml_Symbol;
    my_g:    String -> Ml_Symbol;
    my_generic_api:     String -> Ml_Symbol;

    ilk:         Cm_Symbol -> Cm_Ilk;

    #  Getting the full analysis for a library/freezefile 

    make_virtual_library
	:
	{ path:       anchor_dictionary::File,
	  privileges: Privilege_Spec,

	  exports: Exports,
	  members: Members,

	  make7_state:  make7_state::Make7_State,
	  this_lib:     Null_Or( anchor_dictionary::File ),
	  primordial_make7file: Library
	}
	-> Library;


    make_real_library
	:
	{ path:       anchor_dictionary::File,
	  privileges: Privilege_Spec,

	  exports: Exports,
	  version: Null_Or( Cm_Version ),

	  make7_state:  make7_state::Make7_State,
	  members:     Members,
	  primordial_make7file: Library
	}
	-> Library;

    #  Assembling privilege lists: 

    initial_privilege_spec:  Privilege_Spec;

    require:  (Privilege_Spec, Cm_Symbol, Plaint_Sink) -> Privilege_Spec;
    wrap:     (Privilege_Spec, Cm_Symbol, Plaint_Sink) -> Privilege_Spec;

    #  Constructing member collections: 
    empty_members:  Members;

    make_member
       :
       { make7_state: make7_state::Make7_State,

	 recursive_parse
	     :
	     Null_Or( anchor_dictionary::File )
	     ->
	     ( anchor_dictionary::File,
               Null_Or( version::Version )
             , anchor_dictionary::Renamings	# MUSTDIE
             )
	     ->
	     Library,

	 load_plugin: anchor_dictionary::Path_Root -> String -> Bool
       }
       ->
       {    name:   String,
	    make_path: Void -> anchor_dictionary::Basename,

	    library: (anchor_dictionary::File, Source_Code_Region),
	    ilk:     Null_Or( Cm_Ilk ),

	    tool_options:    Null_Or(  List(  Tool_Option ) ),
	    local_index: Tool_Index,

	    context: anchor_dictionary::Path_Root
       }
       -> Members;

    members:  (Members, Members) -> Members;

    guarded_members:  (Expression, ((Members, Members)), (String -> Void)) -> Members;

    error_member:  (Void -> Void) -> Members;

    #  Constructing symbol sets: 

    export:  (Ml_Symbol, Plaint_Sink) -> Exports;

    union:         (Exports, Exports) -> Exports;
    difference:    (Exports, Exports) -> Exports;
    intersection:  (Exports, Exports) -> Exports;

    export_sourcefile:  (Null_Or( anchor_dictionary::File ), Plaint_Sink) -> Exports;
    export_library:     (Null_Or( anchor_dictionary::File ), Plaint_Sink) -> Exports;

    export_freezefile
       :
       ( anchor_dictionary::File,
	 Plaint_Sink,
	 { hasoptions: Bool,
	   elab:       Void -> Members,
	   this_lib:   Null_Or( anchor_dictionary::File )
	 }
       )
       ->
       Exports;

    #  Constructing export lists 
    empty_exports:  Exports;
    guarded_exports:  (Expression, ((Exports, Exports)), Plaint_Sink) -> Exports;
    default_library_exports:  Exports;
    error_export:  (Void -> Void) -> Exports;

    #  Groups of operator symbols (to make grammar smaller) 
    Addsym = PLUS  | MINUS;
    Mulsym = TIMES | DIV | MOD;

    Eqsym   = EQ | NE;
    Ineqsym = GT | GE | LT | LE;
#    type Addsym;
#
#    my PLUS:   Addsym;
#    my MINUS:  Addsym;
#    
#    type Mulsym;
#    my TIMES:  Mulsym;
#    my DIV:    Mulsym;
#    my MOD:    Mulsym;
#
#    type Eqsym;
#    my EQ:  Eqsym;
#    my NE:  Eqsym;
#
#    type Ineqsym;
#    my GT:  Ineqsym;
#    my GE:  Ineqsym;
#    my LT:  Ineqsym;
#    my LE:  Ineqsym;



    #  Arithmetic (number-valued) expression 

    number:  Int -> Aexp;

    variable:  make7_state::Make7_State -> Cm_Symbol -> Aexp;

    add:  (Aexp, Addsym, Aexp) -> Aexp;
    mul:  (Aexp, Mulsym, Aexp) -> Aexp;

    sign:  (Addsym, Aexp) -> Aexp;

    negate:  Aexp -> Aexp;



    #  (bool-valued) expressions 

    ml_defined:  Ml_Symbol -> Expression;

    cm_defined:  make7_state::Make7_State -> Cm_Symbol -> Expression;

    conj:  (Expression, Expression) -> Expression;
    disj:  (Expression, Expression) -> Expression;

    beq:  (Expression, Eqsym, Expression) -> Expression;
    not:  Expression -> Expression;

    ineq:  (Aexp, Ineqsym, Aexp) -> Expression;
    eq:    (Aexp,   Eqsym, Aexp) -> Expression;

    # Tool options 
    string:   { name: String,   make_path: Void -> anchor_dictionary::Basename } -> Tool_Option;
    subopts:  { name: String,   opts:   List( Tool_Option )                     } -> Tool_Option;
};



package make7grammar_actions
:
Make7_Grammar_Actions					# Make7_Grammar_Actions	is from   src/app/make7/semant/make7-grammar-actions.pkg
=
package {

    package em  =  error_message;			# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package lg  =  inter_library_dependency_graph;	# inter_library_dependency_graph	is from   src/app/make7/depend/inter-library-dependency-graph.pkg
    package src =  source_file_collection;		# source_file_collection		is from   src/app/make7/semant/source-file-collection.pkg

    Context = anchor_dictionary::Path_Root;		# anchor_dictionary			is from   src/app/make7/paths/anchor-dictionary.pkg

    Source_Code_Region
        =
        source_map::Source_Code_Region;			# source_map				is from   src/lib/compiler/front/basics/source/source-map.pkg

    Ml_Symbol  =  symbol::Symbol;			# symbol				is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
    Cm_Symbol  =  String;
    Cm_Ilk     =  String;
    Cm_Version =  version::Version;			# version				is from   src/app/make7/semant/version.pkg

    Library    =  lg::Library;

    Privilege_Spec
         =
         {   required_privileges: lg::Privileges,
             wrapped_privileges:  lg::Privileges
         };

    Source_File_Collection
        =
        src::Source_File_Collection;

							# symbol_map				is from   src/app/make7/util/symbolmap.pkg
							# private_tools				is from   src/app/make7/tools/main/private-tools.pkg
    Exports
        =
        Source_File_Collection
        ->
        symbol_map::Map (Source_File_Collection -> Void); 

    Aexp       = Source_File_Collection -> Int;
    Expression = Source_File_Collection -> Bool;

    Members
        =
        (Source_File_Collection,   Null_Or( anchor_dictionary::File ))
        ->
        src::Source_File_Collection;

    Tool_Option    =  private_tools::Tool_Option;
    Tool_Index =  private_tools::Index;
    make_tool_index
        =
        private_tools::make_index;

    Plaint_Sink = String -> Void;

    fun save_eval (expression, dictionary, error)
        =
	expression dictionary
	except
            exn =  { error ("expression raises exception: " + exceptions::exception_message exn);
	             FALSE;
                   };					# exceptions	is from   src/lib/std/exceptions.pkg


    fun file_native (spec, path_root, plaint_sink)
        =
	anchor_dictionary::from_native
            { plaint_sink }
            { path_root, spec };


    fun file_standard (make7_state: make7_state::Make7_State) (spec, path_root, plaint_sink)
        =
	anchor_dictionary::from_standard
            { anchor_dictionary => make7_state.make7_session.anchor_dictionary,
              plaint_sink
            }
	    { path_root, spec };
							# make7_state	        is from   x
							# anchor_dictionary	is from   src/app/make7/paths/anchor-dictionary.pkg

    fun cm_symbol symbol
        =
        symbol;


    fun cm_version (s, error)
        =
	case (version::from_string s)			# version		is from   src/app/make7/semant/version.pkg
	  
	     THE v =>  v;
	     NULL  =>  { error "ill-formed version specification"; version::zero;};
        esac;

    my_package   =   symbol::make_package_symbol;	# symbol		is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
    my_api   =   symbol::make_api_symbol;
    my_g     =   symbol::make_generic_symbol;
    my_generic_api      =   symbol::make_generic_api_symbol;

    fun ilk string
        =
        string::map char::to_lower string;

    fun apply_to mc e
        =
        e mc;

    fun sgl2sll sublibraries
        =
        {   fun same_sublibrary (p, _
                                     , _	# MUSTDIE
                                     )
                                (p', _
                                      , _	# MUSTDIE
                                      ) 
                =
                anchor_dictionary::compare (p, p') == EQUAL;


	    fun add (x, l)
                =
		if (list::exists (same_sublibrary x) l)       l;
                else                                      x ! l;
                fi;

	    fun one_sg (x as (_, library_thunk
                                              , _	# MUSTDIE
                                              ), l)
		=
		case (library_thunk ())
		  
		     lg::LIBRARY { real_or_virtual, sublibraries, ... }
                         =>
		         case real_or_virtual
		           
		              lg::VIRTUAL _ =>  fold_right add l sublibraries;
		              _             =>  add (x, l);
                         esac;

		   _ => l;
                esac;
	
	    fold_right one_sg [] sublibraries;
	};


    #  Filter out unused stuff and thunkify the library. 
    #
    fun filter_and_thunkify_sublibrary_list (sgl, imp_syms)
        =
        {   # Add fake package "<Pervasive>"
	    # so that we are sure not to lose
	    # the primordial_make7file when filtering:

	    ss = symbol_set::add (imp_syms, pervasive_symbol::pervasive_package_symbol);

	    fun add ((_, lg::ERROR_LIBRARY
                                          , _	# MUSTDIE
                                          ), l)
                    =>
                    l;

	        add ((p, g as lg::LIBRARY { o7_views_by_name, ... }
                                                          , rb	# MUSTDIE
                                                          ), l)
		    =>
		    {   fun defined_here symbol
			    =
			    symbol_map::contains_key (o7_views_by_name, symbol);

			if   (symbol_set::exists defined_here ss)
			    
			     (p, fn () = g
                                          , rb	# MUSTDIE
                                         ) ! l;
			else
			     l;
                        fi;
		    };
            end;
	
	    fold_right add [] sgl;
	};

    \/ = string_set::union;
    #
    infix val  \/ ;

    fun get_exports (mc, e)
        =
	symbol_map::keyed_fold_left
            (fn (symbol, c, symbol_set) =   { c mc;   symbol_set::add (symbol_set, symbol); })
	    symbol_set::empty
	    (apply_to  mc  e);


    # This is the grammar action function for .make6 rules starting with 'group'.
    # Construct a new virtual library:
    #
    fun make_virtual_library
        { path       => library_path,
	  privileges,
	  exports,
	  members,
	  make7_state,
	  this_lib,
	  primordial_make7file
	}
        =
        {   mc =  apply_to  (src::implicit  make7_state  primordial_make7file,  this_lib)  members;

	    filter =  get_exports (mc, exports);

            # Fetch pervasive package from init library
            # by looking up the symbol "<Pervasive>" in it:
	    #
	    my pfsbn    #  "pervasive far source/o7-file node" ...? 
                =
                {   my { o7_views_by_name, ... }
                        =
			case primordial_make7file
			  
			     lg::LIBRARY x     => x;
			     lg::ERROR_LIBRARY => em::impossible "make7-grammar-actions.pkg: group: bad init library";
                        esac;
		
		    #1 (the (symbol_map::get (o7_views_by_name, pervasive_symbol::pervasive_package_symbol)));
		};
	                                                             

            src::make_index (make7_state, library_path, mc);


	    my (exports, rp, isl)
		=
		src::build (library_path, mc, filter, make7_state, pfsbn ());


	    sublibraries
                =
                filter_and_thunkify_sublibrary_list (src::sublibraries mc, isl);

	    my {   required_privileges => rp',
                    wrapped_privileges  => wr
                }
                =
                privileges;
	

	    if   (not (string_set::is_empty wr))
	         
	         em::impossible "virtual library with wrapped privileges";
            fi;

	    lg::LIBRARY {

                o7_views_by_name =>  exports,
		real_or_virtual  =>  lg::VIRTUAL { sublibraries,
				                   owner        => this_lib
				                 },

		required_privileges  => rp' \/ rp \/ wr,
		library_path,

		sources      =>  src::sources mc,
		sublibraries =>  sgl2sll sublibraries
	    };
	};

    # This is the grammar action function called by
    # .make6 rules starting with 'library'.
    # XXX BUGGO FIXME should be renamed to makeFreezefile or such.
    #
    fun make_real_library
            { path       => library_path,
	      privileges,
	      exports,
	      members,
	      version,
	      make7_state,
	      primordial_make7file

	    }
        =
        {   mc =  apply_to (
                      src::implicit make7_state primordial_make7file,
                      THE library_path
                  )
                  members;

	    filter = get_exports (mc, exports);

            # Fetch pervasive package from init library
            # by looking up the symbol "<Pervasive>" in it:
            #
	    pfsbn
                =
                {   my { o7_views_by_name, ... }
                        =
			case primordial_make7file
			  
			     lg::LIBRARY x     =>  x;
			     lg::ERROR_LIBRARY =>  em::impossible "make7-grammar-actions.pkg: lib: bad init library";
                        esac;
		
		    #1 (the (symbol_map::get ( o7_views_by_name,
                                               pervasive_symbol::pervasive_package_symbol
                       )    )                );
		};

            src::make_index (make7_state, library_path, mc);

	    my (exports, rp, isl)
                =
                src::build (library_path, mc, filter, make7_state, pfsbn ());

	    sublibraries
                =
                filter_and_thunkify_sublibrary_list (src::sublibraries mc, isl);

	    my {   required_privileges => rp',
                    wrapped_privileges => wr    }   =   privileges;
	
	    lg::LIBRARY {

                o7_views_by_name =>  exports,

		real_or_virtual
                    =>
                    lg::REAL {   version,
				 frozen_or_thawed
                                     =>
                                     lg::THAWED
                                         {
                                           sublibraries,
					   wrapped_privileges => wr
					 }
			     },

		required_privileges  => rp' \/ rp \/ wr,
		library_path,

		sources   => src::sources mc,
		sublibraries   => sgl2sll sublibraries
	    };
	};

    stipulate

	is_member = string_set::member;

	fun prevent_duplicate_privileges ( { required_privileges, wrapped_privileges }, privilege_name, error)
            =
	    if  (is_member (required_privileges, privilege_name) or
                 is_member (wrapped_privileges,  privilege_name)
            )
                 error ("duplicate privilege name: " + privilege_name);
	    fi;
    herein
	initial_privilege_spec
            =
            { required_privileges =>  string_set::empty,
	      wrapped_privileges  =>  string_set::empty
            };

	fun require (a as ( { required_privileges, wrapped_privileges }, s, _))
            =
	    {   prevent_duplicate_privileges a;

	        {   required_privileges => string_set::add (required_privileges, s),
                    wrapped_privileges
                };
            };

	fun wrap (a as ( { required_privileges, wrapped_privileges }, s, _))
            =
	    {   prevent_duplicate_privileges a;

	        {   required_privileges,
                    wrapped_privileges  => string_set::add (wrapped_privileges, s)
                };
            };
    end;


    fun empty_members (dictionary, _)
        =
        dictionary;


    fun make_member
            { make7_state, recursive_parse, load_plugin }
            args
            (dictionary, this_lib)
        =
        {   source_file_collection
                =
                src::expand_one

                    { make7_state,
		      recursive_parse  => recursive_parse this_lib,
		      load_plugin
		    }

		    args;

						# library_source_index	is from   src/app/make7/semant/library-source-index.pkg
	    error
                =
                library_source_index::error
                    make7_state.library_source_index
                    args.library;

	    fun error0 s
                =
                error em::ERROR s em::null_error_body;
	
	    src::sequential (dictionary, source_file_collection, error0);
	};


    fun members (m1, m2) (dictionary, this_lib)
        =
        m2 (m1 (dictionary, this_lib), this_lib);


    fun guarded_members (c, (m1, m2), error) (dictionary, this_lib)
        =
        if   (save_eval (c, dictionary, error))
	     m1 (dictionary, this_lib);
        else m2 (dictionary, this_lib); fi;

    fun error_member thunk (dictionary, _)
        =
        {   thunk ();
            dictionary;
        };

    fun symerr s
        =
        cat [  "exported ",
		   symbol::name_space_to_string (symbol::name_space s),
		   " not defined: ",
		   symbol::name s
		];

    fun export (s, error) dictionary
        =
        {   fun check final_env
                =
                if   (src::ml_find final_env s)
	             ();
	        else error (symerr s);fi;
	
	    symbol_map::singleton (s, check);
	};


    fun union (x, y) dictionary
        =
        symbol_map::union_with #1 (x dictionary, y dictionary);


    fun difference (x, y) dictionary
        =
        {   ymap = y dictionary;

	    fun in_y (s, _)
                =
                symbol_map::contains_key (ymap, s);
	
	    symbol_map::keyed_filter (not o in_y) (x dictionary);
	};

    fun intersection (x, y) dictionary
        =
        symbol_map::intersect_with #1 (x dictionary, y dictionary);


    stipulate

	fun with_checkers (ss, error)
            =
            {   fun add1 (s, m)
                    =
                    { fun check final_env
                            =
			    if   (src::ml_find final_env s)
                                 ();
			    else error (symerr s);fi;
		    
			symbol_map::set (m, s, check);
		    };
	    
		symbol_set::fold_left add1 symbol_map::empty ss;
	    };

	fun exportfile f (fopt, error: String -> Void) (source_file_collection: Source_File_Collection)
            =
            with_checkers (f (source_file_collection, fopt, error), error);
    herein
        export_sourcefile = exportfile src::sourcefile_exports;
	export_library    = exportfile src::library_exports;

	fun export_freezefile (p, error, { hasoptions, elab, this_lib } ) source_file_collection
            =
            {   fun elab' ()
                    =
                    elab () (src::empty_collection, this_lib);

		raw   =   src::freezefile_exports (source_file_collection, p, error, hasoptions, elab');
	    
		with_checkers (raw, error);
	    };
    end;


    fun empty_exports source_file_collection
        =
        symbol_map::empty;


    fun guarded_exports (c, (e1, e2), error) source_file_collection
        =
        if   (save_eval (c, source_file_collection, error))
	     e1 source_file_collection;
	else e2 source_file_collection;fi;


    fun default_library_exports source_file_collection
        =
        union ( export_sourcefile (NULL, fn s => (); end ),
                export_library    (NULL, fn s => (); end )
              )
	      source_file_collection;


    fun error_export thunk source_file_collection
        =
        {   thunk ();
            symbol_map::empty;
        };

    Addsym = PLUS  | MINUS;
    Mulsym = TIMES | DIV | MOD;

    Eqsym   = EQ | NE;
    Ineqsym = GT | GE | LT | LE;


    fun number i _
        =
        i;


    fun variable make7_state v e
        =
        src::num_find make7_state e v;


    fun add (e1, PLUS,  e2) e   =>   e1 e + e2 e;
        add (e1, MINUS, e2) e   =>   e1 e - e2 e;
    end;


    fun mul (e1, TIMES, e2) e   =>   e1 e * e2 e;
        mul (e1, DIV,   e2) e   =>   e1 e / e2 e;
        mul (e1, MOD,   e2) e   =>   e1 e % e2 e;
    end;


    fun sign (PLUS,  ex) e   =>   ex e;
        sign (MINUS, ex) e   =>   -(ex e);
    end;


    fun negate ex e
        =
        -(ex e);


    fun ml_defined             s e   =   src::ml_find            e s;
    fun cm_defined make7_state s e   =   src::cm_find make7_state e s;

    fun conj (e1, e2) e   =   e1 e and e2 e;
    fun disj (e1, e2) e   =   e1 e or  e2 e;


    fun beq (e1: Expression, EQ, e2) e   =>   e1 e == e2 e;
        beq (e1, NE, e2) e               =>   e1 e != e2 e;
    end;


    fun not ex e
        =
        bool::not (ex e);


    fun ineq (e1, LT, e2) e   =>   e1 e <  e2 e;
	ineq (e1, LE, e2) e   =>   e1 e <= e2 e;
	ineq (e1, GT, e2) e   =>   e1 e >  e2 e;
	ineq (e1, GE, e2) e   =>   e1 e >= e2 e;
    end;


    fun eq (e1: Aexp, EQ, e2) e   =>   e1 e == e2 e;
        eq (e1, NE, e2)       e   =>   e1 e != e2 e;
    end;

    string  = private_tools::STRING;
    subopts = private_tools::SUBOPTS;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
