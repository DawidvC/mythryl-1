#
# This implements a transaction log.  This is used
# for undoable data structures.
#
# -- Allen Leung


package TransactionLog:  TRANSACTION_LOG =
pkg
   exception TransactionLog

   type version    = Int
   version     = REF 0
   log         = REF [] :  Ref(
                                  List(
				      version
				      *
				      Ref (
                                          List {
                                              rollback:  version -> Void,
					      commit:    version -> Void
				          }
                                      )
                             )    )
   fun add_chunk f =
       case *log of
	  (ver, trail) . _ => trail := f . *trail 
       |  []             => raise exception TransactionLog

   fun init () = (version := 0; log := [])

   fun begin () =
   let new_ver = *version+1
   in  version := new_ver;
       log := (new_ver, REF []) . *log
   end

   fun abort () =
   let old_ver = *version - 1
   in  case *log of
	  (_, REF trail) . rest => 
	     (apply (fn { rollback, ... } => rollback old_ver) trail;
              version := old_ver;
	      log := rest) 
       |  []                  => raise exception TransactionLog
   end

   fun commit () =
   let old_ver = *version - 1
   in  case *log of
	  (_, REF trail) . rest => 
	     (apply (fn { commit, ... } => commit old_ver) trail;
              version := old_ver;
	      log := rest) 
       |  []      => raise exception TransactionLog
   end
end

