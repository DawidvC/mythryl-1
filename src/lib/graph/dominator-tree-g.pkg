# dominator-tree-g.pkg 
# Computation of the dominator tree representation from the
# control flow graph.  I'm using the old algorithm by Lengauer and Tarjan.
#
# Note: to deal with control_flow_graph with endless loops,
# by default we assume instructions are postdominated by STOP. 
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6


###                    "God could not be everywhere, and
###                     therefore he made mothers."
###
###                                   -- Rudyard Kipling      


# We get invoked from:
#
#     src/lib/compiler/lower/frequencies/estimate-loop-probabilities-g.pkg

generic package dominator_tree_g (
    graph_guts:  Graph_Guts					# Graph_Guts		is from   src/lib/graph/graph-guts.api
)
: (weak)  Dominator_Tree					# Dominator_Tree	is from   src/lib/graph/dominator-tree.api

{
    package gi      = graph_guts;
    package g       = graph;					# graph			is from   src/lib/graph/graph.pkg
    package rev     = reversed_graph_view;			# reversed_graph_view	is from   src/lib/graph/revgraph.pkg
    package a       = rw_vector; 
    package node_set= bit_set;					# bit_set		is from   src/lib/compiler/lower/library/bitset.pkg

    exception DOMINATOR;

    fun single_entry_of (g::GRAPH g)
	=
	case (g.entries ())
	  
	    [e] => e;
	   _ => raise exception DOMINATOR;
	esac;

    Node = g::Node_Id;

    Dom_Info (N, E, G)
	= 
	INFO 
	{ cfg:         g::Graph( N, E, G ),  
	  edge_label:  String,
	  levels_map:  rw_vector::Rw_Vector( Int ),
	  preorder:    Ref( Null_Or( rw_vector::Rw_Vector( Int ) ) ),
	  postorder:   Ref( Null_Or( rw_vector::Rw_Vector( Int ) ) ),
	  entry_pos:   Ref( Null_Or( rw_vector::Rw_Vector( Int ) ) ),
	  max_levels:  Ref( Int )
	};

    Dominator_Tree     (N,E,G) =  g::Graph (N, Void, Dom_Info(N,E,G));
    Postdominator_Tree (N,E,G) =  g::Graph (N, Void, Dom_Info(N,E,G));

    fun graph_info (g::GRAPH dom) :  Dom_Info( N, E, G )
	=
	dom.graph_info; 

    fun cfg (g::GRAPH dom)
	=
	{   my INFO { cfg, ... } = dom.graph_info;
	    cfg;
	};

    fun max_levels (g::GRAPH dom)
	= 
	{   my INFO { max_levels, ... } = dom.graph_info;

	    *max_levels;
	};


    # This is the main Lengauer/Tarjan algorithm
    #
    fun tarjan_lengauer (name, edge_label) (orig_cfg, cfg'' as (g::GRAPH cfg))
	=
	{   nnn         = cfg.order ();
	    mmm         = cfg.capacity ();
	    r           = single_entry_of cfg'';
	    in_edges    = cfg.in_edges;
	    next        = cfg.next;
	    dfnum       = a::make_rw_vector (mmm, -1);
	    vertex      = a::make_rw_vector (nnn, -1); 
	    parent      = a::make_rw_vector (mmm, -1);  
	    bucket      = a::make_rw_vector (mmm, []) : Rw_Vector(  List(  Node ) );
	    semi        = a::make_rw_vector (mmm, r);  
	    ancestor    = a::make_rw_vector (mmm, -1); 
	    idom        = a::make_rw_vector (mmm, r); 
	    samedom     = a::make_rw_vector (mmm, -1);
	    best        = a::make_rw_vector (mmm, -1);
	    max_levels  = REF 0;
	    levels_map   = a::make_rw_vector (mmm,-1000000);
	    dom_info    = INFO { cfg        => orig_cfg, 
				    edge_label,
				    levels_map,
				    preorder   => REF NULL,
				    postorder  => REF NULL,
				    entry_pos   => REF NULL,
				    max_levels 
				  };

	    my  dom as g::GRAPH domtree
                =
                gi::graph (name, dom_info, nnn);

	    # step 1 
	    # Initialize semi dominators and parent map

	    fun dfs (p, n, nnn)
		=
		if   (a::get (dfnum, n) == -1)
                    
		     a::set (dfnum, n, nnn);
		     a::set (vertex, nnn, n);
		     a::set (parent, n, p);
		     dfs_succ (n, next n, nnn+1);
		else
                     nnn;
                fi

	    also
            fun dfs_succ (p,[], nnn)
                    =>
                    nnn;

	        dfs_succ (p, n ! ns, nnn)
                    =>
                    dfs_succ (p, ns, dfs (p, n, nnn));
            end 

	    also
            fun dfs_all (n ! ns, nnn)
                    =>
                    dfs_all (ns, dfs(-1, n, nnn));

	        dfs_all([], nnn)
                    =>
                    ();
            end;

	    non_roots
                =
                list::fold_right 
		    (fn ((r', _), l)
                        =
                        if   (r != r'   )   r' ! l;
                                       else        l;   fi)
                    []
		    (cfg.nodes ());

	    dfs_all (non_roots, dfs(-1, r, 0));


     #       fun pr s = print (s + "\n")
     #       fun dumpArray title a = 
     #          pr (title + ": " +
     #                      string::cat (a::fold_right 
     #                         (fn (i, s) => int::to_string i ::( ) ! s) [] a))
     #
     #       pr("root = " + int::to_string r)
     #       dumpArray "vertex" vertex
     #       dumpArray "dfnum" dfnum
     #       dumpArray "parent" parent
     #       Msg::printMessages (fn _ => control_flow_graph::G.printGraph *msg::out_stream cfg)


	    fun link (p, n)
		=
		{   a::set (ancestor, n, p);
		    a::set (best, n, n);
		};

	    fun ancestor_with_lowest_semi v
		=
		{   a = a::get (ancestor, v);

		    if   (a != -1   and   a::get (ancestor, a) != -1)
                        
		         b =  ancestor_with_lowest_semi a;

			 a::set (ancestor, v, a::get (ancestor, a));


			 if  (a::get (dfnum, a::get (semi, b))
                              <
			      a::get (dfnum, a::get (semi, a::get (best, v)))
                         )
			      a::set (best, v, b);
			 fi;

		    fi;

		    u = a::get (best, v); 

		    u == -1   ??   v
                              ::   u;
		};

	    # steps 2 and 3
	    # Compute vertex, bucket and semi maps 
	    #	
	    fun compute 0
                    =>
                    ();

	        compute i
		    => 
		    {   n =  a::get (vertex, i);

			p =  a::get (parent, n);

			fun compute_semi ((v, n, _) ! rest, s)
                                =>
				if   (v == n)
                                    
                                     compute_semi (rest, s);
				else
				     s'  =
                                         if  (a::get (dfnum, v)
                                              <
                                              a::get (dfnum, n)
                                         )
                                              v;
					 else
                                              a::get (semi, ancestor_with_lowest_semi (v));
                                         fi;

				     s   =
                                         if  (a::get (dfnum, s')
                                              < 
					      a::get (dfnum, s)
                                         )
                                              s';
					 else s;   fi;
				  compute_semi (rest, s); 
				fi;

			    compute_semi ([], s)
                                =>
                                s;
                        end;

			if   (p != -1)
                            
			     s = compute_semi (in_edges n, p);
			     a::set (semi, n, s);
			     a::set (bucket, s, n ! a::get (bucket, s));
			     link (p, n);

			     apply
                                 (fn v
                                     = 
				     {   y = ancestor_with_lowest_semi (v);

				         if  (a::get (semi, y)
                                              ==
                                              a::get (semi, v)
                                         )
				              a::set (idom,    v, p);
                                         else a::set (samedom, v, y);  fi;
				     })
                                 (a::get (bucket, p));

			     a::set (bucket, p,[]);
			fi;
			compute (i - 1);
		    };
            end;				# fun compute

	    compute (nnn - 1);


#	    dumpArray "semi" idom
#	    dumpArray "idom" idom


	    # Step 4:  Update dominators:
	    # 
	    fun update_idoms i
		= 
		if   (i < nnn)
                    
		     n = a::get (vertex, i);

		     if   (a::get (samedom, n) != -1) 
		         
                          a::set (idom, n, a::get (idom, a::get (samedom, n)));
		     fi;

		     update_idoms (i+1);   
		fi;

	    update_idoms 1;


#	    dumpArray "idom" idom


	    # Create the nodes/edges
            # of the dominator tree:
	    #
	    fun build_graph (i, max_level)
                =
		if (i < nnn)
                    
		     v = a::get (vertex, i);

		     domtree.add_node (v, cfg.node_info v);

		     if (v != r)
                           
			  w = a::get (idom, v);
			  l = a::get (levels_map, w)+1;

			  a::set (levels_map, v, l);
			  domtree.add_edge (w, v, ());

			  build_graph
			    (
			      i+1,
			      l >= max_level  ??  l
					      ::  max_level
			    );  
		     else 
		          a::set (levels_map, v, 0);
			  build_graph (i+1, max_level);
		     fi;

		else
                     max_level;
                fi;

	    max = build_graph (0, 1);

	    max_levels := max+1;
	    domtree.set_entries [r];
	    #  Msg::printMessages (fn _ =  g::printGraph *msg::out_stream domtree); 
	    dom;
	};


    #  The algorithm specialized to making dominators and postdominators 

    fun make_dominator cfg
        =
        tarjan_lengauer("Dom", "dom") (cfg, cfg);

    fun make_postdominator cfg
        = 
	tarjan_lengauer("PDom", "pdom") (cfg, rev::rev_view cfg);

    #  Methods 

    # Does i immediately dominate j? 
    #
    fun immediately_dominates (g::GRAPH d) (i, j)
	=
	case (d.in_edges j)
	  
	     (k, _, _) ! _ =>  i == k;
	     _             =>  FALSE;
        esac;

    # Immediate dominator of n:
    #
    fun idom (g::GRAPH d) n
	= 
	case (d.in_edges n)
	  
	     (n, _, _) ! _ =>   n;
	     _             =>  -1;
        esac;

    # Nodes that n immediately dominates:
    #
    fun idoms (g::GRAPH d)
	=
	d.next;

    # Nodes that n dominates:
    #
    fun doms (g::GRAPH d)
	= 
	{   fun subtree (    [], s) =>  s;
	        subtree (n ! ns, s) =>  subtree (d.next n, subtree (ns, n ! s));
            end;

	    fn n =  subtree([n], []);
	};


    fun pre_post_orders (g as g::GRAPH dom)
	=
	{   my INFO { preorder, postorder, ... }
                =
                dom.graph_info;

	    # Compute the preorder/postorder numbers 
	    #
	    fun compute_them ()
		=
		{   nnn   =  dom.capacity ();

		    r =  single_entry_of g;

		    pre  =  a::make_rw_vector (nnn,-1000000);
		    post =  a::make_rw_vector (nnn,-1000000);

		    fun compute_numbering (preorder, postorder, n)
			= 
			{   a::set (pre, n, preorder);

			    my (preorder', postorder')
                                =
				compute_numbering'(preorder+1, postorder, dom.out_edges n);

			    a::set (post, n, postorder');

			    (preorder', postorder'+1);
			}

		    also
                    fun compute_numbering'(preorder, postorder,[])
                            =>
			    (preorder, postorder);

		        compute_numbering'(preorder, postorder, (_, n, _) ! es)
                            =>
			    {   my (preorder', postorder')
                                    = 
				    compute_numbering (preorder, postorder, n);

			        my (preorder', postorder')
                                    =
				    compute_numbering'(preorder', postorder', es);

			        (preorder', postorder');
			    };
                    end;

		    compute_numbering (0, 0, r) ;

		    preorder  :=  THE pre;
		    postorder :=  THE post;

		    (pre, post);
		};

	    case (*preorder, *postorder)
              
	         (THE pre, THE post) =>  (pre, post);
	         _                   =>  compute_them();
            esac;
	};

    # Level 
    #
    fun level (g::GRAPH d)
	= 
	{   my INFO { levels_map, ... }
                =
                d.graph_info;

	    fn i =  a::get (levels_map, i);
	};


    # Entry position:
    #
    fun entry_pos (g as g::GRAPH d)
	=
	{   my INFO { entry_pos, ... } = d.graph_info;

	    case *entry_pos
	      
		 THE t => t;

		 NULL
                     => 
		     {   entry =  single_entry_of g;
			 nnn   =  d.capacity ();
			 t     =  a::make_rw_vector (nnn, entry);

			 fun init (x, y)
                             = 
			     {   a::set (t, x, y);

			         apply
                                     (fn z =  init (z, y))
                                     (d.next x);
			     };

		         entry_pos := THE t;

		         apply
                             (fn z =  init (z, z))
                             (d.next entry);
		         t;
		     };
	    esac;
	};

    # Least common ancestor 
    #
    fun lca (dom as g::GRAPH d) (a, b)
	=
	{   l_a =  level dom a; 
	    l_b =  level dom b;

	    fun idom i
		=
		case (d.in_edges i)
		  
		     (j, _, _) ! _
                         =>
                         j;

		     []  =>
                         raise exception FAIL "dominator_tree: lca: idom: []";
		esac;

	    fun up_a (a, l_a) =  if  (l_a > l_b  )  up_a (idom a, l_a - 1);  else  a;   fi;
	    fun up_b (b, l_b) =  if  (l_b > l_a  )  up_b (idom b, l_b - 1);  else  b;   fi;

	    a =  up_a (a, l_a);
	    b =  up_b (b, l_b);

	    fun up_both (a, b)
                =
                if   (a == b)
                    
                     a;
                else
                     up_both (idom a, idom b);
                fi;

	    up_both (a, b);
	};

    # is x and ancestor of y in d?
    # This is true iff PREORDER (x) <= PREORDER (y) and
    #                  POSTORDER (x) >= POSTORDER (y)
    #
    fun dominates dom
	=
	{   my (pre, post)
                =
                pre_post_orders  dom;

	    fn (x, y)
		=
		{   a =  a::get (pre, x);
		    b =  a::get (post, x);
		    c =  a::get (pre, y);
		    d =  a::get (post, y);

		    a <= c  and  b >= d;
		};
	};

    fun strictly_dominates dom
	= 
	{   my (pre, post)
                =
                pre_post_orders dom;

	    fn (x, y)
		=
		{   a =  a::get (pre,  x);
		    b =  a::get (post, x);
		    c =  a::get (pre,  y);
		    d =  a::get (post, y);

		    a < c  and  b > d;
		};
	};

    fun control_equivalent (dom, pdom)
	=
	{   dom  =  dominates dom;
	    pdom =  dominates pdom;

	    fn (x, y)
                =
                dom (x, y) and pdom (y, x) or dom (y, x) and pdom (x, y);
	};

    # control equivalent partitions 
    # two nodes a and b are control equivalent iff
    #    a dominates b and b postdominates a (or vice versa) 
    # We use the following property of dominators to avoid wasteful work:
    #    If i dom j dom k and j not pdom i then
    #          k not pdom i
    # This algorithm runs in O (n)  
    #
    fun control_equivalent_partitions (g::GRAPH d, pdom)
	=
	{   postdominates = dominates pdom;

	    fun walk_dom ([], s)
                    =>
                    s;

	        walk_dom (n ! waiting, s)
		    =>
		    {   my (waiting, s, s')
                            = 
			    find_equiv (n, d.out_edges n, waiting, s,[n]);

		        walk_dom (waiting, s' ! s);
		    };
            end 

	    also
            fun find_equiv (i,[], waiting, s, s')
                    =>
                    (waiting, s, s');

	        find_equiv (i, (_, j, _) ! es, waiting, s, s')
		    =>
		    if   (postdominates (j, i))
                        
		         my (waiting, s, s')
                             =
                            find_equiv (i, es, waiting, s, j ! s');

			 find_equiv (i, d.out_edges j, waiting, s, s');
		    else
		         find_equiv (i, es, j ! waiting, s, s');
                    fi;
            end;

	    equiv_sets = walk_dom (d.entries (),[]);

	    equiv_sets;
	};


    fun levels_map (g::GRAPH dom)
	=
	{   my INFO { levels_map, ... }
                =
                dom.graph_info;

	    levels_map;
	};


    fun idoms_map (g::GRAPH dom)
	=
	{   idoms =  a::make_rw_vector (dom.capacity (),-1);

	    dom.forall_edges
                (fn (i, j, _) =  a::set (idoms, j, i));

	    idoms;
	};
};

