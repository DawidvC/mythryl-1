## config.pkg

# Compiled by:
#     src/lib/c-kit/src/variants/group.make6


#  Configuration for ANSI C



###        "I don't mind occasionally having to reinvent a wheel;
###         I don't even mind using someone's reinvented wheel occasionally.
###         But it helps a lot if it is symmetric,
###           contains no fewer than ten sides,
###           and has the axle centered.
###         I do tire of trapezoidal wheels with offset axles."
###
###                           -- Joseph Newcomer



package config: (weak)  Config {		# Config	is from   src/lib/c-kit/src/variants/config.api

    dflag = FALSE;

    package parse_control: (weak)  Parsecontrol {		# Parsecontrol	is from   src/lib/c-kit/src/variants/parse-control.api

	symbol_length 		= 256;
	typedefs_scoped		= TRUE;
	prototypes_allowed 	= TRUE;
	templates_allowed 	= FALSE;
	trailing_comma_in_enum 	= { error=>FALSE, warning=>TRUE };
	new_fundefs_allowed 	= TRUE;
	void_allowed		= TRUE;
	void_star_allowed		= TRUE;
	const_allowed		= TRUE;
	volatile_allowed		= TRUE;
	fun violation str =
	    file::write (file::stdout, "\nERROR: in ANSI C " + str + "\n");
	dkeywords               = FALSE;
	parse_directive = TRUE;   #  Chandra, 6/21/99 
	underscore_keywords = THE TRUE; #  Blume 
    };

    # See type-check-control.api for description of these flags 
    #
    package type_check_control: (weak)  Typecheckcontrol {		# Typecheckcontrol	is from   src/lib/c-kit/src/variants/type-check-control.api

	don't_convert_short_to_int = FALSE;             #  not doing dsp 
	don't_convert_double_in_usual_unary_cnv = TRUE; #  Ansic 
	enumeration_incompatibility = TRUE;             #  Ansic 
	pointer_compatibility_quals = TRUE;             #  Ansic 
	undeclared_id_error = TRUE;                     #  Ansic 
	undeclared_fun_error = TRUE;                    #  Ansic 
	convert_function_args_to_pointers = TRUE;       #  Ansic 
	storage_size_check = TRUE;                      #  Ansic 
	perform_type_checking = TRUE;                   #  Do type checking 
	iso_bitfield_restrictions = FALSE;              #  Allow char, short, long in bitfields 
	allow_enum_bitfields = TRUE;                    #  Allow enums in bitfields 
	allow_non_constant_local_initializer_lists = FALSE; #  Ansic 
	partial_enum_error = FALSE;                     #  permissive 
	partial_enums_have_unknown_size = FALSE;        #  permissive 
    };

}; #  package Config 


## Copyright (c) 1998 by Lucent Technologies 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
