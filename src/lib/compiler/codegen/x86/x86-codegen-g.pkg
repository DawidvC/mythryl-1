# x86-codegen-g.pkg
#
# X86 specific backend.  This one uses the new RA8 scheme.
#
# This file supplies the rest of the compiler with
# x86-platform "low-level" (machine-dependent)
# code optimizations and transformations.
#
# We are invoked from
#
#     src/lib/compiler/codegen/x86/x86-backend-g.pkg
#
# which wraps us up together with the "high-level"
# (machine-independent) code optimizations and
# transformations to provide a complete native-code
# generation facility to the front-end of the compiler.
#
# Our generic parameters serve to encapsulate the
# differences between the Linux / *bsd / ... an the Win32
# fn-call conventions and related platform-specific issues.

# Compiled by:
#     src/lib/compiler/backend-x86.make6



###                     "There are two means of refuge from
###                      the miseries of life: music and cats."
###
###                                 -- Albert Schweitzer


 
stipulate

    fast_floating_point
        =
	low_code_control::make_bool
          (
            "fast_floating_point",
	    "whether to use the fast-fp backend (x86)"
          );

herein

    # We are invoked by:
    #
    #    src/lib/compiler/codegen/x86/x86-backend-g.pkg

    generic package  x86_codegen_g (

        package ccall_params
            :
            api {
                frame_align:  Int;

	        return_small_structs_in_regs:  Bool;
	    };

	 abi_variant:  Null_Or( String );
    )
    =
    codegen_g (						# codegen_g			is from   src/lib/compiler/codegen/main/codegen-g.pkg

        package i  =  instruction_set_x86;		# instruction_set_x86		is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package c  =  i::cells;
	package f  =  x86_control_flow_graph;		# x86_control_flow_graph	is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package r  =  x86cps_regs;			# x86cps_regs			is from   src/lib/compiler/codegen/x86/x86-fps-registers.pkg
	package cg =  controls::cg;			# controls			is from   src/lib/compiler/toplevel/main/controls.pkg

	package  machine_properties
            =
            x86_machine_properties;			# x86_machine_properties	is from   src/lib/compiler/codegen/x86/x86-machine-properties.pkg

	abi_variant      = abi_variant;


	package  client_pseudo_ops
            =
            x86client_pseudo_ops;			# x86client_pseudo_ops		is from   src/lib/compiler/codegen/x86/x86-codetree.pkg


	package  pseudo_op
            =
            x86pseudo_ops;				# x86pseudo_ops			is from   src/lib/compiler/codegen/x86/x86-codetree.pkg


	package  ext
            =
            x86_lib7codetree_ext;			#  x86-specific 


	package  fps_regs
            =
            x86cps_regs;				# x86cps_regs	is from   src/lib/compiler/codegen/x86/x86-fps-registers.pkg


	package instruction_properties
            =
            x86_instruction_semantic_properties;	# x86_instruction_semantic_properties	is from   src/lib/compiler/codegen/x86/x86-codetree.pkg


	package asm
            =
            x86asm_emitter;				# x86asm_emitter	is from   src/lib/compiler/codegen/x86/x86-codetree.pkg


	package shuffle
            =
            x86shuffle;					# x86shuffle		is from   src/lib/compiler/codegen/x86/x86-codetree.pkg


	fast_floating_point
            =
            fast_floating_point;


	package ccalls
            =
            ia32_svid_ccalls_g (			# ia32_svid_ccalls_g	is from   src/lib/compiler/lower/x86/c-calls/ia32-svid.pkg

		package codetree
                    =
                    x86codetree;			# x86codetree		is from   src/lib/compiler/codegen/x86/x86-codetree.pkg


		fun ix x
                    =
                    x;


		fast_floating_point
                    =
                    fast_floating_point;



		#  NOTE: the following need to be changed for MacOS X on Intel  XXX BUGGO FIXME

		frame_align
                    =
                    ccall_params::frame_align;


		return_small_structs_in_regs
		    =
                    ccall_params::return_small_structs_in_regs;
	    );


	package omit_frame_ptr
	    = 
	    x86_omit_frame_pointer_g (							# x86_omit_frame_pointer_g	is from   src/lib/compiler/lower/x86/omit-frameptr/x86-omit-frameptr-g.pkg

                package instruction_set = instruction_set_x86;  			# instruction_set_x86		is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	        package mem_regs=x86mem_regs;						# x86mem_regs			is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	        package control_flow_graph=x86_control_flow_graph;			# x86_control_flow_graph	is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	        mem_reg_base = THE (x86cps_regs::virtual_frame_pointer);
	    );


	spill = cpsregions::spill; 
	stack = cpsregions::stack; 

	fun error msg
            =
            lowcode_error_message::error("x86_codegen_g", msg);


											# x86cps_regs			is from   src/lib/compiler/codegen/x86/x86-fps-registers.pkg
	fun base ()  #  XXXX 
            =
	    if *cluster_annotation::use_virtual_frame_pointer  x86cps_regs::virtual_frame_pointer;
            else                                               i::cells::esp;
            fi; 


	package translate_codetree_to_target_machine
	    =
	    translate_codetree_to_x86_g (					# translate_codetree_to_x86_g	is from   src/lib/compiler/lower/x86/codetree/translate-codetree-to-x86-g.pkg

                package instruction_set_x86
                    =
                    instruction_set_x86;

		package codetree_utils
                    =
                    codetree_utils_g (							# codetree_utils_g		is from   src/lib/compiler/lower/codetree/codetree-utils-g.pkg

			package codetree = x86codetree;					# x86codetree			is from   src/lib/compiler/codegen/x86/x86-codetree.pkg

			fun hash_sext  _ _ = 0u0; 
			fun hash_rext  _ _ = 0u0;
			fun hash_fext  _ _ = 0u0; 
			fun hash_ccext _ _ = 0u0;

			#  Equality extensions 
			fun eq_sext  _ _ = FALSE;
			fun eq_rext  _ _ = FALSE;
			fun eq_fext  _ _ = FALSE;
			fun eq_ccext _ _ = FALSE;

			#  Pretty printing extensions 
			fun show_sext  _ _ = "";
			fun show_rext  _ _ = "";
			fun show_fext  _ _ = "";
			fun show_ccext _ _ = "";
		    );

		package extension_comp
                    =
                    x86_codetree_ext_comp_g (						# x86_codetree_ext_comp_g	is from   src/lib/compiler/codegen/x86/x86-codetree-ext-comp-g.pkg

			package instruction_set    =  instruction_set_x86;
			package codetree           =  x86codetree;			# x86codetree			is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
			package control_flow_graph =  x86_control_flow_graph;		# x86_control_flow_graph	is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
			package codetree_stream    =  x86codetree_stream;		# x86codetree_stream		is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
			fast_fp = fast_floating_point;
		    ); 

		package codetree_stream
                    =
                    x86codetree_stream;


		Architecture
                    =
                    PENTIUM | PENTIUM_PRO | PENTIUM_II | PENTIUM_III;


		architecture
                    =
                    REF PENTIUM;	#  Lowest common denominator 


		fun cvti2f { src, type, ref_notes }		#  'type' is always 32 for Lib7 
                    =
                    {   temp_mem
                            =
                            i::DISPLACE { base=>base(), disp=>i::IMMED 304, mem=>stack };

			{ instrs   =>  [i::move { mv_op=>i::MOVL, src, dst=>temp_mem } ],
			  temp_mem,
			  cleanup  =>  []
			};
		    };


		fast_floating_point
                    =
                    fast_floating_point;
	    );


	package jumps
	    = 
	    x86_span_dependent_jumps_g (						# x86_span_dependent_jumps_g		is from   src/lib/compiler/lower/x86/span/x86-span-dependent-jumps-g.pkg

                package instruction_set      =  instruction_set_x86;
		package machine_code_emitter =  x86_machine_code_emitter;		# x86_machine_code_emitter		is from   src/lib/compiler/codegen/x86/x86-codetree.pkg

		package asm_emitter =  x86asm_emitter;					# x86asm_emitter			is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
		package eval        =  x86codetree_eval; 
		package shuffle     =  x86shuffle;					# x86shuffle				is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	    );


	package back_patch
	    = 
	    x86_span_dependency_resolution_g (						# span_dependency_resolution_g		is from   src/lib/compiler/lower/span/span-dependency-resolution-g.pkg

                package jumps                  = jumps;
		package emitter                = x86_machine_code_emitter;
		package instruction_properties = instruction_properties;
		package control_flow_graph     = x86_control_flow_graph;		# x86_control_flow_graph		is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
		package asm                    = x86asm_emitter;			# x86asm_emitter			is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
		package code_string            = code_string;
	    );

	package register_allocation
	    = 
	    x86_register_allocation_g (							# x86_register_allocation_g		is from   src/lib/compiler/lower/x86/reg-alloc/x86-register-allocation-g.pkg

		package instruction_set        = instruction_set_x86;			# instruction_set_x86			is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
		package cb                     = cells_basis;				# cells_basis				is from   src/lib/compiler/lower/instruction/cells-basis.pkg
		package instruction_properties = instruction_properties;
		package asm                    = x86asm_emitter;			# x86asm_emitter			is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
		package control_flow_graph     = x86_control_flow_graph;		# x86_control_flow_graph		is from   src/lib/compiler/codegen/x86/x86-codetree.pkg

		package spill_heuristic
                    =
                    chow_hennessy_spill_heuristic;

											# chow_hennessy_spill_heuristic		is from   src/lib/compiler/lower/reg-alloc/chow-hennessy-spill-heuristic.pkg
											# x86asm_emitter			is from   src/lib/compiler/codegen/x86/x86-codetree.pkg

		package spill
                    =
                    register_allocation_spilling_g (					# register_allocation_spilling_g	is from   src/lib/compiler/lower/reg-alloc/register-allocation-spilling-g.pkg

			package asm                    =  x86asm_emitter;
			package instruction_properties =  instruction_properties;
		    );

		Spill_Info =  Void;

		fun before_ra _
                    =
                    x86stack_spills::init();

		fast_floating_point = fast_floating_point;

		to_int32 = int32::from_int;

		fun cache_offset r
                    =
                    i::IMMED (to_int32 (x86runtime::vreg_start
                    + 
		    unt::to_int_x (unt::(<<) (unt::from_int (r - 8), 0u2))));


		fun cache_fpoffset f
                    =
                    i::IMMED (to_int32 (x86runtime::v_fp_start
                    + 
		    unt::to_int_x (unt::(<<) (unt::from_int (f - 40), 0u3))));

		Ra_Phase
                    =
                    SPILL_PROPAGATION | SPILL_COLORING;


		Spill_Operand_Kind
                    =
                    SPILL_LOC | CONST_VAL;


		package int {

			avail     = r::avail_r;
			dedicated = r::dedicated_r;
			mem_regs   = c::regs cb::REGISTER { from=>8, to=>31, step=>1 };
			phases    = [SPILL_PROPAGATION, SPILL_COLORING];

			# We try to make unused memregs available for spilling 
			# This is necessary because the stupid code generator
			# doesn't keep track of which are being used. XXX BUGGO FIXME

			fun spill_init (register_allocation_graph::GRAPH { nodes, ... } )
			    = 
			    {   lookup = int_hash_table::get  nodes;

				fun find (r, free)
                                    =
				    if  (r >= 10)	#  note, %8 and %9 are reserved! 

				         free
                                             = 
					     case (lookup r)
                                               
						  register_allocation_graph::NODE { uses=>REF [], defs=>REF [], ... }
                                                      => 
						      cache_offset r ! free;

						  _   => free;
                                             esac;

					 find (r - 1, free);
				    else 
				       free;
                                    fi;

				free = find (31 /* X86Runtime::numVregs+8-1 */, []);

				x86stack_spills::set_available_offsets  free;
			    }; 

			get_reg_loc'
                            =
                            x86stack_spills::get_reg_loc;


			fun spill_loc { info, ref_notes, cell, id }
                            = 
			    { operand =>  i::DISPLACE { base=>base(), disp=>get_reg_loc' id, mem=>spill },
			      kind =>  SPILL_LOC
			    };

		    };			# package int


		package float {

			avail     =  r::avail_f;
			dedicated =  r::dedicated_f;
			mem_regs  =  [];
			phases    =  [SPILL_PROPAGATION];


			fun spill_init (register_allocation_graph::GRAPH { nodes, ... } )
                            = 
			    if *fast_floating_point

			         lookup = int_hash_table::get  nodes;

			         fun find (r, free)
				     =
				     if (r >= 32+8)

					  free
                                              = 
					      case (lookup r)
                                                
						   register_allocation_graph::NODE { uses=>REF [], defs=>REF [], ... }
                                                       =>
						       cache_fpoffset r ! free;

						   _   =>
                                                       free;
                                              esac;

					  find (r - 1, free);
				     else 
					free;
				     fi;

			         free =  find (63, []);

			         x86stack_spills::set_available_fpoffsets  free;
			    fi;

			fun spill_loc (s, an, loc)
                            =
			    i::DISPLACE { base=>base(), disp=>x86stack_spills::get_freg_loc loc, mem=>spill };

			fast_mem_regs = c::regs cb::FLOAT_REGISTER { from=>8, to=>31, step=>1 };
			fast_phases  = [SPILL_PROPAGATION, SPILL_COLORING];

		   };
	    ); #  x86_register_allocation_g
 
      ); #  x86_codegen_g 
end;
