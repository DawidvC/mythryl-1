## sparc-shuffle-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/sparc.make6

# We are invoked from:
#
#     src/lib/compiler/codegen/sun/sparc-codetree.pkg


generic package sparc_shuffle_g (

    instruction_set: Instruction_Set_Sparc			# Instruction_Set_Sparc	is from   src/lib/compiler/lower/sun/instruction/instruction-set-sparc.api
)

: (weak) Sparcshuffle						# Sparcshuffle	is from   src/lib/compiler/lower/sun/instruction/sparc-shuffle.api

{
    package instruction_set = instruction_set;

    package i = instruction_set;
    package w= unt32;						# unt32		is from   src/lib/std/unt32.pkg
    package shuffle = shuffle_g( i );				# shuffle_g	is from   src/lib/compiler/lower/instruction/shuffle-g.pkg
    package cb= cells_basis;					# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    Type = { tmp: Null_Or( i::Ea ),
	     dst: List( cb::Cell ),
	     src: List( cb::Cell )
	   };

    fun error msg
	=
	lowcode_error_message::error("sparc_shuffle_g", msg);

    zero_r = null_or::the (i::cells::zero_reg cb::REGISTER);

    fun move { src=>i::DIRECT rs, dst=>i::DIRECT rt }
	   => 
	   [i::arith { a=>i::OR, r=>zero_r, i=>i::REG rs, d=>rt } ];

	move { src=>i::DISPLACE { base, disp, mem }, dst=>i::DIRECT rt }
	    =>
	    [i::load { l=>i::LD, r=>base, i=>i::LAB disp, d=>rt, mem } ]; 

	move { src=>i::DIRECT rs, dst=>i::DISPLACE { base, disp, mem }}
	    => 
	    [i::store { s=>i::ST, r=>base, i=>i::LAB disp, d=>rs, mem } ]; 

	move _ => error "move";
    end;

    fun fmove { src=>i::FDIRECT fs, dst=>i::FDIRECT fd }
	    => 
	    [i::fpop1 { a=>i::FMOVD, r=>fs, d=>fd } ]; 

	fmove { src=>i::DISPLACE { base, disp, mem }, dst=>i::FDIRECT ft }
	     => 
	     [i::fload { l=>i::LDDF, r=>base, i=>i::LAB disp, d=>ft, mem } ]; 

	fmove { src=>i::FDIRECT fs, dst=>i::DISPLACE { base, disp, mem }}
	     => 
	     [i::fstore { s=>i::STDF, r=>base, i=>i::LAB disp, d=>fs, mem } ]; 

	fmove _ => error "fmove";
    end;

    shuffle = shuffle::shuffle { mv_instr => move, ea=>i::DIRECT };

    shufflefp = shuffle::shuffle { mv_instr=>fmove, ea=>i::FDIRECT };
};


