## posix-file.api

# Compiled by:
#     src/lib/std/src/Base-imp.make6




# Api for POSIX 1003.1 file system operations



###                 "I think the major good idea in Unix
###                  was its clean and simple interface:
###                  open, close, read, and write."
###
###                                  Ken Thompson 



api  Posix_File {

    eqtype User_Id;
    eqtype Group_Id;
    eqtype File_Descriptor;

    fd_to_int:     File_Descriptor -> host_int::Int;
    int_to_fd:     host_int::Int -> File_Descriptor;

    fd_to_iod:     File_Descriptor -> winix_types::io::Io_Descriptor;
    iod_to_fd:     winix_types::io::Io_Descriptor -> File_Descriptor;

    Directory_Stream;

    open_directory_stream:    String -> Directory_Stream;
    read_directory_entry:     Directory_Stream -> Null_Or( String );
    rewind_directory_stream:  Directory_Stream -> Void;
    close_directory_stream:   Directory_Stream -> Void;

    change_directory:   String -> Void;
    current_directory:  Void -> String;

    stdin:   File_Descriptor;
    stdout:  File_Descriptor;
    stderr:  File_Descriptor;

    package s:
    api {
	 Mode;
         include Bit_Flags		# Bit_Flags	is from   src/lib/std/src/bit-flags.api
                 where  Flags == Mode;

         irwxu:  Mode;
         irusr:  Mode;
         iwusr:  Mode;
         ixusr:  Mode;
         irwxg:  Mode;
         irgrp:  Mode;
         iwgrp:  Mode;
         ixgrp:  Mode;
         irwxo:  Mode;
         iroth:  Mode;
         iwoth:  Mode;
         ixoth:  Mode;
         isuid:  Mode;
         isgid:  Mode;

    };

				# We really need proper octal constant support :(  XXX BUGGO FIXME
				# How about 0666_u16 for 16-bit unsigned octal constants,
				#            077_u8  for  8-bit unsigned octal constants,
				#            037_i32 for 32-bit   signed octal constants, and so forth?

    mode_0755:   s::Mode;
    mode_0700:   s::Mode;
    mode_0666:   s::Mode;
    mode_0644:   s::Mode;
    mode_0600:   s::Mode;

    package o:
    api {
        include Bit_Flags;		# Bit_Flags	is from   src/lib/std/src/bit-flags.api

        append:    Flags;
        dsync:     Flags;
        excl:      Flags;
        noctty:    Flags;
        nonblock:  Flags;
        rsync:     Flags;
        sync:      Flags;
        trunc:     Flags;

    };

    include Posix_Common;

    openf:      ((String, Open_Mode, o::Flags)) -> File_Descriptor;
    createf:    ((String, Open_Mode, o::Flags, s::Mode)) -> File_Descriptor;
    creat:      ((String, s::Mode)) -> File_Descriptor;
    umask:      s::Mode -> s::Mode;
    link:       { old:  String, new:  String } -> Void;
    mkdir:      (String, s::Mode) -> Void;
    make_pipe: (String, s::Mode) -> Void;
    unlink:     String -> Void;
    rmdir:      String -> Void;
    rename:     { from:  String, to:  String } -> Void;
    symlink:    { old:  String, new:  String } -> Void;             #  POSIX 1003.1a 
    readlink:   String -> String;                                   #  POSIX 1003.1a 
    ftruncate:  (File_Descriptor, file_position::Int) -> Void;      #  POSIX 1003.1a 

    eqtype Device;
    word_to_dev:  host_unt::Unt -> Device;
    dev_to_word:  Device -> host_unt::Unt;

    eqtype Inode;
    word_to_ino:  host_unt::Unt -> Inode;
    ino_to_word:  Inode -> host_unt::Unt;

    package stat
      :
      api {
         Stat =
	     { ftype:  host_int::Int,
	       mode:   s::Flags,
	       inode:  Int,
	       dev:    Int,
	       nlink:  Int,
	       uid:    host_unt::Unt,
	       gid:    host_unt::Unt,
	       size:   file_position::Int,
	       atime:  time::Time,
	       mtime:  time::Time,
	       ctime:  time::Time
	     };

	 is_directory:   Stat -> Bool;
	 is_char_dev:    Stat -> Bool;
	 is_block_dev:   Stat -> Bool;
	 is_file:        Stat -> Bool;
	 is_pipe:        Stat -> Bool;
	 is_symlink:     Stat -> Bool;
	 is_socket:      Stat -> Bool;

         mode:    Stat -> s::Mode;
         inode:   Stat -> Int;
         dev:     Stat -> Int;
         nlink:   Stat -> Int;
         uid:     Stat -> User_Id;
         gid:     Stat -> Group_Id;
         size:    Stat -> file_position::Int;
         atime:   Stat -> time::Time;
         mtime:   Stat -> time::Time;
         ctime:   Stat -> time::Time;
      };

     stat:   String          -> stat::Stat;
     lstat:  String          -> stat::Stat;     #  POSIX 1003.1a 
     fstat:  File_Descriptor -> stat::Stat;

     Access_Mode = MAY_READ | MAY_WRITE | MAY_EXECUTE;
     access:  (String, List( Access_Mode )) -> Bool;

     chmod:    ((String, s::Mode)) -> Void;
     fchmod:   ((File_Descriptor, s::Mode)) -> Void;

     chown:    ((String, User_Id, Group_Id)) -> Void;
     fchown:    ((File_Descriptor, User_Id, Group_Id)) -> Void;

     utime:  (String, Null_Or { actime:  time::Time, modtime:  time::Time }) -> Void;
    
     pathconf:   ((String, String)) -> Null_Or( host_unt::Unt );
     fpathconf:  ((File_Descriptor, String)) -> Null_Or( host_unt::Unt );

  }; #  Api Posix_File 



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
