/* mem-common.ins
 *
 * This is code that is common to all three implementations of the 
 * memory management library.
 */

#ifndef _MEM_COMMON_INS_
#define _MEM_COMMON_INS_

static Addr_t	PageSize;	/* the system page size. */
static Addr_t	PageShift;	/* PageSize == (1 << PageShift) */
static Addr_t	VMSizeB;	/* The amount of virtual memory allocated */

static status_t MapMemory (heap_chunk_t *chunk, Addr_t szb);
static void UnmapMemory (heap_chunk_t *chunk);


/* InitMemory:
 *
 * Initialize the common stuff.
 *
 */
static void InitMemory ()
{
    int		i, j;

    VMSizeB = 0;
    PageSize = GETPAGESIZE();
    for (i = 1, j = 0;  i != PageSize;  i <<= 1, j++)
	continue;
    PageShift = j;

} /* end of InitMemory */


/* MEM_GetVMSize:
 *
 * Return the amount of virtual memory (in K-bytes) allocated to the heap.
 */
long MEM_GetVMSize ()
{
    return (VMSizeB / ONE_K);

} /* end of MEM_GetVMSize */


heap_chunk_t*   allocate_heap_chunk   (Word_t szb)
{
    /* Get a new memory chunk from the OS.
     * Return a pointer to the chunk descriptor,
     * or NULL on failure.
     */
    Word_t		alloc_szb;
    heap_chunk_t*	chunk;

    if ((chunk = ALLOC_HEAP_CHUNK()) == NULL) {
	Error ("unable to malloc chunk descriptor\n");
	return NULL;
    }

    alloc_szb = (szb <= BIBOP_PAGE_SZB) ? BIBOP_PAGE_SZB : RND_HEAP_CHUNK_SZB(szb);

    if (MapMemory (chunk, alloc_szb) == FAILURE) {
	FREE_HEAP_CHUNK (chunk);
	return NULL;
    }

    VMSizeB += alloc_szb;

    return chunk;

}



void   free_heap_chunk   (heap_chunk_t* chunk)
{
    if (!chunk)  	return;

    UnmapMemory( chunk );

    VMSizeB -= chunk->sizeB;

    FREE_HEAP_CHUNK ( chunk );

}

#endif /* !_MEM_COMMON_INS_ */
