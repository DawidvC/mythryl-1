## number-string.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6

###                  "One of the symptoms of an approaching nervous breakdown
###                   is the belief that one's work is terribly important."
###
###                                           -- Bertrand Russell



package number_string: (weak) Number_String {		# Number_String	is from   src/lib/std/src/number-string.api

    Radix = BINARY | OCTAL | DECIMAL | HEX;

    Real_Format
      = EXACT
      | SCI  Null_Or( Int )
      | FIX  Null_Or( Int )
      | GEN  Null_Or( Int )
      ;

    Reader( X, Y ) =   Y -> Null_Or( (X, Y) ); 

    my (+) = inline_t::default_int::(+);
    my (-) = inline_t::default_int::(-);
    my (<) = inline_t::default_int::(<);
    my (>) = inline_t::default_int::(>);

    stipulate

	fun fill_string (c, s, i, n)
            =
            {
	        stop = i+n;

	        fun fill j
                    =
                    if   (j < stop)
		        
                         inline_t::char_vector::set (s, j, c);
                         fill (j+1);
		    fi;
	    
		fill i;
	    };

	fun copy_string (src, src_len, dst, start)
            =
            {
	        fun cpy (i, j)
                    =
                    if   (i < src_len)
		        
		         inline_t::char_vector::set (dst, j, inline_t::char_vector::get (src, i));
		         cpy (i+1, j+1);
		    fi;
	    
		cpy (0, start);
	    };

    herein

	fun pad_left pad_chr wid s
	    =
	    {
		len = inline_t::char_vector::length s;
		pad = wid - len;
	    
		if (pad > 0)
		    #		    
		    s' = prestring::create wid;
		    #		    
		    fill_string (pad_chr, s', 0, pad);
		    copy_string (s, len, s', pad);
		    s';
		else
                    s;
                fi;
	    };

	fun pad_right pad_chr wid s
            =
            {
		len = inline_t::char_vector::length s;
		pad = wid - len;
	    
		if (pad > 0)
		    # 
		    s' = prestring::create wid;
		    # 
		    fill_string (pad_chr, s', len, pad);
		    copy_string (s, len, s', 0);
		    s';
		else
                    s;
                fi;
	    };
    end; #  local 

    fun rev_implode (0,     _) =>  "";
        rev_implode (n, chars) =>  prestring::rev_implode (n, chars);
    end;

    fun split_off_prefix  predicate  getc  rep
        =
	lp (0, [], rep)
        where
        
	    fun lp (n, chars, rep)
                =
                case (getc rep)
		    #
		    NULL
			=>
			(rev_implode (n, chars), rep);
		    #
		    THE (c, rep')
			=>
			if   (predicate c)
			     lp (n+1, c ! chars, rep');
			else (rev_implode (n, chars), rep);
			fi;
                esac;
	end;

    fun get_prefix  predicate  getc  rep
        =
	lp (0, [], rep)
        where
	    fun lp (n, chars, rep)
		=
		case (getc rep)
		    #		  
		    NULL =>   rev_implode (n, chars);
		    #		  
		    THE (c, rep')
			=>
			if   (predicate c)

			     lp (n+1, c ! chars, rep');
			else
			     rev_implode (n, chars);
			fi;
		esac;
	end;

    fun drop_prefix  predicate  getc
        =
	lp
        where 
            fun lp rep
                =
                case (getc rep)
		    #		  
		    NULL          =>   rep;
		    THE (c, rep') =>   if   (predicate c)   lp rep';   else   rep;   fi;
                esac;
	end;

    skip_ws =  pre_basis::skip_ws;


    # The Char_Stream type is the type used by scan_string
    # to represent a stream of characters; we use the current
    # index in the string being scanned.
    #
    Char_Stream = Int;

						# pre_basis	is from   src/lib/std/src/pre-basis.pkg

    scan_string =  pre_basis::scan_string;

};




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
