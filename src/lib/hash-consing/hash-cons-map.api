## hash-cons-map.api

# Compiled by:
#     src/lib/hash-consing/hash-cons-lib.make6



api Hash_Cons_Map {

    Chunk( X ) = hash_cons::Chunk( X );

    Map (X, Y);

    empty:  Map (X, Y);
	#  The empty map 

    is_empty:   Map(X, Y) -> Bool;
	#  Return TRUE if and only if the map is empty 

    singleton:  ((Chunk( X ), Y)) -> Map (X, Y);
	#  return the specified singleton map 

    set:    (Map (X, Y), Chunk( X ), Y) -> Map (X, Y);
    set' : ((((Chunk( X ), Y)),  Map(X, Y))) ->  Map (X, Y);
	#  Insert an item. 

    set_with:   (((Y, Y)) -> Y)
	  -> (Map (X, Y), Chunk( X ), Y) -> Map (X, Y);
	# Insert an item with a combining function to resolve collisions.
	# The first argument to the combining function is the existing value,
	# and the second argument is the value being inserted into the map.

    set_withi:   (((Chunk( X ), Y, Y)) -> Y)
	  -> (Map (X, Y), Chunk( X ), Y) -> Map (X, Y);
	# Like set_with, except that the combining function also takes the
	# key as an argument.

    find:   (Map(X, Y), Chunk( X )) -> Null_Or( Y );
	#  Look for an item, return NULL if the item doesn't exist 

    contains_key:  ( (Map(X, Y), Chunk( X )) ) -> Bool;
	#  return TRUE, if the key is in the domain of the map 

    remove:  (Map (X, Y), Chunk( X )) -> (Map (X, Y), Y);
	# Remove an item, returning new map and value removed.
        # Raises LibBase::NOT_FOUND if not found.

    first_val_else_null:   Map(X, Y) -> Null_Or( Y );
    first_keyval_else_null:   Map(X, Y) ->  Null_Or( (Chunk( X ), Y));
	#  return the first item in the map (or NULL if it is empty) 

    vals_count:   Map(X, Y) ->  Int;
	#  Return the number of items in the map 

    vals_list:    Map(X, Y) -> List( Y );
    keyvals_list:  Map( X, Y ) -> List( (Chunk( X ), Y) );
	#  Return an ordered list of the items (and their keys) in the map. 

    list_keys:  Map( X, Y ) -> List( Chunk( X ) );
	#  return an ordered list of the keys in the map. 

    collate:  ((Y, Y) -> Order) -> ((Map( X, Y ), Map( X, Y ))) -> Order;
	# given an ordering on the map's range, return an ordering
	# on the map.

    union_with:   ((Y, Y) -> Y) -> ((Map( X, Y ), Map( X, Y )))
	  -> Map( X, Y );

    keyed_union_with:  ((Chunk( X ), Y, Y) -> Y) -> ((Map( X, Y ), Map( X, Y )))
	  -> Map( X, Y );
	# return a map whose domain is the union of the domains of the two input
	# maps, using the supplied function to define the map on elements that
	# are in both domains.


    intersect_with:   ((Y, Z) -> W) -> ((Map( X, Y ), Map( X, Z )))
	  -> Map( X, W );

    keyed_intersect_with:  ((Chunk( X ), Y, Z) -> W) -> ((Map( X, Y ), Map( X, Z )))
	  -> Map( X, W );
	# return a map whose domain is the intersection of the domains of the
	# two input maps, using the supplied function to define the range.


    apply:   (Y -> Void) -> Map( X, Y ) -> Void;
    keyed_apply:  (((Chunk( X ), Y)) -> Void) -> Map( X, Y ) -> Void;
	#  Apply a function to the entries of the map in map order. 

    map:   (Y -> Z) -> Map( X, Y ) -> Map( X, Z );

    keyed_map:  ((Chunk( X ), Y) -> Z) -> Map( X, Y ) -> Map( X, Z );
	# Create a new map by applying a map function to the
        # name/value pairs in the map.


    fold_left:   ((Y, Z) -> Z) -> Z -> Map( X, Y ) -> Z;

    keyed_fold_left:  ((Chunk( X ), Y, Z) -> Z) -> Z -> Map( X, Y ) -> Z;
	# Apply a folding function to the entries of the map
        # in increasing map order.


    fold_right:   ((Y, Z) -> Z) -> Z -> Map( X, Y ) -> Z;

    keyed_fold_right:  ((Chunk( X ), Y, Z) -> Z) -> Z -> Map( X, Y ) -> Z;

	# Apply a folding function to the entries of the map
        # in decreasing map order.


    filter:   (Y -> Bool) -> Map( X, Y ) -> Map( X, Y );

    keyed_filter:  ((Chunk( X ), Y) -> Bool) -> Map( X, Y ) -> Map( X, Y );
	# Filter out those elements of the map that do not satisfy the
	# predicate.  The filtering is done in increasing map order.


    map_maybe_null_fn:   (Y -> Null_Or( Z )) -> Map( X, Y ) -> Map( X, Z );

    keyed_map_maybe_null_fn:  ((Chunk( X ), Y) -> Null_Or( Z )) -> Map( X, Y ) -> Map( X, Z );
	# map a partial function over the elements of a map in increasing
	# map order.


};


## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
