## win32-process.pkg



# Simulate some of the posix package on Win32 machines



package Win32Process:  
  api

    type pid
    enum exit_status = SUCCESS | FAIL
    my createProcess:  String -> pid
    my waitForSinglechunk:  pid -> Null_Or( exit_status )

  end = pkg

    type pid = unt32::word  #  Actually, a handle 
    enum exit_status = SUCCESS | FAIL
	
    fun cfun x = unsafe::c_interface::c_function "WIN32-PROCESS" x

    my createProcess:  String -> pid = cfun "create_process"

    my wait_for_single_chunk:  pid -> Null_Or( pid ) = cfun "wait_for_single_chunk"
    fun waitForSinglechunk (p:  pid) = (case (wait_for_single_chunk p)
	   of NULL => NULL
	    | THE (v) => if v==0w0 then THE FAIL else THE SUCCESS
	  )		# end of case

  end 


## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
