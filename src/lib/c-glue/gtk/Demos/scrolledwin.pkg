#  example-start scrolledwin scrolledwin.c 
local

  use C Gtk gtk_enums gtk_macros

  fun destroy widget = gtk_main_quit::f()
in

  fun main (prog, argv) = 
  let gtk_init::f (prog . argv)
    
      /* Create a new dialog window for the scrolled window to be
       * packed into.  */
     window = gtk_dialog_new::f ()
     gtk_signal_connect::f (window, "destroy", destroy)
     gtk_window_set_title::f (window, "GtkScrolledWindow example")
     gtk_container_set_border_width::f (window, 0w0)
     gtk_widget_set_usize::f (window, 300, 300)
    
     #  Create a new scrolled window. 
     scrolled_window = gtk_scrolled_window_new::f (NULL, NULL)
    
     gtk_container_set_border_width::f (scrolled_window, 0w10)
    
     /* the policy is one of GTK_POLICY AUTOMATIC, or GTK_POLICY_ALWAYS.
      * GTK_POLICY_AUTOMATIC will automatically decide whether you need
      * scrollbars, whereas GTK_POLICY_ALWAYS will always leave the scrollbars
      * there.  The first one is the horizontal scrollbar, the second, 
      * the vertical. */
     gtk_scrolled_window_set_policy::f (scrolled_window,
                                    GTK_POLICY_AUTOMATIC, GTK_POLICY_ALWAYS)
     #  The dialog window is created with a vbox packed into it. 
     gtk_box_pack_start::f (GtkBox::cast (GtkDialog::get'vbox window), 
                  scrolled_window, TRUE, TRUE, 0w0)
     gtk_widget_show::f scrolled_window
    
     #  Create a table of 10 by 10 squares. 
     table = gtk_table_new::f (0w10, 0w10, FALSE)
    
     #  set the spacing to 10 on x and 10 on y 
     gtk_table_set_row_spacings::f (table, 0w10)
     gtk_table_set_col_spacings::f (table, 0w10)
    
     #  pack the table into the scrolled window 
     gtk_scrolled_window_add_with_viewport::f (scrolled_window, table)
     gtk_widget_show::f table
    
     /* this simply creates a grid of toggle buttons on the table
      * to demonstrate the scrolled window. */
     fun loop_i i = 
     if i < 10 then
     let fun loop_j j = 
         if j < 10 then
         let buffer = "button ("$int::to_string i$", "$int::to_string j$")\n"
             button = gtk_toggle_button_new_with_label::f buffer
             w = unt32::from_int
             gtk_table_attach_defaults::f (table, button,
                                                       w i, w (i+1), w j, w (j+1))
             gtk_widget_show::f button
         in  loop_j (j+1)
         end 
         else ()
     in  loop_j 0;
         loop_i (i+1)
     end
     else ()

     loop_i 0
    
     #  Add a "close" button to the bottom of the dialog 
     button = gtk_button_new_with_label::f "close"
     gtk_signal_connect::f (button, "clicked",
                                fn _ => gtk_widget_destroy::f window)
    
     #  this makes it so the button is the default. 
     gtk_widget_set_flags (button, GTK_CAN_DEFAULT)
     gtk_box_pack_start::f (
                GtkBox::cast (GtkDialog::get'action_area window), 
                            button, TRUE, TRUE, 0w0)
    
     /* This grabs this button to be the default button. Simply hitting
      * the "Enter" key will cause this button to activate. */
     gtk_widget_grab_default::f button
     gtk_widget_show::f button
    
     gtk_widget_show::f window
    
  in gtk_main::f();
     0
  end 
end
#  example-end 
