#   This code was created by Jeff Molofee '99 
#   (ported to SDL by Sam Lantinga '2000) 
#   If you've found this code useful, please let me know. 
#   Visit me at www.demonews.com/hosted/nehe  

#   Translated from C by Allen Leung (leunga@cs.nyu.edu, leunga@dorsai.org) 

package Lesson03 :
api
   my main:  String * List( String ) -> winix::process::status
end
{

   use C SDL OpenGLMacros SDLMacros SDLEnums

   /* A general OpenGL initialization function.  
    * Sets all of the initial parameters. 
    *  We call this right after our OpenGL window is created. 
    */
   fun InitGL (Width, Height) = 
   (
     glViewport::f (0, 0, Width, Height);
         #   This Will Clear The Background Color To Black 
     glClearColor::f (0.0, 0.0, 0.0, 0.0); 
     glClearDepth::f (1.0);         #   Enables Clearing Of The Depth Buffer 
     glDepthFunc::f (GL_LESS);      #   The Type Of Depth Test To Do 
     glEnable::f (GL_DEPTH_TEST);   #   Enables Depth Testing 
     glShadeModel::f (GL_SMOOTH);   #   Enables Smooth Color Shading 
   
     glMatrixMode::f (GL_PROJECTION);
     glLoadIdentity::f();          #   Reset The Projection Matrix 
   
       #   Calculate The Aspect Ratio Of The Window 
     gluPerspective::f (45.0, signed::real Width/signed::real Height, 0.1, 100.0); 
   
     glMatrixMode::f (GL_MODELVIEW)
   )
   
   #  The main drawing function. 
   fun DrawGLScene() =
   (
                #   Clear The Screen And The Depth Buffer 
     glClear::f (GL_COLOR_BUFFER_BIT + GL_DEPTH_BUFFER_BIT);
     glLoadIdentity::f();                #   Reset The View 
   
       #   Move Left 1.5 Units And Into The Screen 6.0 
     glTranslatef::f(-1.5, 0.0,-6.0);  
           
     #   Draw a triangle::f (in smooth coloring mode) 
     glBegin::f (GL_POLYGON);            #   start drawing a polygon 
     glColor3f::f (1.0, 0.0, 0.0);         #   Set The Color To Red 
     glVertex3f::f( 0.0, 1.0, 0.0);     #   Top 
     glColor3f::f (0.0, 1.0, 0.0);         #   Set The Color To Green 
     glVertex3f::f( 1.0,-1.0, 0.0);     #   Bottom Right 
     glColor3f::f (0.0, 0.0, 1.0);         #   Set The Color To Blue 
     glVertex3f::f(-1.0,-1.0, 0.0);     #   Bottom Left   
     glEnd::f();                        
        #   we're done with the polygon (smooth color interpolation)      
   
     glTranslatef::f (3.0, 0.0, 0.0);      #   Move Right 3 Units 
           
     #   Draw a square (quadrilateral) 
     glColor3f::f (0.5, 0.5, 1.0);         #  set color to a blue shade. 
     glBegin::f (GL_QUADS);              #   start drawing a polygon (4 sided) 
     glVertex3f::f(-1.0, 1.0, 0.0);     #   Top Left 
     glVertex3f::f( 1.0, 1.0, 0.0);     #   Top Right 
     glVertex3f::f( 1.0,-1.0, 0.0);     #   Bottom Right 
     glVertex3f::f(-1.0,-1.0, 0.0);     #   Bottom Left         
     glEnd::f();                        #   Done with the polygon 
   
     #   swap buffers to display, since we're double buffered. 
     SDL_GL_SwapBuffers::f()
   )

   exit = winix::process::exit
   
   fun main (prog, args) = 
   let done  = REF FALSE
       event = new' SDL_Event::size
   in 
     #  Initialize SDL for video output 
     if ( SDL_Init::f (SDL_INIT_VIDEO) < 0 ) then
     ( print("Unable to initialize SDL: "$SDL_GetError::f()$"\n");
       exit (1)
     ) 
   
     #  Create a 640x480 OpenGL screen 
     if Ptr::isNull'(SDL_SetVideoMode::f (640, 480, 0, SDL_OPENGL)) then
     ( print("Unable to create OpenGL screen: "$SDL_GetError::f()$"\n");
       SDL_Quit::f();
       exit (2)
     ) 
   
     #  Set the title bar in environments that support it 
     SDL_WM_SetCaption::f("Jeff Molofee's GL Code Tutorial ... NeHe '99", "");
   
     #  Loop, drawing and checking events 
     InitGL (640, 480);
     while not *done do
     (
       DrawGLScene();
       #  This could go in a separate function 
       while SDL_PollEvent::f(&event) != 0 do
       ( if SDL_event_type event == SDL_QUIT or
            ( SDL_event_type event == SDL_KEYDOWN and
              SDL_event_keysym event == SDLK_ESCAPE ) then
           done := TRUE
         else ()
       )
     );
     SDL_Quit::f();
     winix::process::failure
   end
}


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
