## type-types.pkg 

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6


package type_types

: (weak)  Type_Types						# Type_Types				is from   src/lib/compiler/front/typechecker/types/type-types.api

{
    stipulate

        include var_home;
        include types;
        include symbol; 

	package em= error_message;				# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
	package ip= inverse_path;				# inverse_path				is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package ctt= core_type_types;				# core_type_types			is from   src/lib/compiler/front/typecheck-stuff/types/core-type-types.pkg
	package ptn= primitive_type_constructor_numbers;	# primitive_type_constructor_numbers	is from   src/lib/compiler/front/typechecker/basics/primitive-type-constructor-numbers.pkg

        fun bug msg
            =
            error_message::impossible("type_types: " + msg);
    herein

	# Type and dataconstructor symbols:
	#
	void_symbol      = /* make_type_symbol "Void" */ ctt::void_symbol;
	bool_sym      = make_type_symbol "Bool";
	true_sym      = make_value_symbol "TRUE";
	false_sym     = make_value_symbol "FALSE";
	list_sym      = make_type_symbol "List";
	cons_sym      = make_value_symbol "!";
	nil_sym	      = make_value_symbol "NIL";
	ref_con_sym   = /* make_value_symbol "REF" */ ctt::ref_con_sym;
	ref_type_constructor_sym	 = /* make_type_symbol "Ref" */ ctt::ref_type_constructor_sym;
	frag_sym      = make_type_symbol "Frag";
	antiquote_sym = make_value_symbol "ANTIQUOTE";
	quote_sym     = make_value_symbol "QUOTE";
	susp_sym      = make_type_symbol "Susp";  #  LAZY 
	dollar_sym    = make_value_symbol "@@@";     #  LAZY 

	# Primitive type constructors and types:

	# Function type constructor:
	#
	infix val  --> ;
	#
	arrow_stamp = /* stamp::special "->" */ ctt::arrow_stamp;
	arrow_tycon = ctt::arrow_tycon;
	my (-->) = ctt::(-->);

#	arrowTycon
#            =
#	    PRIMITIVE_TYPE_CONSTRUCTOR { stamp = arrowStamp, path = ip::INVERSE_PATH [make_type_symbol "->"],
#		     arity = 2, eq = REF NO,
#		     kind = PRIMITIVE PTN::primTypeNum_arrow,
#		     stub = NULL }
#	fun t1 --> t2 = CONSTRUCTOR_TYPE (arrowTycon,[t1, t2])


	fun is_arrow_type (CONSTRUCTOR_TYPE (PRIMITIVE_TYPE_CONSTRUCTOR { stamp, ... }, _))
                =>
                stamp::eq (stamp, arrow_stamp);

	    is_arrow_type (TYPE_VARIABLE_REF { id, ref_typevar => REF (RESOLVED_TYPE_VARIABLE type) } )
                =>
                is_arrow_type type;

	    is_arrow_type _
                =>
                FALSE;
        end;


	fun domain (CONSTRUCTOR_TYPE(_,[type, _]))
                =>
                type;

	    domain _
                =>
                bug "domain";
        end;


	fun range (CONSTRUCTOR_TYPE(_,[_, type]))
                =>
                type;

	    range _
                =>
                bug "range";
        end;


	# ** primitive types **

	fun make_primitive_type (symbol, arity, equality_property, ptn)
            =
	    PRIMITIVE_TYPE_CONSTRUCTOR {

                stamp => stamp::special symbol,
                path  => ip::INVERSE_PATH [make_type_symbol symbol],
	        arity,

                eq    => REF equality_property,
	        kind  => PRIMITIVE ptn,
		stub  => NULL
            };

	word32tycon = make_primitive_type ("word32", 0, YES, ptn::prim_type_num_int32);
	word32type  = CONSTRUCTOR_TYPE (word32tycon, NIL);

	w32pair_tycon
            =
	    DEFINED_TYPE_CONSTRUCTOR {

                stamp         => stamp::special "w32pair",
	        type_scheme => TYPE_SCHEME { arity => 0,
				               body => ctt::tuple_type [word32type, word32type]
                                             },

	        path         => ip::INVERSE_PATH [make_type_symbol "W32pair"],
	        strict       => []
            };

	fun make64 symbol
            =
	    PRIMITIVE_TYPE_CONSTRUCTOR {

                stamp => stamp::special symbol,
	        path  => ip::INVERSE_PATH [make_type_symbol symbol],
                arity => 0,

                eq    => REF YES,
	        kind => ABSTRACT w32pair_tycon,
                stub  => NULL
            };

	int_tycon = /* makePrimitiveType ("Int", 0, YES, PTN::primTypeNum_int31) */ ctt::int_tycon;
	int_type = /* CONSTRUCTOR_TYPE (intTycon, NIL) */ ctt::int_type;

	int32tycon = make_primitive_type ("int32", 0, YES, ptn::prim_type_num_int32);
	int32type = CONSTRUCTOR_TYPE (int32tycon, NIL);

	int64tycon = make64 "int64";
	int64type = CONSTRUCTOR_TYPE (int64tycon, []);

	intinf_tycon = make_primitive_type ("intinf", 0, YES, ptn::prim_type_num_intinf);
	big_int_type = CONSTRUCTOR_TYPE (intinf_tycon, NIL);

	real_tycon = /* makePrimitiveType("real", 0, NO, PTN::primTypeNum_real) */ ctt::real_tycon;
	real_type = /* CONSTRUCTOR_TYPE (realTycon, NIL) */ ctt::real_type;

	word_tycon = make_primitive_type("word", 0, YES, ptn::prim_type_num_int31);
	word_type = CONSTRUCTOR_TYPE (word_tycon, NIL);

	word8tycon = make_primitive_type("word8", 0, YES, ptn::prim_type_num_int31);
	word8type = CONSTRUCTOR_TYPE (word8tycon, NIL);

	word64tycon = make64 "word64";
	word64type = CONSTRUCTOR_TYPE (word64tycon, []);

	string_tycon = /* makePrimitiveType("String", 0, YES, PTN::primTypeNum_string) */ ctt::string_tycon;
	string_type = /* CONSTRUCTOR_TYPE (stringTycon, NIL) */ ctt::string_type;

	char_tycon = /* makePrimitiveType("char", 0, YES, PTN::primTypeNum_int31) */ ctt::char_tycon;
	char_type = /* CONSTRUCTOR_TYPE (charTycon, NIL) */ ctt::char_type;

	exn_tycon = /* makePrimitiveType("exn", 0, NO, PTN::primTypeNum_exn) */ ctt::exn_tycon;
	exception_type = /* CONSTRUCTOR_TYPE (exnTycon, NIL) */ ctt::exception_type;

	fate_type  = make_primitive_type("Fate", 1, NO, ptn::prim_type_num_fate);
	control_fate_type = make_primitive_type("Control_Fate", 1, NO, ptn::prim_type_num_control_fate);

	array_tycon = /* makePrimitiveType("array", 1, CHUNK, PTN::primTypeNum_array) */ ctt::array_tycon;

	vector_tycon = /* makePrimitiveType("vector", 1, YES, PTN::primTypeNum_vector) */ ctt::vector_tycon;

	chunk_tycon = make_primitive_type("Chunk", 0, NO, ptn::prim_type_num_chunk);

	c_function_tycon = make_primitive_type("c_function", 0, NO, ptn::prim_type_num_cfun);

	word8array_tycon = make_primitive_type("word8array", 0, CHUNK, ptn::prim_type_num_barray);

	real64array_tycon = make_primitive_type("real64array", 0, CHUNK, ptn::prim_type_num_rarray);

	spinlock_tycon = make_primitive_type("Spin_Lock", 0, NO, ptn::prim_type_num_slock);


	# ** building record and product types **

	record_type = ctt::record_type;
	tuple_type  = ctt::tuple_type;

	fun get_fields (CONSTRUCTOR_TYPE (RECORD_TYPE_CONSTRUCTOR _, fl))
                =>
                THE fl;

	    get_fields (TYPE_VARIABLE_REF { id, ref_typevar => REF (RESOLVED_TYPE_VARIABLE type) } )
                =>
                get_fields type;

	    get_fields _
                =>
                NULL;
        end;


	void_tycon = ctt::void_tycon;
	void_type  = ctt::void_type;		# Mathematically this is a 'unit' (not 'void')
						# type since it has one (not zero) values.
						# Since we use it the way C &tc use 'void',
						# we go with the more familiar nomenclature. 

	# Predefined datatypes:
	#
	alpha = TYPE_SCHEME_ARG_I 0;

	#  primitive datatypes 

	#  Bool 

	bool_stamp     = /* stamp::special "bool" */ ctt::bool_stamp;
	bool_signature = /* CSIG (0, 2) */           ctt::bool_signature;

	bool_tycon = ctt::bool_tycon;
	bool_type  = ctt::bool_type;
	false_dcon = ctt::false_dcon;
	true_dcon  = ctt::true_dcon;


	ref_tycon        = ctt::ref_tycon;
	ref_pattern_type = ctt::ref_pattern_type;
	ref_dcon         = ctt::ref_dcon;


	# Lists:

	list_stamp = stamp::special "list";
	cons_dom   = tuple_type [alpha, CONSTRUCTOR_TYPE (RECURSIVE_TYPE 0,[alpha])];
	listsign   = CONSTRUCTOR_SIGNATURE (1, 1); /* [UNTAGGED, CONSTANT 0], [LISTCONS, LISTNIL] */ 
	listeq     = REF YES;

	kind
            = 
	    DATATYPE {
                index    => 0,
                stamps   => #[list_stamp],
                free_type_constructors => [],
                root     => NULL,
		family   => { property_list => property_list::make_property_list (),
			     mkey       => list_stamp,
                             members => #[  {   type_constructor_name=>list_sym,
			                       eq=>listeq,
                                               is_lazy=>FALSE,
				               arity=>1,
                                               an_api=>listsign, 
				               constructor_list => [   {   name=>cons_sym,
                                                                                 representation=>UNTAGGED,
					                                         domain=>THE cons_dom
                                                                             },
					                                     {   name=>nil_sym,
                                                                                 representation=>CONSTANT 0,
                                                                                 domain=>NULL
                                                                             }
                                                                         ]
                                           }
                                        ]
                           }
            };

	list_tycon
            =
	    PRIMITIVE_TYPE_CONSTRUCTOR { stamp => list_stamp, path => ip::INVERSE_PATH [list_sym], arity => 1,
		   eq => listeq, kind, stub => NULL };

	cons_dcon
            =
	    ENUM_CONSTRUCTOR  {
	      symbol         => cons_sym,
	      const          => FALSE,
	      is_lazy        => FALSE,
	      representation => UNTAGGED,   #  was LISTCONS 
	      signature      => listsign,

	      constructor_type
                  =>
                  TYPE_SCHEME_TYPE { type_scheme_arg_eq_properties => [FALSE],
				      type_scheme => TYPE_SCHEME
					      { arity => 1,
					       body => CONSTRUCTOR_TYPE (arrow_tycon,
							[tuple_type [alpha, CONSTRUCTOR_TYPE (list_tycon,[alpha])],
							 CONSTRUCTOR_TYPE (list_tycon,[alpha])]) }}
            };

	nil_dcon
            = 
	    ENUM_CONSTRUCTOR {
	        symbol  => nil_sym,
	        const   => TRUE,
	        is_lazy => FALSE,
	        representation => CONSTANT 0, #  was LISTNIL 
	        signature => listsign,

	        constructor_type
                    =>
                    TYPE_SCHEME_TYPE { type_scheme_arg_eq_properties => [FALSE],
			                 type_scheme => TYPE_SCHEME { arity=>1, body=>CONSTRUCTOR_TYPE (list_tycon,[alpha]) }
                                       }
            };


	#  unrolled lists 
	#  should this type have a different stamp from list? 
	ulist_stamp = stamp::special "ulist";
	ulistsign  = CONSTRUCTOR_SIGNATURE (1, 1); #  [LISTCONS, LISTNIL] 
	ulist_eq    = REF YES;
	kind       = DATATYPE {
                             index    => 0,
                             stamps   => #[ulist_stamp],
                             free_type_constructors => [],
                             root     => NULL,
		             family   => {   property_list => property_list::make_property_list (),
			                    mkey       => ulist_stamp,
                                            members => #[   {   type_constructor_name => list_sym,
			                                       eq=>ulist_eq,
                                                               is_lazy=>FALSE,
				                               arity=>1,
                                                               an_api=>ulistsign, 
				                               constructor_list => [   {   name => cons_sym,
                                                                                                 representation => LISTCONS,
					                                                         domain => THE cons_dom
                                                                                             },
				                                                             {   name => nil_sym,
                                                                                                 representation => LISTNIL,
                                                                                                 domain => NULL
                                                                                             }
                                                                                         ]
                                                           }
                                                       ]
                                        }
                         };

	ulist_tycon
            =
	    PRIMITIVE_TYPE_CONSTRUCTOR {
                stamp => ulist_stamp,
                path  => ip::INVERSE_PATH [ list_sym ],
                arity => 1,
		eq    => ulist_eq,
                kind,
                stub  => NULL
            };

	ucons_dcon
            =
 	    ENUM_CONSTRUCTOR  {
		symbol  => cons_sym,
		const   => FALSE,
		is_lazy => FALSE,
		representation => LISTCONS, 
		signature => ulistsign,
		constructor_type
                    =>
                    TYPE_SCHEME_TYPE {
			       type_scheme_arg_eq_properties => [FALSE],
			       type_scheme => TYPE_SCHEME {
						  arity => 1,
						  body => CONSTRUCTOR_TYPE (
							     arrow_tycon,
							     [   tuple_type [ alpha, CONSTRUCTOR_TYPE (ulist_tycon, [alpha] ) ],
								 CONSTRUCTOR_TYPE (ulist_tycon, [alpha])
							     ]
							 )
					      }
			     }
            };

	unil_dcon
            = 
	    ENUM_CONSTRUCTOR {
	      symbol         => nil_sym,
	      const          => TRUE,
	      is_lazy        => FALSE,
	      representation => LISTNIL, 
	      signature      => ulistsign,

	      constructor_type
                  =>
                  TYPE_SCHEME_TYPE {
				 type_scheme_arg_eq_properties => [FALSE],
				 type_scheme => TYPE_SCHEME {
						    arity => 1,
						    body  => CONSTRUCTOR_TYPE (ulist_tycon, [ alpha ] )
						}
				}
            };



	#  frags 

	antiquote_dom = alpha;
	quote_dom = string_type;
	frag_stamp = stamp::special "frag";
	fragsign = CONSTRUCTOR_SIGNATURE (2, 0); #  [TAGGED 0, TAGGED 1] 
	frageq = REF YES;

	kind
            = 
	    DATATYPE {
                index    => 0,
                stamps   => #[ frag_stamp ],
                free_type_constructors => [],
                root     => NULL,
		family   => { property_list => property_list::make_property_list (),
			     mkey       => frag_stamp,
                             members    => #[   {   type_constructor_name     => frag_sym,
						   eq                      => frageq,
						   is_lazy                  => FALSE,
						   arity                   => 1,
						   an_api              => fragsign, 
						   constructor_list => [   {   name           => antiquote_sym,
										     representation => TAGGED 0,
										     domain         => THE antiquote_dom
										 },
										 {   name           => quote_sym,
										     representation => TAGGED 1,
										     domain         => THE quote_dom
										 }
									     ]
					       }
					   ]
                           }
            };

	/* predefine path as "lib7::frag", since it will be replicated into
	 * the Lib7 package */

	frag_tycon
            =
	    PRIMITIVE_TYPE_CONSTRUCTOR {
                stamp => frag_stamp,
                path  => ip::INVERSE_PATH [frag_sym, make_package_symbol "Lib7"],
	        arity => 1,
                eq    => frageq,
                kind,
                stub  => NULL
            };

	antiquotedcon
            =
	    ENUM_CONSTRUCTOR {
	      symbol          => antiquote_sym,
	      const           => FALSE,
	      is_lazy         => FALSE,

	      signature       => fragsign,
	      representation  => TAGGED 0,

	      constructor_type
                  =>
                  TYPE_SCHEME_TYPE {   type_scheme_arg_eq_properties => [FALSE],
						    type_scheme => TYPE_SCHEME {   arity => 1,
										     body  => CONSTRUCTOR_TYPE (   arrow_tycon,
														  [   alpha,
														      CONSTRUCTOR_TYPE (
															  frag_tycon,
															  [alpha]
														      )
														  ]
													      )
										 }
						}
            };

	quotedcon
            = 
	    ENUM_CONSTRUCTOR {
	      symbol          => quote_sym,
	      const           => FALSE,
	      is_lazy         => FALSE,

	      signature       => fragsign,
	      representation  => TAGGED 1,

	      constructor_type
                  =>
                  TYPE_SCHEME_TYPE {   type_scheme_arg_eq_properties => [FALSE],
				       type_scheme => TYPE_SCHEME {   arity => 1,
									body  => CONSTRUCTOR_TYPE (   arrow_tycon,
												     [   string_type,
													 CONSTRUCTOR_TYPE (
													     frag_tycon,
													     [alpha]
													 )
												     ]
												 )
								    }
				   }
            };

	#  LAZY: suspensions for supporting lazy evaluation 
	dollar_dom = alpha;
	susp_stamp = stamp::special "susp";
	susp_signature = CONSTRUCTOR_SIGNATURE (1, 0);
	susp_eq = REF NO;

	kind
            =
	    DATATYPE {
                index    => 0,
                stamps   => #[susp_stamp],
                free_type_constructors => [],
                root     => NULL,
		family   => {   property_list => property_list::make_property_list (),
			       mkey       => susp_stamp,
                               members    => #[   {   type_constructor_name     => dollar_sym,
						     eq                      => susp_eq,
						     is_lazy                  => FALSE,
						     arity                   => 1,
						     an_api              => susp_signature, 
						     constructor_list => [   {   name           => dollar_sym,
										       representation => SUSP (NULL),
										       domain         => THE dollar_dom
										   }
									       ]
						 }
					     ]
                           }
            };

	susp_tycon
            =
	    PRIMITIVE_TYPE_CONSTRUCTOR {
                stamp => susp_stamp,
                path  => ip::INVERSE_PATH [susp_sym],
		arity => 1,
                eq    => susp_eq,
                kind,
                stub  => NULL
            };

	susp_tyfun
            = 
	    TYPE_SCHEME { arity => 1, body => dollar_dom --> CONSTRUCTOR_TYPE (susp_tycon, [alpha]) };

	dollar_dcon
            =
	    ENUM_CONSTRUCTOR {

	      symbol          => dollar_sym,
	      const           => FALSE,
	      is_lazy         => FALSE,

	      signature       => susp_signature,
	      representation  => SUSP (NULL), 

	      constructor_type
                  =>
                  TYPE_SCHEME_TYPE { type_scheme_arg_eq_properties => [FALSE],
				     type_scheme => susp_tyfun
				   }
            };

	susp_pattern_type
            =
            TYPE_SCHEME_TYPE {
                type_scheme_arg_eq_properties => [FALSE],
                type_scheme => susp_tyfun
            };

    end;	#  local 
};		#  package type_types 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
