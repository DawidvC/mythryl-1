## garbage-collection-cells-g.pkg
#
# This makes a new cell function
# that automatically propagates
# gc type info.

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


# We get invoked from:
#
#     src/lib/compiler/codegen/main/translate-fate-passing-style-to-binary-g.pkg

generic package garbage_collection_cells_g(

    package c:  Cells;					# Cells				is from   src/lib/compiler/lower/instruction/cells.api
    package gc:  Garbage_Collector_Type;		# Garbage_Collector_Type	is from   src/lib/compiler/lower/gc-safety/garbage-collector-type.api
)

: (weak) Garbage_Collector_Cells			# Garbage_Collector_Cells	is from   src/lib/compiler/lower/gc-safety/garbage-collector-cells.api

{
    package c  = c;
    package gc = gc;
    package cb = cells_basis;				# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg


    # Generate a new virtual register and update the gc information 
    # at the same time.
    #
    fun new_cell k
	= 
	{   new =   c::new_cell k;
	    set =   gc::garbage_collector_type.set;

	    fun make_variable gc
		=
		{   my  r as cb::CELL { ref_notes, ... }
			=
			new ();

		    ref_notes := set (gc, *ref_notes);

		    r;
		};

	    make_variable;
	};


    fun get_gc_type (cb::CELL { ref_notes, ... }    )
	=
	gc::garbage_collector_type.lookup *ref_notes;


    fun set_gc_type (cb::CELL { ref_notes, ... }, gc)
	=
	ref_notes :=   gc::garbage_collector_type.set (gc, *ref_notes);


    fun print_type (cb::CELL { ref_notes, ... } )
	= 
	case (gc::garbage_collector_type.get  *ref_notes)

	     THE type =>  ":" + gc::to_string type;
	     NULL       =>  ":?";
	esac;


    gcliveout = note::new (THE (fn _ = "GCLIVEOUT")) 
	      : note::Property( List( (cb::Cell, gc::Gctype) ) );
};
