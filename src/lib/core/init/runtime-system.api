## runtime-system.api 



# This file provides the interface to the packages
# provided by the (C-coded) runtime system.
#
# The BOXED version is supposed to correspond to the assembly and
# the C code that implement the functions using the boxed calling 
# conventions.
#
# Right now, we tried hard to eliminate the polymorphic type
# in the BOXED version because they are interpreted differently across 
# different versions of the compilers.
#
# In
#     src/lib/core/init/core.pkg
# we use the magic (and "dirty") cast to force them into the right
# Mythryl types. (ZHONG)



###                   "A surgeon must have the courage to cut."
###                                    -- Jerrold D. Prothero



api Assembly {

    Chunk;

    Null_Or X = NULL
              | THE X;

    package a:  
      api {
         Cfunction;
         eqtype Unt8_Rw_Vector;
         eqtype Float64_Rw_Vector;
         Spin_Lock;

         array:  (Int, X) -> Rw_Vector( X );
         bind_cfun:  ((String, String)) -> Cfunction;
         callc:  ((Cfunction, X)) -> Z;
         create_b:  Int -> Unt8_Rw_Vector;
         create_r:  Int -> Float64_Rw_Vector;
         create_s:  Int -> String;
         create_v:  (Int, List( X )) -> Vector( X );
         floor:  Float -> Int;
         logb:   Float -> Int;
         scalb:  (Float, Int) -> Float;
         try_lock:  Spin_Lock -> Bool;
         unlock:    Spin_Lock -> Void;
      }; 

    exception DIVIDE_BY_ZERO;
    exception OVERFLOW;
    exception SYSTEM_ERROR  ((String, Null_Or( Int )) );

    prof_current:  Ref( Int );
    poll_event:    Ref( Bool );
    poll_freq:     Ref( Int );
    poll_handler:  Ref( Fate( Void ) -> Fate( Void ));
    active_procs:  Ref( Int );
    pstruct:       Ref( Chunk );
    sighandler:    Ref( ((Int, Int, Fate( Void ))) -> Fate( Void ));
    vector0:       Vector(  X );
};


api Assembly_Boxed {

    Chunk;

    Null_Or X
        =
        NULL | THE X;

    package a:  
      api {

        Cfunction;

        eqtype Unt8_Rw_Vector;
        eqtype Float64_Rw_Vector;

        Spin_Lock;

	rw_vector:  Chunk -> Chunk;
	bind_cfun:  Chunk -> Chunk;
	callc:      Chunk -> Chunk;
	create_b:   Chunk -> Unt8_Rw_Vector;
	create_r:   Chunk -> Float64_Rw_Vector;
	create_s:   Chunk -> String;
	create_v:   Chunk -> Chunk; 
	floor:      Chunk -> Chunk;
	logb:       Chunk -> Chunk;
	scalb:      Chunk -> Chunk;
	try_lock:   Spin_Lock -> Chunk;
	unlock:     Spin_Lock -> Chunk;
      }; 

    exception DIVIDE_BY_ZERO;
    exception OVERFLOW;
    exception SYSTEM_ERROR  ((String, Null_Or( Int )) );

    prof_current:  Ref(  Int );
    poll_event:    Ref(  Bool );
    poll_freq:     Ref(  Int );
    poll_handler:  Ref (Fate( Void ) -> Fate( Void ));
    active_procs:  Ref(  Int );
    pstruct:       Ref(  Chunk );
    sighandler:    Ref( (Int, Int, Fate(Void)) -> Fate(Void) );
    vector0:       Vector(  Chunk );
};



## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
