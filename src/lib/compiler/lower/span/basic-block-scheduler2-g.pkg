## basic-block-scheduler2-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# invoke scheduling after span dependent resolution *
# See docs in src/lib/compiler/lower/doc/latex/span-dep.tex

# We are invoked from:
#
#     src/lib/compiler/codegen/ppc/ppc-codegen.pkg

generic package basic_block_scheduler2_g (

    package emitter:  Instruction_Emitter;				# Instruction_Emitter		is from   src/lib/compiler/lower/emit/instruction-emitter.api

    package control_flow_graph
	:
	Control_Flow_Graph						# Control_Flow_Graph		is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where instruction_set == emitter::instruction_set
	also  pseudo_op      == emitter::instruction_stream::pseudo_op;

    package jumps
	:
	Span_Dependent_Jumps						# Span_Dependent_Jumps		is from   src/lib/compiler/lower/span/span-dependent-jumps.api
	where instruction_set == control_flow_graph::instruction_set;

    package instruction_properties
	:
	Instruction_Properties						# Instruction_Properties	is from   src/lib/compiler/lower/instruction/instruction-properties.api
	where instruction_set == control_flow_graph::instruction_set;
) 
{

    package control_flow_graph = control_flow_graph;
    package instruction_set    = control_flow_graph::instruction_set;
    package cells              = instruction_set::cells;

    package g = graph;							# graph	is from   src/lib/graph/graph.pkg
    package i = instruction_set;
    package c = cells;
    package e = emitter;
    package j = jumps;
    package p = control_flow_graph::pseudo_op;

    fun error msg
        =
        lowcode_error_message::error("BBSched", msg);

    Code
	= SDI    { size:  Ref( Int ),					# variable sized 	"SDI" == "span dependent instruction"
		   instruction:  i::Instruction }
	| FIXED  { size: Int,						# size of fixed instructions 
		   instructions: List( i::Instruction ) };

    Compressed
	= PSEUDO  p::Pseudo_Op
	| LABEL   label::Label
	| CODE    List( Code );

    Cluster
        =
        CLUSTER  List( Compressed );

    my cluster_list:  Ref( List( Cluster      ) )   = REF [];
    my data_list:     Ref( List( p::Pseudo_Op ) )   = REF [];

    fun clean_up ()
	=
	{   cluster_list := [];
	    data_list    := [];
	};

    fun bbsched (g::GRAPH { graph_info=>control_flow_graph::INFO { data, ... }, ... }, blocks)
	= 
	{   cluster_list := CLUSTER (compress blocks) ! *cluster_list;
	    data_list    := *data @ *data_list;
	}
	where
	    fun compress [] => [];

	        compress((_, control_flow_graph::BLOCK { align, labels, instructions, ... } ) ! rest)
                    =>
		    align_it
			(map LABEL *labels @ 
			 CODE (make_code (0, [], *instructions, [])) ! compress rest)
                    where
                        fun align_it (chunks)
                            = 
			    case *align
                              
                                 NULL  =>  chunks;
                                 THE p =>  PSEUDO (p) ! chunks;
                            esac;

			fun make_code (0, [], [], code)
                                =>
                                code;

			    make_code (size, instructions, [], code)
                                =>
                                FIXED { size, instructions } ! code;

			    make_code (size, instructions, instruction ! instrs, code)
				=>
				{   s =  j::min_size  instruction;

				    if   (j::is_sdi instruction)
                                        
					 sdi =  SDI { size=>REF s, instruction=>instruction };

					 if   (size == 0)
                                              
					      make_code (0, [], instrs, sdi ! code);
					 else 
					      make_code (0, [], instrs, sdi ! FIXED { size, instructions } ! code);
                                         fi;

				    else
                                         make_code (size+s, instruction ! instructions, instrs, code);
                                    fi;
				};
                        end;	# fun make_code
		    end;
            end;		# fun compress
	end;			# where (fun bbsched)


    fun finish ()
	=
	{   fun labels (PSEUDO p_op ! rest, pos, chgd)
		    => 
		    {   p::adjust_labels (p_op, pos);
                        labels (rest, pos+p::size_of (p_op, pos), chgd);
                    };

	        labels (LABEL lab ! rest, pos, chgd)
                    => 
	            if   (label::addr_of (lab) == pos)
                        
                         labels (rest, pos, chgd);
	            else
                         label::set_addr (lab, pos);
                         labels (rest, pos, TRUE);
                    fi;

	        labels (CODE code ! rest, pos, chgd)
                    =>
                    {   fun do_code (FIXED { size, ... } ! rest, pos, changed)
                                => 
			        do_code (rest, pos+size, changed);

			    do_code (SDI { size, instruction } ! rest, pos, changed)
                                =>
                                {   new_size = j::sdi_size (instruction, label::addr_of, pos);

				    if   (new_size <= *size)
                                        
                                         do_code (rest, *size + pos, changed);
				    else
                                         size := new_size;
                                         do_code (rest, new_size+pos, TRUE);
                                    fi;
			        };

			    do_code([], pos, changed)
                                =>
                                labels (rest, pos, changed);
                        end;

		        do_code (code, pos, chgd);
	            };

	        labels ([], pos, chgd)
                    =>
                    (pos, chgd);
            end;

	    fun cluster_labels clusters
                =
                {   fun f (CLUSTER cl, (pos, chgd))
                        =
                        labels (cl, pos, chgd);

	            list::fold_left  f  (0, FALSE)  clusters;
	        };

	    fun fixpoint zl
                =
                {   my (size, changed)
                        =
                        cluster_labels zl;

	            if   changed      fixpoint zl;
                                   else   size;        fi;
	        };

	    my emitter::instruction_stream::STREAM { emit, define_local_label, begin_cluster, emit_pseudo_op, ... }
		= 
		emitter::make_stream [];

	    fun emit_cluster (CLUSTER (comp), loc)
		=
		{   fun process (PSEUDO p_op, loc)
			    =>
			    {   emit_pseudo_op  p_op;
				loc + p::size_of (p_op, loc);
			    };

			process (LABEL lab, loc)
			    =>
			    {   define_local_label lab;
				loc;
			    };

			process (CODE code, loc)
			    =>
			    {   fun emit_instrs instructions
				    =
				    apply emit instructions;

				fun e (FIXED { instructions, size, ... }, loc)
					=>
					{   emit_instrs instructions;
					    loc + size;
					};

				    e (SDI { size, instruction }, loc)
					=> 
					{   emit_instrs (j::expand (instruction, *size, loc));
					    *size + loc;
					};
				end;

				fold_left  e  loc  code;
			    };
		    end;

		    fold_left  process  loc  comp;
		};

	    fun init_labels (clusters)
		=
		{   fun init (PSEUDO (p) ! rest, loc)
			    => 
			    {   p::adjust_labels (p, loc);
				init (rest, loc + p::size_of (p, loc));
			    };

			init (LABEL lab ! rest, loc)
			    =>
			    {   label::set_addr (lab, loc);
				init (rest, loc);
			    };

			init (CODE code ! rest, loc)
			    =>
			    {   fun size (FIXED { size, ... } )
					=>
					size;

				    size (SDI { size, ... } )
					=>
					*size;
				end;

			       init (
				   rest,
				   list::fold_left
				       (fn (c, b) =  size (c) + b)
				       loc
				       code
			       );
			    };

			init ([], loc)
			    =>
			    loc;
		    end;

		    list::fold_left 
			(fn (CLUSTER (cl), loc) =  init (cl, loc))
			0
			clusters;
		};			# fun init_labels

	    # The data list is in reverse order
            # and the clusters are in reverse:
	    #	
	    fun data_cluster ([], acc)
                    =>
                    CLUSTER acc;

	        data_cluster (d ! dl, acc)
                    =>
                    data_cluster (dl, PSEUDO d ! acc);
            end;

	    compressed
		= 
		reverse (data_cluster (*data_list, []) ! *cluster_list)
                before
                    clean_up ();

	    init_labels (compressed);

	    begin_cluster (fixpoint compressed);

	    fold_left  emit_cluster  0  compressed; 
	    ();

	};				# fun finish

}; 					# generic package basic_block_scheduler2_g




## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
