## complete-probs-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


# Given a control_flow_graph that may have incomplete branch probability information,
# fill in the information.



###                   "They couldn't hit an elephant at this dist-"
###
###                            -- General John B. Sedgwick, last words, 1864



generic package complete_branch_probabilities_g (

    package control_flow_graph:  Control_Flow_Graph;		# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api

    # Function to record edge probabilities:
    #
    record_probability
        :
        ((control_flow_graph::Edge_Info, Float))
        ->
        Void;
)
: (weak)
api {

    package control_flow_graph:  Control_Flow_Graph;		# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api

    complete_probs:  control_flow_graph::Control_Flow_Graph -> Void;

}
{
    package control_flow_graph =  control_flow_graph;
    package prob               =  probability;			# probability		is from   src/lib/compiler/lower/library/probability.pkg

    dump_control_flow_graph_after_probability_completion
        =
        low_code_control::make_bool (
	  "dump_control_flow_graph_after_probability_completion",
	  "TRUE to dump control flow graph after probability completion"
        );

    my { get=>get_prob, ... }
        =
        lowcode_notes::branch_prob;

    #  Complete edge probabilities. 
    fun complete_probs (cfg as graph::GRAPH { forall_nodes, out_edges, ... } )
        =
        {
	    fun do_block (blk_id, _)
                =
                {   fun compute_probs ((_, _, e as control_flow_graph::EDGE { notes, ... } ) ! r, remaining, n, es)
			    =>
			    case (get_prob *notes)
			      
				 NULL =>  compute_probs (r, remaining, n+1, e ! es);

				 THE p
				     =>
				     {   record_probability (e, prob::to_float p);
					 compute_probs (r, prob::(-) (remaining, p), n, es);
				     };
			    esac;

		        compute_probs ([], _, 0, _)
                            =>
                            ();

		        compute_probs ([], remaining, n, es)
                            =>
                            {   p = prob::to_float (prob::(/) (remaining, n));

			        list::apply (fn e = record_probability (e, p))
                                            es;
			    };
                    end;

		    compute_probs (out_edges blk_id, prob::always, 0, []);
		};
	  
	    forall_nodes do_block
	    before
                if *dump_control_flow_graph_after_probability_completion

                     control_flow_graph::dump (
                         *low_code_control::debug_stream,
			 "after probability completion",
                         cfg
                     );
		fi;
	};
};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
