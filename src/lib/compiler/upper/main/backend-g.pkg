## backend-g.pkg 

# Compiled by:
#     src/lib/compiler/core.make6


# This file defines the backend of the compiler, primarily
# the backend upper half, which is to say the part which does
# the machine-independent code optimizations and transformations.
#
#
# At compiletime this generic gets invoked by
#
#     src/lib/compiler/codegen/ppc/ppc-backend.pkg
#     src/lib/compiler/codegen/sun/sparc-backend.pkg
#     src/lib/compiler/codegen/x86/x86-backend-g.pkg
#
# to produce the various platform-specific compiler backends.
#
# The "package gen' generic parameter which they hand
# us takes care of all the machine-dependent optimizations,
# code-generation issues &tc for us.
#
#
#
# Runtime invocation of our (sole)
#
#     translate_anormal_to_binary
# 
# entrypoint is from
# 
#     src/lib/compiler/toplevel/main/compile-g.pkg



###    "When trouble is solved before it forms,
###     who calls that clever?"
###
###                             -- Sun Tzu


# We are invoked from:
#
#     src/lib/compiler/codegen/ppc/ppc-backend.pkg
#     src/lib/compiler/codegen/sun/sparc-backend.pkg
#     src/lib/compiler/codegen/x86/x86-backend-g.pkg

generic package backend_g (


    package codegen
        :
        Codegen;				# Codegen				is from   src/lib/compiler/codegen/main/codegen.api


    collect					# Defined in (e.g.) src/lib/compiler/codegen/x86/x86-backend-g.pkg
        :
        (Void -> Int)
	->
        code_segments::Code_Segment;
)

: (weak) Backend				# Backend				is from   src/lib/compiler/toplevel/main/backend.api

{
    stipulate

	package machine_properties
            =
            codegen::machine_properties;

						# translate_anormal_to_fps_g		is from   src/lib/compiler/upper/fps/translate-anormal-to-fps-g.pkg
						# fps_preoptimization_transform_g	is from   src/lib/compiler/upper/fps/fps-preoptimization-transform-g.pkg	
						# fps_optional_optimizations_g		is from   src/lib/compiler/upper/fps-optimize/fps-optional-optimizations-g.pkg
						# closure_g				is from   src/lib/compiler/upper/closures/closure-g.pkg
						# spill_g				if from   src/lib/compiler/codegen/compile-fps/spill-g.pkg
						# fps_split_g				is from   src/lib/compiler/upper/closures/fps-split-g.pkg

	# fps_split_g implements cross-module inlining,
        #              or would, if its contents weren't commented out.


	package translate_anormal_to_fps
            =
            translate_anormal_to_fps_g(      machine_properties );

	package fps_preoptimization_transform
            =
            fps_preoptimization_transform_g( machine_properties );

	package fps_optional_optimizations
            =
            fps_optional_optimizations_g(    machine_properties );

	package closure   = closure_g(       machine_properties );
	package spill     = spill_g(         machine_properties );
	package fps_split = fps_split_g(     machine_properties ); 

	package ctrl =  highcode_control;					# highcode_control	is from   src/lib/compiler/upper/main/highcode-control.pkg
	package pp   =  prettyprint_anormal;					# prettyprint_anormal	is from   src/lib/compiler/upper/anormal/prettyprint-anormal.pkg
	package lt   =  highcode;						# highcode		is from   src/lib/compiler/upper/highcode/highcode.pkg
	package o    =  null_or;						# null_or		is from   src/lib/std/src/null-or.pkg
	package f    =  anormal;						# anormal		is from   src/lib/compiler/upper/anormal/anormal.pkg

	package omrf =  optimimize_mutually_recursive_functions;		# optimimize_mutually_recursive_functions	is from   src/lib/compiler/upper/optimize/optimize-mutually-recursive-functions.pkg

    herein 

	package codegen = codegen;

	architecture_name =  codegen::machine_properties::architecture_name;			# "ppc", "sparc" or "x86".
	abi_variant       =  codegen::abi_variant;

	fun bug s
            =
            error_message::impossible ("backend_g:" + s);

	say = control_print::say;

	Highcodekind
            =
            FK_WRAP | FK_REIFY | FK_DEBRUIJN | FK_NAMED | FK_FPS;

	fun phase x
            =
            compile_statistics::do_phase (compile_statistics::make_phase x);

	deb2names    = phase "highcode 056 deb2names" translate_type_variable::deb_index2names;
	names2deb    = phase "highcode 057 names2deb" translate_type_variable::names2deb_index;

	lcontract    = phase "highcode 052 lcontract"  lcontract::lcontract;
    #   lcontract'   = phase "highcode 052 lcontract'" LContract::lcontract 
	fcollect     = phase "highcode 052a fcollect"  collect::collect;
	fcontract    = phase "highcode 052b fcontract"
			      (fn (opts, lambda_expression) => fcontract::contract opts lambda_expression; end );
	fcontract    = fn opts =  fn lambda_expression =  fcontract (opts, fcollect lambda_expression);
	loopify      = phase "highcode 057 loopify"    loopify::loopify;

	optimize_mutually_recursive_functions
            =
            phase "highcode 056 optimize_mutually_recursive_functions"
                  omrf::optimize_mutually_recursive_functions;

	split        = phase "highcode 058 split"      fsplit::split;
	abcopt       = phase "highcode 059 abcopt"     abcopt::abc_opt;

	typelift     = phase "highcode 0535 typelift"  lift::type_lift;
	wformed      = phase "highcode 0536 wformed"   lift::well_formed;

	specialize   = phase "highcode 053 specialize" specialize::specialize;
	wrapping     = phase "highcode 054 wrapping"   wrapping::wrapping;
	reify        = phase "highcode 055 reify"      reify::reify;
	recover      = phase "highcode 05a recover"    recover_type_info::recover_type_info;

	translate_anormal_to_fps
           =
           phase "FPS 060 translate_anormal_to_fps" translate_anormal_to_fps::translate_anormal_to_fps;

	fps_preoptimization_transform    = phase "FPS 065 fps_preoptimization_transform"       fps_preoptimization_transform::fps_preoptimization_transform;
	fps_optional_optimizations       = phase "FPS 070 fps_optional_optimizations"          fps_optional_optimizations::reduce;
	split_off_fps_literals           = phase "FPS 075 split_off_fps_literals"              fps_literals::split_off_fps_literals;
	literal_expression_to_bytevector = phase "FPS 076 literal_expression_to_bytevector"    fps_literals::literal_expression_to_bytevector;

	closure      = phase "FPS 080 closure"         closure::close_fps;
	globalfix    = phase "FPS 090 globalfix"       global_fix::globalfix;
	spill        = phase "FPS 100 spill"           spill::spill;
	limit        = phase "FPS 110 limit"           limit::nolimit;

	translate_fate_passing_style_to_binary
           =
           phase "FPS 120 fps_to_bin" codegen::translate_fate_passing_style_to_binary;	# See src/lib/compiler/codegen/main/codegen-g.pkg

	# Pretty printing for the A-Normal and FPS code:
        #
	my (   pprint_anormal_program,
               pprint_fps_expression
            )
            = 
	  {   fun make_prettyprinter (flag, print_e) s e
                  =
		  if *flag

		       say ("\n[After " + s + " ...]\n\n");
		       print_e e; 
		       say "\n";
		       e;
		  else
                       e;
                  fi;
	  
              (   make_prettyprinter (ctrl::print,          prettyprint_anormal::print_prog),
	          make_prettyprinter (controls::cg::printit, prettyprint_fps::print_fps_function)
              );
	  };

	# Writing out a term into
        # a error output file 
	#
	fun dump_term (print_e, s, le)
            =
	    {   out_s = file::open_for_append s;
		save_out = *controls::print::out;

		fun done ()
                    =
		    {   file::close_output  out_s;

                        controls::print::out := save_out;
                    };

                controls::print::out
                    :=
                    { say   =>   fn s  = file::write (out_s, s),
		      flush =>   fn () = file::flush out_s
                    };

		print_e le
                except
                    x =  {   done ()
                             except
                                 _ = ();

                             raise exception x;
                         };

		done ();
	    };

#  XXX BUGGO FIXME This looks like more thread-hostile buried global mutable state :( 
#	my fcs:    Ref( List( anormal::Program -> anormal::Program ) )
#                = REF [];

	# Compile A-Normal code to FPS and
        # thence on down to binary machine code 

        # This function is invoked (only) from
        # fun   translate_anormal_to_binary   in
        #
        #     src/lib/compiler/toplevel/main/compile-g.pkg 
	#
	fun translate_anormal_to_binary (

                highcode,
		compile_info as { error_fn, source_name=>src, ... }: compile_info::Compile_Info( deep_syntax::Declaration ),
		cross_module_inlining
            )
            = 
	    {   fun err severity s
                    =
  		    error_fn (0, 0) severity (cat ["Float constant out of range: ", s, "\n"]);


		fun check (check_e, print_e, check_id)   (level, log_id)   e
                    =
		    if (check_e (e, level))
			dump_term (print_e, src + "." + check_id + log_id, e);
			bug (check_id + " typing errors " + log_id);
                    fi;


                fun maybe_prettyprint_fps  function
                    =
                    {    compile_info ->  { prettyprinter_or_null, ... };

                         case prettyprinter_or_null
                           
			     THE pp
				 =>
				 {   pp.put "\n\n\n(Following printed by src/lib/compiler/upper/main/backend-g.pkg.)\n";
				     pp.put "\n\nCPS form:\n";
				     prettyprint_fps::prettyprint_fps_function  pp  function;
				     pp.put "\n";
				 };

			     NULL => ();
                         esac;
                    };

		fun wff (f, s)                  #  "wff" == "well formed formula" 
                    =
                    if (not (wformed f))
		        print ("\nAfter " + s + " CODE NOT WELL FORMED\n");
                    fi;

		# f: program		highcode code
		# fifi: program opt	inlinable approximation of f
		# fk: highcodekind	what kind of highcode variant this is
		# l: String	        last phase through which it went

		fun runphase (p, (f, fifi, fk, l))
                    =
		    case (p, fk)

		        (("fcontract" | "lcontract"), FK_DEBRUIJN)
			    =>
			    {   say("\n!! " + p + " cannot be applied to the DeBruijn form !!\n");
			        (f, fifi, fk, l);
                            };

		        ("fcontract", _)
			    =>
			    (fcontract { eta_split=>FALSE, tfn_inline=>FALSE } f,  fifi, fk, p);

		        ("fcontract+eta", _)
			    =>
			    (fcontract { eta_split=>TRUE, tfn_inline=>FALSE } f,  fifi, fk, p);

		        ("lcontract", _)
         		    =>
                            (lcontract f,  fifi, fk, p);

		        ("optimize_mutually_recursive_functions",   _)
                            =>
                            (optimize_mutually_recursive_functions f,     fifi, fk, p);

		        ("loopify",  _)			=> (loopify f,    fifi, fk, p);
		        ("abcopt",  _)			=> (abcopt f,     fifi, fk, p);
		        ("specialize", FK_NAMED)	=> (specialize f, fifi, fk, p);

		        ("wrap", FK_NAMED)		=> (wrapping f,	  fifi, FK_WRAP,  p);
		        ("reify", FK_WRAP)		=> (reify f,      fifi, FK_REIFY, p);

		        ("deb2names", FK_DEBRUIJN)	=> (deb2names f,   fifi,   FK_NAMED,    p);
		        ("names2deb", FK_NAMED)	 	=> (names2deb f,   fifi,   FK_DEBRUIJN, p);

		        ("typelift", _)
			    =>
			    {   f = typelift f;

				if *ctrl::check
				     wff (f, p);
				fi;

				(f, fifi, fk, p);
			    };

		        ("split",    FK_NAMED)
			    =>
			    {   my (f, fifi) = split (f, cross_module_inlining);

				(f, fifi, fk, p);
			    };

		        #  pseudo highcode phases 

		        ("pickle",   _)
			    =>
			    ( the (unpickle_module::unpickle_highcode (.pickle (pickle_module::pickle_highcode_program (THE f)))),
			      unpickle_module::unpickle_highcode (.pickle (pickle_module::pickle_highcode_program fifi)),
			      fk,
			      p
			    );

		       ("collect", _)
                           =>
                           (fcollect f, fifi, fk, p);

		       _ =>
		           {   case (p, fk)
			     
				   ("id", _)
				       =>
				       ();

				   ("wellformed", _)
				       =>
				       wff (f, l);

				   ("recover", _)
				       =>
				       {   my { get_lty, ... }
                                               =
                                               recover (f, fk == FK_REIFY);

					   ctrl::recover := (say o lt::lt_print o get_lty o f::VAR);
				       };

				   ("print", _)
				       =>
				       {   say("\n[After " + l + "...]\n\n");
                                           pp::print_fundec f; say "\n";
                                       };

				   ("printsplit", _)
				       => 
				       {   say "[ splitted ]\n\n";
                                           o::map pp::print_fundec fifi;
                                           say "\n";
                                       };

				   ("check", _)
				       =>
				       (check (typecheck_anormal::check_top, prettyprint_anormal::print_fundec, "highcode")
					      (fk == FK_REIFY, l) f);

				   _ =>
				       say("\n!! Unknown or badly scheduled highcode phase '" + p + "' !!\n");
			       esac;

		               (f, fifi, fk, l);
                           };
                    esac;

		fun print (f, fifi, fk, l)
                    =
                    {   pprint_anormal_program l f;
                        (f, fifi, fk, l);
                    };

		fun check' (f, fifi, fk, l)
                    =
		    {   fun c n reified f
                            =
			    check (typecheck_anormal::check_top, prettyprint_anormal::print_fundec, n)
				  (reified, l) (names2deb f);

                        if (*ctrl::check)
                            
			    c "HIGHCODE" (fk == FK_REIFY) f;
			    o::map (c "iHIGHCODE" FALSE) fifi;
			    ();
		        fi;

			(f, fifi, fk, l);
		    };

		fun show_history [s]     =>  say (cat ["  raised at:\t", s, "\n"]);
		    show_history (s ! r) =>  { show_history r; say (cat ["\t\t", s, "\n"]);};
		    show_history []      =>  ();
                end;

		fun runphase' (arg as (p, { 1=>f, ... } ))
                    =
		    {   if *ctrl::print_phases      say( "Phase " + p + "...");   fi;

		        (   (check' o print o runphase) arg)
                        before
		            (    if *ctrl::print_phases    say("..." + p + " Done.\n");
                                                        fi
                            );
                    }
		    except x
                           =
                           {    say ("\nwhile in " + p + " phase\n");
				dump_term (prettyprint_anormal::print_fundec, "highcode.core", f);
			        show_history (lib7::exception_history x);
			        raise exception x;
                           };

		my (highcode, fifi, fk, _)
                    =
                    fold_left runphase'
			  (highcode, NULL, FK_DEBRUIJN, "highcodenm")
			  (/* "id" ! */ "deb2names" ! *ctrl::phases);

		# Run any missing phases:
		#
		my (highcode, fk)
                    =
		    if   (fk == FK_DEBRUIJN)
		        
                         say "\n!!Forgot deb2names!!\n";
                         (deb2names highcode, FK_NAMED);
		    else
                         (highcode, fk);
                    fi;

		my (highcode, fk)
                    =
		    if (fk == FK_NAMED)

			say "\n!!Forgot wrap!!\n";

			(wrapping highcode, FK_WRAP);
		    else
                        (highcode, fk);
                    fi;

		my (highcode, fk)
                    =
		    if (fk == FK_WRAP)
		        
			say "\n!!Forgot reify!!\n";
			(reify highcode, FK_REIFY);
		    else
                        (highcode, fk);
                    fi;

		# Finish up with FPS 
		#
		my (nc0, ncn, dseg)
                    = 
		    {   function = translate_anormal_to_fps highcode;

			pprint_fps_expression "translate_anormal_to_fps" function;
                        maybe_prettyprint_fps  function;

												# fps_preoptimization_transform	def in   src/lib/compiler/upper/fps/fps-preoptimization-transform-g.pkg
			function =   (pprint_fps_expression "fps_preoptimization_transform" o fps_preoptimization_transform) function;
			function =   fps_optional_optimizations (function, NULL, FALSE);

			pprint_fps_expression
                            "fps_optional_optimizations"
                            function;

			my  (function, literals)
                            =
                            split_off_fps_literals function;

			data =   literal_expression_to_bytevector  literals;

			pprint_fps_expression
                            "fps_optional_optimizations-code"
                            function;

			fun gen fx
                            = 
			    {   fx =   (pprint_fps_expression "closure" o closure) fx;

				carg =   globalfix fx;
				carg =   spill carg;

				my  (carg, limit)
                                    =
                                    limit carg;

                                # The following call is where runtime flow of control
                                # passes from the highcode "middle end" to the lowcode
                                # backend:

				epthunk
                                    =
				    translate_fate_passing_style_to_binary {		# translate_fate_passing_style_to_binary	def in     src/lib/compiler/codegen/main/codegen-g.pkg
                                        funcs  => carg,
                                        limits => limit,
                                        err,
					source => src,
                                        compile_info
                                    };

				collect epthunk;			# collect	def in    src/lib/compiler/codegen/x86/x86-backend-g.pkg
			    };

                        case (fps_split::fps_split function)
			  
			    (fun0 ! funn)
				=>
				( gen fun0,
				  map gen funn,
				  data
				);

			    [] => bug "unexpected case on gen in translate_anormal_to_binary";
                        esac;
		    };
	    
                ( { c0=>nc0, cn=>ncn, data=>dseg },
                  o::map names2deb fifi
                );
	    };                                            #  function translate_anormal_to_binary 

	translate_anormal_to_binary
            =
            phase
                "highcode 050 translate_anormal_to_binary"
                translate_anormal_to_binary;

    end;						# stipulate
};							# package backend_g 


## COPYRIGHT (c) 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
