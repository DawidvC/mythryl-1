## highcode-var.pkg 

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6


package highcode_var: (weak)  Highcode_Var {			# Highcode_Var			is from   src/lib/compiler/upper/highcode/highcode-var.api

    stipulate 

	package s  =  symbol;					# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package im =  int_hash_table;				# int_hash_table		is from   src/lib/src/int-hash-table.pkg

    herein

	fun inc r
            =
            r := *r + 1;

	fun new_lvar r ()
            =
            {   inc r;
                *r;
            };

	exception NO_LVAR_NAME;

	varcount =  REF 0;				#  XXX BUGGO FIXME: 'varcount' is yet more yucky mutable global state: 
	my lvar_names:  im::Hash_Table( String )        #  XXX BUGGO FIXME: 'lvar_names' is yet more yucky thread-hostile mutable global state: 
           =
           im::make_table (32, NO_LVAR_NAME);


	name =  im::get  lvar_names;


	give_lvar_name
            =
            im::set  lvar_names;


	Highcode_Variable
            =
            Int;      #  lambda variable id number 


	remember_highcode_variable_names
            =
            typecheck_data_control::remember_highcode_variable_names;

								# typecheck_data_control	is from   src/lib/compiler/front/typecheck-stuff/main/typecheck-data-control.pkg


	fun highcode_variable_has_a_name  lv
            =
            {   name lv;
                TRUE;
            }
            except
                NO_LVAR_NAME = FALSE;


	fun to_string (highcode_variable: Highcode_Variable)
            =
            int::to_string  highcode_variable;


	fun share_name (v, w)
            =
	    if *remember_highcode_variable_names

                 give_lvar_name (v, name w)
                 except
                     NO_LVAR_NAME
			 =
			 (   give_lvar_name (w, name v)
			     except
				 NO_LVAR_NAME = ()
			 );
	    fi;


	make_highcode_variable
            =
            new_lvar  varcount;


	fun clear ()
            =
            {   varcount := 0;
                im::clear  lvar_names;
            };


	fun copy_highcode_variable  var
            =
	    {   new_var =  make_highcode_variable ();
	    
                if *remember_highcode_variable_names

		     give_lvar_name (new_var,  name var)
                     except
                         NO_LVAR_NAME = ();
		fi;

		new_var;
	    };


	fun make_named_highcode_variable (id: s::Symbol)
            =
	    {   new_var =  make_highcode_variable ();
	    
                if *remember_highcode_variable_names

                     give_lvar_name (new_var,  s::name id);
                fi;

		new_var;
	    };


	fun highcode_variable_to_value_symbol (lv:  Highcode_Variable) : Null_Or( s::Symbol )
	    =
            THE (s::make_value_symbol (name lv))
            except
                NO_LVAR_NAME = NULL;


	fun name_of_highcode_variable (lv:  Highcode_Variable) : String
            =
	    {   s =  int::to_string  lv;
	    
                (name lv + s)
                except
                    NO_LVAR_NAME = ("v" + s);
	    };

    end; #  with

};		#  package highcode_var


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
