c-kit, a front end for C in SML
Version 1.0, 31 Mar 2000
------------------------------

0. Contact information
----------------------

   c-kit mailing list: ckit@research.bell-labs.com
   Nevin Heintze: nch@research.bell-labs.com
   Dino Oliva: oliva@research.nj.nec.com
   Dave MacQueen: dbm@research.bell-labs.com


1. How to build it
------------------

Let C-KIT be the directory containing the C-Kit code.
Run SML in directory $C-KIT/ast.
Execute "CM.make();".  This gives you the parser/elaborator.


2. How to use it
----------------
Top level driving functions are in file parse-to-ast.pkg.  Generally
use parse_to_raw_syntax.fileToAst.  It returns a record of type BuildAst.ProgramInfo.

Example:

  my {ast: Ast.ast,
       tidtab: Namings.tidNaming Tidtab.uidtab,
       errorCount: int,
       warningCount: int,
       auxiliaryInfo: {aidtab: Tables.aidtab,
		       implicits: Tables.aidtab,
                       env: state.symtab}}
      = parse_to_raw_syntax.fileToAst ("file");

Ast.ast is the abstract syntax type for translation units (a list of top-level
C declarations).  For further information, read the code.

To get ahold of parse trees (parser/parse-tree.pkg), which is the raw data
package produced by the parser:

  my errorState : error.errorState = error.mkErrState file.stdout;
  my parseTree : ParseTree.externalDecl list =
      Parser.parseFile errorState "file";

See parse/util/error.pkg for the definition of the errorState type.


3. Directory map
----------------

parser/
  parser-tree-sig.sml, parser-tree.sml: definition of parse tree types
  grammar/
    lex and yacc specifications
  util/
    source-map.api, source-map.pkg: mapping source file locations
    error.api, error.pkg: error reporting functions
ast/
  ast.api, ast.pkg: definition of abstract syntax types
  build-ast.pkg:
    translation from parse trees to abstract syntax, with type checking and other
    static semantics processing
  prettyprint/* : pretty printing for ast
  extensions/
    c/  -- dummy extension packages for C
variants/
  ansi-c/
    config.pkg: various flags controlling error checking, type checking, etc.
ast-utils/
  copy/
    copying ast types
  equality/
    equality for ast types
  simplifier/
    ast simplifier


4. Notes:

4.1 Pretty printing - suppressing underscores

You can suppress underscores in pretty-printing using:

  prettyprint_lib::suppress_pid_underscores := true;
  prettyprint_lib::suppress_tid_underscores := true;

4.2 ast-util

Much of this code is suspect and needs revision.


5. Todo:

5.1. Implement checks on casts.
     - explicit casts currently allow any change of type;
       instead they should only allow permitted conversions.

-----------------------------------------------------------------------------------

