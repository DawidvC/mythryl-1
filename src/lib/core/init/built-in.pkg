## built-in.pkg

# Compiled by:
#     src/lib/core/init/init.cmi

# Interfaces to the compiler built-ins, infixes, etc.



###                     "I was gratified to be able
###                      to answer promptly and I did.
###
###                     "I said I didn't know."
###
###                                  -- Mark Twain,
###                                     Life on the Mississippi



package primitive_types {

    include primitive_types;
};

   # This silliness is to prevent elabstr.sml
   # from sticking a NO_ACCESS in the wrong place

stipulate
    include primitive_types;
herein

    package assembly = core::assembly;	# core	is from   src/lib/core/init/core.pkg

    # The following code was used to create a type-safe version of the inline
    # package while preserving the inline property of the functions.
    # Since everything in inline is now properly typed already, the code
    # should now be seen as:
    #   - organizing things a bit better
    #   - confirming the type information
    # See compiler/semantic/symbol-table/primitives-symbol-table.pkg for the origin of the type info
    # in inline.    (Blume, 1/2001)

    package inline_t {

      Control_Fate( X )   = Control_Fate( X );

      my callcc:	 (Fate( X ) -> X) -> X = inline::callcc;
      my throw:	 	 Fate( X ) -> X -> Y = inline::throw;

      my capture:	 (Control_Fate( X ) -> X) -> X = inline::capture;
      my escape:	  Control_Fate( X ) -> X -> Y = inline::cthrow;   
      my isolate:        (X -> Void) -> Fate(X) = inline::isolate;

      my (*_)	 	: Ref( X ) -> X = (inline::deref);
      my deref	 	: Ref( X ) -> X = (inline::deref);
      my (:=) 		: (Ref( X ), X) -> Void = (inline::(:=));
      my makeref 	:  X -> Ref( X ) = inline::makeref;

      my (==) 		: (_X, _X) -> Bool = (inline::(==));
      my (!=) 		: (_X, _X) -> Bool = (inline::(!=));

      my boxed: 	 X -> Bool = inline::boxed;
      my unboxed:	 X -> Bool = inline::unboxed;
      my cast: 		 X -> Y = inline::cast;

      my identity:	 X -> X = inline::cast;
      my chunklength:	 X -> Int = inline::chunklength;
      my make_special:	 (Int, X) -> Y = inline::make_special;

      my getspecial:	 X -> Int = inline::getspecial;
      my setspecial:	 ((X, Int)) -> Void = inline::setspecial;

      my getpseudo:	 Int -> X = inline::getpseudo; 
      my setpseudo:	 (X, Int) -> Void = inline::setpseudo; 

      my gethandler:	 Void -> Fate( X ) = inline::gethandler;
      my sethandler: 	 Fate( X ) -> Void = inline::sethandler;

      # The reserved 'var' register is used by threadkit
      # to hold the currently running thread.  This is
      # a real register on RISC architectures but a memory
      # location on the register-starved x86 architecture:
      #
      my get_current_thread_register:	 Void -> X = inline::get_current_thread_register;			# Get reserved 'current_thread' register (see src/lib/compiler/codegen/x86/x86-fps-registers.pkg).
      my set_current_thread_register:	 X -> Void = inline::set_current_thread_register;			# Set reserved 'current_thread' register (see src/lib/compiler/codegen/x86/x86-fps-registers.pkg).

      my compose: 	 ((Y -> Z), (X -> Y)) -> (X -> Z) = inline::compose;
      my (before):	 ((X, Y)) -> X = inline::before;

      my ignore:   	 X -> Void = inline::ignore;
      my gettag:		 X -> Int = inline::gettag;
      my setmark: 	 X -> Void = inline::setmark; 
      my dispose: 	 X -> Void = inline::dispose; 

      my (!_)  :	 	 Bool -> Bool = inline::inlnot;
      my inlnot:		 Bool -> Bool = inline::inlnot;

      my record_get:	 ((X, Int)) -> Y     = inline::record_get;
      my raw64get:	 ((X, Int)) -> Float = inline::raw64_get;

      my ptreql:           (X, X) -> Bool = inline::ptreql;

      package float64 {

	  my (+)   : (Float, Float) -> Float = inline::f64add;
	  my (-)   : (Float, Float) -> Float = inline::f64sub;

	  my (/)   : (Float, Float) -> Float = inline::f64div;
	  my (*)   : (Float, Float) -> Float = inline::f64mul;

	  my (====): (Float, Float) -> Bool = inline::f64eq;
	  my (!=)  : (Float, Float) -> Bool = inline::f64ne;

	  my (>=)  : (Float, Float) -> Bool = inline::f64ge;
	  my (>)   : (Float, Float) -> Bool = inline::f64gt;

	  my (<=)  : (Float, Float) -> Bool = inline::f64le;
	  my (<)   : (Float, Float) -> Bool = inline::f64lt;

	  my (-_)   : Float -> Float = inline::f64neg;
	  my neg    : Float -> Float = inline::f64neg;
	  my abs:     Float -> Float = inline::f64abs;

	  my min:     (Float, Float) -> Float  = inline::f64min;
	  my max:     (Float, Float) -> Float  = inline::f64max;

	  my from_int31:  Int -> Float      = inline::real;
	  my from_int32:  Int32 -> Float    = inline::real32;
	};

      package integer {

	  my test_int31:     Intinf -> Int    = inline::test_inf_31;
	  my test_int32:     Intinf -> Int32  = inline::test_inf_32;

	  my trunc_word8:    Intinf -> Unt8  = inline::trunc_inf_8;
	  my trunc_word31:   Intinf -> Unt   = inline::trunc_inf_31;
	  my trunc_word32:   Intinf -> Unt32 = inline::trunc_inf_32;

	  my copy_word8:     Unt8 -> Intinf  = inline::copy_8_inf;
	  my copy_int31:     Int -> Intinf    = inline::copy_31_inf_i;
	  my copy_word31:    Unt -> Intinf   = inline::copy_31_inf_w;
	  my copy_int32:     Int32 -> Intinf  = inline::copy_32_inf_i;
	  my copy_word32:    Unt32 -> Intinf = inline::copy_32_inf_w;

	  my extend_word8:   Unt8 -> Intinf  = inline::extend_8_inf;
	  my extend_int31:   Int -> Intinf    = inline::extend_31_inf_i;
	  my extend_word31:  Unt -> Intinf   = inline::extend_31_inf_w;
	  my extend_int32:   Int32 -> Intinf  = inline::extend_32_inf_i;
	  my extend_word32:  Unt32 -> Intinf = inline::extend_32_inf_w;

	  to_int = test_int31;
	  from_int = extend_int31;
	  my to_large:        Intinf -> Intinf = inline::identity;
	  my from_large:      Intinf -> Intinf = inline::identity;
	};

      package unt32 {

	  my test_int31:    Unt32 -> Int   = inline::test_32_31_w;
	  my testu_int31:   Unt32 -> Int   = inline::testu_32_31;
	  my testu_int32:   Unt32 -> Int32 = inline::testu_32_32;
	  my trunc_word31:  Unt32 -> Unt  = inline::trunc_32_31_w;
	  my trunc_word8:   Unt32 -> Unt8 = inline::trunc_32_8_w;
	  my copy_word8:    Unt8 -> Unt32 = inline::copy_8_32_w;
	  my copy_word31:   Unt -> Unt32  = inline::copy_31_32_w;
	  my copyf_int32:   Int32 -> Unt32 = inline::copy_32_32_iw;
	  my copyt_int32:   Unt32 -> Int32 = inline::copy_32_32_wi;
	  my copy_word32:   Unt32 -> Unt32 = inline::copy_32_32_ww;
	  my extend_word8:  Unt8 -> Unt32 = inline::extend_8_32_w;
	  my extend_int31:  Int -> Unt32   = inline::extend_31_32_iw;
	  my extend_word31: Unt -> Unt32  = inline::extend_31_32_ww;

	  to_large_unt   = copy_word32;
	  to_large_unt_x  = copy_word32;
	  from_large_unt = copy_word32;
	  to_large_int    = integer::copy_word32;
	  to_large_int_x   = integer::extend_word32;
	  from_large_int  = integer::trunc_word32;
	  to_int         = testu_int31;
	  to_int_x        = test_int31;
	  from_int       = extend_int31;

	  my bitwise_or:      (Unt32, Unt32) -> Unt32 = inline::w32orb;
	  my bitwise_xor:     (Unt32, Unt32) -> Unt32 = inline::w32xorb;
	  my bitwise_and:     (Unt32, Unt32) -> Unt32 = inline::w32andb;
	  my (*)    : (Unt32, Unt32) -> Unt32 = inline::w32mul;
	  my (+)    : (Unt32, Unt32) -> Unt32 = inline::w32add;
	  my (-)    : (Unt32, Unt32) -> Unt32 = inline::w32sub;
	  my (-_)    : Unt32 -> Unt32          = inline::w32neg;
	  my neg     : Unt32 -> Unt32          = inline::w32neg;
	  my (div):   (Unt32, Unt32) -> Unt32 = inline::w32div;
	  my (mod):   (Unt32, Unt32) -> Unt32 = inline::w32mod;
	  my (>)    : (Unt32, Unt32) -> Bool   = inline::w32gt;
	  my (>=)   : (Unt32, Unt32) -> Bool   = inline::w32ge;
	  my (<)    : (Unt32, Unt32) -> Bool   = inline::w32lt;
	  my (<=)   : (Unt32, Unt32) -> Bool   = inline::w32le;
	  my rshift:   (Unt32, Unt) -> Unt32 = inline::w32rshift;
	  my rshiftl:  (Unt32, Unt) -> Unt32 = inline::w32rshiftl;
	  my lshift:   (Unt32, Unt) -> Unt32 = inline::w32lshift;
	  my bitwise_not:     Unt32 -> Unt32 = inline::w32notb;
	  my check_lshift:   (Unt32, Unt) -> Unt32 = inline::w32_check_lshift;
	  my check_rshift:   (Unt32, Unt) -> Unt32 = inline::w32_check_rshift;
	  my check_rshiftl:  (Unt32, Unt) -> Unt32 = inline::w32_check_rshiftl;

	  my min:      (Unt32, Unt32) -> Unt32  = inline::w32min;
	  my max:      (Unt32, Unt32) -> Unt32  = inline::w32max;
	};


      package unt64 {
	  my extern:  Unt64 -> (Unt32, Unt32) = inline::w64p;
	  my intern:  (Unt32, Unt32) -> Unt64 = inline::p64w;
	};


      package int32 {

	  my test_int31:    Int32 -> Int    = inline::test_32_31_i;
	  my trunc_word8:   Int32 -> Unt8  = inline::trunc_32_8_i;
	  my trunc_word31:  Int32 -> Unt   = inline::trunc_32_31_i;
	  my copy_word8:    Unt8 -> Int32  = inline::copy_8_32_i;
	  my copy_word31:   Unt -> Int32   = inline::copy_31_32_i;
	  my copy_int32:    Int32 -> Int32  = inline::copy_32_32_ii;
	  my extend_word8:  Unt8 -> Int32  = inline::extend_8_32_i;
	  my extend_int31:  Int -> Int32    = inline::extend_31_32_ii;
	  my extend_word31: Unt -> Int32   = inline::extend_31_32_wi;

	  to_int = test_int31;
	  from_int = extend_int31;
	  to_large = integer::extend_int32;
	  from_large = integer::test_int32;

	  my (*)    : (Int32, Int32) -> Int32  = inline::i32mul;
	  my (quot):  (Int32, Int32) -> Int32  = inline::i32quot;  
	  my (rem):   (Int32, Int32) -> Int32  = inline::i32rem;  
	  my (div):   (Int32, Int32) -> Int32  = inline::i32div;  
	  my (mod):   (Int32, Int32) -> Int32  = inline::i32mod;  
	  my (+)    : (Int32, Int32) -> Int32  = inline::i32add;  
	  my (-)    : (Int32, Int32) -> Int32  = inline::i32sub;
	  my (-_)    : Int32 -> Int32 = inline::i32neg; 
	  my neg     : Int32 -> Int32 = inline::i32neg; 
	  my bitwise_and:     (Int32, Int32) -> Int32  = inline::i32andb;
	  my bitwise_or:      (Int32, Int32) -> Int32  = inline::i32orb;
	  my bitwise_xor:     (Int32, Int32) -> Int32  = inline::i32xorb;
	  my rshift:   (Int32, Int32) -> Int32  = inline::i32rshift;
	  my lshift:   (Int32, Int32) -> Int32  = inline::i32lshift;
	  my (<)    : (Int32, Int32) -> Bool = inline::i32lt;
	  my (<=)   : (Int32, Int32) -> Bool = inline::i32le;
	  my (>)    : (Int32, Int32) -> Bool = inline::i32gt;
	  my (>=)   : (Int32, Int32) -> Bool = inline::i32ge;
	  my (==)   : (Int32, Int32) -> Bool = inline::i32eq;
	  my (<>)   : (Int32, Int32) -> Bool = inline::i32ne;

	  my min:      (Int32, Int32) -> Int32  = inline::i32min;
	  my max:      (Int32, Int32) -> Int32  = inline::i32max;
	  my abs:      Int32 -> Int32 = inline::i32abs;
	};

      package unt31 {

	  my testu_int31:    Unt -> Int    = inline::testu_31_31;
	  my copyt_int31:    Unt -> Int    = inline::copy_31_31_wi;
	  my copyf_int31:    Int -> Unt    = inline::copy_31_31_iw;

	  to_large_unt   = unt32::copy_word31;
	  to_large_unt_x  = unt32::extend_word31;
	  from_large_unt = unt32::trunc_word31;
	  to_large_int    = integer::copy_word31;
	  to_large_int_x   = integer::extend_word31;
	  from_large_int  = integer::trunc_word31;
	  to_int         = testu_int31;
	  to_int_x        = copyt_int31;
	  from_int       = copyf_int31;

	  my bitwise_or:      (Unt, Unt) -> Unt = inline::w31orb;
	  my bitwise_xor:     (Unt, Unt) -> Unt = inline::w31xorb;
	  my bitwise_and:     (Unt, Unt) -> Unt = inline::w31andb;
	  my (*)    : (Unt, Unt) -> Unt = inline::w31mul;
	  my (+)    : (Unt, Unt) -> Unt = inline::w31add;
	  my (-)    : (Unt, Unt) -> Unt = inline::w31sub;
	  my (-_)    : Unt -> Unt        = inline::w31neg;
	  my neg     : Unt -> Unt        = inline::w31neg;
	  my (div):   (Unt, Unt) -> Unt = inline::w31div;
	  my (mod):   (Unt, Unt) -> Unt = inline::w31mod;
	  my (>)    : (Unt, Unt) -> Bool   = inline::w31gt;
	  my (>=)   : (Unt, Unt) -> Bool   = inline::w31ge;
	  my (<)    : (Unt, Unt) -> Bool   = inline::w31lt;
	  my (<=)   : (Unt, Unt) -> Bool   = inline::w31le;
	  my rshift:   (Unt, Unt) -> Unt = inline::w31rshift;
	  my rshiftl:  (Unt, Unt) -> Unt = inline::w31rshiftl;
	  my lshift:   (Unt, Unt) -> Unt = inline::w31lshift;
	  my check_lshift:   (Unt, Unt) -> Unt = inline::w31_check_lshift;
	  my check_rshift:   (Unt, Unt) -> Unt = inline::w31_check_rshift;
	  my check_rshiftl:  (Unt, Unt) -> Unt = inline::w31_check_rshiftl;
	  my bitwise_not:     Unt -> Unt = inline::w31notb;

	  my min:      (Unt, Unt) -> Unt  = inline::w31min;
	  my max:      (Unt, Unt) -> Unt  = inline::w31max;
	};

      package int31 {

	  my trunc_word8:  Int -> Unt8   = inline::trunc_31_8;
	  my copy_int31:    Int -> Int    = inline::copy_31_31_ii;
	  my copy_word8:    Unt8 -> Int  = inline::copy_8_31;
	  my extend_word8:  Unt8 -> Int  = inline::extend_8_31;

	  to_int   = copy_int31;
	  from_int = copy_int31;
	  to_large = integer::extend_int31;
	  from_large = integer::test_int31;

	  my (*)    : (Int, Int) -> Int  = inline::i31mul;
	  my (quot):  (Int, Int) -> Int  = inline::i31quot;
	  my (rem):   (Int, Int) -> Int  = inline::i31rem;
	  my (div):   (Int, Int) -> Int  = inline::i31div;
	  my (mod):   (Int, Int) -> Int  = inline::i31mod;
	  my (+)    : (Int, Int) -> Int  = inline::i31add;
	  my (-)    : (Int, Int) -> Int  = inline::i31sub;
	  my (-_)    : Int -> Int = inline::i31neg;
	  my neg     : Int -> Int = inline::i31neg;
	  my bitwise_and:     (Int, Int) -> Int  = inline::i31andb;
	  my bitwise_or:      (Int, Int) -> Int  = inline::i31orb;
	  my bitwise_xor:     (Int, Int) -> Int  = inline::i31xorb;
	  my rshift:   (Int, Int) -> Int  = inline::i31rshift;
	  my lshift:   (Int, Int) -> Int  = inline::i31lshift;
	  my bitwise_not:     Int -> Int = inline::i31notb;
	  my (<)    : (Int, Int) -> Bool = inline::i31lt;
	  my (<=)   : (Int, Int) -> Bool = inline::i31le;
	  my (>)    : (Int, Int) -> Bool = inline::i31gt;
	  my (>=)   : (Int, Int) -> Bool = inline::i31ge;
	  my (==)   : (Int, Int) -> Bool = inline::i31eq;
	  my (<>)   : (Int, Int) -> Bool = inline::i31ne;
	  my ltu:      (Int, Int) -> Bool = inline::i31ltu;
	  my geu:      (Int, Int) -> Bool = inline::i31geu;

	  my min:      (Int, Int) -> Int  = inline::i31min;
	  my max:      (Int, Int) -> Int  = inline::i31max;
	  my abs:      Int -> Int = inline::i31abs;
	};

      package int64 {
	  my extern:  Int64 -> (Unt32, Unt32) = inline::i64p;
	  my intern:  (Unt32, Unt32) -> Int64 = inline::p64i;
	};

      package unt8 {


	  #  large_int is still 32 bit: 
	  to_large_unt    = unt32::copy_word8;
	  to_large_unt_x  = unt32::extend_word8;
	  from_large_unt  = unt32::trunc_word8;
	  to_large_int    = integer::copy_word8;
	  to_large_int_x  = integer::extend_word8;
	  from_large_int  = integer::trunc_word8;
	  to_int          = int31::copy_word8;
	  to_int_x        = int31::extend_word8;
	  from_int        = int31::trunc_word8;

	/* temporary framework, because the actual word8 operators 
	 * are not implemented*/
	  /* WARNING! some of the following operators
	   *          don't get the high-order bits right XXX BUGGO FIXME */
	  my bitwise_or:      (Unt8, Unt8) -> Unt8 = inline::w31orb_8;
	  my bitwise_xor:     (Unt8, Unt8) -> Unt8 = inline::w31xorb_8;
	  my bitwise_and:     (Unt8, Unt8) -> Unt8 = inline::w31andb_8;
	  my (*)    : (Unt8, Unt8) -> Unt8 = inline::w31mul_8;
	  my (+)    : (Unt8, Unt8) -> Unt8 = inline::w31add_8;
	  my (-)    : (Unt8, Unt8) -> Unt8 = inline::w31sub_8;
	  my (-_)    : Unt8 -> Unt8         = inline::w31neg_8;
	  my neg     : Unt8 -> Unt8         = inline::w31neg_8;
	  my (div):   (Unt8, Unt8) -> Unt8 = inline::w31div_8;
	  my (mod):   (Unt8, Unt8) -> Unt8 = inline::w31mod_8;
	  my (>)    : (Unt8, Unt8) -> Bool  = inline::w31gt_8;
	  my (>=)   : (Unt8, Unt8) -> Bool  = inline::w31ge_8;
	  my (<)    : (Unt8, Unt8) -> Bool  = inline::w31lt_8;
	  my (<=)   : (Unt8, Unt8) -> Bool  = inline::w31le_8;
	  my rshift:   (Unt8, Unt) -> Unt8  = inline::w31rshift_8;
	  my rshiftl:  (Unt8, Unt) -> Unt8  = inline::w31rshift_8;
	  my lshift:   (Unt8, Unt) -> Unt8  = inline::w31lshift_8;
	  my bitwise_not:     Unt8 -> Unt8         = inline::w31notb_8;
	  my check_lshift:   (Unt8, Unt) -> Unt8 = inline::w31_check_lshift_8;
	  my check_rshift:   (Unt8, Unt) -> Unt8 = inline::w31_check_rshift_8;
	  my check_rshiftl:  (Unt8, Unt) -> Unt8 = inline::w31_check_rshiftl_8;

	  my min:      (Unt8, Unt8) -> Unt8 = inline::w31min_8;
	  my max:      (Unt8, Unt8) -> Unt8 = inline::w31max_8;
	};

      package char {


	  max_ord = 255;
	  exception BAD_CHAR;

	#  the following should be an inline operator 
	  fun chr i
              =
              if (int31::geu (i, (int31::(+))(max_ord, 1)))
	           raise exception BAD_CHAR;
	      else ((inline::cast i) : Char);fi;

	  my ord:  Char -> Int = inline::cast;

	  my (<)  : ((Char, Char)) -> Bool = inline::i31lt_c;
	  my (<=) : ((Char, Char)) -> Bool = inline::i31le_c;
	  my (>)  : ((Char, Char)) -> Bool = inline::i31gt_c;
	  my (>=) : ((Char, Char)) -> Bool = inline::i31ge_c;
	};

      package poly_rw_vector {

	  my new_array0:  Void -> Rw_Vector( X ) = inline::new_array0;
	  my array:      (Int, X) -> Rw_Vector( X ) = inline::mkarray; 
	  my length:      Rw_Vector( X ) -> Int = inline::length;
	  my get:        (Rw_Vector( X ), Int) -> X = inline::rw_vec_get;
	  my check_sub:    (Rw_Vector( X ), Int) -> X = inline::safe_rw_vec_get;
	  my set:        (Rw_Vector( X ), Int, X) -> Void = inline::rw_vec_set;
	  my check_set:    (Rw_Vector( X ), Int, X) -> Void = inline::safe_rw_vec_set;
	  my get_data:    Rw_Vector( X ) -> Y = inline::get_seq_data;
	};

      package poly_vector {

	  my length:      Vector( X ) -> Int = inline::length; 
	  my get:        (Vector( X ), Int) -> X = inline::vec_get;
	  my check_sub:    (Vector( X ), Int) -> X = inline::safe_vec_get;
	  my get_data:    Vector( X ) -> Y = inline::get_seq_data;
	};

      # The type of this ought to be float64array:
      #
      package rw_float64_vector {

	  my new_array0:  Void -> assembly::a::Float64_Rw_Vector = inline::new_array0;
	  my length:      assembly::a::Float64_Rw_Vector -> Int = inline::length;
	  my get:        (assembly::a::Float64_Rw_Vector, Int) -> Float = inline::f64_sub;
	  my check_sub:    (assembly::a::Float64_Rw_Vector, Int) -> Float = inline::f64chk_sub;
	  my set:        (assembly::a::Float64_Rw_Vector, Int, Float) -> Void = inline::f64_update;
	  my check_set:    (assembly::a::Float64_Rw_Vector, Int, Float) -> Void = inline::f64chk_update;
	  my get_data:    assembly::a::Float64_Rw_Vector -> Y = inline::get_seq_data;
	};

    /** NOTE: we are currently using polymorphic vectors to implement the float64_vector
     ** package.
     **/
      package float64_vector {

	  my length:      Vector( Float ) -> Int = inline::length; 
	  my get:        (Vector( Float ), Int) -> Float = inline::vec_get;
	  my check_sub:    (Vector( Float ), Int) -> Float = inline::safe_vec_get;
	  my get_data:    Vector( Float ) -> Y = inline::get_seq_data;
	};

      package rw_unt8_vector {

	   Rw_Vector = assembly::a::Unt8_Rw_Vector;
	  my new_array0:  Void -> Rw_Vector = inline::new_array0;
	  my length:     Rw_Vector -> Int = inline::length;
      # BUG: using "ordof" for w8a::sub is dangerous, because ordof is
      # (technically) fetching from immutable things.  A fancy optimizer might
      # someday be confused. XXX BUGGO FIXME
	  my get:        (Rw_Vector, Int) -> Unt8 = inline::ordof;
	  my check_sub:    (Rw_Vector, Int) -> Unt8 = inline::inlbyteof;
	  my set:        (Rw_Vector, Int, Unt8) -> Void = inline::store;
	  my check_set:    (Rw_Vector, Int, Unt8) -> Void = inline::inlstore;
	  my get_data:    Rw_Vector -> X = inline::get_seq_data;
	};


      # Preliminary version with just the type:
      #
      package unt8_vector : api {
				eqtype Vector;
				 create:  Int -> Vector;
			    }
	{  Vector = String;
	   create = assembly::a::create_s;
        };

      #  now the real version with all values 
      package unt8_vector {

	  include unt8_vector;

	  my length:       Vector -> Int              =  inline::length;
	  my get:         (Vector, Int) -> Unt8       =  inline::ordof;
	  my check_sub:     (Vector, Int) -> Unt8       =  inline::inlordof;
	  my set:         (Vector, Int, Unt8) -> Void =  inline::store;
	  my get_data:     Vector -> X                =  inline::get_seq_data;
	};

      package rw_char_vector : api {		#  prelim 
				   eqtype Rw_Vector;
				    new_array0:  Void -> Rw_Vector;
				    create:  Int -> Rw_Vector;
			       }
      {
	  Rw_Vector = assembly::a::Unt8_Rw_Vector;
	  my new_array0:  Void -> Rw_Vector = inline::new_array0;
	  create = assembly::a::create_b;
      };

    package rw_char_vector {		#  full 

	  include rw_char_vector;

	  my length:      Rw_Vector -> Int                 = inline::length;
	  my check_sub:   ((Rw_Vector, Int)) -> Char        = inline::inlordof;
	  my check_set :  ((Rw_Vector, Int, Char)) -> Void = inline::inlstore;
	  my get:       ((Rw_Vector, Int)) -> Char        = inline::ordof;
	  my set:       ((Rw_Vector, Int, Char)) -> Void = inline::store;
	  my get_data:    Rw_Vector -> X                  = inline::get_seq_data;
	};

    package char_vector {

	  my length:        String -> Int			= inline::length;
	  my check_sub:     ((String, Int)) -> Char		= inline::inlordof;
	  my get:        ((String, Int)) -> Char		= inline::ordof;
	  my set:        ((String, Int, Char)) -> Void	= inline::store;
	  my get_data:     String -> X                    = inline::get_seq_data;
	};

      package default_int   = int31;
      package default_word  = unt31;
      package default_float = float64;

    };	#  package inline_t 

end; #  local 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
