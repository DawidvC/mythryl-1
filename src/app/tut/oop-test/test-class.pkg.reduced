## test-class.pkg

# I test this by doing
#
#     linux% my
#     eval: set_control "typechecker::expand_oop_syntax_debugging" "TRUE";
#     eval: make "oop-test.make6";
#     eval: obj1 = test_class::make__object       (                                               { field1b => "abcb" }, ());
#     eval: obj2 = test_subclass::make__object    (                        { field2b => "defb" }, { field1b => "Abcb" }, ());
#     eval: obj3 = test_subsubclass::make__object ( { field3b => "ghib" }, { field2b => "defb" }, { field1b => "ABcb" }, ());
#     eval: test_class::get1 obj1;
#     eval: test_class::get1 obj2;
#     eval: test_class::get1 obj3;
#     eval: test_subclass::get2 obj2;
#     eval: test_subclass::get2 obj3;
#     eval: test_subsubclass::get3 obj3;
#   
# When I want gross verbose debug output I also do:
#     set_control "typechecker::expand_oop_syntax_debugging" "TRUE";
# or in extremis
#     set_control "typechecker::typecheck_package_language_debugging" "TRUE";set_control "typechecker::expand_oop_syntax_debugging" "TRUE";set_control "typechecker::api_match_debugging" "TRUE";set_control "ed::module_stuff_debugging" "TRUE";set_control "ed::typechecker_dictionary_debugging" "TRUE";make "oop-test.make6";

class test_class {

#    class super = object;

    fun invert string
        =
        implode (reverse (explode string));

#    field val  String  field1    =   "rst";
#    field val  String  field1b;

    message fun
        Self(X) -> String
	get1 self
            =
	    invert "rst";
#	    invert self->field1;

    message fun
        Self(X) -> Int
	get1b self
            =
	    187;
};

# class test_subclass {
# 
#     class super = test_class;
# 
#     field val  String  field2   =   "uvw";
#     field val  String  field2b;
# 
#     message fun
#         Self(X) -> String
# 	get2 self
#             =
# 	    self->field2;
# 
#     message fun
#         Self(X) -> String
# 	get2b self
#             =
# 	    self->field2b;
# 
#     method fun
# 	get1 old self = "[" + (old self) + "]";
# };
# 
# class test_subsubclass {
# 
#     class super = test_subclass;
# 
#     field val  String  field3   =   "xyz";
#     field val  String  field3b;
# 
#     message fun
#         Self(X) -> String
# 	get3 self
#             =
# 	    self->field3;
# 
#     message fun
#         Self(X) -> String
# 	get3b self
#             =
# 	    self->field3b;
# 
#     method fun
# 	get1 old self = "{" + (old self) + "}";
# };
# 
# 
# ## Copyright (c) 2010 by Jeffrey S Prothero,
# ## released under Gnu Public Licence version 3.
