## net-db.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6


stipulate

    package host_unt= host_unt_guts;		# host_unt_guts	is from   src/lib/std/src/bind-sysword-32.pkg
    package unt8= unt8_guts;			# unt8_guts	is from   src/lib/std/src/unt8.pkg

herein

package net_db: (weak)  Net_Db {		# Net_Db	is from   src/lib/std/src/socket/net-db.api

    package sys_w = host_unt;			# host_unt	is from   src/lib/std/types-only/bind-largest32.pkg

    fun netdb_fun x = c_interface::c_function "Lib7-Sockets" x;

    Network_Address = NETWORK_ADDRESS  sys_w::Unt;

    Address_Family = pre_socket::af::Address_Family;

    Entry = NETENT  {
		name:  String,
		aliases:  List( String ),
		address_type:  Address_Family,
		address:  Network_Address
	    };

    stipulate
        fun conc field' (NETENT a) =  field' a;
    herein
	name      = conc .name;
	aliases   = conc .aliases;
	address_type = conc .address_type;
	address   = conc .address;
    end; #  local 

    # Network DB query functions 
    #
    stipulate

        Netent
	    =
            ((String, List( String ), pre_socket::Raw_Address_Family, host_unt::Unt));

	fun get_net_typechecked_package NULL
		=>
		NULL;

	    get_net_typechecked_package (THE (name, aliases, address_type, address))
		=>
		THE (NETENT {
		   name,
		   aliases,
		   address_type =>  pre_socket::af::ADDRESS_FAMILY  address_type,
		   address   =>  NETWORK_ADDRESS address
		  }
		);
	end;

	my get_net_by_name' : String -> Null_Or( Netent )
	      = netdb_fun "getNetByName";

	my get_net_by_addr' : ((host_unt::Unt, pre_socket::Raw_Address_Family)) -> Null_Or( Netent )
	    =
	    netdb_fun "getNetByAddr";

    herein

	get_by_name
            =
            get_net_typechecked_package o get_net_by_name';

	fun get_by_address (NETWORK_ADDRESS address, pre_socket::af::ADDRESS_FAMILY af)
	    =
	    get_net_typechecked_package (get_net_by_addr'(address, af));
    end;

    fun scan getc stream
        =
        {   my (+) = sys_w::(+);
	  
	    case (pre_socket::to_words  getc  stream)
	      
		 THE ([a, b, c, d], stream)
		      =>
		      THE(
			NETWORK_ADDRESS (sys_w::(<<) (a, 0u24)+sys_w::(<<) (b, 0u16)+sys_w::(<<) (c, 0u8)+d),
			stream);

		 THE ([a, b, c], stream)
                     =>
		     THE (NETWORK_ADDRESS (sys_w::(<<) (a, 0u24)+sys_w::(<<) (b, 0u16)+c), stream);

		 THE ([a, b], stream)
                     =>
		     THE (NETWORK_ADDRESS (sys_w::(<<) (a, 0u24)+b), stream);

		 THE ([a], stream)
                     =>
                     THE (NETWORK_ADDRESS a, stream);

		 _ => NULL;
            esac;
	  };

    from_string = number_string::scan_string scan;

    fun to_string (NETWORK_ADDRESS address)
        =
        {
	    fun get n
                =
                unt8::from_large_unt (sys_w::to_large_unt((sys_w::(>>) (address, n))));
	  
	    pre_socket::from_bytes (get 0u24, get 0u16, get 0u8, get 0u0);
	};

  };
end;



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
