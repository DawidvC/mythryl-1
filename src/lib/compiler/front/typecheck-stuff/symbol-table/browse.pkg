## browse.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



package browse_symbol_table
: (weak)
api {
    Bind_Info
        = NO_DICTIONARY
	| DICTIONARY  { get:   symbol::Symbol -> Bind_Info,
		  symbols:  Void -> List( symbol::Symbol )
		};

    browse:   symbol_table::Symbol_Table -> symbol::Symbol -> Bind_Info;
    catalog:  symbol_table::Symbol_Table -> List( symbol::Symbol );

}
{
    fun bug m
        =
        error_message::impossible ("browse_symbol_table: " + m);

    package m  = module;		# module		is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
    package mu = module_stuff;		# module_stuff		is from   src/lib/compiler/front/typecheck-stuff/modules/module-stuff.pkg
    package b  = symbol_table_entry;	# symbol_table_entry	is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg
    package s  = symbol;		# symbol		is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
    package se = symbol_table;		# symbol_table		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg

    Bind_Info
        = NO_DICTIONARY
        | DICTIONARY { get:   symbol::Symbol -> Bind_Info,
		  symbols:  Void -> List( symbol::Symbol )
               };

    fun get_elems elements symbol
        =
	case (mu::get_api_element (elements, symbol))
          
             m::PACKAGE_IN_API { an_api,        ... } =>  sigenv  an_api;
             m::GENERIC_IN_API { a_generic_api, ... } =>  fsgenv  a_generic_api;
             _                                        =>  NO_DICTIONARY;
        esac
	except
            mu::UNBOUND _ = NO_DICTIONARY

    also
    fun sigenv (s as m::API { elements, ... } )
	    =>
	    DICTIONARY { get =>  get_elems elements,
		   symbols =>  .{ mu::get_api_symbols  s; }
		 };

        sigenv _ => NO_DICTIONARY;
    end 


    # The following is a hack to make the browse function consistent
    # with the changes made on raw_syntax_tree during the typechecker
    # conversion of raw_syntax_tree into deep_syntax_tree.
    #
    # Syntactic changes made on raw_syntax_tree by the typechecker
    # should be propagated to this function so that Make7 can do
    # the correct job.
    #
    # I personally think that syntactic changes on curried generics
    # and insertions of <result_package>s should be done on raw_syntax
    # directly, before typechecking --- that way we wouldn't have
    # to write the following ugly sigenv_sp function. 		XXX BUGGO FIXME
    #
    also
    fun sigenv_sp (
            m::API {
                elements => [
                    (   symbol,
                        m::PACKAGE_IN_API { an_api, ... }
                    )
                ],
                ...
            }
        )
            =>
           if   (s::name symbol == "<result_package>")
               
                sigenv an_api;
           else
                bug "unexpected case <result_package> in sigenvSp";
           fi;

        sigenv_sp (
            m::API {
                elements => [
                    (   symbol,
                        m::GENERIC_IN_API { a_generic_api, ... }
                    )
                ],
                ...
            }
        )
            =>
            if   (s::name symbol == "<generic>")
                
                 fsgenv  a_generic_api;
	    else
                 bug "unexpected case <generic> in sigenvSp";
            fi;

       sigenv_sp _
           =>
           bug "unexpected case in signenvSp";
    end 

    also
    fun fsgenv (m::GENERIC_API { body_api, ... } )
            =>
            sigenv_sp  body_api;

        fsgenv _
            =>
            NO_DICTIONARY;
    end;

    fun strenv (m::A_PACKAGE { an_api, ... } )
            =>
            sigenv  an_api;

        strenv _
            =>
            NO_DICTIONARY;
    end;

    fun fctenv (m::GENERIC { a_generic_api, ... } )
            =>
            fsgenv  a_generic_api;

        fctenv _
            =>
            NO_DICTIONARY;
    end;

    fun browse symbol_table symbol
        =
	case (se::get (symbol_table, symbol))
	  
	     b::NAMED_API b          =>   sigenv b;
	     b::NAMED_PACKAGE b          =>   strenv b;
	     b::NAMED_GENERIC_API b  =>   fsgenv b;
	     b::NAMED_GENERIC b            =>   fctenv b;
	     _                             =>   NO_DICTIONARY;
	esac
	except
            se::UNBOUND = NO_DICTIONARY;

    fun catalog  symbol_table
        =
        map  #1  (symbol_table::to_sorted_list  symbol_table);

							# symbol_table	is from   x
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
