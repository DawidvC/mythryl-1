## eta.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



# This file implements one of the fate-passing-style transforms.
# For context, see the comments in
#
#     src/lib/compiler/upper/highcode/highcode.api



#    "Elimination of eta-redexes:  Replaces all expressions of the form
#     \x.fx with f.  Because this tends to undo the work of etasplit and
#     because it is rarely beneficial, this phase is used only at the
#     very beginning to clean up the output of the FPS conversion, and
#     at the end when eta-redexes are not beneficial any more."
#
#     [...]
#
#    "It seemed easy and harmless to move eta-elimination into
#     'fcontract', and with similar benefits as above.  In retrospect,
#     it took a long time to debug, which, I later learned, was the
#     main reason why it was a separate phase in FPS."
#
#
#          -- Principled Compilation and Scavenging
#             Stefan Monnier, 2003 [PhD Thesis, U Montreal]
#             http://www.iro.umontreal.ca/~monnier/master.ps.gz 



# *********************************************************************
#                                                                     *
#   The function eta is an eta reducer for fps expressions.  It is    *
#   guaranteed to reach an eta normal form in at most two passes.  A  *
#   high-level description of the algorithm follows.                  *
#                                                                     *
#   eta essentially takes two arguments, a fps expression and an      *
#   dictionary mapping variables to values.  (In practice, the       *
#   dictionary is a global variable.)  The dictionary is used to    *
#   keep track of the eta reductions performed.  The algorithm can be *
#   explained by the two key clauses below (written in pseudo-fps     *
#   notation):                                                        *
#                                                                     *
#   [MUTUALLY_RECURSIVE_FNS]   eta (dictionary, *let* f[x1, ..., xN] = M1                          *
#                    *in*  M2)                                        *
#                                                                     *
#         --> let M1' = eta (dictionary, M1)                                   *
#             in  if M1' == g[x1, ..., xN]                               *
#                 then eta (dictionary[f := g], M2)                            *
#                 else *let* f[x1, ..., xN] = M1'                       *
#                      *in*  eta (dictionary, M2)                              *
#             end                                                     *
#                                                                     *
#   [APPLY]   eta (dictionary, f[v1, ..., vN])                                     *
#                                                                     *
#         --> dictionary (f)[dictionary (v1), ..., dictionary (vN)]                             *
#                                                                     *
#   In the [MUTUALLY_RECURSIVE_FNS] case of function definition, we first eta reduce the *
#   body M1 of the function f, then see if f is itself an eta         *
#   redex f[x1, ..., xN] = g[x1, ..., xN].  If so, we will use g for f    *
#   elsewhere in the fps expression.                                  *
#                                                                     *
#   The [APPLY] case shows where we must rename variables.              *
#                                                                     *
#   This would get all eta redexes in one pass, except for the        *
#   following problem.  Consider the fps code below:                  *
#                                                                     *
#          *let* f[x1, ..., xN] = M1                                    *
#          *and* g[y1, ..., yN] = f[x1, ..., xN]                          *
#          *in*  M2                                                   *
#                                                                     *
#   Suppose M1 does not reduce to an application h[x1, ..., xN].        *
#   If we naively reduce the expression as above, first reducing      *
#   the body M1 of f, then the body of g, then M2, we would get:      *
#                                                                     *
#        let M1' = eta (dictionary, M1)                                        *
#        in  *let* f[x1, ..., xN] = M1'                                 *
#            *in*  eta (dictionary[g := f], M2)                                *
#        end                                                          *
#                                                                     *
#   The problem with this is that M1 might have contained occurrences *
#   of g.  Thus g may appear in M1'.  There are a number of ways to   *
#   handle this:                                                      *
#                                                                     *
#    1) Once we perform an eta reduction on any function in a
#       MUTUALLY_RECURSIVE_FNS, we  must go back and re-reduce
#       any other functions of the MUTUALLY_RECURSIVE_FNS     *
#       that we previously reduced;                                   *
#    2) We do not go back to other functions in the
#       MUTUALLY_RECURSIVE_FNS, but instead make a second pass over the output of eta.                    *
#                                                                     *
#   As (1) can lead to quadratic behaviour, we implemented (2).       *
#                                                                     *
#                                                                     *
#   A final note: we recognize more than just                         *
#         f[x1, ..., xN] = g[x1, ..., xN]                                 *
#   as an eta reduction.  We regard the function definition           *
#         f[x1, ..., xN] = SELECT[1, v, g, g[x1, ..., xN]]                   *
#   as an eta redex as well, and so we reduce                         *
#      eta (dictionary,*let* f[x1, ..., xN] = SELECT[i, v, g, g[x1, ..., xN]]        *
#              *in*  M1)                                              *
#      --> SELECT (i, v, g, eta (dictionary[f := g], M1))                          *
#   This is implemented with the selectapp function below.            *
#                                                                     *
# *********************************************************************

api Eta {
     eta:  { function: fate_passing_style::Function,
	       click: String -> Void } -> fate_passing_style::Function;
};

package eta: (weak)  Eta {				# Eta		is from   src/lib/compiler/upper/fps-optimize/eta.pkg

    stipulate

        include fate_passing_style; 

	package lv= highcode_var;			# highcode_var	is from   src/lib/compiler/upper/highcode/highcode-var.pkg

	package intset {

	    Intset = Ref( int_red_black_set::Set );

	    fun new () = REF int_red_black_set::empty;

	    fun add set i =  set := int_red_black_set::add (*set, i);
	    fun mem set i =  int_red_black_set::member(*set, i);
	    fun rmv set i =  set := int_red_black_set::delete(*set, i);
	};

    herein

	fun eta { function => (fkind, fvar, fargs, ctyl, cexp),
		  click
		}
	    = 
	    {

		debug = *controls::cg::debugcps; #  FALSE 

		fun debugprint s = if  debug    controls::print::say s;    fi;
		fun debugflush () = if  debug    controls::print::flush();  fi;

		fun map1 f (a, b)
		    =
		    (f a, b); 

		fun member (i:  Int, a ! b)   =>   i == a or member (i, b);
		    member (i,[]) => FALSE;
		end;

		fun same (v ! vl, (VAR w) ! wl)   =>   v == w and same (vl, wl);
		    same (NIL, NIL)               =>   TRUE;
		    same _                        =>   FALSE;
		end;

		fun share_name (x, VAR y) => lv::share_name (x, y); 
		    share_name (x, LABEL y) => lv::share_name (x, y); 
		    share_name _ => ();
		end;

		exception M_TWO;

		my m:  int_hash_table::Hash_Table( Value )
		    =
		    int_hash_table::make_table (32, M_TWO);

		name = int_hash_table::get  m;

		fun rename (v0 as VAR v)   => (rename (name v) except M_TWO => v0; end );
		    rename (v0 as LABEL v) => (rename (name v) except M_TWO => v0; end );
		    rename x => x;
		end;

		fun newname x
		    =
		    {   share_name x;
			int_hash_table::set m x;
		    };

		stipulate

		    my km:  intset::Intset =  intset::new();

		herein

		    fun addvt (v, CNTT) => intset::add km v;
			addvt _ => ();
		    end;

		    fun addft (FATE, v, _, _, _) => intset::add km v;
			addft _ => ();
		    end;

		    fun is_cont v
			=
			intset::mem km v;
		end;

		id = (fn x = x);
		doagain = REF FALSE;

		recursive val pass2
		   = 
		   fn RECORD (k, vl, w, e) => RECORD (k, map (map1 rename) vl, w, pass2 e);
		      SELECT (i, v, w, t, e) => SELECT (i, v, w, t, pass2 e);
		      OFFSET (i, v, w, e) => OFFSET (i, v, w, pass2 e);
		      APPLY (f, vl) => APPLY (rename f, map rename vl);
		      SWITCH (v, c, el) => SWITCH (v, c, map pass2 el);
		      BRANCH (i, vl, c, e1, e2) =>
			   BRANCH (i, map rename vl, c, pass2 e1, pass2 e2);
		      LOOKER (i, vl, w, t, e) => LOOKER (i, map rename vl, w, t, pass2 e);
		      ARITH (i, vl, w, t, e) => ARITH (i, map rename vl, w, t, pass2 e);
		      PURE (i, vl, w, t, e) => PURE (i, map rename vl, w, t, pass2 e);
		      SETTER (i, vl, e) => SETTER (i, map rename vl, pass2 e);
		      RAW_C_CALL (k, l, p, vl, wtl, e) => RAW_C_CALL (k, l, p, map rename vl, wtl, pass2 e);

		      MUTUALLY_RECURSIVE_FNS (l, e)
                          =>
			  MUTUALLY_RECURSIVE_FNS ( map  (fn (fk, f, vl, cl,       body) =
                                         (fk, f, vl, cl, pass2 body)
                                     )
                                     l,
			        pass2 e
                              );
		    end;

		recursive val reduce
		    = 
		    fn  RECORD (k, vl, w, e) => RECORD (k, map (map1 rename) vl, w, reduce e);
			SELECT (i, v, w, t, e) => { addvt (w, t); SELECT (i, v, w, t, reduce e);};
			OFFSET (i, v, w, e) => OFFSET (i, v, w, reduce e);
			APPLY (f, vl) => APPLY (rename f, map rename vl);
			SWITCH (v, c, el) => SWITCH (v, c, map reduce el);
			BRANCH (i, vl, c, e1, e2) => BRANCH (i, map rename vl, c, reduce e1, reduce e2);

			LOOKER (i, vl, w, t, e) => { addvt (w, t);  LOOKER (i, map rename vl, w, t, reduce e); };
			ARITH  (i, vl, w, t, e) => { addvt (w, t);  ARITH  (i, map rename vl, w, t, reduce e); };
			PURE   (i, vl, w, t, e) => { addvt (w, t);  PURE   (i, map rename vl, w, t, reduce e); };

			SETTER (i, vl, e) => SETTER (i, map rename vl, reduce e);

			RAW_C_CALL (k, l, p, vl, wtl, e)
                            => 
			    {   apply addvt wtl;
                                RAW_C_CALL (k, l, p, map rename vl, wtl, reduce e);
                            };

			MUTUALLY_RECURSIVE_FNS (l, e)
			    =>
			    case (eta_elim l) 
				 ([], h, _) => h  (reduce e);
				 (l', h, _) => h  (MUTUALLY_RECURSIVE_FNS (l', reduce e));
			    esac
                            where

			        apply addft l;

				fun eta_elim NIL => (NIL, id, FALSE);

				    eta_elim((fk as NO_INLINE_INTO, f, vl, cl, body) ! r)
					=> 
					{   my (r', h, leftover) = eta_elim r;
					    body' = reduce body;
					    ((fk, f, vl, cl, body') ! r', h, TRUE);
					};

				    eta_elim((fk, f, vl, cl, body) ! r)
					=>
					{   my (r', h, leftover) = eta_elim r;

					    fun right_kind (VAR v | LABEL v)
						    => 
						    ((fk == FATE) == (is_cont v));

						right_kind _
                                                     =>
                                                     FALSE;
					    end;

					    fun selectapp (SELECT (i, VAR w, v, t, e))
						    =>
						    case (selectapp e )

						       NULL => NULL;

						       THE (h', u)
                                                           =>
							   if (not (member (w, f ! vl)))    THE (fn ce = SELECT (i, VAR w, v, t, h' ce), u);
							   else                             NULL;
                                                           fi;
						    esac;

						selectapp (APPLY (g, wl))
						    =>
						    {   g' = rename g;

							z  =  case g'   VAR   x =>  member (x, f ! vl);
									LABEL x =>  member (x, f ! vl);
									_       =>  FALSE;
                                                              esac;

						        if (((not z) and (same (vl, wl)))
								    and (right_kind g'))     

							     THE  (fn ce = ce,  g');
							else NULL;
                                                        fi;
						    };

						selectapp _ => NULL;
					    end;

					    paired_lists::apply addvt (vl, cl);
					    body' = reduce body;

					    case (selectapp  body')

						 NULL => ((fk, f, vl, cl, body') ! r', h, TRUE);

						 THE (h', u)
                                                     =>
                                                     {   if leftover  doagain := TRUE;   fi;

							 click "e";
							 newname (f, u);
							 (r', h' o h, leftover);
                                                     };
					    esac;
					};
				end;					# fun eta_elim
			    end;
		    end;

		    # Body of eta:
		    #	
		    debugprint "Eta: ";
		    debugflush();
		    cexp' = reduce cexp;
		    debugprint "\n";

		    debugflush ();

		    if (not *doagain)

			 (fkind, fvar, fargs, ctyl, cexp');
		    else
			 debugprint "Eta: needed second pass\n";
			 debugflush ();
			 (fkind, fvar, fargs, ctyl, pass2 cexp');
		    fi;

	    };			#  fun eta 
    end;			#  toplevel stipulate 
};				#  package eta 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
