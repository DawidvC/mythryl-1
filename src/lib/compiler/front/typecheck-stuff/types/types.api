## types.api
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# Datastructures describing type declarations.
#
# In particular, the enum
#
#     Type_Constructor
#
# provides the value type bound by the symbol table
# for that namespace -- see OVERVIEW section in
#
#     compiler/typecheck-stuff/symbol-table/symboltable.sml



api Types {

    #  Not quite abstract types... 
    Label;                 				#  = symbol::Symbol 
    Type_Scheme_Arg_Eq_Properties;		#  = List( Bool )



    # Mythryl semantics distinguish types whose values
    # may be compared for equality (e.g., integers),
    # which get declared 'eqtype', from those which may not.
    #
    # This distinction dates from the original Definition of
    # Standard ML. The distinction complicates the semantics
    # greatly and is nowadays regarded as a design flaw.
    #
    # The latest type-theoretical treatments of ML semantics
    # infer equality test support for a type silently without
    # explicit user declarations, but for the moment at least
    # the Mythryl compiler still follows the old semantics.
    # 
    # The following type lets us record what we know about the
    # equality properties of a type during the type inference
    # process.  YES and NO represent definite knowledge and
    # INDETERMINATE means we haven't yet learned anything
    # one way or the other.  The remainder cover various
    # special cases.
    # 
    Equality_Property
        = YES
        | NO
        | INDETERMINATE					# This was "IND", which I'm guessing is cryptic for "INDETERMINATE" -- 2009-03-21 CrT
        | CHUNK
        | DATA
        | EQ_ABSTRACT					# Used to implement "abstype" declarations.
        | UNDEF;

    Literal_Kind
        =
        INT | WORD | REAL | CHAR | STRING;


    # The following variable types are core to the
    # Mythryl Hindley-Milner type deduction logic
    # implemented by code centered in the vicinity of
    # 
    #     src/lib/compiler/front/typechecker/typecheck/typecheck-package-language-g.pkg
    #     src/lib/compiler/front/typechecker/types/unify-and-generalize-types-g.pkg
    #     src/lib/compiler/front/typechecker/types/unify-types.pkg
    #     src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg
    # 
    # The canonical type inference progression is
    #     USER_TYPE_VARIABLE -> META_TYPE_VARIABLE -> RESOLVED_TYPE_VARIABLE.
    # 
    # Type variables supplied by the user like the X in
    #     my (foo: X) = ... ;
    # start out represented as USER_TYPE_VARIABLE records.
    #
    # When permitted by the "value restriction" (see is_value in type-stuff.pkg),
    # they get generalized to polymorphic META_TYPE_VARIABLE records.
    #
    # INCOMPLETE_RECORD_TYPE_VARIABLE records are used to track incompletely specified
    # records, canonically those declared using "..." ellipses.
    #
    # When we infer a type for a META_TYPE_VARIABLE record we replace it by a RESOLVED_TYPE_VARIABLE record.
    #
    # LITERAL_TYPE_VARIABLE records are used in inferring the types of literals like '0',
    # which may resolve to any one of several different arithmetic types.
    #
    # OVERLOADED_TYPE_VARIABLE is used in resolving the types of + and other overloaded operators.
    # The Bool value is TRUE iff it must resolve to an equality type.
    #


									# symbol	is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
    Type_Variable

        # A user type variable like 'X' which
        # has not been generalized into a
        # META_TYPE_VARIABLE
        # variable, either because generalization
        # has not yet been done or because the
        # type_stuff::is_value() "value restruction"
        # forbade doing so:
        #
	= USER_TYPE_VARIABLE {
	    name:        symbol::Symbol,				# X or such.  Construct via  symbol::make_type_variable_symbol.
	    eq:          Bool,						# Must it resolve to an 'equality type'?
            fn_nesting:  Int						# Outermost fun/fn lexical context mentioning/using us.
									#   fn_nesting = infinity for type variables like X.
									#   fn_nesting < infinity for fun/fn arguments.
	  }

	# A polymorphic type variable.
        #
        #
	| META_TYPE_VARIABLE {
	    eq:          Bool,						# Must it resolve to an 'equality type'?
            fn_nesting:  Int						# Outermost fun/fn lexical context mentioning/using us.
	  }

        # An incompletely specified record type,
        # typically (always?) one specified
	# using "..." ellipses in the source code:
	#
	| INCOMPLETE_RECORD_TYPE_VARIABLE {
	    known_fields: List( (Label, Type) ),
	    eq:           Bool,						# Must it resolve to an 'equality type'?
            fn_nesting:   Int						# Outermost fun/fn lexical context mentioning/using us.
	  }

	# When we resolve a META_TYPE_VARIABLE
        # to a concrete type, we replace it by this:
	#
	| RESOLVED_TYPE_VARIABLE  Type

	# Arithemtic literals like '0' may resolve to
	# several different types (Int, Unt, Integer...).
	# This represents one whose type has not yet
	# been resolved:
	#
	| LITERAL_TYPE_VARIABLE {
            kind:               Literal_Kind,
	    source_code_region: source_map::Source_Code_Region		# source_map	is from   src/lib/compiler/front/basics/source/source-map.pkg
	  }

	# Deducing the type of overloaded operators
	# like '+' is a separate kludge from regular
	# Hindley-Milner type inference.  This represents
	# an overloaded operator not yet resolved to a
	# specific type.  The Boolean argument records
	# whether it must resolve to an equality type:
	#
	| OVERLOADED_TYPE_VARIABLE  Bool

	# For marking a type variable so that it can be easily identified
	#
	# A type variable's REF cell provides an identity already, but
	# since REF cells are unordered, this is not enough for efficient
	# data package lookups (binary trees...).
	#
	# TYPE_VARIABLE_MARK is really a hack for the benefit of
	# later translation phases, specifically:
        #     src/lib/compiler/upper/translate/translate-types.pkg
        #     src/lib/compiler/upper/translate/translate-deep-syntax-to-polylambda.pkg
	#
	# In any case, we should figure out how to get rid of it altogether. XXX BUGGO FIXME
	#
	| TYPE_VARIABLE_MARK  Int


    also
    Type_Constructor_Path
	= TYPCONPATH_VARIABLE          Exception
	| TYPCONPATH_TYPE_CONSTRUCTOR  Type_Constructor
	| TYPCONPATH_GENERIC           (List( Type_Constructor_Path ), List( Type_Constructor_Path ))
	| TYPCONPATH_APPLY             (Type_Constructor_Path, List( Type_Constructor_Path ))
	| TYPCONPATH_SELECT            (Type_Constructor_Path, Int)

    also
    Type_Constructor_Kind
	= PRIMITIVE  Int		#  primitive kinds are abstractly numbered 
	| ABSTRACT  Type_Constructor
	| DATATYPE  {
            index:                   Int,
	    stamps:                  Vector( stamp::Stamp ),
	    root:                    Null_Or( module_path::Module_Stamp ),
	    free_type_constructors:  List( Type_Constructor ),
	    family:                  Datatype_Family
	  }
	| FLEXIBLE_TYPE_CONSTRUCTOR  Type_Constructor_Path
	| FORMAL
	| TEMP

    also
    Type_Constructor
	= PRIMITIVE_TYPE_CONSTRUCTOR  Primitive_Type_Constructor_Record			# Seems to be mainly (only?) used for prim types like char/string/int/real/...

	| DEFINED_TYPE_CONSTRUCTOR  {
            stamp:          stamp::Stamp,					# stamp		is from   src/lib/compiler/front/typecheck-stuff/basics/stamp.pkg
	    type_scheme:     Type_Scheme,
	    strict:         List( Bool ),
	    path:           inverse_path::Inverse_Path				# inverse_path	is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	  }

	| TYPE_CONSTRUCTOR_BY_MODULE_PATH  {
            arity:          Int,
	    module_path:    module_path::Module_Path,				# module_path	is from   src/lib/compiler/front/typecheck-stuff/modules/module-path.pkg
	    path:           inverse_path::Inverse_Path				# inverse_path	is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	  }

	| RECORD_TYPE_CONSTRUCTOR  List( Label )
	| RECURSIVE_TYPE  Int		# Used only in domain type of Constructor_Description 
	| FREE_TYPE       Int		# Used only in domain type of Constructor_Description 
	| ERRONEOUS_TYPE_CONSTRUCTOR

    # Core types:
    #
    #  o TYPE_VARIABLE_REF
    #    This marks the reference cells which get
    #    updated by the 'unify' operation during
    #    Hindley-Milner type inference.  Once type
    #    inference is complete these are deadwood
    #    and we remove them at the first opportunity.
    #
    #  o WILDCARD_TYPE
    #    This matches anything during type inference.
    #
    #    We use it, for example, for the return type
    #    of 'raise MY_EXCEPTION' statements:  Since
    #    'raise' in fact never returns it is ok to
    #    treat it as though it had whatever type the
    #    local context requires, possibly a different type
    #    each place it appears in the code.
    #
    #    We also use it in error recovery.   When a type
    #    has syntax errors we set it to WILDCARD_TYPE
    #    after issuing diagnostics, so that we can compile
    #    the rest of the file without generating spurious
    #    additional error messages.
    #
    #  o CONSTRUCTOR_TYPE
    #    This represents a type constructor like List
    #    which takes one or more types as arguments
    #    and returns a new type:  List(Int) and List(Float)
    #    are different types generated this way, for example.
    #
    #  o TYPE_SCHEME_TYPE
    #    See comments below at Type_Scheme.
    #
    #  o TYPE_SCHEME_ARG_I
    #    This represents the i-th type argument to a type scheme.
    #    It will only appear within the body of a type scheme.
    #
    #  o UNDEFINED_TYPE
    #    This represents a type which we need to know but do not
    #    currently know.  It is a compile error if we do not find
    #    a user definition of this type by the end of type inference.
    #
    also
    Type
	= TYPE_VARIABLE_REF  Typevar_Ref
	| WILDCARD_TYPE
	| CONSTRUCTOR_TYPE  (Type_Constructor, List( Type ))
	| TYPE_SCHEME_TYPE  {
            type_scheme:                    Type_Scheme,
            type_scheme_arg_eq_properties:  Type_Scheme_Arg_Eq_Properties	# Records which Type_Scheme args need to resolve to equality types.
          }
	| TYPE_SCHEME_ARG_I       Int						# i-th argument to a Type_Scheme (qv)
	| UNDEFINED_TYPE

    # Mythryl supports "don't-care" type polymorphism.
    # "Polymorphic" literally means "many-shapes".
    # A type-polymorphic function acts as though it
    # has many types.
    #
    # Don't-care polymorphism is what lets list::length()
    # compute the length of a list of any type of value
    # without triggering complaints from the typechecker.
    # It is also called "parametric polymorphism" and
    # "let-polymorphism".
    #
    # Type schemes implement polymorphic types.
    # The idea is that instead of assigning a type-polymorphic
    # function like list::length() a regular type,
    # we assign it a "type scheme", which is essentially
    # a type macro which we will expand into an actual
    # type at each place in the code where the function
    # is used.  Since we can expand the "type scheme"
    # macro with different type arguments each time,
    # the function can behave as though it had a different
    # type every time it is called.
    # 
    # Our type schemes are essentially templates for producing
    # regular types by plugging fresh META type variables into
    # slots marked by TYPE_SCHEME_ARG_I values, a procedure
    # implemented by
    #
    #     instantiate_if_type_scheme()
    #
    # from
    #
    #     src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg 
    #
    # For more background see the discussion near the top of
    #
    #     src/lib/compiler/front/typechecker/types/unify-and-generalize-types-g.pkg
    #
    also
    Type_Scheme
        =
        TYPE_SCHEME  {
          arity:  Int,		# Number of arguments
          body:   Type		# Contains TYPE_SCHEME_ARG_I values marking where fresh META type variables get inserted.
        }

    #  Constructor description used in Datatype_Member 

    withtype
    Constructor_Description
        =
        { name:             symbol::Symbol,
	  representation:   var_home::Constructor_Form,	# var_home	is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	  domain:           Null_Or( Type )
        }

    #  member of a family of (potentially) mutually recursive datatypes 

    also
    Datatype_Member
        =
        { type_constructor_name:   symbol::Symbol,
	  arity:                   Int,
	  eq:                      Ref( Equality_Property ),

	  is_lazy:                 Bool,
	  constructor_list:        List( Constructor_Description ),
	  an_api:                  var_home::Constructor_Signature
        }

    also
    Datatype_Family
        =
        { mkey:          stamp::Stamp,						# stamp		is from   src/lib/compiler/front/typecheck-stuff/basics/stamp.pkg
	  members:       Vector( Datatype_Member ),
	  property_list: property_list::Property_List				# property_list	is from   src/lib/src/property-list.pkg
	}


    also
    Stub_Info
        =
        { owner:  picklehash::Picklehash,					# picklehash	is from   src/lib/compiler/front/basics/mlcomp/picklehash.pkg
	  lib:    Bool
	}

    # The "stub" field will be set for any
    # Primitive_Type_Constructor that comes 
    # out of the unpickler.
    #
    # The stub owner picklehash is the picklehash
    # of the compilation unit on whose behalf this
    # Primitive_Type_Constructor was pickled.
    #
    # Normally, this is expected to be the same as
    # the picklehash in the (global) "stamp", but there are
    # odd cases related to recursive types where this
    # assumption breaks.
    # (Is there a way of fixing this? -M.) XXX BUGGO FIXME
    #
    also
    Primitive_Type_Constructor_Record
        =
        { stamp:  stamp::Stamp,							# stamp		is from   src/lib/compiler/front/typecheck-stuff/basics/stamp.pkg
	  arity:  Int,
	  eq:     Ref( Equality_Property ),
	  kind:   Type_Constructor_Kind,
	  path:   inverse_path::Inverse_Path,					# inverse_path	is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	  stub:   Null_Or( Stub_Info )
	}

    # The 'Ref' below is the core hook for doing
    # type inference via unification:  Unification
    # proceeds by re/setting these variables.  The
    # core unification code is in
    # 
    #   src/lib/compiler/front/typechecker/types/unify-types.pkg
    # 
    also
    Typevar_Ref
        =
        { ref_typevar:  Ref( Type_Variable ),				
          id:           Int							# Purely for debuggging printout purposes.
        };


    infinity:                 Int;
    copy_type_variable_ref:   Typevar_Ref            -> Typevar_Ref;
    make_type_variable_ref:   (    Type_Variable , List(String)) -> Typevar_Ref;
    make_type_variable_ref':  (Ref(Type_Variable), List(String)) -> Typevar_Ref;

#    next_type_variable_id: Void -> Int; 

			#  Data constructors 
										# symbol	is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
										# var_home	is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
    Constructor
        =
        ENUM_CONSTRUCTOR  {
	  symbol:            symbol::Symbol,
	  constructor_type:  Type,
	  representation:    var_home::Constructor_Form,
	  is_lazy:           Bool,        			#  LAZY 
	  const:             Bool,    				#  redundant, could be determined from type 
	  signature:         var_home::Constructor_Signature	#  redundant, could be determined from type 
        };

}; #  Api Types 
