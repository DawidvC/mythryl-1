#  Compute the equivalence classes from a list of regular expressions 
api EQUIV_CHAR_CLASS =
api

   package r:    Abstract_Regular_Expression
   package eqv:  EQUIV_CLASS_TABLE

   my partition:  Eqv::equivclass -> r::syntax -> Void
end

generic package EquivCharClassFn (R:  Abstract_Regular_Expression) : 
   EQUIV_CHAR_CLASS where R = R =
package {

   package r    = R
   package char = r::char
   package eqv  = EquivClassTable

   fun partition eqv =
   let single = Eqv::single eqv
       set = Eqv::set eqv
       toList = r::CharSet::fold_right (fn (c, s) => char::to_int c . s) []
       fun walk (r::Group e) = walk e
         | walk (r::Alt es) = apply walk es
         | walk (r::Concat es) = apply walk es
         | walk (r::Star e) = walk e
         | walk (r::Option e) = walk e
         | walk (r::Plus e) = walk e
         | walk (r::Interval (e, _, _)) = walk e
         | walk (r::Guard(_, e)) = walk e
         | walk (r::Ref _) = ()
         | walk (r::Assign(_, _, e)) = walk e 
         | walk (r::Begin) = ()
         | walk (r::End) = single 10 #  Character code is 10 
         | walk (r::Boundary _) = ()
         | walk (r::Char c) = single (char::to_int c) 
         | walk (r::MatchSet s) = set (toList s) 
         | walk (r::NonmatchSet s) = set (toList s) 
   in  walk 
   end

}
