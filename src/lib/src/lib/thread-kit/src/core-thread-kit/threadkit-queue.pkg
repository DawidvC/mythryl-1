## threadkit-queue.pkg
## COPYRIGHT (c) 1989-1991 John H. Reppy

# Compiled by:
#     src/lib/std/stdlib.make6



# These are the basic scheduling queues used
# throughout the threadkit implementation.
#
# We make the representation concrete, so that
# other modules can inline the operations.
# (Someday we'll be able to count on the
# compiler for that...)


									# internal_threadkit_types	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/internal-threadkit-types.pkg

package threadkit_queue: (weak)  api {

    Threadkit_Queue(X);		 #  = internal_threadkit_types::queue( X )

    make_threadkit_queue:  Void -> Threadkit_Queue(X);
	#
	# Create a new queue. 

    same_queue:  (Threadkit_Queue(X), Threadkit_Queue(X)) -> Bool;
	#
	# Return TRUE, if the two queues are the same 

    is_empty:  Threadkit_Queue(X) -> Bool;
	#
	# Return TRUE, if the queue is empty.

    enqueue:  (Threadkit_Queue(X), X) -> Void;
	#
	# Enqueue an item in the queue.

    exception EMPTY_THREADKIT_QUEUE;

    dequeue:  Threadkit_Queue(X) -> X;
	#
	# Dequeue an item;
        # raise EMPTY_QUEUE if the queue is empty.

    next:  Threadkit_Queue(X) -> Null_Or( X );
	#
	# Dequeue and return then next item in the queue.
	# Return NULL if the queue is empty.

    reset:  Threadkit_Queue(X) -> Void;
	#
	# Reset a queue to all empty.

    remove:  (Threadkit_Queue(X), (X -> Bool)) -> Void;
	#
	# Find and remove the first item that satisfies the predicate. 

}
{   Threadkit_Queue == internal_threadkit_types::Threadkit_Queue;

    fun reverse (x, [], rl) => (x, rl);
        reverse (x, y ! rest, rl) => reverse (y, rest, x ! rl);
    end;

    fun reverse_and_prepend ([], l) => l;
        reverse_and_prepend (x ! r, l) => reverse_and_prepend (r, x ! l);
    end;

    fun make_threadkit_queue ()
        =
        THREADKIT_QUEUE { front => REF [],
                rear  => REF []
              };

    fun same_queue (THREADKIT_QUEUE { front=>f1, ... }, THREADKIT_QUEUE { front=>f2, ... } )
        =
        f1 == f2;

    fun is_empty (THREADKIT_QUEUE { front => REF [], rear => REF [] } )
	    =>
            TRUE;

        is_empty _
	    =>
	    FALSE;
    end;


    fun enqueue (THREADKIT_QUEUE { rear, ... }, item)
        =
        rear := item ! *rear;


    exception EMPTY_THREADKIT_QUEUE;


    fun dequeue (THREADKIT_QUEUE { front, rear } )
        =
        case *front
	  
	    (x ! r)
		=>
		{   front := r;
                    x;
                };

	    [] => case *rear

		      (x ! r) => {   my (y, rr)
					 =
					 reverse (x, r, []);

				     front := rr; rear := []; y;
				 };

		      [] => raise exception EMPTY_THREADKIT_QUEUE;
		  esac;

        esac;


    fun next (THREADKIT_QUEUE { front, rear } )
        =
        case *front
	  
	    (x ! r)
		=>
		{   front := r;
		    THE x;
                };

	    [] => case *rear

		      (x ! r)
			=>
			{   my (y, rr)
				=
				reverse (x, r, []);

			    front := rr; rear := []; THE y;
			};

		      [] => NULL;
		  esac;
	esac;


    fun reset (THREADKIT_QUEUE { front, rear } )
        =
        {   front := [];
            rear  := [];
        };

    exception REMOVE;

    fun remove (THREADKIT_QUEUE { front, rear }, prior)
        =
	get_f (*front, [])
        where
            fun get_f ([], l)
                    =>
                    get_r(*rear, []);

	        get_f (x ! r, l)
                    =>
		    if (prior x)  front := reverse_and_prepend (l, r); else get_f (r, x ! l);fi;
            end 

	    also
	    fun get_r ([], _) => raise exception REMOVE;
	        get_r (x ! r, l)
                    =>
		    if (prior x)  rear := reverse_and_prepend (l, r); else get_r (r, x ! l);fi;
            end;
	end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
