fun make file = if cm::make file then () else raise exception FAIL("Can't load "$file);
fun again () = run "make.pkg";

make "$/c-kit-lib.make6";
make "$/smlnj-lib.cm";
make "../ffi-packager/ffi-packager.cm";


# --------------------------------------------------------------------------
# This is a program that drives the entire gtk library packaging process.
# Originally I wrote this as a bash script, then a perl script.
# But the job turns out to be too complex, so I've finally started 
# using ML to do it.
# --------------------------------------------------------------------------

local use ffi_packager
      package a = Ast
      filename = "sml-gtk-runtime-ffi/s-smlgtk_event.pkg"
      prog = io::read_file filename
      fun decl (a::FUNdecl[a::FUNbind(("abstract'"|"concrete'"), _)]) = a::SEQdecl []
        | decl d = d
      prog = decl::map [Map::D decl] prog
      my ()   = io::writeFile([io::OUTFILE filename], prog)
in    
end 

package p =
gift_wrap_g
(  use ffi_packager gift_wrap_defaults
  
   name     = "gtk"
   name'    = "gtk"
   version  = "0.1.4"
   enums    = [("Glib-enums.sml", "glib_enums", "^g_"),         # Was ^G_ -- CrT 2007-05-30
                   ("Gdk-enums.sml", "gdk_enums", "^gdk_"),        # Was ^GDK_ -- CrT 2007-05-30
                   ("Gtk-enums.sml", "gtk_enums", "^gtk_")        # Was ^GTK_ -- CrT 2007-05-30
                  ]
   file_regexp = "(gtk|gtk|glib)"

   #  make the library lighter! 
   remove_rtti = TRUE

   #  make constructors for non gtk types 
   make_constructor = re::matches "^Gdk (Box|Color)"
   make_accessors   = re::matches "^(Gtk|Gdk)"
   make_mutators    = re::matches 
       "^Gdk (Box|Color)|Gtk (Widget|Object|Style|Allocation|Adjustment)$" 

   macros_file = "macros.pkg"

   package a    = Ast
   package u    = AstUtil
   package nlffi= lib7_nlffi_gen_info
   package obj  = object_maker

   /*------------------------------------------------------------------------
    *
    * Some common routines
    *
    *------------------------------------------------------------------------*/
   stripGtk = re::replace "^_?[Gg]tk" ""
   noUnderscore = re::replace "^_+" ""

   /*------------------------------------------------------------------------
    *
    * Initialization
    *
    *------------------------------------------------------------------------*/
   fun init info
       = 
       let 
	  /*-------------------------------------------------------------------
	   * 
	   * Create the gtk hierarchy
	   *
	   *-------------------------------------------------------------------*/

	   fun ok t
	       =
	       re::matches "^_?Gtk" t and not (re::matches "Class$" t);

	   gtkClasses
               = 
	       obj::makeObjectHier
		     { info, filter=ok, name="gtk",
		      tag=fn t => to_lower (stripGtk t)$"_t",
		      root="_GtkObject",
		      downcast=fn t => "as"$stripGtk t,
		      ml=noUnderscore, str="Gtk"
		     };

	   objects := [ gtkClasses ];

	   isGtkClass =   obj::is_member gtkClasses;
	   toGtkClass =   obj::findClass gtkClasses;
	   toGtkType  =   obj::ml gtkClasses;

	  /*-------------------------------------------------------------------
	   * 
	   * Generate the files Gtk.sig and Gtk.sml
	   *
	   *-------------------------------------------------------------------*/
	  local  
	     my { sign, str } = obj::genTypeDefs gtkClasses
	     sign = sign @ [io::read_verbatim "Gtk-include.api"]
	     str  = str  @ [io::read_verbatim "Gtk-include.pkg"]
	     sign = a::API_DECL("GTK", a::DECLsig sign)
	     str  = a::PACKAGE_DECL("Gtk",[],
			  THE { abstract=TRUE, api_expression=a::IDsig (a::IDENT([], "GTK")) },
			       a::DECLsexp str)
	  in
	     my () = 
	      (cm::add (info, "api GTK", "../Gtk.sig");
	       cm::add (info, "package gtk", "../Gtk.sml (lambdasplit: infinity)");
	       writeFile (info, "Gtk.sig", sign);
	       writeFile (info, "Gtk.sml", str)
	      )
	  end;

	  /*-------------------------------------------------------------------
	   * 
	   * Define some type transformations.
	   *
	   *-------------------------------------------------------------------*/
	  use ffi_transforms Tr;
	  infix || && ;

	  Bool =   BoolIfCtypeIs "gboolean";

	  /* 
	   * Convert (ST__GtkXXX::tag, rw) ptr' to X GtkXXX
	   */

	  findGtk =   re::grep "^\\(ST_(_+Gtk.*)\\.tag, rw\\) su_obj ptr'$" o Ty::show;

	  findConstr =   re::grep "^(.*)_new(_with_.*)?$";

	  fun gtkArg (f, st) (x, TYP { ty, cty, mode, ... } )
              =
	      (case findGtk ty of
		 THE[t] =>
		 if isGtkClass t then
		   (addOpen (st, "Gtk");
		    ((x, TYP { ty=Ty::parse (newVar st$" "$toGtkType t),
			    cty, mode } ),[],[])
		   )
		 else raise exception Skip
	      | _ => raise exception Skip
	      );

	  /* 
	   * Convert (ST__GtkXXX::tag, rw) su_obj ptr' to base GtkXXX
	   * If it is a constructor then convert to the return class 
	   */
	  fun gtkRet promote (f, st) (x, TYP { ty, cty, mode, ... } )
	     =
	     (case (findGtk ty, findConstr (fn::cname f)) of
	       (THE[t], NULL) =>  #  non class constructor 
		if isGtkClass t then
		   (addOpen (st, "Gtk"); 
		    ((x, TYP { ty=Ty::parse("base "$toGtkType t),
			    cty, mode } ), [], [])
		   )
		else raise exception Skip
	     | (THE[t], THE (t' . _)) =>  #  A class constructor 
		 (case toGtkClass (t') of
		   THE t' =>
		    (addOpen (st, "Gtk");
		     ((x, TYP { ty=
			  Ty::parse("base "$toGtkType (if promote then t' else t)),
			     cty, mode } ), [], [])
		    )
		 | NULL => raise exception Skip
		 )
	     | _ => raise exception Skip
	     );

	  gtk  =   ForeachIn gtkArg o ForeachOut (gtkRet TRUE);
	  gtk' =   ForeachIn gtkArg o ForeachOut (gtkRet FALSE);

	  /* 
	   * Call by reference -> call by value 
	   */
	  local use nlffi::T
	  in
	     pp = TyP (ptr' (obj (ptr any, rw)))
	     pi = TyP (ptr' (primObj rw (re::matches "int|short|float|double")))
	  end

	  call_by_value
              =
              ForeachIn 
		  (Do
		   [If (FunCnameMatches "_(get|query)(_|$)" && (pi || pp))
			(FastCallByValue None),
		    If (FunCnameIs "gtk_accelerator_parse" && Args[1, 2])
			(FastCallByValue None)
		   ] 
		  );

	  /* 
	   * Flatten simple structures like GdkRectangle
	   */
	  flatten
              =
              ForeachIn 
		  (If (TyMatches "GdkRectangle") 
		      (Do [If (FunCnameIs "gtk_widget_draw") 
			      (OptPtrArg (TupleStructPtrArg None)),
			   TupleStructPtrArg None
			  ]
		      )
		  )

	  /*
	   * Everything together 
	   */
	  convert  =   gtk o FastString o Bool o call_by_value o flatten;


          tr::declare info "^f-" convert;
       }

   /*------------------------------------------------------------------------
    *
    * Create "messages" for Gtk functions
    *
    *------------------------------------------------------------------------*/
   fun f_files (info, str, f, g)
       =
       if re::matches "^gtk_" (fn::cname f)
       then
	     {   fun isMessage selfTy
                   =
		   case re::grep "X (Gtk.*)$" (Ty::show selfTy) of
		      THE[a_class] =>
			 re::matches ("^"$ml::typeName a_class) (fn::cname f) 
		    |  _ => FALSE

		 fun add (m, ty, code)
                     = 
		     {   str::addToSig (str, a::VALSIGdecl([m], ty));
			 str::addToBody (str, code);
		     }

		 fun create (m, pat, self, [], ty)
                         = 
			 add (m, fn::ty f, u::MY (m, u::ID "f")) 

		   | create (m, pat, self, args, argTy)
			 =
			 {   pats = [pat, a::IDpat "obj"];
			     exp  = u::APPLY("f", a::TUPLEexp (map u::ID ("obj" . args)));
			     sign = a::FUNty (argTy, a::FUNty (self, a::TUPLEty []));
			     code = a::FUNdecl[a::FUNbind (m,
					     [a::CLAUSE (pats, NULL, exp)])];
			     add (m, sign, code);
			 }

		 fun makeTupleFn (m, self, args)
                     =
		     {   fun var i = "x"$int::to_string i;
 
			 vars = list::tabulate (length args, var);
			 pat  = a::TUPLEpat (map a::IDpat vars);
			 ty   = a::TUPLEty args;

		         create (m, pat, self, vars, ty);
		     }

		 fun makeRecordFn (m, self, selfTy, args)
                     =
		     {   pat =   a::RECORDpat (map (fn (x, _) => (x, a::IDpat x)) args,
					       FALSE);
			 vars = map (fn (x, _) => x) args;
			 ty   = a::RECORDty args;

		         create (m, pat, selfTy, vars, ty);
		     }

		 fun make (ty, m) = 
		   case ty of
		   a::FUNty (a::TUPLEty (self . args), a::TUPLEty []) => 
		     if isMessage self then makeTupleFn (m, self, args)
		     else ()
		 | a::FUNty (a::RECORDty((self, ty) . args), a::TUPLEty []) => 
		     if isMessage ty then makeRecordFn (m, self, ty, args)
		     else ()
		 | a::FUNty (self, a::TUPLEty []) =>   
		     if isMessage self then makeTupleFn (m, self,[])
		     else ()
		 | _ => ()
	     in  make (fn::ty f, "m");
		 make (fn::labTy g, "m'") except _ => ()
	     end
       else ()


   /*------------------------------------------------------------------------
    *
    * Generate macros
    *
    *------------------------------------------------------------------------*/
   macros_header = [A.@@@["use C Gtk",
                            "infix --> @",
                            "fun ptr --> { deref, get } = deref ptr",
                            "fun obj @ { deref, get } = get obj"
                           ]
                       ]
   macros_file = "macros.pkg"

   /*
    * Cleanup Action 
    */
   fun cleanup info =  
       (cm::add (info, "package gtk_downcast", "../Gtk-downcast.pkg");
        winix::process::system("cd Gadgets; make wrapper");
        ()
       )
)


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
