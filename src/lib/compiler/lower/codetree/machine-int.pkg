## machine-int.pkg
#
# How to evaluate constants for various widths.
# 
# Internally, we represent machine_int as a signed integer.
# So when we do bit or unsigned operations we have to convert to
# the unsigned representation first.
#
# Note: this implementation requires bitwise_and, bitwise_or, bitwise_xor etc in 'integer'.
# You have to upgrade to the latest version of lib7 if this
# fails to compile.

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



###                   "What we need are notions, not notations."
###                                  -- Carl Friedrich Gauss



stipulate

    max_size = 65;

herein

    package machine_int: (weak)  Machine_Int {		# Machine_Int	is from   src/lib/compiler/lower/codetree/machine-int.api


	package i= integer;	# integer	is from   src/lib/std/integer.pkg
	package s= string;	# string	is from   src/lib/std/string.pkg

	Machine_Int = i::Int;
	Sz = Int;

	Div_Rounding_Mode
	  = DIV_TO_ZERO
          | DIV_TO_NEGINF;

	itow =   unt::from_int;

	#  Parse hex or binary, but not octal:	# XXX BUGGO FIXME

	hex_to_int =   string_conversion::scan_string (i::scan string_conversion::HEX);
	bin_to_int =   string_conversion::scan_string (i::scan string_conversion::BIN);

	# Precompute some tables for faster arithmetic 
	#
	stipulate

	    pow2table = rw_vector::tabulate
                          (
                            max_size,

                            fn n = i::(<<) (1, itow n)  #  2^n 
                          );

	    masktable = rw_vector::tabulate
                          (
                            max_size,

			    fn n = i::(-) (i::(<<) (1, itow n), 1)      #  2^n-1 
                          );

	    maxtable  = rw_vector::tabulate
                          (
                            max_size+1, 

			    fn 0 => 0;
			       n => i::(-) (i::(<<) (1, itow (n - 1)), 1);  #  2^{ n-1 }-1 
                            end
                          );

	    mintable  = rw_vector::tabulate
                          (
                            max_size+1, 

			    fn 0 => 0;
			       n => i::neg (i::(<<) (1, itow (n - 1)));	   #  -2^{ n-1 } 
			    end
                          );
	herein

	    fun pow2 i           = if (i < max_size)     rw_vector::get (pow2table, i); 
			           else                  i::(<<) (1, itow i);
                                   fi;

	    fun mask_of size     = if (size < max_size)  rw_vector::get (masktable, size);
			           else                  i::(-) (i::(<<) (1, itow size), 1);fi;

	    fun max_of_size size = if (size < max_size)  rw_vector::get (maxtable, size); 
			           else                  i::(-) (i::(<<) (1, itow (size - 1)), 1);
                                   fi;

	    fun min_of_size size = if (size < max_size)  rw_vector::get (mintable, size);
			           else                  i::neg (i::(<<) (1, itow (size - 1)));
                                   fi;
	end;

	#  queries 
	fun is_neg (i)     = i::sign i <  0;
	fun is_pos (i)     = i::sign i >  0;
	fun is_zero (i)    = i::sign i == 0; 
	fun is_non_neg (i) = i::sign i >= 0;
	fun is_non_pos (i) = i::sign i <= 0;
	#
	fun is_even (i)    = is_zero (i::rem (i, 2));
	fun is_odd (i)     = not (is_even (i));

	# To unsigned representation:
	#
	fun unsigned (size, i)
	    =
	    if (is_neg i   ) i::(+) (i, pow2 size);
			 else i;fi;

	# To signed representation:
	#
	fun signed (size, i)
	    =
	    if (i::(>) (i, max_of_size size)   ) i::(-) (i, pow2 size);
					else i;fi;

	# Narrow to the representation
        # of a given type:
	#
	fun narrow (size, i)
	    =
	    signed (size, i::bitwise_and (i, mask_of size));

	# Recognize 0x and 0b prefix
        # and do the right thing:
	#
	fun from_string (size, s)
	    = 
	    {   n =   s::length s;

		fun conv (i, negate)
		    = 
		    if  (n >= 2+i
			 and
			 s::get (s, i) == '0'
		    )
		         case (s::get (s, i+1))
			   
                              'x' =>  (hex_to_int (s::substring (s, 2+i, n - 2-i)), negate);
			      'b' =>  (bin_to_int (s::substring (s, 2+i, n - 2-i)), negate);
			      _   =>  (i::from_string s, FALSE);
                         esac; 
		    else
                         (i::from_string s, FALSE);
                    fi;

		my (result, negate)
		    =
		    if   (s == "" )              (NULL, FALSE);
		    elif (s::get (s, 0) == '-' ) conv (1, TRUE);
		    else                         conv (0, FALSE);
                    fi;

		case (result, negate)
		  
                     (THE n, TRUE ) =>  THE (narrow (size, i::neg n));
		     (THE n, FALSE) =>  THE (narrow (size, n));
		     (NULL,  _    ) =>  NULL;
                esac;
	    };

	# Convert types into 'integer'
        # without losing precision:
	#
	package convert
	    =
	    package {
	       package w= unt;		# unt	is from   src/lib/std/unt.pkg
	       package w32= unt32;	# unt32	is from   src/lib/std/unt32.pkg
	       wtoi   = w::to_int_x;
	       w32toi = w32::to_int_x;
	       from_int    = i::from_int; 
	       from_int32  = int32::to_large;
	       fun from_word w = i::from_large (unt::to_large_int w);
	       fun from_word32 w = i::(+) (i::(<<) (i::from_int (w32toi((w32::(>>))(w, 0u16))), 0u16), 
					   i::from_int (w32toi (w32::bitwise_and (w, 0uxffff))));
	    };

	# machine_int <-> other types 
	#
	fun from_int (size, i)     = narrow (size, convert::from_int i);
	fun from_int32 (size, i)    = narrow (size, convert::from_int32 i);
	fun from_word (size, w)     = narrow (size, convert::from_word w);
	fun from_word32 (size, w)   = narrow (size, convert::from_word32 w);
	fun to_string (size, i)    = i::to_string i;

	to_hex = i::fmt string_conversion::HEX;
	to_bin = i::fmt string_conversion::BIN;

	fun to_hex_string (size, i) =   "0x" + to_hex (unsigned (size, i));
	fun to_bin_string (size, i) =   "0b" + to_bin (unsigned (size, i));
	fun to_int (size, i)       =   i::to_int (narrow (size, i));
	fun to_word (size, i)      =   unt::from_large_int (i::to_large (unsigned (size, i)));

	fun to_word32 (size, i)
	    = 
	    {   i  =   unsigned (size, i);
		lo =   i::bitwise_and (i, 0xffff);
		hi =   i::(>>>) (i, 0u16);

		fun tow32 i
		    =
		    unt32::from_large_int (i::to_large i);

		tow32 lo + (unt32::(<<))(tow32 hi, 0u16);
	    };

	fun to_int32 (size, i)
	    =
	    int32::from_large (narrow (size, i));

	fun hash i
	    =
	    unt::from_int (i::to_int (i::bitwise_and (i, 0x1fffffff)));

	fun is_in_range (size, i)
	    =
	    i::(<=) (min_of_size size, i) and i::(<=) (i, max_of_size size); 

	fun signed_bin_op f (size, i, j)
	    =
	    narrow (size, f (i, j));

	fun signed_unary_op f (size, i)
	    =
	    narrow (size, f i);

	fun unsigned_bin_op f (size, i, j)
	    =
	    narrow (size, f (unsigned (size, i), unsigned (size, j)));

	fun trapping_unary_op f (size, i)
	    =
	    {   x =   f i;

		if (is_in_range (size, x)   ) x;
				       else raise exception OVERFLOW;fi;
	    };

	fun trapping_bin_op f (size, i, j)
	    = 
	    {   x =   f (i, j);

		if (is_in_range (size, x)   ) x;
				       else raise exception OVERFLOW;fi;
	    };

	#  two's complement operators 

	neg   = signed_unary_op i::neg ;
	abs   = signed_unary_op i::abs ;
	add   = signed_bin_op i::(+) ;
	sub   = signed_bin_op i::(-) ;
	muls  = signed_bin_op i::(*) ;

	fun divs (DIV_TO_ZERO,   type, x, y) =>  signed_bin_op i::quot (type, x, y);
	    divs (DIV_TO_NEGINF, type, x, y) =>  signed_bin_op i::(/)  (type, x, y);
	end;

	fun rems (DIV_TO_ZERO,   type, x, y) => signed_bin_op i::rem (type, x, y);
	    rems (DIV_TO_NEGINF, type, x, y) => signed_bin_op i::(%) (type, x, y);
	end;

	mulu  = unsigned_bin_op i::(*) ;
	divu  = unsigned_bin_op i::(/) ;
     /*
	quotu = unsignedBinOp i::quot ;
     */
	remu  = unsigned_bin_op i::rem ;

	negt  = trapping_unary_op i::neg ;
	abst  = trapping_unary_op i::abs ;
	addt  = trapping_bin_op i::(+) ;
	subt  = trapping_bin_op i::(-) ;
	mult  = trapping_bin_op i::(*) ;

	fun divt (DIV_TO_ZERO,   type, x, y) =>  trapping_bin_op i::quot (type, x, y);
	    divt (DIV_TO_NEGINF, type, x, y) =>  trapping_bin_op i::(/) (type, x, y);
	end;

	fun bitwise_not (size, x)    = narrow (size, i::bitwise_not x);
	fun eqvb (size, x, y) = narrow (size, i::bitwise_xor (i::bitwise_not x, y));

	fun bitwise_and (size, x, y) = narrow (size, i::bitwise_and (x, y));
	fun bitwise_or  (size, x, y) = narrow (size, i::bitwise_or  (x, y));
	fun bitwise_xor (size, x, y) = narrow (size, i::bitwise_xor (x, y));

	fun sll (size, x, y)  = narrow (size, i::(<<) (x, y));
	fun srl (size, x, y)  = narrow (size, i::(>>>) (unsigned (size, x), y));
	fun sra (size, x, y)  = narrow (size, i::(>>>) (x, y));

	fun sll_x (size, x, y)  = sll (size, x, to_word (size, y));
	fun srl_x (size, x, y)  = srl (size, x, to_word (size, y));
	fun sra_x (size, x, y)  = sra (size, x, to_word (size, y));

	fun bitslice (size, sl, x)
	    =
	    {   fun slice ([], n) =>   n;

		    slice ((from, to) ! sl, n)
			=>
			slice (sl, bitwise_or (size, narrow (to-from+1, 
					 srl (size, x, unt::from_int from)), n));
		end;

		slice (sl, 0);
	    };

	fun bit_of (size, i, b)
	    =
	    to_word (1, narrow (1, srl (size, i, unt::from_int b)));

	fun byte_of (size, i, b)
	    =
	    to_word (8, narrow (8, srl (size, i, unt::from_int (b*8))));

	fun half_of (size, i, h)
	    =
	    to_word (16, narrow (16, srl (size, i, unt::from_int (h*16))));

	fun word_of (size, i, w)
	    =
	    to_word32 (32, narrow (32, srl (size, i, unt::from_int (w*32))));

	#  type promotion 
	#
	fun sx (to_size, from_size, i) = narrow (to_size, narrow (from_size, i));
	fun zx (to_size, from_size, i) = narrow (to_size, unsigned (from_size, narrow (from_size, i)));

	#  Comparisions 
	#
	fun eq (size, i: i::Int, j)  =   i == j;
	fun ne (size, i: i::Int, j)  =   i != j;
	fun gt (size, i: i::Int, j)  =   i >  j;
	fun ge (size, i: i::Int, j)  =   i >= j;
	fun lt (size, i: i::Int, j)  =   i <  j;
	fun le (size, i: i::Int, j)  =   i <= j;

	fun ltu (size, i, j) =   unsigned (size, i) < unsigned (size, j);
	fun gtu (size, i, j) =   unsigned (size, i) > unsigned (size, j);
	fun leu (size, i, j) =   unsigned (size, i) <= unsigned (size, j);
	fun geu (size, i, j) =   unsigned (size, i) >= unsigned (size, j);

	# Split an integer "i" of size "size" into words of size "wordSize"
	#
	fun split { size, word_size, i }
	    =
	    loop (size, unsigned (size, i), [])
            where
	        fun loop (size, i, ws)
		    =
		    if   (size <= 0)
		         reverse ws;
		    else
			 w =   narrow (word_size, i);
			 i =   integer::(>>>) (i, unt::from_int word_size);

			 loop (size - word_size, i, w ! ws);
                    fi;
	    end;
    };							# package machine_int

end;						# stipulate










##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"				 	 #
# End:									 #
##########################################################################

