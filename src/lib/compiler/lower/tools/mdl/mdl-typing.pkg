#
# Type checking for RTL.
# We also perform arity raising to convert the program into explicit type
# passing style at the same time.
#
# Note: there are quite a lot of bugs in the algorithm. 
#       I don't have time to fix them.       XXX BUGGO FIXME
#
# Allen Leung (leunga@cs.nyu.edu)



###                    "The more we get out of the world the less we leave,
###                     and in the long run we shall have to pay our debts at a
###                     time that may be very inconvenient for our own survival."
###
###                                                   -- Norbert Wiener 



generic package mdl_typing
  (package Dictionary:       Mdl_Dictionary
   package TypeUtil:  Mdl_Type_Utilities
   package raw_syntax_stuff:   MDL_AST_UTIL
   package RawSyntaxTreePP:     MDL_AST_PRETTY_PRINTER
   package Comp:      Mdl_Compile
     sharing Dictionary::raw_syntax = TypeUtil::raw_syntax = raw_syntax_stuff::raw_syntax = RawSyntaxTreePP::raw_syntax
     sharing Comp::Dictionary = Dictionary
  ) : Mdl_Typing =
pkg
   package Dictionary      = Dictionary
   package raw_syntax      = Dictionary::raw_syntax
   package TypeUtil = TypeUtil
   package Comp     = Comp
   package r        = Comp::Rewriter

   use Comp::error raw_syntax raw_syntax_stuff

   infix ++

   my op ++ = Dictionary.++

   fun e2s e = pp::text (RawSyntaxTreePP::expression e)
   fun p2s e = pp::text (RawSyntaxTreePP::pattern e)
   fun d2s e = pp::text (RawSyntaxTreePP::decl e)
   fun id2s e = pp::text (RawSyntaxTreePP::ident e)
   fun t2s e = pp::text (RawSyntaxTreePP::type e)

   fun unifyExpression (e, t1, t2) = TypeUtil::unify (fn _ => " in "$e2s e, t1, t2)
   fun unifyPattern (p, t1, t2) = TypeUtil::unify (fn _ => " in "$p2s p, t1, t2)
   fun undefinedCons (pattern, id) = 
       error("undefined constructor "$id2s id$" in "$p2s pattern)

   fun lookupCons E id = Dictionary::lookupVal E id

   fun isPolymorphic t =
   let poly = REF FALSE
       fun type ===> (t as TYPE_VARIABLE_TYPE(_, _, _, REF NULL)) = (poly := TRUE; t)
         | type ===> (t as TYPE_SCHEME_TYPE _) = (poly := TRUE; t)
         | type ===> (t as TYVARty _) = (poly := TRUE; t)
         | type ===> t = t
   in  .type (r::rewrite { type = type, pattern=r::noRewrite, decl=r::noRewrite,
                      sexp=r::noRewrite, expression=r::noRewrite } ) t;
       *poly
   end

   fun openStrs E ids =
   let Es = map (Dictionary::lookupPackage E) ids
   in  fold_right op++ Dictionary::empty Es end

   fun boundVariable E (VARtv _) = TypeUtil::newVariable 0
     | boundVariable E (INTtv _) = TypeUtil::newIVar 0

   fun polyType name = let tv = TypeUtil::newIVar 0
                     in TYPE_SCHEME_TYPE([tv], APPty (IDENT([], name),[tv])) end
   fun mkType name = IDty (IDENT([], name))
   bitsType    = polyType "bits"
   regionType  = mkType "region"
   effectType  = mkType "effect"
   boolType    = mkType "bool"
   stringType  = mkType "string"
   intType     = mkType "int"
   wordType    = mkType "word"
   fun listType (ps, t) = 
         APPty (IDENT([], "list"),[INTVARty (length ps), TypeUtil::deref t])

   fun applyType name x = APPty (IDENT([], name), [x])
   fun intappType name n = applyType name (INTVARty n)

   /*
    * Perform typechecking
    */
   fun typeCheck md d = 
   let TypeUtil::init()
       bitsOf = intappType "bits"
       cellOf = intappType "bits"

       my CELLdecl { bits=widthOfGP, ... } = Comp::lookupCellKind md "GP"

       fun map2 f [] = ([], [])
         | map2 f (x . xs) = let my (a, b) = f x
                                my (c, d) = map2 f xs
                            in  (a . c, b . d) end

       fun memOf E (expression, e, "cellset", region) = 
             (case region of
                THE _ => error("illegal region in "$e2s expression)
              | NULL => ();
             (bitsOf widthOfGP, cellOf widthOfGP, e)
             )
         | memOf E (expression, e, m, region) =
           let my CELLdecl { bits=n, count, id, aggregable, ... } = 
                Comp::lookupCellKind md m
               fun log2 1 = 0
                 | log2 n = log2 (n div 2) + 1
               argType = case count of  
                     THE m => bitsOf (log2 m)
                   | NULL   => 
                      (case id of
                         "MEM" => bitsOf widthOfGP
                       | "CTRL" => bitsOf widthOfGP
                       | _ => 
                         (error("@@@"$m$"["$e2s e$"] is illegal"); Dictionary::var E)
                      )
                
                   if id == "MEM" then 
                   (case region of 
                      THE r => let my (_, t') = W E (ID r)
                                in  unifyExpression (expression, t', regionType) end
                    | NULL => warning("missing region in "$e2s expression)
                   ) else
                   (case region of 
                      THE _ => error("illegal region in "$e2s expression)
                   | _ => ()
                   )
                ret_type =
                    if aggregable then applyType "bits" (TypeUtil::newIVar 0)
                    else cellOf n
           in  (argType, ret_type, e)
           end

       and W E (IDexp id) = Dictionary::lookupVal E id
         | W E (e as TUPLEexp []) = (e, effectType)
         | W E (TUPLEexp [e]) = W E e
         | W E (TUPLEexp es) = 
           let my (es, ts) = Ws E es
           in  (TUPLEexp es, TUPLEty ts) end
         | W E (RECORD_EXPRESSION les) = 
           let my (les, lts) = LWs E les
           in  (RECORD_EXPRESSION les, RECORDty lts) end
         | W E (e as LITexp (INTlit _))  = (e, intType)
         | W E (e as LITexp (WORD32lit _)) = (e, wordType)
         | W E (e as LITexp (WORDlit _)) = (e, wordType)
         | W E (e as LITexp (BOOLlit _)) = (e, boolType)
         | W E (e as LITexp (STRINGlit _)) = (e, stringType)
         | W E (expression as TYPEDexp (e, t)) = 
           let my (e, t1) = W E e
               t2 = T E t
           in  unifyExpression (expression, t1, t2); (e, t2) end
         | W E (expression as LISTexp (es, NULL)) = 
           let my (es, ts) = Ws E es
               t  = Dictionary::var E
           in  fold_right (fn (a, b) => (unifyExpression (expression, a, b); a)) t ts;
               (LISTexp (es, NULL), listType (es, t))
           end
         | W E (expression as BITSLICEexp (e, l)) = 
           let my (e, t) = W E e
               n = fold_right (fn ((a, b), l) => b-a+1+l) 0 l
               my (e, t') = Dictionary::inst E (BITSLICEexp (e, l), bitsType)
           in  unifyExpression (expression, t, t'); 
               (e, bitsOf n)
           end
         | W E (expression as LOCexp (id, e, region)) = 
           let my (e, t) = W E e
               my (argType, ret_type, e) = memOf E (expression, e, id, region)
           in  unifyExpression (expression, t, argType);
               (LOCexp (id, e, region), ret_type)
           end
         | W E (expression as APPLY_EXPRESSION (f, x)) = 
           let my (f, t1) = W E f
               my (x, t2) = W E x
               t  = Dictionary::var E
           in  unifyExpression (expression, t1, FUNty (t2, t)); 
               (APPLY_EXPRESSION (f, x), t) 
           end
         | W E (expression as IF_EXPRESSION (a, b, c)) = 
           let my (a, t1) = W E a
               my (b, t2) = W E b
               my (c, t3) = W E c
           in  unifyExpression (a, t1, boolType); unifyExpression (expression, t2, t3); 
               (IF_EXPRESSION (a, b, c), t2)
           end
         | W E (expression as CASE_EXPRESSION (e, cs)) = 
           let my (e,  t1) = W E e
               my (cs, t2) = CSs E cs
               t3 = Dictionary::var E
           in  unifyExpression (expression, t2, FUNty (t1, t3));
               (CASE_EXPRESSION (e, cs), t3) 
           end
         | W E (LAMBDAexp cs) = 
           let my (cs, t) = CSs E cs
           in  (LAMBDAexp cs, t) end
         | W E (e as SEQUENTIAL_EXPRESSIONS []) = (e, effectType)
         | W E (SEQUENTIAL_EXPRESSIONS [e]) = W E e
         | W E (SEQUENTIAL_EXPRESSIONS (e . es)) = 
           let my (e, _)  = W E e
               my (es, t) = Wseq E es
           in  (SEQUENTIAL_EXPRESSIONS (e . es), t) end
         | W E (LET_EXPRESSION (ds, es)) = 
           let my (ds, E') = Ds E ds
               my (es, t)  = Wseq (E ++ E') es 
           in  (LET_EXPRESSION (ds, es), t) end
         | W E (SOURCE_CODE_REGION_FOR_EXPRESSION (l, e)) = (setLoc l; W E e)
         | W E expression = fail("W "$e2s expression)
    
       and Ws E es = map2 (W E) es

       and Wseq E [] = 
           let my (e, t) = W E (SEQUENTIAL_EXPRESSIONS [])
           in  ([e], t) end
         | Wseq E [e] = 
           let my (e, t) = W E e
           in  ([e], t) end
         | Wseq E (e . es) =
           let my (e, _)  = W E e
               my (es, t) = Wseq E es  
           in  (e . es, t) end
    
       and LW E (l, e) = 
           let my (e, t) = W E e
           in  ((l, e), (l, t)) end

       and LWs E les = map2 (LW E) les
    
       and CSs E [] = ([], Dictionary::var E)
         | CSs E (all as c . cs) =
           let my (c, t) = CS E c
               my (cs, t') = CSs E cs
           in  unifyExpression (LAMBDAexp all, t, t'); 
               (c . cs, t) 
           end
       
       and CS E (CLAUSE (ps, g, e)) =
           let my (ts, Es) = map2 (P E) ps
               E' = fold_right op++ Dictionary::empty Es   
               my (e, t2) = W (E ++ E') e
               fun f []      = t2
                 | f (t . ts) = FUNty (t, f ts)
               g = 
                 case g of 
                    NULL => NULL
                  | THE ge => 
                    let my (ge', tg) = W E ge
                    in  unifyExpression (ge, tg, BOOLty);
                        THE ge
                    end
           in  (CLAUSE (ps, g, e), f ts) end
    
       and P E (IDpat id) = Pvar E id
         | P E (ASpat (id, p)) =
           let my (t1, E') = P E p
               E''     = Dictionary::NAMED_VARIABLE (id, ID id, t1)
           in  (t1, E'' ++ E') end
         | P E (TUPLEpat [p]) = P E p
         | P E (TUPLEpat ps) = 
           let my (ts, E') = Ps E ps in (TUPLEty ts, E') end
         | P E (pattern as OR_PATTERN ps) =
           let my (ts, E') = Ps E ps
               t       = Dictionary::var E
           in  fold_right (fn (t1, t2) => (unifyPattern (pattern, t1, t2); t1)) t ts;
               (t, E')
           end
         | P E (RECORD_PATTERN (lps, FALSE)) =
           let my (lts, E') = LPs E lps in (RECORDty lts, E') end
         | P E WILDCARD_PATTERN = (Dictionary::var E, Dictionary::empty)
         | P E (LITpat (INTlit _)) = (INTty, Dictionary::empty)
         | P E (LITpat (BOOLlit _)) = (BOOLty, Dictionary::empty)
         | P E (LITpat (WORDlit _)) = (WORD32aType, Dictionary::empty)
         | P E (LITpat (STRINGlit _)) = (STRINGty, Dictionary::empty)
         | P E (pattern as CONSpat (id, NULL)) =
           (let my (_, t1) = lookupCons E id
            in  (t1, Dictionary::empty)
            end except _ => 
                case id of
                  IDENT([], id) => Pvar E id
                | _ => (undefinedCons (pattern, id); (Dictionary::var E, Dictionary::empty))
           )
         | P E (pattern as CONSpat (id, THE p)) =
           (let my (_, t1) = lookupCons E id
                my (t2, E') = P E p
                t3 = Dictionary::var E
            in  unifyPattern (pattern, t1, FUNty (t2, t3)); (t3, E')
            end except _ => 
                case id of
                  IDENT([], id) => Pvar E id
                | _ => (undefinedCons (pattern, id); (Dictionary::var E, Dictionary::empty))
           )
         | P E (pattern as LISTpat (ps, NULL)) = 
            let my (ts, E') = Ps E ps
                t = Dictionary::var E
            in  fold_right (fn (a, b) => (unifyPattern (pattern, a, b); a)) t ts;
                (listType (ps, t), E')
            end
         | P E p = (error("pattern "$p2s p$
                          " not allowed in semantics description"); 
                    (Dictionary::var E, Dictionary::empty)
                   )
       and Ps E ps = 
           let xs = map (P E) ps
               ts = map #1 xs
               Es = map #2 xs
           in  (ts, fold_right op++ Dictionary::empty Es) end
    
       and LPs E lps =
           let xs  = map (LP E) lps
               lts = map #1 xs
               Es  = map #2 xs
           in  (lts, fold_right op++ Dictionary::empty Es) end
    
       and LP E (l, p) = let my (t, E) = P E p in ((l, t), E) end
    
       and Pvar E id = let t = Dictionary::var E
                       in  (t, Dictionary::NAMED_VARIABLE (id, ID id, t)) end
    
       and D E (DATATYPEdecl (dbs, tbs)) = 
           let my (dbs, tbs, E) = DTs E (dbs, tbs) 
           in  (DATATYPEdecl (dbs, tbs), E) end   
         | D E (FUNdecl fbs) = 
           let my (fbs, E) = FDs E fbs
           in  (FUNdecl fbs, E) end
         | D E (RTLdecl (pattern, e, loc)) = 
           let my (NAMED_VARIABLE (pattern, e), E) = VD E (NAMED_VARIABLE (pattern, e)) 
           in  (RTLdecl (pattern, e, loc), E) end
         | D E (RTLSIGdecl (ids, type)) = 
           let E = VS E (ids, type)
           in  (RTLSIGdecl (ids, type), E) end
         | D E (VALdecl vbs) = 
           let my (vbs, E) = VDs E vbs
           in  (VALdecl vbs, E) end
         | D E (TYPESIGdecl (id, tvs)) =
           let E = TS E (id, tvs)
           in  (TYPESIGdecl (id, tvs), E) end  
         | D E (VALSIGdecl (ids, type)) = 
           let E = VS E (ids, type)
           in  (VALSIGdecl (ids, type), E) end
         | D E (LOCALdecl (d1, d2)) =
           let my (d1, E1) = Ds E d1 
               my (d2, E2) = Ds (E ++ E1) d2 
           in  (LOCALdecl (d1, d2), E2)  end
         | D E (SEQdecl ds) = 
           let my (ds, E) = Ds E ds
           in  (SEQdecl ds, E) end
         | D E (d as OPENdecl ids) = 
           let E = openStrs E ids
           in  (d, E) end
         | D E (PACKAGE_DECL (id, args, s, sexp)) =
           let my (sexp, E') = SE E sexp
           in  (PACKAGE_DECL (id, args, s, sexp), Dictionary::NAMED_PACKAGE (id, args, E')) end
         | D E (d as PACKAGE_API_decl _) = (d, Dictionary::empty)
         | D E (d as INFIXdecl _) = (d, Dictionary::empty)
         | D E (d as INFIXRdecl _) = (d, Dictionary::empty)
         | D E (d as NONFIXdecl _) = (d, Dictionary::empty)
         | D E (MARKdecl (l, d)) = 
           let my (d, E) = withLoc l (D E) d
           in  (MARKdecl (l, d), E) end  
         | D E (d as @@@[]) = (d, Dictionary::empty)
         | D _ d = (error("illegal declaration: "$d2s d); (d, Dictionary::empty))
    
       and Ds E [] = ([], Dictionary::empty)
         | Ds E (d . ds) = 
           let my (d, E1)  = D E d 
               my (ds, E2) = Ds (E ++ E1) ds
           in  (d . ds, E1 ++ E2) end
    
       and TS E (id,[]) = Dictionary::TYPEbind (id, IDty (IDENT([], id)))
         | TS E (id, tvs) =
           let vs = map (boundVariable E) tvs
               t  = LAMBDAty (vs, APPty (IDENT([], id), vs))
           in  Dictionary::TYPEbind (id, t) end
    
       and VS E (ids, type) = 
           let t = T E type
           in  fold_right (fn (id, E) => Dictionary::NAMED_VARIABLE (id, ID id, t) ++ E) Dictionary::empty ids 
           end
    
       and FDs E [] = ([], Dictionary::empty)
         | FDs E (fb . fbs) =
           let my (fb, E') = FD E fb 
               my (fbs, E'') = FDs (E ++ E') fbs
           in  (fb . fbs, E' ++ E'') end
    
       and FD E (FUNbind (f, cs)) =
           let my (cs, t) = CSs E cs
               my (LAMBDAexp cs, t)  = Dictionary::gen E (LAMBDAexp cs, t)
           in  (FUNbind (f, cs), Dictionary::NAMED_VARIABLE (f, ID f, t)) end
    
       and VDs E [] = ([], Dictionary::empty)
         | VDs E (valueNaming . vbs) = 
           let my (valueNaming, E') = VD E valueNaming 
               my (vbs, E'') = VDs (E ++ E') vbs
           in  (valueNaming . vbs, E' ++ E'') end
    
       and VD E (valueNaming as NAMED_VARIABLE (p, e)) = 
           let my (t, E') = P E p
               my (e, t')     = W (E ++ E') e
           in  TypeUtil::unify (fn _ => pp::text (RawSyntaxTreePP::valbind valueNaming), t, t');
               (NAMED_VARIABLE (p, e), E')
           end
    
       and DTs E (dbs, tbs) =
           let my (dbs, E1) = DBs E dbs
               my (tbs, E2) = TDs E tbs
           in  (dbs, tbs, E1 ++ E2) end
    
       and DBs E [] = ([], Dictionary::empty)
         | DBs E (db . dbs) = 
           let my (db, E)   = DB E db 
               my (dbs, E') = DBs E dbs
           in  (db . dbs, E++E') end
    
       and DB E (db as DATATYPEbind { id, type_variables, cbs, ... } ) = (db, Dictionary::empty)
    
       and TDs E [] = ([], Dictionary::empty)
         | TDs E (tb . tbs) = 
           let my (tb, E)   = TD E tb 
               my (tbs, E') = TDs E tbs
           in  (tb . tbs, E++E') end
    
       and TD E (TYPEbind (id, tvs, t)) = 
           let tve = REF (map (fn tv => (tv, Dictionary::var E)) tvs)
               t'   = Dictionary::lambda E (T' E tve t)
           in  (TYPEbind (id, tvs, t), Dictionary::TYPEbind (id, t')) end
    
       and T E t = 
           let tvs = REF []
               t   =  T' E tvs t 
               my (_, t) = Dictionary::gen E (INT_CONSTANT_IN_EXPRESSION 0, t) 
           in t
           end
    
       and T' E tvs (IDty id) = Dictionary::lookupType E id
         | T' E tvs (type as APPty (f, tys)) = 
           let t = Dictionary::lookupType E f
               ts = map (T' E tvs) tys
           in  TypeUtil::apply(" in type "$t2s type, t, ts) end
         | T' E tvs (FUNty (x, y))   = FUNty (T' E tvs x, T' E tvs y)
         | T' E tvs (TUPLEty ts)   = TUPLEty (map (T' E tvs) ts)
         | T' E tvs (RECORDty lts) = RECORDty (map (LT' E tvs) lts)
         | T' E tvs (t as INTVARty _) = t
         | T' E tvs (type as TYVARty tv) =
           let fun scan [] = let v = boundVariable E tv
                             in  tvs := (tv, v) . *tvs; v end
                 | scan((k, v) . tvs) = if k == tv then v else scan tvs
           in  scan(*tvs) end
         | T' E tvs t = (error("unknown type "$t2s t); t)
    
       and LT' E tvs (l, t) = (l, T' E tvs t)
    
       and SE E (IDsexp id) = (IDsexp id, Dictionary::lookupPackage E id)
         | SE E (DECLsexp ds) = 
           let my (ds, E) = Ds E ds
           in  (DECLsexp ds, E) end

       E = Dictionary::empty
       my (d, E) = D E d 
   in  (d, E) 
   end 

end
