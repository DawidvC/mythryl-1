## raw-syntax-stuff.pkg

# Compiled by:
#     src/lib/compiler/front/parse/parser.make6



###            "He wrapped himself in quotations -- as a beggar
###             would enfold himself in the purple of Emperors."
###
###                                    -- Rudyard Kipling



package raw_syntax_stuff: (weak)  Raw_Syntax_Stuff {		# Raw_Syntax_Stuff	is from   src/lib/compiler/front/parse/raw-syntax/raw-syntax-stuff.api


								# hash_string		is from   src/lib/src/hash-string.pkg
    include symbol;
    include fixity;
    include raw_syntax;
    include print_utilities;
    include error_message;

    post_dotdot_hash  = hash_string::hash_string "_..";
    dotdot_hash       = hash_string::hash_string "..";

    post_plusplus_hash= hash_string::hash_string "_++";
    plusplus_hash     = hash_string::hash_string "++";

    post_dashdash_hash= hash_string::hash_string "_--";
    dashdash_hash     = hash_string::hash_string "--";

    preamper_hash     = hash_string::hash_string  "&_";
    amper_hash        = hash_string::hash_string  "&";
    postamper_hash    = hash_string::hash_string "_&";

    preatsign_hash    = hash_string::hash_string  "@_";
    atsign_hash       = hash_string::hash_string  "@";
    postatsign_hash   = hash_string::hash_string "_@";

    preback_hash      = hash_string::hash_string  "\\_";
    back_hash         = hash_string::hash_string  "\\";
    postback_hash     = hash_string::hash_string "_\\";

    prebang_hash      = hash_string::hash_string  "!_";
    bang_hash         = hash_string::hash_string  "!";
    postbang_hash     = hash_string::hash_string "_!";

    prebar_hash       = hash_string::hash_string  "|_";
    bar_hash          = hash_string::hash_string  "|";
    postbar_hash      = hash_string::hash_string "_|";

    prebuck_hash      = hash_string::hash_string  "$_";
    buck_hash         = hash_string::hash_string  "$";
    postbuck_hash     = hash_string::hash_string "_$";

    precaret_hash     = hash_string::hash_string  "^_";
    caret_hash        = hash_string::hash_string  "^";
    postcaret_hash    = hash_string::hash_string "_^";

    predash_hash      = hash_string::hash_string  "-_";
    dash_hash         = hash_string::hash_string  "-";
    postdash_hash     = hash_string::hash_string "_-";

    preplus_hash      = hash_string::hash_string  "+_";
    plus_hash         = hash_string::hash_string  "+";
    postplus_hash     = hash_string::hash_string "_+";

    preslash_hash     = hash_string::hash_string  "/_";
    slash_hash        = hash_string::hash_string  "/";
    postslash_hash    = hash_string::hash_string "_/";

    prestar_hash      = hash_string::hash_string  "*_";		#    "The fault, dear Brutus, is not in our stars,
    star_hash         = hash_string::hash_string  "*";		#     But in ourselves, that we are underlings."
    poststar_hash     = hash_string::hash_string "_*";		#            -- William Shakespeare, "Julius Caesar" 

    pretilda_hash     = hash_string::hash_string  "~_";
    tilda_hash        = hash_string::hash_string  "~";
    posttilda_hash    = hash_string::hash_string "_~";

    preqmark_hash     = hash_string::hash_string  "?_";
    qmark_hash        = hash_string::hash_string  "?";
    postqmark_hash    = hash_string::hash_string "_?";

    prepercnt_hash    = hash_string::hash_string  "%_";
    percnt_hash       = hash_string::hash_string  "%";
    postpercnt_hash   = hash_string::hash_string "_%";

    prelangle_hash    = hash_string::hash_string "<_";
    langle_hash       = hash_string::hash_string  "<";

    prelbrace_hash    = hash_string::hash_string "{_";
    lbrace_hash       = hash_string::hash_string  "{";

    postrangle_hash   = hash_string::hash_string "_>";
    rangle_hash       = hash_string::hash_string  ">";

    postrbrace_hash   = hash_string::hash_string "_}";
    rbrace_hash       = hash_string::hash_string  "}";

    postlbracket_hash = hash_string::hash_string "_[";
    lbracket_hash     = hash_string::hash_string "[";

    equal_hash        = hash_string::hash_string "=";
    eqeq_hash         = hash_string::hash_string "==";
    bar_hash          = hash_string::hash_string "|";
    weakdot_hash      = hash_string::hash_string " . ";
    bogus_hash        = hash_string::hash_string "BOGUS";
    dollar_bogus_hash = hash_string::hash_string "$BOGUS";
    barens_hash       = hash_string::hash_string "|_|";

    overloaded_hash   = hash_string::hash_string "overloaded";
    recursive_hash    = hash_string::hash_string "recursive";
    in_hash           = hash_string::hash_string "in";
    infix_hash        = hash_string::hash_string "infix";
    infixr_hash       = hash_string::hash_string "infixr";
    nonfix_hash       = hash_string::hash_string "nonfix";
    field_hash        = hash_string::hash_string "field";
    method_hash       = hash_string::hash_string "method";
    message_hash      = hash_string::hash_string "message";
    get_fields_hash   = hash_string::hash_string "get__fields";
    generic_hash      = hash_string::hash_string "generic";
    raise_hash        = hash_string::hash_string "raise";

    post_dotdot_string  = "_..";
    dotdot_string       = "..";

    post_plusplus_string= "_++";
    plusplus_string     = "++";

    post_dashdash_string= "_--";
    dashdash_string     = "--";

    preamper_string   = "&_";
    preatsign_string  = "@_";
    preback_string    = "\\_";
    prebang_string    = "!_";
    prebar_string     = "|_";
    prebuck_string    = "$_";
    precaret_string   = "^_";
    predash_string    = "-_";
    prepercnt_string  = "%_";
    preplus_string    = "+_";
    preqmark_string   = "?_";
    preslash_string   = "/_";
    prestar_string    = "*_";
    pretilda_string   = "~_";

    prelangle_string  = "<_";
    langle_string     = "<";

    prelbrace_string  = "{_";
    lbrace_string     = "{";

    postrangle_string = "_>";
    rangle_string     =  ">";

    postrbrace_string = "_}";
    rbrace_string     =  "}";

    postlbracket_string = "_[";
    lbracket_string     =  "[";

    amper_string      = "&";
    atsign_string     = "@";
    back_string       = "\\";
    bang_string       = "!";
    bar_string        = "|";
    buck_string       = "$";
    caret_string      = "^";
    dash_string       = "-";
    percnt_string     = "%";
    plus_string       = "+";
    qmark_string      = "?";
    slash_string      = "/";
    star_string       = "*";
    tilda_string      = "~";

    postamper_string  = "_&";
    postatsign_string = "_@";
    postback_string   = "_\\";
    postbang_string   = "_!";
    postbar_string    = "_|";
    postbuck_string   = "_$";
    postcaret_string  = "_^";
    postdash_string   = "_-";
    postpercnt_string = "_%";
    postplus_string   = "_+";
    postqmark_string  = "_?";
    postslash_string  = "_/";
    poststar_string   = "_*";
    posttilda_string  = "_~";

    equal_string        = "=";
    eqeq_string         = "==";
    bar_string          = "|";
    weakdot_string      = " . ";
    bogus_string        = "BOGUS";
    dollar_bogus_string = "$BOGUS";
    barens_string       = "|_|";

    postbang_string   = "_!";

    overloaded_string = "overloaded";
    recursive_string  = "recursive";
    in_string         = "in";
    infix_string      = "infix";
    infixr_string     = "infixr";
    nonfix_string     = "nonfix";
    field_string      = "field";
    message_string    = "message";
    method_string     = "method";
    get_fields_string = "get__fields";
    generic_string    = "generic";
    raise_string      = "raise";

    void_pattern    = RECORD_PATTERN { definition => NIL,   is_incomplete => FALSE };
    void_expression = RECORD_EXPRESSION NIL;

    true_dcon  = [make_value_symbol "TRUE"];
    false_dcon = [make_value_symbol "FALSE"];
    quote_dcon = [make_package_symbol "Lib7", make_value_symbol "QUOTE"];

    antiquote_dcon = [make_package_symbol "Lib7", make_value_symbol "ANTIQUOTE"];
    arrow_tycon    = make_type_symbol "->";

    exn_id    = symbol::make_type_symbol "Exception";
    sym_arg   = make_package_symbol "<Parameter>";
    bogus_id  = make_value_symbol "BOGUS";
    it_symbol = [make_value_symbol "it"];

    # 2007-12-31 CrT: This check used to limit fixity
    #                 precedences to the range 0-9;
    #                 I cannot find any particular
    #                 reason in the code for this, and
    #                 have relaxed it.

    fun check_fixity (fixity, err)
        =
	if   (fixity < 0  or  fixity > 99)
             err ERROR "fixity precedence must be between 0 and 99" null_error_body;
	     99;
        else
             fixity;
        fi;

    # Layered patterns:
    #
    fun lay3 ((x as VARIABLE_IN_PATTERN _), y, _)
             =>
             AS_PATTERN { variable_pattern => x,   expression_pattern => y };

        lay3 (TYPE_CONSTRAINT_PATTERN { pattern, type_constraint }, y, err)
	    => 
	    {   err ERROR "illegal (multiple?) type constraints in AS pattern" null_error_body;

		case (lay3 (pattern, y, err))

		     AS_PATTERN { variable_pattern, expression_pattern }
			 =>
			 AS_PATTERN
                           {
                             variable_pattern,

			     expression_pattern
                                 =>
                                 TYPE_CONSTRAINT_PATTERN
                                   {
                                     pattern => expression_pattern,
				     type_constraint
				   }
			   };

		    other => other;
		esac;
	    };

        lay3 (SOURCE_CODE_REGION_FOR_PATTERN (x, _), y, err)
	    =>
	    lay3 (x, y, err);

        lay3 (PRE_FIXITY_PATTERN [x], y, err)
	    =>
	    {   err ERROR "parentheses illegal around variable in AS pattern" null_error_body;
		y;
	    };

        lay3 (x, y, err)
	    =>
	    {    err ERROR "pattern to left of AS must be variable" null_error_body;
		 y;
	    };
    end;

    fun lay2 (TYPE_CONSTRAINT_PATTERN { pattern, type_constraint }, y, err)
	    => 
	    {   err ERROR "illegal (multiple?) type constraints in AS pattern" null_error_body;

		case (lay2 (pattern, y, err))

		    AS_PATTERN { variable_pattern, expression_pattern }
			=>
			AS_PATTERN
                          { variable_pattern,
			    expression_pattern
                                =>
                                TYPE_CONSTRAINT_PATTERN
                                  { pattern        => expression_pattern,
				    type_constraint
				  }
			  };

		    pattern => pattern;

		esac;
	    };

        lay2 (SOURCE_CODE_REGION_FOR_PATTERN (x, _), y, err)
	    =>
	    lay2 (x, y, err);

        lay2 (PRE_FIXITY_PATTERN [ { item, ... } ], y, err)
	    =>
	    lay3 (item, y, err);

        lay2 p
	    =>
	    lay3 p;
    end;

    fun lay (TYPE_CONSTRAINT_PATTERN { pattern, type_constraint }, y, err)
	    => 
	    case (lay2 (pattern, y, err))

		AS_PATTERN { variable_pattern, expression_pattern }
		    =>
		    AS_PATTERN
                      { variable_pattern,
		        expression_pattern
                            =>
                            TYPE_CONSTRAINT_PATTERN
                              { pattern => expression_pattern,
				type_constraint
			      }
		      };

		pattern => pattern;
            esac;


        lay (SOURCE_CODE_REGION_FOR_PATTERN (x, _), y, err)
	    =>
	    lay (x, y, err);

        lay p
	    =>
	    lay2 p;
    end;

    layered = lay;

    #  Sequence of declarations 
    #
    fun make_declaration_sequence (SEQUENTIAL_DECLARATIONS a, SEQUENTIAL_DECLARATIONS b) => SEQUENTIAL_DECLARATIONS (  a  @  b  );
        make_declaration_sequence (SEQUENTIAL_DECLARATIONS a,                         b) => SEQUENTIAL_DECLARATIONS (  a  @ [b] );
        make_declaration_sequence (                        a, SEQUENTIAL_DECLARATIONS b) => SEQUENTIAL_DECLARATIONS (  a  !  b  );
        make_declaration_sequence (                        a,                         b) => SEQUENTIAL_DECLARATIONS  [ a,    b ];
    end;


    fun block_to_let
            block_declarations_and_expressions2		# THIS IS IN REVERSE ORDER!
        =
	# This is where we deal with the mismatch between
	# our block-structured surface syntax and the LET-oriented
	# raw-syntax.api view of the world.  Depending on what is in
	#     block_declarations_and_expressions
	# we synthesize either LET statement or a simple expression.
        #
	# Note that
	#     block_declarations_and_expressions
	# is in reverse order, which is convenient given that
	# what matters most is whether the last statement lexically
	# was an expression or a declaration.
	#
	# In the first case below, the block consists of a single
	# expression.  We strip the expression of its wrapping and
	# return it.
	#
	# In the second case below, the block contains more
	# than one statement, and the last is an expression.
	# We construct and return a LET holding it all.
	#
	# In all other cases we don't have a terminal expression
	# to yield a value for the block, so we create and return
	# a LET with void_expression as its value.
	#
	case block_declarations_and_expressions2
	  
	    [   SOURCE_CODE_REGION_FOR_DECLARATION (
		     VALUE_DECLARATIONS (
			 [   NAMED_VALUE {
				 expression,
				 pattern    => WILDCARD_PATTERN,
				 ...
			     }
			 ],
			 NIL
		     ),
		     _
		)
	    ]
		=>
		expression;

	   SOURCE_CODE_REGION_FOR_DECLARATION (
		VALUE_DECLARATIONS (
		    [   NAMED_VALUE {
			    expression,
			    pattern    => WILDCARD_PATTERN,
			    ...
			}
		    ],
		    NIL
		),
		_
	    ) ! rest
		=>
		LET_EXPRESSION {
		    expression,
		    declaration => SEQUENTIAL_DECLARATIONS (reverse rest)
		};

	   rest
		=>
		LET_EXPRESSION {
		    expression  => void_expression,
		    declaration => SEQUENTIAL_DECLARATIONS (reverse rest)
		};
	esac;

    fun quote_expression s
        =
        APPLY_EXPRESSION {
            function => VARIABLE_IN_EXPRESSION quote_dcon,
            argument => STRING_CONSTANT_IN_EXPRESSION s
        };

    fun antiquote_expression e
        =
        APPLY_EXPRESSION {
            function => VARIABLE_IN_EXPRESSION antiquote_dcon,
            argument => e
        };


    # Two little fns for use in rule actions, which
    # annotate syntax expression and declaration trees
    # with the corresponding source file line+column
    # number range (s).
    #
    # They do nothing if the tree is already so annotated:
    #
    fun mark_expression (e as SOURCE_CODE_REGION_FOR_EXPRESSION    _, _, _) =>  e;
	mark_expression (e,                                           a, b) =>  SOURCE_CODE_REGION_FOR_EXPRESSION (e, (a, b));
    end;

    fun mark_declaration (d as SOURCE_CODE_REGION_FOR_DECLARATION _, _, _) =>  d;
	mark_declaration (d,                                          a, b) =>  SOURCE_CODE_REGION_FOR_DECLARATION (d, (a, b));
    end;


    # Fake up a
    #     my _ = ...
    # by hand to make an expression
    # look like a declaration:
    #
    fun expression_to_declaration
	    (expression, left, right)
        =
        mark_declaration (
	    VALUE_DECLARATIONS (
                [   NAMED_VALUE {
                        expression,
                        pattern    => WILDCARD_PATTERN,
                        is_lazy    => FALSE
                    }
                ],
                NIL
            ),
            left,
            right
	);


};			# package raw_syntax_stuff




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1992 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
