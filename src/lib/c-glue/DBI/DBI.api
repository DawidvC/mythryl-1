api DATABASE_INDEPENDENT {

   include DBI_BASIS

      # All functions in this library will raise the exception 
      #   io::Io { cause=SQLError, function=function name, name=name }
      # with an error mesage when something goes wrong.


   my version:  String
   my name:     String

   type sqlrow    = List( String )
   type statement = String

   enum field = #  A field type descriptor 
      FIELD of { name          :String,
                table         :Null_Or( String ), #  NULL means a computed field 
                default       :String,
                type           :fieldtype,
                length        :Int,
                max_length    :Int,
                null          :Bool,
                primary_key   :Bool,
                unique_key    :Bool,
                multiple_key  :Bool, 
                unsigned      :Bool,
                zerofill      :Bool,
                autoincrement :Bool,
                decimals      :Int
               }

   and fieldtype = TINY | SHORT | LONG | INT25 | LONGLONG | DECIMAL
                 | FLOAT | DOUBLE | TIMESTAMP | DATE | TIME | DATETIME
                 | STRING | BLOB | SET | ENUM | NULLf

   type sqlcommand =
     { execute:    Void -> Void,
       rows:       Void -> Null_Or( sqlrow ),
       fetch_row:  Void -> Null_Or( sqlrow ),
       fetch_all:  Void -> List(    sqlrow ),
       finish:     Void -> Void
     }

   type SQL =
     { #  Execution 
       perform:          statement -> Void,
       prepare:          statement -> sqlcommand,
       prepare_cached:   statement -> sqlcommand,
   
       #  Transaction control 
       begin_work:   Void -> Void,
       commit:       Void -> Void,
       rollback:     Void -> Void,

       #  Finish 
       close:        Void -> Void
     }

   enum connectOptions =
     HOST        of String   #  host name; default to localhost 
   | USER        of String   #  user name (optional) 
   | PASSWD      of String   #  passwd (optional) 
   | DB          of String   #  Database name 
   | PORT        of Int      /* port */ 
   | UNIX_SOCKET of String   #  socket for talking with server (optional) 
   | OTHER       of String * String      

   my connect:  List( connectOptions ) -> SQL

}
