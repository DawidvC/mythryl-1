## find-in-symbol-table.pkg 

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6


package find_in_symbol_table

: (weak)  Find_In_Symbol_Table			# Find_In_Symbol_Table		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/find-in-symbol-table.api

{
    stipulate

	package sp  = symbol_path;			# symbol_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package cvp = invert_path;			# invert_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package m   = module;				# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
	package ms  = module_stuff;			# module_stuff			is from   src/lib/compiler/front/typecheck-stuff/modules/module-stuff.pkg
	package t   = types;				# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	package tu  = type_stuff;			# type_stuff			is from   src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg
	package a   = var_home;				# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package v   = variables_and_constructors;	# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
	package ste = symbol_table_entry;		# symbol_table_entry		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg
	package st  = symbol_table;			# symbol_table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
	package em  = error_message;			# error_message			is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
	package s   = symbol;				# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg

    herein

	#
	fun bug s
            =
            em::impossible ("find-in-symbol-table.pkg: " + s);
	#
	fun spmsg spath
            = 
	    if (sp::length spath > 1   )   " in path " + (sp::to_string spath);
            else                           "";
            fi;

	#
	fun unbound_error (badsym, sp, err)
            =
            err em::ERROR ( "unbound "
			    + s::name_space_to_string (s::name_space badsym)
			    + ": "
                            + s::name badsym
                            + sp
                            )
                            em::null_error_body;
	#
	fun other_error (s, err)
            =
            err em::ERROR s em::null_error_body;

	#  Error values for undefined package and generic package variables 

	bogus_package =   m::ERRONEOUS_PACKAGE;
	bogus_g       =   m::ERRONEOUS_GENERIC;
	bogus_value   =   v::VARIABLE v::ERRORVAR;



	#  Look up a fixity naming: 
	#
	fun find_fixity_by_symbol (symbol_table, id) : fixity::Fixity
            =
	    {   b = case (st::get (symbol_table, id))
		             ste::NAMED_FIXITY fixity => fixity;
			    _ => bug "lookUpFIX";
                    esac;
	    
                b;
	    }
            except st::UNBOUND
                   =>
                   fixity::NONFIX; end ;



	#  Look up a api: 
	#
	fun find_api_by_symbol (symbol_table, id, err) : m::Api
            = 
	    { b = case (st::get (symbol_table, id) )
			     ste::NAMED_API an_api => an_api;
			    _ => bug "lookUpSIG";
                  esac;
	    
                b;
	    }
            except st::UNBOUND = {   unbound_error (id, "", err);
                                     m::ERRONEOUS_API;
                                 };



	#  Look up a generic api: 
	#
	fun find_generic_api_by_symbol (symbol_table, id, err) : m::Generic_Api
            = 
	    { b = case (st::get (symbol_table, id) )
		             ste::NAMED_GENERIC_API fs => fs;
			    _ => bug "lookUpFSIG";
                  esac;
	    
                b;
	    }
            except st::UNBOUND =  { unbound_error (id, "", err); m::ERRONEOUS_GENERIC_API; };



	#  Look up a variable or a constructor bound to a symbol: 
	#
	fun find_value_by_symbol (symbol_table, symbol, err) : v::Variable_Or_Constructor
            = 
	    {   b = case (st::get (symbol_table, symbol))
		      
                         ste::NAMED_VARIABLE    v => v::VARIABLE v;
			 ste::NAMED_CONSTRUCTOR c => v::CONSTRUCTOR c;
			 _                      => bug "find_value_by_symbol";
                    esac;
	    
                b;
	    }
            except
                st::UNBOUND
                    =
                    {   unbound_error (symbol, "", err);
                        bogus_value;
                    };


	#  Look up path 

	# generic_lookup: generic lookup function for identifiers which may occur in:
	#   1. symbol tables
	#   2. actual package dictionaries
	#   3. api parsing dictionaries 
	#
	fun generic_lookup (symbol_table, spath, out_bind, get_path, error_val, err)
            =
	    case spath
	      
	         sp::SYMBOL_PATH [id]
		     =>
		     out_bind (st::get (symbol_table, id))
		     except
			 st::UNBOUND
			 =
			 {   unbound_error (id, spmsg spath, err);
			     error_val;
			 };


		 sp::SYMBOL_PATH (first ! rest)
		     =>
		     case (st::get (symbol_table, first))

			  ste::NAMED_PACKAGE a_package
			      =>
			      get_path (a_package, sp::SYMBOL_PATH rest, spath)
			      except
				  ms::UNBOUND symbol
				  =
				  {   unbound_error (symbol, spmsg spath, err);
				      error_val;
				  };


			  _   =>
                              {	  # 2009-09-01 CrT: Spur-of-the-moment debug logic -- should
				  # find or create a standard print_path fun to use here. XXX BUGGO FIXME.
				  #
                                  print "generic_lookup: first symbol in path does not name a package, path = '";
                                  print_path (first ! rest)
                                  where
                                      fun print_path []              =>  ();
                                          print_path [symbol]        =>  { printf "%s"   (symbol::name symbol);                  };
                                          print_path (symbol ! rest) =>  { printf "%s::" (symbol::name symbol); print_path rest; };
                                      end;
                                  end;
                                  print "'\n";

                                  bug "generic_lookup.1";
                              };
		     esac
		     except
			 st::UNBOUND
			 =
			 {    unbound_error (first, spmsg spath, err); 
			      error_val;
			 };


	        sp::SYMBOL_PATH []
		    =>
		    bug "generic_lookup: sp::SYMBOL_PATH[]";
            esac;

	# Same as above, without the error message printing:
        #
	fun generic_lookup' (symbol_table, spath, out_bind, get_path, error_val, err)
            =
	    case spath
	      
	         sp::SYMBOL_PATH [id]
		     =>
		     out_bind (st::get (symbol_table, id));


		 sp::SYMBOL_PATH (first ! rest)
		     =>
		     case (st::get (symbol_table, first))

			  ste::NAMED_PACKAGE a_package
			      =>
			      get_path (a_package, sp::SYMBOL_PATH rest, spath);


			  _   =>  bug "generic_lookup'.1";
		     esac;

	        sp::SYMBOL_PATH []
		    =>
		    bug "generic_lookup: sp::SYMBOL_PATH[]";
            esac;



	#  Look up a variable or a constructor (complete path): 
	#
	fun find_value_via_symbol_path (symbol_table, path, err) : v::Variable_Or_Constructor
	    = 
	    {   fun out_val (ste::NAMED_VARIABLE    v) =>  v::VARIABLE v;
		    out_val (ste::NAMED_CONSTRUCTOR c) =>  v::CONSTRUCTOR c;
		    out_val _ => bug "out_val";
                end;
	    
		generic_lookup (symbol_table, path, out_val, ms::get_value_via_path, bogus_value, err);
	    };

	# Same as above, without the error message printing:
        #
	fun find_value_via_symbol_path' (symbol_table, path, err) : v::Variable_Or_Constructor
	    = 
	    {   fun out_val (ste::NAMED_VARIABLE    v) =>  v::VARIABLE v;
		    out_val (ste::NAMED_CONSTRUCTOR c) =>  v::CONSTRUCTOR c;
		    out_val _ => raise exception st::UNBOUND;
                end;
	    
		generic_lookup' (symbol_table, path, out_val, ms::get_value_via_path, bogus_value, err);
	    };



	#  Look up a package 
	#
	fun find_package_via_symbol_path (symbol_table, path, err) : m::Package
            =
	    {  fun out_package (ste::NAMED_PACKAGE a_package)
                       =>
                       a_package;

		   out_package _
                       =>
                       bug "find_package_via_symbol_path";
               end;
	    
                generic_lookup (symbol_table, path, out_package, ms::get_package_via_path, bogus_package, err);
	    };

	# Same as above, without printed error messages:
	#
	fun find_package_via_symbol_path' (symbol_table, path, err) : m::Package
            =
	    {   fun out_package (ste::NAMED_PACKAGE a_package)
                        =>
                        a_package;

		    out_package _
                        =>
                        raise exception st::UNBOUND;
                end;
	    
                generic_lookup' (symbol_table, path, out_package, ms::get_package_via_path, bogus_package, err);
	    };



	# ** Look up a Package_Definition; used in elabsig.sml **
	#
	fun find_package_definition_via_symbol_path (symbol_table, path, err) : m::Package_Definition
            = 
	    {   fun out_sd (ste::NAMED_PACKAGE s)
			=>
			case s
			  
			     m::PACKAGE_API { an_api, module_path }
				 =>
				 m::VARIABLE_PACKAGE_DEFINITION (an_api, module_path);

			     sv  =>
				 m::CONSTANT_PACKAGE_DEFINITION sv;
			esac;

		    out_sd _
                        =>
                        bug "find_package_definition_via_symbol_path";
                end;
	    
                generic_lookup
                    (
                      symbol_table,
                      path,
                      out_sd,
                      ms::get_package_definition_via_path,
                      m::CONSTANT_PACKAGE_DEFINITION bogus_package,
                      err
                    );
	    };



	# Look up a generic package: 
	#
	fun find_generic_via_symbol_path (symbol_table, path, err) : m::Generic
            = 
	    {   fun out_generic (ste::NAMED_GENERIC fct) => fct;
		    out_generic _ => bug "find_generic_via_symbol_path";
                end;
	    
                generic_lookup (symbol_table, path, out_generic, ms::get_generic_via_path, bogus_g, err);
	    };



	# Look up a type constructor:
	#
	fun find_type_constructor_via_symbol_path (symbol_table, path, err) : t::Type_Constructor
            = 
	    {   fun out_type_constructor (ste::NAMED_TYPE type_constructor)
                        =>
                        type_constructor;

		    out_type_constructor _
                        =>
                        bug "find_type_constructor_via_symbol_path";
                end;
	    
                generic_lookup
                    (
                      symbol_table,
                      path,
                      out_type_constructor,
                      ms::get_type_constructor_via_path,
                      t::ERRONEOUS_TYPE_CONSTRUCTOR,
                      err
                    );
	    };



	#  Look up a type_constructor, check that arity is as expected **
	#
	fun find_type_constructor_via_symbol_path_and_check_arity (symbol_table, path, expected_arity, err)
            =
	    case (find_type_constructor_via_symbol_path (symbol_table, path, err))
	      
                 t::ERRONEOUS_TYPE_CONSTRUCTOR
                     =>
                     t::ERRONEOUS_TYPE_CONSTRUCTOR;

		 type_constructor
                     =>
		     if   (tu::type_constructor_arity (type_constructor) != expected_arity)
		         
                          other_error("type constructor " +
			      (sp::to_string (cvp::invert_ipath (tu::type_constructor_path (type_constructor)))) +
			      " given " + (int::to_string expected_arity) + " arguments, wants "
			      + (int::to_string (tu::type_constructor_arity type_constructor)), err);

			  t::ERRONEOUS_TYPE_CONSTRUCTOR;
		     else
                          type_constructor;
                     fi;
            esac;



	# ** Look up an exception **
	#
	fun find_exception_via_symbol_path (symbol_table, path, err) : v::Constructor
	    =
	    (   case (find_value_via_symbol_path (symbol_table, path, err))

		     v::CONSTRUCTOR (c as t::ENUM_CONSTRUCTOR { representation=>(a::EXCEPTION _), ... } )
                     =>
                     c;

		    v::CONSTRUCTOR _
                     => 
		     {   other_error("found data constructor instead of exception", err);
		         v::bogus_exception
                     ;};

		    v::VARIABLE _
                     => 
		     {   other_error("found variable instead of exception", err);
		         v::bogus_exception
                     ;}; esac
            );

    end; #  local 

};			#  package find_in_symbol_table 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories. 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
