package GtkGadgetsBasis:  GTK_GADGETS_BASIS {


   use Gtk

   #  A message is just a function applicable to some gadget 
   type message( A_gadget ) = A_gadget -> Void

   # A maker is a constructor function taking an initial argument,
   # creates an gadget, sends it some initial messages, and returns
   # the gadget

   type maker (A_gadget, A_init) = A_init -> List( message( A_gadget ) ) -> A_gadget

   # An alternative form of maker without any initial arguments 
   # to the constructor

   type maker'( A_gadget ) = List( message( A_gadget ) ) -> A_gadget

   # A signalHandler is a message constructor taking a signal callback as
   # argument.

   type signalHandler( A_gadget ) = (A_gadget -> Void) -> message( A_gadget )

   # An eventHandler is a message constructor taking an event callback as
   # argument.

   type eventHandler( A_gadget ) = (A_gadget * GdkEvent::t -> Bool) -> message( A_gadget )

   #  An typed event handler explicitly handles one kind of events 
   type typedEventHandler (A_gadget, A_event) = 
          (A_gadget * A_event -> Bool) -> message( A_gadget )

   infix <- <~ 

   fun obj <~ message = message obj

   fun (obj:  A_gadget) <- (ps:  List(  message(  A_gadget ) )) = 
   let fun f [] = obj
         | f (p . ps) = (p obj; f ps)
   in  f ps
   end

   fun Gadget constructor init messages = (constructor init) <- messages
   fun Gadget' constructor messages = constructor() <- messages
   fun Comb messages obj = (obj <- messages; ())
   fun every msg xs obj = (obj <- map msg xs; ())
   fun Listify make arg = Comb o (map (make arg))
   fun Listify' make = Comb o (map make) 

   #  signal/event callbacks 
   fun on signal callback obj = (gtk_signal_connect::f (obj, signal, callback);())
   fun when event callback obj = (gtk_event_connect::f (obj, event, callback);())
}
