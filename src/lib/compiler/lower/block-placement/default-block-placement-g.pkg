## default-block-placement-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


# Place blocks in an order that respects the FALLSTHRU and BRANCH (FALSE)
# edges and is otherwise the order of block generation.

# We get invoked from:
#
#     src/lib/compiler/lower/block-placement/block-placement-g.pkg

generic package default_block_placement_g (
    control_flow_graph:  Control_Flow_Graph		# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
)

: (weak) Block_Placement				# Block_Placement	is from   src/lib/compiler/lower/block-placement/block-placement.api

{
    package control_flow_graph = control_flow_graph;

    package g= graph;					# graph			is from   src/lib/graph/graph.pkg

    # Flags:
    #
    dump_control_flow_graph_block_list
        =
        low_code_control::make_bool
          ( "dump_control_flow_graph_block_list",
	    "whether block list is shown"
          );

    dump_control_flow_graph_after_block_placement
        =
        low_code_control::make_bool
          ( "dump_control_flow_graph_after_block_placement",
	    "whether control_flow_graph is shown after block placement"
          );

    dump_strm = low_code_control::debug_stream;

    fun block_to_string (id', control_flow_graph::BLOCK { id, ... } )
        =
	cat ["<", int::to_string id', ":", int::to_string id, ">"];

    fun error msg
        =
        lowcode_error_message::error ("default_block_placement", msg);

    fun block_placement (cfg as g::GRAPH graph)
        =
        {   placed = rw_vector::make_rw_vector (graph.capacity (), FALSE);

	    fun is_marked id =  rw_vector::get (placed, id      );
	    fun mark id      =  rw_vector::set (placed, id, TRUE);

	    fun assert_not_marked id
                =
                if   (is_marked id)
		    
                     error "conflicting placement constraints";
		fi;

	    # Special-case the entry and exit blocks 

	    fun getablek id
                =
                (id, graph.node_info id);

	    entry =  control_flow_graph::entry cfg;
	    exit  =  control_flow_graph::exit  cfg;

	    mark (#1 exit);	# We place exit at the end 


	    # Return TRUE if the edge must connect adjacent nodes: 
            #
	    fun adjacent_edge (_, _, control_flow_graph::EDGE { kind => control_flow_graph::FALLSTHRU,    ... } ) =>  TRUE;
	        adjacent_edge (_, _, control_flow_graph::EDGE { kind => control_flow_graph::BRANCH FALSE, ... } ) =>  TRUE;
	        adjacent_edge _ => FALSE;
            end;

	    find_adjacent_edge = list::find adjacent_edge;


	    # Place nodes by assuming that the
	    # initial order is close to correct:
	    #
	    fun place_nodes ([], l)
                    =>
                    list::reverse (exit ! l);

	        place_nodes ((nd1 as (id1, b1)) ! r1, l)
                    =>
                    if   (is_marked id1)
		        
                         place_nodes (r1, l);
		    else 
			 case r1
			   
			      []  =>
                                  list::reverse (exit ! nd1 ! l);

			      (nd2 as (id2, b2)) ! r2
                                  =>
                                 if   (is_marked  id2)
				     
                                      place_nodes (nd1 ! r2, l);
				 else
				      # Here we know that both nd1 and nd2 have not been
				      # placed.  We need to check for placement constraints
				      # in nd1's out edges and nd2's in edges.

				      mark id1;

				      case (find_adjacent_edge (graph.out_edges id1))
				        
				           NULL
                                               =>
                                               {   fun push_pred_chain (nd as (id, _), r)
                                                       =
						       case (find_adjacent_edge (graph.in_edges id))
						         
						            NULL
                                                                =>
                                                                nd ! r;

							    THE (src, _, _)
                                                                =>
                                                                {   assert_not_marked  src;
							            push_pred_chain (getablek src, nd ! r);
                                                                };
						       esac;


					           place_nodes (push_pred_chain (nd2, r2), nd1 ! l);
					       };

				           THE (_, dst, _)
                                               =>
                                               if   (dst == id2)
					           
                                                    place_nodes (r1, nd1 ! l);
					       else
					            assert_not_marked dst;
					            place_nodes (getablek dst ! r1, nd1 ! l);
                                               fi;
                                      esac;
				 fi;
                         esac;
		     fi;
            end;		# fun place_nodes

	    blocks
                =
                place_nodes (entry ! graph.nodes (), []);

	    if *dump_control_flow_graph_block_list

		 fun say s
                     =
                     file::write (*dump_strm, s);

		 say "Block placement order:\n";

		 list::apply
		     (fn b =  say (cat ["  ", block_to_string b, "\n"]))
		     blocks;

	    fi;

	    if *dump_control_flow_graph_after_block_placement

		 pr_block
                     =
                     control_flow_graph::dump_block (*dump_strm, cfg);

		 file::write (*dump_strm, "[ after block placement ]\n");

		 list::apply   pr_block   blocks;
	    fi;

	    (cfg, blocks);
	};				# fun block_placement
};					# generic package  default_block_placement_g


## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
