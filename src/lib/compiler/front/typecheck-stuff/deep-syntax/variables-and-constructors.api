## variables-and-constructors.api
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# Datastructures describing variable and
# enum constructor declarations.
#
# In particular, the datatypes
#
#     Variable
#     Constructor
#
# provide the value types bound by the symbol table
# for those two namespaces -- see OVERVIEW section in
#
#     src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg



api Variables_And_Constructors {

    Variable
	# This records per-variable information
	# in deep syntax trees:  src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.api
	# It appears in:
        #     VARIABLE_IN_EXPRESSION
        #     VARIABLE_IN_PATTERN
        #     OVERLOAD_DECLARATIONS
        #     NAMED_RECURSIVE_VALUES
	# 'var_type' is a ref because we frequently
	# update it in place when computing and
	# generalizing pattern types:  See
        #     src/lib/compiler/front/typechecker/types/unify-and-generalize-types-g.pkg
        #
        = ORDINARY_VARIABLE {
	    path:        symbol_path::Symbol_Path,		# symbol_path		is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	    var_type:    Ref( types::Type ),			# types			is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	    var_home:    var_home::Var_Home,			# var_home		is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	    inlining_info:
                inlining_information::Inlining_Information	# inlining_information	is from   src/lib/compiler/front/typecheck-stuff/basics/inlining-information.pkg
	    }

	| OVERLOADED_IDENTIFIER  {
	    name:         symbol::Symbol,			# symbol		is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	    type_scheme:  types::Type_Scheme,			# types			is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	    alternatives: Ref( List  { indicator: types::Type,
				       variant:   Variable
				     }
			     )
	  }
	| ERRORVAR
    ;


    Constructor
        =
        types::Constructor;


    Variable_Or_Constructor

        = VARIABLE     Variable
	| CONSTRUCTOR  Constructor;


    make_ordinary_variable:  (symbol::Symbol, var_home::Var_Home) ->  Variable;



    bogus_constructor: Constructor;
    bogus_exception:   Constructor;

};
