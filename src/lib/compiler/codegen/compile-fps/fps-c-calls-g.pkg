# fps-c-calls-g.pkg
#
# This module now contains all the code which handles C-Calls.
# I've moved Matthias' c-call code from translate_fate_passing_style_to_binary_g into here and added
# my own hacks for handling re-entrant C calls.
#
# On the implementation of reentrant C calls, or why it is a hack
# ---------------------------------------------------------------
#
#   For reentrant C call, we need a way of flushing/restore the lib7 state 
# to/from the lib7_state_state data package and preserving all live values.
# Determining the set of live values is a bit tricky and I handle it
# by doing a liveness analysis.  Ideally, the fps phases should be able
# to do the liveness part for us, but after spending weeks 
# looking at the source and asking questions with no one answering,
# I've decided that I've had enough: I need this working NOW 
# so I going to do it the stupid way.  At least this way it is 
# completely self-contained and doesn't involve any fps hacking.
# If in the future someone gets the right info it should be redone in the
# right way.
# 
#  The code for saving/restore live values is quite similar to what
# the garbage_collection stuff is doing, but I'm deathly afraid of merging it into the
# garbage_collection code, because the GC handling code had taken me a long time to 
# get right.  It is an angry slumbering power which will visit its 
# horrible wraths on all who dares to disturb it.
#
# On saving/restoring lib7 state
# ----------------------------
#
# The lib7 state must be threaded into a reentrant C call because the C call
# may invoke Mythryl code internally before it returns.   Saving the state means
# two things:
#   1. Making sure all the live values are properly saved and restored 
#      (and properly tagged so that the gc can find them) 
#   2. Making sure dedicated register such as lib7_heap_cursor are properly
#      single threaded through the calls.
#
# The lib7 state is defined in the runtime struct lib7_state.
# For our purposes, the relevant fields are these:
#                              
#  lib7_val_t   *lib7_heap_cursor;
#  lib7_val_t   *lib7_heap_limit;
#  lib7_val_t    lib7_argument;
#  lib7_val_t    lib7_fate;
#  lib7_val_t    lib7_closure;
#  lib7_val_t    lib7_link_register;
#  lib7_val_t    lib7_program_counter;              
#  lib7_val_t    lib7_exception_fate;
#  lib7_val_t    lib7_current_thread;
#  lib7_val_t    lib7_calleeSave[CALLEESAVE];
#  lib7_val_t    lib7_store_log;    
#  lib7_val_t    lib7_fault_exception;    
#  Word_t         lib7_faulting_program_counter;    
#  lib7_val_t   *lib7_real_heap_limit;     
#  bool_t         lib7_poll_event_is_pending;     
#  bool_t         lib7_in_poll_handler;    
#
# To make a c-call reentrant we flush the following registers back into
# the lib7_state record:
#
#     lib7_heap_cursor      --
#     lib7_heap_limit       --
#     lib7_store_log        --
#     lib7_current_thread   --
#     lib7_exception_fate   --
#
# All all untagged values are packed into a single record
#     lib7_argument         --
#     lib7_fate             --
# 
#
# --- Allen Leung

# Compiled by:
#     src/lib/compiler/core.make6


###                 "On the subject of stars, all investigations
###                  which are not ultimately reducible to simple
###                  visual observations are necessarily denied to us.
###                  We shall never be able by any means to study
###                  their chemical composition."
###
###                                  -- August Compte, 1835


# We are invoked by:
#
#     src/lib/compiler/codegen/main/translate-fate-passing-style-to-binary-g.pkg

							# Machine_Properties	is from   src/lib/compiler/codegen/main/machine-properties.api
generic package fps_c_calls_g (

    package ms:          Machine_Properties;		# Typically 		  src/lib/compiler/codegen/x86/x86-machine-properties.pkg
    package c
        :
        Cpsregs						# Cpsregs		is from   src/lib/compiler/codegen/compile-fps/fps-registers.api
        where codetree::region==cpsregions;
 
    package cells:       Cells;				# Cells			is from   src/lib/compiler/lower/instruction/cells.api

    package translate_codetree_to_target_machine
        :
        Translate_Codetree_To_Target_Machine		# Translate_Codetree_To_Target_Machine	is from   src/lib/compiler/lower/codetree/translate-codetree-to-target-machine.api
        where
            codetree_stream::codetree
            ==
            c::codetree;

    package ccalls
        :
        Ansi_C_Calls					# Ansi_C_Calls		is from   src/lib/compiler/lower/c-calls/c-calls.api
        where codetree == c::codetree;
)

: (weak) api { 
          c_call:  
              { stream:    translate_codetree_to_target_machine::Codetree_Stream, #  Codetree stream 
                regbind:   fate_passing_style::Value -> c::codetree::Int_Expression,   #  lookup integer Highcode_Variable 
                fregbind:  fate_passing_style::Value -> c::codetree::Float_Expression,   #  lookup fp Highcode_Variable 
                typmap:    fate_passing_style::Highcode_Variable -> fate_passing_style::Fps_Type,     #  Highcode_Variable -> cty 
                use_virtual_frame_pointer:       Bool,                    #  virtual frame pointer 
                heap_ptr:  Int                      #  heap pointer 
              }
              -> 
              #  Arguments to RAW_C_CALL 
              ( fate_passing_style::Rcc_Kind, String, ctypes::Ckit_Prototype, List( fate_passing_style::Value ), 
                List( (fate_passing_style::Highcode_Variable, fate_passing_style::Fps_Type) ), fate_passing_style::Fps_Expression
              )
              ->
              #  return 
              { result:    List( c::codetree::Expression ),	#  result (s) 
                heap_ptr:  Int              		        #  heap pointer 
              };
       }
{

    package ts  =  translate_codetree_to_target_machine::codetree_stream;		# Streams 
    package t   =  ts::codetree;       				# Lowcode trees 
    package fps =  fate_passing_style;          	# FPS expressions 
    package r   =  t::region;					# Aliasing info 
    package set =  int_red_black_set;				# Typed set for liveness 
    package d   =  ms::chunk_desc;				# Lib7 chunk descriptors 
    package cb  =  cells_basis; 


    fun error msg
	=
	lowcode_error_message::error ("CPSCalls", msg);

    # Needs to change these when we put in 64-bit support

    ity = 32;		#  Size of integer width 
    pty = 32;		#  Size of pointer 

    address_type = c::address_width;

    #
    # Utilities


    # A FPS register may be implemented as a physical 
    # register or a memory location.  The function assign moves a
    # value v into a register or a memory location.

    fun assign (t::REG (type, r),        v) =>   t::MOVE_INT (type, r, v);
	assign (t::LOAD (type, ea, mem), v) =>   t::STORE (type, ea, v, mem);
	assign _ => error "assign";
    end;

    fun li i =   t::LITERAL (t::machine_int::from_int (ity, i));
    fun lw w =   t::LITERAL (t::machine_int::from_word32 (ity, w));

    #
    # Convert chunk descriptor to int 

    dtoi = large_unt::to_int;


    fun ea (r, 0) => r;
	ea (r, n) => t::ADD (address_type, r, li n);
    end;

    fun same_reg_as x y
	=
	cb::same_cell (x, y);


    #
    # Set abbreviations

    infix val 70  \/ ;
    infix val 80  /\ ;
 #  infix val 60  -- ;

    ooo         = set::empty;
    my (\/)     = set::union;

    fun unions ss
	=
	fold_right (\/) ooo ss;

    fun def (w, s)
	=
	set::delete (s, w)
        except
            _ = s;


    # liveness analysis.
    # Given a fps expression e, return the set of highcode_variables that are live.

    fun liveness e
	=
	{   fun use (fps::VAR v, s) => set::add (s, v);
		use(_, s) => s;
	    end;

	    fun uses ([], s) => s;
		uses (v ! vs, s) => uses (vs, use(v, s));
	    end;

	    case e
		fps::APPLY (v, args)          => uses (v ! args, ooo);
		fps::SWITCH (v, c, l)         => use(v, unions (map liveness l));
		fps::SELECT(_, v, w, t, e)    => use(v, def (w, liveness e));
		fps::RECORD(_, l, w, e)       => uses((map #1 l), def (w, liveness e));
		fps::OFFSET(_, v, w, e)       => use(v, def (w, liveness e));
		fps::SETTER(_, vl, e)         => uses (vl, liveness e);
		fps::LOOKER(_, vl, w, t, e)   => uses (vl, def (w, liveness e));
		fps::ARITH(_, vl, w, t, e)    => uses (vl, def (w, liveness e));
		fps::PURE(_, vl, w, t, e)     => uses (vl, def (w, liveness e));
		fps::BRANCH(_, vl, c, e1, e2) => uses (vl, liveness e1 \/ liveness e2);
		fps::MUTUALLY_RECURSIVE_FNS _ => error "MUTUALLY_RECURSIVE_FNS in fps_c_calls_g::liveness";

		fps::RAW_C_CALL(_, _, _, vl, wtl, e)
                    =>
                    uses (vl, fold_left (fn ((w, _), s) = def (w, s)) (liveness e) wtl);
            esac;
	};

    #
    # Pack live values into records.
    #
    # 1. Untagged stuff like INT32t or FLTt are packed into an unboxed record 
    #    with record tag tag_raw32.  Small stuff goes first so that there 
    #    will be at most one hole in the record due to alignment.
    # 2. Tagged stuff goes into a normal record with tag_record.
    #
    # NOTE: live values include only the highcode_variables, not dedicated registers
    #       like the heap pointer, base pointer, current exception pointer,
    #       etc.  

    fun save_live_highcode_variables { emit, typmap, regbind, fregbind } (w, expression, heap_ptr)
	= 
	{   lll = liveness expression;		#  Compute liveness 
	    lll = def (w, lll);			#  Remove the Highcode_Variable that the RAW_C_CALL defines 
	    lll = set::vals_list lll;		#      in list form 


	    #  Store a record item:

	    fun store (v, size, FALSE) offset
		=>
		t::STORE (size, ea (c::allocptr, offset), regbind v, r::memory);

	       store (v, size, TRUE) offset
		=>
		t::FSTORE (size, ea (c::allocptr, offset), fregbind v, r::memory); end;


	    # Reload a record item 
	    #
	    fun reload (size, FALSE) (v, record, offset)
		    =>
		    t::MOVE_INT (size, v, t::LOAD (size, ea (record, offset), r::memory));

	        reload (size, TRUE) (v, record, offset)
		    =>
		    t::MOVE_FLOAT (size, v, t::FLOAD (size, ea (record, offset), r::memory));
            end;


	    #  Partition the live values
	    # into tagged and untagged:

	    fun partition ([], tagged, untagged)
		=>
		(tagged, untagged);

	       partition (v ! vl, tagged, untagged)
		=>
		{   t       = typmap v;
		    size      = fps::size_in_bits t;
		    tag     = fps::is_tagged t;
		    is_float = fps::is_float t;
		    store   = store (v, size, is_float);
		    load    = reload (size, is_float);

		    if tag   partition (vl, (store, load, size) ! tagged, untagged);
		    else     partition (vl, tagged, (store, load, size) ! untagged);    fi;
		}; end;

	    my  (tagged, untagged)
		=
		partition (lll, [], []);


	    #  Sort by non-decreasing size: 
	    #
	    sort_by_size
		=
		list_mergesort::sort
		    (fn ((_, _, x), (_, _, y)) = x>y);


	    #  Determine offset: 
	    #
	    fun assign_offset ([], ls, heap_ptr)
		    =>
		    (reverse ls, heap_ptr);

		assign_offset((v as  (_, _, size)) ! vl, ls, heap_ptr)
		    => 
		    case size

			 32 => assign_offset (vl, (v, heap_ptr) ! ls, heap_ptr+4);

			 64 => {   heap_ptr =   if (heap_ptr % 8 == 4)   heap_ptr + 4;
						else                     heap_ptr;
                                                fi;

				    assign_offset (vl, (v, heap_ptr) ! ls, heap_ptr+8);
				};

			 _  => error "assign_offset";
		    esac;
	    end;

	    tagged   =  sort_by_size tagged;
	    untagged =  sort_by_size untagged;

	    ();
	};


    # This function generates code to save the lib7 state.
    #
    fun save_restore_lib7_state ()
	=
	();


    # This is the main entry point for C calls.
    # It takes the following things as arguments.
    #   1. An codetree stream. 
    #   2. regbind:   Highcode_Variable -> int_expression
    #   3. fregbind:  Highcode_Variable -> float_expression
    #   4. typmap:    Highcode_Variable -> cty
    #   5. use_virtual_frame_pointer:       using virtual frame pointer?
    #   6. heap_ptr:  heap pointer
    #   7. arguments to RAW_C_CALL
    # The function emits the call code and returns:
    #   1. result    --- return value of call
    #   2. heap_ptr  --- the heap pointer 
    #
    fun c_call
	{ stream =>   ts::instruction_stream::STREAM { emit, ... }, 
	  regbind,
	  fregbind,
	  typmap,
	  use_virtual_frame_pointer, 
	  heap_ptr
	} 
	( reentrant,
          linkage,
          p,
          vl,
          wtl,
          e
        )
	=
	{   my  { return_type, parameter_types, ... }
		=
		p:  ctypes::Ckit_Prototype;


	    fun build_args vl
		= 
		{
		    include ctypes;

		    fun m (C_DOUBLE, v ! vl)
			    =>
			    ([ccalls::FARG (fregbind v)], vl);

		        m (C_FLOAT, v ! vl)
			    =>
			    ([ccalls::FARG (t::CVTF2F (32, 64, fregbind v))], vl);

		        m ((C_UNSIGNED (I_CHAR | I_SHORT | I_INT | I_LONG) |
			    C_SIGNED (I_CHAR | I_SHORT | I_INT | I_LONG) |
			    C_PTR),
			   v ! vl)
			    =>
			    ([ccalls::ARG (regbind v)], vl);

		        m ((C_STRUCT _ | C_UNION _), v ! vl)
			    =>
			    ([ccalls::ARG (regbind v)], vl);		     #  pass struct using the pointer to its beginning 

		        m ((C_SIGNED I_LONG_LONG | C_UNSIGNED I_LONG_LONG), v ! vl)
			    =>
			    {   fun field' off
				    =
				    t::LOAD (ity, t::LOAD (pty, ea (regbind v, off), r::memory),
					    r::memory);

				([ccalls::ARG (field' 4), ccalls::ARG (field' 0)], vl);
			    };

		        m (C_LONG_DOUBLE, _)
			    =>
			    error "RAW_C_CALL: unexpected long double argument";

		        m (C_ARRAY _, _) => error "RAW_C_CALL: unexpected array argument";
		        m (C_VOID, _   ) => error "RAW_C_CALL: unexpected void argument";
		        m (_, []       ) => error "RAW_C_CALL: not enough Mythryl7 args";
                    end 

		    also
                    fun ml (tl, vl)
			 =
			 {   fun one (t, (ral, vl))
				 =
				 {   my  (a, vl')
					 =
					 m (t, vl);

				     (a @ ral, vl');
				 };

			     my  (ral, vl')
				 =
				 fold_left one ([], vl) tl;

			     (reverse ral, vl');
			};

		    case (ml (parameter_types, vl))
			(al, []) =>  al;
			_        =>  error "RAW_C_CALLS: too many Mythryl7 args";
                    esac;

		};                                        #  Build_args 

	    my  (f, sr, a)
		=
		case (return_type, vl)

		     ((ctypes::C_STRUCT _ | ctypes::C_UNION _), fv ! srv ! avl)
			 =>
			 {   s =   regbind srv;

			    (   regbind fv,
				fn _ => s; end ,
				build_args avl
			    );
			 };

		    (_, fv ! avl)
			=>
			( regbind fv,
			  fn _ = error "RAW_C_CALL: unexpected struct return",
			  build_args avl
                        );

		    _   => error "RAW_C_CALL: prototype/arglist mismatch";
                esac;

	    fun srd defs
		=
		loop (defs, [], [])
                where
		    fun loop ([], s, r)
			    =>
			    { save => s, restore => r };

			loop (t::INT_EXPRESSION (t::REG (type, g)) ! l, s, r)
			    =>
			    if (list::exists (same_reg_as g) c::ccall_caller_save_r)

				t =   cells::new_reg ();

				loop (l, t::COPY_INTS (type, [t], [g]) ! s,
					 t::COPY_INTS (type, [g], [t]) ! r);

			    else
				 loop (l, s, r);
			   fi;

			loop (t::FLOAT_EXPRESSION (t::FREG (type, f)) ! l, s, r)
			    =>
			    if (list::exists (same_reg_as f) c::ccall_caller_save_f)

				t =   cells::new_freg ();

				loop (l, t::COPY_FLOATS (type, [t], [f]) ! s,
					 t::COPY_FLOATS (type, [f], [t]) ! r);
			    else
				loop (l, s, r);
			    fi;

		       loop _
			    =>
			    error "saveRestoreDedicated: unexpected def";
		    end;
		end;				#  srd 

	    param_alloc
		=
		case (ms::ccall_prealloc_argspace)

		    NULL => (fn { szb, align } => FALSE; end );
		    THE s => (fn { szb, align } =>
				  if (szb > s )
				      error "argument list in C-call too big";
				  else TRUE;fi; end );
		esac;

	    my  { callseq, result }
		=
		ccalls::gen_call
		    { name         => f,
                      fn_prototype => p,
                      struct_ret   => sr,
		      save_restore_dedicated => srd,
		      param_alloc,
		      call_comment => THE ("C prototype is: " + cprototype::c_prototype_to_string p),
		      args => a
                    };

	    fun with_vsp f
		=
		{   frameptr =   c::frameptr use_virtual_frame_pointer;

		    lib7_state
			=
			t::LOAD (address_type, ea (frameptr, ms::lib7_state_offset),
				r::stack);

		    vsp =   t::LOAD (address_type, ea (lib7_state, ms::vproc_offlib7_state), r::memory);

		    vsp' =   t::REG (address_type, cells::new_reg ());

		    in_lib7 =   t::LOAD (ity, ea (vsp', ms::in_lib7off_vsp),
				       r::memory);

		    limit_ptr_mask
			=
			t::LOAD (32, ea (vsp', ms::limit_ptr_mask_off_vsp),
				r::memory);

		    #  Move vsp to its register:

		    emit (assign (vsp', vsp));

		    f { in_lib7, limit_ptr_mask };

		};		#  withVSP 

	    #  Prepare for leaving Lib7 

	    with_vsp (fn { in_lib7, limit_ptr_mask }
			=
			{   emit (assign (limit_ptr_mask, lw 0uxffffffff));		#  Set vp_limitPtrMask to -1 

			    emit (assign (in_lib7, lw 0u0));				#  Set vp_inLib7 to 0 
			}
		     );


	    # Now do the actual call! 
	    #
	    apply emit callseq;


	    # Come back to Lib7, restore proper limit pointer: 
	    #
	    with_vsp (fn { in_lib7, limit_ptr_mask }
			=
			{   emit (assign (in_lib7, lw 0u1));		#  set vp_inLib7 back to 1 

			    emit (assign (c::limitptr  use_virtual_frame_pointer,
				       t::BITWISEAND (pty, limit_ptr_mask,
						    c::limitptr  use_virtual_frame_pointer)));			#  limitPtr := limitPtr & vp_limitPtrMask 
			}
		     );

	    #  Find result: 
	    #
	    result
		= 
		case (result, return_type)

		    (([] | [_]), (ctypes::C_VOID | ctypes::C_STRUCT _ | ctypes::C_UNION _))
			=>
			[];

		    ([], _)                             => error "RAW_C_CALL: unexpectedly few results";
		    ([t::FLOAT_EXPRESSION x], ctypes::C_FLOAT)       => [t::FLOAT_EXPRESSION (t::CVTF2F (64, 32, x))];
		    ([r as t::FLOAT_EXPRESSION x], ctypes::C_DOUBLE) => [r];
		    ([t::FLOAT_EXPRESSION _], _)                     => error "RAW_C_CALL: unexpected FP result";

		    ([r1 as t::INT_EXPRESSION _, r2 as t::INT_EXPRESSION _],
		     (ctypes::C_SIGNED ctypes::I_LONG_LONG |
		      ctypes::C_UNSIGNED ctypes::I_LONG_LONG))
			 =>
			 [r1, r2];

		    ([r as t::INT_EXPRESSION x], _)
			=>
			[r];					#  more sanity checking here ?  XXX BUGGO FIXME

		   _ => error "RAW_C_CALL: unexpectedly many results";
               esac;

	    { result, heap_ptr };
	};				# fun c_call 

};					#  generic package fps_c_calls_g 
