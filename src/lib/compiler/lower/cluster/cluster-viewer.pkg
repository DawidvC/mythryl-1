## cluster-viewer.pkg
#
# This is a simple module for viewing a cluster graph graphically.
# This is meant to be used only by those of you who don't want to 
# migrate to the control_flow_graph data package.
#
# -- Allen Leung

generic package cluster_viewer_g
   (package cluster_graph:  Cluster_Graph
    package graph_viewer:   Graph_Viewer
    package asm:           Instruction_Emitter
       sharing cluster_graph::f::I = asm::I 
   ) : CLUSTER_VIEWER
{

   package cluster_graph = cluster_graph
   package f = cluster_graph::F
   package w = cluster_graph::W
   package l = graph_layout
   package fmt = format_instruction_g (asm)
   package g = graph

   view_outline
       =
       LowCodeControl::getFlag "view_outline"

   fun view (clusterGraph as g::GRAPH cfg) = 
   let my f::CLUSTER { annotations, ... } = cluster_graph::cluster clusterGraph 
       to_string = fmt::to_string *annotations
       fun graph _ = []

       red = l::COLOR "red"
       yellow = l::COLOR "yellow"
       green = l::COLOR "green"
       ENTRY = hd (cfg.entries ())
       EXIT  = hd (cfg.exits ())

       fun edge (i, j, REF w) = 
       let label = l::LABEL (w::to_string w)
           color =
               if i == ENTRY or j == EXIT then green #  special edge 
               else if i+1 == j then yellow #  fallsthru 
               else red
       in  [label, color] end

       fun title (blknum, REF freq) = 
           " "$int::to_string blknum$" ("$w::to_string freq$")"

       fun ann (annotations) = 
            list::fold_left (fn (a, l) => "/* "$note::to_string a$" */\n"$l) ""
                             *annotations

       fun node (_, f::ENTRY { blknum, freq, ... } ) = 
              [l::LABEL("entry"$title (blknum, freq)$"\n"$ann (annotations))]
         | node(_, f::EXIT { blknum, freq, ... } )  = 
              [l::LABEL("exit"$title (blknum, freq))]
         | node(_, f::BBLOCK { annotations, blknum, freq, instructions, ... } ) =
              [l::LABEL (title (blknum, freq)$"\n" $
                 ann (annotations) $
                 (if *view_outline then "" else
                 list::fold_left (fn (i, t) => 
                             let text = to_string i
                             in  if text == "" then t else text$"\n"$t end
                            ) "" *instructions))]
         | node (_, _) = [l::LABEL "???"]
   in  graph_viewer::view
         (l::makeLayout { graph=graph, edge=edge, node=node } clusterGraph)
   end
          
}
