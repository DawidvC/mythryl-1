local
   include gtk_main;
   include gtk_enums;
   include gdk_enums;
   include c;

   gtk_widget_state = gtk_widget::get'state 

   pixmap = REF NULL
in

     # Create a new backing pixmap of the appropriate size 

     fun configure_event (widget, event)
	 = 
	 {   use gtk_widget GtkAllocation;

	     case *pixmap
	       of THE p => gdk_pixmap_unref::f p
		| NULL _ => ();

	     alloc  =  get_allocation widget;
	     width  =  get_width alloc;
	     height =  get_height alloc;

	     p =   gdk_pixmap_new::f (get_window widget, width, height, -1);

	     pixmap := THE p;

	     gdk_draw_box::f
		(p,
		 get_style widget->white_gc,
		 TRUE,
		 0, 0,
		 width,
		 height
		);
	 }

     # Redraw the screen from the backing pixmap 

     fun expose_event (widget, event)
	 =
	 {   use GdkEvent GdkRectangle;

	     area =   get_area event;
	     x    =   get_x area;
	     y    =   get_y area;

	     gdk_draw_pixmap::f
	       (widget->window,
		widget->style->fg_gc[gtk_widget_state (widget)],
		pixmap,
		event->area::x, event->area::y,
		event->area::x, event->area::y,
		event->area::width, event->area::height);
	 }

     fun draw_brush (widget, source, x, y, pressure)
	 =
	 {   gc = case source of
		    GDK_SOURCE_MOUSE => widget->style->dark_gc[gtk_widget_state (widget)]
		  | GDK_SOURCE_PEN => widget->style->black_gc
		  | GDK_SOURCE_ERASER => widget->style->white_gc
		  | _ =>  widget->style->light_gc[gtk_widget_state (widget)];

	     update_box = GdkRectangle::new::ptr
				 { x = x - 10 * pressure,
				  y = y - 10 * pressure,
				  width = 20 * pressure,
				  height = 20 * pressure
				 };

	   gdk_draw_box::f (pixmap, gc, TRUE,
				 x - 10 * pressure,
				 y - 10 * pressure,
				 20 * presure, 20 * height);

	   gtk_widget_draw::f    (widget, update_box);

	   c::free' update_box;
	 }

     fun print_button_press deviceid
	 =

	 # gdk_input_list_devices returns an internal list,
	 # so we shouldn't free it afterwards

	 {   tmp_list =   gdk_input_list_devices::f ();

	     while (tmp_list) do

		 {   info =   (GdkDeviceInfo *) tmp_list->data;

		     if (info->deviceid ==== deviceid)
		      {  print("Button press on device '%s'\n", info->name);
			 return;
		      };
		      tmp_list = tmp_list->next;
		 }
	 }

     fun button_press_event (widget, event)
	 =
	 (print_button_press (event->deviceid);
	  if (event->button ==== 1 && pixmap != NULL)
	    draw_brush (widget, event->source, event->x, event->y, event->pressure);
	  TRUE
	 )

     fun motion_notify_event (widget, event) =
  {
    gdouble x, y;
    gdouble pressure;
    GdkModifierType state;

    if (event->is_hint)
      gdk_input_window_get_pointer::f (event->window, event->deviceid,
				      &x, &y, &pressure,
				      NULL, NULL, &state);
    else
      {
	x = event->x;
	y = event->y;
	pressure = event->pressure;
	state = event->state;
      }

    if (state & GDK_BUTTON1_MASK && pixmap != NULL)
      draw_brush (widget, event->source, x, y, pressure);

    TRUE
  }

  void
  input_dialog_destroy (GtkWidget *w, gpointer data)
  {
    *((GtkWidget **)data) = NULL;
  }

  void
  create_input_dialog ()
  {
    static GtkWidget *inputd = NULL;

    if *inputd
      {
	inputd = gtk_input_dialog_new::f();

	gtk_signal_connect::f (GTK_OBJECT (inputd), "destroy",
			    (GtkSignalFunc)input_dialog_destroy, &inputd);
	gtk_signal_connect_object::f (GTK_OBJECT (GTK_INPUT_DIALOG (inputd)->close_button),
				   "clicked",
				   (GtkSignalFunc)gtk_widget_hide,
				   GTK_OBJECT (inputd));
	gtk_widget_hide::f ( GTK_INPUT_DIALOG (inputd)->save_button);

	gtk_widget_show::f (inputd);
      }
    else
      {
	if (*GTK_WIDGET_MAPPED (inputd))
	  gtk_widget_show::f (inputd);
	else
	  gdk_window_raise::f (inputd->window);
      }
  }

  void quit ()
  {
    gtk_exit::f (0);
  }

  fun main argv = 
  {
    GtkWidget *window;
    GtkWidget *drawing_area;
    GtkWidget *vbox;

    GtkWidget *button;

    gtk_init argv;

    window = gtk_window_new::f (GTK_WINDOW_TOPLEVEL);
    gtk_widget_set_name::f (window, "Test Input")

    vbox   = gtk_vbox_new::f (FALSE, 0)
    gtk_container_add::f (window, vbox);
    gtk_widget_show::f vbox
    gtk_signal_connect (window, "destroy", quit)

    #  Create the drawing area 

    drawing_area = gtk_drawing_area_new::f ()
    gtk_drawing_area_size::f (drawing_area, 200, 200)
    gtk_box_pack_start::f (vbox, drawing_area, TRUE, TRUE, 0)
    gtk_widget_show::f drawing_area

    #  Signals used to handle backing pixmap 

    gtk_signal_connect (drawing_area, "expose_event",
					   expose_event);
    gtk_signal_connect (drawing_area, "configure_event",
					   configure_event);

    #  Event signals 

    gtk_signal_connect (drawing_area, "motion_notify_event",
					   motion_notify_event);
    gtk_signal_connect (drawing_area, "button_press_event",
					   button_press_event);

    gtk_widget_set_events (drawing_area, 
			     GDK_EXPOSURE_MASK
			   + GDK_LEAVE_NOTIFY_MASK
			   + GDK_BUTTON_PRESS_MASK
			   + GDK_POINTER_MOTION_MASK
			   + GDK_POINTER_MOTION_HINT_MASK)

    /* The following call enables tracking and processing of extension
       events for the drawing area */
    gtk_widget_set_extension_events 
			    (drawing_area, GDK_EXTENSION_EVENTS_CURSOR)

    #  .. And some buttons 
    button = gtk_button_new_with_label::f ("Input Dialog")

    gtk_box_pack_start::f (vbox, button, FALSE, FALSE, 0)

    gtk_signal_connect (button, "clicked",
				create_input_dialog, NULL);
    gtk_widget_show::f button

    button = gtk_button_new_with_label::f "Quit"
    gtk_box_pack_start::f (vbox, button, FALSE, FALSE, 0)

    gtk_signal_connect_object::f (button, "clicked",
					 gtk_widget_destroy,
					 window);
    gtk_widget_show::f button

    gtk_widget_show::f window

in gtk_main ()
end
