#
# Bag enum that uses hashing
# 
# -- Allen Leung



###               "If the code and the comments disagree,
###                then both are probably wrong."
###
###                            -- Norm Schryer



package hash_bag :> HASH_BAG =
pkg

   package s = hash_map

   type bag( X ) = s::Map( X, int )  * Ref( Int )

   fun create x n = (s::create x n, REF 0)

   fun insert (bag, c) i =
      (s::update bag ((i, 1), fn x => x + 1); c := *c + 1)
  
   fun insertN (bag, c) (i, n: Int) =
      (s::update bag ((i, n), fn x => x + n); c := *c + n)

   fun size (_, c) = *c

   fun bucketSize (bag, _) = s::bucketSize bag

   fun is_empty (_, c) = *c = 0

   fun remove (bag, c) i = 
      let x = s::lookupOrElse bag 0 i
      in  if x > 0 then (s::set bag (i, x - 1); c := *c - 1) else ()
      end

   fun removeN (bag, c) (i, n) =  
      let x = s::lookupOrElse bag 0 i
      in  if x > n then (s::set bag (i, x-n); c := *c - n) 
          else (c := *c - int::min (x, n); s::remove bag i)
      end

   fun removeAll (bag, c) i = s::remove bag i

   fun toList (bag, _) = s::toList bag

   fun clear (bag, c) = (s::clear bag; c := 0)

   fun contains (bag, _) i = s::contains bag i

   fun count (bag, _) i = s::lookupOrElse bag 0 i

   fun apply f (bag, _) = s::apply f bag

   fun dupApp f (bag, _) =
   let fun f' (x, 0) = ()
         | f' (x, n) = (f x; f'(x, n - 1))
   in
       s::apply f' bag
   end

   fun fold f x (bag, _) = s::fold f x bag

   fun dupFold f x (bag, _) =
   let fun f' ((x, 0), l) = l
         | f' ((x, n), l) = f'((x, n - 1), f (x, l))
   in  s::fold f' x bag
   end

   fun toDupList bag = dupFold (op . ) [] bag

   fun to_string str bag
       =
       "{ " + dupFold (fn (x, "") => str x
                      | (x, l)  => str x + ", " + l) "" bag + "}"
end

