# match-gen-g.pkg
# Interface with the match compiler to generate Mythryl code.

# Compiled by:
#     src/lib/compiler/lower/tools/Match-Compiler.make6



###                        "Do not eat your heart."
###
###                                   -- Pythagoras



# 2008-01-29 CrT:   So far as I can tell, this generic is not invoked
#                   by the compiler mainline.  It -is- invoked by:
#
#                       src/lib/c-glue/ml-grinder/ml-grinder.pkg
#                       src/lib/compiler/lower/tools/nowhere/nowhere.pkg
#                       src/lib/compiler/lower/tools/match-compiler/test-match-g.pkg
#
#                   Compiler mainline pattern-match compilation is handled by
#
#                       src/lib/compiler/upper/translate/compile-pattern.pkg 
#
generic package match_gen_g (

    package raw_syntax_tree_pp:        Mdl_Ast_Prettyprinter;		# Mdl_Ast_Prettyprinter	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast-pp.api
    package raw_syntax_stuff:          Mdl_Ast_Util;			# Mdl_Ast_Util		is from   src/lib/compiler/lower/tools/fake-sml-ast/ast-util.api
    package raw_syntax_tree_rewriter:  Mdl_Ast_Rewriter;		# Mdl_Ast_Rewriter	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast-rewrite.api
       sharing       raw_syntax_tree_pp::raw_syntax
            ==         raw_syntax_stuff::raw_syntax
            == raw_syntax_tree_rewriter::raw_syntax;
)

: (weak) Match_G					# Match_G			is from   src/lib/compiler/lower/tools/match-compiler/match-g.api

{
							# lowcode_prettyprinter		is from   src/lib/compiler/lower/tools/prettyprint/lowcode-prettyprinter.pkg
    package raw_syntax
        =
        raw_syntax_tree_pp::raw_syntax;

    package a  =  raw_syntax;
    package r  =  raw_syntax_tree_rewriter;
    package pp =  lowcode_prettyprinter;

    no =  r::no_rewrite;
    rw =  r::rewrite;

    my +++ = pp::(+++);

    infix val +++ ;

    i2s =  int::to_string;

    package guard
      =
      package {
	 Guard = (Int, a::Expression);

	 fun to_string (_, e)
             =
             pp::text (raw_syntax_tree_pp::expression e);

	 fun compare ((i, _), (j, _))
             =
             int::compare (i, j); 

	 counter = REF 0;

	 fun guard e
             =
             (*counter, e)
             before
                 counter := *counter + 1;

	 fun logical_and ((_, x), (_, y))
             =
             guard
                 (raw_syntax_stuff::and_fn (x, y));
      };

    package expression
	=
	package {
	    Expression =  a::Expression;
	    to_string  =  pp::text o raw_syntax_tree_pp::expression;
	};

    package literal
	=
	package {
	   Literal   =  a::Literal;
	   to_string =  pp::text o raw_syntax_tree_pp::literal;
	   compare   =  raw_syntax_stuff::compare_literal;
	   bools     =  THE { others => FALSE,
			      known  => [a::BOOL_LIT FALSE, a::BOOL_LIT TRUE]
			    };

	   fun variants (a::BOOL_LIT _) =>  bools;
	       variants _              =>  NULL;
	   end; 

	   package map
	       =
	       red_black_map_g (						# red_black_map_g		is from   src/lib/src/red-black-map-g.pkg
		   Key =  Literal;
		   compare =  compare;
	       );
	};

    package lit_map
        =
        literal::map;

    Constructor_Form
	=
	ENUM_CONSTRUCTOR_FORM  (List( a::Id ), a::Consbind, a::Datatypebind) 
	|
	EXCEPTION  (List( a::Id ), a::Id, Null_Or( a::Some_Type ));

    package con
	=
	package {

	    Con =  Constructor_Form; 

	    fun to_string (ENUM_CONSTRUCTOR_FORM (path, a::CONSBIND { id, ... }, _))
		    => 
		    pp::text (raw_syntax_tree_pp::ident (a::IDENT (path, id)));

		to_string (EXCEPTION (path, id, type))
		    =>
		    pp::text (raw_syntax_tree_pp::ident (a::IDENT (path, id)));
	    end;

	    fun compare (ENUM_CONSTRUCTOR_FORM(_, a::CONSBIND { id=>x, ... }, _),
			 ENUM_CONSTRUCTOR_FORM(_, a::CONSBIND { id=>y, ... }, _))
		    =>
		    string::compare (x, y);

		compare (EXCEPTION(_, x, _), EXCEPTION(_, y, _))
		    =>
		    string::compare (x, y);

		compare (ENUM_CONSTRUCTOR_FORM _, EXCEPTION _) =>  LESS;
		compare (EXCEPTION _, ENUM_CONSTRUCTOR_FORM _) =>  GREATER;
	    end;

	    fun variants (ENUM_CONSTRUCTOR_FORM (path, _, dt as a::DATATYPEBIND { cbs, ... } ))
		    =>
		    { others =>  FALSE,
		      known  =>  map
				     (fn c =  ENUM_CONSTRUCTOR_FORM (path, c, dt))
				     cbs
		    };

		variants (EXCEPTION _)
		    =>
		    { known => [],   others => TRUE };
	    end;

	    fun arity (ENUM_CONSTRUCTOR_FORM (_, a::CONSBIND { type => NULL,       ... }, _)) =>  0;
		arity (ENUM_CONSTRUCTOR_FORM (_, a::CONSBIND { type => THE type, ... }, _)) =>  1;

		arity (EXCEPTION(_, _, NULL))  =>  0;
		arity (EXCEPTION(_, _, THE _)) =>  1;
	    end;
	};

    package variable
	=
	package {

	    Var = a::Id;

	    compare =  string::compare; 

	    fun to_string x
		=
		x;

	    package map
		=
		red_black_map_g (						# red_black_map_g		is from   src/lib/src/red-black-map-g.pkg
		    Key = Var; 
		    compare = compare;
		);

	    package set
		=
		red_black_set_g (
		    Key = Var; 
		    compare = compare;
		);
	};

    package action
	=
	package {

	    Action = a::Expression;

	    to_string
		=
		pp::text o raw_syntax_tree_pp::expression;

	    fun free_vars e
		=
		{   fvs =  REF  variable::set::empty;

		    fun expression _ (e as a::IDEXP (a::IDENT([], x)))
			    => 
			    {   fvs := variable::set::add(*fvs, x);
				e;
			    };

			expression _ e
			    =>
			    e;
		    end;

		    .expression
			(r::rewrite { pattern=>no, expression, decl=>no, sexp=>no, type=>no } )
			e;

		    variable::set::vals_list  *fvs;
		}; 
	};

    package mc
        =
        match_compiler_g (
            package guard      = guard;
	    package expression = expression;
	    package literal    = literal;
	    package con        = con;
	    package variable   = variable;
	    package action     = action;
	);

    fun id_fn x
	=
	a::IDEXP (a::IDENT([], x));

    fun state_fn x
	=
        "state_" + (i2s x);

    exception MATCH_COMPILER = mc::MATCH_COMPILER;

    package dictionary
	=
	package {

	    Dictionary
                =
                DICTIONARY
                  { cons: variable::map::Map( Constructor_Form ),
		    sigs: variable::map::Map( Dictionary )
		  };

	    fun insert_cons (DICTIONARY { cons, sigs }, id, datatype_constructor_representation)
		=
		DICTIONARY {
		  cons => variable::map::set (cons, id, datatype_constructor_representation),
		  sigs
		};

	    fun bind_api_identifier (DICTIONARY { cons, sigs }, id, dictionary)
		=
		DICTIONARY {
		  cons,
		  sigs => variable::map::set (sigs, id, dictionary)
		};

	    fun lookup_sig  (DICTIONARY { sigs, ... }, id) =  variable::map::get (sigs, id);
	    fun lookup_cons (DICTIONARY { cons, ... }, id) =  variable::map::get (cons, id);

	    empty = DICTIONARY
                      {
		        cons => variable::map::empty,
		        sigs => variable::map::empty
		      };
	};

    Compiled_Type_Info
        =
        dictionary::Dictionary; 

    # Enter all datatypes
    # definitions into a list:
    #
    fun compile_types ds
	=
	decls (ds, dictionary::empty)
        where
            fun decl (a::DATATYPEDECL (dbs, _),                    dictionary) =>  dbinds (dbs, dictionary);
		decl (a::EXCEPTIONDECL ebs,                        dictionary) =>  ebinds (ebs, dictionary);
		decl (a::MARKDECL(_, d),                           dictionary) =>  decl (d, dictionary);

		decl (a::API_DECL (id, a::DECLSIG ds),             dictionary) =>  decls (ds, dictionary);
		decl (a::PACKAGEDECL (id, _, _, a::DECLSEXP ds),   dictionary) =>  nested (id, ds, dictionary);

		decl (a::SEQDECL ds,                               dictionary) =>  decls (ds, dictionary);
		decl (_,                                           dictionary) =>  dictionary;
            end 

	    also
            fun decls (ds, dictionary)
                =
                list::fold_right decl dictionary ds 

	    also
	    fun dbind (t as a::DATATYPEBIND { cbs, ... }, dictionary)
                    => 
		    list::fold_right
                        (fn (c as a::CONSBIND { id, ... }, dictionary)
                            =
			    dictionary::insert_cons (dictionary, id, ENUM_CONSTRUCTOR_FORM([], c, t))
                        )
			dictionary
                        cbs;

		dbind(_, dictionary)
                    =>
                    dictionary;
	    end 

	    also
            fun dbinds (dbs, dictionary)
                =
                list::fold_right dbind dictionary dbs

	    also
            fun ebind (a::EXCEPTIONBIND (id, type), dictionary)
		    =>
		    dictionary::insert_cons (dictionary, id, EXCEPTION([], id, type));

		ebind(_, dictionary)
                    =>
                    dictionary;
	     end 

	    also
            fun ebinds (ebs, dictionary)
                =
                list::fold_right ebind dictionary ebs

	    also
            fun nested (id, ds, dictionary)
                = 
		{   dictionary' = decls (ds, dictionary::empty); 
		    dictionary::bind_api_identifier (dictionary, id, dictionary');
		};
	end;

    fun pr_clause (p, g)
        = 
	pp::text ( raw_syntax_tree_pp::pattern p +++ pp::sp +++ 
		   case g    NULL  => pp::(!_) "=> ...";
			   THE e => pp::(!_) "where ... => ...";
                   esac
                 );

    fun compile dictionary clauses
	=
	{   # Rename all rules 

	    fun has_con x
		=
		not_null (dictionary::lookup_cons (dictionary, x));

	    fun lookup (dictionary, path,[], x)
                    => 
		    case (dictionary::lookup_cons (dictionary, x))
                      
		         THE (ENUM_CONSTRUCTOR_FORM(_, c, t))
                             =>
                             ENUM_CONSTRUCTOR_FORM (path, c, t);

		         THE (EXCEPTION(_, id, t))
                             =>
                             EXCEPTION (path, id, t);

		         NULL
                             =>
                             raise exception MATCH_COMPILER("undefined constructor " + x);
                    esac;

	        lookup (dictionary, path, p ! ps, x)
		    => 
		    case (dictionary::lookup_sig (dictionary, p))
                      
		         THE dictionary
                             =>
                             lookup (dictionary, path, ps, x);

		         NULL
                             =>
                             raise exception MATCH_COMPILER("undefined package " + p + " in " +
					       pp::text (raw_syntax_tree_pp::ident (a::IDENT (path, x))));
                    esac;

            end;

	    fun lookup_con (a::IDENT (p, x))
                =
                lookup (dictionary, p, p, x);

	    # Rewrite list patterns 
	    #
	    fun trans_list_pattern p
		= 
		{   fun cons (x, y)
                        =
                        a::CONSPAT (a::IDENT([], "::"), THE (a::TUPLEPAT [x, y]));

		    nil = a::CONSPAT (a::IDENT([], "NIL"), NULL);

		    fun listify ([], THE p) =>  p;
		        listify ([], NULL)  =>  nil;
		        listify (p ! ps, t) =>  cons (p, listify (ps, t));
                    end;

		    fun pattern _ (a::LISTPAT (ps, t)) => listify (ps, t);
		        pattern _ p => p;
                    end;

		    .pattern (r::rewrite { pattern, expression=>no, decl=>no, sexp=>no, type=>no } ) p;
		}; 

	    rule_no = REF 0;

	    fun rename_rule (c as a::CLAUSE([pattern], guard, e))
		= 
		{   my (e, fate)
                        =
                        case e
			    a::CONTEXP (e, x) =>  (e, THE x);
			    _                 =>  (e, NULL);
                        esac;

		    mc::rename
			(fn { id_pattern, as_pattern, cons_pattern, wild_pattern, 
			     tuple_pattern, record_pattern, lit_pattern, 
			     or_pattern, and_pattern, not_pattern, where_pattern, nested_pattern, ...
                            }
                            =
			    fn a::ASPAT (id, p)            =>  as_pattern (id, p);
			       a::WILDCARD_PATTERN         =>  wild_pattern();
			       a::CONSPAT (c, NULL)        =>  cons_pattern (lookup_con c,[]);
			       a::CONSPAT (c, THE (p))     =>  cons_pattern (lookup_con c,[p]);
			       a::TUPLEPAT ps              =>  tuple_pattern ps;
			       a::RECORD_PATTERN (lps, _)  =>  record_pattern lps;
			       a::LITPAT lit               =>  lit_pattern lit;
			       a::OR_PATTERN ps            =>  or_pattern ps;
			       a::ANDPAT ps                =>  and_pattern ps;
			       a::NOTPAT p                 =>  not_pattern p;
			       a::WHEREPAT (p, e)          =>  where_pattern  (p, guard::guard e);
			       a::NESTEDPAT (p, e, p')     =>  nested_pattern (p, guard::guard e, p');

			       a::IDPAT id
                                   => 
				   if   (has_con  id)
                                       
                                        cons_pattern (lookup_con (a::IDENT([], id)),[]);
				   else
                                        id_pattern id;
                                   fi;


			       p   =>
                                   raise exception mc::MATCH_COMPILER (
                                             "illegal pattern "
                                             +
					     pp::text (raw_syntax_tree_pp::pattern p)
                                         );
                            end
			)
                        { number       => *rule_no, 
			  patterns     => [trans_list_pattern  pattern],
			  guard        => null_or::map guard::guard guard,
			  fate,
			  action       => e
			}
			before
                            rule_no :=  *rule_no + 1;
		}
                except
                    mc::MATCH_COMPILER msg
                        =
		        raise exception mc::MATCH_COMPILER (msg + " in " + pr_clause (pattern, guard));

	    rules =   map  rename_rule  clauses;

	    # Compile the rules into a dfa:
            #
	    dfa = mc::compile
                    {
		      compiled_rules =>  rules,
		      compress       =>  TRUE
		    };

	    dfa;
	};		# fun compile



    # Report errors:
    #
    fun report { warning, error, log, dfa, rules }
	=  
	{   red =  mc::redundant  dfa;
	    ex  =  mc::exhaustive dfa;

	    bad =   int_list_set::vals_count red   >   0;

	    error =   bad  ??  error
                           ::  warning;

	    message
                =
                if ex
		     bad ?? "redundant matches"
		         :: "";
		else 
		     bad ?? "non-exhaustive and redundant matches"
			 :: "non-exhaustive matches";
                fi;

	    fun dump_rules (i, [])
                    =>
                    ();

	        dump_rules (i, r ! rules)
		    =>
		    {   tab =
                            if   (int_list_set::member (red, i))
                                 "---> ";
                            else "     ";
                            fi;

			my a::CLAUSE ([p], g, _)
                            =
                            r; 

			text =  pr_clause (p, g);

		        log  (tab + text);

			dump_rules (i+1, rules);
		    };
            end;

	    if   (not ex or bad)
                 
	         error message;
		 dump_rules (0, rules);

	    fi;
	};

    exception GEN_REAL also GEN_INTEGER; 

    stipulate

	integer_compare =  a::IDEXP (a::IDENT (["integer"], "compare"));
	real_eq         =  a::IDEXP (a::IDENT (["Float"], "=="));	# XXX BUGGO FIXME does this need to change to "===="?
	eq              =  a::IDEXP (a::IDENT ([], "="));		# XXX BUGGO FIXME does this need to change to "=="?
	equal           =  a::IDEXP (a::IDENT ([], "EQUAL"));

    herein

	fun make_integer_eq (x, y)
            =
            a::APPLY_EXPRESSION (
                eq,
		a::TUPLEEXP [
                    a::APPLY_EXPRESSION (
                        integer_compare,
			a::TUPLEEXP [x, y]
                    ),
		    equal
                ]
            );

	fun make_real_eq (x, y)
	    =
	    a::APPLY_EXPRESSION (real_eq, a::TUPLEEXP [x, y]);
    end;

    name_counter
        =
        REF 0;

    fun new_name ()
	=
	*name_counter before name_counter := *name_counter + 1;

    fun init ()
	=
	name_counter := 0;


    # Generate Mythryl code:
    #
    fun code_gen { root, dfa, fail=>gen_fail, literals }
	=
	{   # Make unique name for path variables:

	    name_table
                =
                REF  mc::path::map::empty;

	    fun gen_lit (l as a::INTEGER_LIT _)
                    => 
		    case (literal::map::get (*literals, l))
                      
		         THE v
                             =>
                             raw_syntax_stuff::id v;  

		         NULL
                             =>
                             {   v =  "lit_" + i2s (new_name());

			         literals
                                     :=
                                     literal::map::set  (*literals, l, v);

			         raw_syntax_stuff::id  v;
			     };
                    esac;

	        gen_lit l
                    =>
                    a::LITEXP l;
            end;

	    fun get_name path
                =
		case (mc::path::map::get   (*name_table,  path))
                  
		     THE name
                         =>
                         name;

		     NULL
                         =>
			 {   v =  "v_" + i2s (new_name());

			     name_table
                                 :=
                                 mc::path::map::set  (*name_table, path, v);

			     v;
			 };
                esac;



	    # Now generate the code; we just
            # have to hook things up with the MC 
	    #	
	    fun gen_variable path
                =
                get_name path;


	    fun gen_path path
                =
                id_fn (gen_variable path);


	    fun gen_bind []
                    =>
                    [];

		gen_bind namings
		    =>
		    [   a::VALDECL (
                            map
                                (fn (v, e)
                                    =
                                    a::NAMED_VARIABLE (a::IDPAT v, e)
                                )
                                namings
                        )
                    ];
	    end;


	    fun gen_ok (e)
                =
                e;

	    fun path_to_pattern (path)
                =
                a::IDPAT (get_name path);

	    fun arg  NULL   =>  a::WILDCARD_PATTERN;
		arg (THE p) =>  a::IDPAT (get_name p);
	    end;


	    fun from_rep (ENUM_CONSTRUCTOR_FORM (path, a::CONSBIND { id, ... }, _))
                    =>
                    a::IDENT (path, id);

		from_rep (EXCEPTION (path, id, _))
                    =>
                    a::IDENT (path, id);
	    end;


	    fun gen_con_pattern (mc::CON con, [])
                    =>
                    a::CONSPAT (from_rep con, NULL);

		gen_con_pattern (mc::CON con, paths)
                    => 
		    a::CONSPAT (from_rep con, THE (a::TUPLEPAT (map arg paths)));

		gen_con_pattern (mc::LIT (a::FLOAT_LIT _), _)
                    =>
                    raise exception GEN_REAL;

		gen_con_pattern (mc::LIT (a::INTEGER_LIT _), _)
                    =>
                    raise exception GEN_INTEGER;

		gen_con_pattern (mc::LIT lit, _)
                    =>
                    a::LITPAT lit;
	    end;


	    fun gen_case (v, cases, default)
                = 
		a::CASE_EXPRESSION (

                   id_fn v,

		   map (fn (con, paths, e)
                           =
		           a::CLAUSE(  [gen_con_pattern (con, paths)],  NULL,  e)
                       )

                       cases
		       @
		       case default
		         
			    NULL        =>  [];
			    THE default =>  [a::CLAUSE([a::WILDCARD_PATTERN], NULL, default)];
		       esac
		)   
		except
                    GEN_REAL    =>  gen_lit_cmp (make_real_eq,    v, cases, default);
		    GEN_INTEGER =>  gen_lit_cmp (make_integer_eq, v, cases, default);
                end 

	    also
            fun gen_lit_cmp (eq, v, cases, THE default)
                = 
		{   x =  id_fn v; 

		    fun equal lit
                        =
                        eq (x, gen_lit lit);

		    list::fold_right
                        (fn ((mc::LIT lit, _, e), rest)
                            =
		            a::IF_EXPRESSION (equal lit, e, rest)
                        )
                        default
                        cases;
		};


	    fun gen_if ((_, e), y, n)
                =
                a::IF_EXPRESSION (e, y, n);


	    fun gen_goto (f, args)
                =
                a::APPLY_EXPRESSION (id_fn (state_fn f), a::TUPLEEXP (map id_fn args)); 


	    fun gen_fun (f, args, body)
		= 
		a::FUNDECL [
                    a::FUNBIND (
                        state_fn f,
			[   a::CLAUSE (
                                [ a::TUPLEPAT (map a::IDPAT args) ],
                                NULL,
                                body
                            )
                        ]
                    )
		];


	    fun gen_let ([], e) =>  e;
		gen_let ( d, e) =>  a::LET_EXPRESSION (d,[e]);
	    end;


	    fun gen_val (v, e)
		=
		a::VALDECL [ a::NAMED_VARIABLE (a::IDPAT v, e) ];


	    fun gen_proj (path, namings)
		=
		{   pattern
			=
			case namings
			  
			     []  =>
                                 a::WILDCARD_PATTERN;

			     (p, mc::INT _) ! ps
                                 => 
				 a::TUPLEPAT
                                     (map
                                         (fn (p, _) =  arg p)
                                         namings
                                     );

			     (p, mc::LABEL _) ! ps
                                 =>
				 a::RECORD_PATTERN
                                     ( map
                                         (fn (p, mc::LABEL l)
                                             =
					     (l, arg p))
                                         namings,
                                       TRUE
                                     );
			esac;

		    a::VALDECL [a::NAMED_VARIABLE (pattern, id_fn (get_name path)) ];
		};

	    fun gen_cont (k, f, vars)
		= 
		a::FUNDECL [
                    a::FUNBIND (
                        k,
                        [   a::CLAUSE (
                                [ a::TUPLEPAT [] ],
                                NULL,
			        a::APPLY_EXPRESSION (
                                    id_fn (state_fn f),
				    a::TUPLEEXP (map  id_fn  vars)
                                )
                            )
                        ]
                    )
                ];

	  mc::code_gen 
	      { gen_fail,
		gen_ok,
		gen_path,
		gen_bind,
		gen_case,
		gen_if,
		gen_goto,
		gen_cont,
		gen_fun,
		gen_let,
		gen_variable,
		gen_val,
		gen_proj
	      }
              (root, dfa);
	};					# fun code_gen

    fun complex_pattern p
	=
	*complex
        where
	    complex = REF FALSE;

	    fun pattern _ (p as a::WHEREPAT                _) =>  { complex := TRUE;   p; };
		pattern _ (p as a::NESTEDPAT               _) =>  { complex := TRUE;   p; };
		pattern _ (p as a::ANDPAT                  _) =>  { complex := TRUE;   p; };
		pattern _ (p as a::NOTPAT                  _) =>  { complex := TRUE;   p; };
		pattern _ (p as a::OR_PATTERN              _) =>  { complex := TRUE;   p; };
		pattern _ (p as a::LITPAT (a::FLOAT_LIT   _)) =>  { complex := TRUE;   p; };
		pattern _ (p as a::LITPAT (a::INTEGER_LIT _)) =>  { complex := TRUE;   p; };
		pattern _ p => p;
            end;

	    .pattern
                (rw { expression => no,
                      type       => no,
                      decl       => no,
                      sexp       => no,
                      pattern
                    }
                )
                p;
        end;

    # Are clauses conditional?
    #
    is_complex
        =
	list::exists
            (fn a::CLAUSE (p, g, _)
                =
                not_null g   or   list::exists complex_pattern p
            );
};
