
# This is my L-compressed DJ-graph data package for optimal SSA 
# construction. For the description of this algorithm, see: 
#   http://www.cs.nyu.edu/leunga/my-papers/linear-ssa.ps
# 
# --Allen


generic package L_DJGraph (dom:  Dominator_Tree) : DJ_GRAPH
{

   package g       = graph
   package dom     = dom
   package a       = rw_vector

   enum Exit_Tree = 
      NODE of { name:             Int,
                jedges:           List( Int ), 
                eedges:           List( Exit_Tree ),
                minVisitedLevel:  Ref( Int ),
                visited:          Ref( Int )
              }

   enum Dj_Graph (N,E,G) = 
      DJGRAPH of
        { dom:        dom::Dominator_Tree( N, E, G ),
          trees:     a::Rw_Vector(  List(  Exit_Tree ) ),
          stamp:     Ref( Int )
        }

   fun error msg = lowcode_error_message::error("L-DJGraph", msg)

   stats          = FALSE #  Collect statistics? 
   visitCount     = LowCodeControl::getCounter "dj-visit-count"
   idfCount       = LowCodeControl::getCounter "dj-IDF-count"
   idfSize        = LowCodeControl::getCounter "dj-IDF-size"
   liveVisitCount = LowCodeControl::getCounter "dj-live-visit-count"
   debug          = TRUE

   fun dj (dom as g::GRAPH dom) = 
   let my g::GRAPH cfg = dom::cfg dom 
       nnn           = dom.capacity ()
       my [ENTRY]     = dom.entries ()
       levelsMap   = dom::levelsMap dom
       lll           = dom::max_levels dom 
       trees       = a::rw_vector (nnn, [])
       levels'     = a::rw_vector (lll, -1) 
       exitLevels' = a::rw_vector (lll, -1) 
       T           = a::rw_vector (lll, [])
       J           = a::rw_vector (lll, [])

       fun LTrees a = 
       let #  recurse 
           fun foreachDedge([]) = () 
             | foreachDedge((_, b, _) . es) = (LTrees b; foreachDedge es)

           foreachDedge (dom.out_edges a)

           lvl_a = a::sub (levelsMap, a)

           #  partition J-edges 
           fun foreachJedge([], levels) = levels
             | foreachJedge((_, b, _) . es, levels) = 
               let lvl_b = a::sub (levelsMap, b) 
               in  if lvl_b > lvl_a then #  non-J-edge 
                     foreachJedge (es, levels)
                   else
                     let 
                             if a::sub (exitLevels', lvl_b) == a then 
                                a::update (J, lvl_b, b . a::sub (J, lvl_b))
                             else
                                (a::update (exitLevels', lvl_b, a);
                                 a::update (J, lvl_b, [b])
                                )
                         levels =
                             if a::sub (levels', lvl_b) == a then 
                                levels
                             else
                                (a::update (T, lvl_b, []);
                                 a::update (levels', lvl_b, a); 
                                 lvl_b . levels
                                )
                     in  foreachJedge (es, levels)
                     end
               end

           levels = foreachJedge (cfg.out_edges a, [])

           #  partition subtrees 
           fun foreachDedge([], levels) = levels
             | foreachDedge((_, b, _) . es, levels) =
               let fun foreachTree([], levels) = levels
                     | foreachTree((l, t) . ts, levels) =
                       let levels =
                           if l <= lvl_a then
                              if a::sub (levels', l) == a then 
                                 (a::update (T, l, t . a::sub (T, l)); levels)
                              else (a::update (levels', l, a); 
                                    a::update (T, l, [t]); 
                                    l . levels)
                           else levels
                       in  foreachTree (ts, levels) end
                   levels = foreachTree (a::sub (trees, b), levels)
               in  foreachDedge (es, levels)
               end
           levels = foreachDedge (dom.out_edges a, levels)

           #  Build Trees (a) 
           fun buildTrees([], trees_a) = trees_a
             | buildTrees (l . levels, trees_a) = 
               let fun makeNode (succs) =
                   let jedges = if a::sub (exitLevels', l) == a then
                                       a::sub (J, l) else []
                   in  (l, NODE { name=a, jedges=jedges, eedges=succs,
                               minVisitedLevel=REF 0, visited=REF 0 } )
                   end
                   T_l = 
                      case a::sub (T, l) of
                        []        => makeNode []  
                      | ts as [t] => if a::sub (exitLevels', l) != a then (l, t)
                                     else makeNode ts 
                      | ts        => makeNode ts
               in  buildTrees (levels, T_l . trees_a) 
               end
           trees_a = buildTrees (levels, [])
       in  a::update (trees, a, trees_a)
       end

       fun bucketSort (trees) =
       let buckets = a::rw_vector (lll, [])
           
              dom.forall_nodes 
              (fn (a, _) =>
               let fun insert [] = ()
                     | insert((l, t) . ts) = 
                       (a::update (buckets, l, (a, t) . a::sub (buckets, l)); insert ts)
               in  insert (a::sub (trees, a)) 
               end)
           trees = a::rw_vector (nnn, [])
           fun collect (l) =  
               if l >= lll then ()
               else let fun dist [] = ()
                          | dist((a, t) . ts) =
                            (a::update (trees, a, t . a::sub (trees, a)); dist ts)
                    in  dist (a::sub (buckets, l));
                        collect (l+1)
                    end
       in  collect 0;
           trees
       end

       LTrees ENTRY #  Build Trees 
       trees = bucketSort (trees) #  sort trees 
   in  DJGRAPH { dom=dom, trees=trees, stamp=REF 0 }
   end

   #  Compute dominance frontier 
   fun df _ = error "DF"
   fun idfs _ = error "idfs"

   fun LiveIDFs (DJGRAPH { trees, dom, stamp, ... } ) =  
   let my g::GRAPH cfg = dom::cfg dom
       levelsMap   = dom::levelsMap dom
       nnn           = cfg.capacity ()
       inphi       = a::rw_vector (nnn, 0)
       inalpha     = a::rw_vector (nnn, 0)
       live        = a::rw_vector (nnn, 0)
       fun newStamp() = 
           let s = unt::toIntX (unt::from_int *stamp + 0w1) 
           in stamp := s; s 
           end
       fun LiveIDFs { defs, localLiveIn=[] } = []
         | LiveIDFs { defs, localLiveIn } =
       let stamp = newStamp()

           fun initDefs([]) = ()
             | initDefs (x . xs) = (a::update (inalpha, x, stamp); initDefs xs)

           fun markLiveIn (b) =
           let fun markPred [] = ()
                 | markPred((j, _, _) . es) =
                    (if a::sub (live, j) != stamp and
                        a::sub (inalpha, j) != stamp then
                       markLiveIn j
                     
                     markPred es
                    )
           in  #  m := *m + 1; 
               a::update (live, b, stamp);
               if stats then liveVisitCount := *liveVisitCount + 1 
               markPred (cfg.in_edges b)
           end

           fun initLiveIn [] = ()
             | initLiveIn (x . xs) = (markLiveIn x; initLiveIn xs)

           fun isLive b = a::sub (live, b) = stamp 

           fun unmarked (X, b) = a::sub (X, b) != stamp
           fun mark (X, b) = a::update (X, b, stamp)

           fun visit (x, queue, IDF) =
           let level_x = a::sub (levelsMap, x)

               fun walk (NODE { name=y, jedges, eedges, visited, minVisitedLevel },
                        queue, IDF) = 
               let fun foreachJedge([], queue, IDF) = (queue, IDF)
                     | foreachJedge (z . es, queue, IDF) = 
                       if isLive z and unmarked (inphi, z)
                       then (mark (inphi, z);
                             foreachJedge
                               (es, 
                                if unmarked (inalpha, z) then z . queue else queue,
                                z . IDF)
                            )
                       else foreachJedge (es, queue, IDF)
                   fun foreachEEdge([], queue, IDF) = (queue, IDF)
                     | foreachEEdge((z as NODE { name=z', ... } ) . es, queue, IDF) =
                       if isLive z' then
                          let my (queue, IDF) = walk (z, queue, IDF)
                          in  foreachEEdge (es, queue, IDF) end
                       else 
                          foreachEEdge (es, queue, IDF)
               in  if *visited == stamp then #  visited before 
                      (minVisitedLevel := int::min (*minVisitedLevel, level_x);
                       (queue, IDF)
                      )
                   else 
                     (minVisitedLevel := level_x; #  non-visited 
                      visited := stamp;
                      let my (queue, IDF) = foreachJedge (jedges, queue, IDF)
                      in  foreachEEdge (eedges, queue, IDF) end 
                     )
               end

               fun ancestorHasBeenProcessed
                     (NODE { visited, minVisitedLevel, ... } ) = 
                   *visited = stamp and *minVisitedLevel < level_x

               fun foreachTree([], queue, IDF) = (queue, IDF)
                 | foreachTree (t . ts, queue, IDF) =
                   if ancestorHasBeenProcessed t then (queue, IDF)
                   else let my (queue, IDF) = walk (t, queue, IDF)
                        in  foreachTree (ts, queue, IDF) end
           in  foreachTree (a::sub (trees, x), queue, IDF)
           end

           fun visitAll([], IDF) = IDF
             | visitAll (x . queue, IDF) = 
               let my (queue, IDF) = visit (x, queue, IDF)
               in  visitAll (queue, IDF) end

       in  initDefs defs;
           initLiveIn localLiveIn;
           visitAll (defs, [])
       end
   in  LiveIDFs
   end

}
