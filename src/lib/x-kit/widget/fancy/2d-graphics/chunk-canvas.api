## obj-canvas.api


api CHUNK_CANVAS =
  api

    package w:  WIDGET

    # The different ways to specify a border; either an absolute number of
    # pixels, or proportional border specified in universal coordinate units.

    enum border_spec
      = BORDER_None
      | BORDER_Pixel2D of (w::XC::color * Int)

    # specification of a width; either in absolute pixels or in universal
    # coordinates.

    enum width_spec
      = WID_Pixel of Int

    # Specification of an arrow head 
    enum arrow_spec
      = NoArrow
      | Arrow of { len:  real, wid:  real }

    type chunk_id
    type chunk_canvas( X )

    type box = { minX:  real, minY:  real, maxX:  real, maxY:  real }

    my chunkCanvas:  (w::root * w::view * List( w::Arg ) )
	  -> {
	      bbox:  Null_Or( box ),
	      font_imp:  ScalableFont::font_imp,
	      sb:  Null_Or { hsb:  scrollbar::scrollbar, vsb:  scrollbar::scrollbar }
	    } -> (X chunk_canvas * interact::in_env)

    my widgetOf:  chunk_canvas( X ) -> w::widget

    enum gr_chunk
      = BOX of {
	  wid:  real, ht:  real,
	  fill:  Null_Or( w::XC::color ),
	  border:  border_spec
	}
      | DIAMOND of {
	  wid:  real, ht:  real,
	  fill:  Null_Or( w::XC::color ),
	  border:  border_spec
	}
      | ELLIPSE of {
	  wid:  real, ht:  real,
	  fill:  Null_Or( w::XC::color ),
	  border:  border_spec
	}
      | LINE of {
	  pts:  List { x:  real, y:  real },
	  head:  arrow_spec,
	  tail:  arrow_spec,
	  wid:  width_spec,
	  color:  w::XC::color
	}
      | TEXT of {
	  size:  Int, style:  ScalableFont::font_style,
	  align:  (w::halign * w::valign),
	  color:  w::XC::color,
	  text:  String
	}

    my placeChunk:  chunk_canvas( X ) -> {
	    at:  { x:  real, y:  real },
	    depth:  Int,
	    chunk:  gr_chunk,
	    info:  Null_Or( X )
	  } -> chunk_id

    my drawLine:  chunk_canvas( X ) -> {
	    pts:  List { x:  real, y:  real },
	    depth:  Int,
	    wid:  width_spec,
	    color:  w::XC::color
	  } -> chunk_id

    my drawLine' : chunk_canvas( X ) -> {
	    pts:   List { x:  real, y:  real },
	    head:  arrow_spec,
	    tail:  arrow_spec,
	    depth:  Int,
	    wid:  width_spec,
	    color:  w::XC::color
	  } -> chunk_id

    my delChunk:  chunk_canvas( X ) -> chunk_id -> Void
	#  remove an chunk from the picture 

    my delAll:  chunk_canvas( X ) -> Void
	#  Delete all of the existing chunks 

    my update:  chunk_canvas( X ) -> Void
	#  update the display 

    enum pt_stream = ENTER | EXIT | PT of Geometry::point | END

    my trackChunk:  chunk_canvas( X ) -> {
	    points:  threadkit::event( pt_stream ),
	    chunk:  gr_chunk,
	    hotSpot:  { x:  real, y:  real }
	  } -> threadkit::event { x:  real, y:  real }
	# This is support for feedback.  Given a stream of pixel coordinates,
	# track the points with the chunk.  The stream of points will be
	# terminated with NULL, at which point the resulting event is enabled
	# with the final position (in world coordinates).

    my setCursor:  chunk_canvas( X ) -> Null_Or( w::xc::cursor ) -> Void
	#  set the cursor for the canvas 

    my redraw:  chunk_canvas( X ) ->  List( Geometry::box ) -> Void
	#  redraw damaged regions (specified as a list of rectangles) 

    my resize:  chunk_canvas( X ) -> Geometry::box -> Void
	#  resize the canvas 

    my zoom:  chunk_canvas( X ) -> real -> Void
	# Zoom the canvas: a zoom of 1.0 is no change; a zoom of 2.0 doubles
	# the size of chunks in the canvas (i.e., zooms in), while a zoom of
	# 0.5 halves the size of chunks in the canvas.  This will not zoom
	# out beyond the canvas's bounding box.

  end; #  CHUNK_CANVAS 


## COPYRIGHT (c) 1994 AT&T Bell Laboratories.
## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
