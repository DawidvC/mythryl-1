## typecheck-toplevel-statement-g.pkg

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6



# This module is the external entrypoint
# to the typechecker as a whole:
#
#     typecheck in src/lib/compiler/toplevel/main/compile-g.pkg
#
# calls our typecheck_toplevel_statement function.
#
#
#
# We accept a raw syntax tree 
#
#     src/lib/compiler/front/parse/raw-syntax/raw-syntax.api
#     src/lib/compiler/front/parse/raw-syntax/raw-syntax.pkg
#
# produced by the parser
#
#     src/lib/compiler/front/parse/yacc/mythryl.grammar
#
# and return a fully-typechecked deep syntax tree
#
#     src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.api
#     src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.pkg
#
# which then gets translated into intermediate code in
#
#     src/lib/compiler/upper/translate/translate-deep-syntax-to-polylambda.pkg
#
# and fed into the rest of the compiler via
#
#     src/lib/compiler/upper/main/backend-g.pkg
#
# to produce actual executable object code.



###                           The Talking Frog
###
###        A boy was crossing a road one day when a frog called out
###        to him and said, "If you kiss me, I'll turn into a
###        beautiful princess." He bent over, picked up the frog
###        and put it in his pocket.
###
###        The frog spoke up again and said, "If you kiss me and turn
###        me back into a beautiful princess, I will stay with you for
###        one week." The boy took the frog out of his pocket, smiled
###        at it and returned it to the pocket.
###
###        The frog then cried out, "If you kiss me and turn me back
###        into a princess, I'll stay with you and do anything you want."
###        Again the boy took the frog out, smiled at it and put it
###        back into his pocket.
###
###        Finally the frog asked, "What is it? I've told you I'm a
###        beautiful princess, that I'll stay with you for a week
###        and do anything you want. Why won't you kiss me?"
###
###        The boy said, "Look, I'm a computer programmer.
###        I don't have time for girlfriends, but a talking frog
###        is really cool." 



									# raw_syntax			is from   src/lib/compiler/front/parse/raw-syntax/raw-syntax.pkg
									# symbol_table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
									# typecheck_stuff		is from   src/lib/compiler/front/typechecker/typecheck/typecheck-stuff.pkg
									# deep_syntax			is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.pkg
api Typecheck_Toplevel_Statement {

     typecheck_toplevel_statement
         :
         ( raw_syntax::Declaration,					# Actual raw syntax to compile.
           symbol_table::Symbol_Table,					# Symbol table containing info from all .o7 files we depend on.
           typecheck_stuff::Compile_Info
         )
         ->
	 ( deep_syntax::Declaration,					# Typechecked version of  raw_syntax_declaration.
           symbol_table::Symbol_Table					# Contains (only) stuff from raw_syntax_declaration.
         );

     debugging:  Ref(  Bool );

};

									# Typecheck_Toplevel_Statement	is from   src/lib/compiler/front/typechecker/typecheck/typecheck-toplevel-statement-g.pkg
									# Typecheck_Package_Language	is from   src/lib/compiler/front/typechecker/typecheck/typecheck-package-language-g.pkg
#  We use a generic to factor out dependencies on highcode:

generic package  typecheck_toplevel_statement_g (

    package typecheck_package_language:  Typecheck_Package_Language;
)

: (weak)  Typecheck_Toplevel_Statement

{
    stipulate

        package pp   =  prettyprint;					# prettyprint			is from   src/lib/prettyprint/src/prettyprint.pkg
	package s    =  symbol;						# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package sp   =  symbol_path;					# symbol_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package ip   =  inverse_path;					# inverse_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
#	package da   =  var_home;					# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package deep =  deep_syntax;					# deep_syntax			is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.pkg
	package t    =  types;						# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	package v    =  variables_and_constructors;			# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
	package m    =  module;						# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
	package ms   =  module_stuff;					# module_stuff			is from   src/lib/compiler/front/typecheck-stuff/modules/module-stuff.pkg
#	package ste  =  symbol_table_entry;				# symbol_table_entry		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg
	package st   =  symbol_table;					# symbol_table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
	package lu   =  find_in_symbol_table;				# find_in_symbol_table		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/find-in-symbol-table.pkg
	package ts   =  typecheck_stuff;				# typecheck_stuff		is from   src/lib/compiler/front/typechecker/typecheck/typecheck-stuff.pkg
	package td   =  typechecker_dictionary;				# typechecker_dictionary	is from   src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.pkg
#	package ep   =  module_path;					# module_path			is from   src/lib/compiler/front/typecheck-stuff/modules/module-path.pkg
	package epc  =  module_path_context;				# module_path_context		is from   src/lib/compiler/front/typecheck-stuff/modules/module-path-context.pkg

	include raw_syntax;

    herein 

	#  Debugging 
	say = control_print::say;
	debugging = REF FALSE;

	fun if_debugging_say (msg: String)
            =
	    if   *debugging      { say msg;   say "\n";};
                              else   ();fi;

	debug_print = (fn x => typechecking_debugging::debug_print debugging x; end );

	#  local_package_name: used in makeOpenDeclaration to build redeclaration of components 
	#
	local_package_name
            =
            s::make_package_symbol "<a funny package>";

	fun bug msg
            =
            error_message::impossible("typecheck_toplevel_statement: " + msg);

	# make_included_declarations is a hack; it was written
        # to make sure that the backend will generate
        # the right dynamic code for all package components.
        #
	# Once the symbol table and the linking dictionary are merged,
	# this code should become obsolete. (ZHONG)         XXX BUGGO FIXME
	#
	fun make_included_declarations (a_package, symbol_path)
            =
	    {   fun build (name, dl)
                    = 
		    case (s::name_space  name)
		      
			 s::VALUE_NAMESPACE
			     =>
			     {   v = ms::get_value_via_path (
					 a_package,
					 sp::SYMBOL_PATH [name],
					 sp::SYMBOL_PATH (symbol_path @ [name] )
				     );

				 case v
				   
				      v::VARIABLE (v::ORDINARY_VARIABLE _)
					  => 
					  VALUE_DECLARATIONS (
                                              [ NAMED_VALUE {
                                                    pattern    =>  VARIABLE_IN_PATTERN [name],
						    expression =>  VARIABLE_IN_EXPRESSION ( [ local_package_name, name ] ),
						    is_lazy    =>  FALSE
						}
					      ],
					      NIL
					  )
					  ! dl;

				      # Here is the source of bug 788.
				      # If name is bound to a constructor in the top
				      # level dictionary, then this will not have the
				      # desired effect of renaming name, but will
				      # probably result in a type error. Possible fix
				      # would be to narrow down the symbol table. XXX BUGGO FIXME
				      #
				      v::CONSTRUCTOR (t::ENUM_CONSTRUCTOR { representation=>var_home::EXCEPTION _, ... } )
					  => 
					  EXCEPTION_DECLARATIONS [DUPLICATE_NAMED_EXCEPTION { exception_symbol=>name,
							      equal_to=>([local_package_name, name]) } ] ! dl;

				      _   => dl;

                                 esac;
			     };

			 s::PACKAGE_NAMESPACE
			     =>
			     PACKAGE_DECLARATIONS [
				 NAMED_PACKAGE {
				     name_symbol => name,
				     definition  => PACKAGE_BY_NAME ( [ local_package_name, name ] ),
				     constraint  => NO_PACKAGE_CAST,
				     kind        => PLAIN_PACKAGE
				 }
			     ] ! dl;

			 s::GENERIC_NAMESPACE
			     =>
			     GENERIC_DECLARATIONS [
				 NAMED_GENERIC {
				     name_symbol =>  name,
				     definition  =>  GENERIC_BY_NAME (
                                                         [ local_package_name, name ],
                                                         NO_PACKAGE_CAST
                                                     )
				 }
			     ] ! dl;

			 _   => dl;

		    esac;


		nodes
		    =
                    fold_right
                        build
                        []
                        (ms::get_package_symbols  a_package);


                LOCAL_DECLARATIONS (
                    PACKAGE_DECLARATIONS [
                        NAMED_PACKAGE {
                            name_symbol =>  local_package_name,
                            definition  =>  PACKAGE_BY_NAME (symbol_path),
			    constraint  =>  NO_PACKAGE_CAST,
			    kind        =>  PLAIN_PACKAGE
                        }
                    ],
		    SEQUENTIAL_DECLARATIONS nodes
                );
	    };

	# The main purpose of having a separate
        # layer of typecheck_toplevel_statement above
        # typecheck_declaration is to deal with the
        # top-level 'include' declarations.
        #
        # Once Symbol_Table and Linking_Table
	# are merged, there should be no special
        # treatment for 'include' declarations, and 
        # typecheck_toplevel_statement can probably
        # be dramatically simplified. (ZHONG)  XXX BUGGO FIXME
	#
	# We get invoked (only) from
	#
        #     fun typecheck_raw_syntax_declaration
        # in
	#     src/lib/compiler/toplevel/main/compile-g.pkg
	#
	fun typecheck_toplevel_statement
            ( declaration,									# Actual raw syntax to compile.
              given_symbol_table,								# Symbol table containing info from all .o7 files we depend on.
              compile_info as { error_fn, ... }: ts::Compile_Info
            )
	    :
	    ( deep_syntax::Declaration,								# Typechecked version of  raw_syntax_declaration.
	      symbol_table::Symbol_Table							# Contains (only) stuff from raw_syntax_declaration.
	    )
            =
	    {   if_debugging_say ">>typecheck_toplevel_statement";

		fun typecheck_declaration (SEQUENTIAL_DECLARATIONS decs, symbol_table0, top, source_code_region)
			=>
			{   fun h (declaration, (abdecls, symbol_table))
				= 
				{   my (abdecl, symbol_table')
					=
					typecheck_declaration (
                                            declaration,
                                            st::atop (symbol_table, symbol_table0),		# Is this ordering a bug or subtlety? XXX BUGGO FIXME
                                            top,
                                            source_code_region
                                        );

				    ( abdecl ! abdecls,
				      st::atop (symbol_table', symbol_table)
				    );
				};

			    my (abdecls, symbol_table')
                                =
                                fold_left
                                    h
                                    ([], st::empty)
                                    decs;

			    ( deep::SEQUENTIAL_DECLARATIONS (reverse abdecls),			# Typechecked version of  raw_syntax_declaration.
                              symbol_table'							# Contains (only) stuff from raw_syntax_declaration.
                            );
			};

		    typecheck_declaration (LOCAL_DECLARATIONS (decl_in, decl_out), symbol_table0, top, source_code_region)
			=>
			{   top_in   =   ts::has_modules decl_in   or
                                         ts::has_modules decl_out;

			    my   (adec_in,  symbol_table1)  =   typecheck_declaration (decl_in,                           symbol_table0,  top_in, source_code_region);
			    my   (adec_out, symbol_table2)  =   typecheck_declaration (decl_out, st::atop (symbol_table1, symbol_table0), top,    source_code_region);

			    ( deep::LOCAL_DECLARATIONS (adec_in, adec_out),			# Typechecked version of  raw_syntax_declaration.
                              symbol_table2							# Contains (only) stuff from raw_syntax_declaration.
                            );
			};

		    typecheck_declaration (SOURCE_CODE_REGION_FOR_DECLARATION (declaration, source_code_region'), symbol_table, top, source_code_region)
			=> 
			{   my (deep_syntax, symbol_table)
				=
				typecheck_declaration (declaration, symbol_table, top, source_code_region');

			    deep_syntax
				=
                                *typechecking_control::mark_deep_syntax_tree
				    ??  deep::SOURCE_CODE_REGION_FOR_DECLARATION (deep_syntax, source_code_region')
				    ::  deep_syntax;

			    ( deep_syntax,							# Typechecked version of  raw_syntax_declaration.
                              symbol_table							# Contains (only) stuff from raw_syntax_declaration.
			    );
			};

		    typecheck_declaration (INCLUDE_DECLARATIONS paths, symbol_table, top, source_code_region)
			=> 
			{   debug_print (
				"top level use: ",
				(   fn pps   =
				    fn paths = unparse_stuff::unparse_sequence
						    pps
						    {   sep   => (fn pps = pp::string pps ", "),
							pr    => unparse_stuff::unparse_symbol_path,
							style => unparse_stuff::INCONSISTENT
						    }
						    (list::map symbol_path::SYMBOL_PATH paths)
				),
				paths
			    );

			    err =   error_fn  source_code_region;



			    #  Look up the package variables 
			    #
			    pkgs =  map (fn p =  lu::find_package_via_symbol_path (symbol_table, sp::SYMBOL_PATH p, err))
				        paths;



			    #  Open their dictionaries to add datatypes, etc. 
			    #
			    fun h (m::ERRONEOUS_PACKAGE, symbol_table)   =>   symbol_table;
			        h (pkg,                  symbol_table)   =>   ms::include_package (symbol_table, pkg);
                            end;

			    open_symbol_table
                                =
                                fold_left  h  st::empty  pkgs;

			    fun g ((m::ERRONEOUS_PACKAGE, symbol_path), declarations)
                                    =>
                                    declarations;

			        g ((a_package, symbol_path), declarations)
				    => 
				    {   new_declaration
                                            =
                                            make_included_declarations
                                                (a_package, symbol_path);

					new_declaration ! declarations;
				    };
                            end;


			    new_decs
                                =
                                fold_right
                                    g
                                    []
                                    (paired_lists::zip (pkgs, paths));



			    # Hack to fix bugs 788, 847:
			    # Narrow the symbol table used to typecheck new_decs
			    # to one only naming the initial symbols of the paths.
			    #
			    # Doesn't hurt if more than one path has same head symbol.
			    #
			    minimal_symbol_table
				=
				fold_left
                                    fold_fn
				    st::empty
				    paths

                                    where
				        fun fold_fn (path, minimal_symbol_table)
					    =
					    {   path_head =  case path   x ! _ =>  x;
							                 []    =>  bug "unexpected case INCLUDE_DECLARATIONS";
                                                             esac;

						fun err' _ _ _ = (); 		   #  To suppress duplicate error messages. 

						pkg = lu::find_package_via_symbol_path
                                                          (
                                                            symbol_table,
                                                            sp::SYMBOL_PATH [ path_head ],
                                                            err'
                                                          );

						st::bind (
                                                    path_head,
                                                    symbol_table_entry::NAMED_PACKAGE  pkg,
                                                    minimal_symbol_table
                                                );
					    };
                                    end;

												# typecheck_package_language	is from   src/lib/compiler/front/semantic/typecheck/typecheck-package-language.pkg

			    my  { deep_syntax_declaration,					# Typechecked version of  new_decs.
                                  symbol_table							# Contains (only) stuff from new_decs.
                                }
				=
				typecheck_package_language::typecheck_declaration {

				    level => top,
				    path  => ip::INVERSE_PATH [],

				    raw_syntax_declaration          =>  (SEQUENTIAL_DECLARATIONS new_decs),
				    symbol_table                    =>  minimal_symbol_table,
				    syntactic_typechecking_context  =>  ts::AT_TOPLEVEL,

				    typechecker_dictionary =>  td::empty,
				    module_path_context    =>  epc::init_context, 

				    source_code_region,
				    compile_info
				};

			    new_symbol_table
				=
				st::consolidate (st::atop (symbol_table, open_symbol_table));

			    pkgs'
				=
				paired_lists::zip   (map   sp::SYMBOL_PATH paths,   pkgs);

			    ( deep::SEQUENTIAL_DECLARATIONS
                                [ deep::INCLUDE_DECLARATIONS pkgs',
                                  deep_syntax_declaration
                                ],								# Typechecked version of  raw_syntax_declaration.
			      new_symbol_table							# Contains (only) stuff from raw_syntax_declaration.
			    );
			};

		    typecheck_declaration (raw_syntax_declaration, symbol_table, top, source_code_region)
			=>
			{   if_debugging_say "--typecheck_toplevel_statement::typecheck[declaration]: calling typecheck_package_language::typecheck_declaration";

			    my  { deep_syntax_declaration,					# Typechecked version of  raw_syntax_declaration.
                                  symbol_table							# Contains (only) stuff from raw_syntax_declaration.
                                }
				= 
				typecheck_package_language::typecheck_declaration
				  {
				    path    => ip::INVERSE_PATH [],
				    level   => top, 
				    syntactic_typechecking_context => ts::AT_TOPLEVEL,

				    raw_syntax_declaration,
				    symbol_table,

				    typechecker_dictionary   =>  td::empty,
				    module_path_context =>  epc::init_context,

				    source_code_region,
				    compile_info
				  };

			    ( deep_syntax_declaration,						# Typechecked version of  raw_syntax_declaration.
                              symbol_table							# Contains (only) stuff from raw_syntax_declaration.
                            );
			};
                end;


		typecheck_declaration (
		  declaration,									# Actual raw syntax to typecheck.
		  given_symbol_table,								# Symbol table containing info from all .o7 files we depend on.
		  TRUE,										# Currently at syntactic top level.
		  source_map::null_region
		)
                before
                    if_debugging_say "<<typecheck_toplevel_statement";
	    };
    end;			# stipulate 

};				# generic package typecheck_toplevel_statement_g 


## COPYRIGHT (c) 1996 Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
