## Compile.api 

# Compiled by:
#     src/lib/compiler/core.make6



# Trimmed to contain only compile-related stuff but no linking or execution.
#   -- 07/18/2001 (blume)



###         "We must beware of needless innovations,
###          especially when guided by logic."
###
###                      -- Winston Churchill



# This API is implemented by:
#
#     src/lib/compiler/toplevel/main/compile-g.pkg
#
api Compile0 {

    Pickle;				# Pickled format.
    Hash;				# Dictionary hash id.
    Pid = picklehash::Picklehash;	# picklehash	is from   src/lib/compiler/front/basics/mlcomp/picklehash.pkg
    Version;

    make_compile_info
	:
	{ source:                  source_code_source::Input_Source,
	  transform:               deep_syntax::Declaration -> deep_syntax::Declaration,
          prettyprinter_or_null:   Null_Or prettyprinter::Prettyprinter
	}
	->
	compile_info::Compile_Info( deep_syntax::Declaration );

					# source	is from   src/lib/compiler/front/basics/source/source-code-source.pkg
					# deep_syntax	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.pkg
					# compile_info	is from   src/lib/compiler/front/typecheck-stuff/main/compile-info.pkg


    # Take raw_syntax_tree, do semantic checks,
    # then return the new symbol table, deep_syntax_tree and pickles
    #
    typecheck_raw_syntax_declaration
	:
	{ raw_syntax_declaration:       raw_syntax::Declaration,				# Actual raw syntax to compile.
	  symbol_table:                 symbol_table::Symbol_Table,				# Symbol table containing info from all .o7 files we depend on.
	  compile_info:                 compile_info::Compile_Info( deep_syntax::Declaration ),
	  version:                      Version,
          source:                       source_code_source::Input_Source
	}
	->
	{ deep_syntax_declaration:      deep_syntax::Declaration,				# Typechecked form of  raw_syntax_declaration.
	  new_symbol_table:             symbol_table::Symbol_Table,				# A symbol table delta containing (only) stuff from raw_syntax_declaration.
	  exported_highcode_variables:  List( var_home::Highcode_Variable ),
	  export_picklehash:            Null_Or( Pid ),
	  symbol_table_picklehash:      Hash,
	  pickle:                       Pickle
	};

					# raw_syntax		is from   src/lib/compiler/front/parse/raw-syntax/raw-syntax.pkg
					# symbol_table		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
					# var_home		is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
					# source		is from   src/lib/compiler/front/basics/source/source-code-source.pkg
					# inlining_table	is from   src/lib/compiler/toplevel/compiler-state/inlining-table.pkg
					# code_segments		is from   src/lib/compiler/execution/code-segments/code-segments.pkg
					# var_home		is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
					# anormal		is from   src/lib/compiler/upper/anormal/anormal.pkg
					# import_tree		is from   src/lib/compiler/execution/main/importtree.pkg

    # Typecheck as above, then additionally compile down to binary code:
    #
    compile
	:
	{ source:                       source_code_source::Input_Source,
	  raw_syntax_declaration:       raw_syntax::Declaration,				# Actual raw syntax to compile.

	  symbol_table:                 symbol_table::Symbol_Table,				# Symbol table containing info from all .o7 files we depend on.
	  inlining_table:	        inlining_table::Dictionary,				# Inlining table matching symbol_table.

	  compile_info:                 compile_info::Compile_Info( deep_syntax::Declaration ), 
	  version:                      Version,
	  check_errors:                 String -> Void,
	  cross_module_inlining:        Null_Or( Int )
	}
	->
	{ code_segments:                code_segments::Code_Segments,
	  new_symbol_table:             symbol_table::Symbol_Table,				# A symbol table delta containing (only) stuff from raw_syntax_declaration.
	  deep_syntax_declaration:      deep_syntax::Declaration,				# Typechecked form of  raw_syntax_declaration -- only for prettyprinting.

	  export_picklehash:            Null_Or( Pid ),
	  exported_highcode_variables:  List( var_home::Highcode_Variable ),

	  symbol_table_picklehash:      Hash,
	  pickle:                       Pickle, 
	  inline_expression:            Null_Or( anormal::Program ),
	  imports:                      List( import_tree::Import )
	};

}; #  Api Compile0


api Compile
    =
    Compile0
        where  Pickle == unt8_vector::Vector
         also  Hash   == picklehash::Picklehash
	 also  Version   == String;


api Toplevel_Compile
    =
    Compile0
        where  Hash == Void
         also  Version == Void;


## COPYRIGHT (c) 1996 Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
