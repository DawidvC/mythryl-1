## sortedlist.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lib.make6



###        "Make everything as simple as possible, but no simpler."
###                                     -- Albert Einstein



package sorted_list {

    fun enter (new: Int, l)
        =
	f l
        where
            fun f []
                    =>
                    [new];

	        f (l as h ! t)
                    =>
                    if      (new < h   )   new ! l;
                    else if (new > h   )   h ! f t;
                    else                     l;          fi; fi;
            end;
        end;

    fun merge (a,[]) => a;
        merge([], a) => a;

        merge (l as (i: Int) ! a, m as j ! b)
            => 
	    if (j<i)  j ! merge (l, b);
            else      i ! merge (a,  i<j ?? m :: b);   fi;
    end;

    stipulate
        fun loop (a ! b ! rest) => loop (merge (a, b) ! loop rest);
	    loop l => l;
        end;
    herein
        fun foldmerge l
            =
            head (loop l)
            except
                head = [];
    end;

    fun uniq l
        =
	{   fun split([], l, r) => (l, r);
	        split (h ! t, l, r) => split (t, r, h ! l);
            end;

	    fun sort [] => [];
		sort (l as [_]) => l;

		sort (l as [x:  Int, y:  Int])
                    => 
		    if      (x == y)  [x];
                    else if (x <  y)  l;
                         else         [y, x];  fi;
                    fi;

		sort l
                    =>
                    {   my (l, r) = split (l,[],[]);
			merge (sort l, sort r);
                    };
            end;

	    sort l;
	};


    fun remove (x as (xl: Int) ! xr, y as yl ! yr)
            =>
	    if   (xl > yl)
                
                 yl ! remove (x, yr);
            else
                 remove (
                     xr,
                     xl < yl   ??   y
                               ::   yr
                 );
            fi;

        remove(_, y)
            =>
            y;
    end;


    fun rmv (x:  Int, l)
        =
	loop l
        where
	   fun loop NIL => NIL;

	       loop (a ! b)
                   =>
                   x == a   ??            b
                            ::   a ! loop b;
           end;
	end;


    fun member l (e: Int)
	=
	f l
        where
	   fun f []      =>   FALSE;
	       f (h ! t) =>   h < e  ??  f t
                                     ::  e == h;
           end;
	end;


    fun intersect (NIL, _) =>  NIL;
        intersect (_, NIL) =>  NIL;

        intersect (l as (a: Int) ! b, r as c ! d)
            =>
	    if   (a == c)   a ! intersect (b, d);
	    elif (a <  c)       intersect (b, r);
	    else                intersect (l, d);
            fi;
    end;


    fun difference (NIL, _) =>  NIL;
        difference (l, NIL) =>  l;

        difference (l as (a: Int) ! b, r as c ! d)
            =>
	    if   (a==  c)       difference (b, d);
	    elif (a <  c)   a ! difference (b, r);
	    else                difference (l, d);
            fi;
    end;	
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
