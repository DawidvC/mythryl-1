# The common core of both public and private interface to make7's tools
# mechanism.
#
#   (C) 2000 Lucent Technologies, Bell Laboratories
#
# Author: Matthias Blume (blume@kurims::kyoto-u::ac::jp)

# Compiled by:
#     src/app/make7/Make7.make6

api Core_Tools {

    # We don't make ilks abstract.
    # It doesn't look like there
    # would be much point to it.
    #
    Ilk = String;

    # We keep source paths abstract.
    # Tool writers should not mess
    # with their internals.
    #
    # The function that makes a srcpath
    # from a string is passed as part of
    # the input specification (type "spec").
    #
    # Which function is originally be passed
    # depends on which syntax was used for
    # this member in its .make6 file.
    #
    # Most tools will want to work on
    # native pathname syntax (function "outdated" -- see below -- depends
    # on native syntax!).
    #
    # In these cases the tool should first convert
    # the name to a srcpath and then get the native
    # string back by applying "nativeSpec".
    #
    File_Path;

    Dir_Path;

    Renamings = List { anchor: String, value: Dir_Path };	# MUSTDIE

    # Get the spec (i.e., relative to the directory context) of a path: 
    #
    native_spec:  File_Path -> String;


    #  Same for Dir_Path... 
    #
    native_pre_spec:  Dir_Path -> String;

    # Make a File_Path from a Dir_Path,
    # checking that the "at least one
    # arc" rule is satisfied... 
    #
    srcpath:  Dir_Path -> File_Path;

    # Augment a Dir_Path with extra arcs.
    # The new path has inherits the context
    # (i.e., any anchoring) from the original one.
    #
    augment:  Dir_Path -> List( String ) -> Dir_Path;

    exception TOOL_ERROR  { tool: String, msg: String };

    Pathmaker = Void -> Dir_Path;

    # A filename specification 
    #
    Fnspec = {   name:   String,
                 make_path: Pathmaker
             };

    # Case-by-case parameters that can be passed to tools... 
    #
    Tool_Option = STRING   Fnspec
            | SUBOPTS  {   name: String,
                           opts: Tool_Options
                       }
    withtype Tool_Options = List( Tool_Option );

    Tooloptcvt
        =
        Null_Or( Tool_Options )
        ->
        Null_Or( Tool_Options );

    # A member specification consists of the actual string, an optional
    # ilk name, (optional) tool options, a function to convert a
    # string to its corresponding srcpath, and information about whether
    # or not this source is an "original" source or a derived source
    # (i.e., output of some tool).
    #
    Spec = { name:       String,
	     make_path:  Pathmaker,
	     ilk:        Null_Or( Ilk ),
	     opts:       Null_Or( Tool_Options ),
	     derived:    Bool
           };

    Setup
        =
        ( Null_Or( String ),	 #  (pre, post) 
          Null_Or( String )
        );

    Inlining
        =
        Null_Or( Null_Or( Int ) );	#  see ....controls::inline... 


    # A controller is a generic mechanism for manipulating state.
    #
    # The first stage of save'restore is meant to capture the part of
    # the state in question so that the second stage can restore it.
    #
    # Function 'set', on the other hand, serves to establish the
    # new state.
    #
    # All controllers associated with a Mythryl source
    # are invoked for both parsing and compilation.
    #
    # Roughly speaking, given a controller c, each of these two phases
    # is bracketed as follows:
    #
    #   {   restore = c.save'restore ();
    #       c.set ();
    #       parse_or_compile ()
    #       before
    #           restore ();
    #   }
    #
    Controller
        =
        { save'restore: Void -> Void -> Void,
	  set:          Void -> Void
        };

    Ml_Parameters
        =
        { share:  sharing_mode::Request,
	  setup:  Setup,
	  split:  Inlining,
	  noguid: Bool,
	  local:  Bool,
	  controllers: List( Controller )
	};

    Make7_Parameters
        =
        { version:   Null_Or( version::Version )
	,  renamings: Renamings			# MUSTDIE
        };

    # The goal of applying tools to members is to obtain an "expansion",
    # i.e., a list of source-files and a list of .make6-files.  We also
    # obtain a list of "sources".  This is used to implement make7::sources,
    # i.e., to generate dependency information etc.
    #
    Expansion
        =
        { source_files: List ((File_Path, Ml_Parameters)),
	  make7_files:  List ((File_Path, Make7_Parameters)),
	  sources:      List ((File_Path, { ilk: Ilk, derived: Bool }) )
        };

    # A partial expansion is an expansion with a list of things yet to be
    # expanded...
    #
    Partial_Expansion
        =
        (Expansion,  List( Spec ));


    # A rule takes a spec and a rulecontext
    # where the name contained in the spec
    # -- if relative -- is considered relative
    # to the directory of the corresponding
    # description file.
    #
    # In general, when coding a rule one would
    # write a rule function and pass it to
    # the context, which will temporarily change
    # the current working directory to the one that
    # holds the description file ("the context").
    #
    # If this is not necessary for the rule to work
    # correctly, then one can simply ignore the
    # context (this saves system call overhead
    # during dependency analysis).
    # 
    # If the rule yields a genuine partial expansion
    # (where the resulting spec list is not empty),
    # then it must pass the proper "path maker"
    # along with each new name.
    # 
    # For most cases this will be the given
    # "native path maker" because most rules
    # work on native path names.
    # 
    # Some rules, however, might want to use
    # the same convention for derived specs
    # that was used for the original spec.
    #
    Rulefn = Void -> Partial_Expansion;

    Rulecontext
        =
        Rulefn -> Partial_Expansion;

    Rule
        =
	{ spec:             Spec,
	  native2pathmaker: String -> Pathmaker,
	  context:          Rulecontext,
	  default_ilk_of:   Fnspec -> Null_Or( Ilk ),

	  sysinfo: { host_property:  String -> Null_Or( Int ),
		     platform: String                         #  "x86-linux" or such 
		   }
	}
	->
	Partial_Expansion;

    #  Install an ilk:
    #
    note_ilk:  (Ilk, Rule) -> Void;

    # Classifiers are used when the ilk
    # is not given explicitly: 
    #
    Filename_Classifier
        = FILENAME_SUFFIX_CLASSIFIER  String -> Null_Or( Ilk )
	| GENERAL_FILENAME_CLASSIFIER  { name: String, make_filename: Void -> String }
                                     ->
				     Null_Or( Ilk );

    #  Make a classifier which looks for a specific file name suffix: 
    #
    standard_filename_suffix_classifier:  { suffix: String, ilk: Ilk } -> Filename_Classifier;

    # Two standard ways of dealing with filename extensions...
    # (Tool options can be calculated from the options that we have.)
    #
    Extension_Style
        = EXTEND                    List ((String, Null_Or( Ilk ), Tooloptcvt))
        | REPLACE  (List( String ), List ((String, Null_Or( Ilk ), Tooloptcvt)));

    #  Perform filename extension 
    #
    extend_filename:  Extension_Style
                     -> ((String, Null_Or( Tool_Options )) )
                     -> List ((String, Null_Or( Ilk ), Null_Or( Tool_Options )) );

    # Check for outdated files; the pathname
    # strings must be in native syntax!
    #
    outdated:  String -> (List( String ), String) -> Bool;

    # Alternative way of checking for outdated-ness
    # using a "witness" file.  The idea is that if
    # both targetFileName and timestampFileName
    # exist, then targetFileName is considered outdated
    # if timestampFileName is older than sourceFileName.
    #
    # Otherwise, if targetFileName exists but timestampFileName does not,
    # then targetFileName is considered outdated if it is older than
    # sourceFileName.  If targetFileName does not exist, it is
    # always considered outdated. 
    #
    outdated'
        :
        String
        ->
	{ source_file_name:     String,
          timestamp_file_name:  String,
          target_file_name:     String
        }
        ->
        Bool;


    #  Open output file; make all necessary directories for it 
    #
    open_text_output
        :
        String
        ->
        file::Output_Stream;


    # Make all directories leading up to a given file;
    # the file itself is to be left alone
    #
    make_all_directories_on_path
        :
        String -> Void;


    # Install a classifier:
    #
    note_filename_classifier
        :
        Filename_Classifier -> Void;


    # Grab all named options...
    #
    parse_options
        :
        { tool:         String,
	  keywords:     List( String ),
	  options:      Tool_Options
	}
	->
	{ matches:            String -> Null_Or( Tool_Options ),
	  remaining_options:  List( String )
	};
};
