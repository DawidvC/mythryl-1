## compile-pattern-stuff.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



###           "Never take anything on authority."
###
###                           -- Guy L. Steele Jr



#  TODO: this module requires a api !         XXX BUGGO FIXME

package compile_pattern_stuff {

    stipulate

	package em= error_message;			# error_message		is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
	package t  = types;				# types			is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg

#	include types;
	include variables_and_constructors;
	include polylambda;
	include deep_syntax; 

    herein

	Simp 
	  = VARSIMP  Variable 
	  | RECORDSIMP  List ((t::Label, Simp));

	Dconinfo = (types::Constructor, List( t::Type ));

	Path_Constant 
	  = DATAPCON  Dconinfo
	  | INTPCON  Int
	  | INT32PCON  int32::Int
	  | INTINFPCON  integer::Int
	  | WORDPCON  Unt
	  | WORD32PCON  unt32::Unt
	  | REALPCON  String
	  | STRINGPCON  String
	  | VLENPCON  (Int, t::Type); 

	Path
	  = RECORD_PATH  List( Path )
	  | PI_PATH     (Int, Path)
	  | VPI_PATH    (Int,  t::Type, Path)
	  | VLEN_PATH   (Path, t::Type)
	  | DELTA_PATH  (Path_Constant, Path)
	  | ROOT_PATH;

	Dectree
	  = CASETEST  (Path,
                      var_home::Constructor_Signature,
                      List  ((Path_Constant, Dectree)),
		      Null_Or( Dectree ))
	  | ABSTEST0  (Path, Dconinfo, Dectree, Dectree)
	  | ABSTEST1  (Path, Dconinfo, Dectree, Dectree)
	  | RHS  Int						# "RHS" == "Right Hand Side"
	  | BIND  (Path, Dectree);

	fun bug s
            =
            em::impossible ("compile_pattern_stuff: " + s);

	fun make_recordpat (RECORD_PATTERN { fields, is_incomplete=>FALSE, type_ref, ... } ) pats
		=>
		RECORD_PATTERN {

		    fields => paired_lists::map
                                  (fn((id, _), p) = (id, p))
                                  (fields, pats),

                    is_incomplete => FALSE,

                    type_ref
                };

	    make_recordpat (RECORD_PATTERN { is_incomplete => TRUE, ... } ) _
		   =>
		   bug "incomplete record passed to mkRECORDpat";

	    make_recordpat _ _
		 =>
		 bug "non record passed to mkRECORDpat";
        end;

	fun con_eq ( t::ENUM_CONSTRUCTOR { representation=>a1, ... },
                     t::ENUM_CONSTRUCTOR { representation=>a2, ... }
                   )
	    =
	    a1 == a2;

	fun con_eq' ( ( t::ENUM_CONSTRUCTOR { representation=>a1, ... }, _),
                      ( t::ENUM_CONSTRUCTOR { representation=>a2, ... }, _)
                    )
	    =
	    a1 == a2;

	/*
	fun constant_eq (INTcon n, INTcon n') = n == n'
	  | constant_eq (WORDcon n, WORDcon n') = n == n'
	  | constant_eq (INT32con n, INT32con n') = n == n'
	  | constant_eq (WORD32con n, WORD32con n') = n == n'
	  | constant_eq (REALcon r, REALcon r') = r == r'
	  | constant_eq (STRINGcon s, STRINGcon s') = s == s'
	  | constant_eq (VLENcon n, VLENcon n') = n == n'
	  | constant_eq (DATAcon(_, krep, _), DATAcon(_, krep', _)) = krep == krep'
	  | constant_eq _ = FALSE
	*/

	fun constant_eq (DATAPCON (d1, _), DATAPCON (d2, _)) => con_eq (d1, d2);
	    constant_eq (INTPCON n,       INTPCON n')      =>   n == n';
	    constant_eq (INT32PCON n,     INT32PCON n')    =>   n == n';
	    constant_eq (INTINFPCON n,    INTINFPCON n')   =>   n == n';
	    constant_eq (WORDPCON n,      WORDPCON n')     =>   n == n';
	    constant_eq (WORD32PCON n,    WORD32PCON n')   =>   n == n';
	    constant_eq (REALPCON r,      REALPCON r')     =>   r == r';
	    constant_eq (STRINGPCON s,    STRINGPCON s')   =>   s == s';
	    constant_eq (VLENPCON (n, _), VLENPCON (n', _)) =>   n == n';
	    constant_eq _ => FALSE;
        end;


	fun path_eq (RECORD_PATH (a ! ar), RECORD_PATH (b ! br))
                => 
		path_eq (a, b) and path_eq (RECORD_PATH ar, RECORD_PATH br);

	    path_eq (RECORD_PATH NIL, RECORD_PATH NIL) => TRUE;
	    path_eq (PI_PATH (i1, p1), PI_PATH (i2, p2))       =>   i1 == i2 and path_eq (p1, p2);
	    path_eq (VPI_PATH (i1, _, p1), VPI_PATH (i2, _, p2)) =>   i1 == i2 and path_eq (p1, p2);
	    path_eq (VLEN_PATH (p1, _), VLEN_PATH (p2, _)) => path_eq (p1, p2);
	    path_eq (DELTA_PATH (c1, p1), DELTA_PATH (c2, p2)) => 
				constant_eq (c1, c2) and path_eq (p1, p2);
	    path_eq (ROOT_PATH, ROOT_PATH) => TRUE;
	    path_eq _ => FALSE;
        end;

	fun get_path (a, (b, c) ! d)
                => 
	       if (path_eq (a, b))    c;
               else                   get_path (a, d);
               fi; 

	    get_path _ => bug "unexpected args in get_path";
        end;

	fun abstract x      = FALSE;
	fun template x      = FALSE;
	fun is_an_exception x = FALSE;

	fun signature_of_constructor (t::ENUM_CONSTRUCTOR { signature, ... } )
	    =
	    signature;

	fun unary (t::ENUM_CONSTRUCTOR { const, ... }, _)
            =
            const;

    end;	#  toplevel stipulate 
};		#  package compile_pattern_stuff 





##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
