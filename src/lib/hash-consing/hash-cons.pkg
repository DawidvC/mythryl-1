## hash-cons.pkg

# Compiled by:
#     src/lib/hash-consing/hash-cons-lib.make6



###			"I remember once going to see [Indian mathematician Srinivasa Ramanujan]
###                        when he was ill at Putney. I had ridden in taxi cab number 1729 and
###                        remarked that the number seemed to me rather a dull one, and that
###                        I hoped it was not an unfavorable omen.
###                           "No, " he replied, "it is a very interesting number; it is the
###                        smallest number expressible as the sum of two cubes in two different ways."
###
###                                                 -- G. H. Hardy
###                                                    [ British mathematician ]



package hash_cons :> Hash_Cons		# Hash_Cons	is from   src/lib/hash-consing/hash-cons.api
=
pkg

    Chunk X = { nd:  X, tag:  Unt, hash:  Unt };

    Table X = TABLE  {
	eq:  (X, X) -> Bool,
	next_tag:  Ref( Unt ),
	table:  Ref( rw_vector::Rw_Vector( List( Chunk( X ) ) ) )
      };

    table_size = prime_sizes::pick 64;

    fun new { eq }
        =
        TABLE {
	    eq,
	    next_tag => REF 0w0,
	    table => REF (rw_vector::rw_vector (table_size, []))
	};

    fun clear (TABLE { next_tag, table, ... } )
        =
        {   next_tag := 0w0;
	    rw_vector::modify (fn _ => []; end ) *table;
        };

    fun insert (TABLE { eq, next_tag, table }, h, term)
        =
	find bucket
        where
            table' = *table;
	    i = unt::to_int_x (unt::mod (h, unt::from_int (rw_vector::length table')));
	    bucket = rw_vector::get (table', i);

	    fun find [] => {
		  id = *next_tag;
		  chunk = { nd => term, hash => h, tag => id };

		    rw_vector::set (table', i, chunk . bucket);
		    #  Check for table resize 
		    chunk;
		  };
	       find ((chunk as { nd, hash, ... } ) . r) =>
		  if (h == hash) and eq (term, nd)
		    then chunk;
		    else find r;fi;
            end;

	end;

    fun node { nd, tag, hash } = nd;
    fun tag  { nd, tag, hash } = tag;

    fun same (a:  Chunk( X ), b:  Chunk( X ))
        =
        a.tag == b.tag;

    fun compare (  a:  Chunk( X ),
                   b:  Chunk( X )
                )
        =
        unt::compare (a.tag, b.tag);

    fun <+ (a, b)
        =
        unt::(<<) (a, 0w1) + b;

    infix <+;

    fun cons0 table (id, c) = insert (table, id, c);

    fun cons1 table (id, cf) (b:  Chunk( Y ))
        =
	insert (table, id <+ b.tag, cf b);

    fun cons2 table (id, cf) (b:  Chunk( Y ), c:  Chunk( Z ))
        =
	insert (table, id <+ b.tag <+ c.tag, cf (b, c));

    fun cons3 table (id, cf) (b:  Chunk( Y ), c:  Chunk( Z ), d:  Chunk( W ))
        =
	insert (table, id <+ b.tag <+ c.tag <+ d.tag, cf (b, c, d));

    fun cons4 table (id, cf) (b:  Chunk( Y ), c:  Chunk( Z ), d:  Chunk( W ), e:  Chunk( V ))
        =
	insert (table, id <+ b.tag <+ c.tag <+ d.tag <+ e.tag,
	    cf (b, c, d, e));

    fun cons5 table (id, cf)
	(b:  Chunk( Y ), c:  Chunk( Z ), d:  Chunk( W ), e:  Chunk( V ), f:  Chunk( U )) =
	  insert (table,
	    id <+ b.tag <+ c.tag <+ d.tag <+ e.tag <+ f.tag,
	    cf (b, c, d, e, f));

    fun cons_list table (id, cf) (l:  List(  Chunk(  Y ) ))
        =
	insert (table, list::fold_left (fn ( { tag, ... }, sum) =  sum <+ tag) id l, cf l);

    # Consing for records
    # 
    fun cons_r1 table (id, inj, prj) r =  cons1 table (id, inj) (prj r);
    fun cons_r2 table (id, inj, prj) r =  cons2 table (id, inj) (prj r);
    fun cons_r3 table (id, inj, prj) r =  cons3 table (id, inj) (prj r);
    fun cons_r4 table (id, inj, prj) r =  cons4 table (id, inj) (prj r);
    fun cons_r5 table (id, inj, prj) r =  cons5 table (id, inj) (prj r);

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
