## symbol-table.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



#                 OVERVIEW
#
# The royal road to understanding the typical
# large program is to study first its principal
# datastructures.  Their definition will be perhaps
# one percent of the size of the program as a whole,
# and once understood, the rest of the program will
# become reasonably intelligible.
#
# The heart and soul of the compiler front-end
# is the symbol table, which records everything
# the compiler knows about each user-defined
# identifier.
#
# The compiler represents user-defined identifiers
# using Symbols, defined essentially as a string
# plus an integer hash of that string (for fast
# hashtable lookups).  For details, see
#
#    src/lib/compiler/front/basics/mlcomp/symbol.pkg
# 
# Abstractly, the symbol table is just a mapping
# from Symbols to values containing everything the
# compiler front-end knows about that user-defined
# symbol.
# 
# The compiler divides user-defined identifiers
# into eight mutually exclusive namespaces:
# A given identifier 'x' can have separate
# values in all eight namespaces.
#
# These eight namespaces are:
#
#
#
# 1) Named values, introduced by syntax such a
#
#        my_val = 1;
#
#    Named functions introduced by syntax like
#
#        fun my_fun i = i + 1;
#
#    are included in this namespace, because they
#    are just syntactic sugar for core syntax like
#
#        my_fun =   fn i = i + 1;    
#
#
#
# 2) Named datatype constructors such as LEAF and NODE
#    introduced by syntax like
#
#        My_Tree X = NODE (My_Tree, My_Tree)
#                  | LEAF (X);
# 
#
#
# 3) Named types introduced by syntax like
# 
#        My_Type = Int;
# 
#
#
# 4) Named apis introduced by syntax like
# 
#        api An_Api { ... };
# 
#
#
# 5) Named packages introduced by syntax like
# 
#        package my_package { ... };
# 
#
#
# 6) Named generics introduced by syntax like
# 
#        generic package my_package_g (...) { ... };
# 
#
#
# 7) Named generic apis.  I'm a bit baffled by this
#        one, since it seems that generic apis can
#        only be introduced anonymously by syntax such as
#            generic package x( a: A ): B { ... }
#        where the generic api A -> B has
#        no explicit 'my_generic_api' name.
# 
#
#
# 8) Named fixities introduced by syntax like
# 
#        infixr val 50 & ;
#
# Each Symbol is tagged with the namespace to
# which it belongs (via a bitfield tucked into
# the hashcode).
#
# The first thing the front end does when
# encountering any user-defined identifier in
# the source code is to assign it to one of
# the above eight namespaces, and translate
# it into an appropriate symbol.
#
# Consequently, identifiers in different
# namespaces live entirely separate lives.
#
# The symbol table maps all identifiers in
# a given namespace to a value of the same type,
# recording everything which is known about that
# identifier.
#
# That value type is however different for
# different namespaces: We need to remember
# different information about a type name
# than about a generic name, for example.
#
# The resulting eight different naming types
# are declared and defined in (respectively):
#
#    src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.api
#    src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg
#
# with the detailed records declared and defined in
#
#    src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.api
#    src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
#    src/lib/compiler/front/typecheck-stuff/types/types.api
#    src/lib/compiler/front/typecheck-stuff/types/types.pkg
#    src/lib/compiler/front/typecheck-stuff/modules/module.api
#    src/lib/compiler/front/typecheck-stuff/modules/module.pkg
#
# Although conceptually we have eight separate symbol
# tables, one per namespace, we actually implement them
# all in one integrated package.  Since the same
# user identifier is given different Symbols in
# different namespaces, no conflicts result.
#    
# The key implementation component of the symbol
# table is a hashtable mapping from symbols to
# symbol table entries.
#    
# These hashtables are implemented in
#    
#     src/lib/compiler/front/typecheck-stuff/basics/symbol-table-dictionary.api
#     src/lib/compiler/front/typecheck-stuff/basics/symbol-table-dictionary.pkg
#    
# In general, we maintain a stack of these
# hashtables, one per lexical scope, pushing
# and popping the stack as we enter and leave
# lexical scopes in the source code.
#
# This stacking is likewise implemented in
# the above symbol-table-dictionary module.


package symbol_table: (weak)  Symbol_Table {		# Symbol_Table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.api

    stipulate

        package ste = symbol_table_entry;		# symbol_table_entry		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg
	package s   = symbol_table_dictionary;		# symbol_table_dictionary	is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-table-dictionary.pkg
	package m   = module;				# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg

    herein 

	Entry        =  ste::Symbol_Table_Entry;
	Full_Entry   =  (Entry, Null_Or( m::Module_Tree ));
	Symbol_Table =  s::Symbol_Table_Dictionary( Full_Entry );

	exception UNBOUND = s::UNBOUND;

	fun aug x
            =
            (x, NULL);

	fun strip (rb: Full_Entry)
            =
            #1 rb;

	empty = s::empty;

	fun get (e, s)
            =
            strip (s::get (e, s));

	bind0 =  s::bind;

	fun bind (s, b, e)
            =
            s::bind (s, aug b, e);

	fun special (mkb, mks)
            =
            s::special (aug o mkb, mks);

	atop             =  s::atop;
	consolidate      =  s::consolidate;
	consolidate_lazy =  s::consolidate_lazy;

	fun apply f e
            =
            s::apply
                (fn (s, b) =  f (s, strip b))
                e;

	fun map f e
            =
            s::map
                (aug o f o strip)
                e;

	fun fold f x0 e
            =
            s::fold
                (fn ((s, b), x) =  f ((s, strip b), x))
                x0
                e;

	realfold =  s::fold;
	symbols  =  s::symbols;

	# sort: Sort the entries in a dictionary.
	#  
	# This is used for the assignment of dynamic access slots
	# during typechecking, for printing, and for other purposes.
	# The namings are sorted in the following order:
	#
	#   values
	#   constructors
	#   types
	#   apis
	#   packages
	#   generic apis
	#   generics
	#   fixity declarations
	#
	# It is only correct to sort dictionaries which have no duplicate entries.
	# All routines which build package dictionaries maintain this
	# invariant, so it is ok to sort any package dictionary using
	# this function.
	#
	fun to_sorted_list  dictionary
            =
            list_mergesort::sort ste::binder_gt (fold (!) NIL dictionary);

	fun filter (e, l)
            =
	    fold_left add empty l
            where
	        fun add (symbol, e')
                    =
                    bind (symbol, get (e, symbol), e')
                    except
                        UNBOUND =  e';
	    end;

    end;				# stipulate

};					# package symbol_table 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
