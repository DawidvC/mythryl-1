#
# This module builds the data dependence graph for acyclic scheduling.
#
# Notes:
# 1. Special source and sink nodes are added to each basic block.
#    These nodes anchor live-in and live-out values.
# 2. If a block has a branch, then it is control dependent on the live-in 
#    node.
#
# -- Allen Leung


#            ``The system was finished, the tests were concluded,
#                 The users' last changes were even included.
#              And the users exclaimed, with a snarl and a taunt,
#                 "It's just what we asked for -- but not what we want!"''



generic package SchedulerDDGBuilder
     (package ddg:  SCHEDULER_DDG
      package control_flow_graph:  Control_Flow_Graph
      package gc_rtl_props:   RTL_PROPERTIES
      package instruction_properties:  Instruction_Properties
         sharing instruction_properties::I = RTLProps::I = DDG::I = control_flow_graph::I
     ) : SCHEDULER_DDG_BUILDER =
pkg

   package ddg        = DDG
   package control_flow_graph        = control_flow_graph
   package rtl        = RTLProps::RTL
   package g          = graph
   package i          = control_flow_graph::I
   package c          = i::C
   package SchedProps = DDG::SchedProps 
   package ha         = sparse_rw_vector
   package a          = rw_vector
   package w8a        = rw_unt8_vector
   package sl         = sorted_list

   exception BuildDDG

   fun error msg = lowcode_error_message::error("BuildDDG", msg)

   i2s = int::to_string

   #  Zero register magic! 
   zeroTable = w8a::rw_vector (c::firstPseudo, 0w0)
   my _       = list::apply (fn k =>
                    case c::zeroReg k of
                      THE r => w8a::update (zeroTable, r, 0w1)
                    | NULL   => ()
                 ) c::cellkinds
   fun isZero r = w8a::sub (zeroTable, r) != 0w0 except _ => FALSE

   exception Nothing

   fun buildDDG { cpu_info, cfg, numberOfInstructions, blockIdTable } = 
   let my CFG as g::GRAPH cfg = cfg
       #  The number of nodes <= instructions + livein + liveout per block 
       M = numberOfInstructions + cfg.order () * 2
       my DDG as g::GRAPH ddg = DDG::newDDG M
       globalInfo = DDG::globalInfo DDG

       #  Extract instruction properties 
       my SchedProps::CPU_INFO { defUse, ... } = cpu_info

       #  Regmap magic! 
       regmap = c::lookup (control_flow_graph::regmap CFG)
       regmapDefs = map (fn (r, l) => (regmap r, l))
       regmapUses = map regmap
       fun simplifyCopy (instruction, dst, src) = 
       let fun loop ([], [], dst', src') = (dst', src')
             | loop((d, l) . dst, s . src, dst', src') = 
               let d = regmap d and s = regmap s
               in  if d == s then loop (dst, src, dst', src')
                   else loop (dst, src, (d, l) . dst', s . src')
               end
             | loop _ = error "simplifyCopy"
           my (dst, src) = loop (dst, src, [], []) 

           #  Add the copy temporary! 
           dst = case dst of
                       [] => dst
                     | _  => case instruction_properties::moveTmpR instruction of
                               THE r => (regmap r,-1) . dst
                             | _      => dst
       in  (dst, src)
       end

       /* Edge constructors */  
       #  memory 
       fun m_flow (m, l) = DDG::EDGE { l=l, r=m, d=DDG::MEM_FLOW }
       m_anti      = DDG::EDGE { l= -1, r= -1, d=DDG::MEM_ANTI }
       m_output    = DDG::EDGE { l=0, r= -1, d=DDG::MEM_OUTPUT }
       #  register 
       fun flow (r, l)   = DDG::EDGE { l=l, r=r, d=DDG::FLOW }
       output      = DDG::EDGE { l=0, r= -1, d=DDG::OUTPUT }
       anti        = DDG::EDGE { l= -1, r= -1, d=DDG::ANTI }
       #  Control dependence 
       fun c_flow (r, l) = DDG::EDGE { l=l, r=r, d=DDG::CTRL }
       c_dep       = DDG::EDGE { l= -1, r= -1, d=DDG::CTRL }
       c_output    = DDG::EDGE { l=0, r= -1, d=DDG::CTRL }
       c_anti      = DDG::EDGE { l= -1, r= -1, d=DDG::CTRL_ANTI }

       #  How to make a new edge 
       newEdge = ddg.add_edge 
       #  newEdge = fn (i, j, e) => (print (i2s i$"->"$i2s j$" "$DDG::edgeToString e$"\n"); newEdge (i, j, e)) except e => raise exception e 

       #  A table of definitions and uses indexed by block 
       defUseTable = ha::rw_vector'(13, fn _ => raise exception BuildDDG)

       #  Create nodes for block b 
       fun createNodes (id, b,  [], ops) = (id, ops)
         | createNodes (id, b, instruction . instrs, ops) = 
           let my (d, u) = defUse instruction
               fun newNode (defs, uses) =  
               let node = DDG::NODE { b=b, instruction=instr, defs=defs, uses=uses }
               in  ddg.add_node (id, node);
                   createNodes (id+1, b, instrs, (id, node) . ops)
               end
           in  case instruction_properties::instrKind instruction of
                 instruction_properties::IK_COPY => 
                  (case simplifyCopy (instruction, d, u) of
                    ([], []) => createNodes (id, b, instrs, ops)
                  | (d,  u)  => newNode (d, u)
                  )
               | _ => newNode (regmapDefs d, regmapUses u)
           end

       #  Scan one block; ops are in forward order 
       fun scanBlock { ops, liveIn=(liveIn, _), defTable, useTable } =
       let fun addOutputAndAnti j (r, _) =  
               (apply (fn i => newEdge (i, j, anti)) (ha::sub (useTable, r));
                apply (fn (i, e) => newEdge (i, j, output)) (ha::sub (defTable, r))
               )
           
           fun addFlow j r =
               apply (fn (i, e) => newEdge (i, j, e)) (ha::sub (defTable, r))

           #  Update def/use 
           fun addDef i (r, l) = 
               if isZero r then () 
               else
                 (ha::update (defTable, r,[(i, flow (r, l))]); ha::update (useTable, r,[]))

           fun addUse i r = 
               if isZero r then ()
               else ha::update (useTable, r, i . ha::sub (useTable, r))

           fun scan [] = ()
             | scan((i, DDG::NODE { instruction, defs, uses, ... } ) . rest) =
               let rtl = RTLProps::rtl instruction
               in  if RTL::can'tMoveUp rtl then
                      newEdge (liveIn, i, c_dep)
                   
                   apply (addOutputAndAnti i) defs;
                   apply (addFlow i) uses;
                   #  update defs/uses 
                   apply (addUse i) uses;
                   apply (addDef i) defs;
                   scan rest
               end 
       in  scan ops
       end


       blockId    = REF 0 
       nodeId     = REF 0 
       blockMap   = a::rw_vector (cfg.order (), 0) 
       liveInMap  = int_hash_table::make_table (13, Nothing)
       liveOutMap = int_hash_table::make_table (13, Nothing)
       specialMap = int_hash_table::make_table (32, Nothing)
       addSpecial = int_hash_table::set specialMap
       isSpecial  = int_hash_table::find specialMap
       isSpecial  = fn b => case isSpecial b of THE _ => TRUE 
                                                  | NULL => FALSE

       /* Process a basic block in topological order of the region:
        *  1. create all the nodes in the DDG
        *  2. add the edges 
        */  
       fun processBlock (b, b' as control_flow_graph::BLOCK { instructions, ... } ) = 
       let bid = *blockId #  Block id 
           a::update (blockMap, bid, b) 
           a::update (blockIdTable, b, bid)
           blockId := bid + 1

           fun createNode (instruction, defs, uses) =  
           let node = (*nodeId, 
                           DDG::NODE { instruction=instr, b=bid, defs=defs, uses=uses } )
           in  nodeId := *nodeId + 1;
               ddg.add_node node;
               node
           end 

           #  Create the nodes 
           my (newNodeId, ops) = createNodes(*nodeId, bid, *instructions, []) 
           nodeId := newNodeId

           revAppend = list::revAppend

           defs = ha::rw_vector (13, [])  
           uses = ha::rw_vector (13, [])    

              /* edge Y->X is an internal region edge 
               * merge definition and uses from Y => X
               */
           fun mergeDefUse (Y, X, _) = 
               let my { defTable, useTable } = ha::sub (defUseTable, Y)
               in  ha::keyed_apply (fn (r, es) => 
                           ha::update (defs, r, revAppend (es, ha::sub (defs, r))))
                       (defTable, 0, NULL);
                   ha::keyed_apply (fn (r, is) =>
                           ha::update (uses, r, revAppend (is, ha::sub (uses, r))))
                          (useTable, 0, NULL)
               end

           fun addCtrlDepEdge (i, j)
               =
               newEdge (i, j, c_dep)

              /* Add a live-in node for a block that summarizes the
               * values that are coming live-in from side-exits
               */
           fun addLiveIn X = 
               let entry_edges = cfg.entry_edges X 
                   liveIn = 
                        sl::uniq (fold_right (fn ((Y, _, _), S) =>
                        let my control_flow_graph::BLOCK { annotations, ... } = cfg.node_info Y
                        in  case DDG::LIVENESS.get *annotations of
                              THE { liveOut, ... } => revAppend (liveOut, S)
                            | NULL => S
                        end) [] entry_edges)
                   my liveInNode as (i, _) = 
                          createNode (SchedProps::source, 
                             map (fn r => (r,-1)) liveIn, [])
                   int_hash_table::set liveInMap (bid, liveInNode)
                   addSpecial (i, TRUE)
                   fun addOutputAndAnti j r =  
                        (apply (fn i => if isSpecial j then () 
                                      else newEdge (i, j, anti)) (ha::sub (uses, r));
                         apply (fn (i, e) => 
                               if isSpecial i then ()
                               else newEdge (i, j, output)) (ha::sub (defs, r))
                        )
               in  apply (addOutputAndAnti i) liveIn;
                   apply (fn r => ha::update (defs, r, 
                        (i, DDG::EDGE { l= -1, r=r, d=DDG::LIVEIN } ) . ha::sub (defs, r))) 
                      liveIn;
                   liveInNode
               end           

           apply mergeDefUse (cfg.in_edges b)
           liveInNode = addLiveIn b

              /* Add a live-out node for a block that summarizes the
               * values that are going live-out from side-exits
               */
           fun addLiveOut X = 
               (case cfg.exit_edges X of
                 exit_edges =>
                 let fun createLiveOutNode (liveOut) =
                     let my node as (i, _) = 
                            createNode (SchedProps::sink, [], liveOut)
                     in  int_hash_table::set liveOutMap (bid, node);
                         addSpecial (i, TRUE);
                         node
                     end
                     liveOut = 
                        if list::exists 
                             (fn (_, _, control_flow_graph::EDGE { k, ... } ) => k = control_flow_graph::EXIT) 
                                exit_edges 
                        then
                          let my control_flow_graph::BLOCK { annotations, ... } = cfg.node_info X
                          in  case DDG::LIVENESS.get (*annotations) of
                                THE { liveOut, ... } => liveOut
                              | NULL => error "missing live out"
                          end
                        else
                           sl::uniq (fold_right (fn ((_, Y, _), S) =>
                           let my control_flow_graph::BLOCK { annotations, ... } = cfg.node_info Y
                           in  case DDG::LIVENESS.get (*annotations) of
                                 THE { liveIn, ... } => revAppend (liveIn, S)
                               | NULL => S
                           end) [] exit_edges)

                     my liveOutNode as (i, _) = 
                          case *instructions of
                             [] => createLiveOutNode (liveOut)
                           | jmp . _ =>
                             case instruction_properties::instrKind jmp of
                               instruction_properties::IK_JUMP => 
                               #  Add a control dependence edge to the liveIn 
                               let my jmpNode as (j, _) = list::last ops
                               in  addCtrlDepEdge(#1 liveInNode, j);
                                   jmpNode
                               end
                             | _ => createLiveOutNode (liveOut)
                     fun addUse i r = 
                         if isZero r then ()
                         else ha::update (uses, r, i . ha::sub (uses, r))
                     fun addLiveOut j r =
                         apply (fn (i, DDG::EDGE { l, r, ... } ) => 
                            newEdge (i, j, DDG::EDGE { l=l, r=r, d=DDG::LIVEOUT } ))
                               (ha::sub (defs, r))

                 in  apply (addLiveOut i) liveOut;
                     addLiveOutCtrlDep i; 
                     apply (addUse i) liveOut
                 end
               ) 

              /* Add control dependences edges from all the instructions 
               * to the live-out node
               */
           and addLiveOutCtrlDep (j) =
               apply (fn node as (i, _) => 
                    if i == j then () else addCtrlDepEdge (i, j)
                   ) ops

           scanBlock { ops=ops, liveIn=liveInNode, 
                             defTable=defs, useTable=uses }; 

       in  addLiveOut b;
           ha::update (defUseTable, b, { defTable=defs, useTable=uses } )
       end

       #  Build the entire dag 
       fun buildDag() =
       let allNodes = cfg.nodes () #  must be in topological order! 
       in  apply processBlock allNodes 
       end

   in  buildDag();
       globalInfo := 
          THE { blockMap=blockMap, liveInMap=liveInMap, liveOutMap=liveOutMap };
       DDG
   end 
end
