## x86-span-dependent-jumps-g.pkg --- information to resolve jumps for runtime code generation.

# Compiled by:
#     src/lib/compiler/lower/make7/ia32.make6

# We get invoked from:
#
#     src/lib/compiler/codegen/x86/x86-codegen-g.pkg

generic package  x86_span_dependent_jumps_g (

    package instruction_set
        :
        Instruction_Set_X86;				# Instruction_Set_X86	is from   src/lib/compiler/lower/x86/instruction/instruction-set-x86.api

    package eval
        :
        Codetree_Eval					# Codetree_Eval	is from   src/lib/compiler/lower/codetree/codetree-eval.api
	where codetree == instruction_set::codetree;

    package shuffle
        :
        Xy86Shuffle					# Xy86Shuffle	is from   src/lib/compiler/lower/x86/instruction/x86-shuffle.api
	where instruction_set == instruction_set;

    package machine_code_emitter
        :
        Machine_Code_Emitter				# Machine_Code_Emitter	is from   src/lib/compiler/lower/emit/machine-code-emitter.api
	where instruction_set == instruction_set;
)

: (weak) Span_Dependent_Jumps				# Span_Dependent_Jumps	is from   src/lib/compiler/lower/span/span-dependent-jumps.api

{
    package instruction_set = instruction_set;
    package cells           = instruction_set::cells;

    package i     = instruction_set;
    package c     = cells;
    package const = i::constant;

    fun error msg
        =
        lowcode_error_message::error("x86_span_dependent_jumps_g", msg);

    esp = 4;
    ebp = 5;

    branch_delayed_arch = FALSE;


    fun imm8 i
        =
        -128 <= i   and   i < 128;


    fun is_sdi (i::NOTE { instruction, ... } ) => is_sdi instruction;

	is_sdi (i::LIVE _)		 => TRUE;
	is_sdi (i::DEAD _)		 => TRUE;
	is_sdi (i::COPY _)		 => FALSE;

	is_sdi (i::BASE_INSTRUCTION instruction)
            =>
            {   fun do_operand (i::IMMED_LABEL _) => TRUE;
		    do_operand (i::LABEL_EA _) => TRUE;
		    do_operand (i::DISPLACE { disp, ... } ) => do_operand disp;
		    do_operand (i::INDEXED { disp, ... } ) => do_operand disp;
		    do_operand _ => FALSE;
                end;

		fun cmptest { lsrc, rsrc }
                    =
                    do_operand lsrc or do_operand rsrc;

		case instruction
		  
		    i::JMP (operand, _) => do_operand operand;
		    i::JCC { operand, ... } => do_operand operand;
		    i::BINARY { src, dst, ... } => do_operand src or do_operand dst;
		    i::MOVE { src, dst, ... } => do_operand src or do_operand dst;
		    i::LEA { address, ... } => do_operand address;
		    ( i::CMPL arg | i::CMPW arg | i::CMPB arg 
		     | i::TESTL arg | i::TESTW arg | i::TESTB arg) => cmptest arg;
		    i::MULTDIV { src, ... } => do_operand src;
		    i::MUL3 { src1, ... } => do_operand src1;
		    i::UNARY { operand, ... } => do_operand operand;
		    i::SET { operand, ... } => do_operand operand;
		    i::CMOV { src, dst, ... } => do_operand src; 
		    (i::PUSHL operand | i::PUSHW operand | i::PUSHB operand) => do_operand operand;
		    i::POP operand =>  do_operand operand;
		    i::FSTPT operand => do_operand operand;
		    i::FSTPL operand => do_operand operand;
		    i::FSTPS operand => do_operand operand;
		    i::FSTL operand => do_operand operand;
		    i::FSTS operand => do_operand operand;
		    i::FLDT operand => do_operand operand;
		    i::FLDL operand => do_operand operand;
		    i::FLDS operand => do_operand operand;
		    i::FBINARY { src, dst, ... } => do_operand src or do_operand dst;
		    i::FIBINARY { src, ... } => do_operand src; 
		    i::FILD operand => do_operand operand;
		    i::FILDL operand => do_operand operand;
		    i::FILDLL operand => do_operand operand;
		    _ => FALSE;
               esac;
	    };
    end;

    fun min_size (i::NOTE { instruction, ... } ) => min_size instruction;

	min_size (i::LIVE _)  => 0;
	min_size (i::DEAD _)  => 0;
	min_size (i::BASE_INSTRUCTION i)
	    => 
	    case i 
	        i::JMP _ => 2;
		i::JCC _ => 2;
		i::LEA _ => 2;
		 _ => 1;
	    esac;

	min_size _ => error"minSize";
    end;


    fun max_size _ = 12;

    # value of span-dependent operand 
    #
    fun do_operand (i::IMMED_LABEL le) => eval::value_of le;
	do_operand (i::LABEL_EA le) => eval::value_of le;
	do_operand _ => error "do_operand";
    end;

    encode = machine_code_emitter::emit_instruction;

    fun sdi_size (i::NOTE { instruction, ... }, labmap, loc)
            =>
            sdi_size (instruction, labmap, loc);

	sdi_size (i::LIVE _, _, _) => 0;
	sdi_size (i::DEAD _, _, _) => 0;

	sdi_size (i::BASE_INSTRUCTION instruction, labmap, loc)
	    =>
	    {
		fun branch (operand, short, long)
		    =
		    {   offset = do_operand operand - loc;

			if (imm8 (offset - 2))   short;
			else                     long;
			fi;
		    };

		case instruction
		    i::JMP (operand, _) => branch (operand, 2, 5);
		    i::JCC { operand, ... } => branch (operand, 2, 6);
		    _ => unt8_vector::length (encode (i::BASE_INSTRUCTION instruction));
		esac;
	     };				# fun sdi_size

	sdi_size _ => error "sdi_size";
    end;

    fun expand (i::NOTE { instruction, ... }, size, loc)
            =>
            expand (instruction, size, loc);

	expand (i::LIVE _, _, _) => [];
	expand (i::DEAD _, _, _) => [];

	expand (i::BASE_INSTRUCTION instruction, size, loc)
            => 
	    case instruction 
	      
	        i::JMP (operand, labs)
                    =>
                    [i::jmp (i::RELATIVE (do_operand operand-loc), labs)];

	        i::JCC { cond, operand }
                    => 
	            [i::jcc { cond, operand=>i::RELATIVE (do_operand operand-loc) } ];

	        operand =>   [i::BASE_INSTRUCTION operand];
            esac;

	expand _ => error "expand";
    end;
};



## COPYRIGHT (c) 1997 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
