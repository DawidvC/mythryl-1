## hash-table.pkg
## AUTHOR:   John Reppy
##	    AT&T Bell Laboratories
##	    Murray Hill, NJ 07974
##	    jhr@research.att.com

# Compiled by:
#     src/lib/src/lib7.make6

# Polymorphic hash tables.


###               "The sciences do not try to explain, they hardly
###                even try to interpret, they mainly make models.
###
###                By a model is meant a mathematical construct which,
###                with the addition of certain verbal interpretations,
###                describes observed phenomena.
###
###                The justification of such a mathematical construct
###                is solely and precisely that it is expected to work."
###
###                                         -- Johnny von Neuman



package hash_table: (weak)  Hash_Table	{		# Hash_Table			is from   src/lib/src/hash-table.api

    package htrep= hash_table_representation;		# hash_table_representation	is from   src/lib/src/hash-table-rep.pkg

    Hash_Table (X, Y)
        =
        HASH_TABLE {
	  hash_g:  X -> Unt,
	  eq_pred:  ((X, X)) -> Bool,
	  not_found:  Exception,
	  table:  Ref( htrep::Table( X, Y ) ),
	  n_items:  Ref( Int )
	};

    fun index (i, size)
        =
        unt::to_int_x (unt::bitwise_and (i, unt::from_int size - 0u1));


    # Find smallest power of 2 (>= 32) that is >= n 
    #
    fun round_up n
        =
	f 32
        where

	  fun f i
              =
              if   (i >= n)   i;
              else            f (i * 2);   fi;
	end;

    # Create a new table; the int is a size hint and the exception
    # is to be raised by find.
    #
    fun make_table (hash, eq) (size_hint, not_found)
        =
        HASH_TABLE {
	    hash_g => hash,
	    eq_pred => eq,
	    not_found,
	    table => REF (htrep::alloc size_hint),
	    n_items => REF 0
	};


    # Remove all elements from the table 
    #
    fun clear (HASH_TABLE { table, n_items, ... } )
        =
        {   htrep::clear *table;
            n_items := 0;
        };

    # Insert an item.  If the key already has an item associated with it,
    # then the old item is discarded.
    #
    fun set (my_table as HASH_TABLE { hash_g, eq_pred, table, n_items, ... } ) (key, item)
        =
        {   arr = *table;
	    size = rw_vector::length arr;
	    hash = hash_g key;
	    index = index (hash, size);

	    fun get htrep::NIL
                    =>
                    {   rw_vector::set (arr, index,
			  htrep::BUCKET (hash, key, item, rw_vector::get (arr, index)));
			n_items := *n_items + 1;
			htrep::grow_table_if_needed (table, *n_items);
			htrep::NIL;
                    };

	        get (htrep::BUCKET (h, k, v, r))
                    =>
		    if   (hash == h  and  eq_pred (key, k))

                         htrep::BUCKET (hash, key, item, r);
		    else
                         case (get r)
		           
		              htrep::NIL =>  htrep::NIL;
			      rest       =>  htrep::BUCKET (h, k, v, rest);
			 esac;
                    fi;
            end;
	  
	    case (get (rw_vector::get (arr, index)))
	      
	         htrep::NIL =>  ();
	         b          =>  rw_vector::set (arr, index, b);
            esac;
	};



    # Return TRUE, if the key is in the domain of the table 

    fun contains_key (HASH_TABLE { hash_g, eq_pred, table, ... } ) key
        =
	get (rw_vector::get (arr, index))
        where

	    arr   =  *table;
	    hash  =  hash_g key;
	    index =  index (hash, rw_vector::length arr);

	    fun get htrep::NIL
                    =>
                    FALSE;

	        get (htrep::BUCKET (h, k, v, r))
		    => 
		    ((hash == h) and eq_pred (key, k))    or
		    get r;
            end;
	end;



    # Find an item, the table's exception is raised if the item doesn't exist 

    fun lookup (HASH_TABLE { hash_g, eq_pred, table, not_found, ... } ) key
        =
	get (rw_vector::get (arr, index))
        where
	    arr =  *table;
	    size  =  rw_vector::length arr;

	    hash  =  hash_g key;
	    index =  index (hash, size);

	    fun get htrep::NIL
                    =>
                    raise exception not_found;

		get (htrep::BUCKET (h, k, v, r))
                    =>
                    if   (hash == h   and   eq_pred (key, k))   v;
		    else                                        get r;   fi;
            end;
	end;



    #  get for an item, return NULL if the item doesn't exist 

    fun find (HASH_TABLE { hash_g, eq_pred, table, ... } ) key
        =
	get (rw_vector::get (arr, index))
        where
	    arr =  *table;
	    size  =  rw_vector::length arr;

	    hash  =  hash_g key;
	    index =  index (hash, size);

	    fun get htrep::NIL
                    =>
                    NULL;

		get (htrep::BUCKET (h, k, v, r))
                    =>
		    if   (hash == h  and  eq_pred (key, k))   THE v;
		    else                                      get r;     fi;
            end;
	end;

    # Remove an item.  The table's exception is raised if
    # the item doesn't exist.

    fun remove (HASH_TABLE { hash_g, eq_pred, not_found, table, n_items } ) key
        =
	item
        where
            arr =  *table;
	    size  =  rw_vector::length arr;

	    hash  =  hash_g key;
	    index =  index (hash, size);

	    fun get htrep::NIL
                    =>
                    raise exception not_found;

		get (htrep::BUCKET (h, k, v, r))
                    =>
                    if   (hash == h  and  eq_pred (key, k))
		         (v, r);
		    else
                         my (item, r') = get r;
                         (item, htrep::BUCKET (h, k, v, r'));
                    fi;
            end;

	    my (item, bucket)
                =
                get (rw_vector::get (arr, index));

	    rw_vector::set (arr, index, bucket);

	    n_items := *n_items - 1;
	end;


   #  Return the number of items in the table 

   fun vals_count (HASH_TABLE { n_items, ... } )
       =
       *n_items;


    #  return a list of the items in the table 

    fun vals_list (HASH_TABLE { table => REF arr, n_items, ... } )
        =
	htrep::vals_list (arr, n_items);

    fun keyvals_list (HASH_TABLE { table => REF arr, n_items, ... } )
        =
	htrep::keyvals_list (arr, n_items);


    # Apply a function to the entries of the table 
    #
    fun keyed_apply f (HASH_TABLE { table, ... } ) = htrep::keyed_apply f *table;
    fun       apply f (HASH_TABLE { table, ... } ) = htrep::apply       f *table;

    #  Map a table to a new table that has the same keys and exception 
    #
    fun keyed_map f (HASH_TABLE { hash_g, eq_pred, table, n_items, not_found } )
        =
        HASH_TABLE {
	    hash_g, eq_pred,
	    table => REF (htrep::keyed_map f *table),
	    n_items => REF *n_items,
	    not_found
	};

    #  Map a table to a new table that has the same keys and exception 
    #
    fun map f (HASH_TABLE { hash_g, eq_pred, table, n_items, not_found } )
        =
        HASH_TABLE {
	    hash_g, eq_pred,
	    table => REF (htrep::map f *table),
	    n_items => REF *n_items,
	    not_found
	};


    #  Fold a function over the entries of the table 
    #
    fun foldi f init (HASH_TABLE { table, ... } ) =  htrep::foldi f init *table;
    fun fold  f init (HASH_TABLE { table, ... } ) =  htrep::fold  f init *table;


    # Modify the hash-table items in place: 
    #
    fun modifyi f (HASH_TABLE { table, ... } ) =  htrep::modifyi f *table;
    fun modify  f (HASH_TABLE { table, ... } ) =  htrep::modify  f *table;


    # Remove any hash table items that do
    # not satisfy the given predicate.
    #
    fun keyed_filter prior (HASH_TABLE { table, n_items, ... } )
        =
	n_items := htrep::keyed_filter prior *table;

    fun filter prior (HASH_TABLE { table, n_items, ... } )
        = 
	n_items := htrep::filter prior *table;


    #  Create a copy of a hash table 
    #
    fun copy (HASH_TABLE { hash_g, eq_pred, table, n_items, not_found } )
        =
        HASH_TABLE {
	    hash_g, eq_pred,
	    table => REF (htrep::copy *table), n_items => REF *n_items,
	    not_found
	};

    # Return a list of the sizes of the various buckets.
    # This is to allow users to gauge the quality of
    # their hashing function:
    #
    fun bucket_sizes (HASH_TABLE { table, ... } )
        =
        htrep::bucket_sizes *table;

}; #  hash_table 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1993 by AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
