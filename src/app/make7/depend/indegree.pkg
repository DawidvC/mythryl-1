## indegree.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



# Calculate a map of in-degrees
# (that is, the number of SML_NODEs
# that depend on it) for each BARE_O7.
#
# The in-degree of a node can serve
# as a hint for prioritizing
# compilations during parallel make.



###                 "Easy writing makes damned hard reading."
###
###                              -- Richard Brinsley Sheridan 



stipulate
    package lg =  inter_library_dependency_graph;		# inter_library_dependency_graph	is from   src/app/make7/depend/inter-library-dependency-graph.pkg
    package dg =  intra_library_dependency_graph;		# intra_library_dependency_graph	is from   src/app/make7/depend/intra-library-dependency-graph.pkg
    package m  =  bare_o7_map;					# bare_o7_map				is from   src/app/make7/o7/bare-o7-map.pkg

herein

    api Indegree {

	indegrees:  lg::Library -> m::Map( Int );
    };


    package indegree: Indegree {

	    fun indegrees lg::ERROR_LIBRARY
                    =>
                    m::empty;

	        indegrees (lg::LIBRARY { o7_views_by_name, ... } )
		    =>
		    {   fun far_o7 sn ((_, dg::O7_IS_BARE n), m)
                                =>   sn (n, m);

			    far_o7 _ (_, m)
                                =>
                                m;
                        end;


			fun increment_sml_node (dg::BARE_O7 { bare_o7 => i, ... }, m)
			    =
			    m::set (m, i, 1 + the_else (m::get (m, i), 0));


			fun near_o7 (dg::BARE_O7 bare_o7node, m)
			    =
			    {   bare_o7node
                                    ->
                                    { bare_o7  => i,
				      near_imports  => li,
				      far_imports => gi  };


				m   =
                                    case (m::get (m, i))
				      
					 THE _
                                             =>
                                             m;

					 NULL
                                             =>
                                             fold_left
                                                 near_o7
						 (   fold_left (far_o7 near_o7)
							   (m::set (m, i, 0))
							   gi
						 )
						 li;
                                    esac;

				fold_left
                                    increment_sml_node
                                    (fold_left (far_o7 increment_sml_node) m gi)
                                    li;
			    };

			fun do_far_o7 ((o7_thunk, _, _), m)
			    =
			    far_o7 near_o7 (o7_thunk (), m);

			symbol_map::fold_left
                            do_far_o7
                            m::empty
                            o7_views_by_name;
		    };
            end;		# fun indegrees
    };
end;
