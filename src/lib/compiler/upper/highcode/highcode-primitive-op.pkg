## highcode-primitive-op.pkg

# Compiled by:
#     src/lib/compiler/core.make6



###                  "The mathematics are distinguished
###                   by a particular privilege,
###                   that is, in the course of ages,
###                   they may always advance and
###                   can never recede."
###
###                              -- Edward Gibbon,
###                                 Decline and Fall of the Roman Empire



package highcode_primitive_op

: (weak)  Highcode_Primitive_Op				# Highcode_Primitive_Op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.api

{
     # Numkind includes kind and number of bits 
     #
     Numkind 
      = INT  Int 
      | UINT  Int 
      | FLOAT  Int;

     Arithop
      = ADD | SUBTRACT | MULTIPLY | DIVIDE | NEGATE	#  int or float 
      | ABS | FSQRT	| FSIN | FCOS | FTAN		#  floating point only 
      | LSHIFT | RSHIFT | RSHIFTL			#  int only 
      | BITWISEAND | BITWISEOR | BITWISEXOR | BITWISENOT			#  int only 
      | REM | DIV | MOD;			        #  int only 

     Cmpop = GT | GE | LT | LE | LEU | LTU | GEU | GTU | EQL | NEQ;

     # Various primitive operations.  Those that are designated "inline" are
     # expanded into lambda code in terms of other operators,
     # as is the "checked=TRUE" version of NUMSUBSCRIPT or NUMUPDATE.


     Primitive_Operation
      = ARITH  { oper: Arithop, overflow: Bool, kind: Numkind }
      | INLLSHIFT  Numkind
      | INLRSHIFT  Numkind
      | INLRSHIFTL  Numkind
      | CMP  { oper: Cmpop, kind: Numkind }

      | TESTU  (Int, Int)
      | TEST  (Int, Int)
      | TRUNC  (Int, Int)
      | EXTEND  (Int, Int)
      | COPY  (Int, Int)

      | TEST_INF  Int
      | TRUNC_INF  Int
      | EXTEND_INF  Int
      | COPY_INF  Int

      | ROUND  { floor: Bool, fromkind: Numkind, tokind: Numkind }
      | REAL  { fromkind: Numkind, tokind: Numkind }

      | NUMSUBSCRIPT  { kind: Numkind, checked: Bool, immutable: Bool }
      | NUMUPDATE  { kind: Numkind, checked: Bool }

      | SUBSCRIPT                  #  polymorphic rw_vector subscript 
      | SUBSCRIPTV                 #  poly vector subscript 
      | INLSUBSCRIPT               #  inline poly rw_vector subscript 
      | INLSUBSCRIPTV              #  inline poly vector subscript 
      | INLMKARRAY                 #  inline poly rw_vector creation 

      | PTREQL | PTRNEQ            #  pointer equality 
      | POLYEQL | POLYNEQ          #  polymorphic equality 
      | BOXED | UNBOXED            #  Boxity tests 
      | LENGTH                     #  vector, string, rw_vector, ... length 
      | CHUNKLENGTH                #  length of arbitrary heap chunk 
      | CAST
      | WCAST
      | GETRUNVEC                  #  get the pointer to the run-vector 
      | MARKEXN                    #  mark an exception value with a string 
      | GETHANDLER | SETHANDLER          #  get/set exn handler pointer 
      | GET_CURRENT_THREAD_REGISTER
      | SET_CURRENT_THREAD_REGISTER	#  get/set reserved 'current thread' register (see current_thread_ptr in src/lib/compiler/upper/highcode/highcode-primitive-op.pkg)
      | GETPSEUDO | SETPSEUDO      	#  get/set pseudo registers 
      | SETMARK | DISPOSE          	#  Capture/dispose frames 
      | MAKEREF                    	#  Allocate a REF cell 
      | CALLCC | CAPTURE | THROW   	#  Fate operations 
      | ISOLATE                    	#  isolating a function 
      | DEREF                      	#  Dereferencing 
      | ASSIGN                     	#  Assignment 
      | UNBOXEDASSIGN              	#  Assignment to integer reference 
      | UPDATE                     	#  rw_vector or reference update (maybe boxed) 
      | INLUPDATE                  	#  inline rw_vector update (maybe boxed) 
      | BOXED_SET                	#  Boxed rw_vector update 
      | UNBOXED_SET              	#  update rw_vector of integers WITH tags 

      | GETTAG                   	#  extract the tag portion of an 
				 	#  Chunk's descriptor as an ML int 
      | MAKE_SPECIAL             	#  make a special chunk 
      | SETSPECIAL               	#  set the state of a special chunk 
      | GETSPECIAL               	#  get the state of a special chunk 
      | USELVAR | DEFLVAR
      | INLMIN  Numkind	       		#  inline min 
      | INLMAX  Numkind	       		#  inline max 
      | INLABS  Numkind	       		#  inline abs 
      | INLNOT                     	#  inline bool not operator 
      | INLCOMPOSE                 	#  inline compose "op o"  operator 
      | INLBEFORE                  	# inline "before" operator
      | INLIGNORE			#  inline "ignore" function 
      | INLINE_ARRAY			#  inline polymorphic rw_vector allocation 
      | INLINE_VECTOR			#  inline polymorphic vector allocation 
      | INLINE_MONOARRAY  Numkind	#  inline monomorphic rw_vector allocation 
      | INLINE_MONOVECTOR  Numkind	#  inline monomorphic vector allocation 

      | MKETAG                    	#  make a new exception tag 
      | WRAP                       	#  Box a value by wrapping it 
      | UNWRAP                     	#  unbox a value by unwrapping it 

      #  Primops to support new
      # rw_vector representations: 
      | NEW_ARRAY0			#  Allocate zero-length rw_vector header 
      | GET_SEQ_DATA			#  get data pointer from arr/vec header 
      | SUBSCRIPT_REC			#  record subscript operation 
      | SUBSCRIPT_RAW64			#  raw64 subscript operation 

      #  Primops to support new
      # experimental C FFI. 
      | RAW_LOAD  Numkind		#  load from arbitrary memory location 
      | RAW_STORE  Numkind		#  store to arbitrary memory location 

      # Make a call to a C-function;
      # The primitive_operation carries C function prototype information and specifies
      # which of its (ML-) arguments are floating point. C prototype
      # information is for use by the backend, ML information is for
      # use by the FPS converter.
      #
      | RAW_CCALL   Null_Or {  c_prototype:                ctypes::Ckit_Prototype,
				 ml_argument_representations: List( Ccall_Type ),
				 ml_result_representation:    Null_Or( Ccall_Type ),
				 is_reentrant:               Bool
			      }

       # Allocate uninitialized storage on the heap.
       # The record is meant to hold short-lived C chunks, i.e., they
       # are not ML pointers.  The representation is 
       # the same as RECORD with tag tag_raw32 or tag_fblock.

      | RAW_RECORD  { fblock: Bool }

      | INLIDENTITY			#  polymorphic identity 

      | CVT64				# convert between external and
					# internal representation of
					# simulated 64-bit scalars

    also
    Ccall_Type = CCI32 | CCI64 | CCR64 | CCML;

    # * default integer arithmetic and comparison operators 
    iadd = ARITH { oper=> ADD,      overflow=>TRUE, kind=>INT 31 };
    isub = ARITH { oper=> SUBTRACT, overflow=>TRUE, kind=>INT 31 };
    imul = ARITH { oper=> MULTIPLY, overflow=>TRUE, kind=>INT 31 };
    idiv = ARITH { oper=> DIVIDE,   overflow=>TRUE, kind=>INT 31 };
    ineg = ARITH { oper=> NEGATE,   overflow=>TRUE, kind=>INT 31 };

    ieql = CMP { oper=>EQL, kind=>INT 31 };
    ineq = CMP { oper=>NEQ, kind=>INT 31 };
    igt = CMP { oper=> GT, kind=>INT 31 };
    ilt = CMP { oper=> LT, kind=>INT 31 };
    ige = CMP { oper=> GE, kind=>INT 31 };
    ile = CMP { oper=> LE, kind=>INT 31 };

    # * default floating-point equality operator 
    feqld = CMP { oper=>EQL, kind=>FLOAT 64 };

    # ************************************************************************
    #               OTHER PRIMOP-RELATED UTILITY FUNCTIONS                   *
    # ************************************************************************

    fun pr_numkind (INT 31)      => "";
	pr_numkind (INT bits)    => int::to_string bits;
	pr_numkind (UINT 32)     => "u";
	pr_numkind (UINT bits)   => "u" + int::to_string bits;
	pr_numkind (FLOAT 64)    => "f";
	pr_numkind (FLOAT  bits) => "f" + int::to_string bits;
    end;


    cvt_param =   int::to_string;

    fun cvt_params (from, to)
	=
	cat [cvt_param from, "_", cvt_param to];

    fun pr_primop (ARITH { oper, overflow, kind } )
	    =>
	    cat [    case oper    
			    ADD      => "+";
			    SUBTRACT => "-";
			    MULTIPLY => "*";
			    DIVIDE   => "/";
			    NEGATE   => "-_";
			    FSQRT    => "fsqrt";
			    FSIN     => "fsin";
			    FCOS     => "fcos";
			    FTAN     => "ftan";
			    LSHIFT   => "lshift";
			    RSHIFT   => "rshift";
			    RSHIFTL  => "rshift_l";
			    BITWISEAND     => "bitwise_and";
			    BITWISEOR      => "bitwise_or";
			    BITWISEXOR     => "bitwise_xor";
			    BITWISENOT     => "bitwise_not";
			    ABS      => "abs";
			    REM      => "rem";
			    DIV      => "div";
			    MOD      => "mod";
			esac,

			if overflow  ""; else "n";fi,

			pr_numkind kind
		  ];

       pr_primop (INLLSHIFT kind) =>  "inllshift"  + pr_numkind kind;
       pr_primop (INLRSHIFT kind) =>  "inlrshift"  + pr_numkind kind;
       pr_primop (INLRSHIFTL kind) => "inlrshiftl" + pr_numkind kind;

       pr_primop (CMP { oper, kind } )
	   =>
	   ((case oper   
	       GT  => ">";
	       LT  => "<";
	       GE  => ">=";
	       LE  => "<=";
	       GEU => ">=U";
	       GTU => ">U";
	       LEU => "<=U";
	       LTU => "<U";
	       EQL => "=";
	       NEQ => "!=";
	   esac)
	   + pr_numkind kind);

       pr_primop (TEST arg) => "test_" + cvt_params arg;
       pr_primop (TESTU arg) => "test_" + cvt_params arg;
       pr_primop (EXTEND arg) => "extend" + cvt_params arg;
       pr_primop (TRUNC arg) => "trunc" + cvt_params arg;
       pr_primop (COPY arg) => "copy" + cvt_params arg;

       pr_primop (TEST_INF i) => "test_inf_" + cvt_param i;
       pr_primop (TRUNC_INF i) => "trunc_inf_" + cvt_param i;
       pr_primop (EXTEND_INF i) => cat ["extend_", cvt_param i, "_inf"];
       pr_primop (COPY_INF i) =>  cat ["copy_", cvt_param i, "_inf"];

       pr_primop (ROUND { floor=>TRUE, fromkind=>FLOAT 64, tokind=>INT 31 } ) => "floor";
       pr_primop (ROUND { floor=>FALSE, fromkind=>FLOAT 64, tokind=>INT 31 } ) => "round";
       pr_primop (ROUND { floor, fromkind, tokind } ) =>
	  ((if floor  "floor"; else "round";fi)
	   + pr_numkind fromkind + "_" + pr_numkind tokind);

       pr_primop (REAL { fromkind=>INT 31, tokind=>FLOAT 64 } ) => "real";
       pr_primop (REAL { fromkind, tokind } ) =>
	  ("real" + pr_numkind fromkind + "_" + pr_numkind tokind);

       pr_primop (NUMSUBSCRIPT { kind, checked, immutable } ) => 
	  ("numsubscript" + pr_numkind kind
	   + (if checked  "c"; else "";fi)
	   + (if immutable  "v"; else "";fi));

       pr_primop (NUMUPDATE { kind, checked } ) => 
	  ("numupdate" + pr_numkind kind + (if checked   "c"; else "";fi));

       pr_primop DEREF => "!";
       pr_primop ASSIGN => ":=";
       pr_primop UNBOXEDASSIGN => "(unboxed):=";
       pr_primop BOXED => "boxed";
       pr_primop UNBOXED => "unboxed";
       pr_primop CAST => "cast";
       pr_primop WCAST => "wcast";
       pr_primop PTREQL => "ptreql";
       pr_primop PTRNEQ => "ptrneq";  
       pr_primop POLYEQL => "polyeql";
       pr_primop POLYNEQ => "polyneq";  
       pr_primop GETHANDLER => "gethandler";
       pr_primop MAKEREF => "makeref";
       pr_primop SETHANDLER => "sethandler";
       pr_primop LENGTH => "length";
       pr_primop CHUNKLENGTH => "chunklength";
       pr_primop CALLCC => "callcc";
       pr_primop CAPTURE => "capture";
       pr_primop ISOLATE => "isolate";
       pr_primop THROW => "throw";
       pr_primop SUBSCRIPT => "subscript";
       pr_primop UNBOXED_SET => "unboxed_set";
       pr_primop BOXED_SET => "boxedupdate";
       pr_primop UPDATE => "update";
       pr_primop INLSUBSCRIPT => "inlsubscript";
       pr_primop INLSUBSCRIPTV => "inlsubscriptv";
       pr_primop INLUPDATE => "inlupdate";
       pr_primop INLMKARRAY => "inlmkarray";
       pr_primop SUBSCRIPTV => "subscriptv";
       pr_primop GETRUNVEC => "getrunvec";
       pr_primop GET_CURRENT_THREAD_REGISTER => "get_current_thread_register";
       pr_primop SET_CURRENT_THREAD_REGISTER => "set_current_thread_register";
       pr_primop GETPSEUDO => "getpseudo";
       pr_primop SETPSEUDO => "setpseudo";
       pr_primop SETMARK => "setmark";
       pr_primop DISPOSE => "dispose";
       pr_primop GETTAG => "gettag";
       pr_primop MAKE_SPECIAL => "make_special";
       pr_primop SETSPECIAL => "setspecial";
       pr_primop GETSPECIAL => "getspecial";
       pr_primop USELVAR => "uselvar";
       pr_primop DEFLVAR => "deflvar";
       pr_primop (INLMIN nk) => cat ["inlmin(", pr_numkind nk, ")"];
       pr_primop (INLMAX nk) => cat ["inlmax(", pr_numkind nk, ")"];
       pr_primop (INLABS nk) => cat ["inlabs(", pr_numkind nk, ")"];
       pr_primop INLNOT => "inlnot";
       pr_primop INLCOMPOSE => "inlcompose";
       pr_primop INLBEFORE => "inlbefore";
       pr_primop INLIGNORE => "inlignore";
       pr_primop (INLINE_ARRAY) => "inl_array";
       pr_primop (INLINE_VECTOR) => "inl_vector";
       pr_primop (INLINE_MONOARRAY kind) =>
	  cat ["inl_monoarray(", pr_numkind kind, ")"];
       pr_primop (INLINE_MONOVECTOR kind) =>
	  cat ["inl_monovector(", pr_numkind kind, ")"];
       pr_primop (MARKEXN) => "markexn";

       pr_primop (MKETAG) => "mketag";
       pr_primop (WRAP) => "wrap";
       pr_primop (UNWRAP) => "unwrap";
    #  Primops to support new rw_vector representations 
       pr_primop (NEW_ARRAY0) => "newarray0";
       pr_primop (GET_SEQ_DATA) => "getseqdata";
       pr_primop (SUBSCRIPT_REC) => "subscriptrec";
       pr_primop (SUBSCRIPT_RAW64) => "subscriptraw64";
    #  Primops to support new experimental C FFI. 
       pr_primop (RAW_LOAD nk) => cat ["raw_load(", pr_numkind nk, ")"];
       pr_primop (RAW_STORE nk) => cat ["raw_store(", pr_numkind nk, ")"];
       pr_primop (RAW_CCALL _) => "raw_ccall";
       pr_primop (RAW_RECORD { fblock } ) => 
	  cat ["raw_", if fblock  "fblock"; else "iblock";fi, "_record"];

       pr_primop INLIDENTITY => "inlidentity";
       pr_primop CVT64 => "cvt64"; end;

    /* should return more than just a boolean:
     * { Store, Fate }-{ read, write } */
    effect =
     fn ARITH { overflow, ... } => overflow;
       (INLRSHIFT _ | INLRSHIFTL _) => FALSE;
       CMP _ => FALSE;
       (EXTEND _ | TRUNC _ | COPY _) => FALSE;
       (PTREQL | PTRNEQ | POLYEQL | POLYNEQ) => FALSE;
       (BOXED | UNBOXED) => FALSE;
       (LENGTH | CHUNKLENGTH) => FALSE;
       (CAST | WCAST) => FALSE;
       (INLMIN _ | INLMAX _ | INLNOT | INLCOMPOSE | INLIGNORE) => FALSE;
       (WRAP | UNWRAP) => FALSE;
       INLIDENTITY => FALSE;
       CVT64 => FALSE;
       _ => TRUE; end ;

    may_raise =
      fn ARITH { overflow, ... } => overflow;
	ROUND _ => TRUE;
	INLMKARRAY => TRUE;
	INLSUBSCRIPT => TRUE;
	INLUPDATE => TRUE;
	INLSUBSCRIPTV => TRUE;
	NUMSUBSCRIPT { checked, ... } => checked;
	NUMUPDATE { checked, ... } => checked;
	_ => FALSE; end ;

};	#  package highcode_primitive_op 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
