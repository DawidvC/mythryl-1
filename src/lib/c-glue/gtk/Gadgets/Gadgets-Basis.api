# 
#  Interface to the Gtk Gadgets layer
#
#  This layer provides some notational conveniences for writing Gtk apps
#  in SML.
#  
#  Please see the documentation for details.

local use Gtk in
api GTK_GADGETS_BASIS =
api

   include Lib7_Ffilib_Basis

   #  A message is just a function applicable to some gadget 
   type message( A_gadget )  = A_gadget -> Void

   # A maker is a constructor function taking an initial argument,
   # creates an gadget, sends it some initial messages, and returns
   # the gadget

   type maker( A_gadget, A_init )
       =
       A_init
       ->
       List( message( A_gadget ) )
       ->
       A_gadget

   # An alternative form of maker without any initial arguments 
   # to the constructor

   type maker' A_gadget
       =
        List( message( A_gadget ) )
       ->
       A_gadget

   # A signalHandler is a message constructor taking a
   # signal callback as argument.

   type signalHandler A_gadget
       =
       (A_gadget -> Void)
       ->
       A_gadget message

   # An eventHandler is a message constructor
   # taking an event callback as argument.

   type eventHandler A_gadget
       =
       (A_gadget * GdkEvent::t -> Bool)
       ->
       message( A_gadget )

   #  An typed event handler explicitly handles one kind of events 
   type typedEventHandler( A_gadget, A_event )
       = 
       (A_gadget * A_event -> Bool)
       ->
       message( A_gadget )
   
   #  Message sending. 
   my <~   : X * (X -> Y) -> Y
   my <-   : X * List( message( X ) ) -> X
   my Comb:  List( message( X ) ) -> message( X )
   my every:  (X -> message( Y )) -> List( X ) -> message( Y )
   
   #  Object creation and send initial messages 
   my Gadget:   (A_init -> A_gadget) -> maker( A_gadget, A_init )
   my Gadget'  : (Void -> A_gadget) -> maker'( A_gadget )

   #  Combining messages 
   my Listify:   (X -> Y -> message( Z )) -> (X -> List( Y ) -> message( Z ))
   my Listify' : (X -> message( Y )) -> (List( X ) -> message( Y ))

   #  signal/event callback registration 
   my on:    String -> signalHandler( GtkObject( X ) )
   my when:  String -> eventHandler( GtkObject( X ) )
end 
end
