## make7-defaults.pkg
## author: Matthias Blume (blume@cs.princeton.edu)

# Compiled by:
#     src/app/make7/util/Make7_Utilities.make6

# make7 parameters that are configurable via shell-dictionary variables.

package make7_defaults {

    stipulate

	priority  = [10, 2];
	obscurity = 2;
	prefix    = "make7";

	registry
            =
            control_index::make						# control_index	is from   src/lib/controls/control-index.pkg
		{ help => "make7" };

									my _ =
        basic_control::note_subindex
            (prefix, registry, priority);				# basic_control		is from   src/lib/compiler/front/basics/main/basiccontrol.pkg

	convert_boolean
            =
            control_utilities::convert::bool;				# control_utilities	is from   src/lib/controls/control-util.pkg

	int_cvt
            =
            control_utilities::convert::int;

	st_cvt =			#  "st" == "string thunk "?
	    { type_name   =>  "String",
	      from_string =>  fn s =  THE .{ s; },
	      to_string   =>  fn th =  th ()
            };

	sot_cvt =			#  "sot" == string option thunk 
	    { type_name   =>  "String",
	      from_string =>  fn s =  THE .{ THE s; },
	      to_string   =>  fn th =  case (th ())
                                         
				            THE s =>  s;
				            NULL  =>  "(not set)";
                                       esac
            };

	nextpri
            =
            REF 0;


    herein
	fun make_control
                ( to_from_string_fns,
                  name,
                  help,
                  initial_value
                )
            =
            {   state =  REF  initial_value;
		pri   =  *nextpri;

		control
                    =
                    control::control						# control	is from   src/lib/controls/control.pkg
                        {
			  obscurity,
                          name,
			  help,
			  pri     =>  [pri],
			  control =>  state
                        };
	    
		nextpri :=  pri + 1;

		control_index::note_control
		    registry
		    { control
                          =>
                          control::string_control
                              to_from_string_fns
                              control,

		      dictionary_name
                          =>
                          THE (
                              control_utilities::dictionary_name::to_upper
                                  "CM_"
                                  name
                          )
                    };
									# control_utilities	is from   src/lib/controls/control-util.pkg

		{   set   =>   fn x =  state := x,
		    get   =>   .{ *state; }
                };
	    };

	fun new_string_control							# XXX BUGGO DELTEME this is just fun new (above) with more debug printouts
                ( to_from_string_fns,
                  name,
                  help,
                  initial_value
                )
            =
            {   state =  REF  initial_value;
		pri   =  *nextpri;

		control
                    =
                    control::control					# control	is from   src/lib/controls/control.pkg
                        {
			  obscurity,
                          name,
			  help,
			  pri     =>  [pri],
			  control =>  state
                        };
	    
		nextpri :=  pri + 1;

		control_index::note_control
		    registry
		    { control
                          =>
                          control::string_control
                              to_from_string_fns
                              control,

		      dictionary_name
                          =>
                          THE (
                              control_utilities::dictionary_name::to_upper
                                  "CM_"
                                  name
                          )
                    };
									# control_utilities	is from   src/lib/controls/control-util.pkg

		{   set   =>   fn x =  state := x,
		    get   =>   .{ *state; }
                };
	    };

        verbose    =   make_control (convert_boolean, "verbose", "make7 chattiness", TRUE);
	debug      =   make_control (convert_boolean, "debug",   "make7 debug mode", TRUE);
	keep_going =   make_control (convert_boolean, "keep_going",
			      "whether make7 presses on in face of errors",
			      FALSE);


	parse_caching
            =
	    make_control (int_cvt, "parse_caching", "limit on parse trees cached", 100);


	warn_on_obsolete_syntax
            =
            make_control (convert_boolean, "warn_on_obsolete_syntax",
				 "whether make7 accepts old-style syntax",
				 TRUE);
	conserve_memory
            =
	    make_control (convert_boolean, "conserve_memory", "make7 memory stinginess", FALSE);

	generate_index
            =
            make_control (convert_boolean, "generate_index",
				  "whether make7 generates library indices",
				  TRUE);

	make_compile_logs
            =
            make_control (convert_boolean, "make_compile_logs",
				  "whether make7 generates foo.COMPILE_LOG files",
				  TRUE);

	#  Controls for make tool 
	package make_tool
        =
        package {
	    stipulate
		priority = [1];
		prefix = "make_tool";
		obscurity = 2;
		m_index = control_index::make { help => "make7 Make Tool" };

		                                                                     my _ = 
                control_index::note_subindex				# control_index	is from   src/lib/controls/control-index.pkg
                    registry
                    { prefix    =>  THE prefix,
		      pri       =>  priority,
		      obscurity =>  0,
		      reg       =>  m_index
                    };

		nextpri = REF 0;

		fun make (c, n, h, d)
                    =
		    {   r =   REF d;
			p =   *nextpri;

			control
                            =
                            control::control {					# control		is from   src/lib/controls/control.pkg

                                name => n,
                                pri  => [p],

				obscurity,

				help    => h,
                                control => r
                            };

			nextpri := p + 1;

			control_index::note_control
                            m_index
			    { control
                                  =>
                                  control::string_control
                                      c
                                      control,

			      dictionary_name
                                  =>
                                  THE (control_utilities::dictionary_name::to_upper
				           "CM_MAKE_"
                                           n
                                      )						# control_utilities	is from   src/lib/controls/control-util.pkg
                            };

			{   set   =>   fn x =  r := x,
			    get   =>   .{ *r; }
                        };
		    };
	    herein
		command
                    =
		    make (control_utilities::convert::string, "command",
			 "the shell-command", "make");

		pass_bindir
                    =
		    make (control_utilities::convert::bool, "pass_bindir",
			 "whether to pass LIB7_BIN_DIR to command", TRUE);
	    end;
	};
    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 1999 by Lucent Technologies, Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
