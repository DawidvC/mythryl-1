## sparc-jumps.pkg --- information to resolve jumps. 

# Compiled by:
#     src/lib/compiler/lower/make7/sparc.make6


# We get invoked from:
#
#     src/lib/compiler/codegen/sun/sparc-codegen.pkg

generic package sparc_span_dependent_jumps_g (

    package instruction_set: Instruction_Set_Sparc;	# Instruction_Set_Sparc	is from   src/lib/compiler/lower/sun/instruction/instruction-set-sparc.api

    package shuffle
	:
	Sparcshuffle					# Sparcshuffle		is from   src/lib/compiler/lower/sun/instruction/sparc-shuffle.api
	where instruction_set == instruction_set;

    package codetree_eval
	:
	Codetree_Eval					# Codetree_Eval		is from   src/lib/compiler/lower/codetree/codetree-eval.api
	where codetree == instruction_set::codetree;
)

: (weak) Span_Dependent_Jumps				# Span_Dependent_Jumps	is from   src/lib/compiler/lower/span/span-dependent-jumps.api

{
    package instruction_set =  instruction_set;
    package cells           =  instruction_set::cells;

    package i = instruction_set;
    package c = cells;
    package const = i::constant;
    package cb= cells_basis;				# cells_basis		is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    fun error msg
        =
        lowcode_error_message::error("sparc_span_dependent_jumps_g", msg);

    branch_delayed_arch = TRUE;


    fun is_sdi (i::NOTE { instruction, ... } ) => is_sdi instruction;
	is_sdi (i::LIVE _)		  => TRUE;
	is_sdi (i::DEAD _)		  => TRUE;
	is_sdi (i::COPY _)		  => TRUE;
	is_sdi (i::BASE_INSTRUCTION instruction)
            =>
            {
		fun oper (i::IMMED n) => FALSE;
		       oper (i::REG _) => FALSE;
		       oper (i::HI _) => FALSE;
		       oper (i::LO _) => FALSE;
		       oper (i::LAB _) => TRUE;
                end;
		case instruction

		   i::ARITH { i, ... } => oper i;
		   i::SHIFT { i, ... } => oper i;
		   i::LOAD { i, ... } => oper i;
		   i::STORE { i, ... } => oper i;
		   i::FLOAD { i, ... } => oper i;
		   i::FSTORE { i, ... } => oper i;
		   i::JMPL { i, ... } => oper i;
		   i::JMP { i, ... } => oper i;
		   i::MOVICC { i, ... } => oper i;
		   i::MOVFCC { i, ... } => oper i;
		   i::MOVR { i, ... } => oper i;
		   i::CALL _ => TRUE;
		   i::BICC _ => TRUE;
		   i::FBFCC _ => TRUE;
		   i::BR _ => TRUE;
		   i::BP _ => TRUE;
		   i::TICC { i, ... } => oper i;
		   i::WRY { i, ... } => oper i;
		   i::SAVE { i, ... } => oper i;
		   i::RESTORE { i, ... } => oper i;
		   #  The following is only TRUE of Version 8 
		   i::FPOP1 { a=>(i::FMOVD | i::FNEGD | i::FABSD), ... } => TRUE;
		   _ => FALSE;
		esac;
	    };
    end;

    fun min_size (i::NOTE { instruction, ... } ) => min_size instruction;
	min_size (i::LIVE _)  => 0;
	min_size (i::DEAD _)  => 0;
	min_size (i::COPY _) => 0;		#  ? 
	min_size (i::BASE_INSTRUCTION instruction)
	    => 
	    case instruction
              
		(i::BICC  { nop=>TRUE, ... } ) => 8;
		(i::FBFCC { nop=>TRUE, ... } ) => 8;
		(i::JMP   { nop=>TRUE, ... } ) => 8;
		(i::JMPL  { nop=>TRUE, ... } ) => 8;
		(i::CALL  { nop=>TRUE, ... } ) => 8;
		(i::BR    { nop=>TRUE, ... } ) => 8;
		(i::BP    { nop=>TRUE, ... } ) => 8;
		(i::RET   { nop=>TRUE, ... } ) => 8;
		(i::FCMP  { nop=>TRUE, ... } ) => 8;
		(i::FPOP1 { a=>(i::FMOVD | i::FNEGD | i::FABSD), ... } ) => 8;
		 _          => 4;
	    esac;
    end;

    fun max_size (i::BASE_INSTRUCTION (i::FPOP1 { a=>(i::FMOVD | i::FNEGD | i::FABSD), ... } )) => 8;
        max_size (i::NOTE { instruction, ... } ) => max_size instruction;
        max_size _		   => 4;
    end;

    fun immed13 n =      -4096 <= n  and  n < 4096;
    fun immed22 n =  -0x200000 <= n  and  n < 0x1fffff;
    fun immed16 n =    -0x8000 <= n  and  n < 0x8000;
    fun immed19 n =   -0x40000 <= n  and  n < 0x40000;
    fun immed30 n = -0x4000000 <= n  and  n < 0x3ffffff;

    fun instr_length ([], n)
            =>
            n;

	instr_length (i::BASE_INSTRUCTION (i::FPOP1 { a=>(i::FMOVD | i::FNEGD | i::FABSD), ... } ) ! is, n)
	    =>
	    instr_length (is, n+8);

	instr_length(_ ! is, n)
            =>
            instr_length (is, n+4);
    end;

    fun sdi_size (i::LIVE _, _, _) =>   0;
	sdi_size (i::DEAD _, _, _) =>   0;

	sdi_size (i::NOTE { instruction, ... }, labmap, loc)
            =>
            sdi_size (instruction, labmap, loc);

	sdi_size (i::COPY { kind => cb::REGISTER, src, dst, tmp, ... }, _, _)
            =>
	    4 * length (shuffle::shuffle { tmp, dst, src } );

	sdi_size (i::COPY { kind => cb::FLOAT_REGISTER, src, dst, tmp, ... }, _, _)
            =>
            {   instrs = shuffle::shufflefp { src, dst, tmp };
		instr_length (instrs, 0);
	    };

	sdi_size (instruction as i::BASE_INSTRUCTION i, lab_map, loc)
            =>
            {   fun oper (i::IMMED n, _) => 4;
		    oper (i::REG _, _  ) => 4;
		    oper (i::HI _, _   ) => 4;
		    oper (i::LO _, _   ) => 4;
		    oper (i::LAB lambda_expression, hi) => if (immed13 (codetree_eval::value_of lambda_expression) ) 4; else hi;fi;
                end;

		fun displacement lab
                    =
                    ((lab_map lab) - loc) / 4;

		fun branch22 lab =   immed22 (displacement lab)   ??  4  :: 16;
		fun branch19 lab =   immed19 (displacement lab)   ??  4  :: 16;
		fun branch16 lab =   immed16 (displacement lab)   ??  4  :: 16;
		fun call     lab =   immed30 (displacement lab)   ??  4  :: 20;

		fun delay_slot FALSE => 0;
		    delay_slot TRUE  => 4;
                end;

		case i 
		  
		    i::ARITH { a=>i::OR, r, i, ... }
			=> 
			if (cells_basis::cell_id r == 0)   oper (i,  8);
                        else                               oper (i, 12);
                        fi;

		    i::ARITH { i, ... } => oper (i, 12);
		    i::SHIFT { i, ... } => oper (i, 12);
		    i::LOAD { i, ... } => oper (i, 12);
		    i::STORE { i, ... } => oper (i, 12);
		    i::FLOAD { i, ... } => oper (i, 12);
		    i::FSTORE { i, ... } => oper (i, 12);
		    i::TICC { i, ... } => oper (i, 12);
		    i::SAVE { i, ... } => oper (i, 12);
		    i::RESTORE { i, ... } => oper (i, 12);
		    i::MOVICC { i, ... } => oper (i, 12);
		    i::MOVFCC { i, ... } => oper (i, 12);
		    i::MOVR { i, ... } => oper (i, 12);
		    i::JMPL { i, nop, ... } => oper (i, 12) + delay_slot nop;
		    i::JMP { i, nop, ... } => oper (i, 12) + delay_slot nop;
		    i::BICC { label, nop, ... } => branch22 label + delay_slot nop;
		    i::FBFCC { label, nop, ... } => branch22 label + delay_slot nop;
		    i::BR { label, nop, ... } => branch16 label + delay_slot nop;
		    i::BP { label, nop, ... } => branch19 label + delay_slot nop;
		    i::CALL { label, ... } => call label;
		    i::WRY { i, ... } => oper (i, 12);
		    i::FPOP1 { a=>(i::FMOVD | i::FNEGD | i::FABSD), ... } => 8;	    
		    _ => error "sdiSize";
                esac;
	    };

	sdi_size _
            =>
            error "sdiSize";
    end;

    fun split22_10 n
	=
	{   w = unt32::from_int n;

	    { hi => unt32::to_int (unt32::(>>) (w, 0u10)),
	      lo => unt32::to_int (unt32::bitwise_and (w, 0ux3ff))
	    };
	};

    fun split (i::LAB lambda_expression) => split22_10 (codetree_eval::value_of lambda_expression);
        split _ => error "split";
    end;


    # Expand an immediate constant
    # into two instructions:
    #
    fun expand_imm (immed, instruction)
        = 
	{   my { lo, hi } = split immed;

	    [  i::sethi { i=>hi, d=>c::asm_tmp_r },
	       i::arith { a=>i::OR, r=>c::asm_tmp_r, i=>i::IMMED lo, d=>c::asm_tmp_r },
	       i::BASE_INSTRUCTION instruction
	    ];
	};


    # Expand a span dependent instruction 
    #
    fun expand (i::NOTE { instruction, ... }, size, pos)
            =>
            expand (instruction, size, pos);

	expand (i::LIVE _, _, _) => [];
	expand (i::DEAD _, _, _) => [];

	expand (i::COPY { kind => cb::REGISTER, src, tmp, dst, ... }, _, _)
	    => 
	    shuffle::shuffle { src, dst, tmp };

	expand (i::COPY { kind => cb::FLOAT_REGISTER, src, tmp, dst, ... }, _, _)
	    => 
	    shuffle::shufflefp { src, dst, tmp };

	expand (instruction as (i::BASE_INSTRUCTION i), size, pos)
	    => 
	    case (i, size) 
	      
		(_, 4) => [instruction];

		(i::ARITH { a=>i::OR, r, i, d }, 8)
                    =>
		    if (cells_basis::cell_id r == 0 )

		        my { lo, hi } = split i;

		        [ i::sethi { i=>hi, d=>c::asm_tmp_r },
			  i::arith { a=>i::OR, r=>c::asm_tmp_r, i=>i::IMMED lo, d }
		        ];
		    else
			 error "ARITH";
		    fi;

		(i::ARITH { a, r, i, d }, 12) 
                   =>
		   expand_imm (i, i::ARITH { a, r, i=>i::REG c::asm_tmp_r, d } );

		(i::SHIFT { s, r, i, d }, 12) 
                   =>
		   expand_imm (i, i::SHIFT { s, r, i=>i::REG c::asm_tmp_r, d } );

		(i::SAVE { r, i, d }, 12) 
                   =>
		   expand_imm (i, i::SAVE { r, i=>i::REG c::asm_tmp_r, d } );

		(i::RESTORE { r, i, d }, 12) 
                   =>
		   expand_imm (i, i::RESTORE { r, i=>i::REG c::asm_tmp_r, d } );

		(i::LOAD { l, r, i, d, mem }, 12)
                   =>  
		   expand_imm (i, i::LOAD { l, r, i=>i::REG c::asm_tmp_r, d, mem } );

		(i::STORE { s, r, i, d, mem }, 12) 
                   =>
		   expand_imm (i, i::STORE { s, r, i=>i::REG c::asm_tmp_r, d, mem } );

		(i::FLOAD { l, r, i, d, mem }, 12) 
                   =>
		   expand_imm (i, i::FLOAD { l, r, i=>i::REG c::asm_tmp_r, d, mem } );

		(i::FSTORE { s, r, i, d, mem }, 12) 
                   =>
		   expand_imm (i, i::FSTORE { s, r, i=>i::REG c::asm_tmp_r, d, mem } );

		(i::MOVICC { b, i, d }, 12) 
                   =>
		   expand_imm (i, i::MOVICC { b, i=>i::REG c::asm_tmp_r, d } );

		(i::MOVFCC { b, i, d }, 12) 
                   =>
		   expand_imm (i, i::MOVFCC { b, i=>i::REG c::asm_tmp_r, d } );

		(i::MOVR { rcond, r, i, d }, 12) 
                   =>
		   expand_imm (i, i::MOVR { rcond, r, i=>i::REG c::asm_tmp_r, d } );

		(i::JMPL _, 8) => [instruction];
		(i::JMP _, 8) => [instruction];
		(i::BICC _, 8) => [instruction];
		(i::FBFCC _, 8) => [instruction];
		(i::BR _, 8) => [instruction];
		(i::BP _, 8) => [instruction];

		(i::JMPL { r, i, d, defs, uses, cuts_to, nop, mem }, (12 | 16))
                   => 
		   expand_imm (i, i::JMPL { r, i=>i::REG c::asm_tmp_r, d, defs, uses,
				      cuts_to, nop, mem } );

		(i::JMP { r, i, labs, nop }, (12 | 16))
                   => 
		   expand_imm (i, i::JMP { r, i=>i::REG c::asm_tmp_r, labs, nop } );

		(i::TICC { t, cc, r, i }, 12)
                   =>
		   expand_imm (i, i::TICC { t, cc, r, i=>i::REG c::asm_tmp_r } );

		    # The sparc uses 22bits signed extended displacement offsets
		    # Let's hope it's enough

		(i::BICC  { b, a, label, nop }, _) => error "BICC";  
		(i::FBFCC { b, a, label, nop }, _) => error "FBFCC"; 
		(i::FPOP1 { a, r, d }, _)
                    =>
                    {   fun next_reg_num c = c::fpreg (cells_basis::register_num c + 1);

			# Note: if r==d then the move is not required.
			# This needs to be factored into the size before it
			# can be done here.

			fun do_double (oper)
                            = 
			    [   i::fpop1 { a=>oper, r, d },
			        i::fpop1 { a=>i::FMOVS, r=>next_reg_num r, d=>next_reg_num d }
                            ];

			case  a 
			  
			    i::FMOVD =>   do_double (i::FMOVS);
			    i::FNEGD =>   do_double (i::FNEGS);
			    i::FABSD =>   do_double (i::FABSS);

			    _        =>   error "expand: FPop1";
                        esac;
		   };

		(i::WRY { r, i }, 12)
                    =>
                    expand_imm (i, i::WRY { r, i=>i::REG c::asm_tmp_r } );

		 _ => error "expand";
	    esac;

	expand _ => error "expand";
    end;
};



## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
