
# This module abstracts out the process of generating a polytypic function,
# from a set of enum definitions and transformation rules.

api POLY_GEN =
api
   package raw_syntax:  MDL_AST

   enum hook =
      HOOK of 
      { name:   String,      #  name of function 
        factor: Bool,        #  factor rules by constructor? 
        args:   List( String ), #  function arguments 
        ret:    String,      #  return argument name 
                 #  what is the Void transform of this function 
        unit:   raw_syntax::expression -> raw_syntax::expression, 
                 #  how to generate code for a constructor 
        gen:    (raw_syntax::Some_Type * raw_syntax::expression -> raw_syntax::expression) * raw_syntax::consbind -> raw_syntax::expression
      }  

   #  translate a set of rules into an declaration 
   my gen:  hook ->              #  hook 
             (raw_syntax::id -> Bool) ->  #  is it a non-terminal type id? 
                                  #  rules for each enum 
              List( raw_syntax::datatypebind * List( raw_syntax::clause ) ) ->
             raw_syntax::decl
end
