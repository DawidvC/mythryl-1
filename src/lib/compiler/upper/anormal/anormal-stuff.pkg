## anormal-stuff.pkg 

# Compiled by:
#     src/lib/compiler/core.make6

package highcodeint_map
    =
    int_binary_map;			# int_binary_map	is from   src/lib/src/int-binary-map.pkg

api Anormal_Utilities {

    rk_tuple:  anormal::Record_Kind;

    mketag:  anormal::Highcode_Type_Constructor -> anormal::Primitive_Operation;
    wrap:    anormal::Highcode_Type_Constructor -> anormal::Primitive_Operation;
    unwrap:  anormal::Highcode_Type_Constructor -> anormal::Primitive_Operation;

    wrap_primop
	:
        ( anormal::Highcode_Type_Constructor,
	  List( anormal::Value ),
          anormal::Highcode_Variable,
          anormal::Anormal_Expression
        )
	->
        anormal::Anormal_Expression;


    unwrap_primop
	:
	( anormal::Highcode_Type_Constructor,
	  List( anormal::Value ),
	  anormal::Highcode_Variable,
	  anormal::Anormal_Expression
        )
	->
        anormal::Anormal_Expression;

    get_etag_type_constructor:     anormal::Primitive_Operation -> anormal::Highcode_Type_Constructor;
    get_wrap_type_constructor:     anormal::Primitive_Operation -> anormal::Highcode_Type_Constructor;
    get_un_wrap_type_constructor:  anormal::Primitive_Operation -> anormal::Highcode_Type_Constructor;


    # Copy a Anormal_Expression with alpha renaming.
    # Free variables remain unchanged except for the renaming specified
    # in the first (types) and second (values) argument */

    copy:
	List( (anormal::Highcode_Variable, anormal::Highcode_Type_Constructor) )
        ->
        highcodeint_map::Map( anormal::Highcode_Variable )
        ->
        anormal::Anormal_Expression
        ->
        anormal::Anormal_Expression;



    copyfdec
	:
	anormal::Function_Declaration
	->
	anormal::Function_Declaration;



    freevars
	:
	anormal::Anormal_Expression
	->
        int_red_black_set::Set;



    dcon_eq
	:
        ( anormal::Dcon,
          anormal::Dcon
        )
        ->
        Bool;

};	# api Anormal_Utilities


package anormal_stuff

: (weak) Anormal_Utilities		# Anormal_Utilities	is from   src/lib/compiler/upper/anormal/anormal-stuff.pkg

{
    stipulate
	package em =  error_message;		# error_message			is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
	package lt =  highcode;			# highcode			is from   src/lib/compiler/upper/highcode/highcode.pkg
	package po =  highcode_primitive_op;	# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg
	package da =  var_home;			# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package a  =  var_home;
	package m  =  highcodeint_map;		# highcodeint_map		is from   src/lib/compiler/upper/anormal/anormal-stuff.pkg
	package o  =  null_or;			# null_or			is from   src/lib/std/src/null-or.pkg
	package s  =  int_red_black_set;	# int_red_black_set		is from   src/lib/src/int-red-black-set.pkg
	package f  =  anormal;			# anormal			is from   src/lib/compiler/upper/anormal/anormal.pkg

	include anormal;

    herein 

	fun bug msg
            =
            em::impossible("anormal_stuff: " + msg);


	my rk_tuple:  Record_Kind
            =
            RK_TUPLE (lt::rfc_tmp);

	#  A set of useful primops used by highcode 
	tv0 = lt::ltc_tv 0;
	btv0 = lt::ltc_tyc (lt::tcc_box (lt::tcc_tv 0));

	etag_lty
            = 
	    lt::ltc_ppoly ([lt::tkc_mono], 
			   lt::ltc_arrow (lt::ffc_rrhighcode, [lt::ltc_string], 
					 	         [lt::ltc_etag tv0]));
	fun wrap_lty tc
            =
	    lt::ltc_tyc (lt::tcc_arrow (lt::ffc_fixed, [tc], [lt::tcc_wrap tc]));

	fun unwrap_lty tc
            =
            lt::ltc_tyc (lt::tcc_arrow (lt::ffc_fixed, [lt::tcc_wrap tc], [tc]));

	fun mketag tc =   (NULL, po::MKETAG, etag_lty, [tc]);
	fun wrap   tc =   (NULL, po::WRAP, wrap_lty tc, []);
	fun unwrap tc =   (NULL, po::UNWRAP, unwrap_lty tc, []);

	fun wrap_primop   (tc, vs, v, e) = PRIMOP (wrap tc, vs, v, e);
	fun unwrap_primop (tc, vs, v, e) = PRIMOP (unwrap tc, vs, v, e);

	# The corresponding utility functions
        # to recover the Highcode_Type_Constructor:
	# 
	fun get_etag_type_constructor (_, _, lt, [tc])
                =>
                tc;

	    get_etag_type_constructor (_, _, lt, [])
		=> 
		{   nt = lt::ltd_tyc (#2 (lt::ltd_parrow lt));

		    if (lt::tcp_app nt)
		         
			 case (#2 (lt::tcd_app nt))
			     [x] =>  x;
			     _   =>  bug "unexpected case 1 in getEtagTypeConstructor";
                         esac;
		    else
                         lt::tcc_void;
                    fi;
		};

	    get_etag_type_constructor _
                =>
                bug "unexpected case 2 in getEtagTypeConstructor";
        end;

	fun get_wrap_type_constructor (_, _, lt, []) => lt::ltd_tyc(#1 (lt::ltd_parrow lt));
	    get_wrap_type_constructor _ => bug "unexpected case in getWrapTypeConstructor";
        end;

	fun get_un_wrap_type_constructor (_, _, lt, []) => lt::ltd_tyc(#2 (lt::ltd_parrow lt));
	    get_un_wrap_type_constructor _ => bug "unexpected case in get_un_wrap_type_constructor";
        end;

	fun dcon_eq ((s1, c1, t1):       anormal::Dcon, (s2, c2, t2))
            =
	    symbol::eq (s1, s2)
            and (c1 == c2)
            and highcode::lambda_types_are_equivalent (t1, t2);

	cplv = highcode_var::copy_highcode_variable;


	# General alpha-conversion on Anormal_Expression.
	# Free variables remain unchanged
	# except for the renaming specified in the first argument.
	#   my copy:  m::intmap( Highcode_Variable ) -> Function_Declaration -> Function_Declaration
	#
	fun copy ta alpha le
	    =
	    copy' (tmap_sort ta)  alpha  le
	    where

		tc_subst = lt::tc_nvar_subst_fn();
		lt_subst = lt::lt_nvar_subst_fn();

		tmap_sort = list_mergesort::sort (fn ((v1, _), (v2, _)) => v1 > v2; end );

		fun substvar alpha lv
                    =
                    case (m::get (alpha, lv))
                      
                         THE lv => lv;
                         noe    => lv;
                    esac;

		fun substval alpha (VAR lv) => VAR (substvar alpha lv);
		    substval alpha v => v;
                end;

		fun newv (lv, alpha)
                    =
		    {   nlv = cplv lv;
                        (nlv, m::set (alpha, lv, nlv));
                    };

		fun newvs (lvs, alpha)
                    =
		    fold_right
                        (fn (lv, (lvs, alpha))
                            =
			    {   my (nlv, nalpha) = newv (lv, alpha);
                                (nlv ! lvs, nalpha);
                            }
                        )
			([], alpha)
                        lvs;

		fun cdcon ta alpha (s, ac, lambda_type)
                    =
		    ( s,
		      case ac

		          a::EXCEPTION (a::HIGHCODE_VARIABLE lv) =>
                          a::EXCEPTION (a::HIGHCODE_VARIABLE (substvar alpha lv));

			  _ => ac;
                      esac,
		      lt_subst ta lambda_type
                    );

		fun cpo ta alpha (dictionary, po, lambda_type, tycs)
                    =
		    ( o::map
                          (fn { default, table }
                               =
			       { default => substvar alpha default,
			         table   => map (fn (tycs, lv)
                                                    =
					            ( map (tc_subst ta) tycs,
                                                      substvar alpha lv
                                                    )
                                                )
				                table
                               }
                          )
                          dictionary,

		      po,
                      lt_subst ta lambda_type,
                      map (tc_subst ta) tycs
                    );

		fun cfk ta { is_recursive=>THE (ltys, lk), all_call_sites_known, inlining_hint, calling_convention }
			=>
			{ is_recursive         =>  THE (map (lt_subst ta) ltys, lk),
			  all_call_sites_known,
                          inlining_hint,
                          calling_convention
                        };

		    cfk _ fk
                        =>
                        fk;
                end;


		fun crk ta (RK_VECTOR type_constructor)
                        =>
                        RK_VECTOR (tc_subst ta type_constructor);

		    crk _ rk
                        =>
                        rk;
                end;


		fun copy' ta alpha le
		    =
		    {   cpo = cpo ta alpha;
			cdcon = cdcon ta alpha;
			substvar = substvar alpha;
			substval = substval alpha;
			copy = copy' ta;

			case le
                          

			    RET vs => RET (map substval vs);

			    LET (lvs, le, body)
				=>
				{ nle = copy alpha le;
				    my (nlvs, nalpha) = newvs (lvs, alpha);
				 LET (nlvs, nle, copy nalpha body);
				};

			    MUTUALLY_RECURSIVE_FNS (fdecs, le)
				=>
				{   fun cfun alpha ((fk, f, args, body):Function_Declaration, nf)
					=
					{   my (nargs, nalpha) = newvs (map #1 args, alpha);

					    (   cfk ta fk,
						nf,
						paired_lists::zip (nargs, (map (lt_subst ta o #2) args)),
						copy nalpha body
					    );
					};

				    my (nfs, nalpha)
					=
					newvs (map #2 fdecs, alpha);

				    nfdecs = paired_lists::map (cfun nalpha) (fdecs, nfs);

				    MUTUALLY_RECURSIVE_FNS (nfdecs, copy nalpha le);
				};

			    APPLY (f, args)
				=>
				APPLY (substval f, map substval args);

			    TYPE_FN ((tfk, lv, args, body), le)
				=>
				# Don't forget to rename the tvar also:
                                # 
				{   my (nlv,   nalpha) = newv (lv, alpha);
				    my (nargs, ialpha) = newvs (map #1 args, nalpha);

				    ita = tmap_sort ( (paired_lists::map
							  (fn ((t, k), nt) = (t, lt::tcc_nvar nt))
							  (args, nargs)
                                                      )
                                                      @
                                                      ta
                                                    );

				 TYPE_FN
                                   (  ( tfk, nlv,
					paired_lists::zip (nargs, map #2 args),
					copy' ita ialpha body
                                       ),
				       copy nalpha le
                                   );
				};

			    TYPE_APPLY (f, tycs)
				=>
				TYPE_APPLY (substval f, map (tc_subst ta) tycs);

			    SWITCH (v, ac, arms, def)
				=>
				SWITCH
                                  ( substval v,
                                    ac,
                                    map  carm  arms,
                                    null_or::map (copy alpha) def
                                  )
                                where
				    fun carm (DATACON (dc, tycs, lv), le)		# "carm" might be "compile [SWITCH] arm" or such...?
                                            =>
					    {   my (nlv, nalpha) = newv (lv, alpha);

					        ( DATACON (cdcon dc, map (tc_subst ta) tycs, nlv),
						  copy nalpha le
                                                );
					    };

				        carm (con, le)
                                            => (con, copy alpha le);
                                    end;
				end;

			    CONSTRUCTOR (dc, tycs, v, lv, le)
                                =>
				{   my (nlv, nalpha) = newv (lv, alpha);
				    CONSTRUCTOR (cdcon dc, map (tc_subst ta) tycs, substval v, nlv, copy nalpha le);
				};

			    RECORD (rk, vs, lv, le)
                                => 
				{   my (nlv, nalpha) = newv (lv, alpha);
				    RECORD (crk ta rk, map substval vs, nlv, copy nalpha le);
				};

			    SELECT (v, i, lv, le)
                                => 
				{   my (nlv, nalpha) = newv (lv, alpha);
				    SELECT (substval v, i, nlv, copy nalpha le);
				};

			    RAISE (v, ltys)
				=>
				RAISE (substval v, map (lt_subst ta) ltys);

			    EXCEPT (le, v)
				=>
				EXCEPT (copy alpha le, substval v);

			    BRANCH (po, vs, le1, le2)
				=>
				BRANCH (cpo po, map substval vs, copy alpha le1, copy alpha le2);

			    PRIMOP (po, vs, lv, le)
				=>
				{   my (nlv, nalpha)
					=
					newv (lv, alpha);

				    PRIMOP (cpo po, map substval vs, nlv, copy nalpha le);
				};
			esac;
		    };
	    end;


	fun copyfdec fdec
            =
	    case (copy  []  m::empty  (f::MUTUALLY_RECURSIVE_FNS([fdec], f::RET [])))
	      
	         f::MUTUALLY_RECURSIVE_FNS([nfdec], f::RET [])
                     =>
                     nfdec;

	         _   =>
                     bug "copyfdec";
            esac;


	fun freevars lambda_expression
	    =
	    {   loop = freevars;


		fun s_rmv (x, s)
                    =
                    s::delete (s, x)
                    except
                        not_found = s;


		fun addv (s, f::VAR lv)
                        =>
                        s::add (s, lv);

		    addv (s, _)
                        =>
                        s;
                end;


		fun addvs (s, vs) =  fold_left (fn (v, s) = addv  (s, v))  s  vs;
		fun rmvs (s, lvs) =  fold_left (fn (l, s) = s_rmv (l, s))  s  lvs;


		fun singleton (f::VAR v)
                        =>
                        s::singleton v;

		    singleton _
                        =>
                        s::empty;
                end;


		fun fpo (fv, (NULL: Null_Or( f::Dictionary ), po, lambda_type, tycs))
                        =>
                        fv;

		    fpo (fv, (THE { default, table }, po, lambda_type, tycs))
                        =>
		        addvs (addv (fv, f::VAR default), map (f::VAR o #2) table);
                end;


		fun fdcon (fv, (s, var_home::EXCEPTION (var_home::HIGHCODE_VARIABLE lv), lambda_type))
                        =>
                        addv (fv, f::VAR lv);

		    fdcon (fv, _)
                        =>
                        fv;
                end;


	        case lambda_expression
		  
		     f::RET vs
                         =>
                         addvs (s::empty, vs);

		     f::LET (lvs, body, le)
                         =>
                         s::union (rmvs (loop le, lvs), loop body);

		     f::MUTUALLY_RECURSIVE_FNS (fdecs, le)
                         =>
			 rmvs ( (fold_left
                                    (fn ((_, _, args, body), fv)
                                        =
				        s::union (rmvs (loop body, map #1 args), fv)
                                    )
				    (loop le)
                                    fdecs
                                ),
			        map #2 fdecs
                              );

		     f::APPLY (f, args)
                         =>
                         addvs (s::empty, f ! args);

		     f::TYPE_FN ((tfk, f, args, body), le)
                         =>
                         s::union (s_rmv (f, loop le), loop body);

		     f::TYPE_APPLY (f, args)
                         =>
                         singleton f;

		     f::SWITCH (v, ac, arms, def)
                         =>
		         fold_left farm fvs arms
                         where
		             fun farm ((dc, le), fv)
                                 =
			         {   fvle = loop le;

			             s::union
                                       (
                                         fv,
					 case dc
					     f::DATACON (dc, _, lv) => fdcon (s_rmv (lv, fvle), dc);
					     _                      => fvle;
                                         esac
                                       );
			         };

			     fvs = case def    NULL   =>  singleton v;
					       THE le =>  addv (loop le, v);
                                   esac;
		         end;

		     f::CONSTRUCTOR (dc, tycs, v, lv, le)
                         =>
                         fdcon (addv (s_rmv (lv, loop le), v), dc);

		     f::RECORD (rk, vs, lv, le)
                         =>
                         addvs (s_rmv (lv, loop le), vs);

		     f::SELECT (v, i, lv, le)
                         =>
                         addv (s_rmv (lv, loop le), v);

		     f::RAISE (v, ltys)
                         =>
                         singleton v;

		     f::EXCEPT (le, v)
                         =>
                         addv (loop le, v);

		     f::BRANCH (po, vs, le1, le2)
                         =>
                         fpo (addvs (s::union (loop le1, loop le2), vs), po);

		     f::PRIMOP (po, vs, lv, le)
                         =>
                         fpo (addvs (s_rmv (lv, loop le), vs), po);
                esac;

	    };		# fun freevars
    end;		#  top-level with
};			#  package anormal_stuff 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1997 (c) by YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
