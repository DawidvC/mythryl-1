## threadkit-clean-io.pkg
## COPYRIGHT (c) 1996 AT&T Research.

# Compiled by:
#     src/lib/std/stdlib.make6



# This module keeps track of open I/O streams
# and handles the proper cleaning of them.
#
# It is a modified version of the Lib7 module
#
#     src/lib/std/src/io/clean-io.pkg
#
# Unlike the Lib7 version, we only do cleanup at
# shutdown/exit time:  We do not try to support the
# persistence of threadkit streams across invocations
# of run_threadkit::run_threadkit).
#
# Also, we only require a single clean-up function, which
# flushes the standard streams and closes all others.
#
# These operations should only be called while threadkit
# is running, since they use synchronization primitives.
#
# NOTE: There is currently a problem with removing the
# cleaners for streams that get dropped by the application,
# but the system limit on open files will limit this.


							# threadkit_startup_and_shutdown	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit-startup-and-shutdown.pkg
package threadkit_clean_io
:
api {
    Tag;

    os_init_hook:   Ref( Void -> Void );
	#
	# This function gets invoked as the first
	# action during the IO initialization.
	#
	# It is meant to support any OS specific
	# initialization needed.

     std_stream_hook:  Ref( Void -> Void );
	#
	# This function is defined in text_io_g
	# and is called after the os_hook.
	#
	# It is used to rebuild the standard streams.

     add_cleaner:  (Void -> Void) -> Tag;

     rebind_cleaner:  ((Tag, (Void -> Void))) -> Void;

     remove_cleaner:  Tag -> Void;


     # Link the master IO cleaner fn
     # into the list of cleanup hooks:
     #
     io_cleaner
	:
	( String,
	  List( threadkit_startup_and_shutdown_hooks::When ),
	  (     threadkit_startup_and_shutdown_hooks::When -> Void)
	);

}
{
    package md = maildrop;				# maildrop	is from   src/lib/thread-kit/src/core-thread-kit/maildrop.pkg

    Tag = Ref( Void );

    Cleaner
	=
	{ tag:    Tag,			# Unique ID for this cleaner. 
	  close:  Void -> Void		# Called SHUTDOWN and THREADKIT_SHUTDOWN. 
        };

    os_init_hook    =  REF (fn () = ());
    std_stream_hook =  REF (fn () = ());

    cleaners = md::make_full_maildrop ([] : List( Cleaner ));

    fun add_cleaner close
        =
        {   tag = REF();
	    cleaner_rec = { tag, close };
	  
	    md::fill (cleaners, cleaner_rec ! md::empty cleaners);
	    tag;
	};

    fun get_tag ( { tag, ... } : Cleaner)
        =
        tag;

    fun rebind_cleaner (t, close)
        =
	md::fill (cleaners, f (md::empty cleaners))
        where

            fun f []
                    =>
                    raise exception FAIL "rebind_cleaner: tag not found";

	        f (x ! r)
                    =>
                    {   t' = get_tag x;
		
		        if   (t' == t)
		            
                             { tag=>t, close } ! r;
		        else
                             x ! f r;
                        fi;
		    };
            end;
	end;

    fun remove_cleaner t
        =
	md::fill (cleaners, f (md::empty cleaners))
        where
	    fun f []      =>  [];				# Should we raise an exception here? 
	        f (x ! r) =>  if (get_tag x == t)   r;
                              else                  x ! f r;
                              fi;
            end;
	end;

    fun do_clean ()
        =
	do_it (md::peek cleaners)
        where

            fun do_it []
                    =>
                    ();

	        do_it ( { tag, close } ! r)
                    =>
                    {   close()
                        except
                            _ = ();

                        do_it r;
                    };
            end;
	end;

								# threadkit_startup_and_shutdown_hooks	is from   src/lib/thread-kit/src/core-thread-kit/threadkit-startup-and-shutdown-hooks.pkg
    package c = threadkit_startup_and_shutdown_hooks;

    fun clean_up (c::SHUTDOWN | c::THREADKIT_SHUTDOWN)
            =>
            do_clean ();

	clean_up (c::STARTUP | c::APP_STARTUP)
            =>
            {   *os_init_hook    ();
	        *std_stream_hook ();
            };
    end;


    # Link master IO cleaner function
    # into the cleanup hook list:
    #
    io_cleaner
	=
	("IO", c::at_all, clean_up);

};						# package clean_io 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1997 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
