#
# Abstract view a flowgraph required by the new register allocator.
# In order to allow different representation to share the same 
# register allocator core, each representation should implement the
# following interface to talk to the new RA.
#
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



api  Register_Allocation_Flowgraph {

    package instruction_set:   Instruction_Set;			# Instruction_Set		is from   src/lib/compiler/lower/instruction/instruction-set.api
    package cells:             Cells;  				# Cells				is from   src/lib/compiler/lower/instruction/cells.api

    package g:      Register_Allocation_Graph			# Register_Allocation_Graph	is from   src/lib/compiler/lower/reg-alloc/ra-graph.api
             =      register_allocation_graph;

    package spill:  Register_Allocation_Spilling;		# Register_Allocation_Spilling	is from   src/lib/compiler/lower/reg-alloc/register-allocation-spilling.api

    sharing spill::instruction_set == instruction_set;
    sharing instruction_set::cells == cells;

    Flowgraph;

    mode:  g::Mode;

    # Dump the flograph to a stream 
    #
    dump_flowgraph:  (String, Flowgraph, file::Output_Stream) -> Void;

    notes:  Flowgraph -> Ref( note::Notes );


    # Interface for communicating with the new register allocator.
    # It is expected that the services will cache enough information
    # during build so that the rebuild and spill phases can be execute
    # quickly.
    #
    services
        :
        Flowgraph
        ->
	{ build:    (g::Interference_Graph, cells_basis::Cellkind) -> 
		       List( g::Move ), #  Build the graph 

	  # Spill/rebuild the graph:
	  # 
	  spill:    { copy_instr:     spill::Copy_Instr,
		     spill:         spill::Spill,
		     spill_src:      spill::Spill_Src,
		     spill_copy_tmp:  spill::Spill_Copy_Tmp,
		     reload:        spill::Reload,
		     reload_dst:     spill::Reload_Dst,
		     rename_src:     spill::Rename_Src,
		     graph:         g::Interference_Graph,
		     nodes:         List( g::Node ),
		     cellkind:      cells_basis::Cellkind
		    }
                    ->
                    List( g::Move ),

	  program_point:  { block: Int, instruction: Int } -> g::Program_Point,
	  block_num:      g::Program_Point -> Int,
	  instr_num:      g::Program_Point -> Int
	};

};
