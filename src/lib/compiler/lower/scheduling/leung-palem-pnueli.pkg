#
# This is my algorithm from PACT '98.
#
# -- Allen Leung


###          "There is little that bureaucrats hate more
###           than innovation, especially innovation that
###           produces better results than the old routines.
###
###          "Improvements always make those at the top of
###           the heap look inept.
###
###          "Who enjoys appearing inept?"
###
###                                -- Frank Herbert


package LeungPalemPnueli :> LEUNG_PALEM_PNUELI =
pkg

   package g = graph
   package a = rw_vector
   package pq = priority_queue

   exception Infeasible

   fun rank { dag, l, r, d, m } =
   let my g::GRAPH G = dag 
       nnn         = G.capacity ()
       r'        = a::rw_vector (nnn, 0) #  modified release times 
       d'        = a::rw_vector (nnn, 0) #  modified deadlines 
       r_hat     = a::rw_vector (nnn, 0) #  Backschedule modified release times 
       d_hat     = a::rw_vector (nnn, 0) #  Backschedule modified deadlines 

       node_ids  = map #1 (G.nodes ())

       fun initReleaseTimes() = 
       let fun update i =
               a::update (r', i,
                  fold_right (fn (e as (j, _, _), r_i) => 
                           int::max (a::sub (r', j) + l e + 1, r_i)) 
                        (r (i, G.node_info i)) (G.in_edges i))
       in  apply update (graph_topological_sort::topologicalSort dag node_ids) end

       fun initDeadlines() = 
       let fun update i =
               a::update (d', i,
                  fold_right (fn (e as (_, j, _), d_i) => 
                           int::min (a::sub (d', j) - l e - 1, d_i)) 
                        (d (i, G.node_info i)) (G.out_edges i))
       in  apply update (graph_topological_sort::topologicalSort (reversed_graph_view::rev_view dag) 
                       node_ids) 
       end


          # unit time tasks, no-precedence constraints with
          # deadlines d_hat and release times r_hat.
          # I'm using an asymtotically slower (n log n) 
          # algorithm than the one described in the paper. 

       fun uet (sss) =
       let fun byReleaseTimes (i, j) = a::sub (r_hat, i) > a::sub (r_hat, j)
           fun byDeadlines (i, j) = a::sub (d_hat, i) < a::sub (d_hat, j)
           ready = pq::create byDeadlines 
           ins   = pq::set ready
           fun listSchedule (waiting, t, 0) = listSchedule (waiting, t+1, m)
             | listSchedule (waiting, t, m) = 
               let j = pq::deleteMin ready
               in  t < a::sub (d_hat, j) and #  Check for infeasbility! 
                   listSchedule (waiting, t, m - 1)
               end except pq::EMPTY_PRIORITY_QUEUE =>
                   #  no more ready nodes 
               let fun release (t,[]) = (t,[])
                     | release (t, l as j . waiting) = 
                        if a::sub (r_hat, j) > t then (t, l)
                        else (ins j; release (t, waiting))
               in  case waiting of
                     [] => TRUE #  feasible 
                   | waiting as j . _ => 
                     let my (t, waiting) = release (a::sub (r_hat, j), waiting)
                     in  listSchedule (waiting, t, m) end
               end
       in  listSchedule (list_mergesort::sort byReleaseTimes sss, 0, m) end

       fun backSchedule (i, r'_i, sss) = 
       let fun loop d'_i = 
           if r'_i >= d'_i then raise exception Infeasible
           else
           let a::update (d_hat, i, d'_i)
               a::update (r_hat, i, d'_i - 1)
               apply (fn e as (_, j, _) => 
                          a::update (r_hat, j, int::max (d'_i + l e, a::sub (r', j))))
                            (G.out_edges i)
           in  if uet sss then d'_i 
               else loop (d'_i - 1)
           end
  
       in  apply (fn j => (a::update (d_hat, j, a::sub (d', j));
                         a::update (r_hat, j, a::sub (r', j)))) sss;
           loop (a::sub (d', i)) 
       end

       fun mainLoop([], _) = ()
         | mainLoop (i . U, sss) = 
           let r'_i = a::sub (r', i)
               sss = i . sss
               d'_i = backSchedule (i, r'_i, sss)
           in  a::update (d', i, d'_i); 
               if d'_i <= r'_i then raise exception Infeasible 
               else mainLoop (U, sss)
           end
       fun byNonIncreasingReleaseTimes (i, j) = a::sub (r', i) < a::sub (r', j)

   in  #  initialize the modified deadlines/release times 
       initReleaseTimes();
       initDeadlines();
       mainLoop (list_mergesort::sort byNonIncreasingReleaseTimes node_ids,[]);
       { r'=r', d'=d'}
   end

end


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
