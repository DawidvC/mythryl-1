# trace-view.pkg

# Compiled by:
#     src/lib/graph/graphs.make6

# Trace subgraph adaptor.  This takes a linear list of node ids.
# The view returned is the part of the graph that lies on this linear list.


api Trace_Subgraph_View {

    trace_view:  List graph::Node_Id
                      ->
                      graph::Graph( N, E, G)
                      -> 
                      graph::Graph( N, E, G);
};

package trace_view: (weak)  Trace_Subgraph_View	{	# Trace_Subgraph_View	is from   src/lib/graph/trace-view.pkg


    package g= graph;			# graph			is from   src/lib/graph/graph.pkg
    package a= sparse_rw_vector;		# sparse_rw_vector		is from   src/lib/src/sparse-rw-vector.pkg
    package s= subgraph_p_view;	# subgraph_p_view	is from   src/lib/graph/subgraph-p.pkg

    fun trace_view  nodes  (graph as g::GRAPH g)
	=
	{   ord =  a::make_rw_vector (g.capacity (), -100);

	    fun order (i, [])
                    =>
                    ();

	        order (i,  n ! ns)
                    =>
                    {   a::set (ord, n, i);
                        order (i+1, ns);
                    };
            end;

	    order (0, nodes);

	    fun node_p i      =  a::get (ord, i) >= 0; 
	    fun edge_p (i, j) =  a::get (ord, i) + 1 == a::get (ord, j); 

	    s::subgraph_p_view  nodes  node_p  edge_p  graph;
	};

};

