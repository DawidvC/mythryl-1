## module-stuff.pkg 

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# The center of the typechecker is
#
#     src/lib/compiler/front/typechecker/typecheck/typecheck-package-language-g.pkg
#
# -- see it for a higher-level overview.
#
# This file contains support functions used mainly
# during typechecking of module-language stuff.
#
# In particular, we implement looking up things
# in nested packages:
#     Source code like "a.b.c" accessing stuff
# in such nested packages parses into a list
# of symbols [a, b, c] called a "symbol_path".
#     To actually turn a symbol_path into something
# useful, we must look up 'a' in the symbol table,
# look up 'b' in the value of 'a', look up 'c' in
# the value of 'b', &tc to the end of the path.
#    In this file, we implement the busywork of
# actually doing so.
#    To keep things nicely typed, we need one
# getXXXViaPath function for each type of
# thing XXX that we want to fetch.  To keep
# the redundancy level down, we implement one
# generic routine and then one wrapper per
# result type.


package module_stuff: (weak)  Module_Stuff {		# Module_Stuff	is from   src/lib/compiler/front/typecheck-stuff/modules/module-stuff.api

    stipulate

        package s   = symbol;				# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package sp  = symbol_path;			# symbol_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package ip  = inverse_path;			# inverse_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package cvp = invert_path;			# invert_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package ep  = module_path;			# module_path			is from   src/lib/compiler/front/typecheck-stuff/modules/module-path.pkg
	package mpc = module_path_context;		# module_path_context		is from   src/lib/compiler/front/typecheck-stuff/modules/module-path-context.pkg
	package a   = var_home;				# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package t   = types;				# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	package ts  = type_stuff;			# type_stuff			is from   src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg
	package v   = variables_and_constructors;	# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
	package b   = symbol_table_entry;		# symbol_table_entry		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg
	package td  = typechecker_dictionary;		# typechecker_dictionary	is from   src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.pkg
	package m   = module;				# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
	package mm  = module_map;			# module_map			is from   src/lib/compiler/front/typecheck-stuff/modules/module-map.pkg
	package st  = symbol_table;			# symbol_table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg

	include module;

    herein

	#  Debugging hooks 

	say = control_print::say;

	debugging = typecheck_data_control::module_stuff_debugging;		# eval:  set_control "ed::module_stuff_debugging" "TRUE";

	fun if_debugging_say (msg: String)
            =
	    if *debugging   say msg;  say "\n";   fi;

	fun bug s
            =
            error_message::impossible ("module_stuff: " + s);

	# Look up the entity corresponding to a given symbol in the `elements'
	# of a api and the corresponding `entities' from a package
	# typechecked_package.  The (dynamic) access fields of packages and
	# generics are adjusted before they are returned.  The static accesses
	# of types, packages, and generics are just returned.
	#
	# Used by the (package and generic package) matching functions.

	exception UNBOUND  s::Symbol;

	fun get_api_element (elements, symbol)
            = 
            search  elements
            where
	        fun search []
                        =>
                        {   if_debugging_say("@@@get_api_element " + s::name symbol);
                            raise exception (UNBOUND symbol);
                        };

		    search ((s, sp) ! remaining_elements)
                        =>
                        if (s::eq (s, symbol))   sp;
                        else                     search remaining_elements;
                        fi;
                end;
	    end;

	# The following might be used to
        # speed up the api lookup process: 
	#
	# fun get_api_element (elements, symbol)
        #     = 
	#     dictionary::get (elements, symbol)
	#     except
        #         dictionary::UNBOUND
        #         =
        #         raise exception (UNBOUND symbol);
	#
	# We'll use more efficient representations for elements in the future.
        # XXX BUGGO FIXME  

	# Return the typechecked_package stamp
        # of a particular api element:
	#
	fun get_api_element_variable (PACKAGE_IN_API          { module_stamp, ... } ) => THE module_stamp;
	    get_api_element_variable (TYPE_CONSTRUCTOR_IN_API { module_stamp, ... } ) => THE module_stamp;
	    get_api_element_variable (GENERIC_IN_API          { module_stamp, ... } ) => THE module_stamp;
	    get_api_element_variable _                                                            => NULL;
        end;



	# This one is used only in
        #     src/lib/compiler/front/typechecker/modules/api-match-g.pkg
        #
	fun get_type_constructor (elements, typechecker_dictionary, symbol)
            =
	    case (get_api_element (elements, symbol))

	         TYPE_CONSTRUCTOR_IN_API { module_stamp, ... }
		     =>
		     (   td::find_type_constructor_by_module_stamp (typechecker_dictionary, module_stamp),
			 module_stamp
		     );

	      _ => bug "get_type_constructor: wrong spec";
            esac;



	# The function get_package is used in
        #     src/lib/compiler/front/semantic/modules/api-match.pkg
	#
	fun get_package (elements, typechecker_dictionary, symbol, dacc, dinfo)
            =
	    case (get_api_element (elements, symbol))
	      
	         PACKAGE_IN_API { an_api, slot, definition, module_stamp }
                     => 
		     case (td::find_entry_by_module_stamp (typechecker_dictionary, module_stamp))
		       
			  PACKAGE_ENTRY entity
			      => 
			      ( A_PACKAGE {   an_api,
					      typechecked_package  => entity,
					      var_home       => a::select_var_home (dacc, slot),
					      inlining_info   => inlining_information::select (dinfo, slot)
					  },
				module_stamp
			      );

			   _ => bug "get_package: bad entity";
                     esac;

	         _ => bug "get_package: wrong spec";
            esac;



	# get_generic() is used only in modules/api-match.pkg:
        #
	fun get_generic (elements, typechecker_dictionary, symbol, dacc, dinfo)
            =
	    case (get_api_element (elements, symbol))
	      
	         GENERIC_IN_API { a_generic_api, slot, module_stamp }
                     => 
		     case (td::find_entry_by_module_stamp (typechecker_dictionary, module_stamp))
		       
		          GENERIC_ENTRY entity
			      => 
			      ( GENERIC {   a_generic_api,
					    typechecked_generic  => entity,
					    var_home               => a::select_var_home (dacc, slot),
					    inlining_info        => inlining_information::select (dinfo, slot)
					},
				module_stamp
			      );

		          _ => bug "getGeneric: bad entity";
                     esac;

	         _ => bug "getGeneric: wrong spec";
            esac;

	error_package_stamp   =   stamp::special "ERRONEOUS_PACKAGE";

	error_package_name   =   inverse_path::INVERSE_PATH [ s::make_package_symbol "ERRONEOUS_PACKAGE" ];

	fun get_package_stamp (A_PACKAGE { typechecked_package => { stamp, ... }, ... } ) =>   stamp;
	    get_package_stamp ERRONEOUS_PACKAGE                                         =>   error_package_stamp;
	    get_package_stamp _                                                         =>   bug "get_package_stamp";
        end;

	fun get_package_name (A_PACKAGE { typechecked_package => { inverse_path, ... }, ... } ) =>   inverse_path;
	    get_package_name ERRONEOUS_PACKAGE                                               =>   error_package_name;
	    get_package_name _                                                               =>   bug "get_package_name";
        end;

	fun get_packages (A_PACKAGE { an_api => API sg, typechecked_package => { typechecker_dictionary, ... }, var_home, inlining_info=>info, ... } )
		=>
		{   elements = sg.elements;

		    list::map_maybe_null_fn

			fn (symbol, PACKAGE_IN_API { an_api, slot, definition, module_stamp } )
			   =>
			   THE (
			       A_PACKAGE {
				   an_api,
				   typechecked_package => td::find_package_by_module_stamp (typechecker_dictionary, module_stamp),
				   var_home             => a::select_var_home (var_home, slot), 
				   inlining_info      => inlining_information::select (info, slot)
			       }
			   );
			  _ => NULL;
			end 

			elements;
		};

	    get_packages ERRONEOUS_PACKAGE =>   NIL;
	    get_packages _                 =>   bug "get_packages";
        end;

	fun get_type_constructors (A_PACKAGE { an_api => API sg, typechecked_package => { typechecker_dictionary, ... }, ... } )
		=>
		{   elements = sg.elements;

		    tycvars = list::map_maybe_null_fn
				      (fn (symbol, TYPE_CONSTRUCTOR_IN_API { module_stamp, ... } ) => THE module_stamp;
					 _ => NULL; end )
				      elements;

		    list::map (fn tyc_variable => td::find_type_constructor_by_module_stamp (typechecker_dictionary, tyc_variable); end ) tycvars;
		};

	    get_type_constructors ERRONEOUS_PACKAGE => NIL;
	    get_type_constructors _ => bug "getTypeConstructors (2)";
        end;

	fun get_api_symbols (API { symbols, ... } )   =>   symbols;
	    get_api_symbols _ => NIL;
        end;

	fun get_package_symbols (A_PACKAGE { an_api, ... } )   =>   get_api_symbols an_api;
	    get_package_symbols _ => NIL;
        end;



	# Translate a type_constructor per
        # a given Typechecker_Dictionary:
	#
	fun translate_type_constructor
                typechecker_dictionary
                (t::TYPE_CONSTRUCTOR_BY_MODULE_PATH { module_path, path, ... })

		=>
		td::find_type_constructor_via_module_path (typechecker_dictionary, module_path)
		except
		    td::UNBOUND
		    =
		    {   if_debugging_say (string::cat [ "trapped td::UNBOUND from typechecker_dictionary::find_type_constructor_via_module_path:  where path == '",
							ip::to_string path,
                                                        "' and module_path == '",
							ep::module_path_to_string  module_path,
                                                        "':  translate_type_constructor  in  src/lib/compiler/front/typecheck-stuff/modules/module-stuff.pkg"
						      ]
					 );
		       raise exception td::UNBOUND;
		    };


	    translate_type_constructor _ type_constructor
		=>
		type_constructor;
        end;      



	# Translate a type in a given Typechecker_Dictionary 
	#
	# We should never need to recurse inside each
        # DEFINED_TYPE_CONSTRUCTOR's body because
	# a DEFtycs is either rigid or has been
        # relativized as a whole into an
        # TYPE_CONSTRUCTOR_BY_MODULE_PATH with an
        # module_path somewhere before.
	#
	fun translate_type
                typechecker_dictionary
                type
            =
	    ts::map_constructor_type_dot_type_constructor
                (translate_type_constructor  typechecker_dictionary)
                type
	    except
                td::UNBOUND
                =
                {   if_debugging_say "trapped td::UNBOUND:    translate_type in   src/lib/compiler/front/typecheck-stuff/modules/module-stuff.pkg";
                    raise exception td::UNBOUND;
                };



#	transTyconPhase = (compile_statistics::make_phase "Compiler 033 4-translateTypeConstructor") 
#	translate_type_constructor = 
#	  fn x = fn y = (compile_statistics::do_phase transTyconPhase (translate_type_constructor x) y)
#
#	transTypePhase = (compile_statistics::make_phase "Compiler 033 5-translateType") 
#	translate_type = 
#	  fn x = fn y = (compile_statistics::do_phase transTypePhase (translate_type x) y)


	fun package_definition_to_package (CONSTANT_PACKAGE_DEFINITION a_package, _)
		=>
		a_package;

	    package_definition_to_package (VARIABLE_PACKAGE_DEFINITION( an_api, module_path), typechecker_dictionary)
		=>
		A_PACKAGE { typechecked_package => td::find_package_via_module_path (typechecker_dictionary, module_path),
                            an_api, 

			    var_home              => a::null_var_home,
			    inlining_info       => inlining_information::NULL
			  };
        end;

	# Two pieces of essential package information
	# are gathered during the dictionary lookup.
        # API_INFO is returned if the package being
	# searched is a PACKAGE_API; otherwise
        # we return PACKAGE_INFO.
	#
	Package_Info

            = API_INFO  ep::Module_Path  #  Kept in reverse order! 
	    | PACKAGE_INFO  ( Typechecked_Package,
			      a::Var_Home,
			      inlining_information::Inlining_Information
                            );

	bogus_info
            =
            PACKAGE_INFO (
                bogus_typechecked_package,
		a::null_var_home,
		inlining_information::NULL
	    );

	fun get_package_element (symbol, an_api as API { elements, ... }, s_info)
	        => 
	        case (get_api_element (elements, symbol))
                  
		     PACKAGE_IN_API {   an_api => subsig,   slot,   definition,   module_stamp   }
			 =>
			 (   {   new_info
				     = 
				     case s_info

				         API_INFO ep
                                             =>
                                             API_INFO (module_stamp ! ep);

					 PACKAGE_INFO ( { typechecker_dictionary, ... }, dacc, dinfo)
					     =>
					     PACKAGE_INFO (
                                                 td::find_package_by_module_stamp (typechecker_dictionary, module_stamp), 
						 a::select_var_home (dacc, slot),
						 inlining_information::select (dinfo, slot)
					     );
                                     esac;

				 (subsig, new_info);
			     }
			 );

		     _ => bug "get_package_element: wrong spec case";
                esac;

	    get_package_element (symbol, an_api, _)
		=>
		( an_api,
		  bogus_info
		);
        end;

	fun get_generic_element
                (
                  symbol,

		  an_api as API { elements, ... },

		  sinfo
                      as
                      PACKAGE_INFO
                          (
                            typechecked_package as { typechecker_dictionary, ... },
			    dacc,
			    dinfo
			  )
		)
		    => 
		    case (get_api_element (elements, symbol))

			 GENERIC_IN_API { a_generic_api, module_stamp, slot }
			     =>
			     GENERIC {
				 a_generic_api,
				 typechecked_generic =>  td::find_generic_by_module_stamp (typechecker_dictionary, module_stamp),
				 var_home              =>  a::select_var_home (dacc, slot),
				 inlining_info       =>  inlining_information::select (dinfo, slot)
			     };

		      _ => bug "mkGenericVariable - bad spec";
                   esac;

	    get_generic_element _
                =>
                ERRONEOUS_GENERIC;

        end;



	fun make_type_constructor (symbol, sp, API { elements, ... }, s_info)
	        =>
	        case (get_api_element (elements, symbol))

		     TYPE_CONSTRUCTOR_IN_API { type_constructor, module_stamp=>ev, is_a_replica, scope }
                         => 
		         case s_info

		              API_INFO ep
				  => 
				  t::TYPE_CONSTRUCTOR_BY_MODULE_PATH {
				      arity       => ts::type_constructor_arity type_constructor,
				      module_path => reverse (ev ! ep),
				      path        => cvp::invert_spath sp
				  };

			      PACKAGE_INFO ( { typechecker_dictionary, ... }, _, _)
				  =>
				  td::find_type_constructor_by_module_stamp (typechecker_dictionary, ev);
                         esac;

		  _ => bug "makeTypeConstructor: wrong spec case";
                esac;

	    make_type_constructor _
                =>
                t::ERRONEOUS_TYPE_CONSTRUCTOR;
        end;



	fun make_value
		(
		  symbol,
		  symbol_path,
		  an_api as API { elements, ... },
		  s_info as PACKAGE_INFO ( { typechecker_dictionary, ... }, dacc, dinfo )
		)
		: v::Variable_Or_Constructor
		=>
		case (get_api_element (elements, symbol))

		     VALUE_IN_API { type, slot }
			 =>
			 v::VARIABLE (
			     v::ORDINARY_VARIABLE {

				 var_home      => a::select_var_home (dacc, slot), 
				 inlining_info => inlining_information::select (dinfo, slot),

				 path          => symbol_path,
				 var_type      => REF (translate_type typechecker_dictionary type)
			     }
			 );

		     ENUM_CONSTRUCTOR_IN_API
			 {
			   a_datatype => t::ENUM_CONSTRUCTOR { symbol, const, constructor_type, representation, signature, is_lazy },
			   slot
			 }
			 =>
			 {   new_representation
				 =
				 case (representation, slot)

				      (a::EXCEPTION _, THE i)
				      =>
				      a::EXCEPTION (a::select_var_home (dacc, i));

				     _ => representation;
				 esac;


			     v::CONSTRUCTOR (
				 t::ENUM_CONSTRUCTOR {

				     representation   => new_representation,
				     constructor_type => translate_type  typechecker_dictionary  constructor_type, 

				     symbol,
				     const,
				     signature,
				     is_lazy
				 }
			     );
			 };

		    _ => bug "make_value: wrong spec";
	        esac;


	    make_value _
                =>
                v::VARIABLE (v::ERRORVAR);
        end;



	fun make_package_base (symbol, an_api, s_info)
            = 
	    {   my (new_api, new_info)
                    =
                    get_package_element (symbol, an_api, s_info);
	    
                case new_api

		     ERRONEOUS_API => ERRONEOUS_PACKAGE;

		    _ => case new_info

			     PACKAGE_INFO (new_typechecked_package, make_var_home, newinfo)
				 => 
				 A_PACKAGE {
				     an_api              => new_api,
				     typechecked_package => new_typechecked_package,
				     var_home              => make_var_home,
				     inlining_info       => newinfo
				 };

			     API_INFO module_path
				 =>
				 PACKAGE_API {
				     an_api => new_api,
				     module_path   => reverse module_path
				 };
                         esac;
		esac;
	    };

	fun make_package (symbol, _, an_api, s_info)
            =
            make_package_base (symbol, an_api, s_info);

	fun make_package_definition (symbol, _, an_api, s_info)
            = 
	    {   my (new_api, new_info)
                    =
                    get_package_element (symbol, an_api, s_info);

	    
                case new_api

		     ERRONEOUS_API => CONSTANT_PACKAGE_DEFINITION ERRONEOUS_PACKAGE;

		    _ => case new_info

			     PACKAGE_INFO (new_typechecked_package, newacc, newinfo)
                                 => 
				 CONSTANT_PACKAGE_DEFINITION (
				     A_PACKAGE {
					 an_api              => new_api,
					 typechecked_package => new_typechecked_package,
					 var_home              => newacc,
					 inlining_info       => newinfo
				     }
				 );

			     API_INFO module_path
                                 =>
                                 VARIABLE_PACKAGE_DEFINITION (new_api, reverse module_path);
                         esac;
                esac;
	    };

	fun make_generic (symbol, sp, an_api, s_info)
            =
            get_generic_element (symbol, an_api, s_info);


	fun get_x_via_path  make_it  (a_package, sp::SYMBOL_PATH spath, fullsp)
            =
	    {   fun loop ( [symbol], an_api, s_info)
			 =>
			 make_it (symbol, fullsp, an_api, s_info);

		    loop (symbol ! rest, an_api, s_info)
			=> 
			{   my (new_api, new_s_info)
				=
				get_package_element (symbol, an_api, s_info);

			    loop (rest, new_api, new_s_info);
			};

		    loop _ => bug "get_x_via_path::loop";
                end;

	    
                case a_package

		     A_PACKAGE { an_api, typechecked_package, var_home, inlining_info=>info }
			 =>
			 loop (spath, an_api, PACKAGE_INFO (typechecked_package, var_home, info));

		     PACKAGE_API { an_api, module_path }
			 => 
			 loop (spath, an_api, API_INFO (reverse module_path));

		   _ => loop (spath, ERRONEOUS_API, bogus_info);
                esac;
	    };

	my get_type_constructor_via_path
            :
            (m::Package, sp::Symbol_Path, sp::Symbol_Path) -> t::Type_Constructor
            =
	    get_x_via_path make_type_constructor;

	my get_value_via_path
            :
            (m::Package, sp::Symbol_Path, sp::Symbol_Path) -> v::Variable_Or_Constructor
            =
	    get_x_via_path make_value;

	my get_package_via_path
            :
            (m::Package, sp::Symbol_Path, sp::Symbol_Path) -> m::Package
            =
	    get_x_via_path make_package;

	my get_generic_via_path
            :
            (m::Package, sp::Symbol_Path, sp::Symbol_Path) -> m::Generic
            =
	    get_x_via_path make_generic;

	my get_package_definition_via_path
            :
            (m::Package, sp::Symbol_Path, sp::Symbol_Path) -> m::Package_Definition
            =
	    get_x_via_path make_package_definition;



	fun check_path_sig (an_api: m::Api, spath: sp::Symbol_Path)   :  Null_Or( s::Symbol )
            =
	    {   a_package
                    =
                    PACKAGE_API {
                        an_api,
                        module_path   => []:ep::Module_Path
                    };

		fun check_last _ (symbol, _, API { elements, ... }, _)
			=>
			{   get_api_element (elements, symbol);
			    ();
			};

		    check_last _ (symbol, _, ERRONEOUS_API, _)
                        =>
                        ();
                end;
	    
                get_x_via_path check_last (a_package, spath, sp::empty);
		NULL;
	    }
	    except
                UNBOUND symbol
                =
                THE symbol;

	fun err_naming symbol
            =
	    case (s::name_space symbol)
	      
		 s::VALUE_NAMESPACE   =>   b::NAMED_VARIABLE v::ERRORVAR;
		 s::TYPE_NAMESPACE    =>   b::NAMED_TYPE     t::ERRONEOUS_TYPE_CONSTRUCTOR;
		 s::PACKAGE_NAMESPACE =>   b::NAMED_PACKAGE  m::ERRONEOUS_PACKAGE;
		 s::GENERIC_NAMESPACE =>   b::NAMED_GENERIC  m::ERRONEOUS_GENERIC;
		 _                    =>   raise exception (UNBOUND symbol);
            esac;

	fun apis_equal
                ( API { stamp => s1, closed => TRUE, ... },
		  API { stamp => s2, closed => TRUE, ... }
                )
		=>
		stamp::eq (s1, s2);

	    apis_equal _
                =>
                FALSE;
        end;

	fun eq_origin (A_PACKAGE s1, A_PACKAGE s2)
		=>
		stamp::eq (s1.typechecked_package.stamp, s2.typechecked_package.stamp);

	    eq_origin _
                =>
                FALSE;
        end;



	# The following functions are used in CMSymbolTable and module elaboration
	# for building MacroExpansionPathContexts.  They extract module ids from modules. 
	#

	type_identifier   =   mm::type_identifier';

	fun package_identifier (A_PACKAGE sa) =>   mm::package_identifier sa;
	    package_identifier _              =>   bug "package_identifier";
        end;

	fun package_identifier2 ( API sa, typechecked_package:  Typechecked_Package)
		=>
		mm::package_identifier2 (sa, typechecked_package);

	    package_identifier2 _
                =>
                bug "package_identifier2";
        end;

	fun generic_identifier (GENERIC fa)
		=>
		mm::generic_identifier fa;
	
	    generic_identifier _
                =>
                bug "generic_identifier";
        end;

	fun generic_identifier2 (an_api, typechecked_package:  Typechecked_Generic)
            =
            mm::generic_identifier2 (an_api, typechecked_package);

	# The reason that relativize_type_constructor does not need to get inside 
	# DEFINED_TYPE_CONSTRUCTOR is because of our assumptions
        #  that the body in DEFINED_TYPE_CONSTRUCTOR has already
        #  been relativized, when DEFINED_TYPE_CONSTRUCTOR is elaborated; 
	# otherwise, this DEFINED_TYPE_CONSTRUCTOR must be a rigid type_constructor.
	#
	fun relativize_type_constructor module_path_context:      t::Type_Constructor -> (t::Type_Constructor, Bool)
            = 
	    {   fun stamped type_constructor
                    =
                    {   type_identifier = mm::type_identifier' type_constructor;
		    
			#  if_debugging_say ("type_constructor_map: " + module_map::idToString type_identifier); 

			case (mpc::find_module_path_for_type_constructor (module_path_context, type_identifier))

			    NULL => {   if_debugging_say "type_constructor not mapped 1";
                                        (type_constructor, FALSE);
                                    };

			    THE module_path
				=>
				{   type_constructor'
					=
					t::TYPE_CONSTRUCTOR_BY_MODULE_PATH {
					    arity       => ts::type_constructor_arity type_constructor,
					    module_path,
					    path        => ts::type_constructor_path type_constructor
					};

				    if_debugging_say (   "type_constructor mapped: "
						   +   symbol::name (type_stuff::type_constructor_name type_constructor')
						   );
				    (type_constructor', TRUE);
				};
                        esac;
		    };

		fun type_constructor_map (type_constructor as (t::PRIMITIVE_TYPE_CONSTRUCTOR _ | t::DEFINED_TYPE_CONSTRUCTOR _))
			=>
			stamped type_constructor;

		    type_constructor_map (type_constructor as t::TYPE_CONSTRUCTOR_BY_MODULE_PATH _)
			=>
			#  Assume this is a local type_constructor within the current api: 
			{   if_debugging_say "type_constructor not mapped 2";
			    (type_constructor, TRUE);
			};

		    type_constructor_map type_constructor
			=>
			{   if_debugging_say "type_constructor not mapped 3";
			    (type_constructor, FALSE);
			};
                end;

		fun type_constructor_map' type_constructor
                    = 
		    {   if_debugging_say (   "type_constructor_map': "
                                       +   (symbol::name (type_stuff::type_constructor_name type_constructor))
                                       );

		        type_constructor_map type_constructor;
                    };

	    
                type_constructor_map';
	    };

	fun relativize_type  module_path_context  type:      (t::Type, Bool)
            =
	    ( ts::map_constructor_type_dot_type_constructor  viz_type_constructor  type,
	      *relative
	    )
            where
	        relative = REF FALSE;

		fun viz_type_constructor  type_constructor
                    = 
		    {   my (type_constructor', rel)
                            =
                            relativize_type_constructor
                                module_path_context
                                type_constructor;
		    
                        relative := (*relative or rel);

			type_constructor';
		    };
	    end;



#	relativizeTypePhase = (compile_statistics::make_phase "Compiler 033 2-vizType") 
#	relativizeType = 
#	  fn x => fn y =>
#	   (compile_statistics::do_phase relativizeTypePhase (relativizeType x) y)



	# get_naming (symbol, pkg): return naming for element symbol of package pkg
	#  - used only inside the function open_package
	#  - raises module_stuff::UNBOUND if symbol not found in api 
	#
	fun get_naming (symbol, pkg as A_PACKAGE st)
		=>
		case st
		  
		     {   an_api as API _,
			 typechecked_package,
			 var_home     => dacc,
			 inlining_info => dinfo
		     }
			 =>
			 {   sinfo        = PACKAGE_INFO (typechecked_package, dacc, dinfo);

			     typechecker_dictionary = typechecked_package.typechecker_dictionary;

			     case (s::name_space symbol)
			       
				  s::VALUE_NAMESPACE
				      => 
				      case (make_value (symbol, sp::SYMBOL_PATH [symbol], an_api, sinfo))
				        	
					   v::VARIABLE v
					       =>
					       b::NAMED_VARIABLE v;

					   v::CONSTRUCTOR d
					       =>
					       b::NAMED_CONSTRUCTOR d;
				      esac;

				  s::TYPE_NAMESPACE
				      =>
				      b::NAMED_TYPE (
					  make_type_constructor (symbol, sp::SYMBOL_PATH [symbol], an_api, sinfo)
				      );

				 s::PACKAGE_NAMESPACE => b::NAMED_PACKAGE (make_package_base (symbol, an_api, sinfo));
				 s::GENERIC_NAMESPACE => b::NAMED_GENERIC   (get_generic_element (symbol, an_api, sinfo));

				 sp => {   if_debugging_say ("getNaming: " + s::symbol_to_string symbol);
					    raise exception (UNBOUND symbol);
				       };
			     esac;
			 };

		     { an_api => ERRONEOUS_API, ... }
			 =>
			 err_naming symbol;
		esac;


	    get_naming (symbol, PACKAGE_API { an_api as API _, module_path => ep } )
		=> 
		{   sinfo = API_INFO (reverse ep);

		    case (s::name_space symbol)

		         s::TYPE_NAMESPACE
			     =>
			     b::NAMED_TYPE (make_type_constructor (symbol, sp::SYMBOL_PATH [symbol], an_api, sinfo));

			 s::PACKAGE_NAMESPACE
			     =>
			     b::NAMED_PACKAGE (make_package_base (symbol, an_api, sinfo));

			_ => {   if_debugging_say ("getNaming: " + s::symbol_to_string symbol);
				  raise exception (UNBOUND symbol);
			     };
                    esac;
		}; 

	    get_naming (symbol, ERRONEOUS_PACKAGE)
		=>
		err_naming symbol;

	    get_naming _
                =>
                bug "get_naming - bad arg";
        end;



	fun include_package
                (
                  symbol_table: st::Symbol_Table,
                  a_package
                )
            =
	    {   fun get symbol
                    =
		    get_naming (symbol, a_package)
                    except
                        UNBOUND _
                        =
                        raise exception st::UNBOUND;

		symbols = get_package_symbols a_package;
		gen_syms = (fn () => symbols; end );

		new_symbol_table = st::special (get, gen_syms);
	    
                st::atop (new_symbol_table, symbol_table);
	    };



	# Extract inlining_info from a Symbol_Table_Entry:
	#
	fun extract_inlining_info (b::NAMED_PACKAGE   (m::A_PACKAGE         { inlining_info, ... } )) => inlining_info;
	    extract_inlining_info (b::NAMED_GENERIC   (m::GENERIC           { inlining_info, ... } )) => inlining_info;
	    extract_inlining_info (b::NAMED_VARIABLE  (v::ORDINARY_VARIABLE { inlining_info, ... } )) => inlining_info;

	    extract_inlining_info (b::NAMED_CONSTRUCTOR _)
		=>
		inlining_information::NULL;

	    extract_inlining_info _ => bug "unexpected naming in extract_inlining_info";
        end;



	# Extract all api names from a package --
	# doesn't look into generic components:
        #
	fun get_api_names a_package
            =
            {   fun from_api an_api
                    =
                    {   fun api_names (API { name, elements, ... }, names)
				=>
				fold_left (   fn ((_, PACKAGE_IN_API { an_api, ... } ), ns)
					     =>
					     api_names (an_api, ns);

					    (_, ns) => ns; end 
				      )
				      case name
					  THE n  =>  n ! names;
					  NULL   =>  names;
				      esac

				      elements;

			    api_names (ERRONEOUS_API, names)
				=>
				names;
                        end;

			fun remove_dups (x ! (rest as y ! _), z)
				=> 
				if   (s::eq (x, y))   remove_dups (rest,     z);
				else                  remove_dups (rest, x ! z);
                                fi;

			    remove_dups (x ! NIL, z) =>   x ! z;
			    remove_dups (    NIL, z) =>       z;
                        end;

		    
                        remove_dups (
                            list_mergesort::sort   s::symbol_gt (api_names (an_api, NIL)),
                            NIL
                        );
		    };
	    
		case a_package

                     A_PACKAGE { an_api, ... }
			 =>
			 from_api an_api;

		     PACKAGE_API { an_api, ... }
			 =>
			 from_api an_api;

		     ERRONEOUS_PACKAGE
                         =>
                         NIL;
                esac;
	    };

    end; #  local 

}; #  package module_stuff 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories. 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
