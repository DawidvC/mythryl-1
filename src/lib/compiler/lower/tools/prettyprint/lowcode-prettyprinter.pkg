# lowcode-prettyprinter.pkg

# Compiled by:
#     src/lib/compiler/lower/tools/Lowcode-Prettyprinter.make6

package lowcode_prettyprinter:  Lowcode_Prettyprinter {		# Lowcode_Prettyprinter		is from   src/lib/compiler/lower/tools/prettyprint/lowcode-prettyprinter.api

    tabspace = 3;

    Tok = STRING | NUM | SYM | TOK | SPACE | NEWLINE;

    Pps = PP  { buf:    Ref(  List(  String ) ),
			   tabs:   Ref(  List(  Indent ) ),
			   modes:  Ref(  List(  Mode ) ),
			   col:    Ref( Col ),
			   tok:    Ref( Tok ),
			   width:  Ref( Col )
			 }
    withtype Indent = Int
    also     Col    = Int
    also     Mode   = String
    also     Prettyprint     = Pps -> Void;

    infix val +++ ;

    fun (f +++ g) sss
        =
        {   f sss;
            g sss;
        };

    fun nop sss
        =
        ();

    fun emit (PP { buf, col, tok, ... }, s, t)
        =
	{   buf :=  s ! *buf;
            col :=  *col + size s;
            tok :=  t;
        };

    fun space_if p (pps as PP { tok, ... } )
        = 
	if   (p *tok)
            
             emit (pps, " ", SPACE);
        fi;

    sp    =  space_if (fn (SPACE | NEWLINE      ) => FALSE;  _ => TRUE; end );
    space =  space_if (fn (SPACE | NEWLINE | SYM) => FALSE;  _ => TRUE; end );

    fun @@@ s pps =  { space pps; emit (pps, s, TOK);};
    fun @@  s pps =  emit (pps, s, SYM);

    bool      = @@@ o bool::to_string;

    fun string s pps =  emit (pps, "\""  + string::to_string s + "\"", STRING);
    fun char   c pps =  emit (pps, "#\"" +   char::to_string c + "\"", STRING);

    fun num n pps
        =
        {   space pps;
            emit (pps, n, NUM);
        };

    int    =  num o                    int::to_string; 
    int32  =  num o                  int32::to_string; 
    float  =  num o                  float::to_string; 
    intinf =  num o                integer::to_string; 
    unt    =  num o (fn w =  "0wx" +   unt::to_string w); 
    unt32  =  num o (fn w =  "0wx" + unt32::to_string w);

    fun tab' offset (pps as PP { tabs, col, ... } )
        =
	{   at =  case *tabs         i ! _ => i;
                                         _ => 0;
                  esac
                  +
                  offset;

	    n = at - *col;

	    if   (n > 0)
                
                 emit (pps, string_conversion::pad_left ' ' n "", SPACE);
            fi;
	};

    tab = tab' 0;

    fun indent (PP { tabs, ... } )
        =
	case *tabs
          
	     []    =>  tabs := [tabspace];
	     t ! _ =>  tabs := (t+tabspace) ! *tabs;
        esac;


    fun settab (PP { tabs, col, ... } )
        =
        tabs :=  *col ! *tabs;


    fun unindent (PP { tabs as REF(_ ! t), ... } )
            =>
            tabs := t;

        unindent _
            =>
            raise exception FAIL "unindent";
    end;


    fun setmode m (PP { modes, ... } )
        =
        modes :=  m ! *modes;


    fun unsetmode (PP { modes as REF(_ ! m), ... } )
            =>
            modes := m;

        unsetmode _
            =>
            raise exception FAIL "unsetmode";
    end;


    fun select f (pps as PP { modes=>REF (m ! _), ... } )
            =>
            f m pps;

        select _ _
            =>
            raise exception FAIL "select";
    end; 


    fun nl (PP { buf, col, tok, ... } )
        = 
	{   buf :=  "\n" ! *buf;
            col :=  0;
            tok :=  NEWLINE;
        };


    fun nl' (offset, indent) (pps as PP { col, width, ... } )
        =
	if   (*col >= *width - offset )
	    
             nl pps;
             tab' indent pps;
	fi;


    fun text_width w (PP { width, ... } )
        =
        width := w;


    fun seq (l, sep, r) pps
	= 
	l  +++  f pps  +++  r
        where
	    fun f []      =>  nop;
		f [a]     =>  a;
		f (a ! b) =>  a  +++  sep  +++  f b;
	    end; 
        end;

    fun cat pps
        =
        fold_right (+++) nop pps;

    fun block prettyprint =  indent +++ prettyprint +++ unindent;
    fun line  prettyprint =  tab +++ prettyprint +++ nl;
    fun paren prettyprint =  @@ "(" +++ prettyprint +++ @@ ")";

    fun group (l, r) prettyprint
        =
        settab +++ @@ l +++ settab +++ prettyprint +++ 
		unindent +++ tab +++ @@ r +++ unindent;

    fun text prettyprint
	= 
	{   buf =  REF [];

	    pps =  PP { buf,
                        tabs  =>  REF [],
                        modes =>  REF ["pretty"], 
			col   =>  REF 0,
                        tok   =>  REF NEWLINE,
                        width =>  REF 80
                      };

	    prettyprint pps;

	    string::cat (reverse *buf);
	};

    my (!_) = @@@;

    my !! = @@;

};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
