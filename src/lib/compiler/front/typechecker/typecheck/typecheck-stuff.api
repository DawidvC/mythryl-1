## typecheck-stuff.api

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6


# The center of the typechecker is
#
#     src/lib/compiler/front/typechecker/typecheck/typecheck-package-language-g.pkg
#
# -- see it for a higher-level overview.
# It calls us for utility functions to build
# deep_syntax trees from raw_syntax trees.




###                     "[...] teaching of modern Christian creationism
###                      should be fought as a form of child abuse."
###
###                                            -- Donna Haraway



api Typecheck_Stuff {

    Syntactic_Typechecking_Context 
      = AT_TOPLEVEL                   #  At top level -- not inside any module, rigid.               
      | IN_API                        #  Within a api body.                                    
      | IN_PACKAGE                    #  Inside a rigid package, i.e. not inside any generic body. 
      | IN_GENERIC                    #  Inside a generic.                                           
            { flex:  stamp::Stamp     #  Predicate recognizing flexible stamps.                      
                  -> Bool,
              depth: debruijn_index::Depth
            };
	
     Compile_Info
        =
        compile_info::Compile_Info( deep_syntax::Declaration );

     debugging:  Ref(  Bool );

     for' :  List( X )
	     ->
             (X -> Void)
	     ->
             Void;

     discard:  X -> Void;
     single:   X -> List( X );

     sort3
         :
         List ((symbol::Symbol, X, Y))
	 ->
         List ((symbol::Symbol, X, Y));

     equalsym:         symbol::Symbol;
     bogus_id:         symbol::Symbol;

     bogus_exn_id:     symbol::Symbol;
     anon_param_name:  symbol::Symbol;

     consexp:          deep_syntax::Deep_Expression;
     conspat:          deep_syntax::Case_Pattern -> deep_syntax::Case_Pattern;

     falseexp:         deep_syntax::Deep_Expression;
     falsepat:         deep_syntax::Case_Pattern;
     nilexp:           deep_syntax::Deep_Expression;

     nilpat:           deep_syntax::Case_Pattern;
     trueexp:          deep_syntax::Deep_Expression;
     truepat:          deep_syntax::Case_Pattern;

     tupleexp:         List( deep_syntax::Deep_Expression ) -> deep_syntax::Deep_Expression;
     tpselexp:         (deep_syntax::Deep_Expression, Int) -> deep_syntax::Deep_Expression;
     tuplepat:         List( deep_syntax::Case_Pattern ) -> deep_syntax::Case_Pattern;

     unit_expression:  deep_syntax::Deep_Expression;
     void_pattern:     deep_syntax::Case_Pattern;
     bogus_expression: deep_syntax::Deep_Expression;

     bind_varp:  (List( deep_syntax::Case_Pattern ),
		   error_message::Plaint_Sink)
		-> symbol_table::Symbol_Table;

#    is_prim_pattern:  deep_syntax::Case_Pattern -> Bool;

     replace_pattern_variables
         :
         ( deep_syntax::Case_Pattern,
	   Compile_Info
         ) 
	 ->
         ( deep_syntax::Case_Pattern,
	   List( deep_syntax::Case_Pattern ),
	   List( variables_and_constructors::Variable )
         );

     forbid_duplicates_in_list
         :
         ( error_message::Plaint_Sink,
	   String,
	   List( symbol::Symbol )
         )
	 ->
         Void;

     clean_pattern
         :
         error_message::Plaint_Sink
         ->
         deep_syntax::Case_Pattern
	 ->
         deep_syntax::Case_Pattern;

  /*
    my getCoreExn:  (symbol_table::Symbol_Table * String) -> variables_and_constructors::Constructor
    my getCoreVariable:  (symbol_table::Symbol_Table * String) -> variables_and_constructors::var
  */

     complete_match
         :
         ( symbol_table::Symbol_Table,
           String
         )
	 ->
         List( deep_syntax::Case_Rule )
	 ->
         List( deep_syntax::Case_Rule );

     complete_match'
         :
         deep_syntax::Case_Rule
         ->
         List( deep_syntax::Case_Rule )
	 ->
         List( deep_syntax::Case_Rule );

     make_apply_pattern
         :
         error_message::Plaint_Sink
	 ->
         ( deep_syntax::Case_Pattern,
	   deep_syntax::Case_Pattern
         )
	 ->
         deep_syntax::Case_Pattern;

     make_handle_expression
         :
         ( deep_syntax::Deep_Expression,
	   List( deep_syntax::Case_Rule ),
           Compile_Info
         )
	 ->
         deep_syntax::Deep_Expression;

     make_layered_pattern
         :
         ( deep_syntax::Case_Pattern,
	   deep_syntax::Case_Pattern,
	   error_message::Plaint_Sink
         )
	 ->
         deep_syntax::Case_Pattern;

     make_record_expression
         :
         ( List( (symbol::Symbol, deep_syntax::Deep_Expression) ),
	   error_message::Plaint_Sink
         )
	 ->
         deep_syntax::Deep_Expression;

     make_record_pattern
         :
         ( List( (symbol::Symbol, deep_syntax::Case_Pattern) ),
	   Bool,
	   error_message::Plaint_Sink
         )
	 ->
         deep_syntax::Case_Pattern;

     calculate_strictness
         :
         ( Int,
	   types::Type
         )
	 ->
         List( Bool );

     check_bound_type_variables
         :
         ( type_variable_set::Type_Variable_Set,
	   List( types::Typevar_Ref ),
	   error_message::Plaint_Sink
         )
	 ->
         Void;

     do_var_pattern
         :
         ( symbol_path::Symbol_Path,
	   symbol_table::Symbol_Table,
	   error_message::Plaint_Sink,
	   Compile_Info
         )
	 ->
         deep_syntax::Case_Pattern;

     sort_record
         :
         ( List( (symbol::Symbol, X) ),
	   error_message::Plaint_Sink
         )
	 ->
         List( (symbol::Symbol, X) );

     make_deep_syntax_for_mutually_recursive_functions
         :
         ((List( deep_syntax::Case_Rule ) -> List( deep_syntax::Case_Rule )),

	   List
             { var:                 variables_and_constructors::Variable, 		# Name of function

	       clauses:									# Cases defining the function.
                   List
                     { deep_syntax_patterns:   List( deep_syntax::Case_Pattern ), 
		       result_type:            Null_Or( types::Type ), 
		       deep_syntax_expression: deep_syntax::Deep_Expression
		     }, 

	       ref_typevar_refs:      Ref(  List(  types::Typevar_Ref ) ),		# Type variables appearing in function def.
											# Backpatched by last call in typecheck_core_language::typecheck_declaration 

	       source_code_region:  raw_syntax::Source_Code_Region
	     },

	   Compile_Info
         )
	 ->
         ( deep_syntax::Declaration,
           symbol_table::Symbol_Table
         );

     wrap_named_recursive_values_list
         :
         ( List( deep_syntax::Named_Recursive_Values ),
	   Compile_Info
         ) 
	 ->
         ( deep_syntax::Declaration,
           symbol_table::Symbol_Table
         );

     symbol_naming_label
         :
         deep_syntax::Numbered_Label
         ->
         symbol::Symbol; 


     convert_deep_syntax_named_recursive_values_list_to_deep_syntax_value_declarations_or_recursive_value_declarations
         :
         List( deep_syntax::Named_Recursive_Values )
	 ->
         deep_syntax::Declaration;

     has_modules
         :
         raw_syntax::Declaration
	 ->
         Bool;

}; #  Api TYPECHECKING_UTILITIES 


## Copyright 1992 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
