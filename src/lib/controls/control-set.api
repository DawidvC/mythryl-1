## control-set.api

# Compiled by:
#     src/lib/controls/controls-lib.make6

api Control_Set {

    Control( X )
        =
        control::Control( X );

    Control_Set( X, Y );

    make:  Void -> Control_Set( X, Y );

    member:  ( (Control_Set(X, Y), quickstring::Quickstring)) -> Bool;

    find:    ( (Control_Set(X, Y), quickstring::Quickstring))
	     ->
             Null_Or { control:  Control( X ), info:  Y };

    set:     ((Control_Set(X, Y),  Control(X), Y)) -> Void;
    remove:  ((Control_Set(X, Y), quickstring::Quickstring)) -> Void;
    info_of:   Control_Set(X, Y)  -> Control( X ) -> Null_Or( Y );


    # List the members; the list is ordered by priority.
    #
    # The list_controls' function allows one to specify
    # an obscurity level; controls with equal or higher
    # obscurity are omitted from the list.
    #
    list_controls
	:
        Control_Set(X, Y)
        ->
        List { control:  Control( X ), info:  Y };

    list_controls'
        :
        ( (Control_Set(X, Y), Int))
	->
        List { control:  Control( X ), info:  Y };


    #  Apply a function to the controls in a set 
    #
    apply
	:
        ( { control:  Control( X ), info:  Y } -> Void)
	->
        Control_Set (X, Y) -> Void;

    # Convert the controls in a set to string
    # controls and create a new set for them:
    #
    convert_to_string_controls
        :
        control::Value_Converter( X )
        ->
        Control_Set (X, Y)
	->
        Control_Set (String, Y);
};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
