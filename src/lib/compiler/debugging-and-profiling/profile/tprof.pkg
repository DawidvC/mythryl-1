## tprof.pkg 

# Compiled by:
#     src/lib/compiler/debugging-and-profiling/debugprof.make6


api Tprof {

    # The first (curried) argument is a function that should return TRUE
    # if the operator (specified via inlining info) can return multiple
    # times.  In practical terms, this means call/cc.

   instrument_declaration:  (inlining_information::Inlining_Information -> Bool)
                -> ((symbol_table::Symbol_Table, compile_info::Compile_Info( deep_syntax::Declaration )) )
                -> deep_syntax::Declaration
                -> deep_syntax::Declaration;

};



###           "In his errors a man is true to type.
###            Observe the errors and you will
###            know the man."
###                     -- Kong Fu Zi
###                        (aka "Confucius")



package tprof: (weak)  Tprof {			# Tprof				is from   src/lib/compiler/debugging-and-profiling/profile/tprof.pkg

stipulate

    package sp = symbol_path;			# symbol_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
    package v  = variables_and_constructors;	# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
    package m  = module;			# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
    package b  = symbol_table_entry;		# symbol_table_entry		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg
    package a  = var_home;			# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
    package s  = symbol;			# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg

    include deep_syntax;
    include variables_and_constructors;
    include types;

    tupleexp = deep_syntax_stuff::tupleexp;	# deep_syntax_stuff		is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax-stuff.pkg
    tuplepat = deep_syntax_stuff::tuplepat;

    package bt = core_type_types;		# core_type_types		is from   src/lib/compiler/front/typecheck-stuff/types/core-type-types.pkg

    int_type    =  bt::int_type;
    void_type   =  bt::void_type;
    tuple_type  =  bt::tuple_type;
    ref_tycon   =  bt::ref_tycon;
    array_tycon =  bt::array_tycon;
    my -->      =  bt::(-->);

    infix val  --> ;

herein


    fun bug s
        =
        error_message::impossible ("Prof: " + s);

    anon_sym
        =
        s::make_value_symbol "anon";

    intreftype
        =
        CONSTRUCTOR_TYPE (ref_tycon, [int_type]);

    fun poly1 type
	= 
	TYPE_SCHEME_TYPE {
	    type_scheme_arg_eq_properties => [FALSE],
	    type_scheme                         => TYPE_SCHEME { arity=>1, body=>type }
	};

    # We get this stuff via core_access now.  This way we don't need
    # to know the actual primops...

    #   my updateop
    #       = 
    #       (   t = poly1 (tupleType[CONSTRUCTOR_TYPE (arrayTycon,[TYPE_SCHEME_ARG_I 0]),
    #   			      intType, TYPE_SCHEME_ARG_I 0] --> unitType);
    #   
    #           ORDINARY_VARIABLE { path=sp::SYMBOL_PATH[s::make_value_symbol "unboxed_set"], type=REF t,
    #   	       var_home=a::null_var_home,
    #   	       info=II'::make_primitive_info (p::UNBOXED_SET, t) }
    #       )
    #   
    #   my assignop
    #       = 
    #       (   t = poly1 (tupleType[CONSTRUCTOR_TYPE (refTycon,[TYPE_SCHEME_ARG_I 0]), intType, TYPE_SCHEME_ARG_I 0]
    #   		      --> unitType);
    #   
    #           ORDINARY_VARIABLE { path=sp::SYMBOL_PATH[s::make_value_symbol ":="], type=REF t,
    #   	       var_home=a::null_var_home,
    #   	       info=II'::make_primitive_info (p::ASSIGN, t) }
    #       )
    #   
    #   subop = 
    #     let t = poly1 (tupleType[CONSTRUCTOR_TYPE (arrayTycon,[TYPE_SCHEME_ARG_I 0]), intType] --> TYPE_SCHEME_ARG_I 0)
    #      in ORDINARY_VARIABLE { path=sp::SYMBOL_PATH[s::make_value_symbol "subscript"], type=REF t,
    #                var_home=a::null_var_home,
    #   	     info=II'::make_primitive_info (p::SUBSCRIPT, t) }
    #     end
    #   
    #   derefop = 
    #     let t = poly1 (CONSTRUCTOR_TYPE (refTycon,[TYPE_SCHEME_ARG_I 0]) --> TYPE_SCHEME_ARG_I 0)
    #      in ORDINARY_VARIABLE { path=sp::SYMBOL_PATH [s::make_value_symbol "!"], type=REF t,
    #                var_home=a::null_var_home, info=II'::make_primitive_info (p::DEREF, t) }
    #     end
    #   
    #   addop = 
    #     let t = (tupleType[intType, intType] --> intType)
    #      in ORDINARY_VARIABLE { path=sp::SYMBOL_PATH[s::make_value_symbol "iadd"], type=REF t,
    #                var_home=a::null_var_home, info=II'::make_primitive_info (p::IADD, t) }
    #     end


    fun tmpvar (str, type, make_var)
	= 
	{   symbol = s::make_value_symbol str;

	    ORDINARY_VARIABLE {

              var_home        =>  a::named_var_home (symbol, make_var),
	      inlining_info =>  inlining_information::NULL,

	      path          =>  sp::SYMBOL_PATH [symbol],
	      var_type      =>  REF type
	    };
	};

    fun varexp (v as ORDINARY_VARIABLE { var_type => REF type, path, ... } )
	    =>
	    case (type_stuff::head_reduce_type  type)
	      
	         TYPE_SCHEME_TYPE _
		     =>
		     bug ("poly[" + sp::to_string path + "] in Prof");

		 type'
                     =>
                     VARIABLE_IN_EXPRESSION (REF v, []);		#  VARIABLE_IN_EXPRESSION (REF v, THE type') 
	    esac;

        varexp _
            =>
            bug "090924 in prof";
    end;

    fun clean (path as name ! names)
            =>
            if (s::eq (name, anon_sym) ) names; else path;fi;

        clean x
            =>
            x;
    end;

    fun instrument_declaration' may_return_more_than_once (dictionary, compile_info) deep_syntax_tree
	=
	{   fun get_variable  name
		=
		core_access::get_variable (dictionary, name);

	    updateop =  get_variable "unboxed_set";
	    assignop =  get_variable "assign";
	    subop    =  get_variable "subscript";
	    derefop  =  get_variable "deref";
	    addop    =  get_variable "iadd";

	    make_var
		=
		.make_highcode_variable (compile_info:   compile_info::Compile_Info( deep_syntax::Declaration ));

	    countarrayvar = tmpvar("countarray", CONSTRUCTOR_TYPE (array_tycon, [int_type]), make_var);
	    countarray = varexp countarrayvar;

	    basevar = tmpvar("base", int_type, make_var);
	    baseexp = varexp basevar;

	    currentvar = tmpvar("profCurrent", CONSTRUCTOR_TYPE (ref_tycon, [int_type]), make_var);
	    currentexp = varexp currentvar;

	    register = core_access::get_variable (dictionary, "profile_register");

	    stipulate

		type = case register

			      ORDINARY_VARIABLE { var_type => REF type, ... }
				  =>
				  type;

			      _   =>
				  bug "298374 in prof";
			 esac;

	    herein

		prof_deref_type
		    =
		    case (type_stuff::head_reduce_type  type)

			 CONSTRUCTOR_TYPE (_, [type'])
			     =>
			     type';

			 _   =>
			     bug "298342 in prof";
		    esac;
	    end;

	    entries    =  REF (NIL: List( String ));
	    entrycount =  REF 0;

	    fun make_entry (name)
		=
		i
                where
		    i = *entrycount;

		    entries    :=  "\n" ! name ! *entries;
		    entrycount :=  i+1;
		end;

	    int_upd_type = tuple_type [CONSTRUCTOR_TYPE (array_tycon, [int_type]), int_type, int_type] --> void_type;
	    int_sub_type = tuple_type [CONSTRUCTOR_TYPE (array_tycon, [int_type]), int_type] --> int_type;

	    fun bump_bool_expression (ccvara:  Int)
		= 
		{   highcode_variable
			=
			tmpvar ("indexvar", int_type, make_var);

		    APPLY_EXPRESSION (VARIABLE_IN_EXPRESSION (REF updateop, [int_type]),  
			tupleexp [countarray,
			 INT_CONSTANT_IN_EXPRESSION (integer::from_int ccvara, int_type),
			    APPLY_EXPRESSION (varexp addop,
			      tupleexp [ APPLY_EXPRESSION (VARIABLE_IN_EXPRESSION (REF subop, [int_type]),
					tupleexp [countarray,
						INT_CONSTANT_IN_EXPRESSION (integer::from_int ccvara, int_type)]),
						      INT_CONSTANT_IN_EXPRESSION (integer::from_int 1, int_type)])]);
		};

	    int_ass_type
		=
		tuple_type [CONSTRUCTOR_TYPE (ref_tycon, [int_type]), int_type] --> void_type;

	    fun setcurrentexp (ccvara:  Int)
		=
		{   highcode_variable =   tmpvar("indexvar", int_type, make_var);

		    LET_EXPRESSION (

			VALUE_DECLARATIONS [
			    NAMED_VALUE {
				pattern => VARIABLE_IN_PATTERN  highcode_variable,
				expression => APPLY_EXPRESSION (
						 varexp addop,
						 tupleexp [
						     INT_CONSTANT_IN_EXPRESSION (
							 integer::from_int ccvara,
							 int_type
						     ),
						     baseexp
						 ]
					     ),
				ref_typevar_refs => REF NIL,
				bound_typevar_refs => []
			    }
			],

			APPLY_EXPRESSION (
			    VARIABLE_IN_EXPRESSION (REF assignop, [int_type]),  
			    tupleexp [currentexp, varexp highcode_variable ]
			)
		    );
		};

	    fun instrdec (sp as (names, ccvara), VALUE_DECLARATIONS vbl)
		    => 
		    {   fun getvar (VARIABLE_IN_PATTERN v) => THE v;
			    getvar (TYPE_CONSTRAINT_PATTERN (p, _)) => getvar p;
			    getvar _ => NULL;
			end;

			fun instrvb (named_value as NAMED_VALUE { pattern, expression, ref_typevar_refs, bound_typevar_refs } )
			    =
			    case (getvar pattern)

				 THE (ORDINARY_VARIABLE { inlining_info, path=>sp::SYMBOL_PATH [n], ... } )
				     =>
				     if (inlining_information::is_simple  inlining_info)
					  named_value;
				     else NAMED_VALUE { pattern, ref_typevar_refs,
					     expression=>instrexp (n ! clean names, 
							   ccvara) FALSE expression,
					     bound_typevar_refs };
				     fi;

			       THE (ORDINARY_VARIABLE { inlining_info, ... } )
				   =>
				   if (inlining_information::is_simple inlining_info)
					named_value;
				   else NAMED_VALUE { pattern, expression=>instrexp sp FALSE expression, 
					   ref_typevar_refs, bound_typevar_refs };
				   fi;

			       _ => NAMED_VALUE { pattern, expression=>instrexp sp FALSE expression, 
					ref_typevar_refs, bound_typevar_refs };
			    esac;

		      VALUE_DECLARATIONS (map instrvb vbl);
		    };

	        instrdec (sp as (names, ccvara), RECURSIVE_VALUE_DECLARATIONS rvbl)
                    => 
		    {   fun instrrvb
                                ( NAMED_RECURSIVE_VALUES
                                    { variable as ORDINARY_VARIABLE { path=>sp::SYMBOL_PATH [n], ... },
				      expression, null_or_type, ref_typevar_refs, bound_typevar_refs
                                    }
                                )
                                =>
			        NAMED_RECURSIVE_VALUES { expression=>instrexp (n ! clean names, ccvara) FALSE expression,
				  variable, null_or_type, ref_typevar_refs,
				  bound_typevar_refs };

			   instrrvb _ => bug "RECURSIVE_VALUE_DECLARATIONS in instrdec";
                        end;

		        RECURSIVE_VALUE_DECLARATIONS (map instrrvb rvbl);
		    };

	        instrdec (sp, ABSTRACT_TYPE_DECLARATION { abstract_type_constructors, with_type_constructors, body } )
                    => 
		    ABSTRACT_TYPE_DECLARATION { abstract_type_constructors, with_type_constructors, 
			      body=>instrdec (sp, body) };

	        instrdec (sp, PACKAGE_DECLARATIONS strbl)
		    => 
		    PACKAGE_DECLARATIONS (map (fn named_package =  instrstrb (sp, named_package)) strbl);

	        instrdec (sp, GENERIC_DECLARATIONS fctable)
		    => 
		    GENERIC_DECLARATIONS (map (fn generic_naming => instrfctb (sp, generic_naming); end ) fctable);

	        instrdec (sp, LOCAL_DECLARATIONS (localdec, visibledec))
		    =>
		    LOCAL_DECLARATIONS (instrdec (sp, localdec), instrdec (sp, visibledec));

	        instrdec (sp, SEQUENTIAL_DECLARATIONS decl)
		    => 
		    SEQUENTIAL_DECLARATIONS (map (fn declaration => instrdec (sp, declaration); end ) decl);

	        instrdec (sp, SOURCE_CODE_REGION_FOR_DECLARATION (declaration, source_code_region))
                    => 
		    SOURCE_CODE_REGION_FOR_DECLARATION (instrdec (sp, declaration), source_code_region);

	        instrdec (sp, other)
                    =>
                    other;
	    end 

	    also
	    fun instrstrexp (names, PACKAGE_LET { declaration, expression })
		    => 
		    PACKAGE_LET { declaration => instrdec   ((names, 0), declaration),
				  expression  => instrstrexp (names,     expression)
				};

	        instrstrexp (names, SOURCE_CODE_REGION_FOR_PACKAGE (body, source_code_region))
		    =>
		    SOURCE_CODE_REGION_FOR_PACKAGE (instrstrexp (names, body), source_code_region);

	        instrstrexp (names, x)
                    =>
                    x;
	    end 

	    also
	    fun instrstrb ((names, ccvara), NAMED_PACKAGE { name_symbol=>name, a_package=>str, definition=>def } )
		= 
		NAMED_PACKAGE { a_package=>str, definition=>instrstrexp (name ! names, def), name_symbol=>name }

	    also
	    fun instrfctexp (names, GENERIC_DEFINITION { parameter, definition=>def, parameter_types } )
		    => 
		    GENERIC_DEFINITION { parameter, definition=>instrstrexp (names, def), parameter_types };

	        instrfctexp (names, GENERIC_LET (d, body))
		    => 
		    GENERIC_LET (instrdec((names, 0), d), instrfctexp (names, body));

	        instrfctexp (names, SOURCE_CODE_REGION_FOR_GENERIC (body, source_code_region))
		    =>
		    SOURCE_CODE_REGION_FOR_GENERIC (instrfctexp (names, body), source_code_region);

	        instrfctexp (names, x)
                    =>
                    x;
	    end 

	    also
	    fun instrfctb ((names, ccvara), NAMED_GENERIC { name_symbol=>name, a_generic, definition=>def } )
		=
		NAMED_GENERIC { name_symbol=>name, a_generic, definition=>instrfctexp (name ! names, def) }

	    also
	    fun instrexp (sp as (names, ccvara))
		=
		istail
		where
		    fun istail tail
			=
			instruction
			where
			    fun iinstr expression = istail FALSE expression;
			    fun oinstr expression = istail TRUE expression;

			    fun instrrules transform
				=
				map  (fn (CASE_RULE (p, e)) = CASE_RULE (p, transform e));

			    recursive val instruction
				:
				(Deep_Expression -> Deep_Expression)
				=
				fn RECORD_EXPRESSION l
				       => 
				       RECORD_EXPRESSION (map (fn (lab, expression) = (lab, iinstr expression)) l);

				   VECTOR_EXPRESSION (l, t) => VECTOR_EXPRESSION((map iinstr l), t);

				   SEQUENTIAL_EXPRESSIONS l
				       =>
				       SEQUENTIAL_EXPRESSIONS (seq l)
				       where
					   fun seq [e]     =>  [instruction e];
					       seq (e ! r) =>  (iinstr e) ! (seq r);
					       seq NIL     =>  NIL;
					   end;
				       end;

				   IF_EXPRESSION { test_case, then_case, else_case }
				       =>
				       IF_EXPRESSION { test_case => iinstr test_case,
						       then_case =>  instruction then_case,
						       else_case =>  instruction else_case
						     };

				   AND_EXPRESSION (e1, e2) =>  AND_EXPRESSION (iinstr e1, instruction e2);
				   OR_EXPRESSION  (e1, e2) =>  OR_EXPRESSION  (iinstr e1, instruction e2);

				   WHILE_EXPRESSION { test, expression }
				       =>
				       WHILE_EXPRESSION { test => iinstr test, expression => iinstr expression };

				   expression as APPLY_EXPRESSION (f, a)
				       =>
				       {   fun safe (VARIABLE_IN_EXPRESSION (REF (ORDINARY_VARIABLE { inlining_info, ... } ), _))
						   =>
						   if (inlining_information::is_simple inlining_info)

						       (if (may_return_more_than_once inlining_info ) FALSE;
							else TRUE;fi);
						   else FALSE; fi;

					      safe (SOURCE_CODE_REGION_FOR_EXPRESSION (e, _)) =>  safe e;
					      safe (TYPE_CONSTRAINT_EXPRESSION        (e, _)) =>  safe e;
					      safe (SEQUENTIAL_EXPRESSIONS            [e]   ) =>  safe e;
					      safe _ => FALSE;
					   end;

					   fun operator_instr a
					       = 
					       case a

						    APPLY_EXPRESSION (randf, _) =>
						     if (safe randf ) iinstr; else oinstr;fi;
						  VARIABLE_IN_EXPRESSION _ => oinstr;
						  SOURCE_CODE_REGION_FOR_EXPRESSION (e, _) => operator_instr e;
						  TYPE_CONSTRAINT_EXPRESSION (e, _) => operator_instr e;
						  SEQUENTIAL_EXPRESSIONS [e] => operator_instr e;
						  _ => iinstr;
					       esac;

					   f' = operator_instr a f;

					   if (tail or (safe f))
						APPLY_EXPRESSION (f', oinstr a);
					   else
						  type = reconstruct::expression_type expression;
						    highcode_variable = tmpvar("appvar", type, make_var);
						  LET_EXPRESSION (VALUE_DECLARATIONS [NAMED_VALUE { pattern=>VARIABLE_IN_PATTERN  highcode_variable,
								      expression=>APPLY_EXPRESSION (f', oinstr a),
								      ref_typevar_refs=>REF NIL,
								      bound_typevar_refs => [] } ],
							    SEQUENTIAL_EXPRESSIONS ( [setcurrentexp (ccvara), 
								    varexp highcode_variable]));
					   fi;
				       };

				   TYPE_CONSTRAINT_EXPRESSION (e, t) => TYPE_CONSTRAINT_EXPRESSION (instruction e, t);

				   EXCEPT_EXPRESSION (e, (l, t))
				       =>
				       EXCEPT_EXPRESSION (instruction e, (map rule l, t))
				       where
					   fun rule (CASE_RULE (p, e))
					       = 
					       CASE_RULE (p, SEQUENTIAL_EXPRESSIONS [setcurrentexp ccvara, instruction e]);
				       end;

				   RAISE_EXPRESSION (e, t) => RAISE_EXPRESSION (oinstr e, t);

				   LET_EXPRESSION (d, e) => LET_EXPRESSION (instrdec (sp, d), instruction e);

				   PACK_EXPRESSION (e, t, tycs) => PACK_EXPRESSION (oinstr e, t, tycs);

				   CASE_EXPRESSION (e, l, b)
				       => 
				       CASE_EXPRESSION (iinstr e, instrrules instruction l, b);

				   FN_EXPRESSION (l, t)
				       =>
				       {   fun dot (a, [z])      =>  s::name z ! a;
					       dot (a, x ! rest) =>  dot("." ! s::name x ! a, rest);
					       dot _             =>  bug "no path in instrexp";
					   end;

					    name =  cat (dot ([], names));
					    ccvara' = make_entry (name);
					    highcode_variable = tmpvar("fnvar", t, make_var);

					    exn_match = core_access::get_constructor (dictionary, "MATCH");

					    my CASE_RULE(_, special) = list::last l;

					    FN_EXPRESSION ([CASE_RULE (VARIABLE_IN_PATTERN  highcode_variable,
						   SEQUENTIAL_EXPRESSIONS ([bump_bool_expression (ccvara'),
							    setcurrentexp (ccvara'),
							    CASE_EXPRESSION (varexp highcode_variable,
							    instrrules (instrexp (anon_sym ! names,
									   ccvara') TRUE) l,
								 TRUE)])),
						      CASE_RULE (WILDCARD_PATTERN, RAISE_EXPRESSION (CONSTRUCTOR_EXPRESSION (exn_match, []),
								    reconstruct::expression_type special))
						     ], t);
					  };

				   SOURCE_CODE_REGION_FOR_EXPRESSION (e, source_code_region)
				       =>
				       SOURCE_CODE_REGION_FOR_EXPRESSION (instruction e, source_code_region);

				   e => e;

				end; 

			end;		# where (fn istail)

		end; #  function instrexp 

	    deep_syntax_tree1
		=
		instrdec (([], 0), deep_syntax_tree);


	    # The following break the invariant set in the deep-syntax.pkg where
	    # the pattern in each NAMED_VALUE naming should bind single variables !;
	    # The following NAMED_VALUE only binds monomorphic variables, so it is
	    # probably ok for the time being. We definitely should clean it
	    # up some time in the future. (ZHONG)    XXX BUGGO FIXME


	    deep_syntax_tree2
		= 
		LOCAL_DECLARATIONS ( VALUE_DECLARATIONS [NAMED_VALUE { pattern=>tuplepat [VARIABLE_IN_PATTERN basevar,
					      VARIABLE_IN_PATTERN countarrayvar,
					      VARIABLE_IN_PATTERN currentvar],
				 expression=>APPLY_EXPRESSION (APPLY_EXPRESSION (VARIABLE_IN_EXPRESSION (REF derefop,
							  [prof_deref_type]),
						   varexp register),
					    STRING_CONSTANT_IN_EXPRESSION (cat (reverse *entries))),
				 ref_typevar_refs => REF NIL,
				 bound_typevar_refs => [] } ],
		       deep_syntax_tree1);

	       deep_syntax_tree2;
	};

    fun instrument_declaration mrmto (dictionary, compile_info) deep_syntax_tree
        = 
	if *runtime_internals::profiling_control::prof_mode				# runtime_internals	is from   src/lib/std/src/nj/runtime-internals.pkg

	     instrument_declaration' mrmto (dictionary, compile_info) deep_syntax_tree;
	else
             deep_syntax_tree;
        fi;

end; #  with
};   #  package tprof 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
