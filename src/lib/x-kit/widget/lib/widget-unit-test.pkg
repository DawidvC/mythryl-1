## widget-unit-test.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6

# NB: We must compile this locally via
#         xclient-internals.make6
#     instead of globally via
#         src/lib/test/unit-tests.make6
#     like most unit tests, in order to have
#     access to required library internals.

# Run by:
#     src/lib/test/all-unit-tests.pkg

stipulate
    include unit_test;
    include make7::scripting_globals;
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package ctl =  thread_scheduler_control;			# thread_scheduler_control	is from   src/lib/thread-kit/src/unix/thread-scheduler-control.pkg
    package tr  =  tracing;					# tracing			is from   src/lib/src/lib/thread-kit/src/lib/tracing.pkg
    package xtr =  xtracing;					# xtracing			is from   src/lib/x-kit/xclient/src/stuff/xtracing.pkg
    package sox =  socket_stuff;				# socket_stuff			is from   src/lib/internet/socket-stuff.pkg
    package xc  =  xcore;					# xcore				is from   src/lib/x-kit/xclient/xcore.pkg
    package xau =  xauthentication;				# xauthentication		is from   src/lib/x-kit/xclient/src/stuff/xauthentication.pkg
    package w   =  widget;					# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
    #
    tracefile   =  "widget-unit-test.trace.log";
herein

    package widget_unit_test {

	name = "src/lib/x-kit/widget/lib/widget-unit-test.pkg";

	trace =  xtr::print_if  xtr::io_tracing;		# Conditionally write strings to tracing.log or whatever.

	default_time_quantum					# Copied from src/lib/x-kit/widget/lib/run-xkit.pkg
	    =
	    time::from_milliseconds 20;


	fun make_root_window
                display_or_null								# Allow overriding of the DISPLAY environment variable setting.
	    =
	    {   my  ( xdisplay,								# Typically from $DISPLAY environment variable.
                      xauthentication:  Null_Or(xc::Xauthentication)			# Typically from ~/.Xauthority
                    )
		    =
		    xau::get_xdisplay_string_and_xauthentication  display_or_null;

		trace .{ sprintf "widget_unit_test: DISPLAY variable is set to '%s'" xdisplay; };

		trace .{ sprintf "widget_unit_test: Now  calling w::make_root_window"; };

		THE (w::make_root_window (xdisplay, xauthentication))
		except
		    xcore::XSERVER_CONNECT_ERROR s
			=
			{   file::write
				( file::stderr,
				  string::cat
				    [ "run_xkit: unable to open display \"",   xdisplay,   "\"\n",
				      "  ",   s,   "\n"
				    ]
				);

		            trace .{ sprintf "widget_unit_test: make_root_window: Unable to open display %s: %s" xdisplay s; };

			    NULL;
			};
	      };

	fun run ()
	    =
	    {   printf "\nDoing %s:\n" name;   

		# Remove any old version of the tracefile:
		#
		if (isfile tracefile)
		    #
		    unlink tracefile;
		fi;

		# Open tracelog file and
                # select tracing level:
		#
		{   include tracing;				# tracing			is from   src/lib/src/lib/thread-kit/src/lib/tracing.pkg
		    #
		    log_trace_messages  (TO_FILE tracefile);
		    #
		    enable all_tracing;				# Gross overkill.
#		    enable xtr::xkit_tracing;			# Lesser overkill.
#		    enable xtr::io_tracing;			# Saner yet.	
		};

	        ctl::start_up_thread_scheduler'
		    default_time_quantum
		   .{
			assert  (ctl::thread_scheduler_is_running ());

                        case (make_root_window NULL)
			    #
			    THE root_window
				=>
				{   trace .{ sprintf "widget_unit_test: run: Successfully constructed root window"; };
				    assert TRUE;
				};
			    NULL =>
				{   trace .{ sprintf "widget_unit_test: run: Failed to construct root window, skipping remaining tests"; };
				    assert FALSE;
				};
			esac;	

#		        my  ( display_name:     String,						# Typically from $DISPLAY environment variable.
#			      xauthentication:  Null_Or(xcore::Xauthentication)			# Typically from ~/.Xauthority
#			    )
#			    =
#			    xau::get_xdisplay_string_and_xauthentication  NULL;

#			trace .{ sprintf "widget_unit_test: DISPLAY variable is set to '%s'" display_name; };

#			trace .{ sprintf "widget_unit_test: Now  calling dy::open_xdisplay"; };

#   			{   xdisplay =  dy::open_xdisplay { display_name, xauthentication };	# Raises dy::XSERVER_CONNECT_ERROR on failure.
#   				
#   
#   			    trace .{ sprintf "widget_unit_test: Done calling dy::open_xdisplay"; };
#   
#   			    exercise_window_stuff  xdisplay;
#   
#   #                           do_it (make_root_window NULL);
#   
#   			} except
#   			    dy::XSERVER_CONNECT_ERROR string
#   				=
#   				{   fprintf file::stderr "widget_unit_test: Could not connect to X server: %s\n" string;
#   				    fprintf file::stderr "widget_unit_test: *** OMITTING XCLIENT UNIT TESTS. ***\n";
#   
#   			            trace .{ sprintf "widget_unit_test: Could not connect to X server: %s" string; };
#   			            trace .{         "widget_unit_test: *** OMITTING XCLIENT UNIT TESTS. ***";     };
#   
#   		                    assert FALSE;
#   				};
#   
			trace .{ sprintf "xclient-unit-test.pkg: Now  calling ctl::shut_down_thread_scheduler"; };

			ctl::shut_down_thread_scheduler  winix::process::success;
		    };

		# Close tracelog file:
		#
		{   include tracing;				# tracing			is from   src/lib/src/lib/thread-kit/src/lib/tracing.pkg

		    tracing_to =  currently_tracing_to ();

		    log_trace_messages  TO_STDERR;

		    case tracing_to
			#
			TO_STREAM stream =>  file::close_output stream;
			#
			_                =>  ();
                    esac;
		};

		assert TRUE;

		summarize_unit_tests  name;
	    };
    };

end;