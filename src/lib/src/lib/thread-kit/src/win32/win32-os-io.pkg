## win32-os-io.pkg
## COPYRIGHT (c) 1996 Bell Laboratories.



# Replacement of winix::IO package for Win32.
# It implements a simple type of polling for files.


package Win32OSIO {

    package W32G = Win32::general
    package W32FS = Win32::file_system
    type word32 = unt32::word

    exception SYSTEM_ERROR = winix::SYSTEM_ERROR

    enum Io_Descriptor = IODESC of REF( W32G::hndl )		#  winix::io::Io_Descriptor 

    #  hash: can't assume 32 bits 
    fun hash (IODESC (REF (0wxffffffff:  W32G::hndl))) = 0wx7fffffff:  word 
      | hash (IODESC (REF h)) = (unt::from_int o W32G::unt::toInt) h

    fun compare (IODESC (REF wa), IODESC (REF wb)) = W32G::unt::compare (wa, wb)

    enum Io_Descriptor_Kind = K of String

    package Kind =
      pkg
	file = K "FILE"
	dir = K "DIR"
	symlink = K "LINK"
	tty = K "TTY"
	pipe = K "PIPE"
	socket = K "SOCKET"
	device = K "DEV"
      end

    fun kind (IODESC (REF h)) = (case W32FS::getFileAttributes' h
	   of NULL => K "UNKNOWN"
	    | THE w => if W32FS::isRegularFile h
		then Kind::file
		else Kind::dir
	  )		# end case

    # No win32 polling devices for now 
    noPolling = "polling not implemented for win32 for this device/type"

    enum Poll_Request = POLL_DESC of Io_Descriptor
    enum Poll_Result       = POLL_RESULT of Poll_Request
	
    fun pollDesc id = THE (POLL_DESC id) #  NULL 
    fun pollToIODesc (POLL_DESC pd) = pd #  raise exception FAIL("pollToIODesc: "$noPolling) 
    exception BAD_POLL

    fun pollIn pd = pd #  raise exception FAIL("pollIn: "$noPolling) 
    fun pollOut pd = pd #  raise exception FAIL("pollOut: "$noPolling) 
    fun pollPri pd = pd #  raise exception FAIL("pollPri: "$noPolling) 

    local 
      my poll' : (List( word32 *  Null_Or( int32::Int * Int ) ->  List( word32 ) )
          = 
	    unsafe::c_interface::c_function "WIN32-IO" "poll"
      fun toPollInfo (w) = POLL_RESULT (POLL_DESC (IODESC (REF w)))
      fun fromPollDesc (POLL_DESC (IODESC (REF w))) = w
    in
    fun poll (pdl, t) = let
	  timeout = (case t
		 of (THE t) =>
		      THE (time::to_seconds t, int::fromLarge (time::to_microseconds t))
		  | NULL => NULL)
	  info = poll' (list::map fromPollDesc pdl, timeout)
	  in
	    list::map toPollInfo info
	  end
    end #  end local 
		    
    fun isIn pd = raise exception FAIL("isIn: "$noPolling)
    fun isOut pd = raise exception FAIL("isOut: "$noPolling)
    fun isPri pd = raise exception FAIL("isPri: "$noPolling)

    fun infoToPollDesc (POLL_RESULT pd) = pd #  raise exception FAIL("infoToPollDesc: "$noPolling) 

};


## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
