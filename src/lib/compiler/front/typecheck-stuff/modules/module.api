## module.api
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# Datastructures describing module-level declarations.
#
# In particular, the datatypes
#
#     Api,
#     Package,
#     Generic,
#     Generic_Api,
#
# provide the value types bound by the symbol table
# for those four namespaces -- see OVERVIEW section in
#
#     src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
#
#
#
# NB:, the 'Module_Map' type defined in
#
#     src/lib/compiler/front/typecheck-stuff/modules/module-map.pkg
#
# is a low-maintainance alternative to the the 'Module_Tree'
# type we define here.  See comments in above file for more info.



api Module {

    Share_Spec
        =
        List( symbol_path::Symbol_Path );


    Api = API  Api_Record
        | ERRONEOUS_API


    also
    Api_Element
        = TYPE_CONSTRUCTOR_IN_API  {

            module_stamp:      module_path::Module_Stamp,
	    type_constructor:  types::Type_Constructor,
	    is_a_replica:      Bool,
	    scope:             Int
	  }

	| PACKAGE_IN_API  {

            module_stamp:  module_path::Module_Stamp,
	    an_api:        Api,
	    definition:    Null_Or( (Package_Definition, Int) ),
	    slot:          Int
	  }

	| GENERIC_IN_API  {

            module_stamp:   module_path::Module_Stamp,
	    a_generic_api:  Generic_Api,
	    slot:           Int
	  }

	| VALUE_IN_API  {

            type: types::Type,
	    slot:   Int
	  }

	| ENUM_CONSTRUCTOR_IN_API  {

            a_datatype:  types::Constructor,
            slot:        Null_Or( Int )
	  }



    also
    Generic_Api 

	= GENERIC_API  {

            kind:                 Null_Or( symbol::Symbol ),
	    parameter_api:        Api,
	    parameter_variable:   module_path::Module_Stamp,
	    parameter_symbol:     Null_Or( symbol::Symbol ),
	    body_api:             Api
          }

	| ERRONEOUS_GENERIC_API



    also
    External_Definition

	= EXTERNAL_DEFINITION_OF_TYPE_CONSTRUCTOR  {

	    path:              symbol_path::Symbol_Path, #  The (inward) path to the spec being defined 
	    type_constructor:  types::Type_Constructor,  #  The definition, typically relativized.      
	    relative:          Bool                      #  Does type_constructor contain typechecked_package paths?  
	  } 

	| EXTERNAL_DEFINITION_OF_PACKAGE  (symbol_path::Symbol_Path, Package_Definition)



    also
    Package_Definition

	= CONSTANT_PACKAGE_DEFINITION  Package                           #  Constant 
        | VARIABLE_PACKAGE_DEFINITION  (Api, module_path::Module_Path)  #  relative 




    #  ------------------------- packages and generics ---------------------- 

    also
    Package

        = A_PACKAGE  Package_Record

	| ERRONEOUS_PACKAGE

	| PACKAGE_API {
            an_api:       Api,
            module_path:  module_path::Module_Path
          }



    also
    Generic
        = GENERIC  Generic_Record
	| ERRONEOUS_GENERIC



    #  ----------------------- macroExpansion-related definitions -------------------- 

    also
    Typechecker_Dictionary_Entry 		#  Elements of a Typechecker_Dictionary: 

        = TYPE_CONSTRUCTOR_ENTRY  Typechecked_Type_Constructor
	| PACKAGE_ENTRY           Typechecked_Package
	| GENERIC_ENTRY           Typechecked_Generic
	| ERRONEOUS_ENTRY

	       # We have no typechecked versions yet for
               # values, constructors or exceptions,
               # but this may change.



    also
    Generic_Closure						# Application of a generic

        = GENERIC_CLOSURE {
            parameter_module_stamp:   module_path::Module_Stamp,
	    body_package_expression:  Package_Expression,
	    typechecker_dictionary:   Typechecker_Dictionary
	  }



    also
    Stamp_Expression

        = MAKE_STAMP                				# Generate a new stamp.
	| GET_STAMP  Package_Expression
#       | CONST of stamp::Stamp					# An existing stamp 




    also
    Typechecked_Type_Constructor_Expression			#  Expression evaluating to a type constructor typechecked_package: 

        = TYPE_VARIABLE_TYPE_CONSTRUCTOR  module_path::Module_Path	#  selection from current Typechecker_Dictionary 
	| CONSTANT_TYPE_CONSTRUCTOR  types::Type_Constructor		#  Actual type_constructor 
	| FORMAL_TYPE_CONSTRUCTOR    types::Type_Constructor		#  formal type_constructor 



    also
    Package_Expression

        = VARIABLE_PACKAGE  module_path::Module_Path 
	| CONSTANT_PACKAGE  Typechecked_Package
	| PACKAGE           { stamp: Stamp_Expression,  module_declaration: Module_Declaration }
	| APPLY             (Generic_Expression, Package_Expression)  
	| ABSTRACT_PACKAGE  (Api, Package_Expression)
	| FORMAL_PACKAGE    Generic_Api
	| PACKAGE_LET       { declaration: Module_Declaration,
                              expression:  Package_Expression
                            }
	| COERCED_PACKAGE   { boundvar: module_path::Module_Stamp,
			      raw: Package_Expression,
                              coercion: Package_Expression
                            }

	    # COERCED_PACKAGE is similar to
            #    PACKAGE_LET (m::PACKAGE_DECLARATION (boundvar, raw), coercion),
	    # but with special treatment of inverse_path propagation to support
	    # accurate type names in generic results where the generic has
	    # a result api constraint.



    also
    Generic_Expression

        = VARIABLE_GENERIC  module_path::Module_Path 
	| CONSTANT_GENERIC  Typechecked_Generic
	| LAMBDA            { parameter: module_path::Module_Stamp, body: Package_Expression }
	| LAMBDA_TP         { parameter: module_path::Module_Stamp, body: Package_Expression, an_api: Generic_Api }
	| LET_GENERIC       (Module_Declaration, Generic_Expression)



    also
    Module_Expression

        = TYPE_CONSTRUCTOR_EXPRESSION  Typechecked_Type_Constructor_Expression
	| PACKAGE_EXPRESSION           Package_Expression
	| GENERIC_EXPRESSION           Generic_Expression
	| DUMMY_GENERIC_EVALUATION_EXPRESSION
	| ERRONEOUS_ENTRY_EXPRESSION



    also
    Module_Declaration

        = TYPE_CONSTRUCTOR_DECLARATION  (module_path::Module_Stamp, Typechecked_Type_Constructor_Expression)
	| PACKAGE_DECLARATION           (module_path::Module_Stamp, Package_Expression, symbol::Symbol)
	| GENERIC_DECLARATION           (module_path::Module_Stamp, Generic_Expression)
	| SEQUENTIAL_DECLARATIONS       List( Module_Declaration )
	| LOCAL_DECLARATION             (Module_Declaration, Module_Declaration)
	| ERRONEOUS_ENTRY_DECLARATION
	| EMPTY_GENERIC_EVALUATION_DECLARATION



    also
    Typechecker_Dictionary

        = MARKED_TYPECHECKER_DICTIONARY  Typechecker_Dictionary_Record
	| NAMED_TYPECHECKER_DICTIONARY   (module_path::module_stamp_map::Map( Typechecker_Dictionary_Entry ), Typechecker_Dictionary)
	| NULL_TYPECHECKER_DICTIONARY
	| ERRONEOUS_ENTRY_DICTIONARY



    also
    Module_Tree

        = TYPE_CONSTRUCTOR_MODTREE_NODE         types::Primitive_Type_Constructor_Record
	| API_MODTREE_NODE                      Api_Record
	| PACKAGE_MODTREE_NODE                  Package_Record
	| GENERIC_MODTREE_NODE                  Generic_Record
	| TYPECHECKER_DICTIONARY_MODTREE_NODE   Typechecker_Dictionary_Record
	| MODTREE_BRANCH                        List( Module_Tree )



    withtype
    Stub_Info
        =
        {   owner:       picklehash::Picklehash,
	    lib:         Bool,
	    module_tree: Module_Tree
	}

    also
    Api_Record
        =
        {   stamp:              stamp::Stamp,
	    name:               Null_Or( symbol::Symbol ),
	    closed:             Bool,

	    symbols:            List( symbol::Symbol ), 
	    elements:           List( (symbol::Symbol, Api_Element)),
	    property_list:      property_list::Property_List,

	    contains_generic:   Bool,
	    type_sharing:       List( Share_Spec ),
	    package_sharing:    List( Share_Spec ),
	    stub:               Null_Or( Stub_Info )
	}

    also
    Typechecker_Dictionary_Record
        =
        {   stamp:                    stamp::Stamp,
	    typechecker_dictionary:   Typechecker_Dictionary,
	    stub:                     Null_Or( Stub_Info )
	}

    also
    Typechecked_Package
        =
        {   stamp:                  stamp::Stamp,
	    typechecker_dictionary: Typechecker_Dictionary,
	    property_list:          property_list::Property_List,
	    inverse_path:           inverse_path::Inverse_Path,
	    stub:                   Null_Or( Stub_Info )
	}

    also								# inlining_information	is from   src/lib/compiler/front/typecheck-stuff/basics/inlining-information.pkg
    Package_Record
        =
        {   an_api:               Api,
	    typechecked_package:  Typechecked_Package,
	    var_home:             var_home::Var_Home,
	    inlining_info:        inlining_information::Inlining_Information
	}

    also
    Typechecked_Generic
        =
        {   stamp:                  stamp::Stamp,
	    generic_closure:        Generic_Closure,
	    property_list:          property_list::Property_List,
	    type_constructor_path:  Null_Or( types::Type_Constructor_Path ),
	    inverse_path:           inverse_path::Inverse_Path,
	    stub:                   Null_Or( Stub_Info )
	}

    also
    Generic_Record
        =
        {   a_generic_api:         Generic_Api,
	    typechecked_generic:   Typechecked_Generic,
	    var_home:              var_home::Var_Home, 
	    inlining_info:         inlining_information::Inlining_Information
	}


    also
    Typechecked_Type_Constructor		# The stamp and arith inside types::Type_Constructor are critical:
        =
        types::Type_Constructor			# types	is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg

    also
    Elements
        =
        List ((symbol::Symbol, Api_Element));


#    also constraint  
#      = { my_path:  symbol_path::Symbol_Path, its_ancestor:  instrep, its_path:  symbol_path::Symbol_Path }


     bogus_typechecked_package:      Typechecked_Package;
     bogus_typechecked_generic:      Typechecked_Generic;

}; #  Api Module 
