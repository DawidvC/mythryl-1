#
# This module computes frequencies when given branch probabilities.
# The last module still didn't work on irreducible flowgraphs!
# I'm rewriting it using a completely different algorithm.
#
# -- Allen Leung



###             "He who joyfully marches to music in rank
###              and file has already earned my contempt.
###              He has been given a large brain by mistake,
###              since for him the spinal cord would suffice."
###
###                                -- Albert Einstein



generic package ComputeFrequencies2
   (package derived_graph:  Derived_Graph
    package freq:  FREQ
   ) : COMPUTE_FREQUENCIES2
{

   package derived = derived_graph
   package w       = freq
   package g       = graph
   package a       = rw_vector
   package ht      = hash_table

   my op div   = w::div
   my THE inf = w::max_int

   fun compute_frequencies
         { cfg=g::GRAPH cfg, derived as g::GRAPH dg,
          loopMultiplier, nodeFreq, edgeFreq, branchProb, isTakenBranch } =
   let ENTRY             = case cfg.entries () of
                                [ENTRY] => ENTRY
                               | _ => raise exception graph::NOT_SINGLE_ENTRY
       N                 = cfg.capacity ()

       fun hash (i, j, _) = unt.<<(unt::from_int i, 0w16) + unt::from_int j
       fun equal ((a: Int, b: Int, _), (c, d, _)) = a = c and b = d
       exception NOT_THERE
       edgeProbs = ht::make_table (hash, equal) (10, NOT_THERE) 
       addProb   = ht::set edgeProbs
       getProb   = ht::lookup edgeProbs

       fun computeEdgeProb (n, n') =
       let fun divide_evenly (edges) =
           let W' = 100 div (length edges)
               fun loop ([], w) = ()
                 | loop([e], w) = addProb (e, w)
                 | loop (e . es, w) = (addProb (e, W'); loop (es, w-W'))
           in  loop (edges, 100) end
           edges = cfg.out_edges n 
       in  if n == ENTRY then divide_evenly edges else
           case edges of
             [] => ()
           | [e] => addProb (e, 100)
           | [e1, e2] =>  
             let prob = branchProb n'
                 prob = if isTakenBranch e1 then prob else 100 - prob
             in  addProb (e1, prob);
                 addProb (e2, 100-prob)
             end
           | es => divide_evenly es
       end

       #  Initialize the set of edge probabilities 
       cfg.forall_nodes computeEdgeProb

       visited = a::rw_vector (N,-1)

       fun process (scc as stamp . _, _) = 
       let apply (fn b => a::update (visited, b, stamp)) scc
           fun collect ([], inFreq, isLoop) = (inFreq, isLoop)
             | collect (n . ns, inFreq, isLoop) =
               let fun loop ([], inFreq, isLoop) = (inFreq, isLoop)
                     | loop((i, j, e) . es, inFreq, isLoop) = 
                       if a::sub (visited, i) == stamp
                       then loop (es, inFreq, TRUE)
                       else loop (es, inFreq + 
                              *(nodeFreq (cfg.node_info i)) * getProb e,
                               isLoop)
                   my (inFreq, isLoop) = loop (dg.in_edges n, inFreq, isLoop)
               in  collect (ns, inFreq, isLoop) end
           my (freq, isLoop) = collect (scc, 0, FALSE)
           freq = if stamp == ENTRY then
                         W.*(w::from_int 100, length (cfg.out_edges ENTRY)) 
                      else if isLoop then freq * loopMultiplier div 100
                      else freq div 100
       in  apply (fn b => nodeFreq (cfg.node_info b) := freq) scc
       end

   in  graph_strongly_connected_components::scc (reversed_graph_view::rev_view derived) process ();
       ht::keyed_apply (fn ((i, _, e), w) => 
                   edgeFreq e := (w * *(nodeFreq (cfg.node_info i))) div 100)
            edgeProbs
   end except OVERFLOW => ()

}
