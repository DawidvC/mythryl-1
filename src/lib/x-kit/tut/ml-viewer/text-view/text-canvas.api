# text-canvas.api

# Compiled by:
#     src/lib/x-kit/tut/ml-viewer/ml-viewer-app.make6

stipulate
    include threadkit;				# threadkit	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xc =  xcore;			# xcore		is from   src/lib/x-kit/xclient/xcore.pkg
    package xf =  xfont;			# xfont		is from   src/lib/x-kit/xclient/xfont.pkg
    package xg =  xgeometry;			# xgeometry	is from   src/lib/x-kit/xclient/xgeometry.pkg
herein

    api Text_Canvas {

	Text_Canvas;
	    #
	    # A text canvas is a proto-widget
	    # for drawing text.

	make_text_canvas
	    :
	    {
	      window:  xc::Window,
	      size:    xg::Size,
	      font:    xf::Font,
	      #
	      foreground:  Null_Or( xc::Color_Spec ),
	      background:  Null_Or( xc::Color_Spec )
	    }
	    ->
	    Text_Canvas;

	clear:  Text_Canvas -> Void;
	    #
	    # Clear a canvas to its background color.

	Typeball;
	    #
	    # Specifies canvas, font, color, etc. for writing text. 

	Typeball_Val
	  = TBV_FONT  xf::Font			# Font.
	  | TBV_LINEHEIGHT Int			# Total height of line.
	  | TBV_ASCENT     Int			# Height of line above baseline.
	  | TBV_UNDERLINE  Bool			# Underline mode.
	  #
	  | TBV_FOREGROUND xc::Color_Spec	# Foreground (text) color.
	  | TBV_BACKGROUND xc::Color_Spec	# Background color.
	  | TBV_UNDERGRND  xc::Color_Spec	# Color of underline.
	  ; 

	make_typeball
	    :
	    (Text_Canvas, List( Typeball_Val ))
	    ->
	    Typeball;
	    #
	    # Create a new typeball.

	default_typeball
	    :
	    Text_Canvas -> Typeball;
	    #
	    # Return the default typeball for the canvas.

	copy_typeball
	    :
	    (Typeball, List( Typeball_Val ))
	    ->
	    Typeball;
	    #
	    # Copy a typeball, updating some attributes. 

	Text_Elem
	  #
	  = TEXT { tb:       Typeball,
		   text:     String
		 }
	  | FILL { tb:       Typeball,
		   chr_wid:  Int,
		   pix_wid:  Int
		 }
	  ;

	pix_width_of:  Text_Elem -> Int;
	    #
	    # Return the width (in pixels) of a text element.

	chr_width_of
	    :
	    Text_Elem -> Int;
	    #
	    # Return the width (in characters)
	    # of a text element.

	text_width:  Typeball -> String -> Int;
	    #
	    # Return the width of a text string
	    # using the given typeball.

	substr:  (Text_Elem, Int, Int) -> Text_Elem;
	    #
	    # Return the substring of a text element.

	font_of:  Typeball -> xf::Font;
	    #
	    # Return the font of the typeball.

	blt:  Text_Canvas
	      ->
	      { to_pos:    xg::Point,
		from_box:  xg::Box
	      }
	      ->
	      Mailop( List( xg::Box ) );
	      #
	      #  Do a copy_blt on the canvas.

	clear_box:  Text_Canvas -> xg::Box -> Void;
	    #
	    # Clear the specified rectangle
	    # to the background color.

	draw:  { at:  xg::Point, elems:  List( Text_Elem ) }
	       ->
	       Void;

	draw_text:  Typeball -> { at:  xg::Point, text: String } -> Void;
	draw_fill:  Typeball -> { at:  xg::Point, wid:  Int    } -> Void;

    /**
      #  Cursors 
	enum text_cursor
	  = NoCursor
	  | BoxCursor of ??
	  | OutlineCursor of ??
	  | CaretCursor of ??
	  | BarCursor of ??
	  | XtermCursor of ??
	  | GlyphCursor of ??

	my setCursor:  (text_canvas * text_cursor) -> Void
	    #  set the type of the cursor 

	my moveCursor:  (text_canvas * char_coord) -> Void
	    #  set the current cursor position 

	my cursorOn:  text_canvas -> Void
	    #  enable display of the text cursor 

	my cursorOff:  text_canvas -> Void
	    #  Disable display of the text cursor 
    **/

    };			#  api Text_Canvas

end;