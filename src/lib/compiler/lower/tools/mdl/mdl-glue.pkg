/*
 * This file just links everything together
 */

package mdl_abstract_syntax_utilities = mdl_abstract_syntax_utilities (mdl_raw_syntax)

package mdl_pp = mdl_raw_syntax_prettyprinter_g (mdl_abstract_syntax_utilities)

package mdl_type_utilities = mdl_type_utilities (mdl_pp)

package mdl_dictionary = mdl_dictionary (mdl_type_utilities)

package mdl_rewriter = mdl_raw_syntax_rewriter_g (mdl_raw_syntax)
package mdl_trans = mdl_raw_syntax_translation_g
     (package RawSyntaxTreePP       = mdl_pp
      package RawSyntaxTreeRewriter = mdl_rewriter
     )

package mdl_compile = mdl_compile
   (package RawSyntaxTreePP    = mdl_pp
    package Dictionary      = mdl_dictionary
    package raw_syntax_stuff  = mdl_abstract_syntax_utilities
    package Rewriter = mdl_rewriter
    package Trans    = mdl_trans
    package Consts   = mdl_raw_syntax_constants_g (mdl_raw_syntax)
    package raw_syntax_stuff  = mdl_abstract_syntax_utilities
    package TypeUtils= mdl_type_utilities
   )

package mdl_typing = mdl_typing
   (package Dictionary      = mdl_dictionary
    package TypeUtil = mdl_type_utilities
    package raw_syntax_stuff  = mdl_abstract_syntax_utilities
    package RawSyntaxTreePP    = mdl_pp
    package Comp     = mdl_compile
   )

package mdl_rtl_tools = mdl_rtl_tools
   (package raw_syntax_stuff   = mdl_abstract_syntax_utilities
    package codetree_rtl = mdl_codetree_rtl
   )

package lowcode_types = lowcode_types
   (package Comp = mdl_compile
    package rtl  = mdl_codetree_rtl
   )

package mdl_rtl_comp = mdl_rtl_comp
   (package Comp = mdl_compile
    package Typing = mdl_typing
    package RTLTools = mdl_rtl_tools
    package lowcode_types = lowcode_types
   )

package mdl_parser = 
   mdl_parser_driver_g
      (package RawSyntaxTreePP = mdl_pp
       mdl_mode = TRUE
       use mdl_raw_syntax
       fun new_cell (id, nickname) = 
            CELLdecl { id=id, nickname=nickname,
                     from=REF 0, to=REF -1, alias=NULL, count=NULL,
                     bits=0, 
                     print=LAMBDAexp[CLAUSE([WILDCARD_PATTERN], NULL,
                                            LITexp (STRINGlit id))],
                     aggregable=FALSE,
                     defaults=[]
                    }
       extra_cells = 
            [new_cell("CELLSET", "cellset")
            ]
      )

package mdl_g = mdl_g
(  package Comp       = mdl_compile
   package Parser     = mdl_parser
   package cells      = MDLGenCells (mdl_compile)
   package instruction      = MDLGenInstr (mdl_compile)
   package shuffle    = mdl_dummy_g (mdl_compile)
   package asm        = MDLGenAsm (mdl_compile)
   package mc         = MDLGenMC (mdl_compile)
   package jumps      = mdl_dummy_g (mdl_compile)
   package Dasm       = mdl_dummy_g (mdl_compile)
   package props      = MDLGenInstructionProps (mdl_rtl_comp)
   package rewrite    = MDLGenRewrite (mdl_rtl_comp)
   package RTLComp    = mdl_rtl_comp
   package gc_rtl_props   = MDLGenRTLProps (mdl_rtl_comp)
   package gc_ssa_props   = MDLGenSSAProps (mdl_rtl_comp)
  /* package DelaySlots = MDLDelaySlots (mdl_compile)
   package SchedProps = MDLSchedProps (mdl_rtl_comp)
   */
)
