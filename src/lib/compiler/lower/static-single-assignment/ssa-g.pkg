
# This module can be used to build a stripped down SSA graph directly from
# a Codetree stream.



###               "I get into the meanest, nastiest frame of mind I can manage,
###                and I write the nastiest [testing] code I can think of.
###
###                Then I turn around and embed that in even nastier
###                constructions that are nearly obscene."
###
###                                        -- Donald Knuth on software testing.



generic package SSAGen
   (package codetree:  Codetree
    package control_flow_graph:     Control_Flow_Graph
    package instruction_properties:  Instruction_Properties
    package ssa:     SSA 
      where control_flow_graph = control_flow_graph
      where i::Constant = codetree::Constant
      sharing instruction_properties::I = control_flow_graph::I
      sharing codetree::Stream::P = control_flow_graph::P
   ) : FLOWGRAPH_GEN =
pkg
   package t = codetree
   package i = SSA::I
   package c = i::C
   package s = t::Stream
   package builder = ControlFlowGraphGen
      (package control_flow_graph = control_flow_graph
       package stream = S
       package instruction_properties = instruction_properties
      )
 
   type flowgraph = control_flow_graph::cfg

   fun error msg = lowcode_error_message::error("SSAGen", msg)
   
   fun newStream { compile, flowgraph } =
   let cfg = case flowgraph of
                   THE cfg => cfg
                 | NULL => control_flow_graph::new (c::regmap())
       my { stream, next } = Builder::builder cfg
       my s::STREAM { begin_cluster, end_cluster, pseudoOp,
                    emit, end_procedure, comment, annotation, define_local_label,
                    define_global_label, alias, ... } = stream

       fun endCFG a = (end_cluster a;
                       next (control_flow_graph::new (c::regmap()));
                       compile cfg
                      )

       fun phi   _ = error "phi"
   in  s::STREAM { begin_cluster,
                end_cluster  = endCFG,
                pseudoOp,
                emit,
                end_procedure,
                comment,
                annotation,
                define_local_label,
                define_global_label,
                alias,
                phi
               }
   end
end

