
# This api abstracts out the capability of the flowgraph
# used in the SSA infrastruture.  This way makes it easier to 
# substitute another control_flow_graph implementation in the future.
#
# -- Allen Leung (leunga@cs.nyu.edu)


###                     "Each problem that I solved
###                      became a rule which served
###                      afterwards to solve other
###                      problems."
###
###                                -- Rene Descartes


api SSA_FLOWGRAPH =
api

   package i:  Instruction_Set
   package w:  FREQ

   type info      #  graph info 
   type block     #  Basic block type 
   type edge_info #  edge information 
   type cfg =  graph::graph( block, edge_info, info )	 #  the cfg 


   # Operations on the cfg

   my regmap:          cfg -> i::C.regmap
   my annotations:     cfg -> Ref( Annotations::annotations )


   # Operations on basic blocks

   my headerText:      block -> String
   my instructions:           Ref( List(  block -> i::instruction ) )
   my freq:            block -> Ref( w::freq )
   my liveOut:         block -> i::C.cellset 


   # Operations on edges

   my setBranch:       cfg * graph::node_id * Bool -> i::instruction  
   my branchOf:        edge_info -> Null_Or( Bool )


   # Viewing

   my viewStyle:       cfg -> graph_layout::style  (block, edge_info, info)

end

api SSA_FLOWGRAPH_LIVENESS =
api

   package control_flow_graph:  SSA_FLOWGRAPH
   package i:    Instruction_Set
       sharing control_flow_graph::I = I

   my liveness :
       { cfg:      control_flow_graph::cfg,
         liveOut:  control_flow_graph::block graph::node -> List( i::C.cell ),
         defUse:   control_flow_graph::block graph::node -> List( i::C.cell ) * List( i::C.cell )
       } -> Void

   my getLiveness:  control_flow_graph::cfg -> graph::node_id ->
                           { List( livein: i::C.cell ), liveout:  List( i::C.cell ) }

end
