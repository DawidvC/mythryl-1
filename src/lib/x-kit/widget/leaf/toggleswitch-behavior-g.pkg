## toggleswitch-behavior-g.pkg
#
# Implement behavior of buttons which toggle
# between ON and OFF states.
#
# The visual appearance of these toggles is
# specified separately, by the Button_Appearance
# argument to the generic.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6



# TODO: Allow disabling of highlighting 



#               "GOTO statement considered harmful"
#
#                           - C.A.R. Hoare supplied
#                             title to the famous
#                             E. W. Dijkstra letter in
#                             CACM 11, 3 (March, 1968) 


stipulate
    include threadkit;						# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package bb =  button_base;					# button_base		is from   src/lib/x-kit/widget/leaf/button-base.pkg
    package tt =  toggle_type;					# toggle_type		is from   src/lib/x-kit/widget/leaf/toggle-type.pkg
    package w  =  widget;					# widget		is from   src/lib/x-kit/widget/basic/widget.pkg
    package wa =  widget_attribute;				# widget_attribute	is from   src/lib/x-kit/widget/lib/widget-attribute.pkg
    package xg =  xgeometry;					# xgeometry		is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xi =  xinput;					# xinput		is from   src/lib/x-kit/xclient/xinput.pkg
herein

    generic package  toggleswitch_behavior_g  (

	button_appearance:  Button_Appearance			# Button_Appearance	is from   src/lib/x-kit/widget/leaf/button-appearance.api
    )
    : (weak)  Toggleswitch_Factory					# Toggleswitch_Factory	is from   src/lib/x-kit/widget/leaf/toggleswitch-factory.api

    {


	attributes
	    =
	    [ (wa::is_active,  wa::BOOL,  wa::BOOL_VAL TRUE),
	      (wa::is_set,     wa::BOOL,  wa::BOOL_VAL FALSE)
	    ];

	fun realize { kidplug, window, size } (state, (plea_slot, event_slot, bv))
	    =
	    {   my  xi::KIDPLUG { from_mouse', from_other', ... }
		    =
		    xi::ignore_keyboard  kidplug;

		mslot =  make_mailslot ();

		rcvm  =  take'  mslot;

		drawf =  button_appearance::config (bv, window, size);

		fun do_plea (bb::GET_BUTTON_ACTIVE_FLAG reply_1shot, state)
			=> 
			{   set (reply_1shot, bb::get_button_active_flag  state);
			    #
			    state;
			};

		    do_plea (bb::SET_BUTTON_ACTIVE_FLAG arg, state)
			=>
			bb::set_button_active_flag (arg, state);

		    do_plea (bb::GET_SIZE_CONSTRAINT reply_1shot, state)
			=> 
			{   set (reply_1shot, button_appearance::bounds bv);
			    #
			    state;
			};

		    do_plea (bb::GET_ARGS reply_1shot, state)
			=> 
			{   set (reply_1shot, button_appearance::window_args bv);
			    #
			    state;
			};

		    do_plea (bb::GET_STATE reply_1shot, state)
			=>
			{   set (reply_1shot, bb::get_state state);
			    #
			    state;
			};

		    do_plea (bb::SET_STATE arg, state)
			=>
			bb::set_state (arg, state);

		    do_plea (_, state)
			=>
			state;
		end;


		fun do_mom (xi::ETC_REDRAW _, me as (state, drawf))
			=> 
			{   drawf state;
                            me;
                        };

		    do_mom (xi::ETC_RESIZE (xg::BOX { wide, high, ... } ), (state, _))
			=> 
			(state, button_appearance::config (bv, window, xg::SIZE { wide, high } ));

		    do_mom (_, me)
			=>
			me;
		end;


		fun do_mouse (bb::MSE_IN v, me as ((s, r, FALSE), drawf))
			=>
			if (v == r )

			    me;

			else
			    state' = (s, v, FALSE);

			    drawf state';

			    give
			      (
				event_slot,

				v  ??  tt::TOGGLE_READY
				   ::  tt::TOGGLE_NORMAL
			      );

			    (state', drawf);
			fi;

		    do_mouse (bb::MSE_IN v, ((s, _, TRUE), drawf))
			=>
			{   state' = (s, v, TRUE);

			    drawf state';
			    (state', drawf);
			};

		    do_mouse (bb::MSE_DOWN bttn, ((s, _, _), drawf))
			=>
			{   state' = (s, TRUE, TRUE);

			    drawf state';
			    (state', drawf);
			};

		    do_mouse (bb::MSE_UP bttn, (state, drawf))
			=>
			if (#2 state)

			    state' = (bb::flip (#1 state), TRUE, FALSE);

			    drawf state';

			    give  (event_slot,  tt::TOGGLE_SET (bb::get_state state'));

			    (state', drawf);

		       else
			    state' = (#1 state, FALSE, FALSE);

			    drawf state';

			    give  (event_slot,  tt::TOGGLE_NORMAL);

			    (state', drawf);
		       fi;
		end;

		fun active_cmd_p (me as (state, drawf))
		    =
		    select [

			take'  plea_slot
			    ==>
			    (fn mailop
				=
				{   state' = do_plea (mailop, state); 

				    if (state' == state)

					active_cmd_p me;

				    else
					drawf state'; 

					if (bb::get_button_active_flag state' )
					    #
					    give  (event_slot,  tt::TOGGLE_SET (bb::get_state state'));
					    #
					    active_cmd_p (state', drawf);
					else
					    if (#2 state or #3 state)
						#
						give  (event_slot,  tt::TOGGLE_NORMAL);
					    fi;

					    inactive_cmd_p (state', drawf);
					fi;
				    fi;
				}),


			rcvm        ==>  (fn m      =  active_cmd_p (do_mouse (m, me))),
			from_other' ==>  (fn mailop =  active_cmd_p (do_mom (xi::envelope_contents mailop, me)))
		    ]

		also
		fun inactive_cmd_p (me as (state, drawf))
		    =
		    select [

			take'  plea_slot
			    ==>
			    (fn mailop
				=
				{   state' = do_plea (mailop, state); 

				    if (state == state' )

					inactive_cmd_p me;
				    else
					drawf state';

					if (bb::get_button_active_flag state')
					    #	
					    active_cmd_p (state', drawf);
					else
					    give  (event_slot,  tt::TOGGLE_SET (bb::get_state state'));
					    #	
					    inactive_cmd_p (state', drawf);
					fi;
				    fi;
				}),

			rcvm ==>
			    fn bb::MSE_IN v =>  inactive_cmd_p ((#1 state, v, #3 state), drawf);
					  _ =>  inactive_cmd_p me;
			    end,


			from_other' ==>
			    (fn mailop =  inactive_cmd_p (do_mom (xi::envelope_contents  mailop,  me)))
		    ];

		make_thread  "toggle_control from_mouse"  .{
		    #
		    bb::mse_p (from_mouse', mslot);
		};

		if (bb::get_button_active_flag  state)     active_cmd_p (state, drawf);
		else                                     inactive_cmd_p (state, drawf);
		fi;
	    };

	fun init (dictionary as (plea_slot, event_slot, bv)) state
	    =
	    loop state
	    where 

		fun loop state
		    =
		    case (take  plea_slot)
			#		  
			bb::GET_BUTTON_ACTIVE_FLAG reply_1shot => {  set (reply_1shot, bb::get_button_active_flag state);  loop state;  };
			bb::GET_STATE              reply_1shot => {  set (reply_1shot, bb::get_state state);               loop state;  };
			bb::GET_SIZE_CONSTRAINT    reply_1shot => {  set (reply_1shot, button_appearance::bounds bv);                 loop state;  };
			bb::GET_ARGS               reply_1shot => {  set (reply_1shot, button_appearance::window_args bv);            loop state;  };
			bb::SET_BUTTON_ACTIVE_FLAG arg         => loop (bb::set_button_active_flag (arg, state));
			bb::SET_STATE arg                      => loop (bb::set_state (arg, state));
			bb::DO_REALIZE arg                     => realize arg (state, dictionary);
		    esac;
	    end;

	fun make_toggleswitchxxx (root_window, view, args)
	    =
	    {   attributes
		    =
		    w::find_attribute (w::attributes (view, attributes, args));

		plea_slot  =  make_mailslot ();
		event_slot =  make_mailslot ();

		state = bb::make_widget_state
			  ( wa::get_bool (attributes wa::is_active),
			    wa::get_bool (attributes wa::is_set   )
			  );

		bv = button_appearance::make_button_appearance (root_window, view, args);

		fun getval msg ()
		    =
		    {   reply_1shot =  make_oneshot_maildrop ();
			#
			give  (plea_slot,  msg reply_1shot);
			#
			get  reply_1shot;
		    };

		make_thread  "toggle_control"  .{
		    #
		    init (plea_slot, event_slot, bv)
			 (state, FALSE, FALSE);
		};

		tt::TOGGLE
		  {
		    plea_slot,

		    mailop  =>  take'  event_slot,

		    widget
			=>
			w::make_widget
			  {
			    root_window,
			    args                     =>   getval bb::GET_ARGS,
			    size_preference_thunk_of =>   getval bb::GET_SIZE_CONSTRAINT,
			    realize                  =>   fn arg =  give  (plea_slot,  bb::DO_REALIZE arg)
			  }
		  };
	    };

	fun make_toggleswitch_with_click_callback (root_window, view, args) click_callback 
	    = 
	    {   my tt::TOGGLE { widget, plea_slot, mailop }
		    =
		    make_toggleswitchxxx (root_window, view, args);

		fun listener ()
		    =
		    listener
			case (do_mailop  mailop)   
			    #
			    tt::TOGGLE_SET b => click_callback b;
			    _                => ();
			esac;


		make_thread  "toggle_control command"  listener;

		tt::TOGGLE
		  {
		    widget,
		    #
		    plea_slot,
		    #
		    mailop =>  get' (make_oneshot_maildrop ())
		  };
	    };

    };					# generic package toggle_control_g 

end;

## COPYRIGHT (c) 1991, 1994 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
