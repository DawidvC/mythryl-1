#
# This module performs critical path reduction.
# Jobs include:
#   1. Transform conditional branches into conditional moves.
#   2. Migrate branches out of loops
#
# -- Allen Leung (leunga@cs.nyu.edu)

generic package SSACPR (SSA:  SSA) : SSA_OPTIMIZATION =
pkg

   package ssa  = SSA
   package control_flow_graph  = SSA::control_flow_graph
   package rtl  = SSA::RTL
   package t    = RTL::T
   package g    = graph
   package a    = rw_vector

   type flowgraph = SSA::ssa

   name = "Critical Path Reduction"

   infix ||-
 
   fun run (SSA as g::GRAPH ssa) =
   let my Dom as g::GRAPH dom = SSA::dom SSA
       my CFG as g::GRAPH cfg = SSA::cfg SSA
       my [ENTRY] = dom.entries ()
       my { sources, phis, ops, sinks, ... } = SSA::nodes SSA

       fun walk X = 
       let 
       in  apply walk (dom.next X)
       end

   in  walk ENTRY;
       SSA
   end

end
