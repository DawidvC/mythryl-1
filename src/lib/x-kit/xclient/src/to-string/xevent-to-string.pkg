## xevent-to-string.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6


stipulate
    package et = event_types;		# event_types		is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
herein

    api Xevent_To_String {
	xevent_name:      et::x::Event -> String;
    };

    package xevent_to_string: (weak) Xevent_To_String {


	fun xevent_name (et::x::KEY_PRESS _) => "KeyPress";
	    xevent_name (et::x::KEY_RELEASE _) => "KeyRelease";
	    xevent_name (et::x::BUTTON_PRESS _) => "ButtonPress";
	    xevent_name (et::x::BUTTON_RELEASE _) => "ButtonRelease";
	    xevent_name (et::x::MOTION_NOTIFY _) => "MotionNotify";
	    xevent_name (et::x::ENTER_NOTIFY _) => "EnterNotify";
	    xevent_name (et::x::LEAVE_NOTIFY _) => "LeaveNotify";
	    xevent_name (et::x::FOCUS_IN _) => "FocusIn";
	    xevent_name (et::x::FOCUS_OUT _) => "FocusOut";
	    xevent_name (et::x::KEYMAP_NOTIFY _) => "KeymapNotify";
	    xevent_name (et::x::EXPOSE _) => "Expose";
	    xevent_name (et::x::GRAPHICS_EXPOSE _) => "GraphicsExpose";
	    xevent_name (et::x::NO_EXPOSE _) => "NoExpose";
	    xevent_name (et::x::VISIBILITY_NOTIFY _) => "VisibilityNotify";
	    xevent_name (et::x::CREATE_NOTIFY _) => "CreateNotify";
	    xevent_name (et::x::DESTROY_NOTIFY _) => "DestroyNotify";
	    xevent_name (et::x::UNMAP_NOTIFY _) => "UnmapNotify";
	    xevent_name (et::x::MAP_NOTIFY _) => "MapNotify";
	    xevent_name (et::x::MAP_REQUEST _) => "MapRequest";
	    xevent_name (et::x::REPARENT_NOTIFY _) => "ReparentNotify";
	    xevent_name (et::x::CONFIGURE_NOTIFY _) => "ConfigureNotify";
	    xevent_name (et::x::CONFIGURE_REQUEST _) => "ConfigureRequest";
	    xevent_name (et::x::GRAVITY_NOTIFY _) => "GravityNotify";
	    xevent_name (et::x::RESIZE_REQUEST _) => "ResizeRequest";
	    xevent_name (et::x::CIRCULATE_NOTIFY _) => "CirculateNotify";
	    xevent_name (et::x::CIRCULATE_REQUEST _) => "CirculateRequest";
	    xevent_name (et::x::PROPERTY_NOTIFY _) => "PropertyNotify";
	    xevent_name (et::x::SELECTION_CLEAR _) => "SelectionClear";
	    xevent_name (et::x::SELECTION_REQUEST _) => "SelectionRequest";
	    xevent_name (et::x::SELECTION_NOTIFY _) => "SelectionNotify";
	    xevent_name (et::x::COLORMAP_NOTIFY _) => "ColormapNotify";
	    xevent_name (et::x::CLIENT_MESSAGE _) => "ClientMessage";
	    xevent_name (et::x::MODIFIER_MAPPING_NOTIFY ) => "ModifierMappingNotify";
	    xevent_name (et::x::KEYBOARD_MAPPING_NOTIFY _) => "KeyboardMappingNotify";
	    xevent_name (et::x::POINTER_MAPPING_NOTIFY ) => "PointerMappingNotify";
	end;

    };
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
