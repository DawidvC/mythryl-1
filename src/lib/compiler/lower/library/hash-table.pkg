#
# Hash table.
#
# -- Allen Leung


###              "An organisation that treats its programmers as morons
###               will soon have programmers that are willing and able
###               to act like morons only."
###
###                                        -- Bjarne Stroustrup


package hash_table :> HASHTABLE =
pkg

   package a = rw_vector

   type table (X,Y) = (X -> word) * 
                        (X * X -> Bool) *
                        exn *
                        Ref( a::Rw_Vector( List(X * Y) ) )  * 
                        Ref( Int )

   infix ====

   fun create { hash,====, exn, size } = (hash, op====, exn, REF (a::rw_vector (size,[])), REF 0)
   fun copy (hash, op====, exn, REF a, REF c) = 
         (hash, op====, exn, REF (a::tabulate (a::length a, fn i => a::sub (a, i))), REF c)
   fun size (_, _, _, _, REF n) = n
   fun clear (_, _, _, REF a, c) =
       let fun f -1 = ()
             | f i  = (a::update (a, i,[]); f (i - 1))
       in  f (a::length a - 1); c := 0 end
   fun insert (hash, op====, exn, A as REF a, c) (k, v) =
   let N  = a::length a
       h  = unt::toIntX (hash k) mod N
       es = a::sub (a, h)
       fun ins ([], es') = (a::update (a, h, (k, v) . es'); 
                           c := *c + 1;
                           if *c >= N then grow (hash, A, N) else ()
                          )
         | ins ((e as (k', _)) . es, es') = 
            if k ==== k' then a::update (a, h, (k, v) . es'@es) 
            else ins (es, e . es')
   in  ins (es,[])
   end

   and grow (hash, A as REF a, N) =
       let M = N + N
           M = if M < 13 then 13 else M
           a' = a::rw_vector (M,[])
           fun ins (k, v) = let h = unt::toIntX (hash k) mod M
                           in  a::update (a', h, (k, v) . a::sub (a', h)) end
       in  a::apply (fn es => apply ins es) a;
           A := a'
       end

   fun remove (hash, op====, exn, REF a, c) k =
   let N  = a::length a
       h  = unt::toIntX (hash k) mod N
       es = a::sub (a, h)
       fun del ([], es') = ()
         | del ((e as (k', _)) . es, es') = 
            if k ==== k' then (a::update (a, h, es'@es); c := *c - 1)
            else del (es, e . es')
   in  del (es,[])
   end
 
   fun lookup (hash, op====, exn, REF a, _) k =
   let N  = a::length a
       h  = unt::toIntX (hash k) mod N
       fun find [] = raise exception exn
         | find ((k', v) . es) = if k ==== k' then v else find es
   in  find (a::sub (a, h))
   end

   fun apply f (_, _, _, REF A, _) = a::apply (list::apply f) A

   fun map f (_, _, _, REF A, _) =
   let fun fl ([], x) = x
         | fl((k, v) . es, x) = f (k, v) . fl (es, x)
   in  a::fold_right fl [] A end

   fun fold f x (_, _, _, REF A, _) = 
   let fun fl ([], x) = x
         | fl((k, v) . es, x) = f (k, v, fl (es, x))
   in  a::fold_right fl x A end

end

