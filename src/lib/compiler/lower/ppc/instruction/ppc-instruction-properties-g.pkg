## ppc-instruction-properties-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/ppc.make6

# We are invoked from:
#
#     src/lib/compiler/codegen/ppc/ppc-codetree.pkg

generic package ppc_instruction_properties_g (

    package instruction_set
	:
	Instruction_Set_Ppc;				# Instruction_Set_Ppc		is from   src/lib/compiler/lower/ppc/instruction/instruction-set-ppc.api

    package codetree_eval
        :
        Codetree_Eval					# Codetree_Eval			is from   src/lib/compiler/lower/codetree/codetree-eval.api
        where codetree == instruction_set::codetree;

    package codetree_hash
        :
        Codetree_Hash					# Codetree_Hash			is from   src/lib/compiler/lower/codetree/codetree-hash.api
        where codetree == instruction_set::codetree;
)

: (weak) Instruction_Properties				# Instruction_Properties	is from   src/lib/compiler/lower/instruction/instruction-properties.api

{
    package instruction_set = instruction_set;
    package cells           = instruction_set::cells;
    package codetree        = instruction_set::codetree;

    package i = instruction_set;
    package c = cells;
    package t = codetree;
    package cb= cells_basis;				# cells_basis			is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    exception NEGATE_CONDITIONAL;

    fun error msg = lowcode_error_message::error("ppc_instruction_properties", msg);

    Kind = IK_JUMP | IK_NOP | IK_INSTRUCTION | IK_COPY | IK_CALL 
		  | IK_CALL_WITH_CUTS | IK_PHI | IK_SOURCE | IK_SINK;

    Target = LABELLED  label::Label | FALLTHROUGH | ESCAPES;

    # This architecture does not have
    # a dedicated zero register:
    #
    fun zero_r ()
        =
        c::reg cb::REGISTER 0;

    fun instruction_kind (i::NOTE { instruction, ... } ) => instruction_kind instruction;

	instruction_kind (i::COPY _) => IK_COPY;

	instruction_kind (i::BASE_INSTRUCTION instruction)
            =>
            {
		fun eq_test to
                    =
                    unt::bitwise_and (unt::from_int to, 0u4) != 0u0;

		fun trap_always { to, ra, si }
		    = 
		    case si
		       i::REG_OP rb
                           => 
			   if (cells_basis::same_color (ra, rb) and eq_test (to) ) IK_JUMP;
			   else IK_INSTRUCTION;fi;

		       i::IMMED_OP 0
			   =>
			   if (cells_basis::register_id ra == 0 and eq_test (to) ) IK_JUMP;
			   else IK_INSTRUCTION;fi;

		       _ => error "trapAlways: neither RegOp nor ImmedOp (0)";
		   esac;

		case instruction
		    (i::BC _) => IK_JUMP;
		    (i::BCLR _) => IK_JUMP;
		    (i::BB _) => IK_JUMP;
		    (i::TW t) => trap_always (t);
		    (i::TD t) => trap_always (t);
		    (i::ARITHI { oper=>i::ORI, rt, ra, im=>i::IMMED_OP 0 } ) => 
			if (cb::register_id rt == 0 and cb::register_id ra == 0 ) IK_NOP;
			else IK_INSTRUCTION;fi;
		    (i::CALL { cuts_to=>_ ! _, ... } ) => IK_CALL_WITH_CUTS;
		    (i::CALL _) => IK_CALL;
		    (i::PHI _)    => IK_PHI;
		    (i::SOURCE _) => IK_SOURCE;
		    (i::SINK _)   => IK_SINK;
		     _ => IK_INSTRUCTION;
		esac;
	    };

	instruction_kind _ => error "instrKind";
    end;

    fun move_instruction (i::COPY _) => TRUE;
	move_instruction (i::NOTE { instruction, ... } ) => move_instruction instruction;
	move_instruction  _ => FALSE;
    end;

    fun nop ()
        =
        i::arithi { oper=>i::ORI, rt=>zero_r(), ra=>zero_r(), im=>i::IMMED_OP 0 };

    fun move_tmp_r (i::COPY { tmp, ... } )
	    => 
	    case tmp 
	         THE (i::DIRECT r) => THE r;
		 THE (i::FDIRECT f) => THE f;
		 _ => NULL;
	    esac;

       move_tmp_r (i::NOTE { instruction, ... } )
           =>
           move_tmp_r instruction;

       move_tmp_r _
           =>
           NULL;
    end;

    fun move_dst_src (i::COPY { dst, src, ... } ) => (dst, src);
	move_dst_src (i::NOTE { instruction, ... } ) => move_dst_src instruction;
	move_dst_src _ => error "move_dst_src";
    end;


    fun branch_targets (i::BASE_INSTRUCTION (i::BC { bo=>i::ALWAYS, address,  ... } ))
	    => 
	    case address
	         i::LABEL_OP (t::LABEL lab) => [LABELLED lab];
		_ => error "branchTargets: BC: ALWAYS";
             esac;


	branch_targets (i::BASE_INSTRUCTION (i::BC { address, ... } ))
	    => 
	    case address
	         i::LABEL_OP (t::LABEL lab) => [LABELLED lab, FALLTHROUGH];
		 _ => error "branchTargets: BC";
	    esac;

	branch_targets (i::BASE_INSTRUCTION (i::BCLR { labels, bo=>i::ALWAYS, ... } ))
	    => 
	    case labels    [] => [ESCAPES];  _ => map LABELLED labels; esac;

	branch_targets (i::BASE_INSTRUCTION (i::BCLR { labels,  ... } ))
	    => 
	    case labels    [] => [ESCAPES, FALLTHROUGH];  _ => map LABELLED labels; esac;

	branch_targets (i::BASE_INSTRUCTION (i::BB { address=>i::LABEL_OP (t::LABEL lab), lk } ))
	    =>
	    [LABELLED lab];

	branch_targets (i::BASE_INSTRUCTION (i::CALL { cuts_to, ... } ))
	    =>
	    FALLTHROUGH ! map LABELLED cuts_to;

	branch_targets (i::BASE_INSTRUCTION (i::TD _)) =>   [ESCAPES];
	branch_targets (i::BASE_INSTRUCTION (i::TW _)) =>   [ESCAPES];

	branch_targets (i::NOTE { instruction, ... } )
	    =>
	    branch_targets instruction;

	branch_targets _
	    =>
	    error "branchTargets";
    end;


    fun label_op l
        =
        i::LABEL_OP (t::LABEL l);


    fun set_jump_target (i::NOTE { note, instruction }, l)
            =>
            i::NOTE { note, instruction=>set_jump_target (instruction, l) };

	set_jump_target (i::BASE_INSTRUCTION (i::BC { bo as i::ALWAYS, bf, bit, address, fall, lk } ), lab)
            => 
	    i::bc { bo, bf, bit, fall, lk, address=>label_op lab };

	set_jump_target (i::BASE_INSTRUCTION (i::BB { address, lk } ), lab)
            =>
            i::bb { address=>label_op (lab), lk };

	set_jump_target _
            =>
            error "set_jump_target";
    end;


    fun set_branch_targets { i=>i::NOTE { note, instruction }, t, f }
            => 
	    i::NOTE { note, instruction => set_branch_targets { i=>instruction, t, f }};

	set_branch_targets { i=>i::BASE_INSTRUCTION (i::BC { bo=>i::ALWAYS, bf, bit, address, fall, lk } ), ... }
	    => 
	    error "setBranchTargets";

	set_branch_targets { i=>i::BASE_INSTRUCTION (i::BC { bo, bf, bit, address, fall, lk } ), t, f }
	    => 
	    i::bc { bo, bf, bit, lk, address=>label_op t, fall=>label_op f };

	set_branch_targets _
	    =>
	    error "setBranchTargets";
    end;


    fun jump lab
        =
        i::bb { address=>i::LABEL_OP (t::LABEL lab), lk=>FALSE };


    fun negate_conditional (i::NOTE { note, instruction }, l)
            => 
	    i::NOTE { note, instruction => negate_conditional (instruction, l) };

        negate_conditional (i::BASE_INSTRUCTION (i::BC { bo, bf, bit, address, fall, lk } ), lab)
           =>
           {   bo' = case bo 
			 i::TRUE => i::FALSE;
			 i::FALSE => i::TRUE;
			 i::ALWAYS => error "negateCondtional: ALWAYS";
			 i::COUNTER { eq_zero, cond=>NULL } => i::COUNTER { eq_zero=>not eq_zero, cond=>NULL };
			 i::COUNTER { eq_zero, cond=>THE b } => error "negateConditional: COUNTER";
		     esac;

		i::bc { bo=>bo', bf, bit, address=>label_op lab, fall, lk };
	    };

        negate_conditional _
	    =>
	    error "negateConditional";
    end;

    immed_range = { lo=> -32768, hi=>32767 };

    fun load_immed { immed, t }
	    = 
	    i::arithi
	      { oper=>i::ADDI, rt=>t, ra=>zero_r(), 
	        im => if (immed_range.lo <= immed and immed <= immed_range.hi)   i::IMMED_OP immed;
                      else                                                       i::LABEL_OP (i::codetree::LITERAL (integer::from_int immed));
                      fi
              };

    fun load_operand { opn, t }
        = 
	i::arithi { oper=>i::ADDI, rt=>t, ra=>zero_r(), im=>opn };


    fun hash_opn (i::REG_OP r) => cb::hash_cell r;
        hash_opn (i::IMMED_OP i) => unt::from_int i;
        hash_opn (i::LABEL_OP l) => codetree_hash::hash l;
    end;

    fun eq_opn (i::REG_OP a, i::REG_OP b) => cb::same_color (a, b);
	eq_opn (i::IMMED_OP a, i::IMMED_OP b) => a == b;
	eq_opn (i::LABEL_OP a, i::LABEL_OP b) => codetree_eval::(====) (a, b);
	eq_opn _ => FALSE;
    end;

    fun def_use_r instruction
	=
	{
	    fun ppc_du instruction
                =
                {
		    fun operand (i::REG_OP r, uses) =>  r ! uses;
		        operand(_, uses)            =>      uses;
                    end;

		    case instruction
			i::LL { rt, ra, d, ... } => ([rt], operand (d,[ra]));
			i::LF { ra, d, ... } => ([], operand (d,[ra]));
			i::ST { rs, ra, d, ... } => ([], operand (d,[rs, ra]));
			i::STF { ra, d, ... } => ([], operand (d,[ra]));
			i::UNARY { rt, ra, ... } => ([rt], [ra]);
			i::ARITH { rt, ra, rb, ... } => ([rt], [ra, rb]);
			i::ARITHI { rt, ra, im, ... } => ([rt], operand (im,[ra]));
			i::ROTATE { ra, rs, sh, ... } => ([ra], [rs, sh]);
			i::ROTATEI { ra, rs, sh, ... } => ([ra], operand (sh,[rs]));
			i::COMPARE { ra, rb, ... } => ([], operand (rb,[ra]));
			i::MTSPR { rs, ... } => ([], [rs]);
			i::MFSPR { rt, ... } => ([rt], []);
			i::TW { to, ra, si } => ([], operand (si,[ra]));
			i::TD { to, ra, si } => ([], operand (si,[ra]));
			i::CALL { def, uses, ... } => (c::get_reg def, c::get_reg uses);
			i::LWARX { rt, ra, rb, ... } => ([rt], [ra, rb]);
			i::STWCX { rs, ra, rb, ... } => ([], [rs, ra, rb]); 
			_ => ([], []);
		   esac;
	    };

	    case instruction

		i::NOTE { instruction, ... } => def_use_r instruction;

		i::LIVE { regs, ... } => ([], c::get_reg regs);
		i::DEAD { regs, ... } => (c::get_reg regs, []);

		i::BASE_INSTRUCTION (i) => ppc_du (i);

		i::COPY { kind, dst, src, tmp, ... }
		    =>
		    {
			my (d, u)
			    =
			    case kind    cb::REGISTER => (dst, src);
					 _            => ([], []);
			    esac;

			case tmp 
			    THE (i::DIRECT r) => (r ! d, u);
			    THE (i::DISPLACE { base, ... } ) => (d, base ! u);
			    _ => (d, u);
			esac;
		  };
	    esac;
	};

    fun def_use_f instruction
        =
        {
	    fun ppc_du instruction
		= 
		case instruction
		    i::LF { ft, ... } => ([ft],[]);
		    i::STF { fs, ... } => ([], [fs]);
		    i::FCOMPARE { fa, fb, ... }  => ([], [fa, fb]);
		    i::FUNARY { ft, fb, ... }  => ([ft], [fb]);
		    i::FARITH { ft, fa, fb, ... }  => ([ft], [fa, fb]);
		    i::FARITH3 { ft, fa, fb, fc, ... }  => ([ft], [fa, fb, fc]);
		    i::CALL { def, uses, ... } => (c::get_freg def, c::get_freg uses);
		    _ => ([], []);
		esac;

	    case instruction
		i::NOTE { instruction, ... } => def_use_f instruction;

		i::LIVE { regs, ... } => ([], c::get_freg regs);
		i::DEAD { regs, ... } => (c::get_freg regs, []);

		i::BASE_INSTRUCTION i => ppc_du (i);

		i::COPY { kind, dst, src, tmp, ... }
                    =>
                    {   my (d, u)
                            =
                            case kind   cb::FLOAT_REGISTER => (dst, src);
                                        _                  => ([],[]);
                            esac;

			case tmp
			    THE (i::FDIRECT f) => (f ! d, u);
			    _                  => (d, u);
			esac;
		  };
            esac;
	};

    fun def_use_cc instruction
        =
        error "defUseCC: not implemented";


    fun def_use cb::REGISTER => def_use_r;
	def_use cb::FLOAT_REGISTER => def_use_f;
	def_use cb::CONDITION_CODES => def_use_cc;
	def_use _ => error "defUse";
    end;


    #  Annotations 
    #
    fun get_notes (i::NOTE { instruction, note } )
            => 
	    {   my (i, an) = get_notes instruction;
                (i, note ! an);
            };

        get_notes i
            =>
            (i,[]);
    end;


    fun annotate (instruction, note)
        =
        i::NOTE { instruction, note };


    # Replicate an instruction
    #
    fun replicate (i::NOTE { instruction, note } )
            =>
            i::NOTE { instruction => replicate instruction, note };

        replicate (i::COPY { kind, size_in_bits, tmp=>THE _, dst, src } )
            =>  
	    i::COPY { kind, size_in_bits, tmp=>THE (i::DIRECT (c::new_reg())), dst, src };

        replicate i
            =>
            i;
    end;
};




## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
