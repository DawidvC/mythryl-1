#
# The molecule viewer example from
# ``OpenGL Programming for the X Window System'', Mark J. Kilgard, 
# Addison Wesley Developers Press, 1996..
#
# NOT finished

package MoleculeViewer {

   use C mlrep
        Gtk gtk_enums GtkGadgets    #  Import Gtk stuff 
        OpenGLMacros OpenGLUMacros #  Import OpenGL stuff 

   enum atom_kind = 
       ATOM of { name:    String,
                 radius:  real,
                 color:   color
               }
   and molecule =
       MOLECULE of { atoms:  List( atom ),
                     min:    pos,
                     size:   pos,
                     maxdim:  real
                   }
   withtype color = real * real * real
   and      pos   = real * real * real
   and      atom  = atom_kind * pos


   LO_RES_SPHERE = 0w0:  unsigned::word 
   HI_RES_SPHERE = 0w1:  unsigned::word

   /*-----------------------------------------------------------------------
    *
    * How to render a molecule
    *
    *-----------------------------------------------------------------------*/
   mat_specular    = (0.72, 0.8, 0.93, 1.0)
   mat_diffuse     = (1.0, 1.0, 1.0, 1.0)
   mat_shininess   = 128.0
   light_ambient   = (0.1, 0.1, 0.1, 1.0)
   light_diffuse   = (1.0, 1.0, 1.0, 1.0)
   light_specular  = (1.0, 1.0, 1.0, 1.0)
   light_position  = (1.0, 1.0, 1.5, 1.0)
   light0_position = (-1.0, -1.0, 1.5, 0.0)

   sphereVersion  = LO_RES_SPHERE

   fun renderInit() =
   let quadObj = gluNewQuadric::f()
   in  gluQuadricDrawStyle::f (quadObj, GLU_FILL);
       gluQuadricOrientation::f (quadObj, GLU_OUTSIDE);
       gluQuadricNormals::f (quadObj, GLU_SMOOTH);

       #  hi-detail sphere 
       glNewList::f (HI_RES_SPHERE, GL_COMPILE);
       gluSphere::f (quadObj, 1.0, 32, 32);
       glEndList::f();

       gluDeleteQuadric::f (quadObj);

       glEnable::f GL_DEPTH_TEST; 
       glEnable::f GL_CULL_FACE; 
       glClearColor::f (0.4, 0.4, 0.4, 0.0);
       glClearDepth::f (1.0);
       glEnable::f GL_NORMALIZE;
       glShadeModel::f GL_SMOOTH;

       glLightfv::f (GL_LIGHT1, GL_AMBIENT, light_ambient);
       glLightfv::f (GL_LIGHT1, GL_DIFFUSE, light_diffuse);
       glLightfv::f (GL_LIGHT1, GL_POSITION, light_position);
       glLightfv::f (GL_LIGHT1, GL_SPECULAR, light_specular);
       glLightfv::f (GL_LIGHT0, GL_POSITION, light0_position);
       glMaterialfv::f (GL_FRONT, GL_SPECULAR, mat_specular);
       glMaterialf::f (GL_FRONT_AND_BACK, GL_SHININESS, mat_shininess);
       glMaterialfv::f (GL_FRONT, GL_DIFFUSE, mat_diffuse);
       glColorMaterial::f (GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
       glEnable::f GL_LIGHT1;
       glEnable::f GL_LIGHTING;

       glMatrixMode::f GL_MODELVIEW;
       glLoadIdentity::f ();
       glTranslatef::f (0.0, 0.0, -4.0)
   end 
 
   fun renderReshape (width, height) =
   let aspect = real (signed::toInt width) / real (signed::toInt height)
   in  glViewport::f (0, 0, width, height);
       glMatrixMode::f GL_PROJECTION;
       glLoadIdentity::f ();
       gluPerspective::f (60.0, aspect, 1.0, 7.0);
       glMatrixMode::f GL_MODELVIEW
   end
       
   fun renderAtoms (MOLECULE { atoms, maxdim, 
                            min=(xmin, ymin, zmin), 
                            size=(xsize, ysize, zsize), 
                            ... } ) =
   let SCALE_FACTOR = 4.0
       fun draw (name, []) = ()
         | draw (name, (ATOM { radius, color, ... }, pos) . atoms) = 
           (glLoadName::f name;
            glPushMatrix::f ();
            glTranslatef::f pos;
            glScalef::f (radius, radius, radius);
            glColor3fv::f color;
            glCallList::f sphereVersion;
            glPopMatrix::f ();
            draw (name+0w1, atoms)
           )
   in  glEnable::f GL_COLOR_MATERIAL;
       glScalef::f (SCALE_FACTOR / maxdim,
                   SCALE_FACTOR / maxdim,
                   SCALE_FACTOR / maxdim);
       glTranslatef::f(-(xmin + xsize / 2.0),
                       -(ymin + ysize / 2.0),
                       -(zmin + ysize / 2.0));
       draw (0w0, atoms);
       glDisable::f GL_COLOR_MATERIAL
   end


   fun renderMolecule mol = 
   let my () = glPushMatrix::f ();
       m = build_rotmatrix (curquat)
   in  glMultMatrix::f m;
       renderAtoms mol;
       glPopMatrix::f ()
   end

   fun renderNoMolecule() =
   let 
   in  glPushMatrix::f ();
       glLoadIdentity::f ();
       glMatrixMode::f GL_PROJECTION;
       glDisable::f GL_LIGHTING;
       glPushMatrix::f ();
       glLoadIdentity::f ();
       gluOrtho2D::f (0, winWidth, 0, winHeight);
       glColor3f::f (0.0, 0.0, 0.0);
       glRasterPop2i::f (0, 0);
       glBitmap::f (0, 0, 0, 0,
           winWidth div 2 - width div 2,
           winHeight div 2 - (ascent + descent) div 2, 0);
       glCallLists::f ();
       glPopMatrix::f ();
       glMatrixMode::f GL_MODELVIEW;
       glPopMatrix::f ();
       glEnable::f GL_LIGHTING
   end

   fun renderScene mol =
      (glClear::f (GL_DEPTH_BUFFER_BIT + GL_COLOR_BUFFER_BIT);
       case mol of
          [] => renderNoMolecule()
       |  _  => renderMolecule (mol)
       swap()
      )

   fun pickScene (mol, x, y) =
   let viewport = glGetIntegerv::f GL_VIEWPORT
   in  glSelectBuffer::f (); 
       glRenderMode::f GL_SELECT;
       glInitNames::f ();
       glPushName -1;
       glMatrixMode::f GL_PROJECTION;
       glPushMatrix::f ();
       glLoadIdentity::f ();
       gluPickMatrix::f (x, #3 viewport - y, 1.0, 1.0, viewport);
       aspect = #2 viewport / #3 viewport; 
       gluPerspective (60.0, aspect, 1.0, 7.0);
       glMatrixMode::f GL_MODELVIEW;
       renderMolecule mol;
       glMatrixMode::f GL_PROJECTION;
       glPopMatrix::f ();
       glMatrixMode::f GL_MODELVIEW;
       hits = glRenderMode::f GL_RENDER;
       processHits (mol, hits, mol->selbuf)
   end 

   /*-----------------------------------------------------------------------
    *
    * Set up the graphical interface (gtk)
    * 
    *-----------------------------------------------------------------------*/
   fun view (molecule) = 
     ( gtk_init::f [];
       @@@.window 
       [set::title "Molecule viewer",
        set::usize (500, 500),
        on::destroy gtk_main_quit::f,
        <=> (@@@.v (FALSE, 0)
          [
          ]),
        show_all
       ]
     )

}


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
