## register-allocation-core.api

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# Note: This is the core of the new register allocator, i.e. the portion
# that manipulates only the interference graph and not the flowgraph.
#
# -- Allen Leung



api Register_Allocation_Core {

    package g:   Register_Allocation_Graph			# Register_Allocation_Graph		is from   src/lib/compiler/lower/reg-alloc/ra-graph.api
             =   register_allocation_graph;

    package bm:  Register_Allocation_Bitmatrix;			# Register_Allocation_Bitmatrix		is from   src/lib/compiler/lower/reg-alloc/ra-bitmatrix.api

    package mv:  Register_Allocation_Priority_Queue		# Register_Allocation_Priority_Queue	is from   src/lib/compiler/lower/reg-alloc/register-allocation-priority-queue.api
                 where  Element == g::Move;

    package fz:  Register_Allocation_Priority_Queue		# Register_Allocation_Priority_Queue	is from   src/lib/compiler/lower/reg-alloc/register-allocation-priority-queue.api
                 where  Element == g::Node;

    Move_Queue;
    Freeze_Queue;

    no_optimization:       g::Mode;
    biased_selection:      g::Mode;
    dead_copy_elim:        g::Mode;
    compute_span:          g::Mode;
    save_copy_temps:       g::Mode;
    has_parallel_copies:   g::Mode;


    # Basic functions


    # Dump the interference graph to a stream:
    #
    dump_register_interference_graph
        :
        g::Interference_Graph
        ->
        file::Output_Stream
        ->
        Void;

    show:   g::Interference_Graph
            ->
            g::Node
            ->
            String;


    # Add an edge to the interference graph 
    #
    add_edge:  g::Interference_Graph -> (g::Node, g::Node) -> Void;


    # Create new nodes:
    #
    new_nodes
        :
        g::Interference_Graph
        -> 
        { cost: Float, pt: g::Program_Point, defs: List( g::c::Cell ), uses: List( g::c::Cell ) }
        -> 
        List( g::Node );  #  Defs 


    # Update the colors of cell to reflect the current interference graph:
    #
    update_cell_colors:   g::Interference_Graph -> Void;
    update_cell_aliases:  g::Interference_Graph -> Void;

    mark_dead_copies_as_spilled:  g::Interference_Graph -> Void;


    # Return the spill location id of the interference graph 
    #
    spill_loc:            g::Interference_Graph -> Int -> Int;
    spill_loc_to_string:  g::Interference_Graph -> Int -> String;


    # Create an initial set of worklists
    # from a new interference graph
    # and a list of moves:
    #
    init_work_lists
        :
        g::Interference_Graph
        -> 
	{ moves:  List( g::Move )
	}
        -> 
	{ simplify_worklist:  List( g::Node ), 
	  move_worklist:      Move_Queue, 
	  freeze_worklist:    Freeze_Queue, 
	  spill_worklist:     List( g::Node )   #  high degreee nodes 
	};


    # Clear the interference graph but keep the nodes table intact 
    #
    clear_graph:  g::Interference_Graph -> Void;


    # Remove all adjacency lists from the nodes table.
    #
    clear_nodes:  g::Interference_Graph -> Void;


    # Simplify, Coalesce and Freeze until the work list is done
    #
    iterated_coalescing:  
        g::Interference_Graph -> 
           { simplify_worklist:  List( g::Node ), 
             move_worklist:      Move_Queue,
             freeze_worklist:    Freeze_Queue,
             stack:        List( g::Node )
           } ->
           { stack:  List( g::Node ) 
           };


    # Potentially spill a node.
    #
    potential_spill_node
        :  
        g::Interference_Graph
        ->
	{ node:   g::Node,
	  cost:   Float,
	  stack:  List( g::Node )
	}
        ->
	{ move_worklist:    Move_Queue,
	  freeze_worklist:  Freeze_Queue,
	  stack:            List( g::Node )
	};


    # Color nodes on the stack, using Briggs' optimistic spilling.  
    # Return a list of actual spills 
    #
    select
        :  
        g::Interference_Graph
        -> 
	{ stack:   List( g::Node ) }
        ->
	{ spills:  List( g::Node ) };	#  Actual spills 


    # Incorporate memory <-> register moves
    #
    init_mem_moves:  g::Interference_Graph -> Void;


    # Compute spill savings due to memory <-> register moves
    #
    move_savings:  g::Interference_Graph -> (Int -> Float);
};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
