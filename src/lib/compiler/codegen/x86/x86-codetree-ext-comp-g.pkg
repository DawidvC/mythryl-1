# x86-codetree-ext-comp-g.pkg

# Compiled by:
#     src/lib/compiler/backend-x86.make6

# We are invoked from:
#
#     src/lib/compiler/codegen/x86/x86-codegen-g.pkg

generic package x86_codetree_ext_comp_g (

    package codetree
        :
        Codetree						# Codetree			is from   src/lib/compiler/lower/codetree/codetree.api
	where extension == x86_lib7codetree_ext;

    package instruction_set
        :
        Instruction_Set_X86					# Instruction_Set_X86		is from   src/lib/compiler/lower/x86/instruction/instruction-set-x86.api
	where codetree == codetree;

    package codetree_stream
        :
        Codetree_Stream						# Codetree_Stream		is from   src/lib/compiler/lower/codetree/codetree-stream.api
	where codetree == codetree;

    package control_flow_graph
	:
	Control_Flow_Graph					# Control_Flow_Graph		is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where
            instruction_set == instruction_set
	also
            pseudo_op
            ==
	    codetree_stream::instruction_stream::pseudo_op;

    fast_fp:  Ref( Bool );
)

: (weak) Codetree_Extension_Default				# Codetree_Extension_Default	is from   src/lib/compiler/lower/codetree/codetree-extension-default.api

{
    package codetree           =  codetree;
    package instruction_set    =  instruction_set;
    package cells              =  instruction_set::cells;
    package control_flow_graph =  control_flow_graph;
    package codetree_stream    =  codetree_stream;

    package ts = codetree_stream;
    package t  = codetree;
    package i  = instruction_set;
    package c  = cells;
    package cb = cells_basis;					# cells_basis			is from   src/lib/compiler/lower/instruction/cells-basis.pkg
    package ext= x86_lib7codetree_ext;				# x86_lib7codetree_ext		is from   src/lib/compiler/codegen/x86/x86-codetreeext.pkg

    package x86comp_instr_ext
	= 
	x86_compiler_instruction_extension_g (			# x86_compiler_instruction_extension_g		is from   src/lib/compiler/lower/x86/instruction/x86comp-instruction-ext.pkg
	    package instruction_set  = instruction_set;
	    package codetree_stream  = codetree_stream;
	    package control_flow_graph = control_flow_graph;
	);

     Reducer
	= 
	ts::Reducer (i::Instruction, c::Cellset, i::Operand, i::Addressing_Mode, control_flow_graph::Control_Flow_Graph);

    fun unimplemented _
	=
	lowcode_error_message::impossible "X86CodetreeExtComp"; 

    compile_sext  = x86comp_instr_ext::compile_sext;
    compile_rext  = unimplemented;
    compile_ccext = unimplemented;

    fun compile_fext (ts::REDUCER { reduce_float_expression, emit, ... }:Reducer)
	=
	{   fun comp { e=>(64, float_expression), fd: cb::Cell, notes: List( t::Note ) }
                =>
                {   fun trig (f, foper)
			= 
			{   reduce_float_expression f;
			    emit (i::funary foper, notes);
			};

		    case float_expression   
			ext::FSINE f   => trig (f, i::FSIN);
			ext::FCOSINE f => trig (f, i::FCOS);

			ext::FTANGENT f
                            => 
			    {   trig (f, i::FPTAN);
			        emit (i::fstpl (i::ST (c::st 0)), []);
			    };
		    esac;
	        };

	        comp _ => lowcode_error_message::impossible "compileFext";
            end; 

	    fun fast_comp { e=>(64, float_expression), fd: cb::Cell, notes: List( t::Note ) }
		    =>
		    {   fun freg f
                            =
                            {   fx = cb::register_num f;

				if (fx >= 8   and  fx < 32) i::FDIRECT f;        #  hardwired! 
				else                        i::FPR     f;
                                fi; 
			    };

			my (un_op, f)
                            =
			    case float_expression   
				 ext::FSINE    f =>  (i::FSIN, f);
				 ext::FCOSINE  f =>  (i::FCOS, f);
				 ext::FTANGENT f =>  (i::FPTAN, f);
                            esac;

			emit (i::funop { fsize=>i::FP64,
				     un_op, src=>freg (reduce_float_expression f), dst=>freg fd }, notes);
		    };

	        fast_comp _ => lowcode_error_message::impossible "compileFext";
            end;

	   if   *fast_fp      fast_comp;
           else                    comp;
           fi;
      };
};
