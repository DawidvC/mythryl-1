#   This code was created by Jeff Molofee '99 
#   (ported to SDL by Sam Lantinga '2000) 
#   If you've found this code useful, please let me know. 
#   Visit me at www.demonews.com/hosted/nehe  
package Lesson06 :
api
   my main:  String * List( String ) -> winix::process::status
end
{

   use C SDL OpenGLMacros SDLMacros SDLEnums LessonsLib

   #  floats for x rotation, y rotation, z rotation 
   xrot = REF 0.0 and yrot = REF 0.0 and zrot = REF 0.0

   infix += -=
   fun x += n = x := *x + (n: real)
   fun x -= n = x := *x - (n: real)
   
   use SDL_Surface
   infix -->
   fun p --> { get, deref } = deref p 

  #  storage for one texture  
   
   #   Load Bitmaps And Convert To Textures 
   fun LoadGLTextures() =
       #   Load Texture 
   let image1 = LoadBMP("Data06/NeHe.bmp");
       texture = new' s::uint
   in
  
       #   Create Texture         
       glGenTextures::f (1, &texture);
       glBindTexture::f (GL_TEXTURE_2D, get::uint' texture);   #   2d texture (x and y size) 
   
       glTexParameteri::f (GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, signed GL_LINEAR); #   scale linearly when image bigger than texture 
       glTexParameteri::f (GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, signed GL_LINEAR); #   scale linearly when image smalled than texture 
   
       #   2d texture, level of detail 0 (normal), 3 components (red, green, blue), x size from image, y size from image,  
       #   Border 0 (normal), rgb color data, unsigned byte data, and finally the data itself. 
       glTexImage2D::f (GL_TEXTURE_2D, 0, 3, image1-->w, image1-->h, 0, 
                      GL_RGB, GL_UNSIGNED_BYTE, image1-->pixels);
       get::uint' texture
   end except FAIL _ => (SDL_Quit::f(); exit (1))
   
   #  A general OpenGL initialization function.  Sets all of the initial parameters. 
   fun InitGL (Width, Height) =                #   We call this right after our OpenGL window is created. 
   let 
       my () = glViewport::f (0, 0, Width, Height);
       texture = LoadGLTextures();                                #   Load The Texture (s)  
   in
       glEnable::f (GL_TEXTURE_2D);                        #   Enable Texture Mapping 
       glClearColor::f (0.0, 0.0, 1.0, 0.0);        #   Clear The Background Color To Blue  
       glClearDepth::f (1.0);                                #   Enables Clearing Of The Depth Buffer 
       glDepthFunc::f (GL_LESS);                        #   The Type Of Depth Test To Do 
       glEnable::f (GL_DEPTH_TEST);                        #   Enables Depth Testing 
       glShadeModel::f (GL_SMOOTH);                        #   Enables Smooth Color Shading 
       
       glMatrixMode::f (GL_PROJECTION);
       glLoadIdentity::f();                                #   Reset The Projection Matrix 
       
       gluPerspective::f (45.0, signed::real Width/signed::real Height, 0.1, 100.0); 
           #   Calculate The Aspect Ratio Of The Window 
       
       glMatrixMode::f (GL_MODELVIEW);
       texture
   end
   
   #  The main drawing function. 
   fun DrawGLScene (texture) =
   (
       glClear::f (GL_COLOR_BUFFER_BIT + GL_DEPTH_BUFFER_BIT);                #   Clear The Screen And The Depth Buffer 
       glLoadIdentity::f();                                #   Reset The View 
   
       glTranslatef::f (0.0, 0.0,-5.0);              #   move 5 units into the screen. 
       
       glRotatef::f(*xrot, 1.0, 0.0, 0.0);               #   Rotate On The X Axis 
       glRotatef::f(*yrot, 0.0, 1.0, 0.0);               #   Rotate On The Y Axis 
       glRotatef::f(*zrot, 0.0, 0.0, 1.0);               #   Rotate On The Z Axis 
   
       glBindTexture::f (GL_TEXTURE_2D, texture);   #   Choose the texture to use. 
   
       glBegin::f (GL_QUADS);                                #   Begin drawing a cube 
       
       #   Front Face (note that the texture's corners have to match the quad's corners) 
       glTexCoord2f::f (0.0, 0.0); glVertex3f::f(-1.0, -1.0,  1.0);        #   Bottom Left Of The Texture and Quad 
       glTexCoord2f::f (1.0, 0.0); glVertex3f::f( 1.0, -1.0,  1.0);        #   Bottom Right Of The Texture and Quad 
       glTexCoord2f::f (1.0, 1.0); glVertex3f::f( 1.0,  1.0,  1.0);        #   Top Right Of The Texture and Quad 
       glTexCoord2f::f (0.0, 1.0); glVertex3f::f(-1.0,  1.0,  1.0);        #   Top Left Of The Texture and Quad 
       
       #   Back Face 
       glTexCoord2f::f (1.0, 0.0); glVertex3f::f(-1.0, -1.0, -1.0);        #   Bottom Right Of The Texture and Quad 
       glTexCoord2f::f (1.0, 1.0); glVertex3f::f(-1.0,  1.0, -1.0);        #   Top Right Of The Texture and Quad 
       glTexCoord2f::f (0.0, 1.0); glVertex3f::f( 1.0,  1.0, -1.0);        #   Top Left Of The Texture and Quad 
       glTexCoord2f::f (0.0, 0.0); glVertex3f::f( 1.0, -1.0, -1.0);        #   Bottom Left Of The Texture and Quad 
           
       #   Top Face 
       glTexCoord2f::f (0.0, 1.0); glVertex3f::f(-1.0,  1.0, -1.0);        #   Top Left Of The Texture and Quad 
       glTexCoord2f::f (0.0, 0.0); glVertex3f::f(-1.0,  1.0,  1.0);        #   Bottom Left Of The Texture and Quad 
       glTexCoord2f::f (1.0, 0.0); glVertex3f::f( 1.0,  1.0,  1.0);        #   Bottom Right Of The Texture and Quad 
       glTexCoord2f::f (1.0, 1.0); glVertex3f::f( 1.0,  1.0, -1.0);        #   Top Right Of The Texture and Quad 
       
       #   Bottom Face        
       glTexCoord2f::f (1.0, 1.0); glVertex3f::f(-1.0, -1.0, -1.0);        #   Top Right Of The Texture and Quad 
       glTexCoord2f::f (0.0, 1.0); glVertex3f::f( 1.0, -1.0, -1.0);        #   Top Left Of The Texture and Quad 
       glTexCoord2f::f (0.0, 0.0); glVertex3f::f( 1.0, -1.0,  1.0);        #   Bottom Left Of The Texture and Quad 
       glTexCoord2f::f (1.0, 0.0); glVertex3f::f(-1.0, -1.0,  1.0);        #   Bottom Right Of The Texture and Quad 
       
       #   Right face 
       glTexCoord2f::f (1.0, 0.0); glVertex3f::f( 1.0, -1.0, -1.0);        #   Bottom Right Of The Texture and Quad 
       glTexCoord2f::f (1.0, 1.0); glVertex3f::f( 1.0,  1.0, -1.0);        #   Top Right Of The Texture and Quad 
       glTexCoord2f::f (0.0, 1.0); glVertex3f::f( 1.0,  1.0,  1.0);        #   Top Left Of The Texture and Quad 
       glTexCoord2f::f (0.0, 0.0); glVertex3f::f( 1.0, -1.0,  1.0);        #   Bottom Left Of The Texture and Quad 
       
       #   Left Face 
       glTexCoord2f::f (0.0, 0.0); glVertex3f::f(-1.0, -1.0, -1.0);        #   Bottom Left Of The Texture and Quad 
       glTexCoord2f::f (1.0, 0.0); glVertex3f::f(-1.0, -1.0,  1.0);        #   Bottom Right Of The Texture and Quad 
       glTexCoord2f::f (1.0, 1.0); glVertex3f::f(-1.0,  1.0,  1.0);        #   Top Right Of The Texture and Quad 
       glTexCoord2f::f (0.0, 1.0); glVertex3f::f(-1.0,  1.0, -1.0);        #   Top Left Of The Texture and Quad 
       
       glEnd::f();                                    #   Done with the polygon. 
   
       xrot+=15.0;                                #   X Axis Rotation         
       yrot+=15.0;                                #   Y Axis Rotation 
       zrot+=15.0;                                #   Z Axis Rotation 
   
       #   swap buffers to display, since we're double buffered. 
       SDL_GL_SwapBuffers::f()
   )

   fun main (prog, args) = 
   let done  = REF FALSE
       event = new' SDL_Event::size
   in 
     #  Initialize SDL for video output 
     if ( SDL_Init::f (SDL_INIT_VIDEO) < 0 ) then
     ( print("Unable to initialize SDL: "$SDL_GetError::f()$"\n");
       exit (1)
     ) 
   
     #  Create a 640x480 OpenGL screen 
     if Ptr::isNull'(SDL_SetVideoMode::f (640, 480, 0, SDL_OPENGL)) then
     ( print("Unable to create OpenGL screen: "$SDL_GetError::f()$"\n");
       SDL_Quit::f();
       exit (2)
     ) 
   
     #  Set the title bar in environments that support it 
     SDL_WM_SetCaption::f("Jeff Molofee's GL Code Tutorial ... NeHe '99", "");
   
     #  Loop, drawing and checking events 
     let texture = InitGL (640, 480);
     in  while not(*done) do
         ( DrawGLScene (texture);
           SDL_Delay::f 0w1000; #  Slow things down 
           #  This could go in a separate function 
           while SDL_PollEvent::f(&event) != 0 do
           ( if SDL_event_type event == SDL_QUIT or
                ( SDL_event_type event == SDL_KEYDOWN and
                  SDL_event_keysym event == SDLK_ESCAPE ) then
               done := TRUE
             else ()
           )
         )
     end;
     SDL_Quit::f();
     winix::process::failure
   end
  
}


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
