## make-record.pkg --- translate a FPS::RECORD to lowcode


/* TODO:
 *   Some FPS::RECORDs can be created using a tight loop implementing
 *   a block copy.
 */

generic package MkRecord (C: CPSREGS where t::region = CPSRegions): MAKE_RECORD
{
    package t = c::T
    package r = CPSRegions

    fun error msg
        =
        error_message::impossible ("MkRecord." + msg)

    addrType = c::addressWidth
    pty = 32
    ity = 32
    fty = 64

    fun ea (r, 0) = r
      | ea (r, n) = t::ADD (addrType, r, t::LITERAL n)

    fun indexEA (r, 0) = r
      | indexEA (r, n) = t::ADD (addrType, r, t::LITERAL (n*4))

    fun pi (x as REF (r::pt::TOP _), _) = x
      | pi (x, i) = r::pt::pi (x, i)

    fun record { desc, fields, mem, hp, emit, markPTR, markComp }
	= 
	{   fun getfield (r, FPS::SELp (n, p), mem)
                = 
		{   mem =   pi (mem, n);

		    getfield (markPTR (t::LOAD (ity, indexEA (r, n), mem)), p, mem);
                }

	      | getfield (r, FPS::OFFp 0, _) =   r
	      | getfield (r, FPS::OFFp n, _) =   t::ADD (addrType, r, t::LITERAL (n*4));

	    fun storeFields ([], _, _, _) = ()

	      | storeFields ((v, p) . rest, n, mem, i)
                = 
		{   element =   pi (mem, i);

		    emit (t::STORE (ity, t::ADD (addrType, c::allocptr, t::LITERAL n), 
			 getfield (v, p, element), element));

		    storeFields (rest, n + 4, mem, i+1);
		};

	    emit (t::STORE (ity, ea (c::allocptr, hp), desc, pi (mem,-1)));
	    storeFields (fields, hp+4, mem, 0);
	    hp + 4;
	}

    fun frecord { desc, fields, mem, hp, emit, markPTR, markComp }
	=
	{
	    fun fgetfield (t::FLOAT_EXPRESSION fp, FPS::OFFp 0, _)
                =
                fp

	      | fgetfield (t::INT_EXPRESSION r, path, mem)
                =
                {   fun fea (r, 0) = r
		      | fea (r, n) = t::ADD (addrType, r, t::LITERAL (n*8));

		    fun chase (r, FPS::SELp (n, FPS::OFFp 0), mem)
                        =
			markComp (t::FLOAD (fty, fea (r, n), pi (mem, n)));

		      | chase (r, FPS::SELp (n, p), mem)
                        =  
			{   mem =   pi (mem, n);

			    chase (markPTR (t::LOAD (ity, indexEA (r, n), mem)), p, mem);
			}

                    chase (r, path, mem);
		};

	    fun fstoreFields ([], _, _, _) = ()

	      | fstoreFields ((v, p) . rest, n, mem, i)
                =
		{   element =   pi (mem, i);

		    emit (t::FSTORE (fty, t::ADD (addrType, c::allocptr, t::LITERAL n),
				  fgetfield (v, p, element), element));

		    fstoreFields (rest, n + 8, mem, i+2);
		};

	    emit (t::STORE (ity, ea (c::allocptr, hp), desc, pi (mem,-1)));
	    fstoreFields (fields, hp+4, mem, 0);
	    hp + 4;
	}
};



## COPYRIGHT (c) 1996 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
