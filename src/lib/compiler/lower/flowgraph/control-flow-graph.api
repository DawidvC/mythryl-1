## control-flow-graph.api
#
# Control flow graph data package used by
# the lowcode intermediate representation.
# All basic optimizations are based on
# this representation.
#
# -- Allen Leung
#
# Nomenclature: "cfg" == "control flow graph" throughout.
#
# Implemented by:
#     src/lib/compiler/lower/flowgraph/control-flow-graph-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



api Control_Flow_Graph {

    package pseudo_op:  Pseudo_Ops;				# Pseudo_Ops		is from   src/lib/compiler/lower/flowgraph/pseudo-op.api

    package instruction_set:  Instruction_Set;			# Instruction_Set	is from   src/lib/compiler/lower/instruction/instruction-set.api


    Weight = Float;

	# Used to represent frequency of execution.
	# We use reals because some static prediction
	# methods produce such.


    Block_Kind
      = START          # Entry  node 
      | STOP           # Exit   node 
      | NORMAL         # Normal node 


    # NOTE 1: the instructions are listed in reverse order.
    # This choice is for a few reasons:
    #
    # i)  Clusters represent instructions in reverse order,
    #     so keeping this the same avoids having to do conversions.
    #
    # ii) This makes it easier to add instructions
    #     at the end of the block, which is more common
    #     than adding instructions to the front.
    #
    # iii) This also makes it easier to manipulate
    #      the branch/jump instruction at the end
    #      of the block.
    #
    # NOTE 2: 
    #  Alignments always appear before labels in a block.
   
								# label			is from   src/lib/compiler/lower/instruction/label.pkg
								# note			is from   src/lib/src/note.pkg
    also
    Block
	= 
	BLOCK 
	  { id:           Int,                        	# Block id 
	    kind:         Block_Kind,                 	# Block kind 
	    freq:         Ref( Weight ),              	# Execution frequency.
	    labels:       Ref( List(  label::Label ) ),	# Labels on blocks.
	    notes:        Ref( note::Notes ),		# Annotations 

	    align
		:
		Ref(  Null_Or(  pseudo_op::Pseudo_Op ) ),	# Alignment only.


	    instructions
		:
		Ref(  List(  instruction_set::Instruction ) )     		# In reverse order.
	  }


    # We have the following invariants
    # on blocks and out-edge kinds:
    #
    #	If the last instruction of the block
    #   is an unconditional jump, then there
    #	is one out edge labeled with JUMP.
    #
    #	If the last instruction of the block
    #   is a conditional jump, then there are
    #   two out edges.  The one corresponding
    #   to the jump is labeled BRANCH (TRUE)
    #   and the other is labeled BRANCH (FALSE).
    #
    #   If the last instruction of the block
    #   is not a jump, then there is one out
    #	edge labeled with FALLSTHRU.
    #
    #	If the block ends with a switch,
    #   then the out edges are labeled
    #   SWITCH.
    #
    #	If the block ends with a call that
    #   has been wrapped with a FLOW_TO,
    #	then there will be one FALLSTHRU
    #   out edge and one or more FLOWSTO
    #	out edges.
    #
    #	Control-flow to outside the
    #   control_flow_graph is represented by
    #   edges to the unique STOP node.
    #
    #   When such edges are to labels that
    #   are defined outside the control_flow_graph,
    #   JUMP, BRANCH, or SWITCH edges are used
    #   (as appropriate).
    #
    #	When such edges are to unknown places
    #   (e.g., traps, returns, and indirect jumps)
    #   an EXIT edge is used.
    #
    #   There should never be a FALLSTHRU
    #   or ENTRY edge to the STOP node.
    #
    also
    Edge_Kind	    		# Edge kinds 
      = ENTRY			# Edge from START node
      | EXIT            	# Unlabeled edge to STOP node 
      | JUMP			# Unconditional jump 
      | FALLSTHRU		# Falls through to next block
      | BRANCH  Bool		# Branch
      | SWITCH  Int		# Computed goto 
      | FLOWSTO			# FLOW_TO edge 
   
								# note			is from   src/lib/src/note.pkg
    also
    Edge_Info
        =
        EDGE  {
	  kind:    Edge_Kind,		# Edge kind 
	  weight:  Ref( Weight ),	# Edge freq 
	  notes:   Ref( note::Notes )	# Annotations 
	};

								# graph			is from   src/lib/graph/graph.pkg
    Edge   = graph::Edge( Edge_Info );
    Node   = graph::Node( Block );

    Info
        = 
	INFO  
	  { notes:        Ref( note::Notes ),
	    first_block:  Ref( Int ),				# Id of first block (UNUSED?) 
	    reorder:      Ref( Bool ),				# Has the control_flow_graph been reordered? 
	    data:         Ref( List( pseudo_op::Pseudo_Op ) ),	# Reverse order of generation.
	    decls:        Ref( List( pseudo_op::Pseudo_Op ) )	# pseudo-ops before first section 
	  };

    Control_Flow_Graph
        =
        graph::Graph( Block, Edge_Info, Info );

    # ========================================================================
    #
    #  Various kinds of annotations on basic blocks
    #
    # ========================================================================
    liveout:   note::Property( instruction_set::cells::Cellset );
                  #  escaping live out information 
    changed:   note::Property( (String, (Void -> Void)));

    # ========================================================================
    #
    #  Methods for manipulating basic blocks
    #
    # ========================================================================
    new_block:           (Int, Ref( Weight )) -> Block;		#  new empty block 
    new_node:		  Control_Flow_Graph -> Weight -> Node;	#  new empty block hooked 
								#  into the cfg 
    new_start:           (Int, Ref( Weight )) -> Block;		#  start node 
    new_stop:            (Int, Ref( Weight )) -> Block;		#  stop node 
    copy_block:          (Int, Block) -> Block;			#  Copy a block 
    define_local_label:   Block -> label::Label;		#  Define a label 
    instructions:         Block -> Ref( List( instruction_set::Instruction ) );
    freq:                 Block -> Ref( Weight );
    edge_freq:            Edge -> Ref( Weight );
    sum_edge_freqs:       List( Edge ) -> Weight;
    branch_of:            Edge_Info -> Null_Or( Bool );

               #  emit assembly 
    emit:        note::Notes -> Block -> Void;

    # ========================================================================
    #
    #  Methods for manipulating control_flow_graph
    #
    # ========================================================================
    cfg:       Info -> Control_Flow_Graph;			# Create a new cfg
    new:       Void -> Control_Flow_Graph;			# Create a new cfg 
    subgraph:  Control_Flow_Graph -> Control_Flow_Graph;	# Mark as subgraph 
    init:      Control_Flow_Graph -> Void;			# Add start/stop nodes 

    mark_as_changed:   Control_Flow_Graph -> Void;      /* mark cfg as changed */  
       # IMPORTANT note: you MUST call this function after
       # changing the topology of the control_flow_graph.  

    notes:              Control_Flow_Graph -> Ref( note::Notes );
    live_out:           Block -> instruction_set::cells::Cellset;
    falls_thru_from:   (Control_Flow_Graph, graph::Node_Id) -> Null_Or( graph::Node_Id );
    falls_thru_to:     (Control_Flow_Graph, graph::Node_Id) -> Null_Or( graph::Node_Id );
    remove_edge:        Control_Flow_Graph -> Edge -> Void;
    set_branch:        (Control_Flow_Graph, graph::Node_Id, Bool) -> instruction_set::Instruction;
    edge_dir:           graph::Edge( Edge_Info ) -> Null_Or( Bool );

    entry_id:  Control_Flow_Graph -> graph::Node_Id;	# Unique entry node ID 
    exit_id:   Control_Flow_Graph -> graph::Node_Id;	# Unique exit node ID 
    entry:     Control_Flow_Graph -> Node;		# Unique entry node 
    exit:      Control_Flow_Graph -> Node;		# Unique exit node 

    # =======================================================================
    #
    #  More complex methods for manipulating control_flow_graph.
    #  These methods will guarantee all control_flow_graph invariants
    #  such as frequencies are preserved.
    # 
    # =======================================================================

    # Get a label from block;
    # generate one if necessary:
    #
    label_of:  Control_Flow_Graph -> graph::Node_Id -> label::Label;


    #  Update the label of the branch instruction in a block
    #  to be consistent with the control flow edges.  
    #  This is an NOP if the control_flow_graph is already consistent.
    #  This is used internally after changing control_flow_graph edges, 
    #  but it could also be useful for others.
    #
    update_jump_label
        :
        Control_Flow_Graph
        ->
        graph::Node_Id
        ->
        Void;


    # Deep copy an edge info
    #
    copy_edge:  Edge_Info -> Edge_Info;


    #  Merge a control flow edge.  
    #  [See also the must_precede test below]
    #  Return FALSE if merging is unsuccessful.
    #
    merge_edge:  Control_Flow_Graph -> Edge -> Bool;


    #  Eliminate the jump/insert a jump
    #     at the end of the current block if it is feasible.
    #  Return TRUE iff it is successful.
    #
    eliminate_jump:  Control_Flow_Graph -> graph::Node_Id -> Bool;
    insert_jump:     Control_Flow_Graph -> graph::Node_Id -> Bool;


    #  Edge splitting:
    #
    #  Split n groups of control flow edges, all initially entering block j,
    #
    #     i_11 -> j,  i_12 -> j, ...         group 1
    #     i_21 -> j,  i_22 -> j, ...         group 2
    #             ....
    #     i_n1 -> j,  i_n2 -> j, ...         group n
    #  
    #  into 
    #
    #     i_11 -> k_1 
    #     i_12 -> k_1
    #        ...
    #     i_21 -> k_2
    #     i_22 -> k_2
    #        ...
    #     i_n1 -> k_n
    #     i_n2 -> k_n
    #        ...
    # 
    #  and the chain
    #      k_1 -> k_2
    #      k_2 -> k_3
    #        ...
    #      k_n -> j
    #
    #  where k_1, ..., k_n are new basic blocks.
    # 
    #  Return the new edges 
    #       k_1-> k_2, ..., k_n -> j 
    #
    #  and the new blocks 
    #       k_1, ..., k_n.
    #
    #  Each block k_1, ..., k_n can have instructions placed in them.
    #
    #  If the jump flag is TRUE, then a jump is always placed in the 
    #  new block k_n; otherwise, we try to eliminate the jump when feasible.
    #
    split_edges
        :
        Control_Flow_Graph
        ->
        { groups:   List( ( List( Edge ), 
                            List( instruction_set::Instruction )       # reverse order
			  )
                        ),  
          jump:  Bool
        }
        ->
        List ((Node, Edge));  #  k_i and k_i -> k_{ i+1 } 


    #  Test if an edge is critical.  An edge i->j is critical iff 
    #  there are multiple entries into j and multiple exits out of i,
    #  i.e. it is both a merge and a split node.
    #
    #  Test if a node is a merge or split node.
    #
    is_critical_edge:  Control_Flow_Graph -> Edge -> Bool;
    is_merge:          Control_Flow_Graph -> graph::Node_Id -> Bool;
    is_split:          Control_Flow_Graph -> graph::Node_Id -> Bool;



    # Split all critical edges in the control_flow_graph.
    # This may introduce extra jumps into the program.
    #
    split_all_critical_edges
        :
        Control_Flow_Graph -> Void;


    # Check whether two blocks are necessary connected.
    # Blocks i and j are connected iff i must be placed before j
    # in all feasible layouts..
    #
    must_precede
        :
        Control_Flow_Graph
        ->
        (graph::Node_Id, graph::Node_Id)
        ->
        Bool;


    # Try to merge all edges
    #
    merge_all_edges:  Control_Flow_Graph -> Void;

    # ========================================================================
    #
    #  For viewing
    #
    # ========================================================================
#
#    my viewStyle:       cfg ->  graph_layout::style (block, edge_info, info)
#    my viewLayout:      cfg -> graph_layout::layout
#    my headerText:      block -> String
#    my footerText:      block -> String
#    my subgraphLayout:  { cfg:  cfg, subgraph:  cfg } -> graph_layout::layout



    # ========================================================================
    #
    #  Miscellaneous stuff
    #
    # ========================================================================

    cdg_edge:  Edge_Info -> Bool; #  for building a CDG 


    # ========================================================================
    #
    #  Methods for printing CFGs
    #
    # ========================================================================

    kind_name:   Block_Kind -> String;
    show_block:  note::Notes -> Block -> String; 
    show_edge:   Edge_Info -> String; 
    dump_block:  ((file::Output_Stream, Control_Flow_Graph)) -> Node -> Void;
    dump:        ((file::Output_Stream, String, Control_Flow_Graph)) -> Void;

};



## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
