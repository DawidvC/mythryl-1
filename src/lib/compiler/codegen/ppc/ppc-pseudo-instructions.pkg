## ppc-pseudo-instructions.pkg

# Compiled by:
#     src/lib/compiler/backend-ppc.make6

# We are invoked from:
#
#     src/lib/compiler/codegen/ppc/ppc-codegen.pkg

generic package ppc_pseudo_instruction_g (

    package instruction_set
	:
	Instruction_Set_Ppc				# Instruction_Set_Ppc	is from   src/lib/compiler/lower/ppc/instruction/instruction-set-ppc.api
        where region == cpsregions;
)

: (weak) Ppc_Pseudo_Instr				# Ppc_Pseudo_Instr	is from   src/lib/compiler/lower/ppc/codetree/ppc-pseudo-instruction.api

{
    package instruction_set =  instruction_set;
    package cells           =  instruction_set::cells;

    package i = instruction_set;
    package c = cells;

    stack = cpsregions::stack;
    cvti2d_tmp_off = 4096+16;			#  runtime system dependent 
    cvti2d_const_off = 4096+8;			#             ''             
    sp = c::stackptr_r;

    # Cute little trick -- go figure 
    #
    fun cvti2d { reg, fd }
	=
	{
	    tmp_r = c::new_reg();
	    tmp_f = c::new_freg();

	    map  i::BASE_INSTRUCTION
	       [ i::ARITHI { oper=>i::XORIS, rt=>tmp_r, ra=>reg, im=>i::IMMED_OP 32768 },
		 i::ST     { st=>i::STW, rs=>tmp_r, ra=>sp, d=>i::IMMED_OP (cvti2d_tmp_off+4), mem=>stack },
		 i::ARITHI { oper=>i::ADDIS, rt=>tmp_r, ra=>c::r0, im=>i::IMMED_OP (0x4330) },
		 i::ST     { st=>i::STW, rs=>tmp_r, ra=>sp, d=>i::IMMED_OP (cvti2d_tmp_off), mem=>stack },
		 i::LF     { ld=>i::LFD, ft=>fd, ra=>sp, d=>i::IMMED_OP (cvti2d_tmp_off), mem=>stack },
		 i::LF     { ld=>i::LFD, ft=>tmp_f, ra=>sp, d=>i::IMMED_OP (cvti2d_const_off), mem=>stack },
		 i::FARITH { oper=>i::FSUB, ft=>fd, fa=>fd, fb=>tmp_f, rc=>FALSE }
	       ];
	};
};
