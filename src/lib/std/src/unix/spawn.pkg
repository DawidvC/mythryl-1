## spawn.pkg	-- high-level support for spawning unix child processes.

# Compiled by:
#     src/lib/std/src/stdlib-core.make6


# See comments in spawn.api



###                  "Waiting is a very funny activity:
###                   you can't wait twice as fast."
###
###                                 -- E.J. Dijkstra



package spawn: (weak)  Spawn {			# Spawn		is from   src/lib/std/src/unix/spawn.api

    package p   = posix;			# posix		is from   src/lib/std/src/posix/posix.pkg
    package ps  = posix_signal;			# posix_signal	is from   src/lib/std/src/posix/posix-signal.pkg
    package pe  = posix;
    package pf  = posix;
    package pio = posix;

    Signal = ps::Signal;

    Exit_Status == p::Exit_Status;

    Stream A_stream
      =	UNOPENED  pio::File_Descriptor
      | OPENED  { stream: A_stream, close: Void -> Void };

    Process_Status
      =	DEAD   winix_types::process::Status
      | ALIVE  p::Process_Id;

    Process (A_input_stream, A_output_stream)
        =
	PROCESS
	    { base:         String,
	      from_stream:  Ref(  Stream(  A_input_stream ) ),
	      to_stream:    Ref(  Stream(  A_output_stream ) ),
	      status:       Ref( Process_Status )
            };

    from_status
        =
        p::from_status;

    fun protect f x
        =
        {   signals::mask_signals signals::MASKALL;

	    y = (f x)
                except
                    ex =  { signals::unmask_signals  signals::MASKALL;
                            raise exception ex;
                          };
          
            signals::unmask_signals signals::MASKALL;

            y;
        };

    fun fd_text_reader (name:  String, fd:  pio::File_Descriptor)
        =
	posix_text_primitive_io::make_reader
            {
              blocking_mode => TRUE,
              name,
              fd
            };

    fun fd_bin_reader (name:  String, fd:  pio::File_Descriptor)
        =
	posix_binary_primitive_io::make_reader
            {
              name,
              fd,
              blocking_mode => TRUE
            };

    fun fd_text_writer (name, fd)
        =
        posix_text_primitive_io::make_writer
            {
	      name,
	      fd,
	      append_mode   =>  FALSE,
	      blocking_mode =>  TRUE,
	      chunk_size    =>  4096
            };

    fun fd_bin_writer (name, fd)
        =
        posix_binary_primitive_io::make_writer
            {
              fd,
              name,
	      append_mode   =>  FALSE,
              blocking_mode =>  TRUE,
              chunk_size    =>  4096
            };

    fun open_txt_out_fd (name, fd)
        =
	file::make_outstream (
	    file::pure_io::make_outstream (
	    fd_text_writer (name, fd), io_exceptions::BLOCK_BUFFERING)
        );

    fun open_bin_out_fd (name, fd)
        =
	binary_io::make_outstream (
	    binary_io::pure_io::make_outstream (
	        fd_bin_writer (name, fd),
                io_exceptions::BLOCK_BUFFERING
            )
        );

    fun open_txt_in_fd (name, fd)
        =
	file::make_instream (
	    file::pure_io::make_instream (
	        fd_text_reader (name, fd),
                ""
            )
        );

    fun open_bin_in_fd (name, fd)
        =
	binary_io::make_instream (
	    binary_io::pure_io::make_instream (
	        fd_bin_reader (name, fd),
                byte::string_to_bytes ""
            )
        );

    fun stream_of (stream_selector, sfx, opener, closer) (PROCESS p)
        =
	case (stream_selector p)
          
	     REF (OPENED s)
                 =>
                 s.stream;

	     r as REF (UNOPENED fd)
                 =>
	         {   s = opener ( p.base + "_ext_" + sfx,
                                  fd
                                );
	      
		     r := OPENED { stream =>  s,
                                   close  =>  fn () = closer s
                                 };
		     s;
	         };
        esac;

    fun txt_instream_of   p =  stream_of (.from_stream,  "txt_in",  open_txt_in_fd,  file::close_input     )  p;
    fun bin_instream_of   p =  stream_of (.from_stream,  "bin_in",  open_bin_in_fd,  binary_io::close_input)  p;

    fun txt_outstream_of  p =  stream_of (.to_stream, "txt_out", open_txt_out_fd, file::close_output       )  p;
    fun bin_outstream_of  p =  stream_of (.to_stream, "bin_out", open_bin_out_fd, binary_io::close_output  )  p;

    fun streams_of p
        =
        ( txt_instream_of  p,
          txt_outstream_of p
        );

    fun spawn_process_in_environment (cmd, argv, env)
        =
	{   p0 = pio::pipe ();
            p1 = pio::pipe ();

	    fun is_file      filename
                =
                posix::stat::is_file (posix::stat  filename)
                except
                    _ = FALSE;

            fun may_execute  filename
                =
                {   include posix::s;

                    stat = posix::stat  filename;

                    all_set (flags [ ixusr ], stat.mode);	# Order of args is critical!
                };
		#
		# XXX BUGGO FIXME Checking this one bit is hardly definitive.
		#                 What does (say) Perl do?

            fun closep ()
                =
		{   pio::close p0.outfd; 
                    pio::close p0.infd;
                    pio::close p1.outfd; 
                    pio::close p1.infd;
                };

	    if (not (is_file     cmd))  raise exception FAIL ("spawn: No file " + cmd + " exists."        );  fi;
	    if (not (may_execute cmd))  raise exception FAIL ("spawn: File " + cmd + " is not executable.");  fi;

						# substring	is from   src/lib/std/src/substring.pkg

            base				# If 'cmd' is "/bin/sh" this will be "sh".
                =
                substring::to_string
                    (substring::get_suffix
                        (fn c =  c != '/')
                        (substring::from_string cmd)
                    );

            fun start_child ()
                =
		case (protect p::fork ())
                  
		     THE pid =>  pid;           # parent 

		     NULL			# child
                         =>
			 {   oldin  = p0.infd;	  newin  = posix::int_to_fd 0;
			     oldout = p1.outfd;   newout = posix::int_to_fd 1;

			     pio::close p0.outfd;
			     pio::close p1.infd;

			     if   (oldin != newin)
                                 
			          pio::dup2 { old => oldin,
                                              new => newin
                                            };
				  pio::close oldin;
                             fi;

			     if   (oldout != newout)
                                 
			          pio::dup2 { old => oldout,
                                              new => newout
                                            };
				  pio::close oldout;
                             fi;

			     p::exece (cmd, base ! argv, env);
			 };
                esac;

            file::flush  file::stdout;

            pid = (start_child ())
                  except
                      ex = {   closep();
                               raise exception ex;
                           };

	    infd  =  p1.infd;
	    outfd =  p0.outfd;
	
            # Close the child-side fds:
	    #
            pio::close p1.outfd;
            pio::close p0.infd;

            # Set the fds close on exec:
	    #
            pio::setfd  (p1.infd,   pio::fd::flags  [pio::fd::cloexec]);
            pio::setfd  (p0.outfd,  pio::fd::flags  [pio::fd::cloexec]);

	    PROCESS { base,
		   from_stream  => REF (UNOPENED infd),
		   to_stream => REF (UNOPENED outfd),
		   status        => REF (ALIVE pid)
                 };
	};							# fun spawn_in_env



    fun spawn_process (cmd, argv)
        =
        spawn_process_in_environment (cmd, argv, pe::environ());

    fun spawn cmd
        =
        {   process = spawn_process cmd;
	    my (from_stream, to_stream) = streams_of process;
	    {   from_stream, to_stream, process };
	};


    fun kill (PROCESS { status => REF (ALIVE pid), ... }, signal)
            =>
	    p::kill (p::K_PROC pid, signal);

        kill _
            =>
            ();			#  raise an exception here? 
    end;





    fun reap (PROCESS { status => REF (DEAD s), ... } )
	    =>
	    s;

       reap (PROCESS { status => status as REF (ALIVE pid), from_stream, to_stream, ... } )
	   =>
	   {
	       # 'protect' is probably too much; typically,
	       # one would only mask SIGINT, SIGQUIT and SIGHUP         XXX BUGGO FIXME
	       #
	       fun wait_proc ()
		   =
		   case (#2 (protect p::waitpid (p::W_CHILD pid,[])))
		     
                        W_EXITED                  =>  0;
		        W_EXITSTATUS s            =>  unt8_guts::to_int s;
		        W_SIGNALED (ps::SIGNAL s) =>  256 + s;
		        W_STOPPED  (ps::SIGNAL s) =>  512 + s;    /* This should not happen. */ 
                   esac;

	       fun close (UNOPENED fd) =>  pio::close fd;
		   close (OPENED s)    =>  s.close ();
               end;

	       close *from_stream;

	       close *to_stream
               except
                   _ = ();

	       s = wait_proc ();

	       status := DEAD s;
	       s;
	   };
    end;

    fun bash cmdline
        =
        {   my child_process
                = 
                spawn_process ("/bin/sh", ["-c", cmdline]);

            my (from_stream, to_stream)
                =
                streams_of  child_process;


            file::close_output  to_stream;

            output = file::read_all from_stream;

            reap child_process;

            output;
        };



    exit = p::exit;

};	 #  package spawn						# SML/NJ calls this "unix" -- a singularly unhelpful appellation.


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
