/*
 * This is a very naive mpeg player written in ML.
 * Basically it's a proof of concept to see whether multiple ffi libraries
 * can be combined to make a "real" apply.
 * 
 * Allen Leung
 */

package MLVideo :
api

   my main:  String * List( String ) -> Int

end
{

   use C                         #  C internals 
        Gtk gtk_enums GtkGadgets   #  GIMP Tool kit stuff 
        SDL SDLMacros             #  Simple DirectMedia Layer 
        SMPEGEnums                #  SMPEG library 
        mlrep
  
   infix <~ <-

   #  Check for error 
   fun runSDL f x =
       if f x < (0: signed::int) then 
          raise FAIL("SDL: "$SDL_GetError::f()) 
       else ()

   #  The main program 
   fun main (prog, argv) = 
   let  #  Gtk initialization 
       gtk_init::f (prog . argv) 

        #  Initialize SDL 
       runSDL
         SDL_Init::f( SDL_INIT_VIDEO 
                   + SDL_INIT_AUDIO 
                   + SDL_INIT_TIMER 
                   + SDL_INIT_EVENTTHREAD
                   + SDL_INIT_CDROM         #  We want to play VCDs too! 
                                            #  Currently unimplemented 
                   )

         /* 
          * We want true color and a reasonable resolution to play the video
          */
       surface = 
          SDL_SetVideoMode::g { width=640, height=480, bpp=24, 
                             flags=SDL_SWSURFACE +
                                   SDL_ANYFORMAT
                            }
       if Ptr::isNull' surface then 
                    raise FAIL("SDL_SetVideoMode: "$SDL_GetError::f()) 
               else ()

        #  Cleanup 
       fun cleanupVideo() = SDL_Quit::f()

        #  The current mpeg file 
       mpegFile = REF ""

        #  The current mpeg data package 
       mpeg = REF NULL

        #  The name of the mpeg file is a label on the console 
       mpegFileName = @@@.l "" []

       fun nonnull f x
           =
           if Ptr::isNull'*mpeg then () else f x

       #  Load an mpeg file and setup the display 
       fun loadMPEG _ = 
           (nonnull SMPEG_delete::f (*mpeg); 
            mpeg := SMPEG_new::f(*mpegFile, NULL, 1);
            if Ptr::isNull'(*mpeg) then print("Bad mpeg file: "$(*mpegFile)$"\n")
            else SMPEG_setdisplay::f(*mpeg, surface, NULL, Ptr::fnull')
           )

        #  This starts playing the mpeg file 
       fun playVideo _ = 
          (if *mpegFile == "" then () 
           else if Ptr::isNull'(*mpeg) then loadMPEG() 
           nonnull SMPEG_play::f(*mpeg)
          )

       fun stopVideo _ = nonnull SMPEG_stop::f(*mpeg)
       fun rewindVideo _ = nonnull SMPEG_rewind::f(*mpeg)
       fun forwardVideo _ = nonnull SMPEG_skip::f(*mpeg, 30.0)
       fun backwardVideo _ = nonnull SMPEG_skip::f(*mpeg,-30.0)
       fun pauseVideo _ = nonnull SMPEG_pause::f(*mpeg)

       fun endVideo() = 
           ( nonnull stopVideo ()
           ; nonnull SMPEG_delete::f (*mpeg)
           ; mpeg := NULL
           )

        /* This function selects an MPEG file from the user directory */ 
       fun selectMPEG _ =
          ( FileSelection::new "Please select an MPEG File" 
            [ FileSelection::on::ok
               (fn fs =>
                   ( mpegFile := gtk_file_selection_get_filename::f fs
                   ; mpegFileName <~ set::text (*mpegFile)
                   ; endVideo() 
                   ; playVideo() 
                   ; fs <~ gtk_widget_destroy::m
                   )),
             FileSelection::on::cancel gtk_widget_destroy::m,
             show
            ]
          ; ()
          )

       /*
        * The console window has buttons to control playback
        */
       fun console() = 
           @@@.window
           [ set::title "ML MPEG Tool",
             on::destroy gtk_main_quit::f,
             +.vbox (FALSE, 2)
                 [ +.add mpegFileName,
                   +.hbox (FALSE, 2)
                        [ +.b "open"   [on::clicked selectMPEG],
                          +.b "play"   [on::clicked playVideo],
                          +.b "stop"   [on::clicked stopVideo],
                          +.b "rewind" [on::clicked rewindVideo],
                          +.b "<="     [on::clicked backwardVideo],
                          +.b "=>"     [on::clicked forwardVideo],
                          +.b "pause"  [on::clicked pauseVideo]
                        ]
                 ],
             show_all
           ]

   within  console()
     ; gtk_main::f()
     ; cleanupVideo()
     ; 0
   end 

}


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
