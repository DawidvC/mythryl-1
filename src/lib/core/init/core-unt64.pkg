## core-unt64.pkg
## Author: Matthias Blume (blume@tti-c.org)

# Compiled by:
#     src/lib/core/init/init.cmi

#   Basic (simulated) 64-bit word support.



###                    "I don't think there ever was a lazy man in this world.
###
###                    "Every man has some sort of gift, and he prizes that gift
###                     beyond all others. He may be a professional billiard-player,
###                     or a Paderewski, or a poet -- I don't care what it is.
###
###                    "But whatever it is, he takes a native delight in exploiting that gift,
###                     and you will find it is difficult to beguile him away from it.
###
###                    "Well, there are thousands of other interests occupying other men,
###                     but those interests don't appeal to the special tastes of
###                     the billiard champion or Paderewski. They are set down, therefore,
###                     as too lazy to do that or do this -- to do, in short what they have
###                     no taste or inclination to do.
###
###                    "In that sense, then I am phenomenally lazy.
###
###                    "But when it comes to writing a book--I am not lazy.
###                     My family find it difficult to dig me out of my chair."
###
###                                                  -- Mark Twain,
###                                                     quoted in Sydney Morning Herald,
###                                                     9/17/1895



package core_unt64
=
package {

    stipulate

	infix val o;   my (o) = inline::compose;

	not = inline::inlnot;

	infix val 80 *     ; my (*)  = inline::w32mul;
	infix val 70 + -   ; my (+)  = inline::w32add;      my (-)  = inline::w32sub;
	infix val 60 << >> ; my (<<) = inline::w32lshift;   my (>>) = inline::w32rshiftl;
	infix val 60 &     ; my (&)  = inline::w32andb;
	infix val 50 <     ; my (<)  = inline::w32lt;

	fun lift1' f = f o inline::w64p;
	fun lift1 f = inline::p64w o lift1' f;
	fun lift2' f (x, y) = f (inline::w64p x, inline::w64p y);
	fun lift2 f = inline::p64w o lift2' f;

	fun split16 w32
	    =
	    (w32 >> 0u16, w32 & 0uxffff);

	fun neg64 (hi, 0u0) =>  (inline::w32neg  hi,  0u0);
	    neg64 (hi, lo ) =>  (inline::w32notb hi,  inline::w32neg lo);
	end;

	fun add64 ((hi1, lo1), (hi2, lo2))
	    =
	    {   my (lo, hi)
		    =
		    ( lo1 + lo2,
                      hi1 + hi2
                    );

		( lo < lo1   ??    hi + 0u1
                             ::    hi,

                  lo
                );
	    };

	fun sub64 ((hi1, lo1), (hi2, lo2))
            =
	    {   my (lo, hi) = (lo1 - lo2, hi1 - hi2);

	        ( lo1 < lo   ??   hi - 0u1
                             ::   hi,
                  lo
                );
	    };

	fun mul64 ((hi1, lo1), (hi2, lo2))
	    =
	    {   my ((a1, b1), (c1, d1)) = (split16 hi1, split16 lo1);
		my ((a2, b2), (c2, d2)) = (split16 hi2, split16 lo2);
		dd = d1 * d2;
		my (cd, dc) = (c1 * d2, d1 * c2);
		my (bd, cc, db) = (b1 * d2, c1 * c2, d1 * b2);
		my (ad, bc, cb, da) = (a1 * d2, b1 * c2, c1 * b2, d1 * a2);
		diag0 = dd;
		diag1 = cd + dc;
		diag1carry = if (diag1 < cd ) 0ux10000; else 0u0;fi;
		diag2 = bd + cc + db;
		diag3 = ad + bc + cb + da;
		lo = diag0 + (diag1 << 0u16);
		locarry = if (lo < diag0 ) 0u1; else 0u0;fi;
		hi = (diag1 >> 0u16) + diag2 + (diag3 << 0u16)
			 + locarry + diag1carry;
	     (hi, lo);
	    };

	stipulate

              package cii = core_integer;

	      up = cii::copy_inf64;
              dn = cii::trunc_inf64;

	herein

	    # This is even more inefficient 
            # than doing it the hard way,
	    # but I am lazy...  XXX BUGGO FIXME
            #
	    fun div64 (x, y)
                =
                dn (cii::div (up x, up y));
	end;

	fun mod64 (x, y)
	    =
	    sub64 (x, mul64 (div64 (x, y), y));

	fun swap (x, y)
	    =
	    (y, x);

	fun lt64 ((hi1, lo1), (hi2, lo2))
	    =
	    hi1 < hi2 or (inline::w32eq (hi1, hi2) and lo1 < lo2);

	gt64 = lt64 o swap;
	le64 = not o gt64;
	ge64 = not o lt64;

    herein

	extern = inline::w64p;
	intern = inline::p64w;

	(-_) = lift1 neg64;
	neg  = lift1 neg64;

	(+)  = lift2 add64;
	(-)  = lift2 sub64;
	(*)  = lift2 mul64;
	div  = lift2 div64;

	mod  = lift2 mod64;

	(<)  = lift2' lt64;
	<=   = lift2' le64;
	>    = lift2' gt64;
	>=   = lift2' ge64;
    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 2004 by The Fellowship of SML/NJ
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
