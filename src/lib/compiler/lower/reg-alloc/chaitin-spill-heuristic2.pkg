## chaitin-spill-heuristic2.pkg
#
# This module implements the Chaitin heuristic (but weighted by
# priorities).  This version also takes into account of savings in
# coalescing if a virtual is not spilled.  You should use this version
# if your program uses direct style and makes use of calleesave registers.

# Compiled by:
#     src/lib/compiler/lower/make7/ra.make6

generic package improved_chaitin_spill_heuristic_g
    ( move_ratio:  Float; 
      #  Cost of move compared to load/store; should be <= 1.0 
    )

: (weak) Register_Allocation_Spill_Heuristics		# Register_Allocation_Spill_Heuristics	is from   src/lib/compiler/lower/reg-alloc/ra-spill-heuristic.api

{
    package g = register_allocation_graph;		# register_allocation_graph		is from   src/lib/compiler/lower/reg-alloc/ra-graph.pkg

    include g;

    exception NO_CANDIDATE;

    mode = register_allocation_core::no_optimization;

    fun init () =   ();


    # Potential spill phase.
    # Find a cheap node to spill according to Chaitin's heuristic.

    fun choose_spill_node { graph, has_been_spilled, spill_worklist }
        = 
	{   fun chase (NODE { color=>REF (ALIASED n), ... } )
                    =>
                    chase n;

	       chase n
                    =>
                    n;
            end;

	    infinite_cost = 123456789.0;
	    don't_use     = 223456789.0;

	    #  Savings due to coalescing when a node is not spilled 
	    #
	    fun move_savings (NODE { movecnt=>REF 0, ... } )
                    =>
                    0.0;

	       move_savings (NODE { movelist, ... } )
		    => 
                    loop (*movelist, [])
                    where
		        fun loop ([], savings)
                                => 
			        fold_right
                                    (fn ((_, a), b) = float::max (a, b))
                                    0.0
                                    savings;

			   loop (MOVE_INT { status=>REF (WORKLIST | GEORGE_MOVE | BRIGGS_MOVE),
				    dst, src, cost, ... } ! mvs, savings)
				=> 
				{   fun add (c,[])
                                            =>
                                            [(c, cost)];

				        add (c, (x as (c': Int, s)) ! savings)
					    =>
					    if (c == c')
					         (c', s+cost) ! savings; 
					    else
                                                 x ! add (c, savings);
                                            fi;
                                    end;

				    savings
					=
					case (chase dst)

					     NODE { color=>REF (COLORED c), ... }
                                                 =>
                                                 add (c, savings);

					     _   =>
						case (chase src)

						    NODE { color=>REF (COLORED c), ... }
                                                        =>
                                                        add (c, savings);

						    _   => savings;
                                                esac;
                                        esac;

                                   loop (mvs, savings);
                               };

			   loop(_ ! mvs, savings)
                                =>
                                loop (mvs, savings);
                        end;
                    end;
	    end;


	    # The spill worklist is maintained only lazily.  So we have
	    # to prune away those nodes that are already removed from the
	    # interference graph.  After pruning the spillWkl, 
	    # it may be the case that there aren't anything to be 
	    # spilled after all.
	    #
	    # Choose node with the lowest cost and have the maximal degree
	    #
	    fun chaitin ([], best, lowest_cost, spill_worklist)
                    => 
		    (best, lowest_cost, spill_worklist);

	        chaitin (node ! rest, best, lowest_cost, spill_worklist)
		    => 
		    case (chase node)
		      
		         node as NODE { number, pri, defs, uses,
				degree=>REF deg, color=>REF PSEUDO, ... }
			      => 
			      {   fun cost ()
				      = 
				      {   move_savings =   move_ratio * move_savings (node);
					  (*pri + move_savings) // real deg;
				      };

				  cost = 
				      case (*defs, *uses)

				          (_,[])				#  Defs but no use 
					      =>
					      -1.0 - real deg;

					 ([d],[u])				# defs after use; don't use
					      =>
					      {   fun plus ( { block, instruction }, n)
						      =
						      {   block,   instruction => instruction + n   };

						  if  (d == plus (u, 1)
						       or
						       d == plus (u, 2) 
						  )
                                                      don't_use;
						  else
                                                      cost();
                                                  fi;
					      };

					 _ => cost ();
                                      esac;

				  if  (cost < lowest_cost
				       and
				       not (has_been_spilled number)
                                     )

				       case best
					   NULL =>     chaitin (rest, THE node, cost,        spill_worklist);
					   THE best => chaitin (rest, THE node, cost, best ! spill_worklist);
				       esac;

				  else
				       chaitin (rest, best, lowest_cost, node ! spill_worklist);
                                  fi;
			      };

			  _   =>
			      chaitin (rest, best, lowest_cost, spill_worklist);	#  Discard node 
                      esac;
		end;

	    #  print("["$int::to_string (length spillWkl)$"]") 
	    #
	    my (potential_spill_node, cost, new_spill_worklist)
                = 
		chaitin (spill_worklist, NULL, infinite_cost, []);

	    case (potential_spill_node, new_spill_worklist)
	      
		 (NULL, []) =>  { node => NULL, cost, spill_worklist => [] };
		 (NULL, _)  =>  raise exception NO_CANDIDATE;

		 (THE node, spill_worklist)
		      => 
		      { node=>THE node, cost, spill_worklist };
            esac;
	};
};
