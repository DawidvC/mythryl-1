## reify.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



# This is one of the A-Normal Form optimization passes --
# for context see the comments in
#
#     src/lib/compiler/upper/anormal/anormal.api
#



#     "This phase compiles away the type passing  where it is used.
#      In other words, it turns types into runtime data wherever
#      this is needed.  The output of this phase is not strongly
#      typed any more, although it still has type annotations."
#
#           -- Principled Compilation and Scavenging
#              Stefan Monnier, 2003 [PhD Thesis, U Montreal]
#              http://www.iro.umontreal.ca/~monnier/master.ps.gz 




api Reify {

   reify:  anormal::Program -> anormal::Program;
}; #  Api REIFY 

package reify: (weak)  Reify {			# Reify		is from   src/lib/compiler/upper/reps/reify.pkg

    stipulate

        package lp= type_oper;			# type_oper			is from   src/lib/compiler/upper/reps/typeoper.pkg
	package lt= highcode;			# highcode			is from   src/lib/compiler/upper/highcode/highcode.pkg
	package lv= highcode_var;		# highcode_var			is from   src/lib/compiler/upper/highcode/highcode-var.pkg
	package da= var_home;			# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package di= debruijn_index;		# debruijn_index		is from   src/lib/compiler/front/typechecker/basics/de-bruijn-index.pkg
	package po= highcode_primitive_op;	# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg
	package fu= anormal_stuff;		# anormal_stuff			is from   src/lib/compiler/upper/anormal/anormal-stuff.pkg

	include anormal;

    herein

	fun bug s = error_message::impossible ("Reify: " + s);
	say = control_print::say;

	make_var = highcode_var::make_highcode_variable;

	ident =   fn le = le;

	fun option f (THE x) => THE (f x);
	    option f  NULL   => NULL;
        end;

	# A special version of WRAP and UNWRAP
        # for post-reify typechecking:
        #
	lt_arw = lt::ltc_tyc o lt::tcc_arrow;
	lt_vfn = lt_arw (lt::ffc_fixed, [lt::tcc_void], [lt::tcc_void]);

	fun wty  tc = 	  (NULL, po::WRAP,   lt_arw (lt::ffc_fixed, [tc], [lt::tcc_void]), []);
	fun uwty tc =	  (NULL, po::UNWRAP, lt_arw (lt::ffc_fixed, [lt::tcc_void], [tc]), []);

	fun wrap_primop (tc, vs, v, e) = PRIMOP (wty tc, vs, v, e);
	fun unwrap_primop (tc, vs, v, e) = PRIMOP (uwty tc, vs, v, e);

	# Major gross hack: use of fct_lty in WCAST primops
        #
	fun make_wcast (u, oldt, newt)
            =
	    {   v = make_var();

		( fn e = PRIMOP ( (NULL, po::WCAST, lt::ltc_fct([oldt],[newt]), []),
				  [u],
				  v,
				  e
				),
		  v
		);
	    };

	fun mcast_single (oldt, newt)
            = 
	    if (lt::lambda_types_are_equivalent (oldt, newt))   NULL;
	    else                                                THE (fn u =  make_wcast (u, oldt, newt));
            fi;

	fun mcast (oldts, newts)
            = 
	    f (oldts, newts, [], TRUE)
            where
	        fun f (a ! r, b ! s, z, flag)
                          => 
		          case (mcast_single (a, b) )
			       NULL => f (r, s, NULL ! z, flag);
			       x    => f (r, s, x ! z, FALSE);
                          esac;

		    f ([], [], z, flag)
                        => 
		        if flag
                             fn le = le;
		        else
			     vs = map (fn _ = make_var()) oldts;

			     my (header, nvs)
                                 = 
				 g (reverse z, vs, ident, [])
                                 where
			             fun g (NULL ! xx, v ! yy, h, q)
                                             =>
					     g (xx, yy, h, (VAR v) ! q);

				         g ((THE vh) ! xx, v ! yy, h, q)
                                             => 
					     {   my (h', k) = vh (VAR v);
					         g (xx, yy, h o h', (VAR k) ! q);
					     };

				         g([], [], h, q)
                                             =>
                                             (h, reverse q);

				         g _ => bug "unexpected case in mcast";
                                     end;
			         end;

			   fn e =  LET (vs, e, header (RET nvs));

                        fi;

		    f _ => bug "unexpected case in mcast";
                end;
	    end;

	#############################################################################
	# Reify does the following things:
	#
	#   (1) Conreps in CON and DECON are given type-specific meanings.
	#   (2) Type abstractions TYPE_FN are converted into function abstractions;
	#   (3) Type applications TYPE_APPLY are converted into function applications;
	#   (4) Type-dependent primops such as WRAP/UNWRAP are given
	#       type-specific meanings;
	#   (5) Anormal is now transformed into a monomorphically typed lambda
	#       calculus. Type mismatches are fixed via the use of type cast
	#############################################################################

	#  reify:  fundec -> fundec 
	fun reify fdec
	    = 
	    {   my { get_lty=>getlty, clean_up, ... }
                    =
                    recover_type_info::recover_type_info (fdec, FALSE); 

		my (tcf, ltf, clear) = lt::tnarrow_fn ();

		fun dcf ((name, representation, lt), ts)
                       = (name, representation, lt_vfn);

		fun dargtyc ((name, representation, lt), ts)
                    = 
		    {   skt = lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, map (fn _ => lt::tcc_void; end ) ts);

		        my (tc, _) = lt::tcd_parrow (lt::ltd_tyc skt);

		        nt = ltf (lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, ts));

		        my (rt, _) = lt::tcd_parrow (lt::ltd_tyc nt);

		        (tc, rt, (name, representation, lt_vfn));
		     };

		#  transform: kenv * di::depth -> Lambda_Expression -> Lambda_Expression 
		#
		fun transform (kenv)
                    = 
		    loop
                    where

		        # lpfd: fundec -> fundec
                        #
		        fun lpfd (fk, f, vts, e)
			    = 
			    {   nfk = case fk 
					  { is_recursive=>THE (lts,         lk), calling_convention, all_call_sites_known, inlining_hint } =>
					  { is_recursive=>THE (map ltf lts, lk), calling_convention, all_call_sites_known, inlining_hint };

					  _ => fk;
				      esac;

				nvts =  map  (fn (v, t) = (v, ltf t))
                                             vts;

			        (nfk, f, nvts, loop e);
			    }

		     # lpcon: con -> con * (Lambda_Expression -> Lambda_Expression)
		     #
		     also
		     fun lpcon (DATACON (dc as (_, da::EXCEPTION _, nt), [], v))
			     => 
			     {   ndc = dcf (dc, []);

				 z = make_var();
				 w = make_var();

				 # WARNING: the 3rd field should List( string )

				 my (ax, _) = lt::tcd_parrow (lt::ltd_tyc nt);

				 lt_exr =  lt::tcc_tuple [lt::tcc_void, tcf ax, lt::tcc_int];

				 ( DATACON (ndc, [], z), 
				   fn le = unwrap_primop (lt_exr, [VAR z], w, SELECT (VAR w, 1, v, le))
                                 );
			      };

			 lpcon (DATACON (dc as (name, da::CONSTANT _, lt), ts, v))
			     => 
			     {   ndc = dcf (dc, ts);

				 z   = make_var();

				 (DATACON (ndc, [], z), 

				 fn le = RECORD (fu::rk_tuple, [], v, le));
			     };

			 lpcon (DATACON (dc as (_, da::UNTAGGED, _), ts, v))
			     => 
			     {   my (tc, rt, ndc) = dargtyc (dc, ts);
				 header = lp::utgd (tc, kenv, rt);
				 z = make_var();
				 (DATACON (ndc, [], z),

				 fn le = LET([v], header (VAR z), le));
			     };

			 lpcon (DATACON (dc as (_, da::TAGGED i, _), ts, v))
			     => 
			     {   my (tc, rt, ndc) = dargtyc (dc, ts);
				 header = lp::tgdd (i, tc, kenv, rt);
				 z = make_var();
				 (DATACON (ndc, [], z),
				 fn le =  LET([v], header (VAR z), le));
			     };

			 lpcon (DATACON _) => bug "unexpected case in lpcon";

			 lpcon c => (c, ident);
                     end 

		     # lpev:  Lambda_Expression -> (value * (Lambda_Expression -> Lambda_Expression)) 
		     #
		     also
		     fun lpev (RET [v])
                             =>
                             (v, ident);

			 lpev e
			     =>
			     {   x= make_var();
			         (VAR x, fn y = LET([x], e, y));
			     };
                     end 

		     #  loop: Lambda_Expression -> Lambda_Expression 
		     also
		     fun loop le
                         = 
		         case le

			    RET _ => le;

			    LET (vs, e1, e2)
                                =>
                                LET (vs, loop e1, loop e2);

			    MUTUALLY_RECURSIVE_FNS (fdecs, e)
                                =>
                                MUTUALLY_RECURSIVE_FNS (map lpfd fdecs, loop e);

			    APPLY _
                                =>
                                le;

			    TYPE_FN((tfk, v, tvks, e1), e2)
				=> 
				{   my (nkenv, header) = lp::tk_abs (kenv, tvks, v);
				    ne1 = transform (nkenv) e1;
				    header (ne1, loop e2);
				};

			    TYPE_APPLY (v, ts)
				=> 
				{   my (u, header) = lpev (lp::ts_lexp (kenv, ts));

				    #  A temporary hack that fixes type mismatches 
				    lt = getlty v;
				    oldts = map ltf (#2 (lt::ltd_poly lt));
				    newts = map ltf (lt::instantiate_polymorphic_lambda_or_higher_order_constructor_type (lt, ts));
				    nhdr = mcast (oldts, newts);
				    nhdr (header (APPLY (v, [u])));
				};

			    RECORD (RK_VECTOR tc, vs, v, e)
                                => 
			        RECORD (RK_VECTOR (tcf tc), vs, v, loop e);

			    RECORD (rk, vs, v, e)
                                =>
                                RECORD (rk, vs, v, loop e);

			    SELECT (u, i, v, e)
                                =>
                                SELECT (u, i, v, loop e);

			    CONSTRUCTOR ((_, da::CONSTANT i, _), _, _, v, e)
                                => 
			        wrap_primop (lt::tcc_int, [INT i], v, loop e);

			    CONSTRUCTOR ((_, da::EXCEPTION (da::HIGHCODE_VARIABLE x), nt), [], u, v, e)
                                => 
			        {   z = make_var();

				    my (ax, _) = lt::tcd_parrow (lt::ltd_tyc nt);

				    lt_exr
                                        = 
				        lt::tcc_tuple [lt::tcc_void, tcf ax, lt::tcc_int];

				    RECORD (fu::rk_tuple, [VAR x, u, INT 0], z, 
					  wrap_primop (lt_exr, [VAR z], v, loop e));
			       };

			    CONSTRUCTOR (dc as (_, da::UNTAGGED, _), ts, u, v, e)
                                => 
			        {   my (tc, rt, _) = dargtyc (dc, ts);

				    header = lp::utgc (tc, kenv, rt);

				    LET([v], header (u), loop e);
			        };

			    CONSTRUCTOR (dc as (_, da::TAGGED i, _), ts, u, v, e)
                                => 
			        {   my (tc, rt, _) = dargtyc (dc, ts);
				    header = lp::tgdc (i, tc, kenv, rt);
				    LET([v], header (u), loop e);
			        };

			    CONSTRUCTOR (_, ts, u, v, e)
                                =>
                                bug "unexpected case CON in loop";

			    SWITCH (v, csig, cases, opp)
                                => 
				SWITCH (v, csig, map g cases, option loop opp)
                                where
			            fun g (c, x)
                                        = 
				        {   my (nc, header) = lpcon c;
				            (nc, header (loop x));
				        };
			        end;

			    RAISE (u, ts)
                                 =>
                                 RAISE (u, map ltf ts);

			    EXCEPT (e, v)
                                =>
                                EXCEPT (loop e, v);

			    BRANCH (xp as (NULL, po, lt, []), vs, e1, e2)
                               => 
			       BRANCH((NULL, po, ltf lt, []), vs, loop e1, loop e2);

			    BRANCH(_, vs, e1, e2)
                                => 
			        bug "type-directed branch primops are not supported";

			    PRIMOP (xp as (_, po::WRAP, _, _), u, v, e)
                                => 
			        {   tc = fu::get_wrap_type_constructor xp;
				    header = lp::make_wrap (tc, kenv, TRUE, tcf tc);
				    LET([v], header (RET u), loop e);
			        };

			    PRIMOP (xp as (_, po::UNWRAP, _, _), u, v, e)
                                =>
			        {   tc = fu::get_un_wrap_type_constructor xp;
				    header = lp::make_unwrap (tc, kenv, TRUE, tcf tc);
				    LET([v], header (RET u), loop e);
			        };

			    PRIMOP (xp as (NULL, po, lt, []), vs, v, e)
                                => 
			        PRIMOP((NULL, po, ltf lt, []), vs, v, loop e);

			    PRIMOP((d, po::SUBSCRIPT, lt, [tc]), u, v, e)
                                => 
			        {   blt = ltf (lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, [tc]));
				    rlt = ltf (lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, [lt::tcc_real]));
				    header = lp::arr_sub (tc, kenv, blt, rlt); 
				    LET([v], header (u), loop e);
			        };

			    PRIMOP
                                ( (d, po as (po::UPDATE | po::UNBOXED_SET | po::BOXED_SET), lt, [tc]),
                                  u,
                                  v,
                                  e
                                )
                                =>
			        {   blt = ltf (lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, [tc]));
				    rlt = ltf (lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, [lt::tcc_real]));
				    header = lp::arr_upd (tc, kenv, po, blt, rlt);
				    LET([v], header (u), loop e);
			        }; 

			    PRIMOP
                                ( (THE { default=>pv, table => [(_, rv)] }, po::INLMKARRAY, lt, [tc]),
                                  u, v, e
                                )
                                =>
			        {   header = lp::arr_new (tc, pv, rv, kenv);
				    LET([v], header (u), loop e);
			        };

			    PRIMOP((_, po, _, _), vs, v, e)
                                => 
			        {   say ("\n####" + (highcode_primitive_op::pr_primop po) + "####\n");
				    bug "unexpected PRIMOP in loop";
                                };
                      esac;


		 end;			#  where (fun transform)

		 my (fk, f, vts, e)
                     =
                     fdec;


	        ( fk,
                  f,
                  map  (fn (v, t) = (v, ltf t))  vts,
		  transform  lp::init_ke  e
                )
                before
                    {   clean_up();
                        clear();
                    };

	    };		# fun reify 

    end;		# toplevel stipulate
};			# package reify 


##########################################################################
#   The following is support for outline-minor-moded in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
