## sparc-delay-slots-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/sparc.make6

# We get invoked by:
#
#     src/lib/compiler/codegen/sun/sparc-codegen.pkg

generic package sparc_delay_slots_g (

    package instruction_set:  Instruction_Set_Sparc;			# Instruction_Set_Sparc		is from   src/lib/compiler/lower/sun/instruction/instruction-set-sparc.api

    package instruction_properties
	:
	Instruction_Properties						# Instruction_Properties	is from   src/lib/compiler/lower/instruction/instruction-properties.api
        where instruction_set == instruction_set;

    #  sharing/defn conflict:   sharing p::i = i
)

: (weak)  Delay_Slot_Properties						# Delay_Slot_Properties		is from   src/lib/compiler/lower/span/delay-slot-props.api

{
    package instruction_set  = instruction_set;
    package cells            = instruction_set::cells;

    package p  = instruction_properties;
    package i  = instruction_set;
    package c  = cells;
    package sl = cells_basis::sorted_cells;	# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    fun error msg
        =
        lowcode_error_message::error("SparcDelaySlotProps", msg);

    Delay_Slot = D_NONE | D_ERROR | D_ALWAYS | D_TAKEN | D_FALLTHRU;

    delay_slot_bytes = 4;

    fun delay_slot { instruction, backward }
	=
	case instruction

	    i::BASE_INSTRUCTION (i::CALL { nop, ... } ) => { n=>FALSE, n_on=>D_ERROR, n_off=>D_ALWAYS, nop };
	    i::BASE_INSTRUCTION (i::JMP { nop, ... } ) => { n=>FALSE, n_on=>D_ERROR, n_off=>D_ALWAYS, nop };
	    i::BASE_INSTRUCTION (i::JMPL { nop, ... } ) => { n=>FALSE, n_on=>D_ERROR, n_off=>D_ALWAYS, nop };
	    i::BASE_INSTRUCTION (i::RET { nop, ... } )  => { n=>FALSE, n_on=>D_ERROR, n_off=>D_ALWAYS, nop };
	    i::BASE_INSTRUCTION (i::BICC { b=>i::BA, a, nop, ... } ) => { n=>FALSE, n_on=>D_NONE, n_off=>D_ALWAYS, nop };
	    i::BASE_INSTRUCTION (i::BICC { a, nop, ... } ) => { n=>a, n_on=>D_TAKEN, n_off=>D_ALWAYS, nop };
	    i::BASE_INSTRUCTION (i::FBFCC { a, nop, ... } ) => { n=>a, n_on=>D_TAKEN, n_off=>D_ALWAYS, nop };
	    i::BASE_INSTRUCTION (i::BR { a, nop, ... } ) => { n=>a, n_on=>D_TAKEN, n_off=>D_ALWAYS, nop };
	    i::BASE_INSTRUCTION (i::BP { a, nop, ... } ) => { n=>a, n_on=>D_TAKEN, n_off=>D_ALWAYS, nop };
	    i::BASE_INSTRUCTION (i::FCMP { nop, ... } ) => { n=>FALSE, n_on=>D_ERROR, n_off=>D_ALWAYS, nop };
	    i::NOTE { instruction, ... } => delay_slot { instruction, backward };
	    _ => { n=>FALSE, n_on=>D_ERROR, n_off=>D_NONE, nop=>FALSE };
	esac;

    fun enable_delay_slot { instruction, n, nop }
        =
	case (instruction, n)
          
	    (i::BASE_INSTRUCTION (i::JMP { r, i, labs, ... } ), FALSE)         =>   i::jmp { r, i, labs, nop };
	    (i::BASE_INSTRUCTION (i::RET { leaf, ... } ), FALSE)               =>   i::ret { leaf, nop };
	    (i::BASE_INSTRUCTION (i::BICC { b, a, label, ... } ), _)           =>   i::bicc { b, a=>n, nop, label };
	    (i::BASE_INSTRUCTION (i::FBFCC { b, a, label, ... } ), _)          =>   i::fbfcc { b, a=>n, nop, label };
	    (i::BASE_INSTRUCTION (i::BR { nop, label, p, r, rcond, ... } ), _) =>   i::br { rcond, r, a=>n, nop, label, p };
	    (i::BASE_INSTRUCTION (i::BP { nop, label, p, cc, b, ... } ), _)    =>   i::bp { b, cc, a=>n, nop, label, p };
	    (i::BASE_INSTRUCTION (i::FCMP { cmp, r1, r2, ... } ), FALSE)       =>   i::fcmp { cmp, r1, r2, nop };
	    (i::NOTE { instruction, note }, n)                          =>   i::NOTE { instruction=>enable_delay_slot { instruction, n, nop }, note };

	    (i::BASE_INSTRUCTION (i::CALL { defs, uses, label, cuts_to, mem, ... } ), FALSE)
                => 
		i::call { defs, uses, label, cuts_to,
		       nop, mem };

	    (i::BASE_INSTRUCTION (i::JMPL { r, i, d, defs, uses, mem, cuts_to, ... } ), FALSE)
                => 
		i::jmpl { r, i, d, defs, uses, cuts_to,
		       nop, mem };

	    _ => error "enableDelaySlot";
        esac;

     def_use_i = p::def_use cells_basis::REGISTER;
     def_use_f = p::def_use cells_basis::FLOAT_REGISTER;
     psr     = [c::psr]; 
     fsr     = [c::fsr];
     y       = [c::y];
     zero_r   = null_or::the (c::zero_reg cells_basis::REGISTER);
     everything = [c::y, c::psr, c::fsr];

     fun conflict { src=>i, dst=>j }
         = 
	 {   fun cc i::ANDCC  => TRUE;
		 cc i::ANDNCC => TRUE;
		 cc i::ORCC   => TRUE;
		 cc i::ORNCC  => TRUE;
		 cc i::XORCC  => TRUE;
		 cc i::XNORCC => TRUE;
		 cc i::ADDCC  => TRUE;
		 cc i::TADDCC  => TRUE;
		 cc i::TADDTVCC => TRUE;
		 cc i::SUBCC => TRUE;
		 cc i::TSUBCC => TRUE;
		 cc i::TSUBTVCC=> TRUE;
		 cc i::UMULCC => TRUE;
		 cc i::SMULCC => TRUE;
		 cc i::UDIVCC => TRUE;
		 cc i::SDIVCC => TRUE; 
		 cc _ => FALSE;
             end;

	     fun def_use_other (i::BASE_INSTRUCTION (i::BICC { b=>i::BA, ... } )) => ([],[]);
		 def_use_other (i::BASE_INSTRUCTION (i::BICC _))    => ([], psr);
		 def_use_other (i::BASE_INSTRUCTION (i::TICC _))    => ([], psr);
		 def_use_other (i::BASE_INSTRUCTION (i::WRY _))     => (y,[]);
		 def_use_other (i::BASE_INSTRUCTION (i::RDY _))     => ([], y);
		 def_use_other (i::BASE_INSTRUCTION (i::FCMP _))    => (fsr,[]);
		 def_use_other (i::BASE_INSTRUCTION (i::FBFCC _))   => ([], fsr);
		 def_use_other (i::BASE_INSTRUCTION (i::MOVICC _))  => ([], psr);
		 def_use_other (i::BASE_INSTRUCTION (i::MOVFCC _))  => ([], fsr);
		 def_use_other (i::BASE_INSTRUCTION (i::FMOVICC _)) => ([], psr);
		 def_use_other (i::BASE_INSTRUCTION (i::FMOVFCC _)) => ([], fsr);
		 def_use_other (i::BASE_INSTRUCTION (i::CALL _))    => (everything,[]);
		 def_use_other (i::BASE_INSTRUCTION (i::JMPL _))    => (everything,[]);
		 def_use_other (i::BASE_INSTRUCTION (i::ARITH { a, ... } )) => 
		    if (cc a ) (psr,[]); else ([],[]);fi;
		 def_use_other (i::NOTE { instruction, ... } ) => def_use_other instruction;
		 def_use_other _ => ([],[]);
             end;

	     fun clash (def_use)
                 =
		 {   my (di, ui) = def_use i;
		     my (dj, uj) = def_use j;

		     sl::non_empty_intersection (di, uj) or
		     sl::non_empty_intersection (di, dj) or
		     sl::non_empty_intersection (ui, dj); 
		 };

	     fun to_sl f i
                 =
                 {   my (d, u) = f i;
		     (sl::uniq d, sl::uniq u);
                 };

	     fun def_use_int i
                 = 
		 {   my (d, u) = def_use_i i;
		     d     = sl::uniq d;
		     u     = sl::uniq u;
		     /* no dependence on register 0! */ 
		   (sl::rmv (zero_r, d), sl::rmv (zero_r, u));
                 };

	     clash (def_use_int) or 
	     clash (to_sl def_use_f) or
	     clash (to_sl def_use_other);
	 };

     fun delay_slot_candidate { jmp, delay_slot=>
	       (  i::BASE_INSTRUCTION (i::CALL _) | i::BASE_INSTRUCTION (i::BICC _) | i::BASE_INSTRUCTION (i::FBFCC _) 
		| i::BASE_INSTRUCTION (i::TICC _) | i::BASE_INSTRUCTION (i::BR _) | i::BASE_INSTRUCTION (i::JMP _) | i::BASE_INSTRUCTION (i::JMPL _) 
		| i::BASE_INSTRUCTION (i::RET _) | i::BASE_INSTRUCTION (i::BP _) | i::BASE_INSTRUCTION (i::FCMP _)) }
            =>
            FALSE;

	delay_slot_candidate { jmp=>i::NOTE { instruction, ... }, delay_slot }
            => 
	    delay_slot_candidate { jmp=>instruction, delay_slot };

	delay_slot_candidate { jmp, delay_slot=>i::NOTE { instruction, ... } }
            => 
	    delay_slot_candidate { jmp, delay_slot => instruction };

	delay_slot_candidate _ => TRUE;
    end; 

    fun set_target (i::BASE_INSTRUCTION (i::BICC  { b, a, nop, ... } ), lab) =>   i::bicc  { b, a, nop, label=>lab };
	set_target (i::BASE_INSTRUCTION (i::FBFCC { b, a, nop, ... } ), lab) =>   i::fbfcc { b, a, nop, label=>lab };

	set_target (i::BASE_INSTRUCTION (i::BR { rcond, p, r, a, nop, ... } ), lab)
            => 
	    i::br { rcond, p, r, a, nop, label=>lab };

	set_target (i::BASE_INSTRUCTION (i::BP { b, p, cc, a, nop, ... } ), lab)
            => 
	    i::bp { b, p, cc, a, nop, label=>lab };

	set_target (i::NOTE { instruction, note }, lab)
            =>
            i::NOTE { instruction => set_target (instruction, lab), note };

	set_target _ => error "set_target";
    end;
};
