## color-space.pkg

# Compiled by:
#     src/lib/x-kit/draw/xkit-draw.make6


# Code of various color space utilities.



###         "I have never known any distress that an
###          hour's reading did not relieve."
###
###                             -- Nontesquieu



package color_space: (weak)  Color_Space {		# Color_Space	is from   src/lib/x-kit/draw/color-space.api

    package xc = xcore;					# xcore		is from   src/lib/x-kit/xclient/src/api/build.pkg

    maxrgb = 65535.0;

    Hsv = HSV  { hue:  Float, sat:  Float, value:  Float };
    Yiq = YIQ  { y:  Float, i:  Float, q:  Float };

    fun max (a:  Float, b) = if (a >= b) a; else b; fi;
    fun min (a:  Float, b) = if (a <= b) a; else b; fi;

    fun sc r  = unt::from_int (float::truncate (maxrgb*r));
    fun w2r w = real (unt::to_int_x w);

    fun rgb_to_hsv (xc::RGB { red, green, blue } )
        =
        {   realr = (w2r red)//maxrgb;
	    realg = (w2r green)//maxrgb;
	    realb = (w2r blue)//maxrgb;
	    max_v = max (realr, max (realg, realb));
	    min_v = min (realr, min (realg, realb));
	    delta = max_v - min_v;

            if   (float::(====) (delta, 0.0))
                
                 HSV { hue=>0.0, sat=>0.0, value=>max_v };
            else 
		 sat = delta // max_v;
		 rc = (max_v - realr)//delta;
		 gc = (max_v - realg)//delta;
		 bc = (max_v - realb)//delta;
		 h1 = if   (float::(====) (realr, max_v) ) bc - gc;
		      elif (float::(====) (realg, max_v) ) 2.0 + rc - bc;
		      else 4.0 + gc - rc;
                      fi;
		 h2 = 60.0 * h1;                    #   Convert to degrees 
		 hue = if (h2 < 0.0   ) h2 + 360.0; #  make nonnegative 
				     else h2;fi;
		 HSV { hue, sat, value=>max_v };
             fi;
          };

    fun get_hsvvalues (HSV v)
        =
        v;

    fun hsb_to_rgb (HSV { sat, value, hue } )
	=
	if   (float::(====) (sat, 0.0))
	    
             v = sc value;   xc::RGB { red=>v, green=>v, blue=>v }; 
	else
	     h = if (float::(====) (hue, 360.0) ) 0.0; else hue//60.0;fi;
	     i = floor h;
	     ri = real i;
	     f = h - ri;
	     p = value*(1.0 - sat);
	     q = value*(1.0 - (sat*f));
	     t = value*(1.0 - (sat*(1.0 - f)));

	     fun mkrgb (r, g, b)
		 =
		 xc::RGB { red=>sc r, green=>sc g, blue=>sc b };

	     case i
	       
		  0 => mkrgb (value, t, p);
		  1 => mkrgb (q, value, p);
		  2 => mkrgb (p, value, t);
		  3 => mkrgb (p, q, value);
		  4 => mkrgb (t, p, value);
		  _ => mkrgb (value, p, q);
             esac;

	fi;

    fun get_y' (xc::RGB { red, green, blue } )
        = 
	(0.3*(w2r red) + 0.59*(w2r green) + 0.11*(w2r blue))//maxrgb;

    fun get_i' (xc::RGB { red, green, blue } )
        = 
        (0.6*(w2r red) - 0.28*(w2r green) - 0.32*(w2r blue))//maxrgb;

    fun get_q' (xc::RGB { red, green, blue } )
        = 
        (0.21*(w2r red) - 0.52*(w2r green) + 0.31*(w2r blue))//maxrgb;

    fun get getf color
        =
        {   rgb =   xc::rgb_of_color color;

	    getf rgb;
	};

    get_y = get get_y';
    get_i = get get_i';
    get_q = get get_q';

    fun rgb_to_yiq color
        =
        {   rgb =   xc::rgb_of_color color;

	    YIQ { y=>get_y' rgb, i=>get_i' rgb, q=>get_q' rgb };
	};

};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
