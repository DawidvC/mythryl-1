
2009-05-20 CrT:
		WARNING: The currently maintained version of this file is in
			 the online docs, section "Compiler Internals".  This
			 copy will probably grow steadily more out of date
			 over time.

Contents
========

    Compiler Schematic
    Overview
    Front end
    Middle end
    Back end
    History
    Resources

Compiler Schematic
==================

The view from ten thousand feet looks like so: 

-FRONT END-
                 source text in Mythryl
                       |
                       |  lexing and parsing
                       V
                 raw syntax
                       |
                       |  typechecking
                       V
                 deep syntax
                       |
                       |  pattern-match compilation and such.
-BACK END UPPER HALF-  V
                 polylambda form                     # Used only very briefly as a transitional format.
                       |
                       |  
                       V
                 A-Normal form                       # Used for machine-independent optimizations.
                       |
                       |
                       V
                 FPS ("fate passing style)   # Used for more machine-independent optimizations.
                       |
                       |
-BACK END LOWER HALF-  V
                 Code_Tree format                    # Used for machine-dependent optimizations.
                       |
                       |
                       V
                 SSA ("static single assignment")    # Used for more sophisticated machine-dependent optimizations.
                       |                             # This step is optional and in fact not currently done.
                       |
                       V
                 Code_Tree format                    # When done with SSA stuff, we convert back to Code_Tree.
                       |
                       |
                       V
                 Machine code.			      # Position-independent -- we don't have a linker that patches code.


Thus, the Mythryl compiler code representations used are, in order:

1)  Raw Syntax is the initial front-end code representation.
2)  Deep Syntax is the second and final front-end code representation.
3)  Polylambda is the first backend code representation, used only transitionally.
4)  A-Normal  is the second backend code representation, and the first used for optimization.
5)  Fate-Passing-Style is the third and chief backend upper-half code representation.
6)  Codetree is the chief backend lower-half code representation.
7)  X86 instruction format (or equivalent for other target machines) -- an abstract tree format.
8)  X86 machine language   (or equivalent for other target machines) -- absolute binary code.

These are respectively defined by:

1)    src/lib/compiler/front/parse/raw-syntax/raw-syntax.api
2)    src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.api
3)    src/lib/compiler/upper/polylambda/polylambda.api
4)    src/lib/compiler/upper/anormal/anormal.api
5)    src/lib/compiler/upper/fps/fate-passing-style.api
6)    src/lib/compiler/lower/codetree/codetree.api
7)    src/lib/compiler/lower/ppc/instruction/instruction-set-ppc.api
      src/lib/compiler/lower/sun/instruction/instruction-set-sparc.api
      src/lib/compiler/lower/x86/instruction/instruction-set-x86.api 

The transformations between these formats are implemented by:

1-2)  src/lib/compiler/front/typechecker/typecheck/typecheck-toplevel-statement.pkg
2-3)  src/lib/compiler/upper/translate/translate-deep-syntax-to-polylambda.pkg
3-4)  src/lib/compiler/upper/polylambda/translate-polylambda-to-anormal.pkg
4-5)  src/lib/compiler/upper/fps/translate-anormal-to-fps-g.pkg
5-6)  src/lib/compiler/codegen/main/translate-fate-passing-style-to-binary-g.pkg
6-7)  src/lib/compiler/lower/x86/codetree/translate-codetree-to-x86-g.pkg
7-8)  src/lib/compiler/lower/x86/translate-ppc-to-ppc-machine-code-g.pkg
      src/lib/compiler/lower/x86/translate-sparc-to-sparc-machine-code-g.pkg
      src/lib/compiler/lower/x86/translate-x86-to-x86-machine-code-g.pkg



Overview
========



This compiler is a derivative of SML/NJ, a research
compiler built collaboratively by Bell Labs, CMU, Yale,
Cornell and Princeton, among others.  (A good overview
of its internals is contained in [13].)

The compiler proper is the part of Mythryl responsible
for converting a single source file into native 
object code.

(See ROOT/src/app/make7 for the higher-level task of compiling
all the components of an application in the correct
order and producing an executable binary for the application
as a whole.)

The compiler is conceptually organized into two parts:

  front end:  Handles lexing, parsing and typechecking.
  back  end:  Handles optimization and code generation.

The back end in turn is subdivided into two parts:
  upper half:    Handles high-level (machine-independent) issues.
  lower half:    Handles low-level  (machine-dependent) issues.

The upper half code is in the upper/ directory.
The lower half code is in the lower/ directory.

All the other directories are front end stuff. :)

The actual top-level compilation code is in make7,

    src/app/make7/main/make7-g.pkg

This is where commandline switches to the compiler are
processed.  This file is however mostly concerned with
"make" level functionality (traversing the source-file
dependency graph and compiling individual files in
topologically correct ordering) rather than compilation
per se.

From a control flow point of view, the top of the core
interactive compile function-call hiearchy is the c::compile
call in

    src/lib/compiler/toplevel/interact/read-eval-print-loop-g.pkg

together with nearby code, while the core makefile-driven
compilation code is in

    src/app/make7/main/make7-g.pkg

which delegates most of the work to

    src/app/make7/compile/linking-treewalk-g.pkg

and (especially) the compile_in_this_process function in

    src/app/make7/compile/compile-treewalk-g.pkg

Either way, the actual heart of the compile-one-file logic
is in

    src/lib/compiler/toplevel/main/compile-g.pkg



Front End
=========

The Mythryl front end processes source code in two broad
phases:

   Parsing, which produces a raw syntax tree from a sourcefile.
   Typechecking, which produces a deep syntax tree from a raw syntax tree.


The core language syntax implementation is in the two files

    src/lib/compiler/front/parse/lex/mythryl.lex
    src/lib/compiler/front/parse/yacc/mythryl.grammar

The raw and deep syntax tree datastructures are defined in

    src/lib/compiler/front/parse/raw-syntax/raw-syntax.api
    src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.api



The symbol tables used by the compiler are hierarchical, complex,
and diffusely defined.  A good entrypoint into studying them is

    src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg

The top of the symbol table hierarchy is

    src/lib/compiler/toplevel/compiler-state/compiler-table-set.pkg 



NB:  Unlike many compilers, Mythryl treats parsing and compiling
a file as essentially unrelated activities:  During an initial
file-dependency-analysis make phase it reads and parses sourcefiles
to obtain type information.  The parse trees are then cached for
use later after a compilation order has been selected for all
files requiring re/compilation.  The core of this caching logic is

    src/app/make7/o7/bare-o7.pkg

which manages everything we know about a particular sourcefile
at any given point of time, including the parsetree (if known)
and the resulting object file (if it has been generated).


From a control-flow point of view, the top level of the parse
phase for an individual sourcefile may be taken to be the two
entrypoints defined in

    src/lib/compiler/front/parse/main/parse-mythryl.pkg

and the top level of the typechecking phase for one sourcefile
may be taken to be

    src/lib/compiler/front/typechecker/typecheck/typecheck-toplevel-statement.pkg






Back End Upper Half
===================

The back end upper half originated in the Yale FLINT project[12].

When the front end is done typechecking the code, it
is handed over successively to

    src/lib/compiler/upper/
    src/lib/compiler/lower/

where the first  does machine-independent stuff
and   the second does machine-dependent   stuff.

From a control-flow point of view, the core
back end upper half module is

    src/lib/compiler/upper/main/backend-g.pkg

which schedules the various optimization passes in
highly customizable form.

The front end gives us the code in the form of a
deep syntax tree, defined in

    src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.api

The upper half module translates the deep syntax tree
into three successive forms, each lower-level than
the previous:

    polylambda:  A polymorphic typed lambda calculus intermediate representation.
    A-Normal:    A typed form in which the function call hierarchary remains explicit.
    FPS:         "Fate passing style", an untyped blocks-linked-by-gotos representation.

The polylambda format is defined in

    src/lib/compiler/upper/polylambda/polylambda.api

It is an essentially language-neutral high-level representation,
so translation into it from deep syntax requires removing all
vestiges of Mythryl-specific source syntax.  This translation
is done by

    src/lib/compiler/upper/translate/translate-deep-syntax-to-polylambda.pkg

In particular, this translation requires expanding all pattern-matching
constructs into elementary function applications, a subtask handled by

    src/lib/compiler/upper/translate/compile-pattern.pkg

The polylambda representation is purely transitional;
One constructed, it is immediately converted into A-Normal form.

A-Normal format is well documented in the literature.[2]  It is a
high-level, typed, optimization-oriented format in which the call
hierarchy remains explicit.  These characteristics make some sorts
of optimizations easy (and others correspondingly hard).  Our version
is defined in

    src/lib/compiler/upper/anormal/anormal.api

(See the comments in that file for a list of the major transforms
performed on A-Normal Form code, and the files implementing them.)

The translation from polylambda to A-Normal form is handled by

    src/lib/compiler/upper/polylambda/translate-polylambda-to-anormal.pkg

While in A-Normal form, a number of optimizations are performed
(or can be, per configuration options handed to backend-g.pkg).
Stefan Monnier's 2003 PhD Thesis "Principled Compilation and Scavenging"
provides a good overview. [3]

When we've done what we reasonably can in A-Normal form, we convert
the code to FPS, "Fate-Passing Style".  This is an untyped
format in which code is represented essentially as a series of basic
blocks linked by GOTOs, albeit in abstract, machine-independent form.
In particular, the explicit function-call hierarchy is discarded, as
is the implicit stack, replaced by fates passed as explicit
arguments, hence the name.

Our definition of FPS is somewhat diffuse, and split into an
externally visible API on the one hand, whose definition
centers on

    src/lib/compiler/upper/highcode/highcode.api
    src/lib/compiler/upper/highcode/highcode.pkg

and a more complex internal package, whose definition
centers on

    src/lib/compiler/upper/highcode/highcode-guts.api
    src/lib/compiler/upper/highcode/highcode-guts.pkg

Translation from A-Normal to FPS form is handled by

    src/lib/compiler/upper/fps/translate-anormal-to-fps-g.pkg

Once in FPS form, a different set of optimizations become
easy, and are applied.   (The relative dis/advantages of
A-Normal and FPS form are discussed in Stefan Monnier's
above-mentioned PhD thesis.)

See [14] and the comments in

    src/lib/compiler/upper/highcode/highcode.api

for discussion of the various FPS optimization passes.



Back End Lower Half
===================


The back end lower half originated in the
NYU / Bell Labs MLRISC project [11].

A different lower half is generated for each supported
architecture, using generics to share common code.

For clarity and simplicity, the following will discuss
only the x86 back end;  The others are similar.


In a general sense, the root of the lower half is

    src/lib/compiler/codegen/x86/x86-codegen-g.pkg

This is a simple wrapper supplying platform-appropriate
arguments to  codegen_g, which is defined in

    src/lib/compiler/codegen/main/codegen-g.pkg

This contains the function 'compile' which is the
the toplevel driver for the backend, selecting
which optimization phases to run and in what
order per user options or else compiled-in defaults.

The lion's share of the detail work is delegated
to translate_fate_passing_style_to_binary_g, which is defined in

    src/lib/compiler/codegen/main/translate-fate-passing-style-to-binary-g.pkg

whose principal export is the function  translate_fate_passing_style_to_binary
which encapsulates the complete process of compiling
FPS intermediate code all the way down to native machine
code for the x86 architecture.  At runtime, this function
gets called from   translate_anormal_to_binary   in

    src/lib/compiler/upper/main/backend-g.pkg

this constituting the runtime transition from the
highcode "middle end" to the lowcode back-end. 


[ I have as yet only the haziest sense of the
  backend datastructures and control flow. The
  following needs a lot of work. -- Cynbe       ]

The original and still primary (?) code representation used
in the back end is a simple register transfer level
language defined in

    src/lib/compiler/lower/codetree/codetree.api

A (currently unused) high-level intermediate representation API is defined in

    src/lib/compiler/lower/intermediate-representation/lowcode-ir.api

A (also currently unused) control-flow graph representation is defined in:

    src/lib/compiler/lower/intermediate-representation/lowcode-cfg.api

Later an (again, currently unused) additional SSA ("Static Single Assignment")
representation was added, defined in

    src/lib/compiler/lower/static-single-assignment/ssa.api

SSA optimizations have their own driver, implemented in

    src/lib/compiler/lower/glue/lowcode-ssa-optimizer.pkg

which is currently nowhere invoked. Hmm.


History
=======

The Mythryl codebase contains a lot of historical
artifacts, so some familiarity with its history is
helpful in understanding the code.

Mythryl is a fork of the SML/NJ [4] codebase.  SML/NJ
was the first compiler for SML, and remains the de
facto reference compiler.

To understand its signficance, some of the history of
the SML language must be given as context:

The original ML language was defined in the late
1970s by Robin Milner as a metalanguage (hence "ML")
for the Edinburgh logical framework LF.

The SML/NJ compiler was written in cooperation between
Bell Labs and Princeton.  It began about 1985 as primarily
a two-person effort between David MacQueen and Andrew Appel,
with MacQueen serving as language expert and Appel as compiler
expert.  A long succession of PhD students also contributed,
and in fact continue to contribute.

Appel is a fan of Fate-Passing Style, and author
of a series of books on compiler implementation using it.
(Since he was chief architect of the compiler, these books
provide useful insight into the SML/NJ design and
implementation philosophy. [8])  Consquently, the initial
SML/NJ compiler consisted of a front end from which the
current front end is directly descended, and a FPS-based
backend with handcrafted code generator.

In 1990, Standard ML was defined by the publication of The
Definition of Standard ML by Robin Milner, Mads Tofte,
Robert Harper and David MacQueen.  In particular, this
incorporated MacQueen's module system design [6], a huge step
forward whose repercussions are still being felt.  This
slim volume was the first to formally define not only the
syntax for a practical programming language, but also its
semantics.

A 1991 snapshot of the five-year-old SML/NJ compiler is
provided by Appel and MacQueen's "Standard ML of New Jersey".[7]

Zhong Shao's 1994 Princeton PhD thesis [5] provides a good
snapshot of the SML/NJ compiler as of that year.

About 1992, Yale launched a FLINT ("Functional Language
INTermediate code representation"?) project [1] to improve
the optimization of functional languages.

The code developed by this initially separate project was
later merged into the SML/NJ compiler, providing the
polylambda and A-Normal form passes which now sit between
the front end and the original FPS optimizer.  Essentially,
the FLINT-derived code now forms the front half of the
Mythryl highcode module, while the original FPS optimizer
forms the back half.  The seperate heritage of these two
parts lives on in the form of a lack of integration,
coordination and nomenclature between them.

Stefan Monnier's 2003 thesis [3] describes both the tension
and the synergy between the FLINT-derived and FPS-based
parts of the highcode module.

Also about 1992, the MLRISC project [9] was launched
to implement an optimizing, portable, retargetable,
language-neutral back end.  A snapshot of this project
as of 1994 is provided in [10].

The Definition of Standard ML was updated and republished
in 1997.  The changes were mostly minor, and in fact on
the whole mostly served to simplify the language by removing
unproductive elements of the original definition.

About 2000, MLRISC replaced the original SML/NJ compiler
back-end about, although integration between the new
back-end and the rest of the compiler remains marginal.
(This part of the compiler is renamed "lowcode" in the Mythryl
codebase.)

Also about 2000, Bell Labs, now renamed Lucent, spun off
as a separate company, and tanking in the stock market,
stopped funding development of SML/NJ.  As a result, the
principal contributors were forced to seek new positions,
and development of the SML/NJ codebase slowed to a glacial
crawl for the 2000-2005 period, with in fact no new end-user
releases of the compiler whatever.



Resources
=========

[1] The FLINT project home page is:

        http://flint.cs.yale.edu/flint/

[2] A-Normal Form is described in:
    The Essence of Compiling with Fates
    Cormac Flanagan, Amr Sabry, Bruce F Duba, Matthias Felleisen (Rice CSci)
    1993, 11p
    http://www.soe.ucsc.edu/~cormac/papers/pldi93.ps


[3] Principled Compilation and Scavenging
    Stefan Monnier, 2003 [PhD Thesis, U Montreal]

        http://www.iro.umontreal.ca/~monnier/master.ps.gz 

    See also Stefan's publications page:

        http://www.iro.umontreal.ca/~monnier/


[4] The Standard ML of New Jersy home page is

        http://www.smlnj.org/

[5] Compiling Standard ML for Efficient Execution on Modern Machines
    1994 145p Zhong Shao (Princeton PhD thesis under Andrew Appel)

        http://flint.cs.yale.edu/flint/publications/zsh-thesis.ps.gz

[6] An Implementation of Standard ML Modules
    1988 12p David MacQueen

        http://www-2.cs.cmu.edu/~rwh/courses/modules/papers/macqueen88/paper.pdf

[7] Standard ML of New Jersey
    1991 13p Andrew W Appel, David B MacQueen

        http://www.cs.princeton.edu/~appel/papers/smlnj.ps

[8] Modern Compiler Implementation in ML:  Basic Techniques
    Andrew W Appel 1997 390p.

[9] MLRISC home page:

        http://cs.nyu.edu/leunga/www/MLRISC/Doc/html/INTRO.html

[10] A Portable and Optimizing Back End for the SML/NJ Compiler
     Lal George, Florent Guillame, John H Reppy, 1994  18p

        http://download.at.kde.org/languages/ml/papers/94-cc-george.ps

[11] MLRISC A Framework for retargetable and optimizing compiler back ends
     Lal George, Allen Leung
     2003 144p
     http://cs.nyu.edu/leunga/www/MLRISC/Doc/latex/mlrisc.ps

[12] An Overview of the FLINT/ML Compiler
     Zhong Shao (Yale)
     1997, 10p
     http://flint.cs.yale.edu/flint/publications/tic97.html

[13] Separate Compilation for ML
     Andrew W Appel (Princeton), David B MacQueen (Bell Labs)
     1994, 11p
     http://citeseer.ist.psu.edu/57261.html

[14] Fate-Passing, Closure-Passing Style
     Andrew W. Appel, Trevor Jim (Bell Labs)
     1988, 11p
     http://www.cs.princeton.edu/~appel/papers/cpcps.ps
         Still provides a good overview of the FPS passes in SML/NJ.



(Additional references are listed in doc/references.)