## split.pkg
## monnier@cs.yale.edu 

# Compiled by:
#     src/lib/compiler/core.make6



# This is one of the A-Normal Form optimization passes --
# for context see the comments in
#
#     src/lib/compiler/upper/anormal/anormal.api
#



#    "Split top-level functions corresponding to SML generics
#     into a small inlinable component and a large component
#     containing the rest.  The inlinable component is then
#     added to the compilation units that refer to the current
#     one, for cross-module inlining.  This phase does not
#     correspond to any optimization performed by the FPS
#     optimizer, but corresponds instead ot the 'lsplit'
#     phase that had been implemented in an earlier untyped
#     incarnation of Lambda[1]."
#
#          -- Principled Compilation and Scavenging
#             Stefan Monnier, 2003 [PhD Thesis, U Montreal]
#             http://www.iro.umontreal.ca/~monnier/master.ps.gz 
#
# [1]     Lambda-Splitting: A higher-order approach to cross-module optimizations.
#         Matthias Blume and Andrew W Appel
#         1997, 12p
#         http://citeseer.ist.psu.edu/288704.html
#
# See also Chapter 3 of Stefan's dissertation and
#
#     Typed Cross-Module Compilation
#     Zhong Shao (Yale)
#     1998, 31p
#     http://flint.cs.yale.edu/flint/publications/tcc-tr.ps.gz
#
#     Inlining as Staged Computation
#     Stefan Monnier and Zhong Shao (Yale)
#     1999, 29p
#     http://flint.cs.yale.edu/flint/publications/isc.ps.gz
#         (This is probably obsoleted by Stefan's 2003 dissertation, above.)




# Here we implement "lambda-splitting", a technique
# to allow cross-package inlining.


###      "Crash programs fail because they are based
###       on the theory that, with nine women pregnant,
###       you can get a baby in a month."
###
###                        -- Wernher von Braun



api Fsplit {

     Highcode = anormal::Program;
     split: (Highcode, Null_Or( Int )) -> (Highcode,  Null_Or( Highcode ));
};
    
package fsplit: Fsplit {				# Fsplit	is from   src/lib/compiler/upper/optimize/split.pkg

    stipulate

	package f    = anormal;				# anormal			is from   src/lib/compiler/upper/anormal/anormal.pkg
	package s    = int_red_black_set;		# int_red_black_set		is from   src/lib/src/int-red-black-set.pkg
	package m    = highcodeint_map;			# highcodeint_map		is from   src/lib/compiler/upper/anormal/anormal-stuff.pkg
	package o    = null_or;				# null_or			is from   src/lib/std/src/null-or.pkg
	package ou   = opt_utils;			# opt_utils			is from   src/lib/compiler/upper/optimize/optutils.pkg
	package fu   = anormal_stuff;			# anormal_stuff			is from   src/lib/compiler/upper/anormal/anormal-stuff.pkg
	package lt   = highcode;			# highcode			is from   src/lib/compiler/upper/highcode/highcode.pkg
	package po   = highcode_primitive_op;		# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg
	package pp   = prettyprint_anormal;		# prettyprint_anormal		is from   src/lib/compiler/upper/anormal/prettyprint-anormal.pkg
	package ctrl = highcode_control;		# highcode_control		is from   src/lib/compiler/upper/main/highcode-control.pkg

    herein

	say = control_print::say;
	fun bug msg = error_message::impossible ("FSplit: " + msg);
	fun buglexp (msg, le) = { say "\n"; pp::print_lexp le; say " "; bug msg;};
	fun bugval (msg, v) = { say "\n"; pp::print_sval v; say " "; bug msg;};
	fun assert p = if p  (); else bug ("assertion failed");fi;

	Highcode = f::Program;

	mklv = highcode_var::make_highcode_variable;
	cplv = highcode_var::copy_highcode_variable;

	fun s_rmv (x, s)
	    =
	    s::delete (s, x)
	    except
		not_found = s;

	fun addv (s, f::VAR lv) => s::add (s, lv);
	   addv (s, _) => s; end;
	fun addvs (s, vs) = fold_left (fn (v, s) => addv (s, v); end ) s vs;
	fun rmvs (s, lvs) = fold_left (fn (l, s) => s_rmv (l, s); end ) s lvs;

	exception UNKNOWN;

	fun split (fdec, NULL)
                =>
                (fdec, NULL);

	    split (fdec as (fk, f, args, body), THE aggressiveness)
                =>
                {
		    my { get_lty, add_lty, ... }
                        =
                        recover_type_info::recover_type_info (fdec, FALSE);

		    m = int_hash_table::make_table (64, UNKNOWN);

		    fun addpurefun f
			=
			int_hash_table::set m (f, FALSE);

		    fun funeffect f
			=
			(int_hash_table::get  m  f)
			except
			    uknown = TRUE;



		    # sexp: dictionary -> Lambda_Expression -> (leE, leI, fvI, leRet)
		    # - dictionary: IntSetF::set	current dictionary
		    # - lambda_expression: Lambda_Expression		expression to split
		    # - leRet: Lambda_Expression	the core return expression of lambda_expression
		    # - leE: Lambda_Expression -> Lambda_Expression	recursively split Lambda_Expression:  leE leRet == Lambda_Expression
		    # - leI: Lambda_Expression Null_Or	inlinable part of Lambda_Expression (if any)
		    # - fvI: IntSetF::set	free variables of leI:   fu::freevars leI == fvI
		    #
		    # sexp splits the Lambda_Expression into an expansive part and an inlinable part.
		    # The inlinable part is guaranteed to be side-effect free.
		    # The expansive part doesn't bother to eliminate unused copies of
		    #   elements copied to the inlinable part.
		    # If the inlinable part cannot be constructed, leI is set to f::RET[].
		    #   This implies that fvI == s::empty, which in turn prevents us from
		    #   mistakenly adding anything to leI.



		    fun sexp dictionary lambda_expression			#  fixindent 
			=
			{ 
			    # Non-side effecting binds are copied to leI if exported 
			    #
			    fun let1 (le, lewrap, lv, vs, effect)
				=
				{   my (le_e, le_i, fv_i, le_ret) = sexp (s::add (dictionary, lv)) le;

				    le_e = lewrap o le_e;

				    if (effect or not (s::member (fv_i, lv)))
					 (le_e, le_i, fv_i, le_ret);
				    else (le_e, lewrap le_i, addvs (s_rmv (lv, fv_i), vs), le_ret);
                                    fi;
				};

			 case lambda_expression

			     # We can completely move both RET and TYPE_APPLY to the I part 

			     f::RECORD (rk, vs, lv, le as f::RET [f::VAR lv'])
				 =>
				 if (lv' == lv)
				      (fn e = e, lambda_expression, addvs (s::empty, vs), lambda_expression);
				 else (fn e = e, le, s::singleton lv', le);
                                 fi;

			      f::RET vs
				  =>
				  (fn e = e, lambda_expression, addvs (s::empty, vs), lambda_expression);

			      f::TYPE_APPLY (f::VAR tf, tycs)
				  =>
				  (fn e = e, lambda_expression, s::singleton tf, lambda_expression);

			      # Recursive splittable lexps:
			      #
			      f::MUTUALLY_RECURSIVE_FNS     (fdecs, le) =>   sfix dictionary (fdecs, le);
			      f::TYPE_FN (tfdec, le) =>   stfn dictionary (tfdec, le);

			      #  Naming-lexps 
			      #
			      f::CONSTRUCTOR (dc, tycs, v, lv, le)
				  =>
				  let1 (le, fn e =  f::CONSTRUCTOR (dc, tycs, v, lv, e), lv, [v], FALSE);

			      f::RECORD (rk, vs, lv, le)
				  =>
				  let1 (le, fn e =  f::RECORD (rk, vs, lv, e), lv, vs, FALSE);

			      f::SELECT (v, i, lv, le)
				  =>
				  let1 (le, fn e =  f::SELECT (v, i, lv, e), lv, [v], FALSE);

			      f::PRIMOP (po, vs, lv, le)
				  =>
				  let1 (le, fn e =  f::PRIMOP (po, vs, lv, e), lv, vs, po::effect(#2 po));

			      #  XXX BUGGO IMPROVEME: lvs should not be restricted to [lv] 

			      f::LET (lvs as [lv], body as f::TYPE_APPLY (v, tycs), le)
				  =>
				  let1 (le, fn e =  f::LET (lvs, body, e), lv, [v], FALSE);

			      f::LET (lvs as [lv], body as f::APPLY (v as f::VAR f, vs), le)
				  =>
				  let1 (le, fn e =  f::LET (lvs, body, e), lv, v ! vs, funeffect f);

			      f::SWITCH (v, ac,[(dc as f::DATACON(_, _, lv), le)], NULL)
				  =>
				  let1 (le, fn e =  f::SWITCH (v, ac, [(dc, e)], NULL), lv, [v], FALSE);

			      f::LET (lvs, body, le)
				  =>
				  {   my (le_e, le_i, fv_i, le_ret)
					  =
					  sexp (s::union (s::add_list (s::empty, lvs), dictionary)) le;

				      (fn e =  f::LET (lvs, body, le_e e),  le_i,  fv_i,  le_ret);
				  };

			      #  useless sophistication 
			      f::APPLY (f::VAR f, args)
				  =>
				  if   (funeffect f)
				       (fn e = e, f::RET [], s::empty, lambda_expression);
				  else (fn e = e, lambda_expression, addvs (s::singleton f, args), lambda_expression);fi;

			      # Other non-naming lexps result in unsplittable functions 

			      (f::APPLY _ | f::TYPE_APPLY _)
				  =>
				  bug "strange (T)APPLY";

			      (f::SWITCH _ | f::RAISE _ | f::BRANCH _ | f::EXCEPT _)
				  =>
				  (fn e = e, f::RET [], s::empty, lambda_expression);

			    esac;
			}



		    # Functions definitions fall into the following categories:
		    # - inlinable:  if exported, copy to leI
		    # - (mutually) recursive:  don't bother
		    # - non-inlinable non-recursive:  split recursively

		    also
		    fun sfix dictionary (fdecs, le)
			=
			{   nenv = s::union (s::add_list (s::empty, map #2 fdecs), dictionary);
			    my (le_e, le_i, fv_i, le_ret) = sexp nenv le;
			    nle_e = fn e => f::MUTUALLY_RECURSIVE_FNS (fdecs, le_e e); end ;

			    case fdecs

				[( { inlining_hint=>inl as (f::INLINE_WHENEVER_POSSIBLE | f::INLINE_MAYBE _), ... }, f, args, body)]
				    =>
				    {   min =  case inl

						   f::INLINE_MAYBE (n, _) =>   n;
						   _                      =>   0;
					       esac;

					if (not (s::member (fv_i, f)) or min > aggressiveness)	#  *CTRL::split_threshold 
					     (nle_e, le_i, fv_i, le_ret);
					else (nle_e, f::MUTUALLY_RECURSIVE_FNS (fdecs, le_i),
					      rmvs (s::union (fv_i, fu::freevars body),
						   f ! (map #1 args)),
					      le_ret);
					fi;
				    };

				[fdec as (fk as { calling_convention=>f::CALLING_CONVENTION_GENERIC, ... }, _, _, _)]
				    =>
				    sfdec dictionary (le_e, le_i, fv_i, le_ret) fdec;

				_ => (nle_e, le_i, fv_i, le_ret);
			    esac;
			}

		    also
		    fun sfdec dictionary (le_e, le_i, fv_i, le_ret) (fk, f, args, body)
			=
			{   benv = s::union (s::add_list (s::empty, map #1 args), dictionary);
			    my (body_e, body_i, fvb_i, body_ret) = sexp benv body;

			    case body_i

				 f::RET []
				     =>
				     (fn e = f::MUTUALLY_RECURSIVE_FNS([(fk, f, args, body_e body_ret)], e),
				      le_i, fv_i, le_ret);

				 _ =>
				  {   fvb_is = s::vals_list (s::difference (fvb_i, benv));
				      my (nfk, fk_e) = ou::fk_wrap (fk, NULL);

				      #  fdecE 
				      f_e = cplv f;
				      f_erets = (map f::VAR fvb_is);
				      body_e = body_e (f::RET f_erets);
				      /* tmp = mklv()
				      bodyE = bodyE (f::RECORD (f::RK_STRUCT, map f::VAR fvbIs,
								 tmp, f::RET [f::VAR tmp])) */
				      fdec_e = (fk_e, f_e, args, body_e);
				      f_elty = lt::ltc_fct (map #2 args, map get_lty f_erets);
				      add_lty (f_e, f_elty);

				      #  fdecI 
				      fk_i = { inlining_hint      => f::INLINE_WHENEVER_POSSIBLE,
						  calling_convention => f::CALLING_CONVENTION_GENERIC,
						  all_call_sites_known => TRUE,
						  is_recursive       => NULL
						};

				      args_i
					  =
					  (map (fn lv => (lv, get_lty (f::VAR lv)); end ) fvb_is) @ args;

				      /* argI = mklv()
				      argsI = (argI, lt::ltc_str (map (getLty o f::VAR) fvbIs)) ! args

				      my (_, bodyI) = fold_left (fn (lv, (n, le)) =>
							     (n+1, f::SELECT (f::VAR argI, n, lv, le)))
							    (0, bodyI) fvbIs */
				      my fdec_i as (_, f_i, _, _) = fu::copyfdec (fk_i, f, args_i, body_i);
				      addpurefun f_i;

				      #  nfdec 
				      nargs = map (fn (v, t) => (cplv v, t); end ) args;
				      argsv = map (fn (v, t) => f::VAR v; end ) nargs;
				      nbody
                                          =
					  {   lvs = map cplv fvb_is;

					      f::LET (lvs, f::APPLY (f::VAR f_e, argsv),
						   f::APPLY (f::VAR f_i, (map f::VAR lvs)@argsv));
					  };
					  /* let lv = mklv()
					  in f::LET([lv], f::APPLY (f::VAR fE, argsv),
						   f::APPLY (f::VAR fI, (f::VAR lv) ! argsv))
					  end */

				      nfdec = (nfk, f, nargs, nbody);

				      # And now, for the whole f::MUTUALLY_RECURSIVE_FNS 
				      #	
				      fun nle_e e
                                          =
					  f::MUTUALLY_RECURSIVE_FNS
                                            (
                                              [fdec_e],
                                              f::MUTUALLY_RECURSIVE_FNS
                                                (
                                                  [fdec_i],
                                                  f::MUTUALLY_RECURSIVE_FNS
                                                    ( [nfdec], le_e e )
                                            )   );

				   if (not (s::member (fv_i, f)) )

				       (nle_e, le_i, fv_i, le_ret);

				   else
				       ( nle_e,
					 f::MUTUALLY_RECURSIVE_FNS([fdec_i], f::MUTUALLY_RECURSIVE_FNS([nfdec], le_i)),
					 s::add (s::union (s_rmv (f, fv_i), s::intersection (dictionary, fvb_i)), f_e),
					 le_ret
				       );
				   fi;
				  };
			    esac;
			}

		    # TYPE_FNs are kinda like MUTUALLY_RECURSIVE_FNS except there's no recursion 
		    #
		    also
		    fun stfn dictionary (tfdec as (tfk, tf, args, body), le)
			=
			{   my (body_e, body_i, fvb_i, body_ret)
				=
				if (tfk.inlining_hint == f::INLINE_WHENEVER_POSSIBLE)

				     (fn e = body,  body, fu::freevars body,  body);
				else
				     sexp dictionary body;
				fi;

			    nenv = s::add (dictionary, tf);

			    my (le_e, le_i, fv_i, le_ret)
				=
				sexp nenv le;

			    case (body_i, s::vals_list (s::difference (fvb_i, dictionary)))

				 (_,[])
				     =>
				     # Everything was split out:
				     #	 
				     {   ntfdec = ( { inlining_hint=>f::INLINE_WHENEVER_POSSIBLE }, tf, args, body_e body_ret);

					 nl_e = fn e = f::TYPE_FN (ntfdec, le_e e);

				         if (not (s::member (fv_i, tf)) )

                                              (nl_e, le_i, fv_i, le_ret);
					 else (nl_e, f::TYPE_FN (ntfdec, le_i),
					      s_rmv (tf, s::union (fv_i, fvb_i)), le_ret);
                                         fi;
				     };

				 ((f::RET _ | f::RECORD(_, _, _, f::RET _)), _)
				     =>
				     # Split failed:
				     #
				     ( fn e = f::TYPE_FN((tfk, tf, args, body_e body_ret), le_e e),
				       le_i,
                                       fv_i,
                                       le_ret
                                     );

				 (_, fvb_is)
				     =>
				     {   # tfdecE 
					 #
					 tf_e = cplv tf;
					 tf_evs = map f::VAR fvb_is;
					 body_e = body_e (f::RET tf_evs);
					 tf_elty = lt::lt_nvpoly (args, map get_lty tf_evs);
					 add_lty (tf_e, tf_elty);

					 # tfdecI 
					 #
					 tfk_i = { inlining_hint=>f::INLINE_WHENEVER_POSSIBLE };

					 args_i = map (fn (v, k) = (cplv v, k))
                                                      args;

					 module_map
                                             =
                                             paired_lists::map
                                                 (fn (a1, a2)
                                                     =
						     (#1 a1, lt::tcc_nvar(#1 a2))
                                                 )
						 (args, args_i);

					 body_i = fu::copy module_map m::empty
							     (f::LET (fvb_is, f::TYPE_APPLY (f::VAR tf_e, map #2 module_map),
								    body_i));
					 # f::TYPE_FN 
					 #
					 fun nle_e e
					     =
					     f::TYPE_FN((tfk, tf_e, args, body_e),
						   f::TYPE_FN((tfk_i, tf, args_i, body_i), le_e e));

					if (not (s::member (fv_i, tf)) )

                                             (nle_e, le_i, fv_i, le_ret);
					else (nle_e,
					      f::TYPE_FN((tfk_i, tf, args_i, body_i), le_i),
					      s::add (s::union (s_rmv (tf, fv_i), s::intersection (dictionary, fvb_i)), tf_e),
					      le_ret);
					fi;
				     };
			    esac;
			};


		    # We use B-decomposition here,
		    # so the args should not be
		    # considered as being in scope:
		    #
		    my (body_e, body_i, fvb_i, body_ret)
			=
			sexp s::empty body;

		     case (body_i, body_ret)

			  (f::RET _, _)
                              =>
                              ((fk, f, args, body_e body_ret), NULL);

			  (_, f::RECORD (rk, vs, lv, f::RET [lv']))
                              =>
			      {   fvb_is = s::vals_list fvb_i;

				  # fdecE 
				  #
				  body_e = body_e (f::RECORD (rk, vs@(map f::VAR fvb_is), lv, f::RET [lv']));

				  my fdec_e as (_, f_e, _, _)
                                      =
                                      (fk, cplv f, args, body_e);

				  # fdecI 
				  #
				  arg_i = mklv();
				  arg_ltys = (map get_lty vs) @ (map (get_lty o f::VAR) fvb_is);

				  args_i = [(arg_i, lt::ltc_str arg_ltys)];

				  my (_, body_i)
                                      =
                                      fold_left
                                          (fn (lv, (n, le))
                                              =
					      (n+1, f::SELECT (f::VAR arg_i, n, lv, le))
                                          )
					  (length vs, body_i)
                                          fvb_is;

				  my fdec_i as (_, f_i, _, _)
                                      =
                                      fu::copyfdec (fk, f, args_i, body_i);

				  nargs = map  (fn (v, t) =  (cplv v, t))
                                               args;

				  (fdec_e, THE fdec_i);
				  /* ((fk, f, nargs,
				    f::MUTUALLY_RECURSIVE_FNS([fdecE],
					  f::MUTUALLY_RECURSIVE_FNS([fdecI],
						f::LET([argI],
						      f::APPLY (f::VAR fE, map (f::VAR o #1) nargs),
						      f::APPLY (f::VAR fI, [f::VAR argI]))))),
				   NULL) */
			      };

			  _ => (fdec, NULL);		#  sorry, can't do that 
			 #  (prettyprint_anormal::printLexp bodyRet; bug "couldn't find the returned record") 
		     esac;

		};
        end;

    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## copyright 1999 YALE FLINT project 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
