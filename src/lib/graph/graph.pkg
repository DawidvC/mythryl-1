## graph.pkg
#
#  A generic directed graph data package.  
#  Implemented in an ``object oriented style''
#  All graphs are based on this interface.
# 
#  -- Allen Leung
#
# For a production instantiation of this framework see:
#
#     src/lib/compiler/lower/flowgraph/control-flow-graph-g.pkg

# Compiled by:
#     src/lib/graph/graphs.make6

package graph: (weak)  Graph		# Graph	is from   src/lib/graph/graph.api
{
    exception BAD_GRAPH  String;
    exception SUBGRAPH;
    exception NOT_FOUND;
    exception UNIMPLEMENTED;
    exception READ_ONLY;     
    exception NOT_SINGLE_ENTRY;
    exception NOT_SINGLE_EXIT;

    fun unimplemented _ = raise exception UNIMPLEMENTED;

    Node_Id = Int; 

    Node( N ) = (Node_Id, N);
    Edge( E ) = (Node_Id, Node_Id, E);

    Graph (N,E,G)
        =
        GRAPH  Graph_Methods (N,E,G)
	withtype
	       Graph_Methods (N,E,G)
		   =
		   {  name:             String,
		      graph_info:       G,

		      # Inserting/removing nodes and edges 
		      new_id:           Void -> Node_Id,
		      add_node:         Node( N ) -> Void,
		      add_edge:         Edge( E ) -> Void, 
		      remove_node:      Node_Id -> Void,
		      set_out_edges:    (Node_Id, List( Edge( E ) )) -> Void,
		      set_in_edges:     (Node_Id, List( Edge( E ) )) -> Void,
		      set_entries:      List( Node_Id ) -> Void,
		      set_exits:        List( Node_Id ) -> Void,

		      garbage_collect:  Void -> Void,

		      nodes:            Void -> List( Node( N ) ),
		      edges:            Void -> List( Edge( E ) ),
		      order:            Void -> Int,
		      size:             Void -> Int,
		      capacity:         Void -> Int,
		      next:             Node_Id -> List( Node_Id ),
		      prior:             Node_Id -> List( Node_Id ),
		      out_edges:        Node_Id -> List( Edge( E ) ),
		      in_edges:         Node_Id -> List( Edge( E ) ),
		      has_edge:         (Node_Id, Node_Id) -> Bool,
		      has_node:         Node_Id -> Bool,
		      node_info:        Node_Id -> N,
		      entries:          Void -> List( Node_Id ),
		      exits:            Void -> List( Node_Id ),
		      entry_edges:      Node_Id -> List( Edge( E ) ),
		      exit_edges:       Node_Id -> List( Edge( E ) ),

		      forall_nodes:     (Node( N ) -> Void) -> Void,
		      forall_edges:     (Edge( E ) -> Void) -> Void
		   };


    fun remove_all_edges (GRAPH graph) (i, j)
	=
	graph.set_out_edges (i, list::filter (fn (_, k, _) =  k == j) (graph.out_edges i));


    fun remove_all_edges' (GRAPH graph) (i, j, p)
	=
	graph.set_out_edges (i, list::filter (fn (_, k, e) =  k == j and p e) 
			    (graph.out_edges i));


    fun remove_edge (GRAPH graph) (i, j)
	=
	graph.set_out_edges (i, filter (graph.out_edges i))
        where
	    fun filter [] => [];

	        filter ((e as (_, k, _)) ! es)
		    => 
		    j == k   ??              es
                             ::   e ! filter es;
            end;
	end;


    fun remove_edge' (GRAPH graph) (i, j, p)
	=
	graph.set_out_edges (i, filter (graph.out_edges i))
        where
	    fun filter [] => [];

	        filter((e as (_, k, e')) ! es)
		    => 
		    if (j == k and p e')             es;
                    else                  e ! filter es;
                    fi;
            end;
	end;

};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
