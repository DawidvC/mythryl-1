
# Register set enum. Implemented as sorted lists.
#
# -- Allen Leung


###             "Being able to break security
###              doesn't make you a hacker any more
###              than being able to hotwire cars
###              makes you an automotive engineer."
###
###                         -- Eric Raymond



package RegSet :> REGISTER_SET =
pkg

   type reg = Int

   type regset = List( reg )

   empty = [] 

   fun sort [] = []
     | sort (l as [_]) = l
     | sort (l as [x, y]) = if int.<(x, y) then l else 
                           if x == y then [x] else [y, x]
     | sort l =
       let my (a, b) = split (l,[],[])
       in  mergeUniq (sort a, sort b)
       end

   and split ([], a, b)    = (a, b)
     | split (r . rs, a, b) = split (rs, r . b, a)

   and mergeUniq (l as u . us, l' as v . vs) =
         if u == v then mergeUniq (l, vs)
         else if int.<(u, v) then u . mergeUniq (us, l')
         else v . mergeUniq (l, vs)
     | mergeUniq (l,[]) = l
     | mergeUniq([], l) = l

   fun union []      = []
     | union (r . rs) = mergeUniq (r, union rs)

   fun difference ([], _) = []
     | difference (set,[]) = set
     | difference (set as r . rs, set' as r' . rs') =
        if r == r' then difference (rs, set')
        else if r < r' then r . difference (rs, set')
        else /* r > r' */ difference (set, rs')

   fun intersect (set,[]) = []
     | intersect ([], set) = []
     | intersect (set as r . rs, set' as r' . rs') =
         if r == r' then r . intersect (rs, rs')
         else if r < r' then intersect (rs, set')
         else intersect (set, rs')

   fun intersects []  = []
     | intersects [a] = a
     | intersects (a . b) = intersect (a, intersects b)
   
   fun ====([],[]) = TRUE
     | ====(r . rs, r' . rs') = (r:  Int) = r' and ====(rs, rs')
     | ====(_, _)   = FALSE

   fun is_empty [] = TRUE
     | is_empty _  = FALSE

   apply = list::apply

   fun contains ([], r)    = FALSE
     | contains (r' . rs, r) = r' = r or (r > r' and contains (rs, r))

   fun exists (set, [])    = FALSE
     | exists (set, r . rs) = contains (set, r) or exists (set, rs)

   fun insert ([], r) = [r]
     | insert (set as r' . rs, r) =
         if r == r' then set
         else if r' < r then r' . insert (rs, r)
         else r . set

   fun insertChanged (set, r) = 
   let fun ins [] = ([r], TRUE)
         | ins (set as r' . rs) =
             if r == r' then (set, FALSE)
             else if r > r' then
                let my (rs, changed) = ins rs
                in  if changed then (r' . rs, TRUE)
                               else (set, FALSE)
                end
             else (r . set, TRUE)
   in  ins set
   end

   fun remove ([], r) = []
     | remove (set as r' . rs, r) =
         if r' == r then rs
         else if r' < r then r' . remove (rs, r)
         else set
     
   fun removeChanged (set, r) =
   let fun rmv [] = ([], FALSE)
         | rmv (set as r' . rs) =
              if r == r' then (rs, TRUE)
              else if r > r' then
                   let my (rs, changed) = rmv rs
                   in  if changed then (r' . rs, TRUE)
                                  else (set, FALSE)
                   end
              else (set, FALSE)
   in
       rmv set
   end

   fun from_list l       = sort l
   fun fromSortedList l = l
   fun toList set       = set

   fun to_string set =
   let fun collect ([], l) = l
         | collect (r . rs, l) = int::to_string r . collect'(rs, l)
       and collect'(rs, l) = 
           let l = collect (rs, l)
           in  case l of [_] => l 
                       | l  => ", " . l
           end
   in  string::cat("{ " . collect (set,["}"]))
   end

   my op + = mergeUniq
   my op - = difference
   my op * = intersect

end



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
