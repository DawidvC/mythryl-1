## Author: Matthias Blume (blume@cs.princeton.edu)

# Compiled by:
#     src/app/make7/util/Make7_Utilities.make6

# Opening files for output while automagically creating any
# necessary directories.

package autodir
:
api {
    open_binary_output:            String -> binary_io::Output_Stream;
    open_text_output:              String -> file::Output_Stream;
    make_all_directories_on_path:  String -> Void;
}
{
    package p =  winix::path;		# winix	is from   src/lib/std/winix.pkg
    package f =  winix::file;

    fun file_exists n
        =
        f::access (n, [])
        except
            _ = FALSE;

    fun open_either  fileopener  p
        =
        {   fun make_directory d
                =
		f::make_directory d
                except
                    exn =  if   (not (file_exists d))
                                
                                raise exception exn;
                           fi;


	    fun generic' (maker, pmaker, p)
                =
		maker p
		except
                    exn
                    =
                    {   dir = p::dir p;

			# If the parent dir exists, then we must consider
			# these cases:
			#   - non-parallel: we should signal an error
			#   - parallel: somebody else may have made this dir
			#      in the meantime, so we should try again
			# Both cases can be handled by simply calling maker
			# again.  (It will fail in the non-parallel case, but
			# that's actually what we want.)

			if   (dir == ""  or  file_exists dir)
                            
                             maker p;
			else
                             pmaker dir;
                             maker p;
                        fi;
		    };


	    fun makedirs dir
                =
                generic' (make_directory, makedirs, dir);


	    fun advertisemakedirs dir
                =
		{   file::vsay ["\n                  src/app/make7/util/autodir.pkg:   Creating  directory     ", dir, "\n\n"];
		    makedirs dir;
                };
	
	    generic' (fileopener, advertisemakedirs, p);
	};


    # In the open-for-output case we first
    # get rid of the file if it
    # already existed...

    fun open  fileopener
        =
	open_either (fn n =  {   if   (file_exists n)
                                     
                                      f::remove_file n
                                      except
                                          _ = ();
                                 fi;

			         fileopener n;
                             }
                    );

    open_text_output   =  open    file::open_for_write;
    open_binary_output =  open  binary_io::open_for_write;

    # make_all_directories_on_path is supposed to make all directories
    # leading up to a given file.  The file itself is supposed to be
    # left alone if it already existed.  The trick here is to (ab)use
    # our open function with a "maker" parameter set to "binary_io::open_for_read".
    # This is pretty hack-ish, but it allows us to reuse the existing logic.
    #
    stipulate
	exception NONEXISTENT_FILE;

	fun binary_open_for_input f
            =
            binary_io::open_for_read f
            except _
                =
                raise exception NONEXISTENT_FILE;
    herein
        fun make_all_directories_on_path f
            =
            binary_io::close_input  (open_either  binary_open_for_input  f)
	    except
                NONEXISTENT_FILE
                =
                ();
    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 1999 by Lucent Technologies, Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
