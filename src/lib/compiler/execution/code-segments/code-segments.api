## code-segments.api

# Compiled by:
#     src/lib/compiler/execution/execute.make6



# An interface for manipulating code chunks.




###                   "Knowledge is our ultimate good."
###
###                         -- Socrates (circa 470-399BC)


api Code_Segments {

    Code_Segment;

    Code_Segments
        =
        { c0:   Code_Segment,
	  cn:   List( Code_Segment ), 
	  data: unt8_vector::Vector
        };

    Executable
        =
        unsafe::unsafe_chunk::Chunk -> unsafe::unsafe_chunk::Chunk;

    exception FORMAT_ERROR;
	#  raised by input when there are insufficient bytes 

    alloc:  Int -> Code_Segment;
	# Allocate an unintialized code chunk of the given number of bytes.


    read:  ((binary_io::Input_Stream, Int)) -> Code_Segment;
	# Allocate a code chunk of the given size and initialize it
	# from the input stream.

    write:  ((binary_io::Output_Stream, Code_Segment)) -> Void;
	#  Output a code chunk to the given output stream 

    bytes:  Code_Segment -> rw_unt8_vector::Rw_Vector;
	#  View the code chunk as an updatable rw_vector of bytes. 

    set_entrypoint:  (Code_Segment, Int) -> Void;
        #  Set the offset of the entrypoint of the code chunk (default: 0). 

    exec:  Code_Segment -> Executable;
	# View the code chunk as an executable.  This has the side-effect
	# of flushing the instruction cache.


    size:  Code_Segment -> Int;
	#  return the size of the code chunk 

    entrypoint:  Code_Segment -> Int;
        #  return the offset of the entry point of the code chunk 

    make_literals:  unt8_vector::Vector -> unsafe::unsafe_chunk::Chunk;
	# use the run-time system interpreter to generate a literals
	# vector from a literal bytecode program.


};



## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
