#  example-start statusbar statusbar.c 

local
   use C Gtk gtk_enums

   status_bar = REF NULL
   count = REF 1

   fun push_item data _ =
   let buff = "Item "$int::to_string *count
   in  count := *count + 1;
       gtk_statusbar_push::f(*status_bar, data, buff);
       ()
   end

   fun pop_item data _ = gtk_statusbar_pop::f(*status_bar, data)

in

   fun main (prog, argv) = 
   let gtk_init::f (prog . argv)

       #  Create a new window 
       window = gtk_window_new::f GTK_WINDOW_TOPLEVEL
       gtk_widget_set_usize::f (window, 200, 100)
       gtk_window_set_title::f (window, "GTK Statusbar Example")
       gtk_event_connect::f (window, "delete_event",
                                        (fn _ => (gtk_main_quit::f 0; FALSE)))
 
       vbox   = gtk_vbox_new::f (FALSE, 1)
       gtk_container_add::f (window, vbox)
       gtk_widget_show::f vbox
          
       status_bar := gtk_statusbar_new::f ()
       gtk_box_pack_start::f (vbox, *status_bar, TRUE, TRUE, 0w0)
       gtk_widget_show::f(*status_bar)

       context_id = gtk_statusbar_get_context_id::f(
                          *status_bar, "Statusbar example")

       button = gtk_button_new_with_label::f "push item"
       gtk_signal_connect::f (button, "clicked",
                                        push_item context_id)
       gtk_box_pack_start::f (vbox, button, TRUE, TRUE, 0w2)
       gtk_widget_show::f button

       button = gtk_button_new_with_label::f "pop last item"
       gtk_signal_connect::f (button, "clicked", pop_item context_id)
       gtk_box_pack_start::f (vbox, button, TRUE, TRUE, 0w2)
       gtk_widget_show::f button

       /* always display the window as the last step so it all splashes on
        * the screen at once. */
       gtk_widget_show::f window
   in  gtk_main::f ();
       0
   end
end
#  example-end 
