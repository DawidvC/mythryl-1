## control-mc.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



package controls: (weak)  Controls {		# Controls	is from   src/lib/compiler/toplevel/main/controls.api

    stipulate

	priority = [10, 10, 9];
	obscurity = 4;
	prefix = "controls";

	registry = control_index::make
			   { help => "miscellaneous control settings" };

	                                                         my _ = 
        basic_control::note_subindex (prefix, registry, priority);

	convert_boolean = control_utilities::convert::bool;

	nextpri = REF 0;

	fun make (name, help, d)
            =
            {   r = REF d;
		p = *nextpri;

		control = control::control {   name,
					       pri       => [p],
					       obscurity,
					       help,
					       control       => r
                                           };

		nextpri := p + 1;

		control_index::note_control
		    registry
		    {   control         =>  control::string_control  convert_boolean  control,
		        dictionary_name =>  THE (control_utilities::dictionary_name::to_upper "CONTROL_" name)
                    };
		r;
	    };
    herein

	package print: (weak)  Control_Print		# Control_Print	is from   src/lib/compiler/front/basics/print/printcontrol.pkg
	    =
	    control_print;				# control_print	is from   src/lib/compiler/front/basics/print/printcontrol.pkg

	package mc: (weak)  Matchcompiler_Controls	# Matchcompiler_Controls	is from   src/lib/compiler/toplevel/main/control-apis.api
	    =
	    control_mc;

	package lowcode
	    =
	    low_code_control;

	package highcode : Highcode_Controls		# Highcode_Controls	is from   src/lib/compiler/toplevel/main/control-apis.api
	    =
	    highcode_control;

	package cg: (weak)  Codegenerator_Controls	# Codegenerator_Controls	is from   src/lib/compiler/toplevel/main/control-apis.api
	    =
	    control_cg;

	include basic_control;				# Provides: print_warnings = REF TRUE  

	include mythryl_parser;				# Provides: primary_prompt = REF "- ";
			       				#           secondary_prompt = REF "= ";
			       				#           lazy_is_a_keyword = REF FALSE;
			       				#           quotation = REF FALSE;


	remember_highcode_variable_names = typecheck_data_control::remember_highcode_variable_names;

	value_restriction_local_warn   =   typechecking_control::value_restriction_local_warn;
	value_restriction_top_warn     =   typechecking_control::value_restriction_top_warn;

	mult_def_warn     =   typechecking_control::mult_def_warn;
	share_def_error   =   typechecking_control::share_def_error;
	macro_expand_sigs =   typechecking_control::macro_expand_sigs;

	debugging = make ("debugging", "?", FALSE);

	execute_compiled_code       =   make ("execute_compiled_code",    "?", TRUE);
	unparse_raw_syntax_tree     =   make ("unparse_raw_syntax_tree",  "?", FALSE);
	unparse_deep_syntax_tree    =   make ("unparse_deep_syntax_tree", "?", FALSE);

	prettyprint_raw_syntax_tree =   make ("prettyprint_raw_syntax_tree",  "?", FALSE);

	internals   =   typechecking_control::internals;
	interp      =   make ("interp", "?", FALSE);      #  Turn on interpreter -- defunct 
      /*
	debugLook = REF FALSE
	debugCollect = REF FALSE
	debugBind = REF FALSE
      */
	mark_deep_syntax_tree = typechecking_control::mark_deep_syntax_tree;

	track_exn
	    =
	    make ("track_exn",
		 "whether to generate code that tracks exceptions", TRUE);

	# Warning message when call of poly_equal compiled:
	#
	poly_eq_warn
            =
	    make ("poly_eq_warn", "whether to warn about calls of poly_equal", FALSE);

	indexing  = make ("indexing", "?", FALSE);
	inst_sigs = make ("inst_sigs", "?", TRUE);

	preserve_lvar_names = make ("preserve_lvar_names", "?", FALSE);

	#  These are really all the same REF cell: 
	my saveit:              Ref( Bool ) = remember_highcode_variable_names;
	my save_deep_syntax_tree:  Ref( Bool ) = saveit;
	my save_lambda:          Ref( Bool ) = saveit;
	my save_convert:         Ref( Bool ) = saveit;
	my save_cpsopt:          Ref( Bool ) = saveit;
	my save_closure:         Ref( Bool ) = saveit;

	package inline {

		Global_Setting
                    = OFF
		    | DEFAULT  Null_Or( Int );

		Localsetting
                    =
                    Null_Or( Null_Or( Int ) );

		my use_default:  Localsetting
                    =
                    NULL;

		fun suggest s:      Localsetting
		    =
		    THE s;

		fun parse "off" =>  THE OFF;
		    parse "on"  =>  THE (DEFAULT NULL);
		    parse s     =>  null_or::map (DEFAULT o THE) (int::from_string s);
                end;

		fun show OFF               =>  "off";
		    show (DEFAULT NULL)    =>  "on";
		    show (DEFAULT (THE i)) =>  int::to_string i;
                end;

		stipulate
		    registry
                        =
                        control_index::make
			    { help => "cross-module inlining" };

		    priority = [10, 10, 0, 1];
												my _ = 
                    basic_control::note_subindex ("inline", registry, priority);

		    convert = { type_name   =>  "controls::inline::Global_Setting",
			        from_string =>  parse, 
			        to_string   =>  show
			      };

		    state_r   =   REF (DEFAULT NULL);

		    control
                        =
                        control::control {
			  name      =>  "inlining_aggressiveness",
			  pri       =>  [0],
			  help      =>  "aggressiveness of function-inliner",
			  control   =>  state_r,
			  obscurity =>  1
		        };

		                                      my _ =
                    control_index::note_control
			registry
			{ control         =>   control::string_control  convert control,
			  dictionary_name =>   THE "INLINE_SPLIT_AGGRESSIVENESS"
			};
		herein
		    fun set x
			=
			control::set (control, x);

		    fun get ()
			=
			case (control::get  control)
			  
			     OFF       =>  NULL;
			     DEFAULT d =>  d;
                        esac;

		    fun get' NULL    =>  get ();
		        get' (THE a) =>  case (control::get control)
					   
					      OFF       =>  NULL;
					      DEFAULT _ =>  a;
                                         esac;
		    end;
		end;
	    };

	tdp_instrument
            =
            tdp_instrument::enabled;		# tdp_instrument	is from   src/lib/compiler/debugging-and-profiling/profile/tdp-instrument.pkg

    end; #  with
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
