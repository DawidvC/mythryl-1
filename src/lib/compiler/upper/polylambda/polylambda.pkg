## polylambda.pkg 

# Compiled by:
#     src/lib/compiler/core.make6


###               "The dynamic principle of fantasy is play,
###                which belongs also to the child, and as such
###                it appears to be inconsistent with the principle
###                of serious work.
###
###                But without this playing with fantasy
###                no creative work has ever yet come to birth.
###
###                                    -- Carl Jung


package polylambda
: (weak)
Polylambda					# Polylambda		is from   src/lib/compiler/upper/polylambda/polylambda.api
=
package {

    stipulate

        package a= var_home;			# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package lk= polylambda_type;		# polylambda_type		is from   src/lib/compiler/upper/polylambda/polylambda-type.pkg
	package lv= highcode_var;		# highcode_var			is from   src/lib/compiler/upper/highcode/highcode-var.pkg
	package po= highcode_primitive_op;	# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg
	package s= symbol;			# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg

    herein 

	 Highcode_Kind = lk::Highcode_Kind;
	 Highcode_Type_Constructor = lk::Highcode_Type_Constructor;
	 Highcode_Type = lk::Highcode_Type;

	 Highcode_Variable = lv::Highcode_Variable;



	# Constructor records the name of the constructor, the corresponding Constructor_Form, 
	# and the lambda type Highcode_Type; value carrying data constructors would have 
	# arrow type. 
	#
	Constructor
            =
            ( s::Symbol,
              a::Constructor_Form,
              Highcode_Type
            ); 



	# con: Used to specify all possible switching statements.
	#
	# Efficient switch generation can be applied to DATAcon and INTcon.
	#
	# Otherwise, it is just a shorthand for binary branch trees.
	#
	# In the future, we probably should make it more general,
	# including constants of any numerical type.    XXX BUGGO FIXME
	#
	Case_Constant 
	  = DATACON    (Constructor, List( Highcode_Type_Constructor ), Highcode_Variable)
	  | INTCON     Int
	  | INT32CON   int32::Int
	  | INTINFCON  integer::Int
	  | WORDCON    Unt
	  | WORD32CON  unt32::Unt
	  | REALCON    String
	  | STRINGCON  String
	  | VLENCON    Int; 



	# lambda_expression: The universal typed intermediate language.
	#
	# TYPE_FN, TYPE_APPLY are abstraction and application on type constructors.
	#
	# package abstractions and generic abstractions are
	# represented as normal package and generic definitions 
	# with its component properly PACKed.
	#
	# FN defines normal functions.
	# MUTUALLY_RECURSIVE_FNS defines a set of recursive functions.
	# LET (v, e1, e2) is syntactic sugar for exprs like APPLY (FN (v, _, e2), e1);
	#              the type of v will be that of e1. 
	# APPLY is function application.
	# STRECD and STRSEL are package record selection.
	# VECTOR and VCTSEL are vector record and vector selection.
	# EXCEPTION_TAG, RAISE, and EXCEPT are for exceptions.
	#
	Polylambda_Expression
	  = VAR     Highcode_Variable
	  | INT     Int
	  | INT32   int32::Int
	  | WORD    Unt
	  | WORD32  unt32::Unt
	  | REAL    String
	  | STRING  String 
	  | PRIMITIVE_OP  (po::Primitive_Operation, Highcode_Type, List( Highcode_Type_Constructor ))
	  | GENOP   (Dictionary, po::Primitive_Operation, Highcode_Type, List( Highcode_Type_Constructor ))

	  | FN   (Highcode_Variable, Highcode_Type, Polylambda_Expression)
	  | MUTUALLY_RECURSIVE_FNS  (List( Highcode_Variable ), List( Highcode_Type ), List( Polylambda_Expression ), Polylambda_Expression)
	  | APPLY  (Polylambda_Expression, Polylambda_Expression)
	  | LET  (Highcode_Variable, Polylambda_Expression, Polylambda_Expression)

	  | TYPE_FN   (List( Highcode_Kind ), Polylambda_Expression)
	  | TYPE_APPLY  (Polylambda_Expression, List( Highcode_Type_Constructor ))

	  | RAISE   (Polylambda_Expression, Highcode_Type) 
	  | EXCEPT  (Polylambda_Expression, Polylambda_Expression)
	  | EXCEPTION_TAG    (Polylambda_Expression, Highcode_Type)                 

	  | CONSTRUCTOR (Constructor, List( Highcode_Type_Constructor ), Polylambda_Expression)
	  | SWITCH      (Polylambda_Expression, a::Constructor_Signature, List ((Case_Constant, Polylambda_Expression)), Null_Or( Polylambda_Expression ))

	  | VECTOR            (List( Polylambda_Expression ), Highcode_Type_Constructor)
	  | RECORD            List( Polylambda_Expression )
	  | PACKAGE_RECORD  List( Polylambda_Expression )
	  | SELECT            (Int, Polylambda_Expression)

	  | PACK    (Highcode_Type, List( Highcode_Type_Constructor ), List( Highcode_Type_Constructor ), Polylambda_Expression)   
	  | BOX     (Highcode_Type_Constructor, Bool, Polylambda_Expression)
	  | UNBOX   (Highcode_Type_Constructor, Bool, Polylambda_Expression)

	withtype
	Dictionary = { default: Polylambda_Expression,
		 table:   List( (List( Highcode_Type_Constructor ), Polylambda_Expression))
	       };

    end;			# stipulate
};				# package polylambda 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1997 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
