## x86comp-instruction-ext.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/ia32.make6



# Emit code for extensions to the x86 instruction set.

api Xy86Comp_Instr_Ext {

    package instruction_set:  Instruction_Set_X86;			# Instruction_Set_X86		is from   src/lib/compiler/lower/x86/instruction/instruction-set-x86.api

    package codetree_stream
        :
        Codetree_Stream							# Codetree_Stream		is from   src/lib/compiler/lower/codetree/codetree-stream.api
	where codetree == instruction_set::codetree;

    package control_flow_graph
        :
        Control_Flow_Graph						# Control_Flow_Graph		is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where
            instruction_set == instruction_set
	also
            pseudo_op
            ==
            codetree_stream::instruction_stream::pseudo_op;

    Reducer
	= 
	codetree_stream::Reducer
          (
            instruction_set::Instruction,
            instruction_set::cells::Cellset,
            instruction_set::Operand,
            instruction_set::Addressing_Mode,
            control_flow_graph::Control_Flow_Graph
          );

									# x86instr_ext		is from   src/lib/compiler/lower/x86/instruction/x86instr-ext.pkg
    compile_sext
        :  
        Reducer 
	->
        { statement:  x86instr_ext::Sext (
                  instruction_set::codetree::Statement,
                  instruction_set::codetree::Int_Expression,
                  instruction_set::codetree::Float_Expression,
                  instruction_set::codetree::Bool_Expression
                ), 
	  notes:  List( instruction_set::codetree::Note )
        } 
	->
        Void;
};


# We are invoked from:
#
#     src/lib/compiler/codegen/x86/x86-codetree-ext-comp-g.pkg

generic package x86_compiler_instruction_extension_g (

    package instruction_set:  Instruction_Set_X86;			# Instruction_Set_X86		is from   src/lib/compiler/lower/x86/instruction/instruction-set-x86.api

    package codetree_stream
        :
        Codetree_Stream							# Codetree_Stream		is from   src/lib/compiler/lower/codetree/codetree-stream.api
	where codetree == instruction_set::codetree;

    package control_flow_graph
	:
	Control_Flow_Graph						# Control_Flow_Graph		is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where
            pseudo_op
            ==
            codetree_stream::instruction_stream::pseudo_op
	also
            instruction_set == instruction_set;
)

: (weak) Xy86Comp_Instr_Ext						# Xy86Comp_Instr_Ext		is from   src/lib/compiler/lower/x86/instruction/x86comp-instruction-ext.pkg

{
    package codetree_stream    = codetree_stream;
    package control_flow_graph = control_flow_graph;
    package instruction_set    = instruction_set;
    package cells              = instruction_set::cells;

    package ts = codetree_stream;
    package g  = control_flow_graph;
    package t  = ts::codetree;
    package i  = instruction_set;
    package c  = cells;
    package x  = x86instr_ext;						# x86instr_ext			is from   src/lib/compiler/lower/x86/instruction/x86instr-ext.pkg

    Statement
        =
        x::Sext( t::Statement, t::Int_Expression, t::Float_Expression, t::Bool_Expression ); 


    Reducer
       = 
       ts::Reducer
         (
           i::Instruction,
           c::Cellset,
           i::Operand,
           i::Addressing_Mode,
           g::Control_Flow_Graph
         );


    esp = c::esp;

    esp_operand = i::DIRECT (esp);


    fun error msg
	=
	lowcode_error_message::error("x86_compiler_instruction_extension_g", msg);


    stack_area = i::region::stack;


    fun compile_sext reducer { statement: Statement, notes: List( t::Note ) }
	=
	{   my ts::REDUCER { operand, emit, reduce_float_expression, instruction_stream, reduce_operand, ... }
		=
		reducer;

	    my ts::instruction_stream::STREAM { emit=>emit_i, ... }
		=
		instruction_stream;

	    fun fstp (size, fstp_instr, float_expression)
		= 
		case float_expression

		    t::FREG (size', f)
			=>
			if (size != size')

			     error "fstp: size";
			else
			     emit_i (i::BASE_INSTRUCTION (fstp_instr (i::FDIRECT f)));
			fi;

		    _ =>   error "fstp: float_expression";
		esac;


	    case statement

		x::PUSHL (int_expression) =>   emit (i::pushl (operand int_expression), notes);
		x::POP (int_expression)   =>   emit (i::pop (operand int_expression), notes);

		x::FSTPS (float_expression) =>   fstp (32, i::FSTPS, float_expression);
		x::FSTPL (float_expression) =>   fstp (64, i::FSTPL, float_expression);
		x::FSTPT (float_expression) =>   fstp (80, i::FSTPT, float_expression);

		x::LEAVE	      =>   emit (i::leave, notes);
		x::RET (int_expression)   =>   emit (i::ret (THE (operand int_expression)), notes);

		x::LOCK_CMPXCHGL (src, dst)
		    =>
		    #  src must in a register 
		    emit (
			i::cmpxchg
			{   lock => TRUE,
			    size   => i::INT32, 
			    src  => i::DIRECT (reduce_operand (operand src)), 
			    dst  => operand dst
			},
			notes
		    );
	    esac;
	};
};


## COPYRIGHT (c) 2000 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
