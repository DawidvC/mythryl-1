#
# A fixed capacity integer set enum
#
# -- Allen Leung



###            "Measuring programming progress by lines of code
###             is like measuring aircraft building progress by weight."
###
###                                        -- Bill Gates



api INTSET =
api

   type intset

   my intset:    Int -> intset
   my contains:  intset * Int -> Bool
   my add:       intset * Int -> Void
   my remove:    intset * Int -> Void
   my clear:     intset -> Void
   my size:      intset -> Int
   my capacity:  intset -> Int
   my is_empty:  intset -> Bool
   my apply:       (Int -> Void) -> intset -> Void
   my fold:      (Int * X -> X) -> X -> intset -> X
   my toList:    intset ->  List( Int )
   my to_string:  intset -> String
   my copy:      intset -> intset
   my +        : intset * intset -> intset
   my -        : intset * intset -> intset
   my *        : intset * intset -> intset
   my union:     intset * intset -> Void
   my diff:      intset * intset -> Void

end

package int_set :> INTSET =
pkg

   package a = Array
   enum intset = SET of { stack:  a::Rw_Vector( Int ),
                             pos:    a::Rw_Vector( Int ),
                             count:  Ref( Int )
                            }
   fun intset n = SET { stack=a::rw_vector (n, 0), pos=a::rw_vector (n, 0), count=REF 0 }
   fun contains (SET { stack, pos, count }, i) =
       let j = a::sub (pos, i)
       in  j < *count and a::sub (stack, j) = i end

   fun add (SET { stack, pos, count }, i) =
       let j = a::sub (pos, i)
           n = *count
       in  if j < n and a::sub (stack, j) == i then ()
           else (a::update (stack, n, i); a::update (pos, i, n); count := n + 1)
       end
   fun remove (SET { stack, pos, count }, i) =
       let j = a::sub (pos, i)
           n = *count
           k = a::sub (stack, j) 
       in  if j < n and i == k then 
             let k' = a::sub (stack, n - 1)
             in  a::update (stack, j, k');
                 a::update (pos, k', j);
                 count := n - 1
             end 
           else ()
       end

   fun clear (SET { count, ... } ) = count := 0
   fun size (SET { count, ... } ) = *count
   fun capacity (SET { stack, ... } ) = a::length stack
   fun is_empty (SET { count, ... } ) = *count = 0

   fun apply f (SET { count, stack, ... } ) =
       let fun g -1 = ()
             | g i  = (f (a::sub (stack, i)); g (i - 1))
       in  g(*count - 1) end

   fun fold f x (SET { count, stack, ... } ) =
       let fun g (-1, x) = x
             | g (i, x)  = g (i - 1, f (a::sub (stack, i), x))
       in  g(*count - 1, x) end
   fun toList set = fold op . [] set 
   fun to_string set = 
        string::cat(
            "{ " . fold (fn (i,[x]) => [int::to_string i, x]
                        | (i, s)   => int::to_string i ::(, ) . s) ["}"] set)

   fun copy (SET { stack, pos, count } ) = 
       let N      = a::length stack
           stack' = a::rw_vector (N, 0)
           pos'   = a::rw_vector (N, 0)
           n      = *count
           fun f (i, x) = (a::update (stack', i, x);a::update (pos', x, i))
       in  a::keyed_apply f (stack, 0, THE n);
           SET { stack=stack',
               pos  =pos',
               count=REF n
              }
       end

   fun union (s1, s2) = apply (fn x => add (s2, x)) s1
   fun diff (s1, s2)  = apply (fn x => remove (s2, x)) s1
   fun s1 + s2 = let s3 = copy s1
                 in  union (s2, s3); s3 end
   fun s1 - s2 = let s3 = copy s1
                 in  diff (s2, s3); s3 end
   fun s1 * s2 = let s3 = intset (capacity s1)
                 in  apply (fn x => if contains (s2, x) then add (s3, x) else ())
                         s1;
                     s3
                 end
       


end 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
