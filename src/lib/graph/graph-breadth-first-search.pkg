# graph-breadth-first-search.pkg
# Breadth first search.
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6



###               "Piloting on the Mississippi River was not work to me;
###                it was play -- delightful play, vigorous play,
###                adventurous play -- and I loved it ..."
###
###                                    -- Mark Twain in Eruption



package graph_breadth_first_search: (weak)  Graph_Breadth_First_Search		# Graph_Breadth_First_Search	is from   src/lib/graph/graph-breadth-first-search.api
{

    package g= graph;								# graph				is from   src/lib/graph/graph.pkg
    package s= bit_set;								# bit_set			is from   src/lib/compiler/lower/library/bitset.pkg
    package a= rw_vector;							# rw_vector			is from   src/lib/std/src/rw-vector.pkg


    # Breadth first search
    #
    fun bfs (g::GRAPH ggg) f g roots
	=
	{   visited = s::create (ggg.capacity ());

	    fun visit ([],[])     =>  ();
		visit([], r)     =>  visit (reverse r,[]);
		visit (n ! l, r) =>  { f n;   visit_succ (ggg.out_edges n, l, r); };
	    end 

	    also
	    fun visit_succ ([], l, r)
		    =>
		    visit (l, r);

		visit_succ((e as (i, j, _)) ! es, l, r)
		    =>
		    if  (s::mark_and_test (visited, j))
			 visit_succ (es, l, r);
		    else
			 g e;
			 visit_succ (es, l, j ! r);
		    fi;
	    end 

	    also
	    fun visit_roots ([], l, r)
		    =>
		    visit (l, r);

		visit_roots (n ! ns, l, r)
		    => 
		    if  (s::mark_and_test (visited, n))
                         visit_roots (ns, l, r);
		    else
                         f n;
                         visit_roots (ns, l, n ! r);
                    fi;
	    end;

	    visit_roots (roots,[],[]);
	};

    fun bfsdist (g::GRAPH ggg) roots
	=
	dist
	where
	    nnn = ggg.capacity ();

	    dist = a::make_rw_vector (nnn,-1);

	    fun visit ([],        []) =>   ();
		visit([],       rrr) =>   visit (reverse rrr,[]);
		visit (n ! lll, rrr) =>   visit_succ (ggg.out_edges n, lll, rrr);
	    end 

	    also
	    fun visit_succ ([], lll, rrr)
		    =>
		    visit (lll, rrr);

		visit_succ((e as (i, j, _)) ! es, lll, rrr)
		    =>
		    if  (a::get (dist, j) >= 0)
			 visit_succ (es, lll, rrr);
		    else
			 a::set (dist, j, a::get (dist, i)+1);
			 visit_succ (es, lll, j ! rrr);
		    fi;
	    end 

	    also
	    fun visit_roots ([], lll, rrr)
		    =>
		    visit (lll, rrr);

		visit_roots (n ! ns, lll, rrr)
		    => 
		    if  (a::get (dist, n) >= 0)
			 visit_roots (ns, lll, rrr);
		    else 
			 a::set (dist, n, 0);
			 visit_roots (ns, lll, n ! rrr);
		    fi;
	    end;

	    visit_roots (roots,[],[]);
	end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
