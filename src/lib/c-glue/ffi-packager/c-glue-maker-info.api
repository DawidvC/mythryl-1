
# C-Glue-Maker/C-GLUE-LIB dependent stuff


local use ml_grinder
in
api Lib7_Nlffi_Gen_Info =
api



   # Name handling

   my filenameToCname:  String -> String
   my structnameToCname:  String -> String
   my structnameToMLname:  String -> String
   my structnameToMLFunname:  String -> String
   my isAnonymousStruct:  String -> Bool


   # RTTI handling


   exception NoRTTI of Ast::ty

   enum interface = LIGHT | HEAVY

   # Given a type expression, construct an expression that
   # computes the runtime type or size information
   my typOf:   Ast::ty -> Ast::exp  #  c::type 
   my sizeOf:  Ast::ty -> Ast::exp  #  c::size 
   my getOf:   interface -> Ast::ty -> Ast::exp  #  get function 
   my setOf:   interface -> Ast::ty -> Ast::exp  #  set function 

   # Convert witness types to representation types:
   my repTy:  interface -> Ast::ty -> Ast::ty

   #  Given a struct/union name, create a type definition of its tag 
   my tagDecl:  { ty: Ast::id, name: Ast::id, su: String } -> Ast::decl

   #  Remove all generated enum stuff by c-glue-maker 
   my noBuiltinEnums:  Ast::decl -> Ast::decl 

   #  Code generation 
   package code:
   api
      my free:     interface -> Ast::id -> Ast::decl
      my discard:  interface -> Ast::id-> Ast::decl
      my dupML:    interface -> Ast::id * Ast::id -> Ast::decl
      my toML:     interface -> Ast::id * Ast::id -> Ast::decl
      my &       : interface -> Ast::id * Ast::id -> Ast::decl
      my new:      interface -> Ast::id * Ast::ty -> Ast::decl
      my alloc:    interface -> Ast::id * Int * Ast::ty -> Ast::decl
   end


   # Type utilities

   package t :
   api
      my id:      (Ast::id -> Bool) -> Ast::ty -> Bool
      my prim:    Ast::ty -> Bool
      my primObj: (Ast::ty -> Bool) -> (Ast::id -> Bool) -> Ast::ty -> Bool
      my ptr:     (Ast::ty -> Bool) -> Ast::ty -> Bool
      my ptr'   : (Ast::ty -> Bool) -> Ast::ty -> Bool
      my obj:     (Ast::ty -> Bool) * (Ast::ty -> Bool) -> Ast::ty -> Bool
      my obj'   : (Ast::ty -> Bool) * (Ast::ty -> Bool) -> Ast::ty -> Bool
      my arr:     (Ast::ty -> Bool) * (Ast::ty -> Bool) -> Ast::ty -> Bool
      my arr'   : (Ast::ty -> Bool) * (Ast::ty -> Bool) -> Ast::ty -> Bool
      my rw:      Ast::ty -> Bool
      my ro:      Ast::ty -> Bool
      my any:     X -> Bool

      my getPtr:   Ast::ty ->  Null_Or( Ast::ty * Ast::id )
      my getPtr' : Ast::ty ->  Null_Or( Ast::ty * Ast::id )
   end


   package raw :
   api
      my alloc:     Ast::id * Ast::ty * Int -> Ast::decl
      my set:       Ast::id * Ast::ty * Int * Ast::id -> Ast::decl
      my get:       Ast::id * Ast::id * Ast::ty * Int -> Ast::decl
      my c_string:  Ast::id * Ast::id -> Ast::decl
   end

end

end
