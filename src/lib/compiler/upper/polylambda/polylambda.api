## polylambda.api 

# Compiled by:
#     src/lib/compiler/core.make6


# As compilation proceeds, the program being compiled is tranformed
# into a sequence of representations.  In the front end, these representations
# are primarily syntactic.  In the "middle end", they are machine-independent
# intermediate languages.  In the back-end, they are machine-dependent.
#
# In this file we define the first of the representations used in the
# "middle end" (machine-independent optimizer).  This representation
# is essentially typed polymorphic lambda calculus.
#
# The Mythryl compiler back-end upper half is derived from the Yale
# FLINT Project, which has home page:
#
#         http://flint.cs.yale.edu/flint/
#
# In particular see Zhong Shao's PhD thesis:
#
#     Compiling Standard ML for Efficient Execution on Modern Machines
#     http://flint.cs.yale.edu/flint/publications/zsh-thesis.html
#
# More recentl useful background may be found in Stefan Monnier's
#         http://www.iro.umontreal.ca/~monnier/
# 2003 PhD Thesis "Principled Compilation and Scavenging"
#         http://www.iro.umontreal.ca/~monnier/master.ps.gz 
#
# Translation into this form from deep syntax is done in
#
#     src/lib/compiler/upper/translate/translate-deep-syntax-to-polylambda.pkg
#
#



###             "I went to my first computer conference at the New York Hilton
###              about 20 years ago. When somebody there predicted the market
###              for microprocessors would eventually be in the millions,
###              someone else said, "Where are they all going to go? It's not
###              like you need a computer in every doorknob!"
###
###             "Years later, I went back to the same hotel. I noticed the room
###              keys had been replaced by electronic cards you slide into slots
###              in the doors.
###
###             "There was a computer in every doorknob."
###
###                                                -- Danny Hillis



# NB: "polylambda" is a contraction of "polymorphically typed lambda calculus".
#



###            "Combinatory play seems to
###              be the essential feature
###               in productive thought."
###
###                     -- Albert Einstein


api Polylambda {

    # The following types are defined and documented
    # starting on page 52 of Zhong Shao's PhD thesis:
    #     http://flint.cs.yale.edu/flint/publications/zsh-thesis.html
    # (Obviously, the code has evolved a lot since then...)

    Highcode_Kind     		= polylambda_type::Highcode_Kind;		# polylambda_type		is from   src/lib/compiler/upper/polylambda/polylambda-type.pkg
    Highcode_Type_Constructor	= polylambda_type::Highcode_Type_Constructor;
    Highcode_Type		= polylambda_type::Highcode_Type;

    Highcode_Variable		= highcode_var::Highcode_Variable;		# highcode_var			is from   src/lib/compiler/upper/highcode/highcode-var.pkg

    Constructor
        =
        ( symbol::Symbol,							# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
          var_home::Constructor_Form,						# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
          Highcode_Type
        );

    Case_Constant 
	= DATACON  (Constructor, List( Highcode_Type_Constructor ), Highcode_Variable)
	| INTCON  Int
	| INT32CON  int32::Int
	| INTINFCON  integer::Int		#  only used with in matchcomp 
	| WORDCON  Unt
	| WORD32CON  unt32::Unt
	| REALCON  String
	| STRINGCON  String
	| VLENCON  Int; 


    Polylambda_Expression
	= VAR     Highcode_Variable
	| INT     Int
	| INT32   int32::Int
	| WORD    Unt
	| WORD32  unt32::Unt
	| REAL    String
	| STRING  String
	| PRIMITIVE_OP 
            (
              highcode_primitive_op::Primitive_Operation,			# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg
              Highcode_Type,				# op type
              List( Highcode_Type_Constructor )		# argument types...?
            )

	| GENOP
            ( Dictionary,
              highcode_primitive_op::Primitive_Operation,
              Highcode_Type,
              List( Highcode_Type_Constructor )
            )

	| FN ( Highcode_Variable,			# Argument
               Highcode_Type,				# Argument type
               Polylambda_Expression			# Function body.
             )

	| MUTUALLY_RECURSIVE_FNS
            (  List( Highcode_Variable ),		# The function names.
               List( Highcode_Type ),			# The function types.
               List( Polylambda_Expression ),		# The function definitions.
               Polylambda_Expression			# ?
            )

	| APPLY
            ( Polylambda_Expression,			# Function.
              Polylambda_Expression			# Argument.
            )

	| LET
            ( Highcode_Variable,			# Let this variable
              Polylambda_Expression,			# have this value
              Polylambda_Expression			# during evaluation of this expression.
            )

	| TYPE_FN    (List( Highcode_Kind ), Polylambda_Expression)
	| TYPE_APPLY   (Polylambda_Expression, List( Highcode_Type_Constructor ))

	| RAISE  (Polylambda_Expression, Highcode_Type) 
	| EXCEPT  (Polylambda_Expression, Polylambda_Expression)
	| EXCEPTION_TAG  (Polylambda_Expression, Highcode_Type)                 

	| CONSTRUCTOR  (Constructor, List( Highcode_Type_Constructor ), Polylambda_Expression)
	| SWITCH       (Polylambda_Expression, var_home::Constructor_Signature, List ((Case_Constant, Polylambda_Expression)), Null_Or( Polylambda_Expression ))

	| VECTOR  (List( Polylambda_Expression ), Highcode_Type_Constructor)
	| RECORD  List( Polylambda_Expression )
	| PACKAGE_RECORD  List( Polylambda_Expression )
	| SELECT  (Int, Polylambda_Expression)

	| PACK    (Highcode_Type, List( Highcode_Type_Constructor ), List( Highcode_Type_Constructor ), Polylambda_Expression)   

	| BOX					# Wrap given expression with given type into exactly one word.
            ( Highcode_Type_Constructor,	# Type
	      Bool,				# ?
              Polylambda_Expression		# Expression
            )

	| UNBOX					# Given wrapped expression of given type, unwrap into natural unboxed representation.
            ( Highcode_Type_Constructor,	# type
              Bool,
              Polylambda_Expression		# Expression
            )

    withtype
    Dictionary = { default: Polylambda_Expression,
             table:  List( (List( Highcode_Type_Constructor ), Polylambda_Expression))
           };

};



## COPYRIGHT (c) 1997 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
