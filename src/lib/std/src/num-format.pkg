## num-format.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

# The word to string conversion for the largest word and int types.
# All of the other fmt functions can be implemented in terms of them.

###                   "War does not determine who is right - only who is left."
###
###                                                 -- Bertrand Russell



stipulate
    package u32 = inline_t::unt32;	# inline_t	is from   src/lib/core/init/built-in.pkg
    package i   = inline_t::int31;
    package i32 = inline_t::int32;
herein
    package num_format: (weak)  api {

	 format_unt:  number_string::Radix -> unt32::Unt -> String;
	 format_int:  number_string::Radix -> int32::Int -> String;

      }
    {

	my (<)   = u32::(<);
	my (-)   = u32::(-);
	my (*)   = u32::(*);
	my (div) = u32::div;

	fun mk_digit (w:  unt32::Unt)
	    =
	    inline_t::char_vector::get ("0123456789ABCDEF", u32::to_int w);

	fun word_to_bin w
	    =
	    f (w, 0, [])
	    where
		fun make_bit w
		    =
		    u32::bitwise_and (w, 0u1) == 0u0
		      ?? '0'
		      :: '1';

		fun f (0u0, n, l) =>   (i::(+) (n, 1), '0' ! l);
		    f (0u1, n, l) =>   (i::(+) (n, 1), '1' ! l);
		    f (w,   n, l) =>   f (u32::rshiftl (w, 0u1), i::(+) (n, 1), (make_bit w) ! l);
		end;
	    end;

	fun word_to_oct w
	    =
	    f (w, 0, [])
	    where
		fun f (w, n, l)
		    =
		    if   (w < 0u8)

			 (i::(+) (n, 1), (mk_digit w) ! l);
		    else
			 f (u32::rshiftl (w, 0u3), i::(+) (n, 1), mk_digit (u32::bitwise_and (w, 0ux7)) ! l);
		    fi;
	    end;

	fun word_to_dec w
	    =
	    f (w, 0, [])
	    where
		fun f (w, n, l)
		    =
		    if   (w < 0u10)

			 (i::(+) (n, 1), (mk_digit w) ! l);
		    else
			 j = w div 0u10;

			 f (j,  i::(+) (n, 1), mk_digit (w - 0u10*j) ! l);
		    fi;
	    end;

	fun word_to_hex w
	    =
	    f (w, 0, [])
	    where
		fun f (w, n, l)
		    =
		    if   (w < 0u16)

			 (i::(+) (n, 1), (mk_digit w) ! l);
		    else
			 f (u32::rshiftl (w, 0u4), i::(+) (n, 1), mk_digit (u32::bitwise_and (w, 0uxf)) ! l);
		    fi;
	    end;

	fun format_w number_string::BINARY  => word_to_bin;
	    format_w number_string::OCTAL   => word_to_oct;
	    format_w number_string::DECIMAL => word_to_dec;
	    format_w number_string::HEX     => word_to_hex;
	end;

	fun format_unt radix
	    =
	    prestring::implode o (format_w radix);

	i2w =  u32::from_large_int o i32::to_large;

	fun format_int radix i
	    = 
	    if (i2w i == 0ux80000000)
		#
		"-2147483648";
	    else
		w32 =  i2w (if (i32::(<) (i, 0) ) i32::neg(i); else i;fi);

		my (n, digits)
		    =
                    format_w radix w32;

		if (i32::(<) (i, 0))
		     #
		     prestring::implode (i::(+) (n, 1), '-' ! digits);
		else prestring::implode (n, digits);
		fi;
	    fi;
    };

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
