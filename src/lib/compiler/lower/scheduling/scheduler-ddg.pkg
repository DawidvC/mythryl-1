#
# This module describes a DDG for acyclic global scheduling 
# (for non-predicated architectures.) 
# Hyperblock scheduling uses another data package.
#
# -- Allen Leung

###             "Anyone who cannot cope with mathematics is not fully human.
###              At best he is a tolerable subhuman who has learned to wear
###              shoes, bathe and not make messes in the house."
###
###                      -- Lazarus Long, "Time Enough for Love",
###
###                      (by Robert A. Heinlein, 1907-1988,
###                          US science-fiction writer   )


generic package SchedulerDDG (SchedProps:  SCHEDULING_PROPERTIES) : SCHEDULER_DDG =
pkg

   package SchedProps = SchedProps
   package i          = SchedProps::I
   package c          = i::C
   package a          = rw_vector
   package gi         = directed_graph (A)
   package g          = graph

   enum dependence = 
        FLOW | OUTPUT | ANTI             #  register based dependence 
      | MEM_FLOW | MEM_OUTPUT | MEM_ANTI #  memory based dependence 
      | CTRL | CTRL_ANTI                 #  Control dependence 
      | LIVEIN | LIVEOUT

   type latency = SchedProps::latency

   enum edge = EDGE of { l:  latency,   #  latency 
                            r:  c::cell,    #  register 
                            d:  dependence #  Dependence type 
                           }

   enum node = NODE of { instruction: i::instruction, b: Int,
                            defs:  List( c::cell * latency ), uses: List( c::cell ) }

   type liveInMap  = int_hash_table::Hash_Table( graph::node( node ) )
   type liveOutMap = int_hash_table::Hash_Table( graph::node( node ) )
   type block      = Int
   type blockMap   = rw_vector::Rw_Vector( block ) #  mapping from block id -> block 
   type liveInMap  = int_hash_table::Hash_Table( graph::node( node ) )
   type liveOutMap = int_hash_table::Hash_Table( graph::node( node ) )

   type internalInfo (A_node, A_edge) =
        { next:   rw_vector::Rw_Vector( List( graph::edge( A_edge ) ) ),
         prior:   rw_vector::Rw_Vector( List( graph::edge( A_edge ) ) ),
         nodes:  rw_vector::Rw_Vector(  Null_Or(  A_node ) )
        }

   type globalInfo =
        { liveInMap:   liveInMap,
         liveOutMap:  liveOutMap,
         blockMap:    blockMap
        }

   enum info (A_node, A_edge) = 
        INFO of { internalInfo: internalInfo( A_node, A_edge ),
                 globalInfo:   REF(  Null_Or(  globalInfo ) ) 
                }

   withtype ddg (A_node, A_edge)  = (A_node, A_edge, (A_node, A_edge) info) graph::graph

   fun newDDG (n) =
   let next = a::rw_vector (n,[])
       prior = a::rw_vector (n,[])
       nodes= a::rw_vector (n, NULL)
       info = INFO { internalInfo= { next=succ, prior=pred, nodes=nodes },
                       globalInfo=REF NULL }
       ddg  = gi::newGraph { name="DDG", info=info,
                              prior=pred, next=succ, nodes=nodes }
   in   ddg
   end

   fun internalInfo (g::GRAPH ddg) =
   let my INFO { internalInfo, ... } = ddg.graph_info
   in  internalInfo end

   fun globalInfo (g::GRAPH ddg) = 
   let my INFO { globalInfo, ... } = ddg.graph_info
   in  globalInfo end

   fun latToString i
       =
       if i < 0   then "-"$int::to_string(-i)
                  else     int::to_string i

   #  Slow but pretty way of pretty printing registers 
   fun showReg (prefix, r) = prefix$c::to_string r
 
   fun edgeToString (EDGE { l, d, r } ) =
   let my (dep, prefix) = 
           case d of
             FLOW       => ("", "r")
           | OUTPUT     => ("out", "r")
           | ANTI       => ("anti", "r")
           | MEM_FLOW   => ("", "m")
           | MEM_OUTPUT => ("out", "m")
           | MEM_ANTI   => ("anti", "m")
           | CTRL       => ("ctrl", "c")
           | CTRL_ANTI  => ("anti", "c")
           | LIVEIN     => ("livein", "r")
           | LIVEOUT    => ("liveout", "r")
       lat = if l == 0 then "" else " "$latToString l

       reg = "("$showReg (prefix, r)$")" 
   in  dep + lat + reg end

   fun cellsToString S =
   let fun pr r = showReg("r", r)
   in  LineBreak::lineBreak 50
         (list::fold_right (fn (r, l) => if l == "" then pr r else pr r + " " + l) "" S) 
   end

   LIVENESS = note::new
                    (THE (fn { liveIn, liveOut } =>
                       "liveIn: " + cellsToString liveIn + "\n"  + 
                       "liveOut: " + cellsToString liveOut + "\n"
                    ))

end
