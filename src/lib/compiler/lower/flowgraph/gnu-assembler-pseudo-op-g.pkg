## gnu-assembler-pseudo-ops-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# Implements the string related functions to emit pseudo-ops
# in the standard GAS syntax.



api Gnu_Assembler_Pseudo_Ops {

    package codetree:    Codetree;				# Codetree			is from   src/lib/compiler/lower/codetree/codetree.api
    lexp_to_string:      codetree::Labexp -> String;
    to_string:           pseudo_op_basis_type::Pseudo_Op( codetree::Labexp, X ) -> String;
    define_local_label:  label::Label -> String;
};

# We get invoked from:
#
#     src/lib/compiler/lower/ppc/flowgraph/ppc-gas-pseudo-ops.pkg
#     src/lib/compiler/lower/sun/flowgraph/sparc-gas-pseudo-ops.pkg
#     src/lib/compiler/lower/x86/flowgraph/x86-gas-pseudo-op-g.pkg

generic package gnu_assembler_pseudo_op_g (
    package codetree:  Codetree;				# Codetree			is from   src/lib/compiler/lower/codetree/codetree.api
    lab_fmt:  { g_prefix: String, a_prefix: String };
)

: (weak) Gnu_Assembler_Pseudo_Ops				# Gnu_Assembler_Pseudo_Ops	is from   src/lib/compiler/lower/flowgraph/gnu-assembler-pseudo-op-g.pkg

{
    package codetree = codetree;
    package t        = codetree;

    package pb  = pseudo_op_basis_type;				# pseudo_op_basis_type		is from   src/lib/compiler/lower/flowgraph/pseudo-op-basis-type.pkg
    package ptf = sfprintf;					# sfprintf			is from   src/lib/src/sfprintf.pkg

    fun error msg
        =
        lowcode_error_message::error ("gnu_assembler_pseudo_ops.", msg);

    fun print_integer i
	=
	if (integer::sign i < 0)  "-" + integer::to_string (integer::neg i); 
	else                            integer::to_string i;
        fi;

    fun print_int i
        =
        if (i < 0)   "-" + int::to_string(-i);
        else               int::to_string( i);
        fi;

    # Operator precedences.
    #   Note that these differ from C's precedences:
    #	  2 MULT, DIV, LSHIFT, RSHIFT
    #	  1 AND, OR
    #	  0 PLUS, MINUS


    fun parens (string, prec, op_prec)
        = 
	if (prec > op_prec)  "(" + string + ")";
        else                       string;
        fi;

    fun lexp_to_string le
        =
        to_string (le, 0)

    also
    fun to_string (t::LABEL lab, _) => label::format_for_asm lab_fmt lab; 
	to_string (t::LABEXP le, p) => to_string (le, p);
	to_string (t::NEG(_, t::CONST c), _) =>
	   (print_int(-(t::constant::value_of c)) except _ = "-" + t::constant::to_string c);
	to_string (t::NEG(_, t::LITERAL i), _) => print_integer(-i);
	to_string (t::NEG(_, lambda_expression), prec) => parens (to_string (lambda_expression, 3), prec, 3);
	to_string (t::CONST c, _) => 
	   (print_int (t::constant::value_of c) except _ = t::constant::to_string c);
	to_string (t::LITERAL i, _) => print_integer i;
	to_string (t::MULS(_, lambda_expression1, lambda_expression2), prec) =>
	   parens (to_string (lambda_expression1, 2) + "*" + to_string (lambda_expression2, 2), prec, 2);
	to_string (t::DIVS (t::DIV_TO_ZERO, _, lambda_expression1, lambda_expression2), prec) =>
	   parens (to_string (lambda_expression1, 2) + "/" + to_string (lambda_expression2, 2), prec, 2);
	to_string (t::LEFTSHIFT(_, lambda_expression, count), prec) =>
	   parens (to_string (lambda_expression, 2) + "<<" + to_string (count, 2), prec, 2);
	to_string (t::RIGHTSHIFTU(_, lambda_expression, count), prec) =>
	   parens (to_string (lambda_expression, 2) + ">>" + to_string (count, 2), prec, 2);
	to_string (t::BITWISEAND(_, lambda_expression, mask), prec) => 
	   parens (to_string (lambda_expression, 1) + "&" + to_string (mask, 1), prec, 1);
	to_string (t::BITWISEOR(_, lambda_expression, mask), prec) => 
	   parens (to_string (lambda_expression, 1) + "|" + to_string (mask, 1), prec, 1);
	to_string (t::ADD(_, lambda_expression1, lambda_expression2), prec) => 
	   parens (to_string (lambda_expression1, 0) + "+" + to_string (lambda_expression2, 0), prec, 0);
	to_string (t::SUB(_, lambda_expression1, lambda_expression2), prec) => 
	   parens (to_string (lambda_expression1, 0) + "-" + to_string (lambda_expression2, 0), prec, 0);
	to_string _ => error "to_string";
    end;

    fun define_local_label lab
	=
        lexp_to_string (t::LABEL lab) + ":";

    fun decls (fmt, labs)
	=
	string::cat 
	  (map (fn lab = (ptf::sprintf' fmt [ptf::STRING (lexp_to_string (t::LABEL lab))]))
               labs
          );

    fun to_string (pb::ALIGN_SIZE n)   => ptf::sprintf' "\t.align\t%d" [ptf::INT n];
	to_string (pb::ALIGN_ENTRY)    => "\t.align\t4";	#  16 byte boundary 
	to_string (pb::ALIGN_LABEL)    => "\t.p2align\t4, ,7";

	to_string (pb::DATA_LABEL lab) => label::format_for_asm lab_fmt lab + ":";
	to_string (pb::DATA_READ_ONLY) => "\t.section\t.rodata";
	to_string (pb::DATA)	       => "\t.data";
	to_string (pb::BSS)	       => "\t.section\t.bss";
	to_string (pb::TEXT)	       => "\t.text";
	to_string (pb::SECTION at)     => "\t.section\t" + quickstring::to_string at;

	to_string (pb::REORDER)        => "";
	to_string (pb::NOREORDER)      => "";

	to_string (pb::INT { size, i } )
	    =>
	    {
	        fun join [] => [];
		    join [lambda_expression]     =>  [lexp_to_string lambda_expression];
		    join (lambda_expression ! r) =>  lexp_to_string lambda_expression ! ", " ! join r;
                end;

	       pop = case size
		           8 =>  "\t.byte\t";
			  16 =>  "\t.short\t";
			  32 =>  "\t.int\t";
			  64 =>  error "INT64";
			   n =>  error ("unexpected INT size: " + int::to_string n);
                     esac;


		 string::cat (pop ! join i);
	    };

	to_string (pb::ASCII s)
            =>
	    ptf::sprintf' "\t.ascii\t\"%s\"" [ptf::STRING (string::to_cstring s)];

	to_string (pb::ASCIIZ s)
            => 
	    ptf::sprintf' "\t.asciz \"%s\"" [ptf::STRING (string::to_cstring s)];

	to_string (pb::SPACE size)
	    =>
            ptf::sprintf' "\t.space\t%d" [ptf::INT size];

	to_string (pb::FLOAT { size, f } )
            =>
            {
		fun join []      =>  [];
		    join [f]     =>  [f];
		    join (f ! r) =>  f ! ", " ! join r;
                end;

		pop = case size
		        
		         32  => "\t.single ";
			 64  => "\t.double ";
			 128 => "\t.extended ";
			 n   => error ("unexpected FLOAT size: " + int::to_string n);
                      esac;


		string::cat (pop ! join f);
	   };

	to_string (pb::IMPORT labs) =>  decls("\t.extern\t%s", labs);
	to_string (pb::EXPORT labs) =>  decls("\t.global\t%s", labs);
	to_string (pb::COMMENT txt) =>  ptf::sprintf' "/* %s */" [ptf::STRING txt];


	to_string (pb::EXT _) => error "EXT";
    end;

};


## COPYRIGHT (c) 2001 Lucent Technologies, Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
