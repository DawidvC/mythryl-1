api Graph_TOKENS =
api
type Token( X, Y )
type Semantic_Value
my EOF:  X * X -> token( Semantic_Value,X )
my AT:  X * X -> token( Semantic_Value,X )
my DOT:  X * X -> token( Semantic_Value,X )
my EQUAL:  X * X -> token( Semantic_Value,X )
my RPAREN:  X * X -> token( Semantic_Value,X )
my RBRACKET:  X * X -> token( Semantic_Value,X )
my RBRACE:  X * X -> token( Semantic_Value,X )
my LPAREN:  X * X -> token( Semantic_Value,X )
my LBRACKET:  X * X -> token( Semantic_Value,X )
my LBRACE:  X * X -> token( Semantic_Value,X )
my COMMA:  X * X -> token( Semantic_Value,X )
my SEMICOLON:  X * X -> token( Semantic_Value,X )
my COLON:  X * X -> token( Semantic_Value,X )
my SYMBOL: (String) *  X * X -> token( Semantic_Value,X )
my EDGEOP:  X * X -> token( Semantic_Value,X )
my EDGE:  X * X -> token( Semantic_Value,X )
my NODE:  X * X -> token( Semantic_Value,X )
my STRICT:  X * X -> token( Semantic_Value,X )
my SUBGRAPH:  X * X -> token( Semantic_Value,X )
my DIGRAPH:  X * X -> token( Semantic_Value,X )
my GRAPH:  X * X -> token( Semantic_Value,X )
end
api Graph_LRVALS=
api
package tokens:  Graph_Tokens
package parser_data: Parser_Data
sharing parser_data::token::Token = tokens::Token
sharing parser_data::Semantic_Value = tokens::Semantic_Value
end
