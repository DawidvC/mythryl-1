## border.pkg
#
# Border widget -- draws a border around its child.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6






###             "If users wanted a graphical interface,
###              wouldn't the Macintosh dominate the market?"
###
###                                  -- Bruce Tonkin, 1988



stipulate
    include threadkit;			# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package d3 =  three_d;		# three_d		is from   src/lib/x-kit/widget/lib/three-d.pkg
    package mr =  xevent_mail_router;	# xevent_mail_router	is from   src/lib/x-kit/widget/basic/xevent-mail-router.pkg
    package wg =  widget;		# widget		is from   src/lib/x-kit/widget/basic/widget.pkg
    package wa =  widget_attribute;	# widget_attribute	is from   src/lib/x-kit/widget/lib/widget-attribute.pkg
    package wy =  widget_style;		# widget_style		is from   src/lib/x-kit/widget/lib/widget-style.pkg
    #
    package xc =  xcore;		# xcore			is from   src/lib/x-kit/xclient/xcore.pkg
    package xd =  xdraw;		# xdraw			is from   src/lib/x-kit/xclient/xdraw.pkg
    package xg =  xgeometry;		# xgeometry		is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xi =  xinput;		# xinput		is from   src/lib/x-kit/xclient/xinput.pkg
    package xw =  xwindow;		# xwindow		is from   src/lib/x-kit/xclient/xwindow.pkg
herein

    package border: (weak)  Border {	# Border		is from   src/lib/x-kit/widget/composite/border.api

	attributes
	    =
	    [ (wa::padx,           wa::INT,      wa::INT_VAL 0),
	      (wa::pady,           wa::INT,      wa::INT_VAL 0),
	      (wa::border_width,   wa::INT,      wa::INT_VAL 2),
	      (wa::relief,         wa::RELIEF,   wa::RELIEF_VAL (wg::SUNKEN)),
	      (wa::background,     wa::COLOR,    wa::NO_VAL)
	    ];

	Result = { padx:  Int,
		   pady:  Int,
		   border_width:  Int,
		   relief:  wg::Relief,
		   background:  Null_Or( xc::Rgb )
		 };

	Border
	    =
	    BORDER
	      { widget:     wg::Widget,
		plea_slot:  Mailslot(  Null_Or(  xc::Rgb ))
	      };

	fun make_resources (view, args)
	    =
	    {   attributes = wg::find_attribute (wg::attributes (view, attributes, args));

		{ padx         => wa::get_int       (attributes wa::padx),
		  pady         => wa::get_int       (attributes wa::pady),
		  border_width => wa::get_int       (attributes wa::border_width),
		  relief       => wa::get_relief    (attributes wa::relief),
		  background   => wa::get_color_opt (attributes wa::background)
		};
	    };

	fun border (root_window, view, args) child
	    =
	    {   result   = make_resources (view, args);

		plea_slot =  make_mailslot ();
		plea'     =  take' plea_slot;

		realize_1shot
		    =
		    make_oneshot_maildrop ();


		fun fillfn wg::FLAT (d, r, c)
			=>
			{   p = xd::make_pen [xd::FOREGROUND (xc::rgb8_from_rgb c)];

			    fn () =  xd::fill_box d p r;
			};

		    fillfn rel (d, r, c)
			=>
			{   my shades as { base, ... }
				=
				wg::shades root_window c;

			    arg1 = { box=>r, width=> result.border_width, relief=>rel };

			    fun fill ()
				=
				{   if (result.padx != 0   or  result.pady != 0)
					xd::fill_box d base r;
				    fi;

				    d3::draw_box d arg1 shades;
				};
			    fill;
			};
		end;


		fun size ()
		    =
		    {   fun inc_base (wg::INT_PREFERENCE { start_at, step_by, min_steps, ideal_steps, max_steps }, extra)
			    =
			    wg::INT_PREFERENCE { start_at=>start_at+extra, step_by, min_steps, ideal_steps, max_steps };

			my { col_preference, row_preference }
			    =
			    wg::size_preference_of  child;

			xextra = 2*(result.padx + result.border_width);
			yextra = 2*(result.pady + result.border_width);

			{ col_preference =>  inc_base (col_preference, xextra),
			  row_preference =>  inc_base (row_preference, yextra)
			};
		    };


		fun realize_frame { kidplug as xi::KIDPLUG { to_mom=>myco, ... }, window, size } color
		    =
		    {   my  { kidplug, momplug }
			    =
			    xi::make_widget_cable ();

			my xi::KIDPLUG { from_other', ... }
			    =
			    xi::ignore_mouse_and_keyboard  kidplug;

			fun child_box (xg::SIZE { wide, high } )
			    =
			    {   xoff = result.padx + result.border_width;
				yoff = result.pady + result.border_width;

				xg::BOX
				  { col  => xoff,
				    row  => yoff,
				    wide => int::max (1, wide-(2*xoff)),
				    high => int::max (1, high-(2*yoff))
				  };
			    };

			crect = child_box size;

			cwin = wg::make_child_window (window, crect, wg::args_of child);

			my { kidplug => ckidplug, momplug => cmomplug }
			    =
			    xi::make_widget_cable ();

			cmomplug ->  xi::MOMPLUG { from_kid'=>childco, ... };

			drawable = xd::drawable_of_window  window;

			fun make_fill (_, NULL ) =>  (fn _ = xd::clear_drawable drawable);
			    make_fill (r, THE c) =>  fillfn result.relief (drawable, r, c);
			end;

			fun main (box, color, update)
			    =
			    {   fill = make_fill (box, color);

				fun handle_co xi::REQ_RESIZE      =>  do_mailop (myco xi::REQ_RESIZE);
				    handle_co xi::REQ_DESTRUCTION =>  xw::destroy_window cwin;
				end;

				fun do_mom (xi::ETC_RESIZE (xg::BOX { col, row, wide, high } ))
					=>
					{   xw::move_and_resize_window cwin 
						(child_box (xg::SIZE { wide, high } ));

					    main (xg::BOX { col=>0, row=>0, wide, high }, color, FALSE);
					};

				    do_mom (xi::ETC_REDRAW _)
					=>
					fill ();

				    do_mom _ => ();
				end;

				fun loop ()
				    =
				    select [
					plea'       ==>   (fn c = main (box, c, TRUE)),
					from_other' ==>   loop o do_mom o xi::envelope_contents,
					childco     ==>   loop o handle_co
				    ];

				loop (if update  fill (); fi);
			    };

			    mr::route_pair (kidplug, momplug, cmomplug);

			    wg::realize_fn  child
			      {
				kidplug =>  ckidplug, 
				window  =>  cwin,
				size    =>  xg::size_of_box  crect
			      };

			    xw::show_window cwin;

			    main (xg::make_box (xg::point_00, size), color, FALSE);
			};

		fun init_loop color
		    =
		    select [
			get'  realize_1shot
			    ==>
			    .{  realize_frame  #arg  color;  },

			take' plea_slot
			    ==>
			    .{  init_loop #c;  }
		    ];

		make_thread "frame" .{
		    #
		    init_loop result.background;
		};

		BORDER
		  {
		    plea_slot,

		    widget => wg::make_widget
				{
				  root_window,
				  args      =>  fn () = { background => NULL },
				  size_preference_thunk_of =>  size, 

				  realize   =>  fn arg =  set (realize_1shot, arg)
				}
		   };
	      };


	fun as_widget (BORDER { widget,   ... } )
	    =
	    widget;


	fun set_color
		(BORDER { plea_slot, ... } )
		color
	    =
	    give (plea_slot, color);


	fun make_border { color, width, child }
	    =
	    {   root_window = wg::root_window_of child;

		name = wy::make_view { name    =>  wy::style_name ["frame"],
				       aliases =>  []
				     };

		args =  [ (wa::border_width, wa::INT_VAL width) ];

		args =  case color   
			    #
			    THE c => (wa::background,  wa::COLOR_VAL c) ! args;
			    NULL  => args;
			esac;

		border (root_window, (name, wg::style_of root_window), args)
		     child;
	    };
    };
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
