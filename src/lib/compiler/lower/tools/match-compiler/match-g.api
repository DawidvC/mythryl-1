# Interface with the match compiler to generate Mythryl code

# Compiled by:
#     src/lib/compiler/lower/tools/Match-Compiler.make6

###                "No man really becomes a fool
###                 until he stops asking questions.
###
###                           -- Charles Steinmetz



api Match_G {

    package raw_syntax:  Mdl_Ast;	# Mdl_Ast		is from   src/lib/compiler/lower/tools/fake-sml-ast/ast.api
    package mc:   Match_Compiler;	# Match_Compiler	is from   src/lib/compiler/lower/tools/match-compiler/match-compiler.api
    package lit_map:  Map		# Map		is from   src/lib/src/map.api
		      where  key::Key == raw_syntax::Literal; 

    Constructor_Form
	     =
	     ENUM_CONSTRUCTOR_FORM  (List( raw_syntax::Id ),
					       raw_syntax::Consbind,
					       raw_syntax::Datatypebind)
	   | EXCEPTION  (List( raw_syntax::Id ),
		  raw_syntax::Id,
		  Null_Or( raw_syntax::Some_Type ));

    package dictionary :
    api {
	Dictionary;

        bind_api_identifier:   (Dictionary, raw_syntax::Id, Dictionary) -> Dictionary;
	insert_cons:  (Dictionary, raw_syntax::Id, Constructor_Form) -> Dictionary;
	lookup_sig:   (Dictionary, raw_syntax::Id) -> Null_Or( Dictionary );
	lookup_cons:  (Dictionary, raw_syntax::Id) -> Null_Or( Constructor_Form );
	empty:       Dictionary;
    };

    Compiled_Type_Info = dictionary::Dictionary;

    init:    Void -> Void;

    compile_types:  List( raw_syntax::Decl ) -> Compiled_Type_Info;

    compile:  Compiled_Type_Info -> List( raw_syntax::Clause ) -> mc::Compiled_Dfa;

    report:  { warning:  String -> Void,
		  error:    String -> Void, 
		  log:      String -> Void, 
		  dfa:      mc::Compiled_Dfa,
		  rules:    List( raw_syntax::Clause )
		 } -> Void;

    code_gen:  { root:  raw_syntax::Expression,
		   dfa:   mc::Compiled_Dfa,
		   fail:  Void -> raw_syntax::Expression,
		   literals:  Ref(  lit_map::Map(  raw_syntax::Id ) ) 
		  } -> raw_syntax::Expression;     

    is_complex:  List( raw_syntax::Clause ) -> Bool;

};
