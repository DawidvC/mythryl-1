## getreg-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# A simple round robin register allocator.

# We get invoked from:
#
#     src/lib/compiler/lower/reg-alloc/risc-register-allocation-g.pkg
#     src/lib/compiler/lower/x86/reg-alloc/x86-register-allocation-g.pkg
#
generic package get_reg_g (
    first:  Int;  #  start from ``first'' 
    n_regs:  Int;  #  n registers 
    available:  List( Int );
)

: (weak)  Get_Register		# Get_Register	is from   src/lib/compiler/lower/reg-alloc/getreg.api

{
    exception GET_REGISTER;

    size = first+n_regs;

    all_regs  = rw_vector::make_rw_vector (size, FALSE);
    preferred = rw_vector::make_rw_vector (size,-1);

    last_reg = REF first;						# XXX BUGGO FIXME More icky thread-hostile global mutable state.

    fun reset ()
        =
        {   last_reg := first;
            rw_vector::modify (fn _ = -1) preferred;
        };

    my _ = apply (fn r =  rw_vector::set (all_regs, r, TRUE))
                 available;

    fun getreg { pref, stamp: Int, prohibitions }
	= 
	{   # Use preferred registers
            # whenever possible: 
	    #
	    fun check_preferred []
                    =>
                    find *last_reg;

	        check_preferred (r ! rs)
                    => 
		    if (    rw_vector::get (prohibitions, r) != stamp
		       and  rw_vector::get (all_regs, r)
                       )

                         r; 
		    else check_preferred rs;
                    fi;
            end 

	    # If not, use the round robin scheme
            # to get for a register:
	    #
	    also
	    fun find (start)
		=
		{   limit = rw_vector::length all_regs;

		    fun search r
			= 
			if (   rw_vector::get (prohibitions, r) != stamp
                           and rw_vector::get (all_regs, r)
                           )

                             r; 
			else
                             r = r+1;
			     r = if (r >= limit ) first; else r;fi;

			     if (r == start ) raise exception GET_REGISTER;
			     else            search r;        fi;
			fi;

		    found = search (start);
		    next = found + 1;
		    next = if (next >= limit ) first; else next;fi ;

		    last_reg := next;
		    found;
		};

	    check_preferred pref;
	};

    last_reg_pair = REF first;						# XXX BUGGO FIXME More icky thread-hostile global mutable state.

    fun getpair { pref, stamp: Int, prohibitions }
	= 
	{   # If not, use the round robin scheme
            # to get a register:
	    #
	    fun find (start)
		=
		{   limit = rw_vector::length all_regs;

		    fun search r
			= 
			if (rw_vector::get (prohibitions, r) != stamp 
			       and rw_vector::get (prohibitions, r+1) != stamp 
			       and rw_vector::get (all_regs, r) 
			       and rw_vector::get (all_regs, r+1)
                           )

			     r; 
			else 
			     nxt = r+1;
			     nxt_r = if (nxt+1 >= limit ) first; else nxt;fi;

			     if (nxt_r == start) raise exception GET_REGISTER;
			     else                search nxt_r;   fi;
			fi;

		    found = search (start);
		    next = found + 1;

		    next =   next+1 >= limit  ??   first
                                              ::   next;

		    last_reg_pair := next;
		    found;
		};

	    find *last_reg_pair;
	};
};


## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
