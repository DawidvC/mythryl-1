#
# This module starts a graph viewer.
#
# -- Allen Leung 

# Compiled by:
#     src/lib/compiler/lower/make7/visual.make6


generic package graph_viewer_g (d:  Graph_Display )		# Graph_Display	is from   src/lib/compiler/lower/visualization/graph-display.api

: (weak)  Graph_Viewer						# Graph_Viewer	is from   src/lib/compiler/lower/visualization/graph-viewer.api

{
   package l= graph_layout;					# graph_layout	is from   src/lib/compiler/lower/visualization/graph-layout.pkg
   package g= graph;						# graph		is from   src/lib/graph/graph.pkg
   package file_system= winix::file;				# winix		is from   src/lib/std/winix.pkg
   
   tmp_name
       =
       low_code_control::get_string
           "tmp_name";

   fun display exec (layout as g::GRAPH l) filename
       = 
       {   filename  = filename + d::suffix();
	   print("[ " + l.name + ": " + 
			     d::program() + " " + filename + 
			     " " + int::to_string (l.order ()) + " nodes"  + 
			     " " + int::to_string (l.size ()) + " edges");
	   file  =  file::open_for_write filename;
	   out   =  fn s = file::write (file, s);
	   d::visualize out layout;
	   file::close_output file;
	   print(" ]\n");
	   exec filename;

	   ();
      }
      except
          e =  {   print("[Uncaught exception in " + exception_name e + " graph viewer]\n");
                   raise exception e;
               };

   fun system filename = { winix::process::system 
			   ((d::program()) + " " + filename);
                          file_system::remove_file filename;};

   fun fork filename = (winix::process::system(
			  "(" + (d::program()) + " " + filename + 
			      "; /bin/rm " + filename + ") &"));

   fun get_tmp_name ()
       =
       if  (*tmp_name == ""  )   file_system::tmp_name ();
                            else   *tmp_name;            fi;

   fun view layout
       =
       display system layout (get_tmp_name());
};

