## rw-char-vector.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6

package rw_char_vector: (weak)  Monomorphic_Rw_Vector {		# Monomorphic_Rw_Vector	is from   src/lib/std/src/monomorphic-rw-vector.api

    package string=  string_guts;				# string_guts	is from   src/lib/std/src/string-guts.pkg

    package a=  inline_t::rw_char_vector;			# inline_t	is from   src/lib/core/init/built-in.pkg

    # Fast add/subtract avoiding
    # the overflow test:
    #
    infix val --- +++;
    #
    fun x --- y = inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x - inline_t::unt31::copyf_int31 y);
    fun x +++ y = inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x + inline_t::unt31::copyf_int31 y);


    # Unchecked access operations 
    #
    unsafe_set = a::set;
    unsafe_get = a::get;
    #
    ro_unsafe_set = inline_t::char_vector::set;
    ro_unsafe_get = inline_t::char_vector::get;
    #
    ro_length     = inline_t::char_vector::length;

    Element = Char;
    Vector = String;
    Rw_Vector = a::Rw_Vector;

    max_len = core::max_length;

    fun make_rw_vector (0, c)
            =>
            a::new_array0();

	make_rw_vector (len, c)
            =>
            if   (inline_t::default_int::ltu (max_len, len))
	        
                 raise exception exceptions::SIZE;
	    else
	         arr = a::create len;

		 fun init i
                     =
                     if   (i < len)
		         
                          unsafe_set (arr, i, c);
                          init (i+1);
		     fi;

		 init 0;

                 arr;
	    fi;
    end;

    fun tabulate (0, _)
            =>
            a::new_array0();

        tabulate (len, f)
            =>
            if   (inline_t::default_int::ltu (max_len, len))
	        
                 raise exception exceptions::SIZE;
	    else
		 arr = a::create len;

		 fun init i
                     =
                     if   (i < len)
		         
                          unsafe_set (arr, i, f i);
                          init (i+1);
		     fi;
	      
		init 0;

                arr;
	    fi;
    end;

    fun from_list []
            =>
            a::new_array0 ();

	from_list l
            =>
            arr
            where 
                fun length ([],    n) =>  n;
		    length (_ ! r, n) =>  length (r, n+1);
                end;

		len = length (l, 0);

		if   (len > max_len)
                    
                     raise exception exceptions::SIZE;
                fi;

		arr = a::create len;

		fun init ([],    _) =>  ();
		    init (c ! r, i) =>  { unsafe_set (arr, i, c);   init (r, i+1); };
                end;

		init (l, 0);
	    end;
    end;

    # Note:  The (_[])   enables   'vec[index]'           notation;
    #        The (_[]:=) enables   'vec[index] := value'  notation;

    my length:       Rw_Vector -> Int		          = inline_t::rw_char_vector::length;

    my get:          ((Rw_Vector, Int)) -> Element        = inline_t::rw_char_vector::check_sub;
    my (_[]):        ((Rw_Vector, Int)) -> Element        = inline_t::rw_char_vector::check_sub;

    my  set:         ((Rw_Vector, Int, Element)) -> Void  =  inline_t::rw_char_vector::check_set;
    my  (_[]:=):     ((Rw_Vector, Int, Element)) -> Void  =  inline_t::rw_char_vector::check_set;

    fun to_vector a
        =
	case (length a)
          
	   0   => "";

	   len =>  {
		s = assembly::a::create_s len;

		fun fill i
                    =
		    if (i >= len ) ();
		    else           ro_unsafe_set (s, i, unsafe_get (a, i)); fill (i +++ 1);
                    fi;
	    
		fill 0;
		s;
	    };
        esac;

    fun copy { from, to, di }
	=
	{   sl = length  from;
	    de = sl + di;

	    fun copy_dn (s, d)
                =
		if (s < 0 ) (); else unsafe_set (to, d, unsafe_get (from, s));
				       copy_dn (s --- 1, d --- 1); fi;

	    if (di < 0 or de > length to)  raise exception SUBSCRIPT;
	    else copy_dn (sl --- 1, de --- 1);
            fi;
	};

    fun copy_vec { from, to, di }
        =
	{
	    sl = ro_length  from;
	    de = sl + di;

	    fun copy_dn (s, d)
		=
		if (s < 0 ) (); else unsafe_set (to, d, ro_unsafe_get (from, s));
				       copy_dn (s --- 1, d --- 1); fi;

	    if (di < 0 or de > length to) raise exception SUBSCRIPT;
	    else copy_dn (sl --- 1, de --- 1);fi;
	};

    fun keyed_apply f arr
	=
	{
	    len = length arr;
	    fun apply i =
		if (i >= len ) (); else f (i, unsafe_get (arr, i)); apply (i +++ 1); fi;

	    apply 0;
	};

    fun apply f arr
	=
	{
	    len = length arr;
	    fun apply i =
		if (i >= len ) (); else f (unsafe_get (arr, i)); apply (i +++ 1); fi;

	    apply 0;
	};

    fun modifyi f arr
	=
	{
	    len = length arr;
	    fun mdf i =
		if (i >= len ) ();
		else unsafe_set (arr, i, f (i, unsafe_get (arr, i))); mdf (i +++ 1); fi;

	    mdf 0;
	};

    fun modify f arr
	=
	{
	    len = length arr;
	    fun mdf i =
		if (i >= len ) ();
		else unsafe_set (arr, i, f (unsafe_get (arr, i))); mdf (i +++ 1); fi;

	    mdf 0;
	};

    fun keyed_fold_left f init arr
	=
	{
	    len = length arr;
	    fun fold (i, a) =
		if (i >= len ) a; else fold (i +++ 1, f (i, unsafe_get (arr, i), a));fi;

	    fold (0, init);
	};

    fun fold_left f init arr
	=
	{
	    len = length arr;
	    fun fold (i, a) =
		if (i >= len ) a; else fold (i +++ 1, f (unsafe_get (arr, i), a));fi;

	    fold (0, init);
	};

    fun keyed_fold_right f init arr
	=
	{
	    fun fold (i, a) =
		if (i < 0 ) a; else fold (i --- 1, f (i, unsafe_get (arr, i), a));fi;

	    fold (length arr --- 1, init);
	};

    fun fold_right f init arr
	=
	{
	    fun fold (i, a) =
		if (i < 0 ) a; else fold (i --- 1, f (unsafe_get (arr, i), a));fi;

	    fold (length arr --- 1, init);
	};

    fun findi p arr
	=
	{
	    len = length arr;
	    fun fnd i =
		if (i >= len ) NULL;
		else { x = unsafe_get (arr, i);

			 if (p (i, x) ) THE (i, x); else fnd (i +++ 1);fi;
		     };fi;

	    fnd 0;
	};

    fun find p arr
	=
	{
	    len = length arr;
	    fun fnd i =
		if (i >= len ) NULL;
		else { x = unsafe_get (arr, i);

			 if (p x ) THE x; else fnd (i +++ 1);fi;
		     };fi;

	    fnd 0;
	};

    fun exists p arr
	=
	{
	    len = length arr;
	    fun ex i = i < len and (p (unsafe_get (arr, i)) or ex (i +++ 1));

	    ex 0;
	};

    fun all p arr
	=
	{
	    len = length arr;
	    fun al i = i >= len or (p (unsafe_get (arr, i)) and al (i +++ 1));

	    al 0;
	};

    fun collate c (a1, a2)
	=
	{
	    l1 = length a1;
	    l2 = length a2;
	    l12 = inline_t::int31::min (l1, l2);

	    fun coll i
		=
		if   (i >= l12)

		     int_guts::compare (l1, l2);
		else
		     case (c (unsafe_get (a1, i), unsafe_get (a2, i)))

			 EQUAL => coll (i +++ 1);
			unequal => unequal;
		     esac;
		fi;

	    coll 0;
	};
};		#  rw_char_vector 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 AT&T Bell Labs.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
