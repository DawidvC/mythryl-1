## char-vector-slice.pkg
## Author: Matthias Blume (blume@tti-c.org)

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

package char_vector_slice : Monomorphic_Vector_Slice		# Monomorphic_Vector_Slice	is from   src/lib/std/src/monomorphic-vector-slice.api
				 where  Element == Char
				 where  Vector == char_vector::Vector
				 where  Slice == substring::Substring
= package {

    # Fast add/subtract avoiding
    # the overflow test:
    #
    infix val --- +++;
    #
    fun x --- y = inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x - inline_t::unt31::copyf_int31 y);
    fun x +++ y = inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x + inline_t::unt31::copyf_int31 y);

    package ss = substring;					# substring	is from   src/lib/std/src/substring.pkg

    Element = Char;
    Vector  = char_vector::Vector;
    Slice   = ss::Substring;

    unsafe_get = inline_t::char_vector::get;
    vlength    = inline_t::char_vector::length;

    length          = ss::size;
    get             = ss::get;

    make_full_slice = ss::from_string;
    make_slice      = ss::extract;
    make_subslice   = ss::make_slice;

    base            = ss::base;
    to_vector       = ss::to_string;

    is_empty        = ss::is_empty;
    get_item        = ss::getc;

    fun keyed_apply f vs
	=
	apply start
	where
	    my (base, start, len) = ss::base vs;

	    stop = start +++ len;

	    fun apply i
                =
		if   (i < stop)
                     
		     f (i --- start,  unsafe_get (base, i));
                     apply (i +++ 1);
                fi;

	end;

    apply      = ss::apply;
    fold_left  = ss::fold_left;
    fold_right = ss::fold_right;
    cat       = ss::cat;
    collate    = ss::collate;

    fun keyed_fold_left f init vs
    =
    fold (start, init)
    where
	my (base, start, len)
            =
            ss::base vs;

	stop = start +++ len;

	fun fold (i, a)
            =
	    if   (i >= stop)
                
                 a;
	    else
                 fold (i +++ 1, f (i --- start, unsafe_get (base, i), a));
            fi;
    end;

    fun keyed_fold_right f init vs
	=
	fold (stop --- 1, init)
	where
	    my (base, start, len)
                =
                ss::base vs;

	    stop = start +++ len;

	    fun fold (i, a)
                =
		if   (i < start)
                    
                     a;
		else
                     fold (i --- 1, f (i --- start, unsafe_get (base, i), a));
                fi;
	end;

    fun keyed_map f sl
        =
	char_vector::from_list (
	    reverse (
                keyed_fold_left
                    (fn (i, x, a) =  f (i, x) ! a)
                    []
                    sl
            )
        );

    fun map f sl
        =
	char_vector::from_list (
	    reverse (
                fold_left
                    (fn (x, a) =  f x ! a)
                    []
                    sl
            )
        );

    fun findi p vs
	=
	fnd start
	where
	    my (base, start, len)
                =
                ss::base vs;

	    stop =  start +++ len;

	    fun fnd i
                =
		if   (i >= stop)
                    
                     NULL;
		else
                     x = unsafe_get (base, i);

		     if   (p (i, x))
                         
                          THE (i --- start, x);
                     else
                          fnd (i +++ 1);
                     fi;
		fi;
	end;

    fun find p vs
	=
	fnd start
	where
	    my (base, start, len)
                =
                ss::base vs;

	    stop =  start +++ len;

	    fun fnd i
                =
		if   (i >= stop)
                    
                     NULL;
		else 
                     x = unsafe_get (base, i);

		     if   (p x)
                         
                          THE x;
                     else
                          fnd (i +++ 1);
                     fi;
		fi;

	end;

    fun exists p vs
	=
	ex start
	where
	    my (base, start, len)
		=
		ss::base vs;

	    stop =  start +++ len;

	    fun ex i
		=
		i < stop   and
		(p (unsafe_get (base, i)) or ex (i +++ 1));
	end;

    fun all p vs
	=
	al start
	where
	    my (base, start, len)
                =
                ss::base vs;

	    stop = start +++ len;

	    fun al i
                =
                i >= stop   or
                (p (unsafe_get (base, i)) and al (i +++ 1));

	end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 2003 by The Fellowship of SML/NJ
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
