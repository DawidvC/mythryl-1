## control-mc.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



###               "The more I ponder the principles of language design,
###                and the techniques which put them into practice,
###                the more is my amazement and admiration of ALGOL 60.
###
###               "Here is a language so far ahead of its time,
###                that it was not only an improvement on its predecessors,
###                but also on nearly all its successors.
###
###               "Of particular interest are its introduction of all the
###                main program structuring concepts, the simplicity and
###                clarity of its description, rarely equalled and never
###                surpassed.
###
###               "Consider especially the avoidance of abbreviation in the
###                syntax names and equations, and the inclusion of examples
###                in every section."
###
###                                                -- C. A. R. Hoare, 1973



package control_mc
: (weak)
Matchcompiler_Controls						# Matchcompiler_Controls	is from   src/lib/compiler/toplevel/main/control-apis.api
=
package {
    priority  = [10, 10, 4];
    obscurity = 2;
    prefix    = "compiler_mc";

    registry  = control_index::make				# control_index	is from   src/lib/controls/control-index.pkg
                    { help => "match compiler settings" };
                                                           	my _ = 
    basic_control::note_subindex
        (prefix, registry, priority);				# basic_control		is from   src/lib/compiler/front/basics/main/basiccontrol.pkg

    convert_boolean = control_utilities::convert::bool;		# control_utilities	is from   src/lib/controls/control-util.pkg

    nextpri =  REF 0;						# XXX BUGGO FIXME more mutable global state :(

    fun make_bool (n, h, d)
        =
	{   r =  REF d;
	    p =  *nextpri;

	    control
                =
                control::control {				# control		is from   src/lib/controls/control.pkg
                    name    => n,
		    pri     => [p],
		    help    => h,
		    control => r,
		    obscurity
                };

	    nextpri :=  p + 1;

	    control_index::note_control
		registry
		{ control         =>  control::string_control convert_boolean control,
		  dictionary_name =>  THE (control_utilities::dictionary_name::to_upper "COMPILER_MC_" n)
                };
					# control_utilities	is from   src/lib/controls/control-util.pkg
	    r;
	};

    print_args =  make_bool ("print_args", "arguments print mode", FALSE);
    print_ret  =  make_bool ("print_ret",  "return print mode",    FALSE);

    bind_no_variable_warn
        =
	make_bool ("bind_no_variable_warn", "whether to warn if no variables get bound",
	      FALSE);

    warn_on_nonexhaustive_bind
        =
	make_bool ("warn_on_nonexhaustive_bind",
	      "whether to warn on non-exhaustive bind", TRUE);

    error_on_nonexhaustive_bind
        =
	make_bool ("error_on_nonexhaustive_bind",
	      "whether non-exhaustive bind is an error", FALSE);

    warn_on_nonexhaustive_match
        =
	make_bool ("warn_on_nonexhaustive_match",
	      "whether to warn on non-exhaustive match", TRUE);

    error_on_nonexhaustive_match
        =
	make_bool ("error_on_nonexhaustive_match",
	      "whether non-exhaustive match is an error", FALSE);

    #  matchExhaustiveError overrides matchExhaustiveWarn 

    warn_on_redundant_match
        =
	make_bool ("warn_on_redundant_match", "whether to warn on redundant matches", TRUE);

    error_on_redundant_match
        =
	make_bool ("error_on_redundant_match", "whether a redundant match is an error", TRUE);

    #  error_on_redundant_match overrides warn_on_redundant_match 
/*
    expand_result =
	make_bool ("expand_result", "whether to expand result of match", FALSE)
*/
};

package control_cg
: (weak)
Codegenerator_Controls				# Codegenerator_Controls	is from   src/lib/compiler/toplevel/main/control-apis.api
=
package {
    priority  =  [10, 11, 2];	# XXX BUGGO FIXME "priority" should be renamed something like "menu_position" or "menu_slot" or "menu_location".
    obscurity =  6;		# XXX BUGGO FIXME obscurity values should be given intelligible names like "high" "medium" "low". Who knows what 6 means? 
    prefix    =  "cg";		# XXX BUGGO FIXME "cg" does not count as a "long descriptive variable name".

    registry  =  control_index::make { help => "code generator settings" };
    									my _ = 
    basic_control::note_subindex
        (prefix, registry, priority);		# XXX BUGGO FIXME more stuff which should be part of a state record, not global mutable state.

						# control_index		is from   src/lib/controls/control-index.pkg
						# basic_control		is from   src/lib/compiler/front/basics/main/basiccontrol.pkg
						# control_utilities	is from   src/lib/controls/control-util.pkg
    b  =  control_utilities::convert::bool;
    i  =  control_utilities::convert::int;
    r  =  control_utilities::convert::real;
    sl =  control_utilities::convert::string_list;

    nextpri =  REF 0;

    fun make (control_type, name, help, initial_value)
        =
	{   val_ref =  REF  initial_value;
	    pri     =  *nextpri;

	    control
                =
                control::control {		# control		is from   src/lib/controls/control.pkg
                  name,
		  help,
		  pri       =>  [pri],
		  obscurity,
		  control   =>  val_ref
                };

	    nextpri := pri + 1;

	    control_index::note_control
		registry
		{ control         =>  control::string_control  control_type  control,
		  dictionary_name =>  THE (control_utilities::dictionary_name::to_upper "CG_" name)
                };
	    val_ref;
	};

    tailrecur       = make (b, "tailrecur", "?", TRUE);
    recordopt       = make (b, "recordopt", "?", TRUE);
    tail            = make (b, "tail", "?", TRUE);

    allocprof       = make (b, "allocprof", "?", FALSE);
    closureprint    = make (b, "closureprint", "?", FALSE);
    closure_strategy = make (i, "closure_strategy", "?", 0);

    lambdaopt       = make (b, "lambdaopt", "?", TRUE);
    fps_optional_optimizations  = make (sl, "fps_optional_optimizations", "fps optimizer phases", ["zeroexpand", "last_contract"]);

#    ["first_contract", "eta", "uncurry", "split_known_escaping_functions",
#	"cycle_expand", "eta", "last_contract" ]

    rounds            = make (i, "rounds", "max # of fps_optional_optimizations rounds", 10);
    path              = make (b, "path", "?", FALSE);
    beta_contract      = make (b, "beta_contract", "?", TRUE);

    eta               = make (b, "eta", "?", TRUE);
    selectopt         = make (b, "selectopt", "?", TRUE);
    dropargs          = make (b, "dropargs", "?", TRUE);

    deadvars          = make (b, "deadvars", "?", TRUE);
    flattenargs       = make (b, "flattenargs", "?", FALSE);
    extraflatten      = make (b, "extraflatten", "?", FALSE);

    switchopt         = make (b, "switchopt", "?", TRUE);
    handlerfold       = make (b, "handlerfold", "?", TRUE);
    branchfold        = make (b, "branchfold", "?", FALSE);

    arithopt          = make (b, "arithopt", "?", TRUE);
    beta_expand       = make (b, "beta_expand", "?", TRUE);
    unroll            = make (b, "unroll", "?", TRUE);

    knownfiddle       = make (b, "knownfiddle", "?", FALSE);
    invariant         = make (b, "invariant", "?", TRUE);
    targeting         = make (i, "targeting", "?", 0);

    lambdaprop        = make (b, "lambdaprop", "?", FALSE);
    newconreps        = make (b, "newconreps", "?", TRUE);

    boxedconstconreps = typechecking_control::boxedconstconreps;

    unroll_recursion = make (b, "unroll_recursion", "?", TRUE);
    sharepath        = make (b, "sharepath", "?", TRUE);
    staticprof       = make (b, "staticprof", "?", FALSE);

    hoistup          = make (b, "hoistup", "?", FALSE);
    hoistdown        = make (b, "hoistdown", "?", FALSE);

    recordcopy       = make (b, "recordcopy", "?", TRUE);
    recordpath       = make (b, "recordpath", "?", TRUE);

    verbose          = make (b, "verbose", "?", FALSE);
    debugcps         = make (b, "debugcps", "?", FALSE);
    misc4            = make (i, "misc4", "?", 0);

    argrep           = make (b, "argrep", "?", TRUE);
    bodysize         = make (i, "bodysize", "?", 20);
    reducemore       = make (i, "reducemore", "?", 15);

    alphac           = make (b, "alphac", "?", TRUE);
    comment          = make (b, "comment", "?", FALSE);

    known_function    = make (i, "known_function", "?", 0);
    known_cl_function = make (i, "known_cl_function", "?", 0);

    escape_function   = make (i, "escape_function", "?", 0);
    callee_function   = make (i, "callee_function", "?", 0);

    spill_function    = make (i, "spill_function", "?", 0);
    foldconst         = make (b, "foldconst", "?", TRUE);

    printit           = make (b, "printit", "whether to show FPS", FALSE);
    printsize         = make (b, "printsize", "?", FALSE);

    scheduling        = make (b, "scheduling", "?", TRUE);
    cse               = make (b, "cse", "?", FALSE);

    split_known_escaping_functions = make (b, "split_known_escaping_functions", "?", TRUE);
    optimize_after_closure = make (b, "optimize_after_closure", "?", FALSE);

    uncurry      = make (b, "uncurry", "?", TRUE);
    if_idiom     = make (b, "if_idiom", "?", TRUE);
    comparefold  = make (b, "comparefold", "?", TRUE);
    csehoist     = make (b, "csehoist", "?", FALSE);
    rangeopt     = make (b, "rangeopt", "?", FALSE);
    icount       = make (b, "icount", "?", FALSE);

    debug_representation = make (b, "debug_representation", "?", FALSE);
    checklty1            = make (b, "checklty1", "?", FALSE);
    checklty2            = make (b, "checklty2", "?", FALSE);
    checklty3            = make (b, "checklty3", "?", FALSE);
    checkcps1            = make (b, "checkcps1", "?", FALSE);
    checkcps2            = make (b, "checkcps2", "?", FALSE);
    checkcps3            = make (b, "checkcps3", "?", FALSE);
    checkcps             = make (b, "checkcps", "?", FALSE);

    flatfblock = make (b, "flatfblock", "?", TRUE);
    deadup     = make (b, "deadup", "?", TRUE);

    poll_checks       =  make (b, "poll_checks", "?", FALSE);
    poll_ratio_a_to_i =  make (r, "poll_ratio_a_to_i", "?", 1.0);

    print_flowgraph_stream = REF file::stdout;

    disambiguate_memory =  make (b, "disambiguate_memory", "?", FALSE);
    control_dependence  =  make (b, "control_dependence", "?", FALSE);
    highcodeon          =  make (b, "highcodeon", "?", TRUE);

    comp_debugging                         = make (b, "comp_debugging", "?", FALSE);
    module_stuff_debugging                 = typecheck_data_control::module_stuff_debugging;
    translate_to_anormal_debugging         = typecheck_data_control::translate_to_anormal_debugging;
    type_stuff_debugging                   = typecheck_data_control::type_stuff_debugging;
    types_debugging                        = typecheck_data_control::types_debugging;
    expand_generics_g_debugging            = typecheck_data_control::expand_generics_g_debugging;
    typechecker_dictionary_debugging       = typecheck_data_control::typechecker_dictionary_debugging;
    generics_expansion_stuff_debugging     = typechecking_control::generics_expansion_stuff_debugging;
    api_match_debugging                    = typechecking_control::api_match_debugging;
    typecheck_package_language_debugging   = typechecking_control::typecheck_package_language_debugging;
    typecheck_stuff_debugging              = typechecking_control::typecheck_stuff_debugging;
    typecheck_api_debugging                = typechecking_control::typecheck_api_debugging;
    typecheck_type_debugging               = typechecking_control::typecheck_type_debugging;
    unify_types_debugging                  = typechecking_control::unify_types_debugging;
    expand_oop_syntax_debugging            = typechecking_control::expand_oop_syntax_debugging;
    translate_types_debugging              = make (b, "translate_types_debugging", "?", FALSE);
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
