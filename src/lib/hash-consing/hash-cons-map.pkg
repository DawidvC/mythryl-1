## hash-cons-map.pkg

# Compiled by:
#     src/lib/hash-consing/hash-cons-lib.make6

# This is an implementation of the Hash_Cons_Map api that is built
# on top of the WordRedBlackMap package.  Eventually, it will be replaced
# by an implmementation that uses Patricia trees.


package hash_cons_map:  Hash_Cons_Map		# Hash_Cons_Map		is from   src/lib/hash-consing/hash-cons-map.api
{
    package hc= hash_cons;			# hash_cons		is from   src/lib/hash-consing/hash-cons.pkg
    package map= unt_red_black_map;		# unt_red_black_map	is from   src/lib/src/unt-red-black-map.pkg

    Chunk( X ) = hc::Chunk( X );

    Map (X, Y) = map::Map ((Chunk(X) , Y)); 

    fun lift2  f ((_, a), (_, b)) = f (a, b);
    fun lift2i f (_, (k, a), (_, b)) = f (k, a, b);

    empty = map::empty;
    is_empty = map::is_empty;


    fun singleton (chunk, v)
        =
        map::singleton (hc::tag chunk, (chunk, v));


    fun set (m, chunk, v)
        =
        map::set (m, hc::tag chunk, (chunk, v));


    fun set' (p as (chunk, v), m)
        =
        map::set (m, hc::tag chunk, p);


    fun set_with merge (m, chunk, v)
        =
        {   tag = hc::tag chunk;
	  
	    case (map::find (m, tag))
                 NULL       =>  map::set (m, tag, (chunk, v));
	         THE(_, v') =>  map::set (m, tag, (chunk, merge (v', v)));
            esac;
	  };

    fun set_withi merge (m, chunk, v)
        =
        {   tag = hc::tag chunk;
	  
	    case (map::find (m, tag))
                 NULL => map::set (m, tag, (chunk, v));
	         THE(_, v') => map::set (m, tag, (chunk, merge (chunk, v', v)));
            esac;
	  };


    fun find (map:   Map(X, Y), chunk)
        =
        null_or::map #2 (map::find (map, hc::tag chunk));


    fun contains_key (map, chunk)
        =
        map::contains_key (map, hc::tag chunk);


    fun remove (map, chunk)
        =
        {   my (map, (_, v))
                =
                map::remove (map, hc::tag chunk);
	  
	    (map, v);
	};


    fun first_val_else_null (map:   Map(X, Y))
        =
        null_or::map #2 (map::first_val_else_null map);


    first_keyval_else_null
        =
        map::first_val_else_null;

    vals_count =  map::vals_count;

    fun vals_list map
        =
        map::fold_right
            (fn ((_, v), vs) = v ! vs)
            []
            map;

    keyvals_list = map::vals_list;


    fun list_keys map
        =
        map::fold_right
            (fn ((k, _), ks) = k ! ks)
            []
            map;


    fun collate compare
        =
        map::collate (lift2 compare);


    fun union_with  merge
        =
	map::union_with
            (fn ((k, a), (_, b)) =  (k, merge (a, b)));


    fun keyed_union_with  merge
        =
	map::keyed_union_with
            (lift2i  (fn (k, a, b) = (k, merge (k, a, b))));

    fun intersect_with  join
        =
	map::intersect_with
            (fn ((k, a), (_, b)) = (k, join (a, b)));

    fun keyed_intersect_with join
        =
	map::keyed_intersect_with
            (lift2i (fn (k, a, b) = (k, join (k, a, b))));

    fun apply f
        =
        map::apply (fn (_, v) = f v);

    keyed_apply = map::apply;

    fun map f
        =
        map::map (fn (k, v) = (k, f v));

    fun keyed_map f
        =
        map::map (fn (k, v) = (k, f (k, v)));

    fun fold_left f
        =
        map::fold_left (fn ((_, x), acc) = f (x, acc));

    fun keyed_fold_left f
        =
        map::fold_left (fn ((k, x), acc) = f (k, x, acc));

    fun fold_right f
        =
        map::fold_right
            (fn ((_, x), acc) = f (x, acc));

    fun keyed_fold_right f
        =
        map::fold_right
            (fn ((k, x), acc) = f (k, x, acc));

    fun filter prior
        =
        map::filter
            (fn (_, x) = prior x);

    keyed_filter = map::filter;

    fun map_maybe_null_fn f
        =
	map::map_maybe_null_fn
	    (fn (k, v) = case (f v)
                             THE v => THE (k, v);
                             NULL  => NULL;
                         esac
            );

    fun keyed_map_maybe_null_fn f
        =
	map::map_maybe_null_fn
	    (fn (k, v) = case (f (k, v))
                             THE v => THE (k, v);
                             NULL  => NULL;
                         esac
            );
};



## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
