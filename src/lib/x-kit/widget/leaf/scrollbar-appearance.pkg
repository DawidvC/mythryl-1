## scrollbar-appearance.pkg
#
# Scrollbar views.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6






###                "My view of the matter was, the reason large programs are
###                 so confusing is that we don't know how to write them."
###
###                                        -- Whitfield Diffie


stipulate
    package d3 =  three_d;						# three_d		is from   src/lib/x-kit/widget/lib/three-d.pkg
    package wg =  widget;						# widget		is from   src/lib/x-kit/widget/basic/widget.pkg
    #
    package xc =  xcore;						# xcore			is from   src/lib/x-kit/xclient/xcore.pkg
    package xd =  xdraw;						# xdraw			is from   src/lib/x-kit/xclient/xdraw.pkg
    package xg =  xgeometry;						# xgeometry		is from   src/lib/x-kit/xclient/xgeometry.pkg
herein

    package scrollbar_appearance: (weak)  Scrollbar_Appearance {	# Scrollbar_Appearance	is from   src/lib/x-kit/widget/leaf/scrollbar-appearance.api

	Scrollbar_State
	  = 
	  { size:   Int,
	    coord:  xg::Point -> Int,
	    draw:  (Int, Int) -> Void,
	    move:  (Int, Int, Int, Int) -> Void
	  };

	Scrollbar_Appearance
	  =
	  { size_preference_thunk_of
		:
		Int -> Void -> wg::Widget_Size_Preference,

	    realize
		:
		(wg::Root_Window, xc::Rgb)
		-> xd::Drawable_Window
		-> xg::Size
		-> Scrollbar_State
	  };

	inset = 1;
	bwidth = 2;

	fun move_fn (clear, fill) (x: Int, w: Int, x', w')
	    =
	    {   e = x+w;
		e' = x'+w';

		if (x < x' )

		    if (e <= x' )  clear (x, w);
		    elif (e < e' ) clear (x, x'-x);
		    else           clear (x, x'-x);
				   clear (e', e-e');
		    fi;

		elif (x == x' )
		    if (e > e')    clear (e', e-e'); fi;
		elif (x < e' )
		  if (e > e' )     clear (e', e-e'); fi;
		else
				   clear (x, w);
		fi;

		fill (x', w');
	    };

	fun vertical_realize (root, color)
	    =
	    {   my shades as { base, ... }
		    =
		    wg::shades root color;

		fn dr
		    =
		    {   dr =  xd::make_unbuffered_drawable  dr;

			clear =  xd::clear_box  dr;

			fun config (xg::SIZE { wide, high } )
			    =
			    {
				rwid = wide - 2*inset;

				fun draw_fn (x, w)
				    =
				    {   r = xg::BOX { col=>inset, row=>x, wide=>rwid, high=>w };

					xd::clear_drawable dr;
					xd::fill_box dr base r;
					d3::draw_box dr { box=>r, width=>bwidth, relief=>d3::RAISED } shades;
				    };

				fun clr (x, w)
				    =
				    clear (xg::BOX { col=>inset, row=>x, high=>w, wide=>rwid } );


				move_fn = move_fn (clr, draw_fn);


				{ size  =>  high,
				  coord =>  fn xg::POINT { col, row } = row,
				  draw  =>  draw_fn,
				  move  =>  move_fn
				};
			    };

			  config;
		      };
	      };

	fun vertical_size_preference  dim
	    =
	    {   swid = dim / 3;

		size_preferences
		    =
		    { col_preference => wg::tight_preference dim,
		      row_preference => wg::INT_PREFERENCE { start_at=>swid, step_by=>1, min_steps=>0, ideal_steps=>0, max_steps=>NULL }
		    };

	       fn ()
		    =
		    size_preferences;
	    };

	fun horizontal_realize (root, color)
	    =
	    {   my shades as { base, ... }
		    =
		    wg::shades root color;

		fn dr
		    =
		    {   dr = xd::make_unbuffered_drawable  dr;

			clear =  xd::clear_box  dr;

			fun config (xg::SIZE { wide, high } )
			    =
			    {   rht = high - 2*inset;

				fun draw_fn (x, w)
				    =
				    {   r = xg::BOX { col=>x, row=>inset, wide=>w, high=>rht };

					xd::clear_drawable dr;
					xd::fill_box dr base r;
					d3::draw_box dr { box=>r, width=>bwidth, relief=>d3::RAISED } shades;
				    };

				fun clr (x, w)
				    =
				    clear (xg::BOX { col=>x, row=>inset, wide=>w, high=>rht } );

				move_fn = move_fn (clr, draw_fn);

				{ size  => wide,
				  coord => fn xg::POINT { col, row } = col,
				  draw  => draw_fn,
				  move  => move_fn
				};
			    };

			  config;
		  };
	      };

	fun horizontal_size_preference  dim
	    =
	    {
		swid = dim / 3;

		size_preferences
		    =
		    { row_preference =>  wg::tight_preference dim,
		      col_preference =>  wg::INT_PREFERENCE { start_at=>swid, step_by=>1, min_steps=>0, ideal_steps=>0, max_steps=>NULL }
		    };

		fn ()
		    =
		    size_preferences;
	    };

	horizontal_scrollbar = { size_preference_thunk_of => horizontal_size_preference,  realize => horizontal_realize };
	vertical_scrollbar   = { size_preference_thunk_of =>   vertical_size_preference,  realize =>   vertical_realize };

    };			# package scrollbar_appearance

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1991 by AT&T Bell Laboratories  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
