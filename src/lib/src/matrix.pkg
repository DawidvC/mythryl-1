## matrix.pkg

# Two-dimensional arrays.



package matrix:  Matrix {

    enum matrix X = A2 of {
	nrows:  Int,
	ncols:  Int,
	elems:  Rw_Vector( X )
    }

    fun index (A2 { nrows, ncols, ... }, i, j)
        =
	if   ((i < 0) or (nrows <= i) or (j < 0) or (ncols <= j))
	then raise SUBSCRIPT
	else (i*ncols + j)

    # array (n, m, x) creates an n*m array initialized to x.
    # Raises SIZE, if m or n is < 0.

    fun array (rows, columns, initVal)
        =
	  if (columns < 0) or (rows < 0)
	    then raise SIZE
	    else A2 {
		nrows = rows, ncols = columns,
		elems = rw_vector::rw_vector (rows*columns, initVal)
	      }

    # tabulate (n, m, f) creates an n*m array, where the (i, j) element
    # is initialized to f (i, j).  Raises SIZE, if m or n is < 0.

    fun tabulate (rows, columns, f)
        =
	  if (columns < 0) or (rows < 0)
            then raise SIZE
	    else let
	      fun mkElems (i, j, elems) = if (j < columns)
		      then mkElems (i, j+1, f (i, j) . elems)
		    else let i = i+1
		      in
			if (i < rows)
			  then mkElems (i, 0, elems)
			  else rw_vector::from_list (reverse elems)
		      end
	      in
		A2 { nrows = rows, ncols = columns, elems = mkElems (0, 0, []) }
	      end

    # get (a, i, j) returns the (i, j) element. Raises SUBSCRIPT if i or j
    # is out of range.

    fun get (arr as A2 { elems, ... }, i, j) = rw_vector::get (elems, index (arr, i, j))

    # set (a, i, j, x) sets the (i, j) element to x. Raises SUBSCRIPT if
    # i or j is out of range.

    fun set (arr as A2 { elems, ... }, i, j, x)
        =
	rw_vector::set (elems, index (arr, i, j), x)

    #  return the size of the array 
    fun dimensions (A2 { nrows, ncols, ... } ) = (nrows, ncols)

    #  project a column of the array. 
    fun column (arr as A2 { elems, nrows, ncols, ... }, j) = let
	  k = index (arr, 0, j)
	  in
	    rw_vector::tabulate (nrows, fn n => rw_vector::get (elems, k+(n*ncols)))
	  end

    #  project a row of the array. 
    fun row (arr as A2 { elems, ncols, ... }, i) = let
	  k = index (arr, i, 0)
	  in
	    rw_vector::tabulate (ncols, fn n => rw_vector::get (elems, k+n))
	  end

} #  Matrix 

package rw_matrix = matrix


## COPYRIGHT (c) 1993 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
