## stamp.api 
##  Re-written by Matthias Blume (3/2000) 

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



api Stamp {

    Generator;
    Stamp;

    Key = Stamp;				# To match api Key 

    # For global stamps:
    #
    Picklehash
        =
        picklehash::Picklehash;			# picklehash	is from   src/lib/compiler/front/basics/mlcomp/picklehash.pkg



    eq:       (Stamp, Stamp) -> Bool;
    compare:  (Stamp, Stamp) -> Order; 		# Instead of "cmp" (Key) 

    new_generator:  Void -> Generator;
    fresh:          Generator -> Stamp;


    #  Make a new "special" Stamp (for things in primitives_symbol_table). 
    #
    special:  String -> Stamp;


    # Make a "global" stamp (i.e., one that comes from a different
    # compilation unit). Used only by the unpickler.
    #
    global:   { picklehash:  Picklehash,
                count:       Int
              }
              ->
              Stamp;


    # Case analysis on the abstract type with
    # built-in alpha-conversion for fresh stamps.
    # Used by the pickler.
    #
    Converter;

    new_converter:  Void -> Converter;

    case':  Converter
            ->
            Stamp
            ->
            { fresh:    Int -> X,	#  Already alpha-converted 
	      special:  String -> X,
	      global:   { picklehash: Picklehash,
			  count:      Int
			}
			->
                        X
	    }
            ->
            X;


    # Quick test for freshness:
    #
    is_fresh:  Stamp -> Bool;

    # Debugging: 
    #
    to_string:        Stamp -> String;
    to_short_string:  Stamp -> String;
};


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
