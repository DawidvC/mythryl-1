## module-dependencies-summary-io.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



# Reading and writing module_dependencies_summarys to module_dependencies_summary files.
# Module_Dependencies_Summarys provide a quick summary of a file,
# often saving us from generating a full parsetree.
# Or that's the idea, anyhow.
#
# Our runtime calls are from (only)
#
#     src/app/make7/o7/bare-o7.pkg



api Module_Dependencies_Summary_Io {

     read:   (/*filename:*/String, time_stamp::Time_Stamp) -> Null_Or( module_dependencies_summary::Decl );
     write:  (/*filename:*/String, module_dependencies_summary::Decl, time_stamp::Time_Stamp) -> Void;
};


package module_dependencies_summary_io: Module_Dependencies_Summary_Io {			# Module_Dependencies_Summary_Io	is from   src/app/make7/o7/module-dependencies-summary-io.pkg

    package sk =  module_dependencies_summary;				# module_dependencies_summary		is from   src/app/make7/o7/module-dependencies-summary.pkg
    package ss =  symbol_set;				# symbol_set		is from   src/app/make7/util/symbolset.pkg
    package s  =  symbol;				# symbol		is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
    package sp =  symbol_path;				# symbol_path		is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
    package pu =  pickle_utilities;			# pickle_utilities	is from   src/lib/compiler/src/library/pickle-utilities.pkg
    package uu =  unpickle_utilities;			# unpickle_utilities	is from   src/lib/compiler/src/library/unpickle-utilities.pkg

    package psym_pid
        =
        pickle_symbol_or_picklehash;			# pickle_symbol_or_picklehash	is from   src/lib/compiler/front/semantic/pickle/pickle-symbol-or-picklehash.pkg

    infix val 40  @@@ ;

    exception FORMAT = uu::FORMAT;

    s2b =  byte::string_to_bytes;			# byte			is from   src/lib/std/src/byte.pkg
    b2s =  byte::bytes_to_string;
    b2c =  byte::byte_to_char;

    version = "Module_Dependencies_Summary 5\n";


    fun makeset l
        =
        ss::add_list (ss::empty, l);


    fun read_line stream
        =
	loop []
        where

            fun finish resultlist
                =
                string::implode  (reverse  resultlist);


	    fun loop resultlist
                =
		case (null_or::map  b2c  (binary_io::read_one  stream))
		  
		     NULL     =>  finish ('\n' ! resultlist);
		     THE '\n' =>  finish ('\n' ! resultlist);
		     THE c    =>  loop (c ! resultlist);
                esac;
	end;


    fun write_decl (s, d)
        =
        {
            my (ppp, ddd, mmm)
                =
                (1, 2, 3);

	    symbol =  psym_pid::pickle_symbol;
							# psym_pid	is from   x
	    list = pu::pickle_list;

	    my (@@@) = (pu::(@@@)) ppp;


	    fun path (sp::SYMBOL_PATH p)
                =
                "p" @@@ [list symbol p];


	    fun decl arg
                =
		d arg
                where 

                    my (@@@) = (pu::(@@@)) ddd;

		    fun d (sk::BIND (name, def)) =>  "a" @@@ [symbol name, mod_expression def];
			d (sk::LOCAL (x, y))     =>  "b" @@@ [decl x, decl y];
			d (sk::PAR l)            =>  "c" @@@ [list decl l];
			d (sk::SEQ l)            =>  "d" @@@ [list decl l];
			d (sk::OPEN d)           =>  "e" @@@ [mod_expression d];
			d (sk::REF s)            =>  "f" @@@ [list symbol (ss::vals_list s)];
                    end;
		
		end

	    also
	    fun mod_expression arg
                =
		m arg
                where 

                    my (@@@) = (pu::(@@@)) mmm;

		    fun m (sk::VARIABLE p)    =>  "g" @@@ [path p];
			m (sk::DECL d)        =>  "h" @@@ [list decl d];
			m (sk::LET (d, e))    =>  "i" @@@ [list decl d, mod_expression e];
			m (sk::IGN1 (e1, e2)) =>  "j" @@@ [mod_expression e1, mod_expression e2];
                    end;
		end;

	    pickle = s2b (pu::pickle () (decl d));
	
	    binary_io::write (s, byte::string_to_bytes version);
	    binary_io::write (s, pickle);
	};
								# binary_io	is from   src/lib/std/src/unix/posix-binary-io.pkg

    fun read_decl s
        =
        {   first_line =  read_line s;

	    session =  uu::make_session (uu::string_getter (b2s (binary_io::read_all s)));

	    string =  uu::read_string session;
	    symbol =  unpickle_symbol_picklehash::read_symbol (session, string);

	    fun list m r
                =
                uu::read_list session m r;

	    fun share m f
                =
                uu::share session m f;

	    path_m        =  uu::make_map ();
	    symbol_list_m =  uu::make_map ();
	    decl_m        =  uu::make_map ();
	    decl_list_m   =  uu::make_map ();
	    mod_exp_m     =  uu::make_map ();

	    symbollist
                =
                list  symbol_list_m  symbol;

	    fun path ()
                =
                {   fun p 'p' =>  sp::SYMBOL_PATH (symbollist ());
		        p _   =>  raise exception FORMAT;
                    end;
		
		    share  path_m  p;
		};

	    fun decl ()
                =
                {   fun d 'a' =>  sk::BIND  (symbol (), mod_expression ());
			d 'b' =>  sk::LOCAL (decl (), decl ());
			d 'c' =>  sk::PAR   (decllist ());
			d 'd' =>  sk::SEQ   (decllist ());
			d 'e' =>  sk::OPEN  (mod_expression ());
			d 'f' =>  sk::REF   (makeset (symbollist ()));
			d _   =>  raise exception FORMAT;
		    end;
		
		    share  decl_m  d;
		}

	    also
	    fun decllist ()
                =
                list  decl_list_m  decl  ()

	    also
	    fun mod_expression ()
                =
		share  mod_exp_m  m
                where 

                    fun m 'g' =>   sk::VARIABLE  (path ());
		        m 'h' =>   sk::DECL  (decllist ());
		        m 'i' =>   sk::LET   (decllist (),      mod_expression ());
		        m 'j' =>   sk::IGN1  (mod_expression (), mod_expression ());

		        m _   =>   raise exception FORMAT;
                    end;
		end;
	
	    if   (first_line == version)
                
                 decl ();
            else
                 raise exception FORMAT;
            fi;
	};


    fun read (s, timestamp)
        =
	if  (time_stamp::needs_update
                 {
                   target => time_stamp::last_file_modification_time  s,
                   source => timestamp
                 }
        )
	     NULL;
	else
	     THE (
                 safely::do {
                   open_it  =>  .{ binary_io::open_for_read s; },
		   close_it =>  binary_io::close_input,
		   cleanup  =>  fn _ = ()
                 }
		 read_decl
             )
	     except
                 _ =  NULL;
        fi;

# XXX BUGGO DELETEME
fun abbreviate (full_pathname: String)
=
{ root = "/pub/home/cynbe/src/mythryl/mythryl7/mythryl7.110.58/mythryl7.110.58";

if   (string::is_prefix  root  full_pathname)
    
 "$ROOT"
 + 
 string::extract (full_pathname, string::length root, NULL);
else
 full_pathname;
fi;
};
						# time_stamp	is from   src/app/make7/paths/timestamp.pkg
						# safely	is from   src/lib/std/safely.pkg
						# binary_io	is from   src/lib/std/src/unix/posix-binary-io.pkg
						# winix		is from   src/lib/std/winix.pkg
						# file		is from   src/lib/std/src/unix/file.pkg
						# autodir	is from   src/app/make7/util/autodir.pkg

    fun make_temporary_filename  filename
	=
        {   # Voice of Experience: During a parallel compile,
	    # multiple versions of the compiler may be writing
            # the same module_dependencies_summary file at the same time, which
            # can result in a crash trying to set the timestamp
            # (below).
            #
            # To avoid that, we create the module_dependencies_summary file under
            # a private temporary name, then set its timestamp,
            # and only then rename it to its final name -- that
            # being an atomic operation not subject to race
            # conditions:
	    #
            pid =  winix::process::get_process_id ();
            include sfprintf;
            pid =  sprintf' "%d" [ INT pid ];

            temporary_filename = filename + "." + pid + ".tmp";

	    temporary_filename;
        };

    fun write (filename, sk, timestamp)
        =
        {   temporary_filename
                =
                make_temporary_filename  filename;

            fun cleanup _
                =
		{   winix::file::remove_file  temporary_filename
                    except
                        _ = ();

		    file::say ["[writing ", temporary_filename, " failed]\n"];
                };
	
	    safely::do
		{
		  open_it  =>  .{ autodir::open_binary_output  temporary_filename; },
		  close_it =>  binary_io::close_output,
		  cleanup
		}
	       .{ write_decl (#stream, sk); };

	    time_stamp::set_last_file_modification_time  (temporary_filename, timestamp);

	    winix::file::rename_file
                {
                  from =>  temporary_filename,
                  to   =>  filename
                };
	};
};
