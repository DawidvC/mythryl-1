#
# This is the new interference graph used by the new register allocator.
# 
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


package register_allocation_graph

: (weak)  Register_Allocation_Graph						# Register_Allocation_Graph	is from   src/lib/compiler/lower/reg-alloc/ra-graph.api

{
    package c= cells_basis;							# cells_basis			is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    package bm= register_allocation_bitmatrix;					# register_allocation_bitmatrix	is from   src/lib/compiler/lower/reg-alloc/ra-bitmatrix.pkg

    Priority = Float;

    Program_Point = { block: Int, instruction: Int };

										# monomorphic_hash_table_g	is from   src/lib/src/monomorphic-hash-table-g.pkg
    package ppt_hash_table
        =
        monomorphic_hash_table_g (

	    Hash_Key = Program_Point;

	    fun hash_value { block, instruction }
                = 
		unt::(<<) (unt::from_int block, 0u7) + unt::from_int instruction;

	    fun same_key (x: Program_Point, y)
                =
                x == y;
	);

     Frame_Offset = Int;
     Logical_Spill_Id = Int;

     Spill_Loc
         = FRAME    Logical_Spill_Id
	 | MEM_REG  c::Cell; 

    package spill_loc_hash_table
        =
        monomorphic_hash_table_g ( 

	    Hash_Key = Spill_Loc;

	    fun hash_value (FRAME   i) => unt::from_int i;
	        hash_value (MEM_REG r) => c::hash_cell r;
            end;

	    fun same_key (FRAME i, FRAME j)   =>   i == j;
	        same_key (MEM_REG x, MEM_REG y) => c::same_color (x, y);
	        same_key _ => FALSE;
            end;
	);

     Cost = Float;

     Mode = Unt;

     Interference_Graph
	 = 
	 GRAPH
	   {
	     bit_matrix:     Ref( bm::Bit_Matrix ),
	     nodes:         int_hash_table::Hash_Table( Node ),
	     k:             Int,
	     first_pseudo_r:  Int,
	     dedicated:     Int -> Bool,
	     getreg:        { pref: List( Int ), stamp: Int, prohibitions: rw_vector::Rw_Vector( Int ) } -> Int,
	     getpair:       { pref: List( Int ), stamp: Int, prohibitions: rw_vector::Rw_Vector( Int ) } -> Int,
	     prohibitions:          rw_vector::Rw_Vector( Int ),
	     stamp:         Ref( Int ),

	    #  Info to undo a spill when an optimistic spill has occurred 
	     spill_flag:     Ref( Bool ),
	     spilled_regs:   int_hash_table::Hash_Table( Bool ),
	     trail:         Ref( Trail_Info ),

	     show_reg:       c::Cell -> String,
	     num_regs:       Int,
	     max_regs:       Void -> Int,

	     dead_copies:    Ref(  List(  c::Cell ) ),
	     copy_tmps:      Ref(  List(  Node ) ),
	     mem_moves:      Ref(  List(  Move ) ),
	     mem_regs:       Ref(  List(  Node ) ),

	     spill_loc:      Ref( Int ),
	     span:           Ref( Null_Or( int_hash_table::Hash_Table( Cost ) ) ),
	     mode:          Mode,
	     pseudo_count:   Ref( Int )
	   }

    also
    Move_Status
      = BRIGGS_MOVE
      | GEORGE_MOVE
      | COALESCED
      | CONSTRAINED
      | LOST
      | WORKLIST

    also
    Move
        = 
        MOVE_INT
          {
            src:  Node,				# Source register of move 
	    dst:  Node,				# Destination register of move 
	 #  kind: moveKind,			# What kind of move 
	    cost:  Cost,			# Cost 
	    status:  Ref( Move_Status ),	# Coalesced? 
	    hicount: Ref( Int )	        	# Neighbors of high degree 
	  }

    also
    Move_Kind
      = REG_TO_REG      # Register to register 
      | EVEN_TO_REG     # Even register in pair to register 
      | ODD_TO_REG      # Odd register in pair to register 
      | PAIR_TO_PAIR    # Register pair to register pair 
      | REG_TO_EVEN     # Register to even register in pair 
      | REG_TO_ODD      # Register to odd register in pair 

    also
    Node_Status
      = PSEUDO                #  pseudo register 
      | REMOVED               #  removed from the interference graph 
      | ALIASED  Node       #  Coalesced 
      | COLORED  Int        #  Colored 
      | MEMREG  (Int, c::Cell)#  register implemented in memory 
      | SPILLED		      #  spilled 
      | SPILL_LOC  Int      #  spilled at logical location 

    also
    Node
	= 
        NODE
          { number:   Int,			#  node number 
	    cell:     c::Cell,

	    movecnt:  Ref( Int ),		#  #moves this node is involved in 
	    movelist: Ref( List( Move ) ),	#  moves associated with this node 

	    degree:   Ref( Int ),		#  Current degree 
	    color:    Ref( Node_Status ),	#  status 

	    adj:      Ref( List( Node ) ),	#  Adjacency list 
	    pri:      Ref( Priority ),       	#  priority 

	    movecost: Ref( Cost ),      	#  move cost 
	 #  pair:     Bool,              	# register pair? 

	    defs:     Ref( List( Program_Point ) ),
	    uses:     Ref( List( Program_Point ) )
	  }

    also
    Trail_Info
      = END
      | UNDO  (Node, Ref( Move_Status ), Trail_Info);

    exception NODES;

    fun error msg = lowcode_error_message::error("NewRAGraph", msg);

    stamp_counter = REF 0;

    # Create a new bit_matrix 
    fun round_size size
        = 
        f (64, 0u6)
        where
            fun f (x, shift)
                =
	        if (x >= size)   (x, unt::(>>) (shift, 0u1));
	        else             f (x+x, shift+0u1);
                fi;
        end;

    max = unt::(<<) (0u1, unt::(>>) (unt::from_int unt::word_size, 0u1)); 

							    my _ =
    if (max < unt::(<<) (0u1, 0u15)) 
	error "word size too small";
    fi;

    fun new_bit_matrix { edges, max_regs }
	=
	bm::BIT_MATRIX { table, elems=>REF 0, edges }
        where
	    table
		=
		{   # if maxRegs < 1024 then
		    # let denseBytes  = (maxRegs * (maxRegs + 1) + 15) div 16
		    # in  BITMATRIX (rw_unt8_vector::rw_vector (denseBytes, 0u0))
		    # end 
		    # else

		    my (table_size, shift)
			=
			round_size edges;

		    if (unt::from_int max_regs < max)   bm::SMALL (REF (rw_vector::make_rw_vector (table_size,      [])), shift);
		    else                                bm::LARGE (REF (rw_vector::make_rw_vector (table_size, bm::NIL)), shift);
		    fi;
		};
	end;

    # Create a new interference graph:
    #
    fun new_graph
        { nodes, k, first_pseudo_r, dedicated, spill_loc,
	  getreg, getpair, show_reg, max_regs, num_regs, prohibitions,
	  mem_regs, mode
        }
	=
	{   # lower triangular bitmatrix primitives 
	    # NOTE: The average ratio of E/N is about 16 
	    #
	    bit_matrix
		=
                new_bit_matrix { edges=>num_regs * 16, max_regs=>max_regs() };

	    #  Make memory register nodes:
	    # 
	    fun make_mem_regs []
                    =>
                    [];

		make_mem_regs (cells)
		    => 
		    loop (cells, [])
                    where
		        add = int_hash_table::set nodes;

			fun loop ([], ns)
                                =>
                                ns;

			    loop (cell ! cells, ns)
				=> 
				{   id = c::register_id cell;

				    node = NODE { number=>id,
						  pri=>REF 0.0, adj=>REF [], degree=>REF 0, movecnt=>REF 0,
						  color=>REF (MEMREG (id, cell)), 
						  defs=>REF [], uses=>REF [],
						  movecost=>REF 0.0, movelist=>REF [], cell
                                                };

				    add (id, node);

                                    loop (cells, node ! ns);
				};
			end;
		    end;
	    end; 

	    mem_regs = make_mem_regs mem_regs;

	    if (*stamp_counter > 10000000)
		 stamp_counter := 0;
	    fi;

	    GRAPH { bit_matrix    => REF bit_matrix,
		    nodes,
		    k,
		    first_pseudo_r,
		    dedicated,
		    getreg,
		    getpair,
		    prohibitions,
		    stamp        => stamp_counter,
		    spill_flag    => REF FALSE,
		    spilled_regs  => int_hash_table::make_table (2, NODES),
		    trail        => REF END,
		    show_reg      => fn _ = raise exception MATCH,
		    num_regs,
		    max_regs,
		    dead_copies   => REF [],
		    copy_tmps     => REF [],
		    mem_moves     => REF [],
		    mem_regs      => REF mem_regs,
		    spill_loc,
		    span         => REF NULL,
		    mode,
		    pseudo_count  => REF 0
		  };
	};				# fun new_graph

};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
