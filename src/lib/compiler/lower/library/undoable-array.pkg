#
#  Create a version of arrays that keeps track of its versions.
#
#  -- Allen Leung



###           "Computer science education can no more
###            make one a master programmer
###            than can studying brushes and pigment
###            make one a master painter."
###
###                          -- Eric S Raymond


generic package UndoableArray
      (package rw_vector:  Rw_Vector
       package Log:  TRANSACTION_LOG) : Rw_Vector =
pkg

   package a = rw_vector

   type    Vector( X ) = a::Vector( X )
   type Rw_Vector( X )=  a::Rw_Vector( X ) * Ref( Log::version )

   infix 9 sub

   maxLen = a::maxLen

   fun rw_vector (n, d) = (a::rw_vector (n, d), REF *Log::version)

   fun get (a, _) = a

   fun commit (a, v) = fn ver => v := ver
   fun rollback (a, v) = 
   let N = a::length a
       a' = a::rw_vector (N, a::sub (a, 0))
   in  a::copy { src=a, si=0, len=NULL, dst = a', di = 0 };
       fn ver => (a::copy { src=a', si=0, len=NULL, dst=a, di=0 }; v := ver)
   end

   fun get' (A as (a, v)) =
   let ver = *Log::version
   in  if *v != ver then 
	 (Log::add_chunk { commit   = commit A, 
	                  rollback = rollback A };
          v := ver
         )
       
       a
   end
	   
   fun length a = a::length (get a)
   fun a sub i = a::sub (get a, i) 
   fun update (a, i, e) = a::update (get' a, i, e)
   fun extract (a, i, j) = a::extract (get a, i, j)
   fun copy { src, si, len, dst, di } =
       a::copy { src=get src, si=si, len=len, dst=get' dst, di=di }
   fun copyVec { src, si, len, dst, di } = 
       a::copyVec { src = src, si = si, len = len, dst = get' dst, di = di }
   fun tabulate (n, f) = (a::tabulate (n, f), REF(*Log::version))
   fun from_list l = (a::from_list l, REF(*Log::version))
   fun apply f a = a::apply f (get a)
   fun fold_left f u a = a::fold_left f u (get a)
   fun fold_right f u a = a::fold_right f u (get a)
   fun modify f a = a::modify f (get' a)
   fun keyed_apply f (a, i, j) = a::keyed_apply f (get a, i, j)
   fun keyed_fold_left f u (a, i, j) = a::keyed_fold_left f u (get a, i, j)
   fun keyed_fold_right f u (a, i, j) = a::keyed_fold_right f u (get a, i, j)
   fun modifyi f (a, i, j) = a::modifyi f (get' a, i, j)

end

