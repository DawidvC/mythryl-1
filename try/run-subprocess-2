#!/usr/bin/mythryl

# A simple example of spawning a subprocess
# and communicating with it via pipes.

stipulate

    include when;

herein

    lines_to_do   = 1;

    lines_written = REF 0;
    lines_read    = REF 0;
							# spawn		is from   src/lib/std/src/unix/spawn.pkg
							# string	is from   src/lib/std/string.pkg
							# file		is from   src/lib/std/src/unix/posix-file.pkg
							# file-generic	is from   src/lib/std/src/io/text-io-g.pkg
    fun run_subprocess ()
	= 
	{
print "run_subprocess/AAA...\n";
	    my { from_stream, to_stream, ... }
		=
		spawn::spawn ("/bin/sh", []);

            read_request
                =
                [   stream_is_read_ready   from_stream  .{

printf "run_subprocess / read_ready /TOP\n";
                        result = file::read  from_stream;

print ("run_subprocess / read_ready / read '" + result + "'\n");
			lines_read :=   *lines_read + 1;

			if  (*lines_read == lines_to_do)

			     print "Done! Exit(0)ing.\n";
			     exit 0;
			fi; 
		    }
                ];

	    write_request
                =
		[   stream_is_write_ready  to_stream  .{ 

print "run_subprocess / write_ready /TOP\n";
			if   (*lines_written < lines_to_do)

print "run_subprocess / write_ready: WROTE ECHO COMMAND TO to_stream\n";
			     file::write (to_stream, "echo 'xyzzy'\n");
			     file::flush  to_stream;

			     lines_written :=   *lines_written + 1;
			fi;
		    }
		];

print "run_subprocess/BBB...\n";
            for (i = 0; i < 20; ++i) {
printf "\n\n\n====================================\nrun_subprocess/LUP: *lines_read d=%d  lines_written d=%d ...\n" *lines_read *lines_written;
		io_request
		    =
		    if  (*lines_written < lines_to_do)

			 [ TIMEOUT_SECS 1.0 ] @ read_request @ write_request;
		    else
			 [ TIMEOUT_SECS 1.0 ] @ read_request;
		    fi; 

		when io_request;
	    };
print "run_subprocess/ZZZ...\n";
	};

print "About to invoke run_subprocess ()...\n";
    run_subprocess ();
print "Back from invoking run_subprocess ()...\n";
end;
