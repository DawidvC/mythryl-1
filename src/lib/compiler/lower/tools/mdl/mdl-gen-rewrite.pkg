
# Generate the <architecture>Rewrite generic.
# which performs register renaming.



###                     "God exists since mathematics is consistent,
###                      and the Devil exists since we cannot prove it."
###
###                                             -- Andre Weil



generic package MDLGenRewrite (RTLComp:  Mdl_Rtl_Comp) : Mdl_Gen_Module2 =
pkg

   package RTLComp = RTLComp
   package Comp    = RTLComp::Comp
   package raw_syntax     = Comp::raw_syntax
   package Dictionary     = Comp::Dictionary
   package Trans   = Comp::Trans
   package rtl     = RTLComp::RTL
   package t       = RTL::T
   package c       = cells_basis
   package LowCoded  = RTLComp::lowcode_types

   use raw_syntax Comp::Util Comp::error

   #  Change these definitions if the cell type has changed 
   fun howToRename cellkind = 
      @@@["fun rename r = if regmap r == rs then rt else r",
        "fun renamecellset cellset =",
        "    cells_basis::CellSet::map C."$c::cellkindToString cellkind$" rename cellset"
       ]

   #  Main function 
   fun gen compiled_rtls =
   let md      = RTLComp::md compiled_rtls

        #  name of the package/api 
       strName = Comp::strname md "Rewrite"  
       sigName = "Rewrite_Instructions"

       #  The instructions 
       instructions = Comp::instructions md

       #  The Instruction dictionary 
       dictionary = Dictionary::lookupPackage (Comp::dictionary md) (IDENT([], "Instruction"))

       #  Arguments to the instruction generic 
       args =
           ["Instr:  "$Comp::signame md "INSTR"
           ]

       enum defUse = DEF | USE


       # Make a rewrite function of type:
       #   regmap * instruction * fromReg * toReg -> instruction


       fun mkFun (funName, rwOpnd, cellKind, defUse) =
       let fun mkRewriteBody { instruction, rtl, const } =
           let fun apply (f, x) = THE (APPLY (f, ID x))
               fun rewrite (x, type, T.@@@(_, c, _)) = 
                     if c == cellKind then apply("rename", x) else NULL
                 | rewrite (x, type, t::ARG(_, REF (rep as t::REP k), _)) = 
                     if LowCoded::isConst rep then NULL 
                     else apply("rename"$k, x)
                 | rewrite (x, type, _) = fail("bad argument "$x)
               fun nonRtlArg _ = NULL
               fun rtlArg (name, type, expression, RTL::IN _) = 
                    if defUse == USE then rewrite (name, type, expression) else NULL
                 | rtlArg (name, type, expression, RTL::OUT _) =
                    if defUse == DEF then rewrite (name, type, expression) else NULL
                 | rtlArg (name, type, expression, RTL::IO _) = 
                    rewrite (name, type, expression)
               expression = RTLComp::mapInstr { instruction=instr,
                                          rtl=rtl,
                                          nonRtlArg=nonRtlArg,
                                          rtlArg=rtlArg }
           in  { expression=exp, casePats=[] }
           end
           decls = 
               [@@@["fun rewriteoperand operand = "$rwOpnd$"(regmap, rs, rt, operand)"
                 ],
                howToRename cellKind,
                RTLComp::simpleErrorHandler funName
               ]
       in  RTLComp::mkQuery compiled_rtls
             { name          = funName,
              namedArguments= FALSE,
              args          = [["regmap", "instruction", "rs", "rt"]],
              decls         = decls,
              caseArgs      = [],
              body          = mkRewriteBody
             }
       end

       #  The generic 
       strBody = 
           [@@@ ["package i  = Instr",
               "package c  = i::C",
               ""
              ],
            Comp::errorHandler md "Rewrite",
            Comp::declOf md "Rewrite",
            mkFun("rewriteDef", "rewriteOperandDef", c::GP, DEF),
            mkFun("rewriteUse", "rewriteOperandUse", c::GP, USE),
            mkFun("frewriteDef", "frewriteOperandDef", c::FP, DEF),
            mkFun("frewriteUse", "frewriteOperandUse", c::FP, USE)
           ]

       Comp::require md "Rewrite"
                  { values=["rewriteOperandDef",
                           "rewriteOperandUse",
                           "frewriteOperandDef",
                           "frewriteOperandUse"],
                   types=[]
                  }

   in  Comp::codegen md "reg-alloc/Rewrite2"
         [Comp::make_generic md "Rewrite2" args sigName strBody
         ]
   end
end
