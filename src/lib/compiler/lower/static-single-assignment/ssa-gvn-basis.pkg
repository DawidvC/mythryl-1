/*
 * SCC based global value numbering algorithm (L Taylor Simpson's algorithm)
 * 
 * -- Allen Leung (leunga@cs.nyu.edu)
 */

generic package SSAGlobalValueNumbering
    (CF:  SSA_CONSTANT_FOLDING) : SSA_GLOBAL_VALUE_NUMBERING =
pkg

   package ssa  = cf::SSA
   package cf   = CF
   package sp   = SSA::SP
   package control_flow_graph  = SSA::control_flow_graph
   package dom  = SSA::Dom
   package i    = SSA::I
   package rtl  = SSA::RTL
   package t    = RTL::T
   package g    = graph
   package a    = rw_vector
   package h    = hash_table

   fun error msg = lowcode_error_message::error("SSAGlobalValueNumbering", msg) 

   top = cf::top

   dump = LowCodeControl::getFlag "ssa-dump-value-numbers"
   /*
    * SCC based value numbering/constant folding
    */
   fun computeValueNumbers (SSA as g::GRAPH ssa) =
   let my CFG as g::GRAPH cfg = SSA::cfg SSA
       my Dom as g::GRAPH dom = SSA::dom SSA
       my { sources, phis, ops, sinks } = SSA::nodes SSA
       N = ssa.capacity ()   #  number of instructions 
       M = cfg.capacity ()   #  Control flow graph 
       V = SSA::maxVariable SSA     #  number of variables 
       defsTable    = SSA::defsTable SSA
       usesTable    = SSA::usesTable SSA
       rtlTable     = SSA::rtlTable SSA
       blockTable   = SSA::blockTable SSA
       defSiteTable = SSA::defSiteTable SSA
       showOp     = SSA::showOp SSA
       showVal    = SSA::showVal SSA

         /* 
          * Table mapping variables -> value numbers 
          */
       VN = a::rw_vector (V, cf::top) #  value numbers 
       DomN = a::rw_vector (N,-1) #  Dominator numbers 
       visited = bit_set::create M
       fun walk (b, n) =
           let fun number ([], n) = n
                 | number (i . ops, n) = 
                      (a::update (DomN, i, n); number (ops, n+1))
               n = number (a::sub (sources, b), n)
               n = number (a::sub (phis, b), n)
               n = number (a::sub (ops, b), n)
               n = number (a::sub (sinks, b), n)
               fun walkSucc([], n) = n
                 | walkSucc((_, b', _) . es, n) = walkSucc (es, walk (b', n))
           in  walkSucc (dom.out_edges b, n) end

       walk (hd (dom.entries ()), 0)

       exception NOT_FOUND
       validTable       = cf::hashTable (V, NOT_FOUND)
       optimisticTable  = cf::hashTable (V, NOT_FOUND)
       validLookup      = h::lookup validTable
       validInsert      = h::set validTable
       optimisticLookup = h::lookup optimisticTable
       optimisticInsert = h::set optimisticTable

       fun bad (t::PHI _, operands) = list::all (fn r => r = top) operands
         | bad(_, operands) = list::exists (fn r => r = top) operands

       fun check (e, operands) = 
          (if bad (e, operands) then
              print("Bad rtl: "$RTL::rtlToString e$" " $
                    string::cat (map (fn r => int::to_string r$" ") operands)
                    + "\n")
            
           (e, operands))

        #  lookup value number; create new vn if not found 
       validSearch = cf::constantFolding SSA 
             (fn (e, operands, p, t) => 
                 validLookup (e, operands, p) except NOT_FOUND =>
                     (validInsert((e, operands, p), t); t))
                     
       optimisticSearch = cf::constantFolding SSA 
             (fn (e, operands, p, t) =>
                 optimisticLookup (e, operands, p) except NOT_FOUND =>
                    (optimisticInsert((e, operands, p), t); t))
  
       fun dumpSCC ops = 
       let fun printVN (i, rtl) = 
           let fun pr (t) = 
               let vn = a::sub (VN, t)
               in  if vn != t then print(" VN=" + showVal vn + "\n") else ()
               end
           in  print("\t(" + int::to_string (a::sub (DomN, i)) + ") " + showOp i);
               case a::sub (defsTable, i) of
                 [t] => pr t
               |  _ => ();
               print "\n"
           end
       in  print "SCC=\n"; 
           apply printVN ops
       end

       fun dumpVN() = 
       let fun pr (r, vn) =
               if vn > top and vn != r then 
               let i = a::sub (defSiteTable, r)
               in  print("VN[" + showVal r + "] = " + showVal vn + " " + showOp i + "\n")
               end
               else ()
       in  a::keyed_apply pr (VN, 0, NULL)
       end
 
         /* 
          * compute the fixpoint of an scc 
          */ 
       fun unique ts = apply (fn t => a::update (VN, t, t)) ts

       fun isVolatile r = list::exists (fn r' => r' = r) sp::volatile

       zeroR = case i::C.zeroReg i::C.GP of
                     THE zeroR => zeroR
                   | NULL => cf::top 

       fun initSource (t, t') = 
       let fun init (t . ts, t' . ts') = 
               (a::update (VN, t,
                 if t == zeroR then cf::zero
                 else if isVolatile t' then cf::volatile 
                 else t); init (ts, ts'))
             | init _ = ()
       in  init (t, t') end

       fun processSCC (scc, ()) =
       let fun init t = a::update (VN, t, top)
           fun inits [] = ()
             | inits (t . ts) = (init t; inits ts)
           fun initialize ([], ops) = ops
             | initialize (i . is, ops) =
               let i' = a::sub (rtlTable, i)
                   t = a::sub (defsTable, i)
               in  case i' of
                      t::SOURCE { liveIn, ... } => initSource (t, liveIn) 
                   |  t::SINK _ => ()
                   |  t::COPY_INTS _ => inits t
                   |  t::PHI _ => inits t
                   |   _ => inits t;
                   initialize (is, (i, i') . ops)
               end

           ops = initialize (scc,[])
           fun byDomN((i, _), (j, _)) = a::sub (DomN, i) > a::sub (DomN, j)
           ops = list_mergesort::sort byDomN ops

           fun loop ([], get, more) = more
             | loop((_, t::SOURCE _) . ops, get, more) = loop (ops, get, more)
             | loop((_, t::SINK _) . ops, get, more) = loop (ops, get, more)
             | loop((i, t::COPY_INTS _) . ops, get, more) = 
                 loop (ops, get,
                    processCopy (a::sub (defsTable, i), a::sub (usesTable, i), more))
             | loop((i, e) . ops, get, more) = 
                  loop (ops, get,
                     process (get, e, a::sub (defsTable, i), a::sub (usesTable, i), more))

           and compute_vn [] = []
             | compute_vn (r . rs) = 
                 (if r < 0 then r else a::sub (VN, r)) . compute_vn rs

           and processOne (get, e, t, vns, p, changed) = 
               let n = get (e, vns, p, t)
               in  /* if RTL::isConditionalBranch e then
                      print (RTL::rtlToString e + " vn=" + int::to_string n + "\n")
                    */
                   if a::sub (VN, t) == n then changed
                   else (a::update (VN, t, n); TRUE)
               end
 
           and process (get, e, ts, ss, changed) =
               let vns = compute_vn ss
                   fun processIth([], p, changed) = changed
                     | processIth (t . ts, p, changed) = 
                       processIth (ts, p+1, processOne (get, e, t, vns, p, changed))
               in  processIth (ts, 0, changed)
               end

           and processCopy (t, s, changed) =
               let vn = map (fn r => a::sub (VN, r)) s
                   fun update (t . ts, vn . vns, changed) =
                       if a::sub (VN, t) == vn then update (ts, vns, changed)
                       else (a::update (VN, t, vn); update (ts, vns, TRUE))
                     | update(_, _, changed) = changed
               in  update (t, vn, changed) end

       in  case ops of
             [i] => (loop (ops, validSearch, FALSE); /* dumpSCC ops; */ ())
           | _   => let fun iterate count =
                            if loop (ops, optimisticSearch, FALSE) then
                               iterate (count+1)
                            else count
                        count = iterate 1
                    in  /* dumpSCC ops;
                        print("[" + int::to_string (length ops) + ":"  + 
                                  int::to_string (count) + "]"); */
                        loop (ops, validSearch, FALSE); ()
                    end
       end

       /*
        * Initialize all value numbers
        */
       fun initializeValueNumbers() =
       let ENTRY = hd (dom.entries ())
           fun init s = 
               let my t::SOURCE { block, ... } = a::sub (rtlTable, s)
                   t = a::sub (defsTable, s)
               in  unique t; 
                   if block == ENTRY then apply initEdge (ssa.out_edges s) else ()
               end
           and initEdge(_, _, r) = a::update (VN, r, r)
       in  apply init (ssa.entries ());
           case i::c::zeroReg i::c::GP of
             THE zeroR => a::update (VN, zeroR, cf::zero) 
           | NULL => ()
       end
          
   in  initializeValueNumbers();
       graph_strongly_connected_components::scc (reversed_graph_view::rev_view SSA) processSCC ();
       if *dump then dumpVN() 
       VN
   end

end
