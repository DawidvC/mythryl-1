## filemanager.pkg
## (C) 1999, Bremen Institute for Safe Systems, Universitaet Bremen
## Author: ludi



# ***************************************************************************
# A simple filemanager / generate_gui_g example
# **************************************************************************


local
    use tk winix::file

                                                                                my
    statusLabelID = make_widget_id()
                                                                                my
    SHOW_HIDDEN       = REF FALSE                                               my
    SORT_NAMES        = REF TRUE                                                my
    CURRENT_DIRECTORY = REF ""

    fun ko (THE x) = x
      | ko NULL     = ""
in

    package FileManagerAppl:  SIMPLE_APPL_SIG
    =
    pkg

      #  Declarations 

      enum Part_Type = folder | file

      enum mode = none

      enum Part_Ilk = foldobj of Ref( String )
		    | fileobj of Ref( String )

      type New_Part = Part_Ilk * tk::Coordinate * tk::AnchorKind

      fun part_type (foldobj _) = folder
	| part_type (fileobj _) = file

      fun objlist_type ls
          =
	  let
	      fun all_of_type (x . xs) y = if part_type x == y then all_of_type xs y
							    else FALSE
		| all_of_type [] _      = TRUE
	  in
	      if all_of_type ls folder then THE folder
	      else if all_of_type ls file then THE file
		   else NULL
	  end

      fun is_constructed folder = TRUE
	| is_constructed file   = TRUE

      fun sel_name (foldobj name) = THE *name
	| sel_name (fileobj name) = THE *name

      fun modes folder = []
	| modes file   = []

      fun mode_name none = ""

      fun sel_mode (foldobj _) = none
	| sel_mode (fileobj _) = none

      fun set_mode (foldobj _, _) = ()
	| set_mode (fileobj _, _) = ()

      fun icon (folder, none) = 
	  icons::get_icon (get_lib_path()$"/tests+examples/filemanager", "fold.gif")
	| icon (file,   none) = 
	  icons::get_icon (get_lib_path()$"/tests+examples/filemanager", "file.gif")

      fun outline ob
          =
          FALSE


      #  Read directory 

      fun hidden x
          =
          (hd (explode x) = '.')

      fun files_to_list p
          =
	  let
	    fun bSort []       = []
	      | bSort l        =
	    let
	      fun bubble l   =
		case l of
		  NIL       => NIL
		| [x]       => [x]
		| (x . y . r) => if string.>(x, y) then y . bubble (x . r)
			       else x . bubble (y . r)
	      fun bSorth l i =
		case i of
		  0 => l
		| n => bSorth (bubble l) (n - 1)
	    in
	      bSorth l (length l - 1)
	    end

	    dirstream      = open_directory_stream (*CURRENT_DIRECTORY)

	    fun makelist _ ""  = []
	      | makelist p x   = if hidden x and not(*SHOW_HIDDEN)
				 then makelist p (read_directory_entry dirstream)
				 else if p x except NoAcc => FALSE
				      then x . makelist p (read_directory_entry dirstream)
				      else makelist p (read_directory_entry dirstream)
	    fun dirlist p      = if (*SORT_NAMES)
				 then bSort (makelist p (read_directory_entry dirstream))
				      before close_directory_stream dirstream
				 else makelist p (read_directory_entry dirstream)
				      before close_directory_stream dirstream
	  in
	    dirlist p
	  end

      fun content (x . xs) y (xp, yp) t =
	  (foldobj (REF x), (xp, yp), NorthWest)
	 . (if t<7 then content xs y (xp+70, yp) (t+1)
		   else content xs y (20, yp+70) 0)
	| content [] (x . xs) (xp, yp) t =
	   (fileobj (REF x), (xp, yp), NorthWest)
	 . (if t<7 then content [] xs (xp+70, yp) (t+1)
		   else content [] xs (20, yp+70) 0)
	| content [] [] _ _ = []

      fun init ()
           =
           content (files_to_list (is_directory))
			    (files_to_list (not o is_directory)) (20, 15) 0


      #  Standard operation "Show info" 

      local                                                                       my
	  DIR_TEMP          = REF ""                                              my
	  HID_TEMP          = REF FALSE

	  fun permissions x
	      =
	      let fun read x
		      =
		      if access (x, [MAY_READ]) then "Yes"
			       else "No"

		  fun write x
		      =
		      if access (x, [MAY_WRITE]) then "Yes"
				else "No"

		  fun exec x
		      =
		      if access (x, [MAY_EXECUTE]) then "Yes"
			       else "No"
	      in
		  "   Read: " + read x +
		  "        Write: " + write x +
		  "        Exec: " + exec x + "   \n"
		  except
		      NoPermission => "?"
	      end
      in
	  fun fileInfo (foldobj name)
	      =
	      let	                                                                my
		  infoWinID = make_window_id ()

		  fun dummy _
		      =
		      TRUE

		  fun prepare x
		      =
		    (change_directory x;
		     DIR_TEMP := *CURRENT_DIRECTORY;
		     CURRENT_DIRECTORY := current_directory();
		     HID_TEMP := *SHOW_HIDDEN;
		     SHOW_HIDDEN := TRUE)

		  fun after _
		      =
		    (CURRENT_DIRECTORY := *DIR_TEMP;
		     change_directory(*CURRENT_DIRECTORY);
		     SHOW_HIDDEN := *HID_TEMP)

		  fun countEntries x
		      =
		    (prepare x;
		     int::to_string (list::length (files_to_list dummy))
		     before after())

		  fun countFiles x
		      =
		    (prepare x;
		     int::to_string (list::length (files_to_list (not o is_directory)))
		     before after())

		  fun countFolders x
		      =
		    (prepare x;
		     int::to_string (list::length (files_to_list is_directory))
		     before after())

		  fun countHidden x
		      =
		    (prepare x;
		     int::to_string (list::length (files_to_list hidden))
		     before after())

										  my
		  labelText
		      = 
		      if access(*name, [MAY_READ, MAY_EXECUTE])
		      then countEntries (*name) + " Entries (" +
			   countHidden (*name) + " hidden):" +
			   "\n\nSubfolders: " + countFolders (*name) +
			   "        Files: " + countFiles (*name) +
			   "\n\n\nPermissions:\n\n" + permissions (*name)
		      else "Permissions:\n\n" + permissions (*name) +
			   "\n\nNo read/exec permission!\n" +
			   "No other information availlable.\n"

										  my
		  icon
		      =
		      CANVAS_ICON {
			  citemId  = make_canvas_item_id(),
			  coord    = (10, 8),
			  icon_variety = FileImage (get_lib_path() +
						"/icons/filemanager/foldIcon.gif",
						make_image_ID()),
			  traits  = [Anchor NorthWest],
			  event_callbacks = []
		      }

										  my
		  infoLabel
		      =
		      FRAME {
			  widget_id    = make_widget_id(),
			  subwidgets  = PACKED [FRAME { widget_id    = make_widget_id(),
				       subwidgets  = PACKED [CANVAS { widget_id      = make_widget_id(),
						  scrollbars = NOWHERE,
						  citems     = [icon],
						  packing_hints   = [PACK_AT LEFT],
						  traits    = [WIDTH 45, HEIGHT 35],
						  event_callbacks   = [] },
					  LABEL { widget_id    = make_widget_id(),
						 packing_hints = [PACK_AT LEFT],
						 traits  = [TEXT("Directory: " + *name)],
						 event_callbacks = [] } ],
				       packing_hints = [PACK_AT TOP],
				       traits  = [],
				       event_callbacks = [] },
				LABEL { widget_id    = make_widget_id(),
				       packing_hints = [PACK_AT BOTTOM],
				       traits  = [TEXT labelText],
				       event_callbacks = [] } ],
			     packing_hints = [],
			     traits  = [],
			     event_callbacks = [] }

		  fun close _
		      =
		      close_window infoWinID

		  closeButton
		      =
		    BUTTON { widget_id    = make_widget_id(),
			    packing_hints = [],
			    traits  = [TEXT "Close", CALLBACK close],
			    event_callbacks = [] }

		  infoWindow =
		    make_window { window_id    = infoWinID,
			      traits   = [WINDOW_TITLE("Folder info: " + *name)],
			      subwidgets  = PACKED [infoLabel, closeButton],
			      event_callbacks = [],
			      init     = null_callback }
	      in
		(add_trait statusLabelID [TEXT ""];
		 open_window infoWindow)
	      end
	    | fileInfo (fileobj name) =
	  let                                                                     my
	      infoWinID = make_window_id ()
										  my
	      icon
		  =
		  CANVAS_ICON {
		      citemId  = make_canvas_item_id(),
		      coord    = (10, 8),
		      icon_variety = FileImage (get_lib_path() +
					      "/icons/filemanager/fileIcon.gif",
					      make_image_ID()),
		      traits  = [Anchor NorthWest],
		      event_callbacks = []
	      }
										  my
	      labelText
		  =
		  "\nFilename: " + *name +
				"\n\n\nLength: " +
				int::to_string (file_size (*name)) +
				" bytes\n\n\nPermissions:\n\n" +
				permissions (*name)

										  my
	      infoLabel
		  =
		  FRAME {
		      widget_id    = make_widget_id (),
		      subwidgets  = PACKED [
				    FRAME { widget_id    = make_widget_id(),
					   subwidgets  = PACKED [CANVAS { widget_id      = make_widget_id(),
						      scrollbars = NOWHERE,
						      citems     = [icon],
						      packing_hints   = [PACK_AT LEFT],
						      traits    = [WIDTH 45, HEIGHT 35],
						      event_callbacks   = [] },
					      LABEL { widget_id    = make_widget_id(),
						     packing_hints = [PACK_AT LEFT],
						     traits  = [TEXT("Filename: " + *name)],
						     event_callbacks = [] } ],
					   packing_hints = [PACK_AT TOP],
					   traits  = [],
					   event_callbacks = [] },
				    LABEL { widget_id    = make_widget_id(),
					   packing_hints = [PACK_AT BOTTOM],
					   traits  = [TEXT labelText],
					   event_callbacks = [] } ],
			 packing_hints = [],
			 traits  = [],
			 event_callbacks = []
		    }

		fun close _
		    =
		    close_window infoWinID

										  my
		closeButton
		    =
		    BUTTON {
			widget_id    = make_widget_id(),
			packing_hints = [],
			traits  = [TEXT "Close", CALLBACK close],
			event_callbacks = []
		    }

										  my
		infoWindow
		    =
		    make_window {
			window_id    = infoWinID,
			traits   = [WINDOW_TITLE("File information: " + *name)],
			subwidgets  = PACKED [infoLabel, closeButton],
			event_callbacks = [],
			init     = null_callback
		    }
	  in
	      (   add_trait statusLabelID [TEXT ""];
		  open_window infoWindow
	      )
	  end
      end

										  my
      std_ops = [ (fileInfo, "File info") ]


      #  Rename objects (and files!) 

      fun rename ob cc
	  =
	  let                                                                     my
	      nameWinID   = make_window_id ()                                      my
	      nameEntryID = make_widget_id ()

	      fun name (fileobj nm) = *nm
		| name (foldobj nm) = *nm

	      fun set (fileobj nm)
		  =
		if   winix::process::system("mv " + *nm + " " + get_tcl_text nameEntryID)
		   = winix::process::success
		then nm := get_tcl_text nameEntryID
		else if access(*nm, [MAY_WRITE])
		     then add_trait statusLabelID [FOREGROUND Red,
						 TEXT "Rename: Permission denied!"]
		     else add_trait statusLabelID
				  [FOREGROUND Red,
				   TEXT "Rename failed: Illegal filename entered!"]
		| set (foldobj nm) =
		if   winix::process::system("mv " + *nm + " " + get_tcl_text nameEntryID)
		   = winix::process::success
		then nm := get_tcl_text nameEntryID
		else if access(*nm, [MAY_WRITE])
		     then add_trait statusLabelID [FOREGROUND Red,
						 TEXT "Rename: Permission denied!"]
		     else add_trait statusLabelID
				  [FOREGROUND Red,
				   TEXT "Rename failed: Illegal filename entered!"]

	      fun ok _
		  =
		  (   set ob;
		      close_window nameWinID;
		      cc (name ob)
		  )
										  my
	      nameEntry
		  =
		  FRAME {
		      widget_id    = make_widget_id(),
		      subwidgets  =
			    PACKED [LABEL { widget_id    = make_widget_id(),
					 packing_hints = [PACK_AT LEFT],
					 traits  = [TEXT "New name:"],
					 event_callbacks = [] },
				  TEXT_ENTRY { widget_id    = nameEntryID,
					 packing_hints = [PACK_AT LEFT],
					 traits  = [BACKGROUND WHITE, WIDTH 30],
					 event_callbacks = [EVENT_CALLBACK (KEY_PRESS "Return", ok)] } ],
		      packing_hints = [PadX 15, PadY 25],
		      traits  = [],
		      event_callbacks = []
		  }

	      fun canc _ = (close_window nameWinID;
			    cc (name ob))

	      buttons =
		FRAME { widget_id    = make_widget_id(),
		       subwidgets  =
			     PACKED [BUTTON { widget_id    = make_widget_id(),
					   packing_hints = [PACK_AT LEFT, PadX 5],
					   traits  = [TEXT "Ok", CALLBACK ok,
						       WIDTH 15],
					   event_callbacks =  [] },
				   BUTTON { widget_id    = make_widget_id(),
					   packing_hints = [PACK_AT LEFT, PadX 5],
					   traits  = [TEXT "Cancel", CALLBACK canc,
						       WIDTH 15],
					   event_callbacks = [] } ],
		       packing_hints = [PACK_AT BOTTOM],
		       traits  = [],
		       event_callbacks = [] }

	      fun init _ = insertTextEnd nameEntryID (name ob)

	      nameWin =
		make_window { window_id    = nameWinID,
			  traits   = [WINDOW_TITLE("Enter name: " + name ob)],
			  subwidgets  = PACKED [nameEntry, buttons],
			  event_callbacks = [],
			  init     = init }
	  in
	    (add_trait statusLabelID [TEXT ""];
	     if access (name ob, [MAY_WRITE])
	     then open_window nameWin
	     else add_trait statusLabelID [FOREGROUND Red,
					 TEXT "Rename: Permission denied!"])
	  end


      #  Delete objects (and files!) 

      fun delete ob =
	(add_trait statusLabelID [TEXT ""];
	 remove (ko (sel_name ob))
	 except NoAcc => add_trait statusLabelID
				 [FOREGROUND Red,
				  TEXT("Permission denied!\nDeleted the " +
				       "object, but not the file!")])

      fun mon_ops _ = []


      #  Copy files to folders 

      fun copy fold (f . files) =
	(if   winix::process::system("cp " + ko (sel_name (f)) + " " + fold)
	    = winix::process::success
	 then ()
	 else add_trait statusLabelID [FOREGROUND Red,
				     TEXT "Copy: Permission denied!"];
	 copy fold files)
	| copy _ []            = ()

      fun copyFile (ob1, coord, oblist, operation) =
	(add_trait statusLabelID [TEXT ""];
	 copy (ko (sel_name ob1)) oblist)

      fun bin_ops (folder, file) = THE copyFile
	| bin_ops _              = NULL


      #  Construction area: Permissions etc. 

      enum ca = none

      fun area_ops _ _ _ = ()

      local
	top =
	  FRAME { widget_id    = make_widget_id(),
		 subwidgets  = PACKED [ LABEL { widget_id    = make_widget_id(),
				    packing_hints = [PACK_AT LEFT, PadX 10],
				    traits  = [TEXT "User", WIDTH 20,
						BACKGROUND WHITE],
				    event_callbacks = [] },
			     LABEL { widget_id    = make_widget_id(),
				    packing_hints = [PACK_AT LEFT, PadX 10],
				    traits  = [TEXT "Group", WIDTH 20,
						BACKGROUND WHITE],
				    event_callbacks = [] },
			     LABEL { widget_id    = make_widget_id(),
				    packing_hints = [PACK_AT LEFT, PadX 10],
				    traits  = [TEXT "Others", WIDTH 20,
						BACKGROUND WHITE],
				    event_callbacks = [] } ],
		 packing_hints = [PadY 10],
		 traits  = [],
		 event_callbacks = [] }

	bframe1 =
	  FRAME { widget_id    = make_widget_id(),
		 subwidgets  =
		       PACKED [CHECK_BUTTON { widget_id    = make_widget_id(),
					  packing_hints = [PACK_AT LEFT],
					  traits  = [TEXT "Read", WIDTH 20,
						      Variable "ruser"],
					  event_callbacks = [] },
			     CHECK_BUTTON { widget_id    = make_widget_id(),
					  packing_hints = [PACK_AT LEFT],
					  traits  = [TEXT "Read", WIDTH 20,
						      Variable "rgroup"],
					  event_callbacks = [] },
			     CHECK_BUTTON { widget_id    = make_widget_id(),
					  packing_hints = [PACK_AT LEFT],
					  traits  = [TEXT "Read", WIDTH 20,
						      Variable "rothers"],
					  event_callbacks = [] } ],
		 packing_hints = [],
		 traits  = [],
		 event_callbacks = [] }

	bframe2 =
	  FRAME { widget_id    = make_widget_id(),
		 subwidgets  = PACKED [CHECK_BUTTON { widget_id    = make_widget_id(),
					  packing_hints = [PACK_AT LEFT],
					  traits  = [TEXT "Write", WIDTH 20,
						      Variable "wuser"],
					  event_callbacks = [] },
			     CHECK_BUTTON { widget_id    = make_widget_id(),
					  packing_hints = [PACK_AT LEFT],
					  traits  = [TEXT "Write", WIDTH 20,
						      Variable "wgroup"],
					  event_callbacks = [] },
			     CHECK_BUTTON { widget_id    = make_widget_id(),
					  packing_hints = [PACK_AT LEFT],
					  traits  = [TEXT "Write", WIDTH 20,
						      Variable "wothers"],
					  event_callbacks = [] } ],
		 packing_hints = [],
		 traits  = [],
		 event_callbacks = [] }

	bframe3 =
	  FRAME { widget_id    = make_widget_id(),
		 subwidgets  = PACKED [CHECK_BUTTON { widget_id    = make_widget_id(),
					  packing_hints = [PACK_AT LEFT],
					  traits  = [TEXT "Exec", WIDTH 20,
						      Variable "xuser"],
					  event_callbacks = [] },
			     CHECK_BUTTON { widget_id    = make_widget_id(),
					  packing_hints = [PACK_AT LEFT],
					  traits  = [TEXT "Exec", WIDTH 20,
						      Variable "xgroup"],
					  event_callbacks = [] },
			     CHECK_BUTTON { widget_id    = make_widget_id(),
					  packing_hints = [PACK_AT LEFT],
					  traits  = [TEXT "Exec", WIDTH 20,
						      Variable "xothers"],
					  event_callbacks = [] } ],
		 packing_hints = [],
		 traits  = [],
		 event_callbacks = [] }

	permWidget =
	  FRAME { widget_id    = make_widget_id(),
		 subwidgets  = PACKED [top, bframe1, bframe2, bframe3],
		 packing_hints = [],
		 traits  = [],
		 event_callbacks = [] }

	nameEntryID  = make_widget_id()
	userLabelID  = make_widget_id()
	groupLabelID = make_widget_id()

	dnameEntry =
	  FRAME { widget_id    = make_widget_id(),
		 subwidgets  = PACKED [ LABEL { widget_id    = make_widget_id(),
				    packing_hints = [PACK_AT LEFT],
				    traits  = [TEXT "Dirname: ", WIDTH 15],
				    event_callbacks = [] },
			     TEXT_ENTRY { widget_id    = nameEntryID,
				    packing_hints = [PACK_AT LEFT],
				    traits  = [BACKGROUND WHITE, WIDTH 30],
				    event_callbacks = [] } ],
		 packing_hints = [PadY 3],
		 traits  = [],
		 event_callbacks = [] }

	fnameEntry =
	  FRAME { widget_id    = make_widget_id(),
		 subwidgets  = PACKED [ LABEL { widget_id    = make_widget_id(),
				    packing_hints = [PACK_AT LEFT],
				    traits  = [TEXT "Filename: ", WIDTH 15],
				    event_callbacks = [] },
			     TEXT_ENTRY { widget_id    = nameEntryID,
				    packing_hints = [PACK_AT LEFT],
				    traits  = [BACKGROUND WHITE, WIDTH 30],
				    event_callbacks = [] } ],
		 packing_hints = [PadY 3],
		 traits  = [],
		 event_callbacks = [] }

	userLabel =
	  FRAME { widget_id    = make_widget_id(),
		 subwidgets  = PACKED [LABEL { widget_id    = make_widget_id(),
				    packing_hints = [PACK_AT LEFT],
				    traits  = [TEXT "User: ", WIDTH 15],
				    event_callbacks = [] },
			     LABEL { widget_id    = userLabelID,
				    packing_hints = [PACK_AT LEFT],
				    traits  = [RELIEF SUNKEN, WIDTH 30],
				    event_callbacks = [] } ],
		 packing_hints = [PadY 3],
		 traits  = [],
		 event_callbacks = [] }

	groupLabel =
	  FRAME { widget_id    = make_widget_id(),
		 subwidgets  = PACKED [LABEL { widget_id    = make_widget_id(),
				    packing_hints = [PACK_AT LEFT],
				    traits  = [TEXT "Group: ", WIDTH 15],
				    event_callbacks = [] },
			     LABEL { widget_id    = groupLabelID,
				    packing_hints = [PACK_AT LEFT],
				    traits  = [RELIEF SUNKEN, WIDTH 30],
				    event_callbacks = [] } ],
		 packing_hints = [PadY 3],
		 traits  = [],
		 event_callbacks = [] }

	fun permSet (perm, nm) =
	  posix::S.allSet
	    (perm, posix::st::mode (posix::stat nm))

	fun init nm id1 id2 id3 _ =
	let
	  st = posix::stat nm

	  user =
	    posix::password::name
	      (posix::getpwuid (posix::st::uid st))

	  group =
	    posix::Group::name
	      (posix::getgrgid (posix::st::gid st))
	in
	  (add_trait statusLabelID [TEXT ""];
	   insertTextEnd id1 nm;
	   add_trait id2 [TEXT user];
	   add_trait id3 [TEXT group];
	   if permSet (posix::S.irusr, nm)
	   then set_var_value "ruser" "1"
	   else set_var_value "ruser" "0";
	   if permSet (posix::S.iwusr, nm)
	   then set_var_value "wuser" "1"
	   else set_var_value "wuser" "0";
	   if permSet (posix::S.ixusr, nm)
	   then set_var_value "xuser" "1"
	   else set_var_value "xuser" "0";
	   if permSet (posix::S.irgrp, nm)
	   then set_var_value "rgroup" "1"
	   else set_var_value "rgroup" "0";
	   if permSet (posix::S.iwgrp, nm)
	   then set_var_value "wgroup" "1"
	   else set_var_value "wgroup" "0";
	   if permSet (posix::S.ixgrp, nm)
	   then set_var_value "xgroup" "1"
	   else set_var_value "xgroup" "0";
	   if permSet (posix::S.iroth, nm)
	   then set_var_value "rothers" "1"
	   else set_var_value "rothers" "0";
	   if permSet (posix::S.iwoth, nm)
	   then set_var_value "wothers" "1"
	   else set_var_value "wothers" "0";
	   if permSet (posix::S.ixoth, nm)
	   then set_var_value "xothers" "1"
	   else set_var_value "xothers" "0")
	end

	fun mode (var, md) = if get_tcl_var_value var == "1" then [md] else NIL

	fun modes _ =
	  list::cat(   mode("ruser", posix::S.irusr)
		      . mode("wuser", posix::S.iwusr)
		      . mode("xuser", posix::S.ixusr)
		      . mode("rgroup", posix::S.irgrp)
		      . mode("wgroup", posix::S.iwgrp)
		      . mode("xgroup", posix::S.ixgrp)
		      . mode("rothers", posix::S.iroth)
		      . mode("wothers", posix::S.iwoth)
		      . mode("xothers", posix::S.ixoth) . NIL)

	fun permChanges nm =
	  posix::chmod (nm, posix::S.flags (modes()))
	  except NoAcc => add_trait statusLabelID
				  [FOREGROUND Red,
				   TEXT "Write changes: Permission denied!"]
      in
	fun area_open (window, fileobj nm, cc) =
	let
	  fun canc cc _ = cc (fileobj nm)

	  fun close cc _ =
	    (if (get_tcl_text nameEntryID) == *nm
	     then ()
	     else (winix::process::system("mv " + *nm + " " +
				     (get_tcl_text nameEntryID));
		   nm := get_tcl_text nameEntryID);
	     permChanges (*nm);
	     cc (fileobj nm))

	  buttons =
	    FRAME { widget_id    = make_widget_id(),
		   subwidgets  = PACKED [BUTTON { widget_id    = make_widget_id(),
				       packing_hints = [PACK_AT RIGHT],
				       traits  = [TEXT "Write", WIDTH 15,
						   CALLBACK (close cc)],
				       event_callbacks = [] },
			       BUTTON { widget_id    = make_widget_id(),
				       packing_hints = [PACK_AT RIGHT],
				       traits  = [TEXT "Cancel", WIDTH 15,
						   CALLBACK (canc cc)],
				       event_callbacks = [] } ],
		   packing_hints = [PACK_AT BOTTOM],
		   traits  = [],
		   event_callbacks = [] }
	in
	  (none,
	   [fnameEntry, userLabel, groupLabel, permWidget, buttons],
	   init (*nm) nameEntryID userLabelID groupLabelID)
	end
	  | area_open (window, foldobj nm, cc) =
	let
	  fun canc cc _ = cc (foldobj nm)

	  fun close cc _ =
	    (if (get_tcl_text nameEntryID) == *nm
	     then ()
	     else (winix::process::system("mv " + *nm + " " +
				     (get_tcl_text nameEntryID));
		   nm := get_tcl_text nameEntryID);
	     permChanges (*nm);
	     cc (foldobj nm))

	  buttons =
	    FRAME { widget_id    = make_widget_id(),
		   subwidgets  = PACKED [BUTTON { widget_id    = make_widget_id(),
				       packing_hints = [PACK_AT RIGHT],
				       traits  = [TEXT "Write", WIDTH 15,
						   CALLBACK (close cc)],
				       event_callbacks = [] },
			       BUTTON { widget_id    = make_widget_id(),
				       packing_hints = [PACK_AT RIGHT],
				       traits  = [TEXT "Cancel", WIDTH 15,
						   CALLBACK (canc cc)],
				       event_callbacks = [] } ],
		   packing_hints = [PACK_AT BOTTOM],
		   traits  = [],
		   event_callbacks = [] }
	in
	  (none,
	   [dnameEntry, userLabel, groupLabel, permWidget, buttons],
	   init (*nm) nameEntryID userLabelID groupLabelID)
	end
      end

      area_init = null_callback

      type objectlist = List( Part_Ilk )

      package clipboard = clipboard_g (type obj = List( Part_Ilk ) )


      #  Configuration 

      package Conf =
      pkg
	width          = 550
	height         = 500
	caWidth        = 580
	caHeight       = 270
	caXY           = NULL
	fun caTitle nm     = "Details of " + nm
	iconNameWidth  = 50
	iconNameFont   = tk::SansSerif [tk::Small]
	background     = WHITE
	moveOpaque     = TRUE
	oneWindow      = FALSE
	fun trashcanIcon() = icons::get_icon (get_lib_path() + "/icons",
					   "trashcan.gif")
	trashcanCoord  = (width - 100, height - 100)
	delta          = 70
      end
    end


    package FileManager:  api                                                    my
			       go:  Void -> Void
			   end
      =
      pkg
	package SimpleGUI = generate_gui_g (package appl = FileManagerAppl)

										  my
	restart
	    =
	    REF (
		make_window {
		    window_id    = make_window_id (),
		    traits   = [],
		    subwidgets  = PACKED [],
		    event_callbacks = [],
		    init     = null_callback
		}
	    ) : Ref(  Window )

										  my
	mainWin
	    =
	    let                                                                   my
		mainWinID = make_window_id ()
										  my
		statusLabel
		    =
		    LABEL {
			widget_id       = statusLabelID,
			packing_hints   = [PACK_AT TOP, PadY 20],
			event_callbacks = [],

			traits  = [   WIDTH 60,
                                      HEIGHT 2,
                                      RELIEF SUNKEN,
				      TEXT "Welcome!"
                                  ]
		    }
										  my
		currentDirID
		    =
		    make_widget_id()

										  my
		currentDir
		    =
		    FRAME {
			widget_id    = make_widget_id(),
			subwidgets  = PACKED [ LABEL { widget_id    = make_widget_id(),
					   packing_hints = [PACK_AT LEFT],
					   traits  = [TEXT "Current directory:  "],
					   event_callbacks = [] },
				    LABEL { widget_id    = currentDirID,
					   packing_hints = [PACK_AT LEFT],
					   traits  = [RELIEF SUNKEN, WIDTH 50],
					   event_callbacks = [] } ],
			packing_hints = [PadY 20],
			traits  = [],
			event_callbacks = []
		    }

		fun quit _
		    =
		    close_window mainWinID

		fun opt _
		    =
		    (   close_window mainWinID;
			     start_tcl[(*restart)])
										  my
		buttons
		   =
		   FRAME {
		       widget_id    = make_widget_id(),
		       subwidgets  = PACKED [BUTTON { widget_id    = make_widget_id(),
					   packing_hints = [PACK_AT RIGHT],
					   traits  = [TEXT "Quit", WIDTH 15,
						       CALLBACK quit],
					   event_callbacks = [] },
				   BUTTON { widget_id    = make_widget_id(),
					   packing_hints = [PadY 20, PACK_AT RIGHT],
					   traits  = [TEXT "Options", WIDTH 15,
						       CALLBACK opt],
					   event_callbacks = [] } ],
		       packing_hints = [Fill X],
		       traits  = [],
		       event_callbacks = []
		    }

		fun init _
		    =
		    add_trait currentDirID [TEXT (*CURRENT_DIRECTORY)]
	    in
		make_window {
		   window_id    = mainWinID,
		   traits   = [WINDOW_TITLE "File management",
			       WIDE_HIGH_X_Y (THE (620, 710), NULL)],
		   subwidgets  = PACKED [statusLabel, SimpleGUI::main_wid mainWinID,
			       currentDir, buttons],
		   event_callbacks = [],
		   init     = fn() => (SimpleGUI::init
					 (SimpleGUI::initial_state());
				       init())
		}
	    end

										  my
	initWin
	    =
	    let                                                                   my
		initWinID = make_window_id ()
										  my
		dirEntryID = make_widget_id()                                      my
		errLabelID = make_widget_id()

		fun ok _
		    =
		    if access (get_tcl_text dirEntryID, [MAY_READ, MAY_EXECUTE])
		    then (change_directory (get_tcl_text dirEntryID)
			  except NotEx => ();
			  CURRENT_DIRECTORY := current_directory();
			  if get_tcl_var_value "show" == "1"
			  then SHOW_HIDDEN := TRUE
			  else SHOW_HIDDEN := FALSE;
			  if get_tcl_var_value "sort" == "1"
			  then SORT_NAMES := TRUE
			  else SORT_NAMES := FALSE;
			  close_window initWinID;
			  start_tcl[mainWin])
		    else if access (get_tcl_text dirEntryID, [])
			 then add_trait errLabelID [FOREGROUND Red,
						  TEXT "Permission denied!"]
			 else add_trait errLabelID [FOREGROUND Red,
						  TEXT "Folder does not exist!"]

										  my 
		dirEntry
		    =
		    FRAME {
			widget_id    = make_widget_id(),
			subwidgets  = PACKED [ LABEL { widget_id    = make_widget_id(),
					   packing_hints = [PACK_AT LEFT],
					   traits  = [TEXT "Directory:"],
					   event_callbacks = [] },
				    TEXT_ENTRY { widget_id    = dirEntryID,
					   packing_hints = [PACK_AT LEFT],
					   traits  = [BACKGROUND WHITE],
					   event_callbacks = [EVENT_CALLBACK (KEY_PRESS "Return",
							      ok)] } ],
			packing_hints = [PadY 12],
			traits  = [],
			event_callbacks = []
		    }
										  my
		chkbuttons
		    =
		    FRAME {
			widget_id    = make_widget_id(),
			subwidgets  = PACKED [CHECK_BUTTON { widget_id    = make_widget_id(),
						 packing_hints = [PACK_AT LEFT],
						 traits  = [TEXT "Sort files",
							     Variable "sort"],
						 event_callbacks = [] },
				    CHECK_BUTTON { widget_id    = make_widget_id(),
						 packing_hints = [PACK_AT LEFT],
						 traits  = [TEXT "Show hidden files",
							     Variable "show"],
						 event_callbacks = [] } ],
			packing_hints = [PadY 12],
			traits  = [],
			event_callbacks = []
		    }
										  my
		errLabel
		    =
		    LABEL {
			widget_id    = errLabelID,
			packing_hints = [PadY 12],
			traits  = [TEXT "Welcome!", RELIEF SUNKEN, WIDTH 25],
			event_callbacks = [] }

		fun quit _
		    =
		    close_window initWinID
										  my
		buttons
		    =
		    FRAME {
			widget_id    = make_widget_id(),
			subwidgets  = PACKED [BUTTON { widget_id    = make_widget_id(),
					    packing_hints = [PACK_AT LEFT, PadX 5],
					    traits  = [TEXT "Ok", CALLBACK ok,
							WIDTH 15],
					    event_callbacks = [] },
				    BUTTON { widget_id    = make_widget_id(),
					    packing_hints = [PACK_AT LEFT, PadX 5],
					    traits  = [TEXT "Quit", CALLBACK quit,
							WIDTH 15],
					    event_callbacks = [] } ],
			packing_hints = [PACK_AT BOTTOM],
			traits  = [],
			event_callbacks = []
		    }

		fun init ()
		    =
		  (insertTextEnd dirEntryID (*CURRENT_DIRECTORY);
		   set_var_value "sort" "1";
		   set_var_value "show" "0")
	    in
		 make_window {
		     window_id    = initWinID,
		     traits   = [WINDOW_TITLE "Options",
				 WIDE_HIGH_X_Y (THE (300, 180), NULL)],
		     subwidgets  = PACKED [dirEntry, chkbuttons, errLabel, buttons],
		     event_callbacks = [],
		     init     = init
		}
	    end

	fun go ()
	    =
	    (   restart:= initWin;

		if winix::process::getEnv "HOME" == NULL
		then CURRENT_DIRECTORY := current_directory()
		else CURRENT_DIRECTORY := ko (winix::process::getEnv "HOME");

		start_tcl [ initWin ]
	    )
    end
end
