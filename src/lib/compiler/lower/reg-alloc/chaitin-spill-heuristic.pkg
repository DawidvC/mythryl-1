# This module implements the Chaitin heuristic (but weighted by
# priorities)

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

package chaitin_spill_heuristic

: (weak)  Register_Allocation_Spill_Heuristics 		# Register_Allocation_Spill_Heuristics	is from   src/lib/compiler/lower/reg-alloc/ra-spill-heuristic.api

{
   package g= register_allocation_graph;		# register_allocation_graph	is from   src/lib/compiler/lower/reg-alloc/ra-graph.pkg

   include g;

   exception NO_CANDIDATE;

   mode = register_allocation_core::no_optimization;

   fun init () = ();


    # Potential spill phase.
    # Find a cheap node to spill according to Chaitin's heuristic.
    #
    fun choose_spill_node { graph, has_been_spilled, spill_worklist }
	= 
	{   fun chase (NODE { color=>REF (ALIASED n), ... } ) => chase n;
		chase n => n;
	    end;

	    infinite_cost = 123456789.0;
	    don't_use     = 223456789.0;

	    # The spill worklist is maintained only lazily.  So we have
	    # to prune away those nodes that are already removed from the
	    # interference graph.  After pruning the spillWkl, 
	    # it may be the case that there aren't anything to be 
	    # spilled after all.



	    # Choose node with the lowest cost
            # and the maximal degree:
	    #
	    fun chaitin ([], best, lowest_cost, spill_worklist)
                    => 
		    (best, lowest_cost, spill_worklist);

	        chaitin (node ! rest, best, lowest_cost, spill_worklist)
                    => 
		    case (chase node)   

		        node as
                        NODE { number, pri, defs, uses, degree=>REF deg, color=>REF PSEUDO, ... }
                            => 
			    {   fun cost () = *pri // real deg;

				cost = case (*defs, *uses)   

					   (_,[])
					       =>
					      -1.0 - real deg;		# Defs but no use 

					   ([d],[u])			# Defs after use; don't use.
					       =>
					       {   fun plus ( { block, instruction }, n)
						       =
						       { block,
							 instruction => instruction + n
						       };

						   (d == plus (u, 1) or d == plus (u, 2)) 
						       ??  don't_use
						       ::  cost ();
					       };

					   _   => cost();
				       esac;

			        if (cost < lowest_cost and not (has_been_spilled number))

				    case best   
					NULL     => chaitin (rest, THE node, cost,        spill_worklist);
					THE best => chaitin (rest, THE node, cost, best ! spill_worklist);
				    esac;

			        else
				    chaitin (rest, best, lowest_cost, node ! spill_worklist);
                                fi;
			    };

		          _ =>
		    	    chaitin (rest, best, lowest_cost, spill_worklist);	# Discard node.
                    esac;
            end;		# fun chaitin

	    #  print("["$int::to_string (length spillWkl)$"]") 


	    my (potential_spill_node, cost, new_spill_worklist)
                = 
		chaitin (spill_worklist, NULL, infinite_cost, []);


	    case (potential_spill_node, new_spill_worklist)

		(NULL, [])
                    =>
                    { node => NULL,  cost,  spill_worklist => [] };

		(NULL, _)
                    =>
                    raise exception NO_CANDIDATE;

		(THE node, spill_worklist)
                    => 
		    { node=>THE node, cost, spill_worklist };
	    esac;
	};						# fun choose_spill_node
};							# package chaitin_spill_heuristic
