## machine-properties.api

# Compiled by:
#     src/lib/compiler/core.make6



# This api contains various machine and code-generator specific
# parameters. 
#
# When should a code-generator parameter be put in this api?
# Only when changing it will yield incompatible code.
# Parameters that change optimization algorithms but yield compatible
# code should not go here.       -- A. Appel


# This api is implemented by:
#
#     src/lib/compiler/codegen/main/default-machine-properties.pkg
#     src/lib/compiler/codegen/ppc/ppc-machine-properties.pkg
#     src/lib/compiler/codegen/sun/sparc-machine-properties.pkg
#     src/lib/compiler/codegen/x86/x86-machine-properties.pkg

api Machine_Properties {

    architecture_name:  String;		# "ppc", "sparc" or "x86".

    framesize:  Int;
   
    # Code generator flags:
    #
    polling:  Bool;
    unboxed_floats:  Bool;
    representations:  Bool;
    new_closure:  Bool;
    num_regs:  Int;			#  the number of registers used by Mythryl 
    num_float_regs:  Int;		#  the number of registers used by Mythryl 
    num_arg_regs:  Int;			#  the number of registers used to pass args. 
    max_rep_regs:  Int;			#  rename or eliminate this 
    num_float_arg_regs:  Int;		#  the number of FP registers used for args. 
    num_callee_saves:  Int;
    num_float_callee_saves:  Int;
    untagged_int:  Bool;		#  represent all integers without tags 

    # Machine representations:
    #
    Value_Tag = {
	tagbits:  Int,			#  number of tag bits 
	tagval:  Int			#  value of tag bits 
      };

    int_tag:  Value_Tag;		#  tag for tagged integer values 
    ptr_tag:  Value_Tag;		#  tag for pointers 
    desc_tag:  Value_Tag;		#  tag for chunk descriptors 

    # Representations of chunk descriptors: 
    #
    package chunk_desc:  Chunk_Desc;	# Chunk_Desc	is from   src/lib/compiler/codegen/main/chunk-desc.api

    value_size:  Int;			#  number of bytes for an Mythryl value 
    char_size:  Int;			#  number of bytes for a char 
    real_size:  Int;			#  number of bytes of the default real type 
    real_align:  Bool;			#  if TRUE, reals are realSize aligned 

    big_endian:  Bool;			#  TRUE, if this is a big-endian machine 

    spill_area_size:  Int;		#  the size of the area for spilling registers 
					#  in bytes 
    initial_spill_offset:  Int; 	#  the offset of the first spill location 

    startgc_offset: 	 Int;
    const_base_reg_offset:  Int;
 
    quasi_stack:  Bool;			#  Default FALSE 
    quasi_free:   Bool;			#  Default FALSE 
    quasi_frame_size:  Int;		#  Default 7 

    new_list_rep:  Bool;		#  Default FALSE 
    list_cell_size:  Int;    		#  Default 2 

    float_reg_params:  Bool;		#  for old-style codegen; default TRUE 

    write_allocate_hack:  Bool;		#  Default FALSE 

    # Get "conreps" into here eventually.
    # Didn't want to do it now, because it would require
    # generic-ing the whole front end.  -- A. Appel XXX BUGGO FIXME

    fixed_arg_passing:  Bool;
	#
	# Use fixed argument passing registers for known functions that
	# require garbage collection. Only an issue on  the x86 or machines
	# that have registers implemented as memory locations, i.e., at the 
	# call to GC, there aren't enough registers to hold all the roots.
	# The correct way to solve this problem is to create a record of
	# live variables inside the code that invokes the garbage collector  XXX BUGGO FIXME
	# 							-- Lal George.

    spill_rematerialization:  Bool;	#  Whether rematerialization of spill locations is performed .

    # for accessing the in_LIB7 flag etc.;
    # These values must be coordinated with their respective runtime
    # counterparts in ?.prim.asm and lib7state-offsets.h!
    #
    lib7_state_offset:       Int;		#  within frame 
    vproc_offlib7_state:     Int;		#  within Lib7 state struct 
    in_lib7off_vsp:          Int;		#  within VProc struct 
    limit_ptr_mask_off_vsp:  Int;		#  within VProc struct 

    # On machines with a real frame pointer, there is no point in
    # attempting to omit a (virtual) frame pointer.  Example: Sparc
    #
    frame_ptr_never_virtual:  Bool;	#  suppress omit-frame-ptr phase 

    # On machines where C arguments are allocated in the caller's frame
    # we pre-allocate a large chunk of stack space for this purpose.
    # Example: PPC
    #
    ccall_prealloc_argspace:  Null_Or(  Int );

}; #  Machine_Properties 


## COPYRIGHT (c) 1994 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
