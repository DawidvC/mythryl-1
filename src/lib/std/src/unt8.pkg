## unt8.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6

###                "Short words are best
###                 and the old words when
###                 short are best of all."
###
###                   -- Winston Churchill



package unt8_guts: (weak)  Unt {		# Unt	is from   src/lib/std/src/unt.api

    package w8= inline_t::unt8;			# inline_t	is from   src/lib/core/init/built-in.pkg
    package w31 = inline_t::unt31;
    package lw= unt32_guts;			# unt32_guts	is from   src/lib/std/src/unt32.pkg

    Unt = unt8::Unt;				#  31 bits 

    word_size = 8;
    word_size_w = 0u8;
    word_shift = inline_t::unt31::(-) (0u31, word_size_w);
    fun adapt oper args = w8::bitwise_and (oper args, 0uxFF);

    my to_int:    Unt -> Int = w8::to_int;
    my to_int_x:   Unt -> Int = w8::to_int_x;
    my from_int:  Int -> Unt = w8::from_int;

    my to_large_unt:  Unt -> large_unt::Unt = w8::to_large_unt;
    to_large_unt_x = w8::to_large_unt_x;
    from_large_unt = w8::from_large_unt;

    my to_large_int:   Unt -> large_int::Int = lw::to_large_int o to_large_unt;
    my to_large_int_x:  Unt -> large_int::Int = w8::to_large_int_x;
    my from_large_int: large_int::Int -> Unt = w8::from_large_int;


    # These should be inline functions             XXX BUGGO FIXME

    fun (<<) (w:  Unt, k)
        =
        if   (inline_t::default_word::(<=) (word_size_w, k))
	     0u0;
	else adapt w8::lshift (w, k);fi;

    fun (>>) (w:  Unt, k)
        =
        if   (inline_t::default_word::(<=) (word_size_w, k))
	     0u0;
	else w8::rshiftl (w, k);fi;

    fun (>>>) (w:  Unt, k)
        =
        if   (inline_t::default_word::(<=) (word_size_w, k))
	     adapt w8::rshift (w8::lshift (w, word_shift), 0u31);
	else adapt w8::rshift
	    (w8::lshift (w, word_shift), inline_t::default_word::(+) (word_shift, k));
        fi;

    my bitwise_or:   (Unt, Unt) -> Unt = w8::bitwise_or;
    my bitwise_xor:  (Unt, Unt) -> Unt = w8::bitwise_xor;
    my bitwise_and:  (Unt, Unt) -> Unt = w8::bitwise_and;
    my bitwise_not:  Unt -> Unt = adapt w8::bitwise_not;

    my (*) : (Unt, Unt) -> Unt = (*);
    my (+) : (Unt, Unt) -> Unt = (+);
    my (-) : (Unt, Unt) -> Unt = (-);
    my (/) : (Unt, Unt) -> Unt = (/);
    my (%) : (Unt, Unt) -> Unt = (%);

    fun compare (w1, w2)
        =
	if   (w8::(<) (w1, w2))  LESS;
	elif (w8::(>) (w1, w2))  GREATER;
	else                     EQUAL;
        fi;

    my (>)  : (Unt, Unt) -> Bool = (>);
    my (>=) : (Unt, Unt) -> Bool = (>=);
    my (<)  : (Unt, Unt) -> Bool = (<);
    my (<=) : (Unt, Unt) -> Bool = (<=);

    my (-_) : Unt -> Unt = (-_);
    my min:  (Unt, Unt) -> Unt = w8::min;
    my max:  (Unt, Unt) -> Unt = w8::max;

    fun format radix
        =
        (num_format::format_unt radix) o to_large_unt; 

    to_string = format string_conversion::HEX;

    fun scan radix
        =
	scan
        where
            scan_large = num_scan::scan_word radix;

	    fun scan getc cs
                =
                case (scan_large getc cs)

		    NULL => NULL;

		    THE (w, cs')
                        =>
                        if (inline_t::unt32::(>) (w, 0u255))
		             raise exception OVERFLOW;
		        else
                             THE (from_large_unt w, cs');
                        fi;
                esac;
	end;

    from_string
        =
        pre_basis::scan_string (scan string_conversion::HEX);

};						#  package unt8_guts 





##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
