
# Use this module to create a new Gtk class 



###                      "He was endowed with a stupidity which
###                       by the least little stretch would
###                       go around the globe four times and tie."
###
###                                 -- Mark Twain in Eruption



generic package gtk_new_class_g
   ( #  Superclass information 
     package super :
     api type tag X
         my type:  c::t::type( c::su( tag( gtk::base ) ) )
         my get_type:  Void -> mlrep::unsigned::word
     end
     package super_class :
     api type tag
         my type:  c::t::type(  c::su(  tag ) )
     end
     #  New class information 
     package self :
     api type data
         my name:  String
     end
   ) :> GTK_NEW_CLASS where type data = self::data
                      where type super_tag( X ) = super::tag( X )
         =
package {
    use C ZString Gtk 

    package e  = ephemeral_obj
    package ml = ml_obj_ref

    type super_tag( X ) = super::tag( X ) 	#  tag of superclass 
    type self_t X  = base			#  new tag of this class 
    type tag X     = super_tag self_t X	#  full path of the tag 
    type GtkSelf X = gtkptr' tag X 		#  full type 
    type data   = self::data   #  each widget object carries this 

    package class {
       use super_class
       size = t::sizeof type
    };

    #  Name 
    name = self::name

    #  RTTI 
    parent_size = s::toWord (t::sizeof super::type) 
    self_size = parent_size + s::toWord (s::ulong)
    size = c_internals::make_su_size self_size:  s::size( su( tag( base ) ) )
    type  = c_internals::make_su_typ size

    fun getSize type = unsigned::fromWord (s::toWord (t::sizeof type))

    #  get/set data field 
    sss = ml::new() : ml::mlobj_store( data )

    #  type id 
    self_type_info
        = 
	e::new (fn _ => {   #  Allocate a new GtkTypeInfo object 

			    info =   new' GtkTypeInfo::size;

			    use GtkTypeInfo;


			    #  Fake class init functions

			    class_init  = Light::fptr (F_smlgtk_class_init::fptr());
			    object_init = Light::fptr (F_smlgtk_object_init::fptr());



			    #  Initialize the fields 

			    set::ptr'(f_type_name' info, dupML' name)
			    set::uint'(f_object_size' info, getSize type)
			    set::uint'(f_class_size' info, getSize class::type)
			    set::fptr'(f_class_init_func' info, class_init)
			    set::fptr'(f_object_init_func' info, object_init)
			    set::voidptr'(f_reserved_1' info, NULL)
			    set::voidptr'(f_reserved_2' info, NULL)
			    set::fptr'(f_base_class_init_func' info, FNULL)

			    #  Allocate a new type id 

			    t' =   super::get_type ();
			    t  =   gtk_type_unique::f (t', &(ro' info));

			    print("super type="$unsigned::to_string t'$"\n");
			    print("self type="$unsigned::to_string t$"\n");

			    t;
                        }
	)

    fun get_type ()
        =
        e::get self_type_info


    #  Upcasting function 

    fun asSelf x
        =
        x


    #  Downcasting function 

    fun castToObj x = gtk_downcast::downcast (get_type, x)
    fun cast' x = Ptr::cast' (Ptr::inject'(castToObj x))
    fun cast x = cast'(Ptr::inject' x)

    fun getDataField p
        =
	c_internals::make_field' (unt::toIntX parent_size, ptr::deref' p) : uint_obj'( rw )

    fun get p = ml::lookup (sss, get::uint'(getDataField p))
    fun set (p, x) = ml::set (sss, get::uint'(getDataField p), x)

    #  Create a new object with some initial data 

    fun create data
	= 
	{   ptr =   gtk_type_new::f (get_type());
	    obj =   Ptr::cast' (Ptr::inject' ptr);
	    id  =   ml::new_id sss;

	    #  set::uint'(getDataField obj, id); 
	    ml::set (sss, id, data);
	    obj;
	}

}
