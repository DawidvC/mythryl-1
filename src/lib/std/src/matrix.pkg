## matrix.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6



###                  "Engineering is like acting,
###                   in that when it is well done,
###                   it goes unnoticed and unapplauded."



package matrix: Matrix {				# Matrix	is from   src/lib/std/src/matrix.api

    ltu = inline_t::default_int::ltu;

    unsafe_set = inline_t::poly_rw_vector::set;
    unsafe_get = inline_t::poly_rw_vector::get;

    package a  = rw_vector;				# rw_vector		is from   src/lib/std/src/rw-vector.pkg
    package vs = rw_vector_slice;			# rw_vector_slice	is from   src/lib/std/src/rw-vector-slice.pkg

    Array(X)
        =
        { data:   a::Rw_Vector(X),
          nrows:  Int,
          ncols:  Int
        };

    Region(X)
        =
        { base:   Array(X),
	  row:    Int,
          col:    Int,
	  nrows:  Null_Or( Int ),
	  ncols:  Null_Or( Int )
        };

    Traversal
	= ROW_MAJOR
        | COLUMN_MAJOR;

    make_array
	=
	inline_t::poly_rw_vector::array;

    # Compute the index of an array element 
    #
    fun unsafe_index ( { nrows, ncols, ... }: Array( X ), i, j)
        =
        (i * ncols + j);

    fun index (arr, i, j)
        =
	if ((ltu (i, arr.nrows) and ltu (j, arr.ncols)))
	    unsafe_index (arr, i, j);
	else
            raise exception exceptions::SUBSCRIPT;
        fi;

    fun check_size (nrows, ncols)
        =
	if  (nrows < 0
        or   ncols < 0
	)
            raise exception exceptions::SIZE;
	else
	    n = nrows * ncols
		except
		    OVERFLOW = raise exception exceptions::SIZE;

	    if (n <= core::max_length)
                n;
            else
                raise exception exceptions::SIZE;
            fi;
	fi;

    fun array (nrows, ncols, v)
        =
        case (check_size (nrows, ncols))
	    0 => { data => inline_t::poly_rw_vector::new_array0(), nrows => 0, ncols => 0 };
	    n => { data => make_array (n, v), nrows, ncols };
        esac;

    fun from_list rows
        =
        case (list::reverse rows)
	  
	    []  =>
		{ data  => inline_t::poly_rw_vector::new_array0(),
		  nrows => 0,
		  ncols => 0
		};

	    last_row ! rest
		=>
		{
		    columns = list::length last_row;


		    fun check ([], rows, l)
                            =>
                            (rows, l);

			check (row ! rest, rows, l)
			    =>
			    check (rest, rows+1, check_row (row, 0))
			    where
				fun check_row ([], n)
					=>
					{   if   (n != columns   )   raise exception exceptions::SIZE;   fi;
					    l;
					};

				    check_row (x ! r, n)
					=>
					x ! check_row (r, n+1);
				end;
			    end;
		    end;

		    my (rows, data)
			=
			check (rest, 1, last_row);

		    { data => rw_vector::from_list data, nrows => rows, ncols => columns };
		};
        esac;


    fun tabulate_rm (nrows, ncols, f)
        =
        case (check_size (nrows, ncols))
          
	    0 => { data => inline_t::poly_rw_vector::new_array0(), nrows, ncols };

	    n => {

		arr = make_array (n, f (0, 0));

		fun lp1 (i, j, k)
                    =
                    if (i < nrows)
                        lp2 (i, 0, k);
                    fi

		also
		fun lp2 (i, j, k)
                    =
                    if (j < ncols)
			 unsafe_set (arr, k, f (i, j));
			 lp2 (i, j+1, k+1);
		    else lp1 (i+1, 0, k);
                    fi;
		
		lp2 (0, 1, 1);  #  we've already done (0, 0) 

		{ data => arr, nrows, ncols };
	    };
        esac;


    fun tabulate_cm (nrows, ncols, f)
        =
        case (check_size (nrows, ncols))
          
	    0 => { data => inline_t::poly_rw_vector::new_array0(), nrows, ncols };

	    n => {
		arr   = make_array (n, f (0, 0));

		delta = n - 1;

		fun lp1 (i, j, k)
		    =
		    if (j < ncols)
                        lp2 (0, j, k);
                    fi

		also
		fun lp2 (i, j, k)
		    =
		    if (i < nrows)
			 unsafe_set (arr, k, f (i, j));
			 lp2 (i+1, j, k+ncols);
		    else lp1 (0, j+1, k-delta);
		    fi;

		lp2 (1, 0, ncols);		# We've already done (0, 0) 

		{ data => arr, nrows, ncols };
	    };
        esac;


    fun tabulate ROW_MAJOR    =>  tabulate_rm;
        tabulate COLUMN_MAJOR =>  tabulate_cm;
    end;


    fun get (a, i, j)    = unsafe_get (a.data, index (a, i, j));
    fun set (a, i, j, v) = unsafe_set (a.data, index (a, i, j), v);


    fun dimensions { data, nrows, ncols }
        =
        (nrows, ncols);


    fun columns (arr:  Array( X )) =  arr.ncols;
    fun rows    (arr:  Array( X )) =  arr.nrows;


    fun row ( { data, nrows, ncols }, i)
        =
        {   stop = i*ncols;

	    fun make_vec (j, l)
                =
		if (j < stop)
		     vector::from_list l;
		else
                     make_vec (j - 1, a::get (data, j) ! l);
                fi;

	    if (not (ltu (nrows, i)))
	        make_vec (stop+ncols - 1, []);
	    else 
		raise exception exceptions::SUBSCRIPT;
	    fi;
	};

    fun column ( { data, nrows, ncols }, j)
        =
        {   fun make_vec (i, l)
                =
		if (i < 0)
		    vector::from_list l;
		else
                    make_vec (i-ncols, a::get (data, i) ! l);
                fi;

	    if (not (ltu (ncols, j)))
		make_vec ((a::length data - ncols) + j, []);	           
	    else
		raise exception exceptions::SUBSCRIPT;
	    fi;
	};

    Index = DONE
          | INDEX  { i: Int, r: Int, c: Int }
          ;

    fun check_region { base=> { data, nrows, ncols }, row, col, nrows=>nr, ncols=>nc }
        =
        {   fun check (start, n, NULL)
                    =>
		    if  (start < 0
                    or   start > n
		    )
                         raise exception exceptions::SUBSCRIPT;
		    else
                         n-start;
                    fi;

	        check (start, n, THE len)
                    =>
		    if ((start < 0) or (len < 0) or (n < start+len))
			raise exception exceptions::SUBSCRIPT;
		    else
			len;
                    fi;
            end;

	    nr = check (row, nrows, nr);
	    nc = check (col, ncols, nc);

	    { data, i => (row*ncols + col), r=>row, c=>col, nr, nc };
	};

    fun copy { src:  Region( X ), dst: Array( X ), dst_row, dst_col }
        =
	{   check_region src;

	    src -> { base,
                    row    => srow,   col   => scol,
		     nrows => snrows, ncols => sncols
                   };

	    base ->  { data => bdata, ncols => bncols, nrows => bnrows };
	    dst  ->  { data => ddata, ncols => dncols, nrows => dnrows };

	    src_nrows = the_else (snrows, bnrows - srow);
	    src_ncols = the_else (sncols, bncols - scol);

	    fun dn (i, d, s)
                =
		if (i > 0 )

		    # We might be better off doing this directly
		    # instead of calling the rw_vector_slice module:
		    #	
		    vs::copy { src => vs::make_slice (bdata, s, THE src_ncols),
			       dst => ddata, di => d
                             };

		    dn (i - 1, d + dncols, s + bncols);
		fi;


	    fun up (i, d, s)
                =
		if (i > 0)
                    
		    vs::copy { src => vs::make_slice (bdata, s, THE src_ncols),
			       dst => ddata, di => d
                             };

		    up (i - 1, d - dncols, s - bncols);
		fi;

	    if  (src_nrows + dst_row > dnrows
            or   src_ncols + dst_col > dncols
	    )
                raise exception exceptions::SUBSCRIPT;
	    else
                if (dst_row <= srow)
                    
		    dn ( src_nrows,
			 dst_row * dncols + dst_col,
			 srow * bncols + scol
                       );
		else
                    up ( src_nrows,
			 (dst_row + src_nrows - 1) * dncols + dst_col,
			 (srow + src_nrows - 1) * bncols + scol
                       );
                fi;
            fi;
	};


    # This function generates a stream of indices
    # for the given region in row-major order.
    #
    fun iterate_rm arg
        =
        (data, iter)
        where  

	    (check_region arg)
                ->
                { data, i, r, c=>c_start, nr, nc };

	    ii = REF i;
	    ri = REF r;
	    ci = REF c_start;

	    r_end = r+nr;
	    c_end = c_start+nc;

	    row_delta = arg.base.ncols - nc;

	    fun make_index (r, c)
                =
                {   i = *ii;

		    ii := i+1;
		    INDEX { i, c, r };
		};

	    fun iter ()
		=
		{   r = *ri;
		    c = *ci;

		    if   (c < c_end)

		        ci := c+1;
                        make_index (r, c);

		    elif (r+1 < r_end)

			ii := *ii + row_delta;
			ci := c_start;
			ri := r+1;

			iter ();

		    else

			DONE;
                    fi;
		};
	    end;

    # This function generates a stream of indices
    # for the given region in col-major order:
    #
    fun iterate_cm (arg as { base=> { ncols, nrows, ... }, ... } )
        =
        {   my { data, i, r=>r_start, c, nr, nc }
		=
		check_region arg;

	    ii = REF i;
            ri = REF r_start;
            ci = REF c;

	    r_end = r_start+nr;
            c_end = c+nc;

	    delta = (nr * ncols) - 1;

	    fun make_index (r, c)
		=
		{   i = *ii;

		    ii := i+ncols;
		    INDEX { i, c, r };
		};

	    fun iter ()
                =
                {   r = *ri;
		    c = *ci;

		    if   (r < r_end)

			ri := r+1;
                        make_index (r, c);

		    elif (c+1 < c_end)

			ii := *ii - delta;
			ri := r_start;
			ci := c+1;

			iter ();

		    else

                        DONE;
                    fi;
		};

	      (data, iter);
	  };


    fun keyed_apply order f region
        =
	apply ()
        where
	    my (data, iter)
		=
		case order
		    ROW_MAJOR    => iterate_rm region;
		    COLUMN_MAJOR => iterate_cm region;
		esac;


	    fun apply ()
                =
                case (iter ())
		  
		    DONE => ();

		    INDEX { i, r, c }
			=>
			{   f (r, c, unsafe_get (data, i));

			    apply ();
			};
                esac;
	end;


    fun apply_rm f { data, ncols, nrows }
        =
        a::apply f data;


    fun apply_cm f { data, ncols, nrows }
        =
	appf (0, 0)
        where
            delta = a::length data - 1;

	    fun appf (i, k)
                  =
                  if (i < nrows)
		      
                      f (unsafe_get (data, k)); appf (i+1, k+ncols);
		  else
		      k = k-delta;

		      if (k < ncols)   appf (0, k);   fi;
		  fi;
	end;

    fun apply ROW_MAJOR    =>  apply_rm;
        apply COLUMN_MAJOR =>  apply_cm;
    end;

    fun modifyi order f region
        =
	modify ()
	where
            my (data, iter)
		=
                case order
		    ROW_MAJOR    => iterate_rm region;
		    COLUMN_MAJOR => iterate_cm region;
                esac;


	    fun modify ()
                =
                case (iter ())
		  
		    DONE => ();

		    INDEX { i, r, c }
			=>
			{   unsafe_set (data, i, f (r, c, unsafe_get (data, i)));
		            modify();
			};
                esac;
	end;


    fun modify_rm f { data, ncols, nrows }
        =
        a::modify f data;


    fun modify_cm f { data, ncols, nrows }
        =
	modf (0, 0)
        where
	    delta = a::length data - 1;

	    fun modf (i, k)
                =
		if   (i < nrows)
		     unsafe_set (data, k, f (unsafe_get (data, k))); modf (i+1, k+ncols);
		else
		     k = k-delta;

		     if   (k < ncols   )   modf (0, k);   fi;
		fi;
	end;


    fun modify ROW_MAJOR    =>  modify_rm;
        modify COLUMN_MAJOR =>  modify_cm;
    end;


    fun foldi order f init region
        =
	fold init
        where

	    my (data, iter)
		=
		case order
		    ROW_MAJOR    => iterate_rm  region;
		    COLUMN_MAJOR => iterate_cm  region;
		esac;


	    fun fold accum
		=
		case (iter ())

		    DONE => accum;

		    INDEX { i, r, c }
			=>
			fold (f(r, c, unsafe_get (data, i), accum));
		esac;
	end;


    fun fold_rm f init { data, ncols, nrows }
        =
        a::fold_left f init data;


    fun fold_cm f init { data, ncols, nrows }
        =
	foldf (0, 0, init)
        where
	    delta = a::length data - 1;

	    fun foldf (i, k, accum)
                =
                if (i < nrows)
		    
                     foldf (i+1, k+ncols, f (unsafe_get (data, k), accum));
		else
		     k = k-delta;

		     if (k < ncols)   foldf (0, k, accum);
                     else             accum;
                     fi;
		fi;
	end;


    fun fold ROW_MAJOR    =>  fold_rm;
        fold COLUMN_MAJOR =>  fold_cm;
    end;

};

package rw_matrix= matrix;	# matrix	is from   src/lib/std/src/matrix.pkg


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1997 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
