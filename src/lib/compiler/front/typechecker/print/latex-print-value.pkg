## latex-print-value.pkg 
## Copyright 2003 by The SML/NJ Fellowship 

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6


#  Modified to use Lib7 Lib pp. [dbm, 7/30/03]) 

api Latex_Print_Value {

     backslash_latex_special_chars:   String -> String;

     latex_print_constructor_representation:  prettyprint::Stream
                                                    -> var_home::Constructor_Form
                                                    -> Void;

     latex_print_var_home:     prettyprint::Stream -> var_home::Var_Home                                   -> Void;
     latex_print_dcon:       prettyprint::Stream -> variables_and_constructors::Constructor -> Void;
     latex_print_var:        prettyprint::Stream -> variables_and_constructors::Variable             -> Void;

     latex_print_variable
         :
         prettyprint::Stream
	 ->
         (symbol_table::Symbol_Table, variables_and_constructors::Variable)
         ->
         Void;

     latex_print_debug_dcon
         :
         prettyprint::Stream
	 ->
         symbol_table::Symbol_Table
         ->
         variables_and_constructors::Constructor -> Void;

     latex_print_constructor
         :
         prettyprint::Stream
	 ->
         symbol_table::Symbol_Table
         ->
         variables_and_constructors::Constructor -> Void;

     latex_print_debug_var
         :
         (inlining_information::Inlining_Information -> String)
	 -> prettyprint::Stream 
	 -> symbol_table::Symbol_Table
	 -> variables_and_constructors::Variable
	 -> Void;

};

package latex_print_value: (weak)  Latex_Print_Value {

    stipulate

        package pp =  prettyprint;			# prettyprint		is from   src/lib/prettyprint/src/prettyprint.pkg
	package tu =  type_stuff;			# type_stuff		is from   src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg
	package lu =  find_in_symbol_table;		# find_in_symbol_table	is from   src/lib/compiler/front/typecheck-stuff/symbol-table/find-in-symbol-table.pkg
	package a  =  var_home;				# var_home		is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
							# latex_print_type	is from   src/lib/compiler/front/typechecker/print/latex-print-type.pkg
	#  package ii = inlining_info 

	include prettyprint;
	include unparse_stuff;
	include variables_and_constructors;
	include types;

    herein 

	internals = typechecking_control::internals;

	# La/TeX wants all literal underlines backslashed
	# (otherwise they denote subscripting), and similarly
        # for $ % # { } so we need a function to do
	#     s/([$%#{}_])/\\\1/g:
	#
	fun backslash_latex_special_chars  string
	    =
	    string::implode  (quote_em ( string::explode string, [] ))
	    where
		fun quote_em ([], done)
			=>
			reverse done;

		    quote_em (c ! rest, done)
			=>
                        case c
                        '\'' => quote_em (rest, '_' ! '\\' ! '_' ! '\\' ! 'e' ! 'm' ! 'i' ! 'r' ! 'p' ! '_' ! '\\' ! '_' ! '\\' ! done);
                        '!' =>  quote_em (rest, '_' ! '\\' ! '_' ! '\\' !       'g' ! 'n' ! 'a' ! 'b' ! '_' ! '\\' ! '_' ! '\\' ! done);
                        '_' =>  quote_em (rest, c ! '\\' ! done);
                        '$' =>  quote_em (rest, c ! '\\' ! done);
                        '&' =>  quote_em (rest, c ! '\\' ! done);
                        '%' =>  quote_em (rest, c ! '\\' ! done);
                        '#' =>  quote_em (rest, c ! '\\' ! done);
                        '@' =>  quote_em (rest, c ! '\\' ! done);
                        '{' =>  quote_em (rest, c ! '\\' ! done);
                        '}' =>  quote_em (rest, c ! '\\' ! done);
                         _  =>  quote_em (rest, c !        done);
                        esac;
		end;
	    end;

	fun by f x y
            =
            f y x;

	pps = pp::string;

	latex_print_some_type        =  latex_print_type::latex_print_some_type;
	latex_print_type             =  latex_print_type::latex_print_type;
	latex_print_type_scheme    =  latex_print_type::latex_print_type_scheme;

	fun latex_print_var_home stream a
            =
            pps stream (   " ["
                       +   (a::print_var_home a)
                       +   "]"
                       );

	fun latex_print_inlining_info inlining_info_to_string stream a
            =
            pps stream (" [" + (inlining_info_to_string a) + "]");

	fun latex_print_constructor_representation stream representation
            =
            pp::string stream (a::print_representation representation);

	fun latex_print_csig stream csig
            =
            pp::string stream (a::print_constructor_api csig);

	fun latex_print_dcon stream
            =
	    {   fun latex_print_d ( ENUM_CONSTRUCTOR { symbol, representation => a::EXCEPTION acc, ... } )
                    =>
		    {   unparse_symbol  stream  symbol;

			if *internals
                             latex_print_var_home  stream  acc; 
                        fi;
                    };

		    latex_print_d (ENUM_CONSTRUCTOR { symbol, ... } )
			=>
			unparse_symbol  stream  symbol;
                end;
	    
                latex_print_d;
	    };

	fun latex_print_debug_dcon stream symbol_table (ENUM_CONSTRUCTOR { symbol, representation, const, constructor_type, signature, is_lazy } )
            =
	    {   my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... }
                    =
                    en_pp stream;

		unparse_symbol = unparse_symbol stream;
	    
                begin_horizontal_else_vertical_box 3;
		pps "ENUM_CONSTRUCTOR";
		break { spaces=>0, indent_on_wrap=>0 };
		pps "{ name = "; unparse_symbol symbol;                          unparse_comma_newline stream;
		pps "const = "; pps (bool::to_string const);                         unparse_comma_newline stream;
		pps "constructor_type = "; latex_print_some_type  symbol_table  stream  constructor_type;        unparse_comma_newline stream;
		pps "is_lazy = "; pps (bool::to_string is_lazy);                     unparse_comma_newline stream;

		pps "datatype_constructor_representation =";
		latex_print_constructor_representation
		    stream
		    representation;
                                                                                     unparse_comma_newline stream;
		pps "signature = [";   latex_print_csig stream signature;   pps "] }";
		end_box ();
	    };

	fun latex_print_constructor stream symbol_table (ENUM_CONSTRUCTOR { symbol, representation, const, constructor_type, signature, is_lazy } )
            =
	    {   my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... }
                    =
                    en_pp stream;

		unparse_symbol = unparse_symbol stream;
	    
                begin_horizontal_else_vertical_box 3;
		unparse_symbol symbol;
		pps " : ";
                latex_print_some_type  symbol_table  stream  constructor_type;
		end_box ();
	    };

	fun latex_print_datatype_constructor (   symbol_table: symbol_table::Symbol_Table,
                                               ENUM_CONSTRUCTOR { symbol, constructor_type, ... }
                                           )
                                           stream
            =
	    { my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... }
                    =
                    en_pp stream;
	    
                begin_wrap_box 0;
		unparse_symbol stream symbol;   pps " : ";
                latex_print_some_type  symbol_table  stream  constructor_type;
		end_box ();
	    };

# Is this ever used?
	fun latex_print_con_naming stream
            =
            latex_print_constructor
            where

	        my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... }
                    =
                    en_pp stream;

		fun latex_print_constructor (ENUM_CONSTRUCTOR { symbol, constructor_type, representation=>a::EXCEPTION _, ... }, symbol_table)
			=>
			{   begin_horizontal_else_vertical_box 0;
			    pps "exception ";
                            unparse_symbol  stream  symbol; 

			    if   (type_types::is_arrow_type constructor_type)
			        
				 {   pps " "; 
				     latex_print_some_type  symbol_table  stream  (type_types::domain  constructor_type);
				 };
			    fi;

			    pps ";"; 

			    end_box();
			};

		    latex_print_constructor (con, symbol_table)
			=> 
			{   exception HIDDEN;

			    visible_dcon_type_constructor
				=
				{ type_constructor = tu::datatype_constructor_to_type_constructor con;

				    (   type_stuff::type_constructor_equality (
					    lu::find_type_constructor_via_symbol_path
					    (    symbol_table,
						 symbol_path::SYMBOL_PATH
						 [ inverse_path::last (type_stuff::type_constructor_path type_constructor) ],
						 fn _ = raise exception HIDDEN
					    ),
					    type_constructor
					)
					except
                                            HIDDEN = FALSE
				    );
				};

			    if (*internals
                                or
				not visible_dcon_type_constructor 
			    )
				 begin_horizontal_else_vertical_box 0;
				 pps "con ";
				 latex_print_datatype_constructor (symbol_table, con) stream;
				 pps ";";
				 end_box ();
                            fi;
			};
                end;
	    end;

	fun latex_print_var stream (ORDINARY_VARIABLE { var_home, path, ... } )
		=>
		{   pps stream (symbol_path::to_string path);

		    if *internals
			 latex_print_var_home stream var_home;
		    fi;
		};

	    latex_print_var stream (OVERLOADED_IDENTIFIER { name, ... } )
		=>
		unparse_symbol stream (name);

	    latex_print_var stream (errorvar)
		=>
		pp::string stream "<errorvar>";
        end;

	fun latex_print_debug_var inlining_info_to_string stream symbol_table
            = 
	    {   my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... } = en_pp stream;

		latex_print_var_home = latex_print_var_home stream;
		latex_print_inlining_info   = latex_print_inlining_info inlining_info_to_string stream;

		fun latexprintdebugvar (ORDINARY_VARIABLE { var_home, path, var_type, inlining_info } )
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps "ORDINARY_VARIABLE";
			    begin_horizontal_else_vertical_box 3;
			    pps "( { var_home=";   latex_print_var_home var_home;          unparse_comma_newline stream;
			    pps "inlining_info="; latex_print_inlining_info inlining_info;        unparse_comma_newline stream;
			    pps "path=";       pps (symbol_path::to_string path);    unparse_comma_newline stream;
			    pps "var_type=REF "; latex_print_some_type  symbol_table  stream  *var_type; 
			    pps "} )";
			    end_box();
			    end_box();
			};

		    latexprintdebugvar (OVERLOADED_IDENTIFIER { name, alternatives, type_scheme } )
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps "OVERLOADED_IDENTIFIER";
			    begin_horizontal_else_vertical_box 3;
			    pps "( { name="; unparse_symbol stream (name); unparse_comma_newline stream;
			    pps "alternatives=["; 
			    (ppvseq stream 0 ", "
			     (fn stream =  fn { indicator, variant } =
				{ pps "{ indicator=";  latex_print_some_type  symbol_table  stream   indicator; 
				 unparse_comma_newline stream;
				 pps " variant =";
				 latex_print_debug_var inlining_info_to_string stream symbol_table variant; pps "}";})
			     *alternatives);
			    pps "]"; unparse_comma_newline stream;
			    pps "type_scheme=";   latex_print_type_scheme  symbol_table  stream  type_scheme;   pps "} )";
			    end_box();
			    end_box();
			};

		    latexprintdebugvar  errorvar
                        =>
                        pps "<ERRORvar>";
                end;
	    
                latexprintdebugvar;
	    };

	fun latex_print_variable stream
            =
            latexprintvariable
            where
	        (en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };

		fun latexprintvariable (   symbol_table: symbol_table::Symbol_Table,
					    ORDINARY_VARIABLE { path, var_home, var_type, inlining_info }
					)
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps (symbol_path::to_string path);

			    if *internals
                                 latex_print_var_home  stream  var_home;
			    fi;

			    pps ": ";
                            latex_print_some_type  symbol_table  stream  *var_type;
			    pps ";";

			    end_box ();
			};

		    latexprintvariable (symbol_table, OVERLOADED_IDENTIFIER { name, alternatives, type_scheme=>TYPE_SCHEME { body, ... } } )
			=>
			{   begin_horizontal_else_vertical_box 0;
			    unparse_symbol stream name;
                            pps ": ";
                            latex_print_some_type  symbol_table  stream  body; 
			    pps " as ";
			    unparse_sequence stream { sep   => by pp::break { spaces=>1, indent_on_wrap=>0 },
						      pr    => (fn stream = fn { variant, ... } = latexprintvariable (symbol_table, variant)),
						      style => CONSISTENT
						    }
			        *alternatives;
			    pps ";";
			    end_box();
		        };

		    latexprintvariable(_, errorvar)
                        =>
                        pps "<ERRORvar>;";
                end;
	    
	    end;

    end;		#  stipulate

};			#  package latex_print_value 











##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
