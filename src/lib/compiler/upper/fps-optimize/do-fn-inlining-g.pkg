## do-fn-inlining-g.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



# This file implements one of the fate-passing-style transforms.
# For context, see the comments in
#
#     src/lib/compiler/upper/highcode/highcode.api



#     "General inlining, which decides whether or not
#      to inline functions called more than once based
#      on a budget and on estimates of code size and
#      optimization opportunities that inlining will create.
#
#     "This also does loop unrolling, and introduction of
#      loop pre-headers [1] which allow loops to be inlined.
#
#          -- Principled Compilation and Scavenging
#             Stefan Monnier, 2003 [PhD Thesis, U Montreal]
#             http://www.iro.umontreal.ca/~monnier/master.ps.gz 
#
#      [1] Loop Headers in \-calculus or FPS
#          Andrew W Appel
#          1994, 6p
#          http://citeseer.ist.psu.edu/appel94loop.html



api Do_Fn_Inlining {

    do_fn_inlining
       :
       { function:       fate_passing_style::Function,
	 bodysize:       Int,
	 unroll:         Bool,
	 table:          int_hash_table::Hash_Table( highcode_type::Highcode_Type ),
	 after_closure:  Bool, do_headers: Bool,
	 click:          String -> Void
       }
       ->
       fate_passing_style::Function;

};

# We are invoked from:
#
#     src/lib/compiler/upper/fps-optimize/fps-optional-optimizations-g.pkg
								# Machine_Properties	is from   src/lib/compiler/codegen/main/machine-properties.api
generic package do_fn_inlining_g (

    machine_properties:  Machine_Properties			# Typically 			  src/lib/compiler/codegen/x86/x86-machine-properties.pkg
)

: (weak)  Do_Fn_Inlining					# Do_Fn_Inlining	is from   src/lib/compiler/upper/fps-optimize/do-fn-inlining-g.pkg

{

    stipulate

	include fate_passing_style;

	package cg =  controls::cg;				# controls		is from   src/lib/compiler/toplevel/main/controls.pkg
	package lv =  highcode_var;				# highcode_var		is from   src/lib/compiler/upper/highcode/highcode-var.pkg

    herein

	fun inc (ri as REF i) = (ri := i+1);
	fun dec (ri as REF i) = (ri := i - 1);

	fun map1 f (a, b)
	    =
	    (f a, b);

	fun sum f
	    =
	    h
	    where
	       fun h (a ! r) =>  f a  +  h r;
                   h []      =>  0; 
	       end;
	    end;

	fun muldiv (a, b, c)   #  A*b/c, approximately, but guaranteed no overflow 
	    =
	    (a*b) / c
	    except
		OVERFLOW
		    =
		    if (a > b)   muldiv (a / 2, b, c / 2);
		    else         muldiv (a, b / 2, c / 2);
		    fi;

	fun share_name (x, VAR y) => lv::share_name (x, y); 
	    share_name (x, LABEL y) => lv::share_name (x, y); 
	    share_name _ => ();
	end;

	Mode = ALL | NO_UNROLL | UNROLL Int | HEADERS;

	fun do_fn_inlining
            {
              function => (fkind, fvar, fargs, ctyl, cexp),
              unroll,
              bodysize,
              click,
	      after_closure,
              table=>typtable,
              do_headers
	    }
	    =
	    {
		clicked_any =   REF FALSE;

		click =   fn z =   { click z; clicked_any := TRUE;};

		debug = *cg::debugcps; #  FALSE 
		debugprint = if debug  controls::print::say;   else fn _ = (); fi;
		debugflush = if debug  controls::print::flush; else fn _ = (); fi;

		cginvariant = *cg::invariant;

		fun label v
		    =
		    after_closure   ??   LABEL v
				    ::   VAR   v;

		Info = FUN  { escape: Ref( Int ), call: Ref( Int ), size: Ref( Int ),
			      args: List( Highcode_Variable ), body: Fps_Expression,
			      invariant: Ref(  List(  Bool ) ), #  one for each arg 
			      unroll_call: Ref( Int ), level: Int,
			      within: Ref( Bool )
                            }
		     | ARG  { escape: Ref( Int ), savings: Ref( Int ),
			       record: Ref( List( (Int, Highcode_Variable) ) ) }
		     | SEL  { savings: Ref( Int ) }
		     | REC  { escape: Ref( Int ), size: Int,
			       vars:  List ((Value, Accesspath)) }
		     | REAL
		     | CONST
		     | OTHER
                     ;

		rep_flag = machine_properties::representations;

		type_flag = *controls::cg::checkcps1 and			# XXX BUGGO FIXME is one checkcps1 redundant, or should it be checkcps2 or something?
				*controls::cg::checkcps1 and rep_flag;

		stipulate   

		    exception NEXPAND;

		    fun getty v
			= 
			if type_flag

			     (int_hash_table::get  typtable  v)
			     except
				 _ =
				   {   controls::print::say ("NEXPAND: Can't find the variable " +
					     (int::to_string v) + " in the typtable ***** \n");
				       raise exception NEXPAND;
				   };
			else
			     highcode::ltc_void;
			fi;

		    fun addty (f, t)
			=
			int_hash_table::set typtable (f, t);

		herein

		    fun make_var (t)
			=
			{   v = lv::make_highcode_variable();

			    if type_flag  addty (v, t); fi;

			    v;
			};

		    fun copy_lvar v
			=
			{   x = lv::copy_highcode_variable (v);

			    if type_flag  addty (x, getty v); fi;

			    x;
			};

		end; #  with


		stipulate

		    exception EXPAND;

		    my m:  int_hash_table::Hash_Table( Info )
			=
			int_hash_table::make_table (128, EXPAND);

		    get' =  int_hash_table::get  m;

		herein

		    note =  int_hash_table::set  m;

		    fun get i
			=
			get' i
			except
			    EXPAND = OTHER;

		    fun discard_pass1_info ()
			=
			int_hash_table::clear m;
		end;

		fun getval (VAR   v) => get v;
		    getval (LABEL v) => get v;
		    getval (INT   _) => CONST;
	     #      getval (REAL  _) => REAL;
		    getval _         => OTHER;
		end;

		fun call (v, args)
		    =
		    case (getval v)   

			FUN { call, within=>REF FALSE, ... }
                            =>
                            inc call;

			FUN { call, within=>REF TRUE, unroll_call, args=>vl, invariant, ... }
			    => 
			    { fun g (VAR x ! args, x' ! vl, i ! inv) =>
				      (i and x==x') ! g (args, vl, inv);
				   g( _ ! args, _ ! vl, i ! inv) =>
				      FALSE ! g (args, vl, inv);
				   g _ => NIL; end;
			      inc call; inc unroll_call;
				invariant := g (args, vl,*invariant);
			    };

			ARG { savings, ... } => inc savings;

			SEL { savings } => inc savings;

			_ => ();
		    esac;

		fun escape v
                    =
                    case (getval v)
			FUN { escape, ... } => inc escape;
			ARG { escape, ... } => inc escape;
			REC { escape, ... } => inc escape;
			_ => ();
                    esac;

		fun escapeargs v
                    =
                    case (getval v)
			FUN { escape, ... }          =>   inc escape;
			ARG { escape, savings, ... } => { inc escape;  inc savings; };
			SEL { savings   }            =>   inc savings;
			REC { escape, ... }          =>   inc escape;
			_ => ();
                    esac;

		fun unescapeargs v
                    =
                    case (getval v)
			FUN { escape,          ... } =>   dec escape;
			ARG { escape, savings, ... } => { dec escape;  dec savings; };
			SEL { savings              } =>   dec savings;
			REC { escape,          ... } =>   dec escape;
			_ => ();
                    esac;

		fun notearg   v = (note (v, ARG { escape=>REF 0, savings=>REF 0, record=>REF [] } ));
		fun noteother v = ();  #  note (v, OTHER) 
		fun notereal  v = noteother v;  #  note (v, REAL) 

		fun enter level (_, f, vl, _, e)
		    = 
		    {   note ( f,
			       FUN { escape => REF 0,
				     call   => REF 0,
				     size   => REF 0,
				     args => vl,
				     body => e,
				     within      => REF FALSE,
				     unroll_call => REF 0, 
				     invariant   => REF (map (fn _ = cginvariant) vl),
				     level
				   }
			     );

			apply notearg vl;
		    };


		fun noterec (w, vl, size)
		    =
		    note (w, REC { size, escape=>REF 0, vars=>vl } );


		fun notesel (i, v, w)
		    =
		    {   note (w, SEL { savings=>REF 0 } );

			case (getval v)

			    ARG { savings, record, ... }
                                =>
                                {   inc savings;
				    record := (i, w) ! *record;
                                };

			   _ => ();
			esac;
		    };


		fun setsize (f, n)
		    =
		    case (get f)   
			FUN { size, ... } => {  size := n;  n;  };
		       _ => raise exception FAIL "Expand: setsize: not a FUN";
		    esac;


		fun incsave (v, k)
		    =
		    case (getval v)
			ARG { savings, ... } => savings := *savings + k;
			SEL { savings      } => savings := *savings + k;
			_ => ();
		    esac;


		fun setsave (v, k)
		    =
		    case (getval v)
			ARG { savings, ... } => savings := k;
			SEL { savings      } => savings := k;
			_ => ();
		    esac;


		fun savesofar v
		    =
		    case (getval v)
			ARG { savings, ... } => *savings;
			SEL { savings      } => *savings;
			_ => 0;
		    esac;


		fun within f func arg
		    =
		    case (get f)   
			 FUN { within => w, ... }
                             =>
                             {   w := TRUE;

                                 func arg
                                 before
                                     (w := FALSE);
                             };
			_ => raise exception FAIL "Expand: within: f is not a FUN";
		    esac;


		recursive val prim
		    =
		    fn (level, vl, e)
			=
			{   fun vbl (VAR v)
                                    =>
                                    case (get v)
                                        REC _ => 0;
                                        _     => 1;
                                    esac;

				vbl _ => 0;
			    end;

			    nonconst = sum vbl vl;
			    sl = map savesofar vl;
			    afterwards = pass1 level e;
			    zl = map savesofar vl;
			    overhead = length vl + 1;
			    potential = overhead;

			    savings = case nonconst   
					  1 => potential;
					  2 => potential / 4;
					  _ => 0;
				      esac;

			    fun app3 f
				=
				loop
				where
				    fun loop (a ! b, c ! d, e ! r)
                                            =>
                                            {   f (a, c, e);
                                                loop (b, d, r);
                                            };

					loop _ => ();
				    end;
				end;

			    app3 (fn (v, s, z) =  setsave (v, s + savings + (z-s)))
                                 (vl, sl, zl);

			    overhead+afterwards;
			}

		also
		primreal
		    =
		    fn (level, (_, vl, w, _, e))
			=
			{   notereal w;

			    apply (fn v = incsave (v, 1))  vl;

			    2*(length vl + 1) + pass1 level e;
			}

		# *****************************************************************
		#  pass1: gather info on code.                                     
		# *****************************************************************
		also
		pass1:  Int -> Fps_Expression -> Int
		    =
		    (fn level
                        =
			fn  RECORD(_, vl, w, e)
				=>
				{   len = length vl;
				    apply (escape o #1) vl;
				    noterec (w, vl, len);
				    2 + len + pass1 level e;
				};

			    SELECT (i, v, w, _, e) => { notesel (i, v, w);  1 + pass1 level e;};
			    OFFSET (i, v, w,    e) => { noteother w;        1 + pass1 level e;};

			    APPLY (f, vl)
                                =>
                                {   call (f, vl); 
				    apply escapeargs vl; 
				    1 + ((length vl + 1) / 2);
                                };

			    MUTUALLY_RECURSIVE_FNS (l, e)
                                => 
				{   apply (enter level) l; 

				    sum (fn (_, f, _, _, e)
                                             = setsize (f, within f (pass1 (level+1)) e)
                                        )
                                        l 
					+ length l
                                        + pass1 level e;
                                };

			    SWITCH (v, _, el)
                                =>
                                {   len = length el;
				    jumps = 4 + len;
				    branches = sum (pass1 level) el;
				    incsave (v, muldiv (branches, len - 1, len) + jumps);
				    jumps+branches;
				};

			    BRANCH(_, vl, c, e1, e2)
                                =>
			        {   fun vbl (VAR v)
                                            =>
                                            case (get v)
                                                REC _ => 0;
                                                _     => 1;
                                            esac;

				        vbl _ => 0;
                                    end;

				    nonconst = sum vbl vl;
				    sl = map savesofar vl;

				    branches = pass1 level e1 + pass1 level e2;
				    zl = map savesofar vl;

				    overhead = length vl;
				    potential = overhead + branches / 2;

				    savings
                                        =
                                        case nonconst   
					    1 => potential;
					    2 => potential / 4;
					    _ => 0;
                                        esac;

				    fun app3 f
                                        =
				        loop
                                        where
                                            fun loop (a ! b, c ! d, e ! r)
                                                    =>
                                                    {   f (a, c, e);
                                                        loop (b, d, r);
                                                    };

						loop _ => ();
                                            end;
					end;

				    app3 (fn (v, s, z) =  setsave (v, s + savings + (z-s) / 2))
                                         (vl, sl, zl);

				    overhead+branches;
				};

			    LOOKER(_, vl, w, _, e)
                                =>
                                {   noteother w;
                                    prim (level, vl, e);
                                };

			    SETTER(_, vl, e)
                                =>
                                prim (level, vl, e);

			    ARITH (args as (p::ARITH { kind=>p::FLOAT 64, ... }, _, _, _, _))
                                =>
			        primreal (level, args);

			    ARITH (args as (p::ROUND _, _, _, _, _))
                                =>
                                primreal (level, args);

			    ARITH(_, vl, w, _, e)
                                =>
                                {   noteother w;
                                    prim (level, vl, e);
                                };

			    PURE (p::PURE_ARITH { kind=>p::FLOAT 64, ... },[v], w, _, e)
                                => 
				{   notereal w;
                                    incsave (v, 1);
                                    4+(pass1 level e);
                                };

			    PURE (p::REAL { tokind=>p::FLOAT 64, ... }, vl, w, _, e)
                                =>
				{   notereal w;
                                    prim (level, vl, e);
                                };

			    PURE(_, vl, w, _, e)
                                =>
                                {   noteother w;
                                    prim (level, vl, e);
                                };

			    RAW_C_CALL (k, l, p, vl, wtl, e)
                                =>
			        {   apply (noteother o #1) wtl;
                                    prim (level, vl, e);
                                };
			end
		    );				# fn pass1


		# *******************************************************************
		#  substitute (args, wl, e, alpha) : substitute args for wl in e.        
		#  If alpha=TRUE, also rename all namings.                          
		# *******************************************************************
		fun substitute (args, wl, e, alpha)
		    =
		    {   exception ALPHA;

			my vm: int_hash_table::Hash_Table( Value )
			    =
			    int_hash_table::make_table (16, ALPHA);

			fun get (v, default)
			    =
			    the_else (int_hash_table::find vm v, default);

			enter = int_hash_table::set vm;

			fun use (v0 as VAR   v) => get (v, v0);
			    use (v0 as LABEL v) => get (v, v0);
			    use x => x;
			end;


			fun def v
			    =
			    if alpha
				 w = copy_lvar v; 
				 enter (v, VAR w);
				 w;
			    else
				 v;
			    fi; 


			fun defl v
			    =
			    if alpha
				 w = copy_lvar v; 
				 enter (v, label w);
				 w;
			    else
				 v;
			    fi;

			fun bind (a ! args, w ! wl)
				=> 
				{   share_name (w, a);
				    enter     (w, a);
				    bind (args, wl);
				};

			    bind _ => ();
			end;

			recursive val g
			    =
			    fn RECORD (k, vl, w,    ce) => RECORD (k, map (map1 use) vl, def w, g ce);
			       SELECT (i, v,  w, t, ce) => SELECT (i, use v, def w, t, g ce);
			       OFFSET (i, v,  w,    ce) => OFFSET (i, use v, def w, g ce);

			       APPLY (v, vl)
                                   =>
                                   APPLY (use v, map use vl);

			       MUTUALLY_RECURSIVE_FNS (l, ce)
				   => 
				   {   # Careful: order of evaluation
				       # is important here:
				       #	
				       fun h1 (fk, f, vl, cl, e)
					   =
					   (fk, defl f, vl, cl, e);

				       fun h2 (fk, f', vl, cl, e)
					   =
					   {   vl' = map def vl;
					       e'= g e;
					       (fk, f', vl', cl, e');
					   };

				       MUTUALLY_RECURSIVE_FNS (map h2 (map h1 l), g ce);
				   };

			       SWITCH (v, c,  l) => SWITCH (use v, def c, map g l);
			       SETTER (i, vl, e) => SETTER (i, map use vl, g e);

			       LOOKER (i, vl, w, t, e) => LOOKER (i, map use vl, def w, t, g e);
			       ARITH  (i, vl, w, t, e) => ARITH  (i, map use vl, def w, t, g e);
			       PURE   (i, vl, w, t, e) => PURE   (i, map use vl, def w, t, g e);

			       RAW_C_CALL (k, l, p, vl, wtl, e)
				   =>
				   RAW_C_CALL (k, l, p, map use vl, map (fn (w, t) = (def w, t)) wtl, g e);

			       BRANCH (i, vl, c, e1, e2) => BRANCH (i, map use vl, def c, g e1, g e2);
			  end ;

			bind (args, wl);

			g e;
		    };

		fun whatsave (acc, size, (v: Value) ! vl, a ! al)
			=>
			if (acc >= size)
			     acc;
			else
			    case (get a)   

				ARG { escape=>REF esc, savings=>REF save, record=>REF rl }
				    =>
				    whatsave (acc+this - muldiv (acc, this, size), size, nvl, nal)
				    where
					my (this, nvl: List( Value ), nal)
					    =
					    case (getval v)   

						FUN { escape=>REF 1, ... }
						    =>
						    ( esc > 0   ??  save   ::  6+save,
						      vl,
						      al
						    );

						FUN _ => (save, vl, al);

						REC { escape=>REF ex, vars, size }
						    =>
						    {   exception CHASE;

							fun chasepath (v, OFFP 0)
								=>
								v;

							    chasepath (v, SELP (i, p))
								=>
								case (getval v)   

								     REC { vars, ... }
									 =>
									 chasepath (chasepath (list::nth (vars, i)), p);

								    _ => raise exception CHASE;
								esac;

							    chasepath _ => raise exception CHASE;
							end;

							fun loop ([], nvl, nal)
								=> 
								( (ex>1 or esc>0)  ??  save  ::  save+size+2,
								  nvl,
								  nal
								);

							    loop((i, w) ! rl, nvl, nal)
								=>
								loop ( rl,
								       chasepath (list::nth (vars, i)) ! nvl,
								       w ! nal
								     );
							end;

							loop (rl, vl, al)
							except
							    CHASE => (0, vl, al);
							    (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => (0, vl, al);
							end ;
						    }; 

					#       REAL  => (save, vl, al)

						CONST => (save, vl, al);

						_ => (0, vl, al);

					    esac;
				    end;

			       SEL { savings=>REF save }
				   =>
				   whatsave (acc + this - muldiv (acc, this, size), size, vl, al)
				   where
				       this = case v
						  VAR v' => case (get v')   
								FUN _  => save;
								REC _  => save;
								_      => 0;
							    esac;

						  _      => save;
					      esac;
				   end;

				 _ => raise exception FAIL "Expand: whatsave: not ARG nor SEL";
			     esac;
			 fi;

		     whatsave (acc, size, _, _)
                         =>
                         acc;
		 end;


		 ################################################################
		 # Should a function application be inlined?
		 ################################################################
		 #
		 fun should_expand
			 ( d,		# path length from entry to current function 
			   u,		# unroll level 
			   e as APPLY (v, vl), 
			   FUN { escape, call, unroll_call, size=>REF size, args, body,
					   level, within=>REF within, ... }
			 )
			 =>
			 if (*call + *escape == 1)
                             FALSE;
			 else
			     stupidloop 	  #  prevent infinite loops  at compile time
				 = 
				 case (v, body) 
				     (VAR vv,   APPLY (VAR   v', _)) => vv==v'; 
				     (LABEL vv, APPLY (LABEL v', _)) => vv==v'; 
				     _ => FALSE;
				 esac;

			     calls = case u
                                         UNROLL _ => *unroll_call;
					 _        => *call;
				     esac;

			     small_fun_size
				 =
				 case u
                                     UNROLL _ =>  0;
				     _        => 50;
				 esac;

			     savings
				 =
				 whatsave (0, size, vl, args);

			     predicted
				 = 
				 {   real_increase = size-savings-(1+length vl);

				     real_increase * calls - 
				     # Don't subtract off the original body if
				     # the original body is huge (because we might
				     # have guessed wrong and the consequences are
				     # too nasty for big functions); or if we're
				     # in unroll mode
				     #	
				     if (size < small_fun_size)  size;
                                     else                        0;
                                     fi;
				 };

			     depth = 2;
			     max   = 2;

			     if (FALSE and debug)
				  prettyprint_fps::print_fps_expression e;
				  debugprint (int::to_string predicted); debugprint "   "; 
				  debugprint (int::to_string bodysize); debugprint "\n";
			     fi;

			     not stupidloop
			     and case u
				     UNROLL lev
                                         => 
					 # Unroll if: the loop body doesn't make function
					 # calls or "unroll_recursion" is turned on; and 
					 # we are within the definition of the function; 
					 # and it looks like things won't grow too much.
					 #
					 (*cg::unroll_recursion or level >= lev)
					 and within and predicted <= bodysize;

				     NO_UNROLL
                                         =>
					 *unroll_call == 0 and
					 not within and
					 (predicted <= bodysize  
					   or (*escape==0 and calls == 1));

				     HEADERS => FALSE;  #  shouldn't get here 

				     ALL =>
					 (predicted <= bodysize  
					   or (*escape==0 and calls == 1));
				 esac;

			 fi;

		     should_expand _
			 =>
			 raise exception FAIL "Expand: should_expand: unexpected argument";
		end;

		Decision = YES  { formals: List( Highcode_Variable ), body: Fps_Expression } 
			 | NO  Int	# How many no's in a row.
			 ;
		# There is really no point in
		# making decisions a REF.
		#  This should be changed one day.				# XXX BUGGO FIXME
		#	
		my decisions:   Ref( List( Decision ) )
                           =    REF NIL;

		fun decide_yes x
		    =
		    decisions := YES x ! *decisions;

		fun decide_no ()
		    =
		    decisions :=  case *decisions
                                      NO n ! rest =>  NO (n+1) ! rest;
				      d           =>  NO 1 ! d;
				  esac;


		# *******************************************************************
		#  pass2: mark function applications to be inlined.                  
		# *******************************************************************

		fun pass2
                    ( d,	#  path length from start of current function 
		      u,	#  unroll-info 
		      e		#  expression to traverse 
		    )
		    =
		    case e

			RECORD (k, vl, w,    ce) => pass2 (d+2+length vl, u, ce);
			SELECT (i, v,  w, t, ce) => pass2 (d+1, u, ce);
			OFFSET (i, v,  w,    ce) => pass2 (d+1, u, ce);

			APPLY (v, vl)
			    => 
			    case (getval v)
				info as FUN { args, body, ... }
				    =>
				    (should_expand (d, u, e, info))
					??   decide_yes { formals=>args, body }
					::   decide_no ();

				_ => decide_no ();
			   esac;

			MUTUALLY_RECURSIVE_FNS (l, ce)
			    => 
			    {   fun fundef (NO_INLINE_INTO, _, _, _, _)
					=>
					();

				    fundef (fk, f, vl, cl, e)
					=>
					case (get f)

					    FUN { level, within, escape=>REF escape, ... }
						=>
						{   u' = case u
                                                             UNROLL _ => UNROLL level;
							     _        => u;
							 esac;

						    fun conform ((VAR x) ! r, z ! l)
							    =>
							    (x==z) and conform (r, l);

							conform (_ ! r, _ ! l) => FALSE;
							conform (   [],    []) => TRUE;
							conform _              => FALSE;
						    end;

						    within := TRUE; 

						    pass2 (0, u', e)
						    before
							within := FALSE;
					       };

					   _ => ();	#  Cannot happen 
					esac;
				end;

				apply fundef l;

				pass2 (d+length l, u, ce);

			     };

			SWITCH (v, c, l)
			    =>
			    apply  (fn e = pass2 (d+2, u, e))  l;

			( LOOKER (_, _, _, _, e)
			| ARITH  (_, _, _, _, e)
			| PURE   (_, _, _, _, e)
			| SETTER (_, _, e)
			| RAW_C_CALL (_, _, _, _, _, e)
			)   =>
			    pass2 (d+2, u, e);

			BRANCH (i, vl, c, e1, e2)
			    =>
			    {   pass2 (d+2, u, e1); 
				pass2 (d+2, u, e2);
			    };
		    esac;


		recursive val gamma
		    =
		    fn  RECORD (k, vl, w,    ce) => RECORD (k, vl, w,    gamma ce);
			SELECT (i, v,  w, t, ce) => SELECT (i, v,  w, t, gamma ce);
			OFFSET (i, v,  w,    ce) => OFFSET (i, v,  w,    gamma ce);

			e as APPLY (v, vl) => e;

			MUTUALLY_RECURSIVE_FNS (l, ce)
                            =>
			    MUTUALLY_RECURSIVE_FNS (map fundef l, gamma ce)
                            where
			        fun fundef (z as (NO_INLINE_INTO, _, _, _, _))
                                        =>
                                        z;

				    fundef (z as (fk, f, vl, cl, e))
					=>
					case (get f)   
					    FUN { escape=>REF escape,
						  call,
						  unroll_call,
						  invariant=>REF inv,
						  ...
						}
                                               =>
					       if (escape == 0 and *unroll_call > 0
						   and (*call - *unroll_call > 1 
							   or list::exists (fn t=t) inv)
					       )
						   f' = copy_lvar f;
						   vl' = map copy_lvar vl;

						   fun drop (FALSE ! r, a ! s) => a ! drop (r, s);
						       drop (TRUE ! r, _ ! s) => drop (r, s);
						       drop _ => NIL;
						   end;

						   newformals
                                                       =
						       label f' ! map VAR (drop (inv, vl'));

						   e' =substitute (newformals,
								      f ! drop (inv, vl),
								      gamma e,
								      FALSE); 

						   click "!"; debugprint (int::to_string f);

						   enter 0 (fk, f', vl', cl, e');

						   (fk, f, vl, cl, MUTUALLY_RECURSIVE_FNS([(fk, f', vl', cl, e')], 
								   APPLY (label f', map VAR vl)));

					       else
						    (fk, f, vl, cl, gamma e);
					       fi;

					  _ => z; 		#  Cannot happen 
				      esac;
				 end;
			    end;

			SWITCH (v, c, l)        =>  SWITCH (v, c, map gamma l);
			LOOKER (i, vl, w, t, e) =>  LOOKER (i, vl, w, t, gamma e);

			ARITH  (i, vl, w, t, e)  =>  ARITH  (i, vl, w, t, gamma e);
			PURE   (i, vl, w, t, e)  =>  PURE   (i, vl, w, t, gamma e);
			SETTER (i, vl, e)        =>  SETTER (i, vl,       gamma e);

			RAW_C_CALL (k, l, p, vl, wtl, e) =>  RAW_C_CALL (k, l, p, vl, wtl, gamma e);
			BRANCH (i, vl, c, e1, e2)        =>  BRANCH (i, vl, c, gamma e1, gamma e2);
		end ;


		recursive val beta
		    =
		    fn  RECORD (k, vl, w,    ce) => RECORD (k, vl, w,    beta ce);
			SELECT (i, v,  w, t, ce) => SELECT (i, v,  w, t, beta ce);
			OFFSET (i, v,  w,    ce) => OFFSET (i, v,  w,    beta ce);

			e as APPLY (v, vl)
                            => 
			    case *decisions

				YES { formals, body } ! rest
                                    =>
				    {   click "^";

				        case v
                                            VAR vv => debugprint (int::to_string vv);
                                            _      => ();
                                        esac;

					debugflush();
					decisions := rest;
					substitute (vl, formals, body, TRUE);
                                    };

				 NO 1 ! rest => { decisions := rest; e;};
				 NO n ! rest => { decisions := NO (n - 1) ! rest; e;};
				 [] => e;	# Cannot happen.
                            esac;

			MUTUALLY_RECURSIVE_FNS (l, ce)
                            => 
			    MUTUALLY_RECURSIVE_FNS (map fundef l, beta ce)
                            where
			        fun fundef (z as (NO_INLINE_INTO, _, _, _, _)) => z;
				    fundef (fk, f, vl, cl, e) => (fk, f, vl, cl, beta e);
                                end;
			    end;

			SWITCH (v, c, l)        =>  SWITCH (v, c, map beta l);
			LOOKER (i, vl, w, t, e) =>  LOOKER (i, vl, w, t, beta e);
			ARITH (i, vl, w, t, e)  =>  ARITH (i, vl, w, t, beta e);

			PURE (i, vl, w, t, e)   =>  PURE (i, vl, w, t, beta e);
			SETTER (i, vl, e)       =>  SETTER (i, vl, beta e);

			RAW_C_CALL (k, l, p, vl, wtl, e) =>  RAW_C_CALL (k, l, p, vl, wtl, beta e);
			BRANCH (i, vl, c, e1, e2)        =>  BRANCH (i, vl, c, beta e1, beta e2);
		end;



		fun pass2_beta (mode, e)
		     =
		     {   pass2 (0, mode, e);
			 discard_pass1_info();
			 debugprint "Expand: finishing pass2\n"; debugflush();

			 case *decisions

			     [NO _] => {   debugprint "No expansions to do.\n";
					   debugflush();
					   e;
				       };

			    _ => {   decisions := reverse *decisions;
				     debugprint "Beta: ";

				     beta e
				     before
					 {   debugprint "\n";
					     debugflush();
					 };
				 };
			 esac;
		     };

		gamma
		    =
		    fn c
			=
			{   debugprint "Gamma: ";
			    gamma c
			    before
				{   debugprint "\n";
				    debugflush();
				};
			};

		#  Body of expand 
		notearg fvar;
		apply notearg fargs;

	#	if *cg::printit then prettyprint_fps::print_fps_expression cexp
		       

		 debugprint("Expand: pass1: ");
		 debugprint (int::to_string (pass1 0 cexp));
		 debugprint "\n";
		 debugflush();

		 if unroll

		     debugprint(" (unroll)\n");
		     debugflush();

		     e' = pass2_beta (UNROLL 0, cexp);

		     if *clicked_any 

			 do_fn_inlining
                           { function=>(fkind, fvar, fargs, ctyl, e'),
			     table=>typtable,
			     bodysize, click, unroll,
			     after_closure,
			     do_headers
                           };
		     else
                         # debugprint("\nExpand\n"); 
			 # debugflush();
			 # (fkind, fvar, fargs, ctyl, pass2_beta (ALL, cexp));

			 (fkind, fvar, fargs, ctyl, e');
		     fi;

		 else

		    if *cg::unroll

			  debugprint(" (headers)\n");
			  debugflush();

			  e' = if do_headers  gamma cexp; else cexp;fi;

			  if *clicked_any

			      do_fn_inlining
				{
				  function => (fkind, fvar, fargs, ctyl, e'),
				  table    => typtable,
				  bodysize,
				  click,
				  unroll,
				  after_closure, 
				  do_headers  => FALSE
				};
			  else
			      debugprint(" (non-unroll 1)\n");
			      debugflush();
			      (fkind, fvar, fargs, ctyl, pass2_beta (NO_UNROLL, e'));
			  fi;

		   else
		       debugprint(" (non-unroll 2)\n");
		       debugflush();
		       (fkind, fvar, fargs, ctyl, pass2_beta (ALL, cexp));
		   fi;
	     fi;
	  };			# fun do_fn_inlining

    end; 			#  toplevel stipulate 
};				#  generic package do_fn_inlining_g



## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
