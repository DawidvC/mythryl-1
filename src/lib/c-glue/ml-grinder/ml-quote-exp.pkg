/*
 * This file has been automatically generated
 * from "/home/leunga/Yale/sml-dist/src/MLRISC/Tools/FakeSMLAst/ast.api"
 * by Allen Leung's lib7_quote_g (version 1.0)
 * Please send comments and suggestions to leunga@{ cs.nyu.edu, dorsai.org }
 * [lib7_quote_g is built with the ml_grinder library (version 1.2.4)]
 */

package ml_quote_exp {
   fun q_location _ = raise exception FAIL "q_location"
   package g = ml_grinder
   package a = g::Ast
   package u = ml_grinder::AstUtil
   package private {
      nil = a::LISTexp([], NULL)
      lit = a::LITexp
      consx = a::CONSexp
      fun cons (h, a::LISTexp (t, r)) = a::LISTexp (h . t, r)
        | cons (h, t) = a::LISTexp([h], THE t)
   
   }
   fun q_string s = private::lit (a::STRINGlit s)
   fun q_int i = private::lit (a::INTlit i)
   fun q_int32 i = private::lit (a::INT32lit i)
   fun q_intinf i = private::lit (a::INTINFlit i)
   fun q_word w = private::lit (a::WORDlit w)
   fun q_word32 w = private::lit (a::WORD32lit w)
   fun q_char c = private::lit (a::CHARlit c)
   fun q_bool b = private::lit (a::BOOLlit b)
   fun q_list f [] = private::nil
     | q_list f (h . t) = private::cons (f h, q_list f t)
   fun q_option f_'a (NULL) = private::consx (a::IDENT ([], "NULL"), NULL)
     | q_option f_'a (THE arg) = private::consx (a::IDENT ([], "THE"), THE (f_'a arg))
   fun q_ref f_'a (REF arg) = private::consx (a::IDENT ([], "REF"), THE (f_'a arg))
   local
      tmp0 = ["A"]
      tmp1 = a::IDENT (tmp0, "DATATYPEdecl")
      tmp2 = a::IDENT (tmp0, "EXCEPTIONdecl")
      tmp3 = a::IDENT (tmp0, "FUNdecl")
      tmp4 = a::IDENT (tmp0, "RTLdecl")
      tmp5 = a::IDENT (tmp0, "RTLSIGdecl")
      tmp6 = a::IDENT (tmp0, "VALdecl")
      tmp7 = a::IDENT (tmp0, "VALSIGdecl")
      tmp8 = a::IDENT (tmp0, "TYPESIGdecl")
      tmp9 = a::IDENT (tmp0, "LOCALdecl")
      tmp10 = a::IDENT (tmp0, "SEQdecl")
      tmp11 = a::IDENT (tmp0, "PACKAGE_DECL")
      tmp12 = a::IDENT (tmp0, "GENERIC_DECL)
      tmp13 = a::IDENT (tmp0, "PACKAGE_API_decl")
      tmp14 = a::IDENT (tmp0, "API_DECL")
      tmp15 = a::IDENT (tmp0, "SHARINGdecl")
      tmp16 = a::IDENT (tmp0, "OPENdecl")
      tmp17 = a::IDENT (tmp0, "GENERICARGdecl")
      tmp18 = a::IDENT (tmp0, "INCLUDESIGdecl")
      tmp19 = a::IDENT (tmp0, "INFIXdecl")
      tmp20 = a::IDENT (tmp0, "INFIXRdecl")
      tmp21 = a::IDENT (tmp0, "NONFIXdecl")
      tmp22 = a::IDENT (tmp0, "MARKdecl")
      tmp23 = a::IDENT (tmp0, "ARCHdecl")
      tmp24 = a::IDENT (tmp0, "@@@")
      tmp25 = a::IDENT (tmp0, "BITSORDERINGdecl")
      tmp26 = a::IDENT (tmp0, "FORMATdecl")
      tmp27 = a::IDENT (tmp0, "ARCHKINDdecl")
      tmp28 = a::IDENT (tmp0, "ENDIANESSdecl")
      tmp29 = a::IDENT (tmp0, "STORAGEdecl")
      tmp30 = a::IDENT (tmp0, "LOCATIONSdecl")
      tmp31 = a::IDENT (tmp0, "NAMEdecl")
      tmp32 = a::IDENT (tmp0, "VERSIONdecl")
      tmp33 = a::IDENT (tmp0, "ASSEMBLYCASEdecl")
      tmp34 = a::IDENT (tmp0, "INSTRUCTIONdecl")
      tmp35 = a::IDENT (tmp0, "DEBUGdecl")
      tmp36 = a::IDENT (tmp0, "RESOURCEdecl")
      tmp37 = a::IDENT (tmp0, "CPUdecl")
      tmp38 = a::IDENT (tmp0, "PIPELINEdecl")
      tmp39 = a::IDENT (tmp0, "LATENCYdecl")
      tmp40 = a::IDENT (tmp0, "IDsig")
      tmp41 = a::IDENT (tmp0, "WHEREsig")
      tmp42 = a::IDENT (tmp0, "WHERETYPEsig")
      tmp43 = a::IDENT (tmp0, "DECLsig")
      tmp44 = a::IDENT (tmp0, "TYPEshare")
      tmp45 = a::IDENT (tmp0, "STRUCTshare")
      tmp46 = a::IDENT (tmp0, "WORDlit")
      tmp47 = a::IDENT (tmp0, "WORD32lit")
      tmp48 = a::IDENT (tmp0, "INTlit")
      tmp49 = a::IDENT (tmp0, "INT32lit")
      tmp50 = a::IDENT (tmp0, "INTINFlit")
      tmp51 = a::IDENT (tmp0, "STRINGlit")
      tmp52 = a::IDENT (tmp0, "CHARlit")
      tmp53 = a::IDENT (tmp0, "BOOLlit")
      tmp54 = a::IDENT (tmp0, "REALlit")
      tmp55 = a::IDENT (tmp0, "LITexp")
      tmp56 = a::IDENT (tmp0, "IDexp")
      tmp57 = a::IDENT (tmp0, "CONSexp")
      tmp58 = a::IDENT (tmp0, "LISTexp")
      tmp59 = a::IDENT (tmp0, "TUPLEexp")
      tmp60 = a::IDENT (tmp0, "VECTORexp")
      tmp61 = a::IDENT (tmp0, "RECORDexp")
      tmp62 = a::IDENT (tmp0, "APPexp")
      tmp63 = a::IDENT (tmp0, "IFexp")
      tmp64 = a::IDENT (tmp0, "LETexp")
      tmp65 = a::IDENT (tmp0, "SEQexp")
      tmp66 = a::IDENT (tmp0, "RAISEexp")
      tmp67 = a::IDENT (tmp0, "HANDLEexp")
      tmp68 = a::IDENT (tmp0, "CASEexp")
      tmp69 = a::IDENT (tmp0, "TYPEDexp")
      tmp70 = a::IDENT (tmp0, "LAMBDAexp")
      tmp71 = a::IDENT (tmp0, "MARKexp")
      tmp72 = a::IDENT (tmp0, "BITSLICEexp")
      tmp73 = a::IDENT (tmp0, "LOCexp")
      tmp74 = a::IDENT (tmp0, "ASMexp")
      tmp75 = a::IDENT (tmp0, "TYPEexp")
      tmp76 = a::IDENT (tmp0, "RTLexp")
      tmp77 = a::IDENT (tmp0, "CONTexp")
      tmp78 = a::IDENT (tmp0, "I8")
      tmp79 = a::IDENT (tmp0, "I16")
      tmp80 = a::IDENT (tmp0, "I32")
      tmp81 = a::IDENT (tmp0, "I64")
      tmp82 = a::IDENT (tmp0, "FSINGLE")
      tmp83 = a::IDENT (tmp0, "FDOUBLE")
      tmp84 = a::IDENT (tmp0, "LOWERCASE")
      tmp85 = a::IDENT (tmp0, "UPPERCASE")
      tmp86 = a::IDENT (tmp0, "VERBATIM")
      tmp87 = a::IDENT (tmp0, "IDsexp")
      tmp88 = a::IDENT (tmp0, "APPsexp")
      tmp89 = a::IDENT (tmp0, "DECLsexp")
      tmp90 = a::IDENT (tmp0, "CONSTRAINEDsexp")
      tmp91 = a::IDENT (tmp0, "IDty")
      tmp92 = a::IDENT (tmp0, "TYVARty")
      tmp93 = a::IDENT (tmp0, "INTVARty")
      tmp94 = a::IDENT (tmp0, "VARty")
      tmp95 = a::IDENT (tmp0, "APPty")
      tmp96 = a::IDENT (tmp0, "FUNty")
      tmp97 = a::IDENT (tmp0, "TUPLEty")
      tmp98 = a::IDENT (tmp0, "RECORDty")
      tmp99 = a::IDENT (tmp0, "POLYty")
      tmp100 = a::IDENT (tmp0, "LAMBDAty")
      tmp101 = a::IDENT (tmp0, "CELLty")
      tmp102 = a::IDENT (tmp0, "INTkind")
      tmp103 = a::IDENT (tmp0, "TYPEkind")
      tmp104 = a::IDENT (tmp0, "IDpat")
      tmp105 = a::IDENT (tmp0, "CONSpat")
      tmp106 = a::IDENT (tmp0, "WILDpat")
      tmp107 = a::IDENT (tmp0, "ASpat")
      tmp108 = a::IDENT (tmp0, "LITpat")
      tmp109 = a::IDENT (tmp0, "LISTpat")
      tmp110 = a::IDENT (tmp0, "TUPLEpat")
      tmp111 = a::IDENT (tmp0, "VECTORpat")
      tmp112 = a::IDENT (tmp0, "RECORDpat")
      tmp113 = a::IDENT (tmp0, "TYPEDpat")
      tmp114 = a::IDENT (tmp0, "NOTpat")
      tmp115 = a::IDENT (tmp0, "ORpat")
      tmp116 = a::IDENT (tmp0, "ANDpat")
      tmp117 = a::IDENT (tmp0, "WHEREpat")
      tmp118 = a::IDENT (tmp0, "NESTEDpat")
      tmp119 = a::IDENT (tmp0, "IDENT")
      tmp120 = a::IDENT (tmp0, "CLAUSE")
      tmp121 = a::IDENT (tmp0, "FUNbind")
      tmp122 = a::IDENT (tmp0, "CELLdecl")
      tmp123 = a::IDENT (tmp0, "LOCbind")
      tmp124 = a::IDENT (tmp0, "LITTLE")
      tmp125 = a::IDENT (tmp0, "BIG")
      tmp126 = a::IDENT (tmp0, "VLIW")
      tmp127 = a::IDENT (tmp0, "SUPERSCALAR")
      tmp128 = a::IDENT (tmp0, "FORMATbind")
      tmp129 = a::IDENT (tmp0, "FIELD")
      tmp130 = a::IDENT (tmp0, "WIDTH")
      tmp131 = a::IDENT (tmp0, "RANGE")
      tmp132 = a::IDENT (tmp0, "NOcnv")
      tmp133 = a::IDENT (tmp0, "CELLcnv")
      tmp134 = a::IDENT (tmp0, "FUNcnv")
      tmp135 = a::IDENT (tmp0, "DATATYPEbind")
      tmp136 = a::IDENT (tmp0, "DATATYPEEQbind")
      tmp137 = a::IDENT (tmp0, "EXCEPTIONbind")
      tmp138 = a::IDENT (tmp0, "EXCEPTIONEQbind")
      tmp139 = a::IDENT (tmp0, "CONSbind")
      tmp140 = a::IDENT (tmp0, "FLAGon")
      tmp141 = a::IDENT (tmp0, "FLAGoff")
      tmp142 = a::IDENT (tmp0, "FLAGid")
      tmp143 = a::IDENT (tmp0, "DELAY_ERROR")
      tmp144 = a::IDENT (tmp0, "DELAY_NONE")
      tmp145 = a::IDENT (tmp0, "DELAY_ALWAYS")
      tmp146 = a::IDENT (tmp0, "DELAY_TAKEN")
      tmp147 = a::IDENT (tmp0, "DELAY_NONTAKEN")
      tmp148 = a::IDENT (tmp0, "DELAY_IF")
      tmp149 = a::IDENT (tmp0, "BRANCHforwards")
      tmp150 = a::IDENT (tmp0, "BRANCHbackwards")
      tmp151 = a::IDENT (tmp0, "WORDmc")
      tmp152 = a::IDENT (tmp0, "EXPmc")
      tmp153 = a::IDENT (tmp0, "STRINGasm")
      tmp154 = a::IDENT (tmp0, "ASMasm")
      tmp155 = a::IDENT (tmp0, "TEXTasm")
      tmp156 = a::IDENT (tmp0, "EXPasm")
      tmp157 = a::IDENT (tmp0, "TYPEbind")
      tmp158 = a::IDENT (tmp0, "VALbind")
      tmp159 = a::IDENT (tmp0, "SIGNED")
      tmp160 = a::IDENT (tmp0, "UNSIGNED")
      tmp161 = a::IDENT (tmp0, "VARtv")
      tmp162 = a::IDENT (tmp0, "INTtv")
      tmp163 = a::IDENT (tmp0, "LITrtl")
      tmp164 = a::IDENT (tmp0, "IDrtl")
      tmp165 = a::IDENT (tmp0, "COMPOSITErtl")
      tmp166 = a::IDENT (tmp0, "CPUbind")
      tmp167 = a::IDENT (tmp0, "PIPELINEbind")
      tmp168 = a::IDENT (tmp0, "LATENCYbind")
      tmp169 = a::IDENT (tmp0, "PIPELINE")
      tmp170 = a::IDENT (tmp0, "ORcycle")
      tmp171 = a::IDENT (tmp0, "REPEATcycle")
      tmp172 = a::IDENT (tmp0, "IDcycle")
   in 
      fun q_loc arg = q_location arg
      fun q_range arg = (fn (x_0, x_1) => a::TUPLEexp [q_int x_0, q_int x_1]
                        ) arg
      and q_id arg = q_string arg
      and q_guard arg = q_option q_exp arg
      and q_opcodeencoding arg = q_option (q_list q_int) arg
      and q_cellset arg = q_bool arg
      and q_rtl arg = q_list q_rtlterm arg
      and q_sigconstraint arg = (fn { api_expression, abstract } => a::RECORDexp [("api_expression", q_sigexp api_expression), ("abstract", q_bool abstract)]
                                ) arg
      and q_decl (a::DATATYPEdecl arg) = a::CONSexp (tmp1, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list q_datatypebind x_0, q_list q_typebind x_1]
                                                               ) arg))
        | q_decl (a::EXCEPTIONdecl arg) = a::CONSexp (tmp2, THE (q_list q_exceptionbind arg))
        | q_decl (a::FUNdecl arg) = a::CONSexp (tmp3, THE (q_list q_funbind arg))
        | q_decl (a::RTLdecl arg) = a::CONSexp (tmp4, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_pat x_0, q_exp x_1, q_loc x_2]
                                                          ) arg))
        | q_decl (a::RTLSIGdecl arg) = a::CONSexp (tmp5, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list q_id x_0, q_ty x_1]
                                                             ) arg))
        | q_decl (a::VALdecl arg) = a::CONSexp (tmp6, THE (q_list q_valbind arg))
        | q_decl (a::VALSIGdecl arg) = a::CONSexp (tmp7, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list q_id x_0, q_ty x_1]
                                                             ) arg))
        | q_decl (a::TYPESIGdecl arg) = a::CONSexp (tmp8, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_list q_tyvar x_1]
                                                              ) arg))
        | q_decl (a::LOCALdecl arg) = a::CONSexp (tmp9, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list q_decl x_0, q_list q_decl x_1]
                                                            ) arg))
        | q_decl (a::SEQdecl arg) = a::CONSexp (tmp10, THE (q_list q_decl arg))
        | q_decl (a::PACKAGE_DECL arg) = a::CONSexp (tmp11, THE ((fn (x_0, x_1, x_2, x_3) => a::TUPLEexp [q_id x_0, q_list q_decl x_1, q_option q_sigconstraint x_2, 
                                                                        q_structexp x_3]
                                                                 ) arg))
        | q_decl (a::GENERIC_DECLarg) = a::CONSexp (tmp12, THE ((fn (x_0, x_1, x_2, x_3) => a::TUPLEexp [q_id x_0, q_list q_decl x_1, q_option q_sigconstraint x_2, 
                                                                      q_structexp x_3]
                                                               ) arg))
        | q_decl (a::PACKAGE_API_decl arg) = a::CONSexp (tmp13, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_sigexp x_1]
                                                                    ) arg))
        | q_decl (a::API_DECL arg) = a::CONSexp (tmp14, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_sigexp x_1]
                                                                 ) arg))
        | q_decl (a::SHARINGdecl arg) = a::CONSexp (tmp15, THE (q_list q_share arg))
        | q_decl (a::OPENdecl arg) = a::CONSexp (tmp16, THE (q_list q_ident arg))
        | q_decl (a::GENERICARGdecl arg) = a::CONSexp (tmp17, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_sigconstraint x_1]
                                                                  ) arg))
        | q_decl (a::INCLUDESIGdecl arg) = a::CONSexp (tmp18, THE (q_sigexp arg))
        | q_decl (a::INFIXdecl arg) = a::CONSexp (tmp19, THE ((fn (x_0, x_1) => a::TUPLEexp [q_int x_0, q_list q_id x_1]
                                                             ) arg))
        | q_decl (a::INFIXRdecl arg) = a::CONSexp (tmp20, THE ((fn (x_0, x_1) => a::TUPLEexp [q_int x_0, q_list q_id x_1]
                                                              ) arg))
        | q_decl (a::NONFIXdecl arg) = a::CONSexp (tmp21, THE (q_list q_id arg))
        | q_decl (a::MARKdecl arg) = a::CONSexp (tmp22, THE ((fn (x_0, x_1) => a::TUPLEexp [q_loc x_0, q_decl x_1]
                                                            ) arg))
        | q_decl (a::ARCHdecl arg) = a::CONSexp (tmp23, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_list q_decl x_1]
                                                            ) arg))
        | q_decl (A.@@@ arg) = a::CONSexp (tmp24, THE (q_list q_string arg))
        | q_decl (a::BITSORDERINGdecl arg) = a::CONSexp (tmp25, THE (q_range arg))
        | q_decl (a::FORMATdecl arg) = a::CONSexp (tmp26, THE ((fn (x_0, x_1) => a::TUPLEexp [q_option q_int x_0, q_list q_formatbind x_1]
                                                              ) arg))
        | q_decl (a::ARCHKINDdecl arg) = a::CONSexp (tmp27, THE (q_archKind arg))
        | q_decl (a::ENDIANESSdecl arg) = a::CONSexp (tmp28, THE (q_endianess arg))
        | q_decl (a::STORAGEdecl arg) = a::CONSexp (tmp29, THE (q_list q_storagedecl arg))
        | q_decl (a::LOCATIONSdecl arg) = a::CONSexp (tmp30, THE (q_list q_locbind arg))
        | q_decl (a::NAMEdecl arg) = a::CONSexp (tmp31, THE (q_string arg))
        | q_decl (a::VERSIONdecl arg) = a::CONSexp (tmp32, THE (q_string arg))
        | q_decl (a::ASSEMBLYCASEdecl arg) = a::CONSexp (tmp33, THE (q_assemblycase arg))
        | q_decl (a::INSTRUCTIONdecl arg) = a::CONSexp (tmp34, THE (q_list q_consbind arg))
        | q_decl (a::DEBUGdecl arg) = a::CONSexp (tmp35, THE (q_id arg))
        | q_decl (a::RESOURCEdecl arg) = a::CONSexp (tmp36, THE (q_list q_id arg))
        | q_decl (a::CPUdecl arg) = a::CONSexp (tmp37, THE (q_list q_cpubind arg))
        | q_decl (a::PIPELINEdecl arg) = a::CONSexp (tmp38, THE (q_list q_pipelinebind arg))
        | q_decl (a::LATENCYdecl arg) = a::CONSexp (tmp39, THE (q_list q_latencybind arg))
      and q_sigexp (a::IDsig arg) = a::CONSexp (tmp40, THE (q_ident arg))
        | q_sigexp (a::WHEREsig arg) = a::CONSexp (tmp41, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_sigexp x_0, q_ident x_1, q_structexp x_2]
                                                              ) arg))
        | q_sigexp (a::WHERETYPEsig arg) = a::CONSexp (tmp42, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_sigexp x_0, q_ident x_1, q_ty x_2]
                                                                  ) arg))
        | q_sigexp (a::DECLsig arg) = a::CONSexp (tmp43, THE (q_list q_decl arg))
      and q_share (a::TYPEshare arg) = a::CONSexp (tmp44, THE (q_list q_ident arg))
        | q_share (a::STRUCTshare arg) = a::CONSexp (tmp45, THE (q_list q_ident arg))
      and q_literal (a::WORDlit arg) = a::CONSexp (tmp46, THE (q_word arg))
        | q_literal (a::WORD32lit arg) = a::CONSexp (tmp47, THE (q_word32 arg))
        | q_literal (a::INTlit arg) = a::CONSexp (tmp48, THE (q_int arg))
        | q_literal (a::INT32lit arg) = a::CONSexp (tmp49, THE (q_int32 arg))
        | q_literal (a::INTINFlit arg) = a::CONSexp (tmp50, THE (q_intinf arg))
        | q_literal (a::STRINGlit arg) = a::CONSexp (tmp51, THE (q_string arg))
        | q_literal (a::CHARlit arg) = a::CONSexp (tmp52, THE (q_char arg))
        | q_literal (a::BOOLlit arg) = a::CONSexp (tmp53, THE (q_bool arg))
        | q_literal (a::REALlit arg) = a::CONSexp (tmp54, THE (q_string arg))
      and q_exp (a::LITexp arg) = a::CONSexp (tmp55, THE (q_literal arg))
        | q_exp (a::IDexp arg) = a::CONSexp (tmp56, THE (q_ident arg))
        | q_exp (a::CONSexp arg) = a::CONSexp (tmp57, THE ((fn (x_0, x_1) => a::TUPLEexp [q_ident x_0, q_option q_exp x_1]
                                                          ) arg))
        | q_exp (a::LISTexp arg) = a::CONSexp (tmp58, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list q_exp x_0, q_option q_exp x_1]
                                                          ) arg))
        | q_exp (a::TUPLEexp arg) = a::CONSexp (tmp59, THE (q_list q_exp arg))
        | q_exp (a::VECTORexp arg) = a::CONSexp (tmp60, THE (q_list q_exp arg))
        | q_exp (a::RECORDexp arg) = a::CONSexp (tmp61, THE (q_list (fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_exp x_1]
                                                                   ) arg))
        | q_exp (a::APPexp arg) = a::CONSexp (tmp62, THE ((fn (x_0, x_1) => a::TUPLEexp [q_exp x_0, q_exp x_1]
                                                         ) arg))
        | q_exp (a::IFexp arg) = a::CONSexp (tmp63, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_exp x_0, q_exp x_1, q_exp x_2]
                                                        ) arg))
        | q_exp (a::LETexp arg) = a::CONSexp (tmp64, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list q_decl x_0, q_list q_exp x_1]
                                                         ) arg))
        | q_exp (a::SEQexp arg) = a::CONSexp (tmp65, THE (q_list q_exp arg))
        | q_exp (a::RAISEexp arg) = a::CONSexp (tmp66, THE (q_exp arg))
        | q_exp (a::HANDLEexp arg) = a::CONSexp (tmp67, THE ((fn (x_0, x_1) => a::TUPLEexp [q_exp x_0, q_list q_clause x_1]
                                                            ) arg))
        | q_exp (a::CASEexp arg) = a::CONSexp (tmp68, THE ((fn (x_0, x_1) => a::TUPLEexp [q_exp x_0, q_list q_clause x_1]
                                                          ) arg))
        | q_exp (a::TYPEDexp arg) = a::CONSexp (tmp69, THE ((fn (x_0, x_1) => a::TUPLEexp [q_exp x_0, q_ty x_1]
                                                           ) arg))
        | q_exp (a::LAMBDAexp arg) = a::CONSexp (tmp70, THE (q_list q_clause arg))
        | q_exp (a::MARKexp arg) = a::CONSexp (tmp71, THE ((fn (x_0, x_1) => a::TUPLEexp [q_loc x_0, q_exp x_1]
                                                          ) arg))
        | q_exp (a::BITSLICEexp arg) = a::CONSexp (tmp72, THE ((fn (x_0, x_1) => a::TUPLEexp [q_exp x_0, q_list q_range x_1]
                                                              ) arg))
        | q_exp (a::LOCexp arg) = a::CONSexp (tmp73, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_id x_0, q_exp x_1, q_option q_id x_2]
                                                         ) arg))
        | q_exp (a::ASMexp arg) = a::CONSexp (tmp74, THE (q_assembly arg))
        | q_exp (a::TYPEexp arg) = a::CONSexp (tmp75, THE (q_ty arg))
        | q_exp (a::RTLexp arg) = a::CONSexp (tmp76, THE (q_rtl arg))
        | q_exp (a::CONTexp arg) = a::CONSexp (tmp77, THE ((fn (x_0, x_1) => a::TUPLEexp [q_exp x_0, q_id x_1]
                                                          ) arg))
      and q_ety (a::I8) = a::CONSexp (tmp78, NULL)
        | q_ety (a::I16) = a::CONSexp (tmp79, NULL)
        | q_ety (a::I32) = a::CONSexp (tmp80, NULL)
        | q_ety (a::I64) = a::CONSexp (tmp81, NULL)
        | q_ety (a::FSINGLE) = a::CONSexp (tmp82, NULL)
        | q_ety (a::FDOUBLE) = a::CONSexp (tmp83, NULL)
      and q_assemblycase (a::LOWERCASE) = a::CONSexp (tmp84, NULL)
        | q_assemblycase (a::UPPERCASE) = a::CONSexp (tmp85, NULL)
        | q_assemblycase (a::VERBATIM) = a::CONSexp (tmp86, NULL)
      and q_structexp (a::IDsexp arg) = a::CONSexp (tmp87, THE (q_ident arg))
        | q_structexp (a::APPsexp arg) = a::CONSexp (tmp88, THE ((fn (x_0, x_1) => a::TUPLEexp [q_structexp x_0, q_structexp x_1]
                                                                ) arg))
        | q_structexp (a::DECLsexp arg) = a::CONSexp (tmp89, THE (q_list q_decl arg))
        | q_structexp (a::CONSTRAINEDsexp arg) = a::CONSexp (tmp90, THE ((fn (x_0, x_1) => a::TUPLEexp [q_structexp x_0, q_sigexp x_1]
                                                                        ) arg))
      and q_ty (a::IDty arg) = a::CONSexp (tmp91, THE (q_ident arg))
        | q_ty (a::TYVARty arg) = a::CONSexp (tmp92, THE (q_tyvar arg))
        | q_ty (a::INTVARty arg) = a::CONSexp (tmp93, THE (q_int arg))
        | q_ty (a::VARty arg) = a::CONSexp (tmp94, THE ((fn (x_0, x_1, x_2, x_3) => a::TUPLEexp [q_tvkind x_0, q_int x_1, q_ref q_int x_2, q_ref (q_option q_ty) x_3]
                                                       ) arg))
        | q_ty (a::APPty arg) = a::CONSexp (tmp95, THE ((fn (x_0, x_1) => a::TUPLEexp [q_ident x_0, q_list q_ty x_1]
                                                       ) arg))
        | q_ty (a::FUNty arg) = a::CONSexp (tmp96, THE ((fn (x_0, x_1) => a::TUPLEexp [q_ty x_0, q_ty x_1]
                                                       ) arg))
        | q_ty (a::TUPLEty arg) = a::CONSexp (tmp97, THE (q_list q_ty arg))
        | q_ty (a::RECORDty arg) = a::CONSexp (tmp98, THE (q_list (fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_ty x_1]
                                                                 ) arg))
        | q_ty (a::POLYty arg) = a::CONSexp (tmp99, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list q_ty x_0, q_ty x_1]
                                                        ) arg))
        | q_ty (a::LAMBDAty arg) = a::CONSexp (tmp100, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list q_ty x_0, q_ty x_1]
                                                           ) arg))
        | q_ty (a::CELLty arg) = a::CONSexp (tmp101, THE (q_id arg))
      and q_tvkind (a::INTkind) = a::CONSexp (tmp102, NULL)
        | q_tvkind (a::TYPEkind) = a::CONSexp (tmp103, NULL)
      and q_pat (a::IDpat arg) = a::CONSexp (tmp104, THE (q_id arg))
        | q_pat (a::CONSpat arg) = a::CONSexp (tmp105, THE ((fn (x_0, x_1) => a::TUPLEexp [q_ident x_0, q_option q_pat x_1]
                                                           ) arg))
        | q_pat (a::WILDpat) = a::CONSexp (tmp106, NULL)
        | q_pat (a::ASpat arg) = a::CONSexp (tmp107, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_pat x_1]
                                                         ) arg))
        | q_pat (a::LITpat arg) = a::CONSexp (tmp108, THE (q_literal arg))
        | q_pat (a::LISTpat arg) = a::CONSexp (tmp109, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list q_pat x_0, q_option q_pat x_1]
                                                           ) arg))
        | q_pat (a::TUPLEpat arg) = a::CONSexp (tmp110, THE (q_list q_pat arg))
        | q_pat (a::VECTORpat arg) = a::CONSexp (tmp111, THE (q_list q_pat arg))
        | q_pat (a::RECORDpat arg) = a::CONSexp (tmp112, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list (fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_pat x_1]
                                                                                                  ) x_0, q_bool x_1]
                                                             ) arg))
        | q_pat (a::TYPEDpat arg) = a::CONSexp (tmp113, THE ((fn (x_0, x_1) => a::TUPLEexp [q_pat x_0, q_ty x_1]
                                                            ) arg))
        | q_pat (a::NOTpat arg) = a::CONSexp (tmp114, THE (q_pat arg))
        | q_pat (a::ORpat arg) = a::CONSexp (tmp115, THE (q_list q_pat arg))
        | q_pat (a::ANDpat arg) = a::CONSexp (tmp116, THE (q_list q_pat arg))
        | q_pat (a::WHEREpat arg) = a::CONSexp (tmp117, THE ((fn (x_0, x_1) => a::TUPLEexp [q_pat x_0, q_exp x_1]
                                                            ) arg))
        | q_pat (a::NESTEDpat arg) = a::CONSexp (tmp118, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_pat x_0, q_exp x_1, q_pat x_2]
                                                             ) arg))
      and q_ident (a::IDENT arg) = a::CONSexp (tmp119, THE ((fn (x_0, x_1) => a::TUPLEexp [q_list q_id x_0, q_id x_1]
                                                           ) arg))
      and q_clause (a::CLAUSE arg) = a::CONSexp (tmp120, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_list q_pat x_0, q_guard x_1, q_exp x_2]
                                                             ) arg))
      and q_funbind (a::FUNbind arg) = a::CONSexp (tmp121, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_list q_clause x_1]
                                                               ) arg))
      and q_storagedecl (a::CELLdecl arg) = a::CONSexp (tmp122, THE ((fn { defaults, aggregable, print, bits, count, alias, to, from, nickname, id } => a::RECORDexp 
                                                                        let infix @@ fun x @@ y = y . x
                                                                        in  NIL
                                                                           @@("id", q_id id)
                                                                           @@("nickname", q_id nickname)
                                                                           @@("from", q_ref q_int from)
                                                                           @@("to", q_ref q_int to)
                                                                           @@("alias", q_option q_id alias)
                                                                           @@("count", q_option q_int count)
                                                                           @@("bits", q_int bits)
                                                                           @@("print", q_exp print)
                                                                           @@("aggregable", q_bool aggregable)
                                                                           @@("defaults", q_list (fn (x_0, x_1) => a::TUPLEexp [q_int x_0, q_exp x_1]
                                                                                                 ) defaults)
                                                                        end

                                                                    ) arg))
      and q_locbind (a::LOCbind arg) = a::CONSexp (tmp123, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_id x_0, q_option q_pat x_1, q_exp x_2]
                                                               ) arg))
      and q_endianess (a::LITTLE) = a::CONSexp (tmp124, NULL)
        | q_endianess (a::BIG) = a::CONSexp (tmp125, NULL)
      and q_archKind (a::VLIW) = a::CONSexp (tmp126, NULL)
        | q_archKind (a::SUPERSCALAR) = a::CONSexp (tmp127, NULL)
      and q_formatbind (a::FORMATbind arg) = a::CONSexp (tmp128, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_id x_0, q_list q_field x_1, q_option q_exp x_2]
                                                                     ) arg))
      and q_field (a::FIELD arg) = a::CONSexp (tmp129, THE ((fn { value, cnv, sign, width, id } => a::RECORDexp [("value", q_option q_word32 value), ("cnv", q_cnv cnv), 
                                                                  ("sign", q_signedness sign), ("width", q_width width), ("id", q_id id)]
                                                           ) arg))
      and q_width (a::WIDTH arg) = a::CONSexp (tmp130, THE (q_int arg))
        | q_width (a::RANGE arg) = a::CONSexp (tmp131, THE ((fn (x_0, x_1) => a::TUPLEexp [q_int x_0, q_int x_1]
                                                           ) arg))
      and q_cnv (a::NOcnv) = a::CONSexp (tmp132, NULL)
        | q_cnv (a::CELLcnv arg) = a::CONSexp (tmp133, THE (q_id arg))
        | q_cnv (a::FUNcnv arg) = a::CONSexp (tmp134, THE (q_id arg))
      and q_datatypebind (a::DATATYPEbind arg) = a::CONSexp (tmp135, THE ((fn { cbs, field, asm, mc, tyvars, id } => a::RECORDexp [("cbs", q_list q_consbind cbs), 
                                                                                ("field", q_option q_id field), ("asm", q_bool asm), ("mc", q_opcodeencoding mc), 
                                                                                ("tyvars", q_list q_tyvar tyvars), ("id", q_id id)]
                                                                         ) arg))
        | q_datatypebind (a::DATATYPEEQbind arg) = a::CONSexp (tmp136, THE ((fn { ty, tyvars, id } => a::RECORDexp [("ty", q_ty ty), ("tyvars", q_list q_tyvar tyvars), 
                                                                                  ("id", q_id id)]
                                                                           ) arg))
      and q_exceptionbind (a::EXCEPTIONbind arg) = a::CONSexp (tmp137, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_option q_ty x_1]
                                                                           ) arg))
        | q_exceptionbind (a::EXCEPTIONEQbind arg) = a::CONSexp (tmp138, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_ident x_1]
                                                                             ) arg))
      and q_consbind (a::CONSbind arg) = a::CONSexp (tmp139, THE ((fn { loc, pipeline, latency, sdi, delaycand, delayslot, nullified, nop, rtl, asm, mc, ty, 
                                                                        id } => a::RECORDexp 
                                                                     let infix @@ fun x @@ y = y . x
                                                                     in  NIL
                                                                        @@("id", q_id id)
                                                                        @@("ty", q_option q_ty ty)
                                                                        @@("mc", q_option q_mc mc)
                                                                        @@("asm", q_option q_assembly asm)
                                                                        @@("rtl", q_option q_exp rtl)
                                                                        @@("nop", q_flag nop)
                                                                        @@("nullified", q_flag nullified)
                                                                        @@("delayslot", q_option q_exp delayslot)
                                                                        @@("delaycand", q_option q_exp delaycand)
                                                                        @@("sdi", q_option q_exp sdi)
                                                                        @@("latency", q_option q_exp latency)
                                                                        @@("pipeline", q_option q_exp pipeline)
                                                                        @@("loc", q_loc loc)
                                                                     end

                                                                 ) arg))
      and q_flag (a::FLAGon) = a::CONSexp (tmp140, NULL)
        | q_flag (a::FLAGoff) = a::CONSexp (tmp141, NULL)
        | q_flag (a::FLAGid arg) = a::CONSexp (tmp142, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_id x_0, q_bool x_1, q_exp x_2]
                                                           ) arg))
      and q_delayslot (a::DELAY_ERROR) = a::CONSexp (tmp143, NULL)
        | q_delayslot (a::DELAY_NONE) = a::CONSexp (tmp144, NULL)
        | q_delayslot (a::DELAY_ALWAYS) = a::CONSexp (tmp145, NULL)
        | q_delayslot (a::DELAY_TAKEN) = a::CONSexp (tmp146, NULL)
        | q_delayslot (a::DELAY_NONTAKEN) = a::CONSexp (tmp147, NULL)
        | q_delayslot (a::DELAY_IF arg) = a::CONSexp (tmp148, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_branching x_0, q_delayslot x_1, q_delayslot x_2]
                                                                  ) arg))
      and q_branching (a::BRANCHforwards) = a::CONSexp (tmp149, NULL)
        | q_branching (a::BRANCHbackwards) = a::CONSexp (tmp150, NULL)
      and q_mc (a::WORDmc arg) = a::CONSexp (tmp151, THE (q_word32 arg))
        | q_mc (a::EXPmc arg) = a::CONSexp (tmp152, THE (q_exp arg))
      and q_assembly (a::STRINGasm arg) = a::CONSexp (tmp153, THE (q_string arg))
        | q_assembly (a::ASMasm arg) = a::CONSexp (tmp154, THE (q_list q_asm arg))
      and q_asm (a::TEXTasm arg) = a::CONSexp (tmp155, THE (q_string arg))
        | q_asm (a::EXPasm arg) = a::CONSexp (tmp156, THE (q_exp arg))
      and q_typebind (a::TYPEbind arg) = a::CONSexp (tmp157, THE ((fn (x_0, x_1, x_2) => a::TUPLEexp [q_id x_0, q_list q_tyvar x_1, q_ty x_2]
                                                                 ) arg))
      and q_valbind (a::VALbind arg) = a::CONSexp (tmp158, THE ((fn (x_0, x_1) => a::TUPLEexp [q_pat x_0, q_exp x_1]
                                                               ) arg))
      and q_signedness (a::SIGNED) = a::CONSexp (tmp159, NULL)
        | q_signedness (a::UNSIGNED) = a::CONSexp (tmp160, NULL)
      and q_tyvar (a::VARtv arg) = a::CONSexp (tmp161, THE (q_id arg))
        | q_tyvar (a::INTtv arg) = a::CONSexp (tmp162, THE (q_id arg))
      and q_rtlterm (a::LITrtl arg) = a::CONSexp (tmp163, THE (q_id arg))
        | q_rtlterm (a::IDrtl arg) = a::CONSexp (tmp164, THE (q_id arg))
        | q_rtlterm (a::COMPOSITErtl arg) = a::CONSexp (tmp165, THE (q_id arg))
      and q_cpubind (a::CPUbind arg) = a::CONSexp (tmp166, THE ((fn { resources, maxIssues, aliases, name } => a::RECORDexp [("resources", q_list (fn (x_0, x_1) => 
                                                                                                                                                     a::TUPLEexp [q_int x_0, 
                                                                                                                                                     q_id x_1]
                                                                                                                                              ) resources), 
                                                                      ("maxIssues", q_int maxIssues), ("aliases", q_list q_string aliases), ("name", q_id name)]
                                                               ) arg))
      and q_pipelinebind (a::PIPELINEbind arg) = a::CONSexp (tmp167, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_list (fn (x_0, x_1) => a::TUPLEexp [q_pat x_0, 
                                                                                                                               q_pipelineexp x_1]
                                                                                                                        ) x_1]
                                                                         ) arg))
      and q_latencybind (a::LATENCYbind arg) = a::CONSexp (tmp168, THE ((fn (x_0, x_1) => a::TUPLEexp [q_id x_0, q_list (fn (x_0, x_1) => a::TUPLEexp [q_pat x_0, 
                                                                                                                             q_exp x_1]
                                                                                                                      ) x_1]
                                                                       ) arg))
      and q_pipelineexp (a::PIPELINE arg) = a::CONSexp (tmp169, THE (q_list q_cycle arg))
      and q_cycle (a::ORcycle arg) = a::CONSexp (tmp170, THE ((fn (x_0, x_1) => a::TUPLEexp [q_cycle x_0, q_cycle x_1]
                                                             ) arg))
        | q_cycle (a::REPEATcycle arg) = a::CONSexp (tmp171, THE ((fn (x_0, x_1) => a::TUPLEexp [q_cycle x_0, q_int x_1]
                                                                 ) arg))
        | q_cycle (a::IDcycle arg) = a::CONSexp (tmp172, THE (q_id arg))
   end
}



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
