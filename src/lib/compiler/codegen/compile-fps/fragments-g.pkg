## fragments-g.pkg --- code and data fragments that need to be compiled.

# Compiled by:
#     src/lib/compiler/core.make6



###                 "I remember one occasion when I tried to add a little
###                  seasoning to a review, but I wasn't allowed to.
###                  The paper was by Dorothy Maharam, and it was a
###                  perfectly sound contribution to abstract measure theory.
###                  The domains of the underlying measures were not sets but
###                  elements of more general Boolean algebras, and their range
###                  consisted not of positive numbers but of certain abstract
###                  equivalence classes. My proposed first sentence was:
###
###                    "The author discusses valueless measures in pointless spaces."
###
###                     In: I want to be a Mathematician, Washington: MAA Spectrum, 1985, p. 120.



# We are invoked from:
#
#     src/lib/compiler/codegen/main/translate-fate-passing-style-to-binary-g.pkg

generic package fragments_g (

    codetree: Codetree					# Codetree	is from   src/lib/compiler/lower/codetree/codetree.api

)
: (weak)
Fragments						# Fragments	is from   src/lib/compiler/codegen/compile-fps/fragments.api
=
package {

    package t = codetree;
    package fps = fate_passing_style;

    Generated
        = UNGEN  (fps::Highcode_Variable, List( fps::Highcode_Variable ), List( fps::Fps_Type ), fps::Fps_Expression)
        |   GEN  List( t::Expression );

    Fragment
        = STANDARD { func:       Ref(  Null_Or(  fps::Function ) ), 
		     fml_typs:   List( fps::Fps_Type )
                   }
        | KNOWNFUN  Ref( Generated )
        | KNOWNCHK  Ref( Generated );

    fun error msg
        =
        error_message::impossible ("Fragment." + msg);

    fragments = REF ([]: List( (label::Label, Fragment) ) );		# XXX BUGGO FIXME Icky global variable.

    fun next ()
        = 
        case *fragments
             fragment ! rest =>  THE fragment before (fragments := rest);
	     []          =>  NULL;
        esac;

    fun add lf
        =
        fragments := lf ! *fragments;

    # Make compilation fragments for this cluster.
    # Note the icky side-effects:
    #
    fun make_fragments (arg as (fun_kind, f, vl, cl, e), lab)
        =
	fragment
        where
            fragment = case fun_kind
		         (fps::ESCAPE | fps::FATE) =>  STANDARD { func=>REF (THE arg), fml_typs=>cl };
		          fps::KNOWN                       =>  KNOWNFUN (REF (UNGEN (f, vl, cl, e)));
		          fps::KNOWN_CHECK                 =>  KNOWNCHK (REF (UNGEN (f, vl, cl, e)));
		          _                                => error "make_fragments";
                       esac;

	    fragments :=  (lab, fragment) ! *fragments;
	end;

};			# fragments_g 



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
