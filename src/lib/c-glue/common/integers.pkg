#  Integers; Override mlrep because the default stuff is hard to work with 
package unsigned :
api
   include Unt
   my ||            : word * word -> word
   my &&            : word * word -> word
   my ^^            : word * word -> word
   my real:           word -> real
   my signed:         word -> mlrep::signed::Int 
   my unsigned:       word -> word
   my toChar:         word -> char
   my toWord8:        word -> unt8::word
   my toWord:         word -> unt::word
   my toWord32:       word -> unt32::word
   my toInt32:        word -> int32::Int
   my fromChar:       char -> word
   my fromWord8:      unt8::word -> word
   my fromWord:       unt::word -> word
   my fromWord32:     unt32::word -> word
   my fromInt32:      int32::Int -> word
end
{
   use mlrep mlrep::unsigned
   
   my || = bitwise_or
   my && = bitwise_and
   my ^^ = bitwise_xor
   real       = real o toIntX 
   signed     = signed::fromLarge o unsigned::toLargeIntX 
   fun unsigned i = i
   toChar       = char::from_int o unsigned::toIntX
   toWord8      = unt8::from_int o unsigned::toIntX
   toWord       = unt::from_int o unsigned::toIntX
   toWord32     = unt32::fromLargeWord o unsigned::toLargeWordX
   toInt32      = int32::fromLarge o unsigned::toLargeIntX
   fromChar     = unsigned::from_int o char::to_int
   fromWord8    = unsigned::from_int o unt8::toIntX
   fromWord     = unsigned::from_large_int o unt::toLargeIntX
   fromWord32   = unsigned::fromLargeWord o unt32::toLargeWordX
   fromInt32    = unsigned::from_large_int o int32::toLarge
}

package signed :
api  
   include Integer
   my ||            : Int * Int -> Int
   my &&            : Int * Int -> Int
   my ^^            : Int * Int -> Int
   my bitwise_or:            Int * Int -> Int
   my bitwise_and:           Int * Int -> Int
   my bitwise_xor:           Int * Int -> Int
   my bitwise_not:           Int -> Int
   my >>            : Int * unt::word -> Int
   my >>>           : Int * unt::word -> Int
   my <<            : Int * unt::word -> Int
   my real:           Int -> real
   my signed:         Int -> Int
   my unsigned:       Int -> unsigned::word
   my toChar:         Int -> char
   my toWord8:        Int -> unt8::word
   my toWord:         Int -> unt::word
   my toWord32:       Int -> unt32::word
   my toLargeWord:    Int -> unt32::word
   my toInt32:        Int -> int32::Int
   my toLargeInt:     Int -> large_int::Int
   my fromChar:       char -> Int
   my fromWord8:      unt8::word -> Int
   my fromWord:       unt::word -> Int
   my fromWord32:     unt32::word -> Int
   my fromLargeWord:  large_unt::word -> Int
   my fromInt32:      int32::Int -> Int
   my from_large_int:   large_int::Int -> Int
end
{
   use mlrep::signed
   real = real o toInt 
   unsigned = unsigned::from_large_int o toLarge  
   fun signed i = i
   fun word i = unsigned::toWord i

   infix || && ^^ >> << >>>
   fun x || y  = unsigned::signed (unsigned::bitwise_or (unsigned x, unsigned y))
   fun x && y  = unsigned::signed (unsigned::bitwise_and (unsigned x, unsigned y))
   fun x ^^ y  = unsigned::signed (unsigned::bitwise_xor (unsigned x, unsigned y))
   fun bitwise_not x  = unsigned::signed (unsigned::bitwise_not (unsigned x))
   bitwise_or = op ||
   bitwise_and = op &&
   bitwise_xor = op ^^
   fun x >> y  = unsigned::signed (unsigned.>>(unsigned x, y))
   fun x >>> y = unsigned::signed (unsigned.>>>(unsigned x, y))
   fun x << y  = unsigned::signed (unsigned.<<(unsigned x, y))

   toChar        = char::from_int o toInt
   toWord8       = unt8::from_large_int o toLarge
   toWord        = unt::from_large_int o toLarge
   toWord32      = unt32::from_large_int o toLarge
   toLargeWord   = large_unt::from_large_int o toLarge
   toInt32       = int32::fromLarge o toLarge
   toLargeInt    = toLarge
   fromChar      = from_int o char::to_int
   fromWord8     = from_int o unt8::toIntX
   fromWord      = fromLarge o unt::toLargeIntX
   fromWord32    = fromLarge o unt32::toLargeIntX
   fromLargeWord = fromLarge o large_unt::toLargeIntX
   fromInt32     = fromLarge o int32::toLarge
   from_large_int  = fromLarge

}


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
