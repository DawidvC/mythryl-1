# Translated from example obtained from 
# http://kekkai.org/roger/sdl/mixer/index.html
# Give it a file name in ogg format.


fun playMusic musicFile =
let use C SDL SDLEnums SDLMacros

    #  use SDL_KeyboardEvent 

    #  Nice abbreviations 
    infix 60 at
    fun obj at { get, deref } = get obj

    # We're going to be requesting certain things from our audio
    # device, so we set them up beforehand 
    SDL_Init::f (SDL_INIT_VIDEO + SDL_INIT_AUDIO)

    audio_rate = 22050
    audio_format = AUDIO_S16 #  16-bit stereo 
    audio_channels = 2
    audio_buffers = 4096

    # This is where we open up our audio device.  Mix_OpenAudio takes
    # as its parameters the audio format we'd /like/ to have.
    
        if Mix_OpenAudio::f (audio_rate, audio_format, 
                           audio_channels, audio_buffers) != 0 then
           raise exception FAIL "Unable to open audio!\n"
        else ()

    #  Mix_Music actually holds the music information.  
    music = REF NULL

    # This is the function that we told SDL_Mixer to call when the music
    # was finished. In our case, we're going to simply unload the music
    # as though the player wanted it stopped.  In other applications, a
    # different music file might be loaded and played.
    fun musicDone() =
      (Mix_HaltMusic::f();
       case *music of
         THE mus => (Mix_FreeMusic::f mus; music := NULL)
       | NULL => ()
      )

    # Here we're going to have the 'm' key toggle the music on and
    # off.  When it's on, it'll be loaded and 'music' will point to
    # something valid.  If it's off, music will be NULL. 

    fun handleKey key =
        if key at SDL_KeyboardEvent::keysym at SDL_keysym::sym == SDLK_m then 
           if mlrep::unsigned::toLargeInt (key at SDL_KeyboardEvent::state) == 
                SDL_PRESSED then
            (print("Key pressed\n");
             case *music of
               #  Actually loads up the music 
               NULL =>
               let print("Loading file "$musicFile$"\n")
                   mus = Mix_LoadMUS::f musicFile
               # This begins playing the music - the first argument is a
               # pointer to Mix_Music package, and the second is how many
               # times you want it to loop (use -1 for infinite, and 0 to
               # have it just play once) 

               in  if Ptr::isNull' mus then
                      raise exception FAIL("Can't load "$musicFile$": "$SDL_GetError::f())
                   
                   Mix_PlayMusic::f (mus, 0);
               # We want to know when our music has stopped playing so we
               # can free it up and set 'music' back to NULL.  SDL_Mixer
               # provides us with a callback routine we can use to do
               # exactly that 

                   music := THE mus;
               #  Allen: Unfortunately, we can't call an ML function from C 
               # Mix_HookMusicFinished::f (musicDone)
               ()
               end 
            | THE mus =>
                #  Stop the music from playing 
               ( print("Halting "$musicFile$"\n");
                 Mix_HaltMusic::f();
   
                 # Unload the music from memory, since we don't need it
                 # anymore
                 Mix_FreeMusic::f mus;
                 music := NULL
               )
            )
           else ()
        else ()

      # We're going to be using a window onscreen to register keypresses
      # in.  We don't really care what it has in it, since we're not
      # doing graphics, so we'll just throw something up there.

     screen = SDL_SetVideoMode::f (320, 240, 0, 0w0)

     done   = REF FALSE

     event  = new' SDL_Event::size 

in   while not *done do
     ( while SDL_PollEvent::f(&event) != 0 do 
           let e = event at SDL_Event::type'
           in  if e == SDL_QUIT then done := TRUE
               else if e == SDL_KEYDOWN or e == SDL_KEYUP then
                       handleKey (event at SDL_Event::key)
               else ()
           end

          #  So we don't hog the CPU 
     ;  SDL_Delay::f 0w50
     )
;   #  This is the cleaning up part 
    Mix_CloseAudio::f()
;   SDL_Quit::f()

end



