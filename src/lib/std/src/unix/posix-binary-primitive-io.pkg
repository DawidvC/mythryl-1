## posix-binary-primitive-io.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6


# This implements the UNIX version of the
# OS-specific binary primitive IO package.
#
# The Text IO version is implemented by a trivial
# translation of these operations -- see:
#
#     src/lib/std/src/unix/posix-text-primitive-io.pkg



stipulate

    package file_position
        =
        file_position_guts;					# file_position_guts		is from   src/lib/std/src/bind-position-31.pkg
herein	
    package posix_binary_primitive_io
    : (weak)
    Winix_Primitive_Io						# Winix_Primitive_Io		is from   src/lib/std/src/io/winix-primitive-io.api
    {

	package primitive_io
	    =
	    binary_primitive_io;					# binary_primitive_io		is from   src/lib/std/src/io/binary-primitive-io.pkg

	package vec =  unt8_vector;				# unt8_vector			is from   src/lib/std/src/unt8-vector.pkg
	package pf  =  posix;					# posix				is from   src/lib/std/src/posix/posix.pkg
	package pio =  posix;

	File_Descriptor
            =
            pf::File_Descriptor;

	to_fpi = file_position::from_int;			# "fpi" == "File Position as Int", maybe?

	fun announce s x y
            =
	    {   # print "Posix: "; print (s: String); print "\n"; 
	        x y;
            };

	buffer_size_b = 4096;

	make_reader = pio::make_binary_reader;
	make_writer = pio::make_binary_writer;

	fun open_for_read name
            =
            make_reader {
		fd => announce "openf" pf::openf (name, pf::O_RDONLY, pf::o::flags [] ),
		name,
		blocking_mode => TRUE
	      };

	standard_mode
            =
            pf::s::flags
                [	#  mode 0666 
		  pf::s::irusr, pf::s::iwusr,
		  pf::s::irgrp, pf::s::iwgrp,
		  pf::s::iroth, pf::s::iwoth
	        ];

	fun create_file (name, mode, flags)
            =
	    announce "createf" pf::createf (name, mode, flags, standard_mode);

	fun open_for_write name
            =
            make_writer {
		fd=>create_file (name, pf::O_WRONLY, pf::o::trunc),
		name,
		blocking_mode=>TRUE,
		append_mode=>FALSE,
		chunk_size=>buffer_size_b
	      };

	fun open_for_append name
            =
            make_writer {
		fd		  => create_file (name, pf::O_WRONLY, pf::o::append),
		name	  => name,
		blocking_mode => TRUE,
		append_mode	  => TRUE,
		chunk_size	  => buffer_size_b
	    };

    };   #  posix_binary_primitive_io 
end;



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
