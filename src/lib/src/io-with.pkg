## io-with.pkg

# Compiled by:
#     src/lib/src/lib7.make6



###             "My method is to take the utmost trouble
###              to find the right thing to say.
###
###              And then say it with the utmost levity.
###
###                         -- George Bernard Shaw



package io_with: (weak)  Io_With		# Io_With	is from   src/lib/src/io-with.api
=
package {

    Input_Stream  =  file::Input_Stream;
    Output_Stream =  file::Output_Stream;

    fun swap_instream (s, s')
	=
	file::get_instream  s
	before
	    file::set_instream (s, s');

    fun with_input_file (s, f) x
	=
	result
	where
	    old_strm
		=
		swap_instream
		  ( file::stdin,
		    file::get_instream (file::open_for_read s)
		  );

	    fun clean_up ()
		=
		file::pure_io::close_input

		    (swap_instream (file::stdin, old_strm));

	    result
		=
		(f x)
		except
		    x = {   clean_up ();
			    raise exception x;
			};

	    clean_up();
	end;

    fun with_instream (stream, f) x
	=
	{   old_strm
		=
		swap_instream (file::stdin, file::get_instream stream);

	    fun clean_up ()
		=
		file::set_instream (stream, swap_instream (file::stdin, old_strm));

	    result
		=
		(f x)
		except
		    ex =  {   clean_up ();
			      raise exception ex;
			  };

	    clean_up();

	    result;
	};

    fun swap_outstrm (s, s')
	=
	file::get_outstream  s
	before
	    file::set_outstream (s, s');


    fun with_output_file (s, f) x
	=
	{   old_strm
		=
		swap_outstrm
		  ( file::stdout,
		    file::get_outstream (file::open_for_write s)
		  );

	    fun clean_up ()
		=
		file::pure_io::close_output (swap_outstrm (file::stdout, old_strm));

	    result
		=
		(f x)
		except
		    x = {   clean_up ();
			    raise exception x;
			};

	    clean_up();

	    result;
	};

    fun with_outstream (stream, f) x
	=
	{   old_strm
		=
		swap_outstrm
		  ( file::stdout,
		    file::get_outstream stream
		  );

	    fun clean_up ()
		=
		file::set_outstream (stream, swap_outstrm (file::stdout, old_strm));

	    result
		=
		f x
		except
		    x = {   clean_up ();
			    raise exception x;
			};

	    clean_up ();

	    result;
	};

  }; #  Io_With 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1997 AT&T Labs Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
