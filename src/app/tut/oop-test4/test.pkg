## test-class.pkg

# I test this by doing
#
#     linux% my
#     eval: make "oop-test.make6";
#     eval: counter = counter::new ();
#     eval: counter::get counter;
#     eval: counter::increment counter;
#     eval: counter::get counter;
#     eval: counter::reset counter;
#     eval: counter::get counter;
#   
# When I want gross verbose debug output I also do:
#     set_control "typechecker::expand_oop_syntax_debugging" "TRUE";
#     set_control "typechecker::typecheck_api_debugging" "TRUE";
#     set_control "typechecker::typecheck_type_debugging" "TRUE";
#     or even 
#     set_control "typechecker::expand_oop_syntax_debugging" "TRUE";set_control "typechecker::typecheck_package_language_debugging" "TRUE";set_control "typechecker::api_match_debugging" "TRUE";set_control "ed::module_stuff_debugging" "TRUE";set_control "ed::typechecker_dictionary_debugging" "TRUE";make "oop-test.make6";

# class 'counter' expands into package 'counter':
#
package counter {

    package dummy__oop__ref = oop;          # Force support library 'oop' to load.
    package dummy__object_ref = object;     # Force support class 'object' to load.

    package super = object;

    # Berthomieu's approach requires that
    # type Full__State(X) be opaque, so
    # we declare it in an internal package
    # which we can strong-seal with an
    # appropriate api (thus making Full__State(X)
    # opaque) and then 'include' back into the
    # main package.  This is a useful general trick:
    #
    package oop__internal
	:
	api {

	    # The full state record for a class consists of
	    # its own local state plus a slot of type X for
	    # whatever state a subclass of us might want.
	    # Here in the API we declare it as an opaque
	    # type, which gives us implementation hiding
	    # as well as the type abstraction we need to
	    # make object typing work properly:
	    #
	    Full__State(X);

	    # The formal type for instances of this class
	    # consists of the type for instances of our
	    # superclass (which in this case defaults to
	    # 'object' since we did not specify one explicitly)
	    # with our Full__State(X) record plugged into its
	    # subclass slot:
	    #
	    Self(X) =  super::Self(Full__State(X));

	    # Myself is Self(X) where X has been resolved to
	    # a null pointer (no subclass state).  This is used
	    # only when someone creates an instance of this
	    # class specifically (as opposed to any subclass):
	    #
	    Myself =  Self(oop::Oop_Null);

	    # Our local object state is split between two records,
	    # one holding our fields and one holding our methods:
	    #
	    Object__Fields(X)  =  { counter: Ref(Int) };
	    Object__Methods(X) =  { get:       Self(X) -> Int,
				    increment: Self(X) -> Void,
				    reset:     Self(X) -> Void
				  };

	    # For class 'counter' we specified only one field,
	    # with a fixed identifier, but in general we may
	    # have multiple fields, some of which are initialized
	    # to values supplied to 'make__object' rather than
	    # specified in the field declaration.  This record
	    # defines one entry for each field whose declaration
	    # lacks an initializer:
	    #
	    Initializer__Fields(X) =  { };

	    # Now we declare our three message functions:
	    #
	    get:         Self(X) -> Int;
	    increment:   Self(X) -> Void;
	    reset:       Self(X) -> Void;

	    # pack__object is the general routine for
	    # creating an instance of this class, also
	    # called by subclasses to create our part
	    # of their state:
	    #
	    pack__object:   (Initializer__Fields(X), Void) -> X -> Self(X);

	    # make__object is the general routine for
	    # creating an instance of this class specifically.
	    # it just calls pack__object, specifying a null
	    # subclass state:
	    #
	    make__object:   (Initializer__Fields(X), Void) -> Myself;

	    # unpack__object is the general routine which our
	    # subclasses call to get access to their local state:
	    #
	    unpack__object:   Self(X) -> (X -> Self(X), X);

	    # get__substate is a streamlined version of unpack__object
	    # for use when the ability to recompose the object is not
	    # needed:
	    #
	    get__substate:   Self(X) -> X;
	    # get__fields is a local function for
	    # getting access to our own field record.
	    # It calls super::get__substate():
	    #
	    get__fields:   Self(X) -> Object__Fields(X);

	    # get__fields is a local function for
	    # getting access to our own methods record.
	    # It calls super::get__substate():
	    #
	    get__methods:   Self(X) -> Object__Methods(X);

	    # make_object__fields combines initialization
	    # information from declared field initializers
	    # and those supplied via make__object to produce
	    # a full fields record for a new object:
	    #
	    make_object__fields:   Initializer__Fields(X) -> Object__Fields(X);

	    # For each message defined by the user, we
	    # define an override function used to specify
	    # a replacement method function implementing it:
	    #
	    override__get:         ((Self(X) -> Int ) -> Self(X) -> Int ) -> Self(X) -> Self(X);
	    override__increment:   ((Self(X) -> Void) -> Self(X) -> Void) -> Self(X) -> Self(X);
	    override__reset:       ((Self(X) -> Void) -> Self(X) -> Void) -> Self(X) -> Self(X);
	}
	=
	package {

	    # Our local object state consists of a pair of records,
	    # one for fields, one for methods.  Its type is mutually
	    # recursive with that of our other major types:
	    #
	    Object__State(X)
		=
		OBJECT__STATE { object__fields:  Object__Fields(X),
				object__methods: Object__Methods(X)
			      }
		withtype Full__State(X) = (Object__State(X), X)
		also     Self(X) = super::Self(Full__State(X))
		also     Myself = Self(oop::Oop_Null)
		also     Object__Methods(X) = { get: Self(X) -> Int,
						increment: Self(X) -> Void,
						reset: Self(X) -> Void
					      }
		also     Object__Fields(X) = { counter: Ref(Int) }
		also     Initializer__Fields(X) = { };

	    # Convenience function to access our fields record:
	    #
	    fun get__fields (self: Self(X))
		=
		{   my (OBJECT__STATE { object__methods, object__fields }, substate)
			=
			super::get__substate  self;

		    object__fields;
		 };

	    # Convenience function to access our methods record:
	    #
	    fun get__methods (self: Self(X))
		=
		{   my (OBJECT__STATE { object__methods, object__fields }, substate)
			=
			super::get__substate  self;

		    object__methods;
		 };

	    # We can't make make__object mutually recursive
	    # with our method functions because Mythryl doesn't
	    # generalize mutually recursive functions, and it
	    # is essential that our message and method functions
	    # be generalized, and make__object has to be defined
	    # after them in order to have them in scope for building
	    # the object__methods record, so we have a little hack
	    # where we backpatch a pointer to make__object into a
	    # reference which is in-scope to the method functions:
	    #
	    make__object__ref = REF NULL: Ref(Null_Or(((Initializer__Fields(X), Void) -> Myself)));
	    fun make__object arg = (the *make__object__ref) arg;

	    # Next come the actual method functions supplied by the user:
	    #
	    fun get self
		=
		*(.counter (get__fields self));

	    fun increment self
		=
		(.counter (get__fields self))
		    :=
		    *(.counter (get__fields self)) + 1;

	    fun reset self
		=
		.counter (get__fields self) := 0;

	    # With the methods defined, we can now
	    # set up our object__methods record:
	    #
	    object__methods = { get, increment, reset };

	    # Next come the synthesized message functions which
	    # look up and invoke the method functions via the
	    # object__methods record stored in the recipient
	    # object.  The fact that all Mythryl functions
	    # logically take exactly one argument and return
	    # exactly one result makes life easy for us here:
	    #
	    fun get (self: Self(X))
		=
		{    object__methods = get__methods self;
		     object__methods.get self;
		};
	    fun increment (self: Self(X))
		=
		{    object__methods = get__methods self;
		     object__methods.increment self;
		};
	    fun reset (self: Self(X))
		=
		{    object__methods = get__methods self;
		     object__methods.reset self;
		};

	    # The synthesized function which constructs
	    # the object__fields record for a new object:
	    #
	    fun make_object__fields (init: Initializer__Fields(X))
		=
		{ counter => REF 0 };

	    # Next the synthesized function to create our
	    # portion of a new object.  We use this locally
	    # and it also gets invoked by our subclasses:
	    #
	    fun pack__object (fields_1, fields_0) substate
		=
		{   object__fields
			 =
			 make_object__fields  fields_1;

		    self = (super::pack__object ())
			     ( OBJECT__STATE { object__fields, object__methods },
			       substate
			     );
		    self;
		};


	    # Now the function to create an instance specifically
	    # of our own class, not of any subclass.  This is just
	    # pack__object with a null subclass state:
	    #
	    fun make__object  fields_tuple
		=
		pack__object  fields_tuple  oop::OOP_NULL;

	    # Backpatch the above-mentioned reference so that
	    # method functions can call make__object:
	    #
                                                       my _ =
	    make__object__ref
		:=
		THE make__object;

	    # This function lets our subclass decompose us in a
	    # way which allows later recomposition with changes.
	    #
	    # All the work is done by a helper function from
	    # package 'oop':
	    #
	    fun unpack__object  me
		=
		oop::unpack_object  (super::unpack__object  me);

	    # This is a version of the above which is more efficient
	    # because it doesn't do the work needed to allow
	    # recomposition:
	    #
	    fun get__substate  me
		=
		{   my (state, substate) = super::get__substate me;
		    substate;
		};

	    # Finally, the three synthesized functions
	    # which allow our subclasses to override
	    # methods inherited from us.  'new_method'
	    # is the method which is to replace the
	    # existing one.  We pass the existing
	    # method function to 'new_method' so that
	    # it can use it if desired:
	    #
	    fun override__get  new_method  me
		=
		oop::repack_object
		    (fn (OBJECT__STATE { object__methods, object__fields })
			=
			OBJECT__STATE
			  { object__fields,
			    object__methods => { get       => new_method object__methods.get,       # Update this method.
						 increment =>            object__methods.increment, # Copy this method over unchanged.
						 reset     =>            object__methods.reset      # Copy this method over unchanged.
					       }
			  }
		    )
		    (super::unpack__object me);

	    fun override__increment  new_method  me
		=
		oop::repack_object
		    (fn (OBJECT__STATE { object__methods, object__fields })
			=
			OBJECT__STATE
			  { object__fields,
			    object__methods => { get       =>            object__methods.get,       # Copy this method over unchanged.
						 increment => new_method object__methods.increment, # Update this method.
						 reset     =>            object__methods.reset      # Copy this method over unchanged.
					       }
			  }
		    )
		    (super::unpack__object me);

	    fun override__reset new_method me
		=
		oop::repack_object
		    (fn (OBJECT__STATE { object__methods, object__fields })
			=
			OBJECT__STATE
			  { object__fields,
			    object__methods => { get       =>            object__methods.get,       # Copy this method over unchanged.
						 increment =>            object__methods.increment, # Copy this method over unchanged.
						 reset     => new_method object__methods.reset      # Update this method.
					       }
			  }
		    )
		    (super::unpack__object me);


	};                                  # package oop__internal

    # Import the contents of the above
    # package back into the main 'counter'
    # package, strong-sealed by the API.
    # This makes Full__State(X) fully abstract:
    #
    include oop__internal;

    # Remaining user code is left exactly as-is:
    #
    fun new ()
	=
	make__object ((), ());
};                                          # package counter

