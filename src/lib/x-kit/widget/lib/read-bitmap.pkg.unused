## read-bitmap.pkg


###               "And even now my first reaction to formulae, written by someone else,
###                is one of repulsion -- in particular when an unfamiliar notational
###                convention is used -- and when reading an article, my natural reaction
###                is to skip the formulae."
###
###                                                    -- E.J. Dijkstra



package ReadBitmap :
  api
    exception BAD_CS_PIXMAP_DATA

    my readBitmapFile:  file::Input_Stream -> 
          (xcore::image *  Null_Or( Int ) *  Null_Or( Int ))
  end =
  pkg
    exception BAD_CS_PIXMAP_DATA = xcore::BAD_CS_PIXMAP_DATA

    use Geometry file

    my << = Bits::lshift
    my >> = Bits::rshift
    my & = Bits::bitwise_and
    my ++ = Bits::bitwise_or
    infix << >> & ++

    flip0_9 = #[0x0, 0x8, 0x4, 0xc, 0x2, 0xa, 6, 0xe, 0x1, 0x9]
    flipA_F = #[0x5, 0xd, 0x3, 0xb, 0x7, 0xf]

    sfmt1 = format::scan "#define %s %d"
    sfmt2 = format::scan "static char %s = { "
    sfmt3 = format::scan "static unsigned char %s = { "

    fun is_suffix (sfx, s, j) = let
          fun loop (i, j) = 
                (ordof (sfx, i) = ordof (s, j)) and loop (i+1, j+1)
          start = (size s) - (size sfx)
          in 
            if (size sfx) != (size s - j) then FALSE
            else (loop (0, j)) except _ => TRUE
          end

    fun done (wid, ht, hotx, hoty,[]) = raise BAD_CS_PIXMAP_DATA
      | done (wid, ht, hotx, hoty, data) =
            (xcore::IMAGE { size=SIZE { wid=wid, ht=ht }, data = [data] }, hotx, hoty)

    fun convert x =
          if ((48 <= x) and (x <= 57)) #  '0'..'9' 
            then vector::get (flip0_9, x - 48)
              else if ((65 <= x) and (x <= 70)) #  'A'..'F' 
            then vector::get (flipA_F, x - 65)
          else if ((97 <= x) and (x <= 102)) #  'a'..'f' 
            then vector::get (flipA_F, x - 97)
          else raise BAD_CS_PIXMAP_DATA

    fun doDefine (nt, value, vals) = let
          type_idx = ((string_util::revindex "_" (nt, size nt))+1)
                           except _ => 0
          in
            if is_suffix("width", nt, type_idx) 
              then (value,#2 vals, #3 vals, #4 vals, #5 vals)
            else if is_suffix("height", nt, type_idx) 
              then (#1 vals, value, #3 vals, #4 vals, #5 vals)
            else if is_suffix("hot", nt, type_idx) 
              then if type_idx < 2
                     then vals
                   else if is_suffix("x_hot", nt, type_idx - 2)
                     then (#1 vals,#2 vals, THE value, #4 vals, #5 vals)
                   else if is_suffix("y_hot", nt, type_idx - 2)
                     then (#1 vals,#2 vals, #3 vals, THE value, #5 vals)
                   else vals
            else vals
          end

    fun readBitmapFile ins = let
          use format c_type
          fun wrap f l = (f l) except _ => []
          scan1 = wrap sfmt1
          scan2 = wrap sfmt2
          scan3 = wrap sfmt3
          ord_0 = ord "0"
          ord_x = ord "x"

          fun getc () = (ord (input (ins, 1))) except _ => raise BAD_CS_PIXMAP_DATA
            
          fun getChar () = let
                fun get () = 
                  if getc () != ord_x then raise BAD_CS_PIXMAP_DATA
                  else let
                    i1 = convert (getc())
                    i2 = convert (getc())
                    in
                      if isXDigitOrd (getc()) then raise BAD_CS_PIXMAP_DATA
                      else chr ((i2 << 4) ++ i1)
                    end
                fun skip c = if c != ord_0 then skip (getc()) else get ()
                in skip (getc()) end
            
          fun doData (nt, vals as (wid, ht, _, _, _)) = let
                type_idx = ((string_util::revindex "_" (nt, size nt))+1)
                                 except _ => 0
                fun get_line (0, l) = implode (reverse l)
                  | get_line (i, l) = get_line (i - 1, (getChar()) . l)
                in
                  if not (is_suffix("bits[]", nt, type_idx)) then vals
                  else let
                    bytes_per_line = ((wid + 7) >> 3)
                    fun loop (0, l) = reverse l
                      | loop (i, l) = (
                          loop (i - 1, get_line (bytes_per_line,[]) . l)
                        )
                    in
                      if wid <= 0 and ht <= 0 then raise BAD_CS_PIXMAP_DATA
                      else (#1 vals,#2 vals, #3 vals, #4 vals, loop (ht,[]))
                    end
                end

          fun tryScan (vals, line) =
                case scan1 line of 
                  [STR name_type, INT value] => doDefine (name_type, value, vals)
                | _ => case scan2 line of
                         [STR name_type] => doData (name_type, vals)
                       | _ => case scan3 line of
                                [STR name_type] => doData (name_type, vals)
                              | _ => vals

          fun read (arg as (wid, ht, hotx, hoty, data)) =
                case read_line ins
                 of "" => done arg
                  | line => read (tryScan (arg, line))
          in read (0, 0, NULL, NULL,[]) end
  end


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
