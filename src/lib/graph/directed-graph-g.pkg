## directed-graph-g.pkg
#
#  Directed graph in adjacency list format.
#
# -- Allen Leung
#
# This gets instantiated in:
#
#     src/lib/graph/johnson.pkg
#     src/lib/graph/directed-graph.pkg
#
# which latter is in turn used in
#
#     src/lib/compiler/codegen/ppc/ppc-codetree.pkg
#     src/lib/compiler/codegen/sun/sparc-codetree.pkg
#     src/lib/compiler/codegen/x86/x86-codetree.pkg

# Compiled by:
#     src/lib/graph/graphs.make6


# Compiled by:
#     src/lib/graph/graphs.make6



###             "D'you think, " asked Mr Shaughessy, "thet th' colliges ha' much t' do with th' progress of the wurld?"
###             "D'you think, " replied Mr O'Banion, "'tis th' mills thet make th' rivers run?"
###
###                                -- ?? (Quoted from dim memory: Corrections and attribution solicited.)


generic package
directed_graph_g (

    dynamic_rw_vector:  Rw_Vector		# Rw_Vector		is from   src/lib/std/src/rw-vector.api
)						# dynamic_rw_vector	is from   src/lib/src/dynamic-rw-vector.pkg

: (weak) api {

    include Graph_Guts; 			# Graph_Guts		is from   src/lib/graph/graph-guts.api
						# graph			is from   src/lib/graph/graph.pkg

    Adjlist( E )   =  dynamic_rw_vector::Rw_Vector( List( graph::Edge( E ) ) );
    Nodetable( N ) =  dynamic_rw_vector::Rw_Vector( Null_Or( N ) );

    # This function exposes the internal representation! 
    #
    new_graph
	:  
	{ name:   String,
	  info:   G,
	  next:   Adjlist( E ),
	  prior:  Adjlist( E ),
	  nodes:  Nodetable( N )
	}
	->
	graph::Graph( N, E, G );
}

{
    package g = graph;				# graph	is from   src/lib/graph/graph.pkg
    package v = dynamic_rw_vector;

    Adjlist( E ) = v::Rw_Vector( List( graph::Edge( E ) ) );
    Nodetable N  = v::Rw_Vector( Null_Or( N ) );

   fun new_graph { name, info, next, prior, nodes }
       =
       {   node_count    = REF 0;
	   edge_count    = REF 0;
	   entries       = REF [];
	   exits         = REF [];
	   new_nodes     = REF [];
	   garbage_nodes = REF [];

	   fun new_id() = case *new_nodes    []    =>  v::length nodes;
					     h ! t =>  { new_nodes := t;   h; };
                          esac;

	   fun garbage_collect ()
	       =
	       {   new_nodes :=  *new_nodes @ *garbage_nodes;
		   garbage_nodes := [];
	       };

	   fun get_nodes()
	       =
	       v::keyed_fold_right
		   fn (i, THE n, l) => (i, n) ! l;
		      (_,     _, l) => l;
		   end
                   []
                   nodes;

	   fun get_edges() = list::cat (v::fold_right (!) [] next);

	   fun order() = *node_count;
	   fun size()  = *edge_count;

	   fun capacity() = v::length nodes;

	   fun add_node (i, n)
               =
	       {   case (v::get (nodes, i))
		     
		        NULL => node_count := 1 + *node_count;
		        _    => ();
                   esac; 
	           v::set (nodes, i, THE n);
	       };

	   fun add_edge (e as (i, j, info))
               = 
	       {   v::set (next,  i, e ! v::get (next,  i));
	           v::set (prior, j, e ! v::get (prior, j));
	           edge_count := 1 + *edge_count;
               };

	   fun set_out_edges (i, edges)
	       =
	       {   fun remove_pred([], j, es') => v::set (prior, j, es');
		       remove_pred((e as (i', _, _)) ! es, j, es') => 
		       remove_pred (es, j, if (i' == i ) es'; else e ! es';fi);
                   end;

		   fun remove_edge (i', j, _)
                       =
		       {   if (i != i' ) raise exception g::BAD_GRAPH "set_out_edges"; fi;
			   remove_pred (v::get (prior, j), j,[]);
                       };

		   fun add_pred (e as (_, j, _))
                       =
                       v::set (prior, j, e ! v::get (prior, j));

		   old_edges = v::get (next, i);
		   apply remove_edge old_edges;
		   v::set (next, i, edges);
		   apply add_pred edges;
		   edge_count := *edge_count + length edges - length old_edges;
	       };

	   fun set_in_edges (j, edges)
	       =
	       {   fun remove_succ([], i, es')
                           =>
                           v::set (next, i, es');

		       remove_succ((e as (_, j', _)) ! es, i, es')
                           => 
			   remove_succ (es, i, if (j' == j ) es'; else e ! es';fi);
                   end;

		   fun remove_edge (i, j', _)
                       =
		       {   if (j != j' ) raise exception g::BAD_GRAPH "set_in_edges"; fi;
			   remove_succ (v::get (next, i), i,[]);
                       };

		   fun add_succ (e as (i, _, _))
                       =
                       v::set (next, i, e ! v::get (next, i));

		   old_edges = v::get (prior, j);
		   apply remove_edge old_edges;
		   v::set (prior, j, edges);
		   apply add_succ edges;
		   edge_count := *edge_count + length edges - length old_edges;
	       };

	   fun remove_node i
               =
	       case (v::get (nodes, i))
                 
		    NULL => ();
		    THE _ => {  set_out_edges (i,[]);
				set_in_edges (i,[]);
				v::set (nodes, i, NULL);
				node_count := *node_count - 1;
				garbage_nodes := i ! *garbage_nodes;
                             };
               esac;

	   fun remove_nodes ns = apply remove_node ns;
	   fun set_entries ns = entries := ns;
	   fun set_exits ns   = exits := ns;
	   fun get_entries()  = *entries;
	   fun get_exits()    = *exits;
	   fun out_edges n = v::get (next, n);
	   fun in_edges n = v::get (prior, n);
	   fun get_succ n = map #2 (v::get (next, n));
	   fun get_pred n = map #1 (v::get (prior, n));
	   fun has_edge (i, j) = list::exists (fn (_, k, _) =  j == k) (v::get (next, i));

	   fun has_node n
               =
               case (v::get (nodes, n))
                 
		    THE _ =>  TRUE;
                    NULL  =>  FALSE;
               esac;

	   fun node_info n
               =
               case (v::get (nodes, n))
                 
		    THE x => x; 
		    NULL  => raise exception g::NOT_FOUND;
               esac;

	   fun forall_nodes f
               = 
	       v::keyed_apply

                   fn (i, THE x) =>  f (i, x);
                     _           =>  ();
                   end

                   nodes;

	   fun forall_edges f
               =
               v::apply
                   (list::apply f)
                   next;

	 g::GRAPH {
	      name,
	      graph_info      => info,
	      new_id,
	      add_node,
	      add_edge,
	      remove_node,
	      set_in_edges,
	      set_out_edges,
	      set_entries,
	      set_exits,
	      garbage_collect,
	      nodes           => get_nodes,
	      edges           => get_edges,
	      order,
	      size,
	      capacity,
	      out_edges,
	      in_edges,
	      next            => get_succ,
	      prior            => get_pred,
	      has_edge,
	      has_node,
	      node_info,
	      entries         => get_entries,
	      exits           => get_exits,
	      entry_edges     => fn _ => []; end ,
	      exit_edges      => fn _ => []; end ,
	      forall_nodes,
	      forall_edges
	   };
       }; 

   fun graph (name, info, n)
       = 
       {   next   = v::make_rw_vector (n,[]);
	   prior  = v::make_rw_vector (n,[]);
	   nodes  = v::make_rw_vector (n, NULL);

	   new_graph { name, info, nodes, next, prior };
       };
};





## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.

##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
