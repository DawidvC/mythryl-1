## source-file-collection.pkg -- Collections of members in make7 descriptions.
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



# This file is essentially a utility library for the
# makefile parser, in particular for make7grammar_actions in
#
#     src/app/make7/semant/make7-grammar-actions.pkg
#
# which is the only file which references us.
#
# Involves:
#     - running tools
#     - fully analyzing sub-libraries and sub-freezefiles
#     - parsing source files and getting their export lists




###                  "Free software projects without good
###                   input filtering of ideas turn into
###                   bloated sludge.
###
###                   Egcs has good filtering (you should
###                   hear some of the things people say
###                   about the Cygnus guys after they get
###                   told "no" a few times ;)) so it works."
###
###                                        --Alan Cox


api Source_File_Collection {

    Symbol        =  symbol::Symbol;
    Bare_O7 =  bare_o7::Bare_O7;
    Oh7_View =  inter_library_dependency_graph::Oh7_View;


    Source_Code_Region
        =
        source_map::Source_Code_Region;


    Sublibraries
         =
	List ( ( anchor_dictionary::File,
                 inter_library_dependency_graph::Library
               , anchor_dictionary::Renamings		# MUSTDIE
             ) ); 


    Source_File_Collection;


    empty_collection:  Source_File_Collection;


    implicit:  make7_state::Make7_State
                -> inter_library_dependency_graph::Library
                -> Source_File_Collection;


    expand_one:  { make7_state: make7_state::Make7_State,

		   recursive_parse:
		       ( anchor_dictionary::File,
			 Null_Or( version::Version )
			, anchor_dictionary::Renamings	# MUSTDIE
		       )
		       ->
		       inter_library_dependency_graph::Library,

		   load_plugin:
		       anchor_dictionary::Path_Root
		       ->
		       String
		       ->
		       Bool
                 }
		 ->
                 { name:           String,
		   make_path:      Void -> anchor_dictionary::Basename,
		   library:        (anchor_dictionary::File, Source_Code_Region),
		   ilk:            Null_Or( String ),

		   tool_options:   Null_Or( private_tools::Tool_Options ),
		   local_index:    private_tools::Index,
		   context:        anchor_dictionary::Path_Root
                 }
		 ->
                 Source_File_Collection;

    sequential:  ( Source_File_Collection,
                   Source_File_Collection,
                   (String -> Void)
                  )
                  ->
                  Source_File_Collection;

    build
        :
        ( anchor_dictionary::File,
          Source_File_Collection,
          symbol_set::Set,
          make7_state::Make7_State,
          intra_library_dependency_graph::Far_O7
        )		#  pervasive dictionary 
	->
        ( symbol_map::Map( Oh7_View ),
          inter_library_dependency_graph::Privileges,
          symbol_set::Set
        );


    make_index
        :
        ( make7_state::Make7_State,
          anchor_dictionary::File,
          Source_File_Collection
        )
        ->
        Void;


    sublibraries
        :
        Source_File_Collection
        ->
        Sublibraries;


    sources
         :
         Source_File_Collection
         ->
         source_path_map::Map
             {
               ilk:     String, 
               derived: Bool
             };   

    num_find:     make7_state::Make7_State -> Source_File_Collection -> String -> Int;
    cm_find:      make7_state::Make7_State -> Source_File_Collection -> String -> Bool;

    ml_find:      Source_File_Collection -> Symbol -> Bool;

    sourcefile_exports
        :
        ( Source_File_Collection,
          Null_Or( anchor_dictionary::File ),
          (String -> Void)
        )
        ->
        symbol_set::Set;


    library_exports
        :
        ( Source_File_Collection,
          Null_Or( anchor_dictionary::File ),
          (String -> Void)
        )
        ->
        symbol_set::Set;


    freezefile_exports
        :
        ( Source_File_Collection,
          anchor_dictionary::File,
          (String -> Void),
          Bool,
          (Void -> Source_File_Collection)
       )
       ->
       symbol_set::Set;

    is_error_collection:  Source_File_Collection -> Bool;
};


# We are referenced (only) in
#
#    src/app/make7/semant/make7-grammar-actions.pkg

package source_file_collection: Source_File_Collection {		# Source_File_Collection	is from   src/app/make7/semant/source-file-collection.pkg

    package sg=  intra_library_dependency_graph;	# intra_library_dependency_graph	is from   src/app/make7/depend/intra-library-dependency-graph.pkg
    package lg=  inter_library_dependency_graph;	# inter_library_dependency_graph	is from   src/app/make7/depend/inter-library-dependency-graph.pkg
    package em=  error_message;			# error_message			is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package ss=  symbol_set;			# symbol_set			is from   src/app/make7/util/symbolset.pkg
    package sm=  symbol_map;			# symbol_map			is from   src/app/make7/util/symbolmap.pkg
    package v=  version;			# version			is from   src/app/make7/semant/version.pkg

    Bare_O7
        =
        bare_o7::Bare_O7;		# bare_o7			is from   src/app/make7/o7/bare-o7.pkg

    Symbol
        =
        symbol::Symbol;				# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg

    Oh7_View
        =
        lg::Oh7_View;

    Source_Code_Region
        =
        source_map::Source_Code_Region;

    Sublibraries
        =
        List( (
            anchor_dictionary::File,	# anchor_dictionary	is from   src/app/make7/paths/anchor-dictionary.pkg
	    lg::Library
            , anchor_dictionary::Renamings	# MUSTDIE
        ) ); 


    Source_File_Collection

        = ERROR_COLLECTION

	| SOURCE_FILE_COLLECTION  {

	      imports:      sm::Map( Oh7_View ),
	      source_files:     List( (Bare_O7, symbol_set::Set) ),
	      localdefs:    sm::Map( Bare_O7 ),

	      sublibraries: Sublibraries,
	      sources:      source_path_map::Map { ilk: String, derived: Bool },

	      required_privileges:   lg::Privileges
	  };



    fun empty sources
        =
	SOURCE_FILE_COLLECTION {

            imports   =>  sm::empty,
	    source_files  =>  [],
	    localdefs =>  sm::empty,

	    sublibraries       => [],
	    sources,
	    required_privileges => string_set::empty
	 };


    empty_collection
        =
        empty  source_path_map::empty;


    fun implicit (make7_state: make7_state::Make7_State) primordial_make7file
        =
        {   my { library_path, ... }
                =
		case primordial_make7file
		  
		     lg::LIBRARY x
                         =>
                         x;

		     lg::ERROR_LIBRARY
			 =>
			 em::impossible "source-file-collection.pkg: implicit: bad init library";
               esac;

	    sm = source_path_map::singleton (library_path,
					   { ilk => "cm", derived => FALSE } );
	
	    # This collection is an implicit member
	    # of every library -- the "init" library
            # which exports the pervasive dictionary:

	    SOURCE_FILE_COLLECTION {

	      imports   =>  sm::empty,
	      source_files  =>  [],
	      localdefs =>  sm::empty,

	      sublibraries        =>  [ ( library_path,
                                          primordial_make7file
                                          , []			# MUSTDIE
                                         )
                                      ],
	      sources             =>  sm,
	      required_privileges =>  string_set::empty
            };
	};


    fun sequential (   SOURCE_FILE_COLLECTION c1,
                       SOURCE_FILE_COLLECTION c2,
                       error
                   )
	    =>
	    {   fun describe_symbol (s, r)
		    =
		    {   ns = symbol::name_space  s;

			symbol::name_space_to_string ns ! " " ! symbol::name s ! r;
		    };

		fun import_error (s, x as (nth, e, allsyms), (nth', e', allsyms'))
		    =
		    {   my (f,  sbn)  =  nth  ();
			my (f', sbn') =  nth' ();

			fun gripe ()
			    =
			    error (cat (describe_symbol
					       (s, [" imported from ",
						    sg::describe_o7 sbn,
						    " and also from ",
						    sg::describe_o7 sbn'])));

			fun union (NULL, _) =>  NULL;
			    union (_, NULL) =>  NULL;

			    union (THE f, THE f')
				=>
				THE (ss::union (f, f'));
			end;

			if   (sg::sbeq (sbn, sbn'))
			    
			     fsbn =  (union (f, f'), sbn);

			     ( .{ fsbn; }, 
			       exports_dictionary::LAYER (e, e'),
			       ss::union (allsyms, allsyms')
			     );

			else
			     gripe ();
			     x;
			fi;
		    };


		import_union
		    =
		    sm::keyed_union_with import_error;


		fun local_def_error (s, f1, f2)
		    =
		    {   error (cat (describe_symbol
					(s, [" defined in ",  bare_o7::describe f1,
					     " and also in ", bare_o7::describe f2])));
			f1;
		    };


		local_def_union
		    =
		    sm::keyed_union_with  local_def_error;


		source_path_union
		    =
		    source_path_map::union_with  #1;


		SOURCE_FILE_COLLECTION {

		    imports      =>  import_union (c1.imports, c2.imports),
		    source_files =>  c1.source_files @ c2.source_files,
		    localdefs    =>  local_def_union (c1.localdefs, c2.localdefs),

		    sublibraries =>  c1.sublibraries @ c2.sublibraries,
		    sources      =>  source_path_union (c1.sources, c2.sources),

		    required_privileges =>  string_set::union ( c1.required_privileges,
								c2.required_privileges
							      )
		};
	    };

        sequential (ERROR_COLLECTION, _, _) =>  ERROR_COLLECTION;
        sequential (_, ERROR_COLLECTION, _) =>  ERROR_COLLECTION;

    end;			# fun sequential


    # Generate a Source_File_Collection from something or another.
    #
    # We're called in just one place, member() in
    #
    #     ./make7-grammar-actions.pkg
    #
    fun expand_one
            {   make7_state,
                recursive_parse,
                load_plugin
            }

            {   name,
                make_path,
                library,
                ilk,
                tool_options,
		local_index,
                context
            }

        =
        {   ilk =
                null_or::map  (string::map  char::to_lower)   ilk;

	    error
                =
                library_source_index::error
                    make7_state.library_source_index
                    library;

	    fun error0 s
                =
                error  em::ERROR  s  em::null_error_body;


	    fun warn0 s
                =
                error  em::WARNING  s  em::null_error_body;


	    my { source_files, make7_files, sources }
                =
		private_tools::expand				# private_tools		is from   src/app/make7/tools/main/private-tools.pkg
		    {
                      error => error0,
		      local_index,
		      spec => { name,
			        make_path,
			        ilk,
			        opts => tool_options,
			        derived => FALSE
                              },
		      context,
		      load_plugin,
		      sysinfo => { host_property =>  fn s =  .get (make7_state.make7_session.host_property s) (),
				   platform      =>  make7_state.make7_session.platform
				 }
		    };

	    msources
                =
                fold_left
                    source_path_map::set'
                    source_path_map::empty
                    sources;


	    fun makefile_collections (p, { version   => v
                                           , renamings => rb	# MUSTDIE
                                         }
                                     )
                =
		case (recursive_parse
                         ( p,
                           v
                           , rb	# MUSTDIE
                         ))
		  
		     g as lg::LIBRARY

                         { o7_views_by_name => i,
			   real_or_virtual,
			   required_privileges,
			   sources,
			   library_path,
			   sublibraries
			 }
			 =>
			 {   ver = case real_or_virtual
				     
                                        lg::VIRTUAL _ =>  NULL;
					lg::REAL    l =>  l.version;
                                   esac;

			     case (v, ver)
			       
				  (NULL, _) => ();

				  (THE vrq, NULL)
				      =>
				      error0 "library does not carry a version stamp";

				  (THE vrq, THE ver)
				      =>
				      case (v::compare (vrq, ver))
				        
					   GREATER => error0 "library is older than expected";
					   EQUAL => ();
					   LESS
					       =>
					       case (v::compare (v::next_major vrq, ver))
					         
						    GREATER
							=>
							warn0 "library is slightly newer than expected";

						    _   => error0 "library is newer than expected";
					       esac;
				      esac;
                             esac;

				  SOURCE_FILE_COLLECTION {

				      imports   => i,
				      source_files  => [],
				      localdefs => sm::empty,

				      sublibraries       => [ ( p,
                                                                g
                                                              , rb	# MUSTDIE
                                                              )
                                                            ],
				      sources            => source_path_map::empty,
				      required_privileges
				  };
			 };

		     lg::ERROR_LIBRARY
                         =>
                         ERROR_COLLECTION;
                esac;


	    fun smlfile_collections (p, sparams)
                =
                {   sparams
                        ->
                        { share => s, setup, split, noguid, local, controllers };
			

		    i   =
			bare_o7::make
                            (split, noguid)
			    make7_state {
                              sourcepath => p,
			      library,
			      sharing_request => s,
			      setup,
			      local,
			      controllers
			    };

		    exports
                        =
			case (bare_o7::exports  make7_state  i)
			  
			     NULL
                                 =>
                                 ss::empty;

			     THE ex
                                 =>
				 ex
                                 where
                                     if   (ss::is_empty ex)
                                         
					  error0 ("no module exports from " +
						anchor_dictionary::describe p);
				     fi;
                                 end;
                        esac;


		    fun add_ld (s, m)
                        =
                        sm::set (m, s, i);


		    ld =  ss::fold_left
                              add_ld
                              sm::empty
                              exports;
		

		    if   (ss::is_empty exports)
		        
                         ERROR_COLLECTION;
		    else
                         SOURCE_FILE_COLLECTION {

                           imports   => sm::empty,
			   source_files  => [(i, exports)],
			   localdefs => ld,

			   sublibraries       => [],
			   sources            => source_path_map::empty,
			   required_privileges => string_set::empty
			 };
                    fi;
		};

	    collections
                =
                    map  makefile_collections  make7_files
                    @
                    map  smlfile_collections   source_files;

	    fun combine (c1, c2)
                =
                sequential (c2, c1, error0);
	
	    fold_left  combine  (empty msources)  collections;
	};


    fun build (g, SOURCE_FILE_COLLECTION c, filter, make7_state, pervasive_fsbnode)
	    =>
	    if   (library_source_index::any_errors make7_state.library_source_index g)
	        
                 (sm::empty, string_set::empty, ss::empty);
	    else
                 build_dependency_graph::build (c, filter, make7_state, pervasive_fsbnode);
            fi;

        build (_, ERROR_COLLECTION, _, _, _)
	    =>
	    (sm::empty, string_set::empty, ss::empty);
    end;


							# library_source_index		is from   src/app/make7/semant/library-source-index.pkg
							# build_dependency_graph	is from   src/app/make7/depend/build-dependency-graph.pkg
							# string_set			is from   src/lib/src/string-set.pkg
							# make_symbol_index		is from   src/app/make7/depend/make-symbol-index.pkg


    fun make_index (make7_state, make7file, SOURCE_FILE_COLLECTION c)
	    =>
	    make_symbol_index::make_symbol_index (make7_state, make7file, c);

        make_index _
	    =>
	    ();
    end;



    fun sublibraries (SOURCE_FILE_COLLECTION { sublibraries => sg, ... } )
	    =>
	    sg;

       sublibraries ERROR_COLLECTION
	    =>
	    [];
    end;


    fun sources (SOURCE_FILE_COLLECTION { sources => s, ... } )
	    =>
	    s;

        sources ERROR_COLLECTION
	    =>
	    source_path_map::empty;
    end;


    stipulate
	fun symenv_find (make7_state: make7_state::Make7_State) (c: Source_File_Collection) s
            =
	    .get
		(make7_state.make7_session.host_property s)
		();
    herein
	fun num_find make7_state c s   =   the_else (symenv_find make7_state c s, 0);
	fun cm_find  make7_state c s   =   not_null (symenv_find make7_state c s);
    end;



    fun ml_find (SOURCE_FILE_COLLECTION { imports, localdefs, ... } ) s
            =>
	    not_null (sm::get (imports, s))
            or
	    not_null (sm::get (localdefs, s));

        ml_find ERROR_COLLECTION _
            =>
            TRUE;
    end;


    fun sourcefile_exports (ERROR_COLLECTION, _, _)
	    =>
	    ss::empty;

        sourcefile_exports (SOURCE_FILE_COLLECTION { source_files, ... }, NULL, _)
	    =>
	    fold_left (fn ((i, s), s')
		      =>
		      if   (bare_o7::is_local i   )   s'; 
					       else   ss::union (s, s');fi; end 
		  )
		  ss::empty
		  source_files;

        sourcefile_exports (SOURCE_FILE_COLLECTION { source_files, ... }, THE p, error)
	    =>
	    {   fun same_path (i, _)
		    =
		    anchor_dictionary::compare (bare_o7::sourcepath i, p) == EQUAL;

		case (list::find same_path source_files )
		  
		     THE (_, e)
                         =>
                         e;

		     NULL
                         =>
                         {   error ("no such source file: " + anchor_dictionary::describe p);
			     ss::empty;
                         };
                esac;
	    };
    end;


    stipulate

	fun same_path_as  p  (p', _
                                   , _	# MUSTDIE
                                   )
            =
            anchor_dictionary::compare  (p, p')  ==  EQUAL;


	fun add_domain (m, s)
            =
            ss::add_list (s, sm::keys_list  m);


	fun domain_of  m
            =
            add_domain (m, ss::empty);

    herein

	fun freezefile_exports (ERROR_COLLECTION, _, _, _, _)
		=>
		ss::empty;

	    freezefile_exports (SOURCE_FILE_COLLECTION { sublibraries, ... }, p, error, hasoptions, elab)
		=>
		{   fun err m
			=
			{   error m;
			    ss::empty;
			};

		    case (list::find (same_path_as p) sublibraries)
		      
		         THE ( _,
                               lg::LIBRARY { real_or_virtual => lg::REAL _, o7_views_by_name, ... }
                               , _	# MUSTDIE
                             )
			     =>
			     if   (hasoptions)
                                 
				  err (anchor_dictionary::describe p +
				      " cannot have options because it is already\
				      \ listed as a member");
			     else
                                  domain_of  o7_views_by_name;
                             fi;

		         THE _
                             =>
                             err (anchor_dictionary::describe p +
				       " is a thawed(?) library, not a freezefile");

			 NULL
			     =>
			     case (elab ())
			       
				  ERROR_COLLECTION => ss::empty;

				  SOURCE_FILE_COLLECTION {

				        source_files  => [],

				        sublibraries => [   (   _,

							      lg::LIBRARY {
							        real_or_virtual => lg::REAL _,
								o7_views_by_name,
								...
							      }
							      , _	# MUSTDIE
							      )
						      ],
					              ...
				      }
				      =>
				      domain_of  o7_views_by_name;

				  SOURCE_FILE_COLLECTION { source_files, sublibraries, ... }
				      =>
				      {   apply
                                              (fn (p, _
                                                       , _	# MUSTDIE
                                                       ) =  print (anchor_dictionary::describe p + "\n"))
					      sublibraries;

				          apply
                                              (fn (i, _) =  print (bare_o7::describe i + "\n"))
					      source_files;

				          err "precisely one library must be named here";
                                      };
                             esac;

                    esac;
		};
        end;


	fun library_exports (ERROR_COLLECTION, _, _)
		=>
		ss::empty;

	    library_exports (SOURCE_FILE_COLLECTION { sublibraries, ... }, NULL, _)
		=>
		{   fun sgexp ((_, lg::LIBRARY { real_or_virtual => lg::VIRTUAL _, o7_views_by_name, ... }
                                                                                              , _	# MUSTDIE
                                                                                             ), s)
			    =>
			    add_domain (o7_views_by_name, s);

		        sgexp (_, s)
			    =>
			    s;
                    end;

		    fold_left
                        sgexp
                        ss::empty
                        sublibraries;
		};

	   library_exports (SOURCE_FILE_COLLECTION { sublibraries, ... }, THE p, error)
	       =>
	       (   case (list::find (same_path_as p) sublibraries)
		     
		        THE ( _,
                              lg::LIBRARY { real_or_virtual => lg::VIRTUAL _, o7_views_by_name, ... }
                              , _	# MUSTDIE (?)
                            )
			    =>
			    domain_of  o7_views_by_name;

			THE _
			    =>
			    {   error (anchor_dictionary::describe p +
					      " is a freezefile, not a virtual library");
				ss::empty;
                            };

			NULL
			    =>
			    {   error ("no such virtual library: " + anchor_dictionary::describe p);
				ss::empty;
                            };
                   esac
	       );
        end;
    end;
	
    fun is_error_collection ERROR_COLLECTION            =>  TRUE;
        is_error_collection (SOURCE_FILE_COLLECTION _)  =>  FALSE;
    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
