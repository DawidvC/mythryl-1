## ppc-fps-registers.pkg --- FPS registers used on the POWER PC

# Compiled by:
#     src/lib/compiler/backend-ppc.make6

package ppccps_regs: (weak)  Cpsregs {		# Cpsregs	is from   src/lib/compiler/codegen/compile-fps/fps-registers.api

    package codetree = ppccodetree;		# ppccodetree	is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
    package c= ppccells;			# ppccells	is from   src/lib/compiler/lower/ppc/instruction/ppc-cells.pkg

    fun upto (from, to)
        =
        if (from > to)   [];
        else             from ! (upto (from+1, to));
        fi;

    infix val  upto ;

    gp = ppccells::gpreg;
    fp = ppccells::fpreg;
    cc = ppccells::reg cells_basis::CONDITION_CODES;

    fun reg  r =  codetree::REG  (32, gp r); 
    fun freg f =  codetree::FREG (64, fp f);

    exhausted_r = cc 0;
    exhausted	= THE (codetree::CC (codetree::GTU, exhausted_r)); 

    virtual_frame_pointer  = ppccells::new_reg();
    vfptr		   = codetree::REG (32, virtual_frame_pointer);

    stackptr			= reg (1);
    allocptr			= reg (14); 

    fun limitptr _		= reg (15);
    fun storeptr _		= reg (16);
    fun stdlink _		= reg (17);

    fun stdclos _		= reg (18);
    fun stdarg _		= reg (19);
    fun stdcont _		= reg (20);

    fun exnptr _	   	= reg (21);
    fun current_thread_ptr _	= reg (22);
    fun baseptr _	   	= reg (23);

    fun gc_link _		= codetree::REG (32, ppccells::lr); 
    fun frameptr _		= stackptr;

    miscregs    = map reg ([24, 25, 26, 27, 29, 30, 31] @ (3 upto 13)); 
    calleesave  = rw_vector::from_list (miscregs);
    floatregs   = map freg (1 upto 31);
    savedfpregs = [];

    avail_r
        =
	map un_reg
            ([stdlink FALSE, stdclos FALSE, stdarg FALSE,
		       stdcont FALSE] @ miscregs)
        where 
	    fun un_reg (codetree::REG (_, r))
                    =>
                    r;

	        un_reg _
                    =>
		    lowcode_error_message::error ("PPCCpsRegs", "availR");
            end;
	end;

    stipulate

	package sc= cells_basis::sorted_cells;	# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg

	my --- = sc::difference;

	infix val  --- ;

    herein

	all_regs    =  map gp (0 upto 31);

	dedicated_r =  sc::return (sc::uniq all_regs --- sc::uniq avail_r);

    end;

    avail_f = map fp (1 upto 31);

    dedicated_f = [fp 0];

    signed_gctest = FALSE;
    address_width = 32;

    #  FIXME 
    ccall_caller_save_r = [];		#  no c-calls implemented yet 
    ccall_caller_save_f = [];		#  ... 

};


## COPYRIGHT (c) 1999  Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
