## wrapping.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



# This is one of the A-Normal Form optimization passes --
# for context see the comments in
#
#     src/lib/compiler/upper/anormal/anormal.api
#



#   "This phase implements the core of the representation analysis [Sha97a],
#    deciding which values need to be boxed, which need to use coercions [Ler92]
#    and which ones type passing [HM95].  It also introduces the coercions
#    where necessary.
#
#    Zhong Shao, Flexible Representation Analysis, 1997 25p 
#    http://flint.cs.yale.edu/flint/publications/flex-tr.ps.gz
#    



###                "The only problem with seeing too much
###                 is that it makes you insane."
###
###                                    -- Phaedrus



api Wrapping {

    wrapping:  anormal::Program -> anormal::Program;

};

package wrapping

: (weak)  Wrapping				# Wrapping			is from   src/lib/compiler/upper/reps/wrapping.pkg

= 
package {

    stipulate

        package co= coerce;			# coerce			is from   src/lib/compiler/upper/reps/coerce.pkg
	package lt= highcode;			# highcode			is from   src/lib/compiler/upper/highcode/highcode.pkg
	package di= debruijn_index;		# debruijn_index		is from   src/lib/compiler/front/typechecker/basics/de-bruijn-index.pkg
	package po= highcode_primitive_op;	# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg
	package da= var_home;			# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg

	include anormal;

    herein

	fun bug s = error_message::impossible ("Wrapping: " + s);
	say = control_print::say;
	fun make_var _ = highcode_var::make_highcode_variable();

	fkfun = { is_recursive         => NULL,
                  all_call_sites_known => FALSE,

                  inlining_hint        => INLINE_WHENEVER_POSSIBLE,
                  calling_convention   => CALLING_CONVENTION_FUNCTION lt::ffc_fixed
                };

	ident =  fn le = le;

	fun option f NULL => NULL;
	    option f (THE x) => THE (f x);
        end;

	##############################################################################
	#                   MISC UTILITY FUNCTIONS
	##############################################################################
	stipulate

	    lt_upd
                = 
		{ x = lt::ltc_array (lt::ltc_tv 0);
		
                    lt::ltc_poly( [ lt::tkc_mono ], 
		                 [ lt::ltc_arrow ( lt::ffc_rrhighcode,
                                                  [x, lt::ltc_int, lt::ltc_tv 0], 
						  [lt::ltc_unit]
                                                )
                                 ]
                               );
		};

	    lt_sub
                = 
		{   x = lt::ltc_array (lt::ltc_tv 0);
		
                    lt::ltc_poly ( [ lt::tkc_mono ], 
		                  [ lt::ltc_arrow ( lt::ffc_rrhighcode,
                                                   [x, lt::ltc_int],
                                                   [lt::ltc_tv 0]
                                                 )
                                  ]
                                );
		};
	herein 

	    fun is_array_sub t = lt::lambda_types_are_equivalent (t, lt_sub);
	    fun is_array_upd t = lt::lambda_types_are_equivalent (t, lt_upd);

	    f64sub = po::NUMSUBSCRIPT { kind=>po::FLOAT 64, checked=>FALSE, immutable=>FALSE }; 
	    f64upd = po::NUMUPDATE    { kind=>po::FLOAT 64, checked=>FALSE };

	    # Function classify_prim_op:  primitive_operation -> primitive_operation * Bool * Bool
	    # Takes a primitive_operation and classifies it by kind.
	    # Returns a new primitive_operation, a flag indicating
	    # if this primitive_operation has been specialized, and another flag that indicates
	    # whether this primitive_operation is dependent on runtime type information. (ZHONG)
	    #
	    fun classify_prim_op (px as (d, p, lt, ts))
                =  
		case (p, ts)

		      ((po::NUMSUBSCRIPT _ | po::NUMUPDATE _), _)	#  overloaded primops 
                          =>
			  ((d, p, lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, ts), []), TRUE, FALSE);

		      (po::SUBSCRIPT, [tc])                        #  special 
			  =>
			  if (is_array_sub lt)
			      
			       if (lt::type_constructors_are_equivalent (tc, lt::tcc_real))
			            ((d, f64sub, lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, ts), []), TRUE, FALSE);
			       else (px, FALSE, TRUE);fi;
			  else
			       (px, FALSE, FALSE);
			  fi;

		      (po::ASSIGN, [tc]) 			      #  special 
			  => 
			  if (lt::tc_upd_prim tc == po::UNBOXED_SET)
			      
			       ((d, po::UNBOXEDASSIGN, lt, ts), FALSE, FALSE);
			  else
			       ((d, p, lt, ts), FALSE, FALSE);
                          fi;

		      (po::UPDATE, [tc])                           #  special 
			  =>
			  if   (is_array_upd lt)
			      
			       if (lt::type_constructors_are_equivalent (tc, lt::tcc_real)) 
			            ((d, f64upd, lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, ts), []), TRUE, FALSE);
			       else ((d, lt::tc_upd_prim tc, lt, ts), FALSE, TRUE);fi;
			  else
			       ((d, lt::tc_upd_prim tc, lt, ts), FALSE, FALSE);
                          fi;

		     _ => (px, FALSE, FALSE);
               esac;

	    argbase = fn vs = (vs, ident);
	    resbase = fn v  = (v,  ident);

	end; #  utility functions 

	############################################################################
	# The "wrapping" function does the following several things:
	#
	#   (1) representation coercions are inserted at TYPE_APPLY, BRANCH, PRIMOP,
	#       CON, SWITCH, and RECORD (RK_VECTOR _, _). Where CON and SWITCH
	#       only wrap/unwrap the arguments of a enum constuctor while
	#       RK_VECTOR just wraps the vector elements only.
	#   (2) all primops in PRIM are given type-specific meanings;
	#   (3) all conreps in CON and SWITCH are given type-specific meanings ??
	#
	############################################################################

	fun wrapping fdec
            = 
	    {   # In pass1, we calculate the old type of each variables in the highcode
		# expression. We do this for the sake of having simpler wrapping code.
		#
		my { get_lty=>getlty, clean_up, ... }
                    =
                    recover_type_info::recover_type_info (fdec, FALSE);

		# Generate a set of new wrappers:
		#
		my (tc_wrap, lt_wrap, tcf, ltf, cleanup2)
                    =
                    lt::twrap_fn TRUE;

		fun fix_dcon_type lt
                    = 
		    if (lt::ltp_ppoly lt)
                        
			 my (ks, t) = lt::ltd_ppoly lt;
			 lt::ltc_ppoly (ks, lt_wrap t);
		    else
                         lt_wrap lt;
                    fi;

		# transform:  co::wpDict * di::depth -> (Lambda_Expression -> Lambda_Expression) 
		#
		fun transform (wenv, d)
                    = 
                    loop
		    where
			fun lpfd ( { is_recursive, all_call_sites_known, inlining_hint, calling_convention }, v, vts, e)
                            = 
			    {   nisrec = case is_recursive
                                             THE (ts, l) => THE (map ltf ts, l);
					     NULL        => NULL;
                                         esac;

				ncconv = case calling_convention
                                             CALLING_CONVENTION_FUNCTION fixed =>  CALLING_CONVENTION_FUNCTION lt::ffc_fixed;
					     CALLING_CONVENTION_GENERIC        =>  calling_convention;
                                         esac;

				( { is_recursive       => nisrec,
				    calling_convention => ncconv,
                                    all_call_sites_known,
                                    inlining_hint
                                  },
				  v, 
				  map  (fn (x, t) = (x, ltf t))
                                       vts, 
				  loop e
                                );
			    }

			# lpdc:  dcon * Type List * value * Bool -> 
			# (dcon * Type List * (Lambda_Expression -> Lambda_Expression) * value)
                        #
			also
			fun lpdc
                            ( dc as (name, representation, lt),		# "dc" may be "data constructor" or "deconstruct/construct"
                              ts,					# "ts" is probably "type <mumble>"
                              u,					# user value being un/boxed...?
                              wflag					# TRUE to construct, FALSE to deconstruct.
                            )
                            = 
			    {   # Fixing the potential mismatch in the type:
				# 
			        ndc = (name, representation, fix_dcon_type lt);

			        aty = case (lt::ltd_arrow (lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, ts)))
					    (_, [x], _) => x;
					   _ => bug "unexpected case in lpdc";
                                      esac;

				my (naty, oaty) = (lt_wrap aty, ltf aty);

				header = if wflag  co::wrap_op   (wenv,[naty],[oaty], d); 
					 else      co::unwrap_op (wenv,[naty],[oaty], d);
                                         fi; 


				nts = map tc_wrap ts;

				case header

				     NULL => (ndc, nts, ident, u);

				     THE hhh
                                         => 
					 {   z = make_var();
					     nu = VAR z;

					     if wflag		# CONSTRUCT 

						 ( ndc,
                                                   nts,
                                                   fn xe = LET([z], hhh([u]), xe),
                                                   nu
                                                 );
					     else		# DECONSTRUCT 
						 x = case u
                                                         VAR q => q;
							 _ => bug "unexpected case in lpdc";
                                                     esac;

						 ( ndc,
                                                   nts, 
						   fn xe = LET([x], hhh([nu]), xe),
                                                   nu
                                                 );
					     fi;
					};
                                esac; 
			    }			# fun lpdc 

			#  lpsw:  con * Lambda_Expression -> con * Lambda_Expression 
			also
			fun lpsw (DATACON (dc, ts, v), e)
                                => 
			        {   my (ndc, nts, header, u) = lpdc (dc, ts, VAR v, FALSE);

			            case  u 
				       
				        VAR nv =>   (DATACON (ndc, nts, nv), header (loop e));
				        _      =>   bug "unexpected case in lpsw";
                                    esac;
			        };

			     lpsw (c, e)
                                 =>
                                 (c, loop e);
                        end 


			# lprim:  primitive_operation
                        #      -> (  primitive_operation
                        #         *  (  value List
                        #            -> value List
                        #            *  (Lambda_Expression -> Lambda_Expression)
                        #            )
			#            (   Highcode_Variable
                        #            ->  Highcode_Variable
                        #            *  (Lambda_Expression -> Lambda_Expression)
                        #            )
                        #         ) 

			also
			fun lprim (dictionary, p, lt, [])
				 => 
				 ((dictionary, p, ltf lt, []), argbase, resbase);

			     lprim px
				 => 
				 {   my ((dictionary, np, lt, ts), is_specialized, is_dyn)
                                         =
                                         classify_prim_op px;

				     nlt = ltf lt; 
				     wts = map tc_wrap ts;

				     if is_specialized

                                          # primitive_operation has been specialized:
					  #
				          ((dictionary, np, nlt, wts), argbase, resbase);
				     else
                                          #  still a polymorphic primitive_operation 

				          nt = lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (nlt, wts);

					  my (_, nta, ntr) = lt::ltd_arrow nt;

					  ot = ltf (lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lt, ts));

					  my (_, ota, otr) = lt::ltd_arrow ot;

					  arghdr = 
					       case ( co::wrap_op (wenv, nta, ota, d))
					         
					           NULL => argbase;

						   THE hhh => 
						    (fn vs => 
						      { nvs = map make_var vs;
							(map VAR nvs, 
							   fn le => LET (nvs, hhh (vs), le); end );
						      }; end );
                                               esac;

					  reshdr = 
					      case (co::unwrap_op (wenv, ntr, otr, d))
					        
					          NULL => resbase;

						  THE hhh
                                                      => 
						      fn v = {   nv = make_var();
							         ( nv, 
							           fn le = LET([v], hhh([VAR nv]), le)
                                                                 );
						             };
                                              esac;

					  npx' =    is_dyn   ??  (dictionary, np, nlt, wts)
						             ::  (dictionary, np, nt,  [] );

					  (npx', arghdr, reshdr);
				     fi;
				 };
                        end				# fun lprim 

			also
			fun loop le
                            = 
			    case le
			      
			        RET _
                                    =>
                                    le;

			        LET (vs, e1, e2)
                                    =>
                                    LET (vs, loop e1, loop e2);

			        MUTUALLY_RECURSIVE_FNS (fdecs, e)
                                    =>
                                    MUTUALLY_RECURSIVE_FNS (map lpfd fdecs, loop e);

			        APPLY _
                                    =>
                                    le;

			        TYPE_FN ((tfk, v, tvks, e1), e2)		# Put down all wrappers.
				    =>
				    {   nwenv = co::wp_new (wenv, d);
				        ne1 = transform (nwenv, di::next d) e1;
				        TYPE_FN((tfk, v, tvks, co::wp_build (nwenv, ne1)), loop e2);
				    };

			        TYPE_APPLY (v, ts)
				    => 
				    {   olt  = getlty v;
					nts  = map tc_wrap ts;

					nlts =          lt::instantiate_polymorphic_lambda_or_higher_order_constructor_type (ltf olt, nts);
					olts = map ltf (lt::instantiate_polymorphic_lambda_or_higher_order_constructor_type (olt, ts));

					header  = co::unwrap_op (wenv, nlts, olts, d);

					case header 
					  
					    NULL => TYPE_APPLY (v, nts);

					    THE hhh
						=>
						{   nvs = map make_var nlts;

						    LET (nvs, TYPE_APPLY (v, nts), hhh (map VAR nvs));
						};
					esac;
				    };

			        CONSTRUCTOR (dc, ts, u, v, e)
                                    => 
				    {   my (ndc, nts, header, nu)
                                            =
                                            lpdc (dc, ts, u, TRUE);

				        header (CONSTRUCTOR (ndc, nts, nu, v, loop e));
				    };

			        SWITCH (v, csig, cases, opp)
                                    => 
				    SWITCH (v, csig, map lpsw cases, option loop opp);

			        RECORD (RK_VECTOR t, vs, v, e)
				    =>
				    {   my (otc, ntc) = (tcf t, tc_wrap t);

					ot = lt::ltc_tyc  otc;
					nt = lt::ltc_tyc  ntc;

					case (co::wrap_op (wenv, [nt], [ot], d) )
					  
					    NULL => RECORD (RK_VECTOR ntc, vs, v, loop e);

					    THE hhh
                                                =>
						pass (vs, [], mh)
                                                where 

						    f = make_var();
						    x = make_var();

						    fun mh xe
							= 
							MUTUALLY_RECURSIVE_FNS([(fkfun, f,[(x, ot)], hhh([VAR x]))], xe);

						    fun pass([], nvs, h)
							    => 
							    h (RECORD (RK_VECTOR ntc, 
								      reverse nvs, v, loop e));

							pass (u ! r, nvs, h)
							    => 
							    {   z = make_var();

								fun h0 xe
								    = 
								    LET([z], APPLY (VAR f, [u]), xe);

								pass (r, (VAR z) ! nvs, h o h0);
							    };
						    end;
						end;
                                        esac;
				    };

			        RECORD (rk, vs, v, e)
                                    =>
                                    RECORD (rk, vs, v, loop e);

			        SELECT (u, i, v, e)
                                    =>
                                    SELECT (u, i, v, loop e);

			        RAISE (u, lts)
                                    =>
                                    RAISE (u, map ltf lts);

			        EXCEPT (e, v)
                                    =>
                                    EXCEPT (loop e, v);

			        # resolving the polymorphic equality in a special way 
				#
			        BRANCH (p as (_, po::POLYEQL, _, _), vs, e1, e2)
                                    =>
				    loop (equal::equal_branch (p, vs, e1, e2));

			        PRIMOP (p as (_, po::POLYEQL, _, _), vs, v, e)
                                    =>
				    bug "unexpected case in wrapping";

			        # resolving the polymorphic mkarray
				# 
			        PRIMOP ((dictionary, po as po::INLMKARRAY, lt, ts), vs, v, e)
                                    =>
				    {    my (nlt, nts) = (ltf lt, map tcf ts);

				         case (dictionary, nts)
					   
					      (THE { default=>pv, table => [(_, sv)] }, [tc])
						  =>
						  if (lt::type_constructors_are_equivalent (tc, lt::tcc_real) ) 

						       LET([v], APPLY (VAR sv, vs), loop e);

						  else 

						       if (lt::type_constructor_is_unknown tc)
						            PRIMOP((dictionary, po, nlt, nts), vs, v, loop e);
						       else 
						            z = make_var();
							    LET([z], loop (TYPE_APPLY (VAR pv, ts)),
							    LET([v], APPLY (VAR z, vs), loop e));
						       fi;
                                                  fi;
					   _ => bug "unexpected case for inlmkarray";
                                       esac;
				   };

			        # Resolving the usual primops 
				#
			        BRANCH (p, vs, e1, e2)
				    => 
				    {   my (np, hg, _) = lprim p;
					my (nvs, nh) = hg vs;

					nh (BRANCH (np, nvs, loop e1, loop e2));
				    };

			        PRIMOP (p, vs, v, e)
				    => 
				    {   my (np, hg1, hg2) = lprim p;
					my (nvs, nh1) = hg1 vs;
					my (nv, nh2) = hg2 v;

					nh1 (PRIMOP (np, nvs, nv, nh2 (loop e)));
				    };
                       esac;
		    
		    end;		# fun transform 

		fdec -> (fk, f, vts, e);
                

		nvts = map (fn (v, t) = (v, ltf t))
                           vts;

		wenv = co::empty_wrapper_dictionary();

		ne = transform (wenv, di::top) e;
	    
		( fk,
                  f,
                  nvts,
                  co::wp_build (wenv, ne)
                )
                before {
                           cleanup2();
                           clean_up();
                       };

	    };					# fun wrapping 
    end;					# toplevel stipulate 
};						# package wrapping 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
