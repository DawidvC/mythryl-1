#
# Sorting
#
# -- Allen Leung



###             "Never express yourself more clearly
###              than you are able to think."
###
###                                -- Niels Bohr



api SORTING =
api

   my sort:         (X * X -> Bool) -> List( X ) -> List( X )
   my sort_uniq:    (X * X -> Bool) -> 
                     (X * X -> Bool) -> List( X ) -> List( X )
   my merge:        (X * X -> Bool) -> List( X ) * List( X ) -> List( X )
   my merge_uniq:   (X * X -> Bool) -> 
                     (X * X -> Bool) -> List( X ) * List( X ) -> List( X )
   my merge_uniqs:  (X * X -> Bool) -> 
                     (X * X -> Bool) -> List( List( X ) ) -> List( X )
   my uniq:         (X * X -> Bool) -> List( X ) -> List( X )

end 

package Sorting:  SORTING =
pkg

   infix ====

   fun gensort merge op< l =
   let fun sort [] = []
         | sort (l as [x])   = l
         | sort (l as [x, y]) = if x < y then l else [y, x]
         | sort l =
           let fun split ([], a, b)    = (a, b)
                 | split (x . xs, a, b) = split (xs, b, x . a)
               my (a, b) = split (l,[],[])
           in  merge (sort a, sort b)
           end
   in  sort l
   end

   fun merge op< (a, b) =
   let fun m ([], a) = a
         | m (a,[]) = a
         | m (a as (u . v), b as (w . x)) =
            if u < w then u . m (v, b) else w . m (a, x)
   in  m (a, b)
   end

   fun merge_uniq op< op==== (a, b) =
   let fun m ([], a) = uniq op==== a
         | m (a,[]) = uniq op==== a
         | m (a as (u . v), b as (w . x)) =
            if u ==== w then m (a, x)
            else if u < w then u . m (v, b) 
            else w . m (a, x)
   in  m (a, b)
   end

   and uniq op==== l =
   let fun f []                 = []
         | f (l as [x])         = l
         | f (x . (l as (y . z))) = if x ==== y then f l else x . f l
   in  f l
   end


   fun sort op< l
       =
       gensort (merge op<) op< l

   fun sort_uniq op< op==== l
       =
       gensort (merge_uniq op< op====) op< l

   fun merge_uniqs op< op==== l
       =
       sort_uniq op< op==== (list::cat l)

end
