## shade-imp.pkg
#
# Publish the current trio of color shades
# (light/base/dark) to be used for drawing
# 3-D widgets etc.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6 



###                   "The idea of a formal design discipline is often rejected
###                    on account of vague cultural/philosophical condemnations
###                    such as ``stifling creativity'';  this is more pronounced
###                    in the Anglo-Saxon world where a romantic vision of
###                    ``the humanities'' in fact idealizes technical incompetence."
###
###                                                -- E.J. Dijkstra


stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xc  =  xcore;					# xcore				is from   src/lib/x-kit/xclient/xcore.pkg
    package xd  =  xdraw;					# xdraw				is from   src/lib/x-kit/xclient/xcore.pkg
    package pms =  standard_clientside_pixmaps;			# standard_clientside_pixmaps	is from   src/lib/x-kit/widget/lib/standard-clientside-pixmaps.pkg
herein

    package shade_imp: (weak)  Shade_Imp {			# Shade_Imp			is from   src/lib/x-kit/widget/lib/shade-imp.api

	exception BAD_SHADE;

	Shades = { light: xd::Pen,
		   base:  xd::Pen,
		   dark:  xd::Pen
		 };

	Plea_Mail
	    =
	    GET_SHADES  xc::Rgb;

	Reply_Mail
	    =
	    Null_Or( Shades );

	Shade_Imp
	    =
	    SHADE_IMP
	      { plea_slot:   Mailslot( Plea_Mail ),
		reply_slot:  Mailslot( Reply_Mail )
	      };

							    # monomorphic_hash_table_g	is from   src/lib/src/monomorphic-hash-table-g.pkg
	package rgbtable
	    =
	    monomorphic_hash_table_g (

		Hash_Key = xc::Rgb;

		fun same_key (k1:  Hash_Key, k2)
		    =
		    xc::same_rgb (k1, k2);

		fun hash_value (rgb: xc::Rgb)
		    =
		    {   (xc::rgb_to_unts rgb)
			    ->
			    (red, green, blue);

			red + green + blue;
		    };
	    );

	Rgb_Table = rgbtable::Hash_Table( Shades );

	fun monochrome screen
	    = 
	    xc::display_class_of_screen screen == xc::STATIC_GRAY       and 
	    xc::depth_of_screen         screen == 1;

	fun make_shade_imp screen
	    =
	    {
		exception NOT_FOUND;

		my rgb_table:  Rgb_Table = rgbtable::make_table (32, NOT_FOUND);

		rgb_ins  =  rgbtable::set rgb_table;
		rgb_find =  rgbtable::find   rgb_table;

		max_i = 0u65535;

		fun lighten v c = unt::min (max_i, (v*c) / 0u100) except _ = max_i;
		fun darken  v c = unt::min (max_i, (v*c) / 0u100) except _ = max_i;

		lighten =  lighten 0u140;
		darken  =  darken  0u060;

		fun color (r, g, b)
		    = 
		    xc::get_color (xc::CMS_RGB { red=>r, green=>g, blue=>b } );

		fun make_p c
		    =
		    xd::make_pen [xd::FOREGROUND (xc::rgb8_from_rgb c) ];

		fun make_p' t
		    =
		    xd::make_pen [ xd::FOREGROUND (xc::rgb8_from_int 0x000000),
				   xd::BACKGROUND (xc::rgb8_from_int 0xFFFFFF),
				   xd::STIPPLE t,
				   xd::FILL_STYLE_OPAQUE_STIPPLED
				 ];

		fun bw_shade (c, rgb)
		    =
		    {   lgray = xc::make_ro_pixmap_from_cs_pixmap  screen  pms::light_gray;
			dgray = xc::make_ro_pixmap_from_cs_pixmap  screen  pms::dark_gray;

			my (lt, dk)
			    =
			    xc::same_rgb (c, xc::white)
			      ?? (lgray, dgray)
			      :: (dgray, lgray);

			s = { light => make_p' lt, base => make_p c, dark => make_p' dk };

			rgb_ins (rgb, s);

			THE s;
		    }
		    except _ = NULL;

		fun gray_shade (c, rgb)
		    =
		    {
			lgray =  xc::get_color (xc::CMS_NAME "gray87");
			dgray =  xc::get_color (xc::CMS_NAME "gray44");

			my (lt, dk)
			    =
			    xc::same_rgb (c, xc::white)
			     ?? (lgray, dgray)
			     :: (dgray, lgray);

			s = { light => make_p lt, base => make_p c, dark => make_p dk };

			rgb_ins (rgb, s);
			THE s;
		    }
		    except
			_ = bw_shade (c, rgb);

		fun color_shade (c, rgb)
		    =
		    {   (xc::rgb_to_unts rgb)
			    ->
			    (red, blue, green);

			fun shade ()
			    =
			    {   lt = color (lighten red, lighten green, lighten blue);
				dk = color (darken red, darken green, darken blue);
				s = { light => make_p lt, base => make_p c, dark => make_p dk };

				rgb_ins (rgb, s);
				THE s;
			    }
			    except _ = NULL;

			if (xc::same_rgb (c, xc::white)
			or  xc::same_rgb (c, xc::black)
			)
			     gray_shade (c, rgb);
			else shade ();
			fi;
		    };

		alloc_shade =   monochrome screen   ??   bw_shade   ::   color_shade;

		fun do_plea (GET_SHADES rgb)
		    =
		    case (rgb_find rgb)
			#
			NULL =>  alloc_shade (rgb, rgb);
			s    =>  s;
		    esac;


		plea_slot  =  make_mailslot ();
		reply_slot =  make_mailslot ();

		fun loop ()
		    =
		    for (;;) {

			give  (reply_slot,  do_plea  (take  plea_slot));
		    };

		xtracing::xspawn("shade_imp", loop);

		SHADE_IMP { plea_slot, reply_slot };
	    };

	fun get_shades (SHADE_IMP { plea_slot, reply_slot } ) color
	    =
	    {   give  (plea_slot,  GET_SHADES color);

		case (take  reply_slot)
		    #
		    THE s =>  s;
		    _     =>  raise exception  BAD_SHADE;
		esac;
	   };
    };

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
