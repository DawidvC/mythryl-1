#
# This api describes the internal RTL representation.
# The internal representation differs from the user representation it that
# it is lambda-lifted, i.e., instead of having references like REG (32, 123),
# it has references like PARAM i, which refers to the ith parameter.
# 
# This representation is chosen so that multiple instructions can
# share the same rtl template.  Also, so that the templates can be
# created once before compilation begins. 

api Codetree_Rtl =
api
    package t:        Codetree
    package util:     Codetree_Utilities 
    package rewrite:  Codetree_Rwrite
    package fold:     Codetree_Fold
       sharing Util::T = Rewrite::T = Fold::T = T

    type Some_Type = t::ty
    type var    = t::var
    type rtl    = t::statement
    type expression    = t::int_expression
    type cond   = t::bool_expression
    type div_rounding_mode = t::div_rounding_mode

    enum pos = IN of Int | OUT of Int | IO of Int * Int		 #  Def/use 

    # -----------------------------------------------------------------------
    # Basic Operations
    # -----------------------------------------------------------------------
    my showRTL:  { def: Int->String, 
		   uses: Int->String, 
		   region_def: t::region::region->String, 
		   region_use: t::region::region->String } -> t::printer
    my rtlToString:  rtl -> String
    my expToString:  expression -> String
    my hashRTL:      rtl -> word
    my eqRTL:        rtl * rtl -> Bool 

    # -----------------------------------------------------------------------
    # Construction 
    # -----------------------------------------------------------------------
    my newOp:   { name: String, attributes: t::Basis::attributes } -> t::Basis::misc_op
    my new:     rtl -> rtl 
    my pin:     rtl -> rtl
    my COPY:    rtl
    my JMP:     rtl 

    # -----------------------------------------------------------------------
    # Type queries 
    # -----------------------------------------------------------------------
    my isConditionalBranch:  rtl -> Bool
    my isJump:               rtl -> Bool
    my isLooker:             rtl -> Bool

    # -----------------------------------------------------------------------
    # Def/use queries.
    # -----------------------------------------------------------------------
    my defUse:               rtl -> List( expression ) * List( expression )

    # -----------------------------------------------------------------------
    # Assign positions to all arguments
    # -----------------------------------------------------------------------
    my argPos:               rtl -> List (expression * Int) * List (expression * Int)
    exception NotAnArgument
    my argOf:                rtl -> String -> (expression * pos)

    # -----------------------------------------------------------------------
    # Number of arguments that an rtl maps into
    # -----------------------------------------------------------------------
    enum arity = ZERO | ONE | MANY
    my arity:                expression -> arity #  number of values 
    my nonConstArity:        expression -> arity #  number of non-constant values 

    # -----------------------------------------------------------------------
    # Extract naming constraints, if any
    # -----------------------------------------------------------------------
    my namingConstraints:    List( expression ) * List( expression ) ->
	{ fixedDefs:   List (expression * Int), #  these define fixed locations 
	  fixedUses:   List (expression * Int), #  these define fixed locations 
	  twoAddress:  List( expression )          #  these are both src and dst 
	}

    # -----------------------------------------------------------------------
    # Code motion queries 
    # -----------------------------------------------------------------------
    my can'tMoveUp:     rtl -> Bool
    my can'tMoveDown:   rtl -> Bool
    my pinned:          rtl -> Bool
    my hasSideEffect:   rtl -> Bool
    my can'tBeRemoved:  rtl -> Bool

end 
