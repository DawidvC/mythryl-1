/*
 * This module builds a control_flow_graph from a stream of instructions.
 * We use the FLOWGRPAH_GEN interface here, which is the 
 * default interface used by the core lowcode.
 *
 * -- Allen Leung
 */

generic package CFGGen
  (package control_flow_graph:  Control_Flow_Graph
   package instruction_properties:  Instruction_Properties
   package codetree:  Codetree
     sharing control_flow_graph::I = instruction_properties::I
     sharing Codetree::Constant = instruction_properties::i::Constant
     sharing Codetree::PseudoOp = control_flow_graph::P 
  )

: FLOWGRAPH_GEN

{

   package i = control_flow_graph::I
   package c = i::C
   package s = Codetree::Stream
   package t = Codetree
   package p = control_flow_graph::P
   package builder = ControlFlowGraphGen
     (package control_flow_graph = control_flow_graph
      package stream = S
      package instruction_properties = instruction_properties
     )

   type flowgraph = control_flow_graph::cfg

   fun newStream { compile, flowgraph } =
   let cfg = REF (case flowgraph of
                       NULL => control_flow_graph::new()
                     | THE cfg => cfg
                    )
       my { stream, next } = Builder::builder *cfg
       my s::STREAM { begin_cluster, end_cluster, pseudoOp, emit, end_procedure,
                    get_notes, comment, annotation,
                    define_local_label, define_global_label, ... } 
                      = stream
       fun endCFG a = 
       let end_cluster a
           oldCFG = *cfg
           newCFG = control_flow_graph::new()
       in  cfg := newCFG;
           next newCFG;
           compile oldCFG
       end 

   in  s::STREAM { begin_cluster,
                end_cluster     => endCFG,
                pseudoOp       => pseudoOp,
                emit,
                end_procedure,
                comment,
                annotation,
                get_notes,
                define_local_label,
                define_global_label
               }
   end

};

