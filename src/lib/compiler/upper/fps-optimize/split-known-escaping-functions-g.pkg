## split-known-escaping-functions.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



# This file implements one of the fate-passing-style transforms.
# For context, see the comments in
#
#     src/lib/compiler/upper/highcode/highcode.api




#    "Introduces eta-redexes such that all functions fall
#     into one of two categories:  Either all of their call
#     sites are known or none of their call sites are known.
#
#    "I.e., if a function f is not in one of those two categories,
#     a new function f' = \x.fx is introduced and all places where
#     f "escapes" (i.e., is passed as a higher function argument
#     rather than being directly called) are redirected to use f'."
#
#     [...]
#
#    "The need for etasplit is avoided by using slightly
#     different formulations of the relevant optimizations."
#
#          -- Principled Compilation and Scavenging
#             Stefan Monnier, 2003 [PhD Thesis, U Montreal]
#             http://www.iro.umontreal.ca/~monnier/master.ps.gz 



# Perform the "eta-split" transformation on fps expressions.
# Its purpose is to give two entry points to functions which
# both escape and which are called at known points.
#
# The function is split into two functions:
#
#     A known function that is used for calls.
#
#     A strictly escaping function used for all
#     escaping occurrences of the original function.
#
# The new escaping function simply calls the new known function.
#
# I do not bother to split known functions, or functions that only
# escape.  Furthermore, no fates are split.  I expect that
# the majority of fates are escaping, except for a few known
# fates that were created for reasons of space complexity (as
# the join of two branches, for example).  I doubt there are many
# fates which both escape and have known calls. (Trevor Jim)



api Split_Known_Escaping_Functions {

     split_known_escaping_functions:  { function: fate_passing_style::Function,
		      table: int_hash_table::Hash_Table( highcode_type::Highcode_Type ),
		      click: String -> Void } -> fate_passing_style::Function;
};

# We are invoked from:
#
#     src/lib/compiler/upper/fps-optimize/fps-optional-optimizations-g.pkg

						 		# Machine_Properties			is from   src/lib/compiler/codegen/main/machine-properties.api
generic package split_known_escaping_functions_g (

    machine_properties:  Machine_Properties		# Typically 					  src/lib/compiler/codegen/x86/x86-machine-properties.pkg

)
: (weak)  Split_Known_Escaping_Functions			# Split_Known_Escaping_Functions	is from   src/lib/compiler/upper/fps-optimize/split-known-escaping-functions-g.pkg

{
    stipulate

        include fate_passing_style; 

	package lv =  highcode_var;				# highcode_var	is from   src/lib/compiler/upper/highcode/highcode-var.pkg

    herein

	fun share_name (x, VAR y) => lv::share_name (x, y); 
	    share_name _ => ();
        end;

	fun split_known_escaping_functions {
                function => (fkind, fvar, fargs, ctyl, cexp),
		table    => typtable,
		click
            }
            =
	    {   debug = *controls::cg::debugcps; #  FALSE 

		fun debugprint s =  if debug  controls::print::say s;    fi;
		fun debugflush () =  if debug  controls::print::flush();  fi;

		rep_flag = machine_properties::representations;
		type_flag = *controls::cg::checkcps1 and rep_flag;


		exception SPLIT1;

		fun getty v
		    = 
		    if type_flag 

                         (int_hash_table::get  typtable  v)
                         except
                             _ =
				  {   controls::print::say ("SPLIT1: Can't find the variable " +
					      (int::to_string v) + " in the typtable ***** \n");
				      raise exception SPLIT1;
                                  };
		    else
                         highcode::ltc_void;
                    fi;

		fun addty (f, t)
                    =
                    if type_flag  int_hash_table::set typtable (f, t); fi;

		fun copy_lvar v
                    =
                    {   x = lv::copy_highcode_variable (v);
			addty (x, getty v);
                        x;
		    };

		stipulate

		    exception SPLIT2;

		    my m:  int_hash_table::Hash_Table( Value )
                        =
                        int_hash_table::make_table (32, SPLIT2);

		herein

		    fun makealias x
			=
		        {   share_name x;
			    int_hash_table::set m x;
		        };

		    fun alias (VAR v)
                            =>
                            (THE (int_hash_table::get  m  v))
                            except
                                SPLIT2 = NULL;

		        alias _ => NULL;
                    end;
		end;

		stipulate

                    exception SPLIT3;

		    my m:  int_hash_table::Hash_Table { used:  Ref( Int ), called:  Ref( Int ) }
			 =
			 int_hash_table::make_table (32, SPLIT3);

		herein

                    get = int_hash_table::get  m;

		    fun enter_fn (_, f, _, _, _)
                        =
			int_hash_table::set m (f,{ used=>REF 0, called=>REF 0 } );
			#
		        # Perhaps I shouldn't bother to enter_fn fates?

		    fun use (VAR v)
			    =>
			    {   (get v) ->   { used, ... };
				used := *used + 1;
			    }
			    except
				SPLIT3 = ();

			use _ => ();
                    end;

		    fun call (VAR v)
                            =>
		            {   (get v) ->   { used, called };
		                used   :=  *used   + 1;
                                called :=  *called + 1;
		             }
                             except
                                 SPLIT3 = ();

		        call _ => ();
                    end;
		end;



		# Get usage information and
                # mark whether or not we will
		# be doing any splits.

		found_split = REF FALSE;

		recursive val pass1
		    = 
		    fn  RECORD(_, vl, _, e) => { apply (use o #1) vl; pass1 e;};
			SELECT(_, v, _, _, e) => { use v; pass1 e;};
			OFFSET(_, v, _, e) => { use v; pass1 e;};
			SWITCH (v, _, el) => { use v; apply pass1 el;};
			BRANCH(_, vl, _, e1, e2) => { apply use vl; pass1 e1; pass1 e2;};
			SETTER(_, vl, e) => { apply use vl; pass1 e;};
			LOOKER(_, vl, _, _, e) => { apply use vl; pass1 e;};
			ARITH(_, vl, _, _, e) => { apply use vl; pass1 e;};
			PURE(_, vl, _, _, e) => { apply use vl; pass1 e;};
			RAW_C_CALL(_, _, _, vl, _, e) => { apply use vl; pass1 e;};
			APPLY (f, vl) => { call f; apply use vl;};

			MUTUALLY_RECURSIVE_FNS (l, e)
                            =>
			    {   # Any changes to dosplit() (below)
                                # must be reflected here:
				#
			        fun checksplit NIL
                                        =>
                                        ();

				    checksplit ((FATE, _, _, _, _) ! tl)
                                        =>
                                        checksplit tl;

				    checksplit ((_, f, _, _, _) ! tl)
				        =>
				        {   (get f) ->  { used=>REF u, called=>REF c };

					    if (u!=c and c!=0)   found_split := TRUE;
					    else                 checksplit tl;
                                            fi;
				       };
                                end;

			        apply enter_fn l;

			        apply (fn (_, _, _, _, body) = pass1 body)
                                     l;

			        pass1 e;

			        if (not *found_split)  checksplit l;   fi;
			   };
                    end;

		recursive val reduce
                    = 
		    fn RECORD (k, vl, w, e) => RECORD (k, vl, w, reduce e);
		       SELECT (i, v, w, t, e) => SELECT (i, v, w, t, reduce e);
		       OFFSET (i, v, w, e) => OFFSET (i, v, w, reduce e);
		       SWITCH (v, c, el) => SWITCH (v, c, map reduce el);
		       BRANCH (i, vl, c, e1, e2) =>
			    BRANCH (i, vl, c, reduce e1, reduce e2);
		       LOOKER (i, vl, w, t, e) => LOOKER (i, vl, w, t, reduce e);
		       ARITH (i, vl, w, t, e) => ARITH (i, vl, w, t, reduce e);
		       PURE (i, vl, w, t, e) => PURE (i, vl, w, t, reduce e);
		       SETTER (i, vl, e) => SETTER (i, vl, reduce e);
		       RAW_C_CALL (k, l, p, vl, wtl, e) => RAW_C_CALL (k, l, p, vl, wtl, reduce e);

		       (e as APPLY (f, vl))
                           => 
			   case (alias f)
			       NULL   => e;
			       THE f' => APPLY (f', vl);
                           esac;

		       MUTUALLY_RECURSIVE_FNS (l, e)
                           =>
			   {   fun dosplit NIL => NIL;

				   dosplit ((hd as (ESCAPE, f, vl, cl, body)) ! tl)
                                       =>
				       {   my { used=>REF u, called=>REF c } = get f;

				           if (u!=c and c!=0)

					       # Function escapes AND
                                               # has known call sites:
                                               #
					       f'  = copy_lvar f;
					       vl' = map copy_lvar vl;
					       click "S";
					       makealias (f, VAR f');
					       (NO_INLINE_INTO, f, vl', cl, APPLY (VAR f', map VAR vl')) !
					       (ESCAPE, f', vl, cl, body) !
					       (dosplit tl);

					   else hd ! (dosplit tl);
                                           fi;
				       };

				   dosplit (hd ! tl) => hd ! (dosplit tl);
                               end;

			       l' = dosplit l;

			       # Could check for NO_INLINE_INTO in reduce_body, so
			       # that we don't reduce in the body of something we've
			       # just split; but we might be using NO_INLINE_INTO
			       # for something else (e.g. UNCURRY).

			       fun reduce_body (fk, f, vl, cl, body)
                                   =
                                   (fk, f, vl, cl, reduce body);

			       MUTUALLY_RECURSIVE_FNS (map reduce_body l', reduce e);
			  };
                  end ;

	        # Body of split_known_escaping_functions 

		debugprint "Etasplit: ";
		pass1 cexp;

		if *found_split
                     (fkind, fvar, fargs, ctyl, reduce cexp);
		else (fkind, fvar, fargs, ctyl, cexp);    fi
		before
                    debugprint "\n";

	    };	#  fun split_known_escaping_functions 
    end;	#  toplevel with
};		#  generic package  split_known_escaping_functions_g 




## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
