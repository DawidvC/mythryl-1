# explode.pkg
#
# There are two implementation strategies for this:
#
#  (1) A centralized implementation that seperates the game engine
#      from the interface.
#
#  (2) A distributed implementation that more tightly couples the
#      engines for the nodes with the widgets that represent them.


api Game_Graph {

    Node;

    neighbors:  Node -> List( Node );
	#
	# Returns the list of neighbors of this node;

    degree:  Node -> Int;
	#
	# Returns the number of edges;

    state:  Node -> Null_Or { player: Int, npebbles };
	#
	# Returns the current state of the node,
	# which can be (NULL), or have some number
        # of pebbles belonging to some player.

    set_state
	:
	(Node, Null_Or { player: Int, npebbles: Int } )
        ->
        Void;
};

generic package explode_g (g:  Game_Graph) {

    fun place_pebble (nd, player)
	=
	{   n = case (g::state nd)

		    NULL =>
		        {   g::set_state (nd, THE { player, npebbles=>1 } );
		            1;
                        };

		    THE { player=p, npebbles }
                        =>
		        if (p != player)
                            raise exception ILLEGAL;
		        else
			    g::set_state (nd, THE { player=>p, npebbles=>npebbles+1 } );
			    npebbles+1;
                        fi;
		esac;

	    if (g::degree nd == n)
		#
		g::set_state (nd, NULL);
		explode (player, g::neighbors nd);
	    fi;
	};

};
