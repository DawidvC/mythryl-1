## ppc-shuffle-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/ppc.make6

generic package ppc_shuffle_g (

    instruction_set: Instruction_Set_Ppc		# Instruction_Set_Ppc	is from   src/lib/compiler/lower/ppc/instruction/instruction-set-ppc.api

)

{
    package instruction_set = instruction_set;
    package i = instruction_set;
    package shuffle = shuffle_g( i );			# shuffle_g		is from   src/lib/compiler/lower/instruction/shuffle-g.pkg

    Type = { tmp: Null_Or( i::Ea ), dst: List( cells_basis::Cell ), src: List( cells_basis::Cell ) };

    fun error msg
        =
        lowcode_error_message::error("ppc_shuffle_g", msg);

    # WARNING: these move operators assume 32 bit addressing is used!  XXX BUGGO FIXME
    # Allen

    fun move { src=>i::DIRECT rs, dst=>i::DIRECT rd } => 
	   [i::arith { oper=>i::OR, rt=>rd, ra=>rs, rb=>rs, rc=>FALSE, oe=>FALSE } ];

	move { src=>i::DIRECT rs, dst=>i::DISPLACE { base, disp, mem } } => 
	   [i::st { st=>i::STW, rs, ra=>base, d=>i::LABEL_OP disp, mem } ];

	move { src=>i::DISPLACE { base, disp, mem }, dst=>i::DIRECT rt } => 
	   [i::ll { ld=>i::LWZ, rt, ra=>base, d=>i::LABEL_OP disp, mem } ];

	move _ => error "move";
    end;

    fun fmove { src=>i::FDIRECT fs, dst=>i::FDIRECT fd } => 
	   [i::funary { oper=>i::FMR, fb=>fs, ft=>fd, rc=>FALSE } ];

	fmove { src=>i::FDIRECT fs, dst=>i::DISPLACE { base, disp, mem } } => 
	   [i::stf { st=>i::STFD, fs, ra=>base, d=>i::LABEL_OP disp, mem } ];

	fmove { src=>i::DISPLACE { base, disp, mem }, dst=>i::FDIRECT ft } =>
	   [i::lf { ld=>i::LFD, ft, ra=>base, d=>i::LABEL_OP disp, mem } ];

	fmove _ => error "fmove";
    end;

    shuffle = shuffle::shuffle { mv_instr=>move, ea=>i::DIRECT };

    shufflefp = shuffle::shuffle { mv_instr=>fmove, ea=>i::FDIRECT };
};
