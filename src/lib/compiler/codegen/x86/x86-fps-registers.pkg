## X86CpsRegs.sml --- FPS registers used on the Intel X86

# Compiled by:
#     src/lib/compiler/backend-x86.make6

api Xy86Cpsregs {
    include Cpsregs;				# Cpsregs	is from   src/lib/compiler/codegen/compile-fps/fps-registers.api
};


package x86cps_regs: (weak)  Cpsregs {		# Cpsregs	is from   src/lib/compiler/codegen/compile-fps/fps-registers.api

    package codetree = x86codetree;		# x86codetree	is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
    package t= x86codetree;			# x86codetree	is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
    package c= x86cells;			# x86cells	is from   src/lib/compiler/lower/x86/instruction/x86-cells.pkg

    package t = codetree;

    fun upto (from, to)
        =
        from > to   ??   []
                    ::   from ! (upto (from+1, to));

    infix val  upto ; 

    gp = c::gpreg;
    fp = c::fpreg;

    eax = t::REG (32, c::eax);	esp = t::REG (32, c::esp);
    ecx = t::REG (32, c::ecx);	ebp = t::REG (32, c::ebp);
    edx = t::REG (32, c::edx);	esi = t::REG (32, c::esi);
    ebx = t::REG (32, c::ebx);	edi = t::REG (32, c::edi);

    virtual_frame_pointer = c::new_dedicated_cell cells_basis::REGISTER ();
    vfptr = t::REG (32, virtual_frame_pointer);

    fun frameptr which
        =
        which  ??  vfptr
               ::  esp;

    fun reg_in_mem (which, i)
	=
	{   fp = frameptr which;
	    t::LOAD (32, t::ADD (32, fp, t::LITERAL (t::machine_int::from_int (32, i))), cpsregions::memory); 
	};

    allocptr 	    = edi;
    stackptr      = esp;
    fun stdarg _      = ebp;
    fun stdcont _     = esi;


    fun baseptr		   vfp	= reg_in_mem (vfp, 4);
    fun exnptr 		   vfp	= reg_in_mem (vfp, 8);
    fun limitptr	   vfp 	= reg_in_mem (vfp, 12);

    fun gc_link 	   vfp	= reg_in_mem (vfp, 16);
    fun storeptr 	   vfp 	= reg_in_mem (vfp, 24);
    fun current_thread_ptr vfp 	= reg_in_mem (vfp, 28);

    fun stdlink  _	= t::REG (32, gp 8); 	#  vreg 0 
    fun stdclos  _	= t::REG (32, gp 9); 	#  vreg 1 

    fun make_vreg_list (n, 0) => [];
        make_vreg_list (n, count) => t::REG (32, gp n) ! make_vreg_list (n+1, count - 1);
    end;

    #  miscregs = { ebx, ecx, edx, r10, r11, ... r31 } 
    #
    miscregs
        =
	ebx ! ecx ! edx ! make_vreg_list (10, x86runtime::num_vregs - 2);

    calleesave  = rw_vector::from_list miscregs;
    exhausted   = NULL;

    floatregs   = map (fn f => t::FREG (64, fp f); end ) (8 upto 31);
    savedfpregs = [];

    stipulate

	fun un_reg (t::REG (_, r)) => r;
	    un_reg _ => raise exception FAIL "x86CpsRegs: unREG";
        end;

    herein

	avail_r = map un_reg [ebp, esi, ebx, ecx, edx, eax];
	dedicated_r = map un_reg [edi, esp, vfptr];
	avail_f = map fp (8 upto 31);
	dedicated_f = []; #  map fp [0, 1, 2, 3, 4, 5, 6, 7] 
	signed_gctest = FALSE;
	address_width = 32;

	ccall_caller_save_r = [un_reg edi];
	ccall_caller_save_f = [];
    end;
};


## COPYRIGHT (c) 1997 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
