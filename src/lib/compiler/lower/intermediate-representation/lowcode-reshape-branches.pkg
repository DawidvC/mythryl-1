#
# This module rearranges and eliminate branches in a problem to
# get better locality. 
#
# -- Allen Leung


generic package ReshapeBranches
    ( package ir:         LOWCODE_IR
      package instruction_properties:  Instruction_Properties
         sharing ir::I = instruction_properties::I
    ) : LOWCODE_IR_OPTIMIZATION
{

   package ir       = IR
   package control_flow_graph      = ir::control_flow_graph
   package dom      = ir::Dom
   package loop     = ir::Loop
   package w        = control_flow_graph::W
   package g        = graph
   package util     = ir::Util

   type flowgraph = ir::IR


   # Restructure branches to in order to get better locality.

   name = "ReshapeBranches"

   fun run IR =
   let my CFG as g::GRAPH cfg   = IR
       my Dom as g::GRAPH dom   = ir::dom  IR
       my Loop as g::GRAPH loop = ir::loop IR
       dominates            = Dom::dominates Dom
       labelOf              = Util::labelOf CFG
       changed              = REF FALSE

       exception GiveUp

       # Check that a block does not have stupid pseudo ops that
       # get in the way
       fun no_pseudo_ops j =
           let my control_flow_graph::BLOCK { data, ... } = cfg.node_info j
           in  case *data of
                  [] => TRUE
               |  _  => FALSE
           end

       #  Can block j has a new fallsthru entry? 
       fun can_fallsthru j =
           case control_flow_graph::fallsThruFrom (CFG, j) of
              NULL   => no_pseudo_ops j
           |  THE _ => FALSE

       #  flip conditionals around 
       fun flip_cond should_flip (i, control_flow_graph::BLOCK { instructions, ... } ) =
          case (cfg.out_edges i,*instructions) of
            ([e1 as (_, j, control_flow_graph::EDGE { w=w1, k=k1 as control_flow_graph::BRANCH b1, a=a1 } ),
              e2 as (_, k, control_flow_graph::EDGE { w=w2, k=k2 as control_flow_graph::BRANCH b2, a=a2 } )], 
              branch . rest) =>
             if j == k then #  targets are the same 
             let a = REF (*a1 @ *a2)
             in  cfg.set_out_edges 
                    (i, [(i, j, control_flow_graph::EDGE { w=REF(*w1 + *w2), k=control_flow_graph::JUMP, a=a } )]);
                 instructions := instruction_properties::jump (labelOf j) . rest;
                 changed := TRUE
             end
             else if should_flip (e1, e2) then 
                let branch' = instruction_properties::negateConditional branch
                in  if b1 and not (can_fallsthru j) or
                       b2 and not (can_fallsthru k) then
                       raise exception GiveUp
                    
                    instructions := branch' . rest;
                    control_flow_graph::removeEdge CFG e1;
                    control_flow_graph::removeEdge CFG e2;
                    cfg.add_edge (i, j, control_flow_graph::EDGE { w=w1, k=k2, a=a1 } );
                    cfg.add_edge (i, k, control_flow_graph::EDGE { w=w2, k=k1, a=a2 } );
                    Util::updateJumpLabel CFG i;
                    changed := TRUE
                end 
             else ()
         | _ => ()

       fun follow i = 
       let fun chase j = 
               case cfg.out_edges j of
                 [(_, k, _)] => if k == i then k else chase k
               | _ => j
       in chase i end

       #  Falls thru case should be likely for forward branches. 
       fun should_flip_forward_branches (
           (i, j, control_flow_graph::EDGE { w=w1, k=control_flow_graph::BRANCH b1, ... } ),
           (_, k, control_flow_graph::EDGE { w=w2, k=control_flow_graph::BRANCH b2, ... } )) =
             (b1 and *w1 > *w2 and not (dominates (follow j, i)))
             or
             (b2 and *w2 > *w1 and not (dominates (follow k, i)))
        | should_flip_forward_branches _ = FALSE


       #  Eliminate all fallsthru into a block j

       fun elim_fallsthru j =
           let fun elim (e as (i, j, control_flow_graph::EDGE { k=control_flow_graph::BRANCH FALSE, ... } )) =
                      flip_cond (fn _ => TRUE) (i, cfg.node_info i)
                 | elim (e as (i, j, control_flow_graph::EDGE { k=control_flow_graph::FALLSTHRU, w, a, ... } )) =
                      let my i' as control_flow_graph::BLOCK { instructions, ... } = cfg.node_info i
                      in  instructions := instruction_properties::jump(
                                control_flow_graph::define_local_label (cfg.node_info i)) . (*instructions);
                          control_flow_graph::removeEdge CFG e;
                          cfg.add_edge (i, j, control_flow_graph::EDGE { k=control_flow_graph::JUMP, a=a, w=w } );
                          Util::updateJumpLabel CFG i;
                          changed := TRUE
                      end
                 | elim _ = ()
           in  apply elim (cfg.in_edges j)
           end


       # If a backedge is an unconditional jump,
       # Try to eliminate it by changing it into a fallsthru.

       fun restructure_loop (_, Loop::LOOP { header, backedges=[], ... } ) = ()
         | restructure_loop(_, Loop::LOOP { header, backedges=e . es, ... } ) =
       if no_pseudo_ops header then
       let fun find_best ((e as (_, _, control_flow_graph::EDGE { w=w1, ... } )) . es,
                         best_e as (_, _, control_flow_graph::EDGE { w=w2, ... } )) =
                  find_best (es, if *w1 > *w2 then e else best_e)
             | find_best([], best_e) = best_e
       in  case find_best (es, e) of
              best_e as (i, j, control_flow_graph::EDGE { k=control_flow_graph::JUMP, w, a } ) =>
                  if i != header then 
                  (let elim_fallsthru header
                       elim_fallsthru i
                       my control_flow_graph::BLOCK { instructions, ... } = cfg.node_info i
                       fun remove_jump (instructions as jmp . rest) =
                           if instruction_properties::instrKind jmp == instruction_properties::IK_JUMP then
                              rest else instructions
                         | remove_jump [] = []
                   in  instructions := remove_jump(*instructions);
                       control_flow_graph::removeEdge CFG best_e;
                       cfg.add_edge (i, j, control_flow_graph::EDGE { k=control_flow_graph::FALLSTHRU, w=w, a=a } );
                       changed := TRUE
                   end except _ => ())
                  else ()
           | _ => () 
       end
       else ()

       #  Restructure conditionals branches  
       restructure_conditionals =
              flip_cond should_flip_forward_branches

   in  cfg.forall_nodes (fn x => restructure_conditionals x except _ => ());
       loop.forall_nodes restructure_loop; 
       if *changed then ir::changed IR 
       Util::mergeAllEdges IR;
       IR
   end

}

