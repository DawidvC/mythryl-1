## error.pkg

# Compiled by:
#     src/lib/compiler/lower/tools/source-map.make6

package mdlerror: (weak)  Mdl_Error {		# Mdl_Error	is from   src/lib/compiler/lower/tools/source-map/error.api

   loc = REF source_mapping::dummy_loc;

   error_count   = REF 0;
   warning_count = REF 0;

   fun init ()
       = 
       {   error_count   := 0;
           warning_count := 0;
           loc := source_mapping::dummy_loc;
       };

   fun status ()
       =
       {   fun pr (0, s, t) => ("no "  + s, t);
	       pr (1, s, t) => ("one " + s, t);
	       pr (n, s, t) => (int::to_string n + " " + s + "s", "are");
           end;

	   my (e, t) = pr (*error_count, "error", "is");
	   my (w, t) = pr (*warning_count, "warning", t);

	   "There " + t + " " + e + " and " + w;
       };
  
   log_file_name   =  REF ""; 
   log_file_stream =  REF NULL:   Ref( Null_Or( file::Output_Stream ) );

   fun close_log_file ()
       =
       case *log_file_stream
         
            THE s
                => 
                {   file::close_output  s;
                    log_file_stream := NULL;
                    log_file_name := "";
                };

            NULL => ();
       esac;

   fun open_log_file filename
       =
       {   close_log_file();
           log_file_name := filename;
           log_file_stream := THE (file::open_for_write filename);
       };

   fun logfile ()
       =
       *log_file_name;

   fun print_to_log text
       = 
       case *log_file_stream
         
            NULL  =>  ();
            THE s =>  file::write (s, text);
       esac;

   exception ERROR;

   fun set_loc l = loc := l;

   fun with_loc l f x
       =
       {   p = *loc;
	   #  print (SourceMapping::to_string l + "\n") 
	   set_loc l;
	   y = f x;
	   set_loc p;
	   y;
       };

   fun log msg
       = 
       {   text = msg + "\n";
	   file::write (file::stderr, text);
	   print_to_log text;
       };

   fun error msg
       =
       {   log (source_mapping::to_string *loc + ": " + msg); 
           error_count := *error_count + 1;
       };

   fun error_pos (l, msg)
       =
       {   set_loc l;
           error msg;
       };

   fun warning msg
       =
       {   log (source_mapping::to_string (*loc) + ": warning: " + msg);
                      warning_count := *warning_count + 1;
       }; 

   fun warning_pos (l, msg)
       =
       {   set_loc l;
           warning msg;
       };

   fun fail msg
       =
       {   error msg;
           raise exception ERROR;
       };
};
