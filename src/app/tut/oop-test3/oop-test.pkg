## oop-test.pkg

# Test via:
#     linux% my
#     eval: make "oop-test.make6";
#     eval: obj1 = test_class::new       (                                         { field1 => "11" }, ());
#     eval: obj2 = test_subclass::new    (                     { field1 => "22" }, { field1 => "21" }, ());
#       eval: obj3 = test_subsubclass::new ( { field3 => "33" }, { field2 => "32" }, { field1 => "31" }, ());
#     eval: test_class::get obj1;
#     eval: test_class::get obj2;
#       eval: test_class::get obj3;
#     eval: test_subclass::get obj2;
#       eval: test_subclass::get obj3;
#       eval: test_subsubclass::get obj3;

package test_class {

    package super = object;

    Object__State(X)
        =
        OBJECT__STATE
          { object__methods: Object__Methods(X),
	    object__fields:  Object__Fields(X)
	  }
    withtype
	Full__State(X) = (Object__State(X), X)			# Our state record plus those of our subclass chain, if any.
    also
	Self(X) = super::Self( Full__State(X) )
    also
	Object__Methods(X) = { get: Self(X) -> String }
    also
	Object__Fields(X)  = { field1:  String }
    ;

    Myself = Self( oop::Oop_Null );

    package super = object;

    fun get self
	=
	"string_value1";
# 	    {   my (recreate, (OBJECT__STATE { object__methods, object__fields }, substate)) = super::unpack__object self;
# 		object__fields.field1;
# 	    };

    object__methods = { get => get };

    package oop__internal:
        api {
	    Full__State(X);
	    Self(X)  = super::Self( Full__State( X ) );
	    Myself   = Self( oop::Oop_Null );			# Used only for the return type of 'new', everywhere else is Self(X).

	    Object__Fields(X) = { field1:  String };

	    get:  Self(X)  -> String;

	    pack__object:        (Object__Fields(X), Void)  ->  X -> Self(X);

            override__method_get: (Self(X) -> String) -> Self(X) -> Self(X);

	    make__object:        (Object__Fields(X), Void)  -> Myself;
	    unpack__object:       Self(X)            -> (X -> Self(X), X);
        }
    = package {

	Object__State(X)
            =
            OBJECT__STATE
              { object__methods: Object__Methods(X),
		object__fields:  Object__Fields(X)
	      }
	withtype
	    Full__State(X) = (Object__State(X), X)			# Our state record plus those of our subclass chain, if any.
	also
	    Self(X) = super::Self( Full__State(X) )
	also
	    Object__Methods(X) = { get: Self(X) -> String }
	also
	    Object__Fields(X)  = { field1:  String }
	;

	Myself = Self( oop::Oop_Null );

	fun get (self: Self(X))
	    =
	    {   my (_ /*recreate*/, (OBJECT__STATE { object__methods, object__fields => _ }, _ /*substate*/)) = super::unpack__object self;
		object__methods.get  self;
	    };

	fun pack__object (fields_1, fields_0) substate
	    =
	    super::pack__object fields_0 (OBJECT__STATE { object__methods, object__fields => fields_1 }, substate);

	fun override__method_get  new_method  me
	    =
	    oop::repack_object
		(fn (OBJECT__STATE { object__methods, object__fields }) =  OBJECT__STATE { object__methods => { get => new_method },  object__fields })
		(super::unpack__object me);

	fun make__object fields_tuple
	    =
	    pack__object fields_tuple oop::OOP_NULL;

	fun unpack__object  me
	    =
	    oop::unpack_object (super::unpack__object  me);
    };
    include oop__internal;
};


package test_subclass {

    package super = test_class;

    Object__State(X)
        =
        OBJECT__STATE
          { object__methods: Object__Methods(X),
	    object__fields:  Object__Fields(X)
	  }
    withtype
	Full__State(X) = (Object__State(X), X)			# Our state record plus those of our subclass chain, if any.
    also
	Self(X) = super::Self( Full__State(X) )
    also
	Object__Methods(X) = { get: Self(X) -> String }
    also
	Object__Fields(X)  = { field1:  String }
    ;

    Myself = Self( oop::Oop_Null );

#    package super = test_class;

    fun get self
	=
	"string_value2";
# 	    {   my (recreate, (OBJECT__STATE { object__methods, object__fields }, substate)) = super::unpack__object self;
# 		object__fields.field1;
# 	    };

    fun getitx self
	=
	{   my (recreate, (OBJECT__STATE { object__methods, object__fields }, substate)) = super::unpack__object self;
	    object__fields.field1;
	};

    my object__methods
#       : Object__Methods(X)
       = { get => get };

    package oop__internal
   :     api {
	    Full__State(X);
	    Self(X)  = super::Self( Full__State( X ) );
	    Myself   = Self( oop::Oop_Null );			# Used only for the return type of 'new', everywhere else is Self(X).

	    Object__Fields(X) = { field1:  String };

	    Object__Methods(X) = { get: Self(X) -> String };

	    get:   Self(X)  -> String;

	#   repack_methods:  (Object__Methods(X) -> Object__Methods(X)) -> Self(X) -> Self(X);
	#   repack_fields:   (Object__Fields(X)  -> Object__Fields(X) ) -> Self(X) -> Self(X);	# We don't actually export this.


	    pack__object:    (Object__Fields(X), test_class::Object__Fields(X), Void)  ->  X -> Self(X);
	    make__object:    (Object__Fields(X), test_class::Object__Fields(X), Void)  -> Myself;
	    unpack__object:   Self(X)            -> (X -> Self(X), X);
        }
    = package {


	Object__State(X)
            =
            OBJECT__STATE
                { object__methods: Object__Methods(X),
		  object__fields:  Object__Fields(X)
		}
	withtype
	    Full__State(X) = (Object__State(X), X)			# Our state record plus those of our subclass chain, if any.
	also
	    Self(X) = super::Self( Full__State(X) )
	also
	    Object__Methods(X) = { get: Self(X) -> String }
	also
	    Object__Fields(X)  = { field1:  String }
	;

	Myself = Self( oop::Oop_Null );

	fun getit self
	    =
	    {   my (recreate, (OBJECT__STATE { object__methods, object__fields }, substate)) = super::unpack__object self;
		object__fields.field1;
	    };


	fun get (self: Self(X))
	    =
	    {   my (_ /*recreate*/, (OBJECT__STATE { object__methods, object__fields => _ }, _ /*substate*/)) = super::unpack__object self;
		object__methods.get  self;
	    };

	fun new_super_get_method (self: super::Self(X))
            :
            String 
            =
	    "string_value1b";

	fun pack__object (fields_2, fields_1, fields_0) substate
	    =
	    super::pack__object (fields_1, fields_0) (OBJECT__STATE { object__methods, object__fields => fields_2 }, substate);

	fun make__object fields_tuple
	    =
	    {   self = pack__object fields_tuple oop::OOP_NULL;
		self = super::override__method_get  new_super_get_method  self;
                self;
            };

	fun unpack__object me
	    =
	    oop::unpack_object  (super::unpack__object me);

    };
    include oop__internal;
};


# package test_subsubclass  {
# 
#     package super = test_subclass;
# 
#     package oop_internal:
# 	api {
# 	    Full__State(X);
# 	    Self(X)  = super::Self( Full__State( X ) );
# 	    Myself   = Self( oop::Oop_Null );			# Used only for the return type of 'new', everywhere else is Self(X).
# 
# 	    Object__Fields(X) = { field3:  String };
# 
# 	    Object__Methods(X) = { get: Self(X) -> String };
# 
# 	    get:   Self(X)  -> String;
# 
# 	    repack_methods:  (Object__Methods(X) -> Object__Methods(X)) -> Self(X) -> Self(X);
# 	#   repack_fields:   (Object__Fields(X)  -> Object__Fields(X) ) -> Self(X) -> Self(X);	# We don't actually export this.
# 
# 
# 	    pack__object:    (Object__Fields(X), test_subclass::Object__Fields(X), test_class::Object__Fields(X), Void)  ->  X -> Self(X);
# 	    unpack__object:   Self(X)            -> (X -> Self(X), X);
# 	    make__object:    (Object__Fields(X), test_subclass::Object__Fields(X), test_class::Object__Fields(X), Void)  -> Myself;
# 	}
#     =
#     package {
# 
# 	Object__State(X)
#           =
#           OBJECT__STATE
#             { object__methods: Object__Methods(X),
# 		object__fields:  Object__Fields(X)
# 	      }
# 	withtype Full__State(X) = (Object__State(X), X)			# Our state record plus those of our subclass chain, if any.
# 	also     Self(X) = super::Self( Full__State(X) )
# 	also     Object__Methods(X) = { get: Self(X) -> String }
# 	also     Object__Fields(X)  = { field3:  String }
# 	;
# 
# 	Myself = Self( oop::Oop_Null );
# 
# 	fun get_method (self: Self(X))
# 	    =
# 	    {   my (recreate, (OBJECT__STATE { object__methods, object__fields }, substate)) = super::unpack__object  self;
# 		object__fields.field3;
# 	    }
# 
# 	also
# 	fun methods_vector ()
# 	    =
# 	    { get => get_method
# 	    }
# 
# 	also
# 	fun get (self: Self(X))
# 	    =
# 	    {   my (_ /*recreate*/, (OBJECT__STATE { object__methods, object__fields => _ }, _ /*substate*/)) = super::unpack__object self;
# 		object__methods.get  self;
# 	    }
# 
# 	also
# 	fun unpack__object  me
# 	    =
# 	    oop::unpack_object  (super::unpack__object  me)
# 
# 	also
# 	fun repack_methods  update_methods  me
# 	    =
# 	    oop::repack_object
# 		(fn (OBJECT__STATE { object__methods, object__fields }) =  OBJECT__STATE { object__methods => (update_methods object__methods),   object__fields })
# 		(super::unpack__object  me)
# 
# 	also
# 	fun override__method_get  new_method  me
# 	    =
# 	    oop::repack_object
# 		(fn (OBJECT__STATE { object__methods, object__fields }) =  OBJECT__STATE { object__methods => { get => new_method },  object__fields })
# 		(super::unpack__object  me)
# 
# 	also
# 	fun repack_fields  update_fields  me
# 	    =
# 	    oop::repack_object
# 		(fn (OBJECT__STATE { object__methods, object__fields }) =  OBJECT__STATE { object__fields  => (update_fields  object__fields ),   object__methods })
# 		(super::unpack__object me)
# 
#     #    also
#     #    fun peq super_eq p q
#     #        =
#     #        super_eq (p, q)
#     #        and
#     #        (get_int2 p) == (get_int2 q)
# 
# 	also
# 	fun pack__object (fields_3, fields_2, fields_1, fields_0) substate
# 	    =
# 	    {   result = super::pack__object (fields_2, fields_1, fields_0) (OBJECT__STATE { object__methods => methods_vector (), object__fields => fields_3 }, substate);
#     #            result = object::override__method_equal  peq  result;
# 		result;
# 	    };
# 
# 	fun make__object fields_tuple
# 	    =
# 	    pack__object fields_tuple oop::OOP_NULL;
# 
# 	fun pack' (fields_3, fields_2, fields_1, fields_0) substate
# 	    =
# 	    (super::pack__object (fields_2, fields_1, fields_0) (OBJECT__STATE { object__methods => methods_vector (), object__fields => fields_3 }, substate) );
# 
#     };
#     include oop_internal;
# };


## Copyright (c) 2010 by Jeffrey S Prothero,
## released under Gnu Public Licence version 3.
