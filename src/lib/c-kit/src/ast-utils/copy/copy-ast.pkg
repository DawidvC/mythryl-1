## copy-ast.pkg



# Used to copy raw_syntax packages while preserving unique adornments.



###                         "Never stop at a natural stopping point.
###                          That way lie dreary mornings and coder's block.
###
###                         "Stop rather When you absolutely cannot wait
###                          to see what comes next -- if it compiles, if it runs,
###                          whatever.  When it almost hurts to stop,
###                          -that- is the time to stop for the day.
###
###                         "You will then have no difficulty
###                          starting again upon the morrow!"
###
###                                               -- Stuart MacDonald



package CopyRawSyntaxTree:  COPYAST {

  use raw_syntax

  type aidtab = Tables::aidtab

  fun copyOpt copier aidtab NULL = NULL
    | copyOpt copier aidtab (THE v) = THE (copier aidtab v)

  fun copyAid aidtab oldaid = 
      let newaid = Aid::new ()
       in case Aidtab::find (aidtab, oldaid)
	    of NULL => () #  David B MacQueen: is this anomalous, should there be a warning? 
	     | THE ctype => Aidtab::set (aidtab, newaid, ctype);
	  newaid
      end

  fun copyRawSyntaxTree aidtab extdecls =
      list::map (copyExtDecl aidtab) extdecls

  and copyExtDecl aidtab (DECL (coreExtDecl, aid, loc)) =
      let aid = copyAid aidtab aid
	  coreExtDecl = copyCoreExtDecl aidtab coreExtDecl
      in DECL (coreExtDecl, aid, loc) end

  and copyCoreExtDecl aidtab =
      fn ExternalDecl decl => ExternalDecl (copyDecl aidtab decl)
       | FunctionDef (id, ids, statement) => FunctionDef (id, ids, copyStmt aidtab statement)
       | ExternalDeclExt ext => 
	     ExternalDeclExt (CopyRawSyntaxTreeExt::copyExtDeclExt (copyExpr, copyStmt, copyExtDecl) aidtab ext)

  and copyDecl aidtab =
      fn VarDecl (id, initExprOpt) => VarDecl (id, copyOpt copyInitExpr aidtab initExprOpt)
       | typedecl => typedecl #  TypeDecl 

  and copyStmt aidtab (statement as STMT (coreStmt, aid, loc)) =
      let aid = copyAid aidtab aid
	  coreStmt = copyCoreStmt aidtab coreStmt
       in STMT (coreStmt, aid, loc)
      end

  and copyCoreStmt aidtab = 
      fn Expr exprOpt => Expr (copyOpt copyExpr aidtab exprOpt)
       | Compound (decls, stmts) => Compound (map (copyDecl aidtab) decls, list::map (copyStmt aidtab) stmts)
       | While (expr, statement) => While (copyExpr aidtab expr, copyStmt aidtab statement)
       | Do (expr, statement) => Do (copyExpr aidtab expr, copyStmt aidtab statement)
       | For (exprOpt0, exprOpt1, exprOpt2, statement) => 
           For (copyOpt copyExpr aidtab exprOpt0,
		copyOpt copyExpr aidtab exprOpt1,
		copyOpt copyExpr aidtab exprOpt2,
		copyStmt aidtab statement)
       | Labeled (pid, statement) => Labeled (pid, copyStmt aidtab statement)
       | CaseLabel (li, statement) => CaseLabel (li, copyStmt aidtab statement)
       | DefaultLabel statement => DefaultLabel (copyStmt aidtab statement)
       | Return exprOpt => Return (copyOpt copyExpr aidtab exprOpt)
       | IfThen (expr, statement) => IfThen (copyExpr aidtab expr, copyStmt aidtab statement)
       | IfThenElse (expr, stmt0, stmt1) =>
	   IfThenElse (copyExpr aidtab expr, copyStmt aidtab stmt0, copyStmt aidtab stmt1)
       | Switch (expr, statement) => Switch (copyExpr aidtab expr, copyStmt aidtab statement)
       | StatExt ext => 
	   StatExt (CopyRawSyntaxTreeExt::copyStmtExt (copyExpr, copyStmt, copyExtDecl) aidtab ext)
       | statement => statement

  and copyExpr aidtab (EXPR (coreExpr, aid, loc)) =
      let aid = copyAid aidtab aid
	  coreExpr = copyCoreExpr aidtab coreExpr
       in EXPR (coreExpr, aid, loc)
      end

  and copyCoreExpr aidtab =
      fn Call (expr, exprs) =>
           Call (copyExpr aidtab expr, list::map (copyExpr aidtab) exprs)
       | QuestionColon (expr0, expr1, expr2) =>
	   QuestionColon (copyExpr aidtab expr0, 
			  copyExpr aidtab expr1,
			  copyExpr aidtab expr2)
       | Assign (expr0, expr1) =>
	   Assign (copyExpr aidtab expr0, copyExpr aidtab expr1)
       | Comma (expr0, expr1) => Comma (copyExpr aidtab expr0, copyExpr aidtab expr1)
       | Sub (expr0, expr1) => Sub (copyExpr aidtab expr0, copyExpr aidtab expr1)
       | Member (expr, pid) => Member (copyExpr aidtab expr, pid)
       | Arrow (expr, pid) => Arrow (copyExpr aidtab expr, pid)
       | Deref expr => Deref (copyExpr aidtab expr)
       | AddrOf expr => AddrOf (copyExpr aidtab expr)
       | Binop (binop, expr0, expr1) =>
	  Binop (binop, copyExpr aidtab expr0, copyExpr aidtab expr1)
       | Unop (unop, expr) => Unop (unop, copyExpr aidtab expr)
       | Cast (ctype, expr) => Cast (ctype, copyExpr aidtab expr)
       | ExprExt ext =>
	   ExprExt (CopyRawSyntaxTreeExt::copyExprExt (copyExpr, copyStmt, copyExtDecl) aidtab ext)
       | expr => expr

  and copyInitExpr aidtab =
      fn Simple expr => Simple (copyExpr aidtab expr)
       | Aggregate inits => Aggregate (map (copyInitExpr aidtab) inits)

}	#  generic package CopyRawSyntaxTreeFn 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 1998 by Lucent Technologies 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
