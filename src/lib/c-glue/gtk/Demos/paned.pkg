#  example-start paned paned.c 

local

  use C Gtk gtk_enums

   #  Create the list of "messages" 
  fun create_list () = 
  let 
      #  Create a new scrolled window, with scrollbars only if needed 
     scrolled_window = gtk_scrolled_window_new::f (NULL, NULL)
     gtk_scrolled_window_set_policy::f (scrolled_window,
				    GTK_POLICY_AUTOMATIC, 
				    GTK_POLICY_AUTOMATIC)
   
     #  Create a new list and put it in the scrolled window 
     list = gtk_list_new::f ()
     gtk_scrolled_window_add_with_viewport::f (scrolled_window, list)
     gtk_widget_show::f list
   
     #  Add some messages to the window 
     fun insert i = 
     if i < 10 then
     let buffer = "Message #"$int::to_string i
    	 list_item = gtk_list_item_new_with_label::f buffer
    	 gtk_container_add::f (list, list_item)
    	 gtk_widget_show::f list_item
     in  insert (i+1)
     end
     else ()
  in insert 0;
     scrolled_window
  end
   
  /* Add some text to our text widget - this is a callback that is invoked
     when our window is realized. We could also force our window to be
     realized with gtk_widget_realize, but it would have to be part of
     a hierarchy first 
  */

  fun realize_text text =
  let gtk_text_freeze::f text
      black = GtkStyle::get'black (GtkWidget::get'style text)
      gtk_text_insert::f (text, NULL, &black, NULL,
          string::cat
          ["From: pathfinder@nasa.gov\n",
           "To: mom@nasa.gov\n",
           "Subject: Made it!\n",
           "\n",
           "We just got in this morning. The weather has been\n",
           "great - clear but cold, and there are lots of fun sights.\n",
           "Sojourner says hi. See you soon.\n",
           " -Path\n"
          ],
          -1)
  in  gtk_text_thaw::f text
  end
   
  #  Create a scrolled text area that displays a "message" 
  fun create_text () = 
  let  
      #  Create a table to hold the text widget and scrollbars 
      table = gtk_table_new::f (0w2, 0w2, FALSE)
   
      /* Put a text widget in the upper left hand corner. Note the use of
       * GTK_SHRINK in the y direction */
      text = gtk_text_new::f (NULL, NULL);
      gtk_table_attach::f (table, text, 0w0, 0w1, 0w0, 0w1,
		      GTK_FILL + GTK_EXPAND,
		      GTK_FILL + GTK_EXPAND + GTK_SHRINK, 0w0, 0w0)
      gtk_widget_show::f text
   
      #  Put a HScrollbar in the lower left hand corner 
      hscrollbar = gtk_hscrollbar_new::f (GtkText::get'hadj text)
      gtk_table_attach::f (table, hscrollbar, 0w0, 0w1, 0w1, 0w2,
		      GTK_EXPAND + GTK_FILL, GTK_FILL, 0w0, 0w0)
      gtk_widget_show::f hscrollbar
   
      #  And a VScrollbar in the upper right 
      vscrollbar = gtk_vscrollbar_new::f (GtkText::get'vadj text)
      gtk_table_attach::f (table, vscrollbar, 0w1, 0w2, 0w0, 0w1,
		      GTK_FILL, GTK_EXPAND + GTK_FILL + GTK_SHRINK, 0w0, 0w0)
      gtk_widget_show::f vscrollbar
   
      /* Add a handler to put a message in the text widget when it is realized 
       */
      gtk_signal_connect::f (text, "realize", realize_text)
  in  table
  end

in
   
  fun main (prog, argv) =
  let gtk_init::f (prog . argv)

      window = gtk_window_new::f GTK_WINDOW_TOPLEVEL
      gtk_window_set_title::f (window, "Paned Windows")
      gtk_signal_connect::f (window, "destroy",
               			fn _ => gtk_main_quit::f())
      gtk_container_set_border_width::f (window, 0w10)
      gtk_widget_set_usize::f (window, 450, 400)

      #  Create a vpaned widget and add it to our toplevel window 
   
      vpaned = gtk_vpaned_new::f ()
      gtk_container_add::f (window, vpaned)
      gtk_paned_set_handle_size::f (vpaned, 0w10)
      gtk_paned_set_gutter_size::f (vpaned, 0w15) 
      gtk_widget_show::f vpaned
   
      #  Now create the contents of the two halves of the window 
   
      list   = create_list ()
      gtk_paned_add1::f (vpaned, list)
      gtk_widget_show::f list
   
      text   = create_text ()
      gtk_paned_add2::f (vpaned, text)
      gtk_widget_show::f text
      gtk_widget_show::f window
  in  gtk_main::f ();
      0
  end
end
#  example-end 
