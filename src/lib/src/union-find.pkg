# union-find.pkg
#
# UNIONFIND DATA STRUCTURE WITH PATH COMPRESSION AND RANKED UNION
#
# Author:
#    Fritz Henglein
#    DIKU, University of Copenhagen
#    henglein@diku.dk

# Compiled by:
#     src/lib/src/lib7.make6



###                "If you can dream it, you can do it."
###
###                              -- Walt Disney



package union_find: (weak)  Union_Find {		# Union_Find	is from   src/lib/src/union-find.api

    Union_Find_C X
      = ECR  (X, Int)
      | PTR  Union_Find( X )
    withtype Union_Find X = Ref( Union_Find_C( X ) );

    #
    fun find (p as REF (ECR _))
            =>
            p;

        find (p as REF (PTR p'))
            =>
            {   p'' = find p';
          
	        p := PTR p'';

                p'';
            };
    end;
    #
    fun u_ref x =  REF (ECR (x, 0));
    #
    fun !! p
        =
        case *(find p)
	  
	     ECR (x, _) =>  x;
	     _          =>  raise exception MATCH;
        esac;

      
    fun equal (p, p')
        =
        find p == find p';
    #
    fun set (p, x)
        =
        case (find p)
	  
	     (p' as REF (ECR(_, r))) =>   p' := ECR (x, r);
	     _                       =>   raise exception MATCH;
        esac;
    #
    fun link (p, q)
        =
        {   p' = find p;
	    q' = find q;
	  
	    if   (p' == q'   )                  FALSE;
                            else   p' := PTR q;   TRUE;  fi;
	};
    #
    fun unify f (p, q)
        =
        case (find p, find q)
	  
	     (p' as REF (ECR (pc, pr)), q' as REF (ECR (qc, qr)))
                 =>
		 {   new_c = f (pc, qc);
		
		     if   (p' == q')
		         
                          p' := ECR (new_c, pr);
                          FALSE;
		     else
			  if (pr == qr)
			           q' := ECR (new_c, qr+1);   p' := PTR q';
			  elif (pr < qr)
			         q' := ECR (new_c, qr);   p' := PTR q';
			  else #  pr > qr 
				p' := ECR (new_c, pr);
				q':= PTR p';
                          fi;
			  TRUE;
                     fi;
		};
	     _ => raise exception MATCH;
        esac;

    #
    fun union (p, q) = {
	  p' = find p;
	  q' = find q;
	  
	    if (p' == q')
	           FALSE;
	      else
                   case (*p', *q')

			(ECR (pc, pr), ECR (qc, qr))
			  =>
			   {
			      if (pr == qr)
				     { q' := ECR (qc, qr+1); p' := PTR q';};
			      elif (pr < qr)
				     p' := PTR q';
			      else
				     q':= PTR p';
			      fi;
			      TRUE;
			  };

		       _ => raise exception MATCH;
                   esac;
	    fi;
	  };

};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
