## translate-polylambda-to-anormal.pkg
## monnier@cs.yale.edu 
#
# Converting polylambda::Polylambda_Expression into A-Normal form.
#
#
#
# CONTEXT:
#
#     The Mythryl compiler code representations used are, in order:
#
#     1)  Raw Syntax is the initial front-end code representation.
#     2)  Deep Syntax is the second and final front-end code representation.
#     3)  Polylambda is the first backend code representation, used only transitionally.
#     4)  A-Normal  is the second backend code representation, and the first used for optimization.
#     5)  Fate-Passing-Style is the third and chief backend upper-half code representation.
#     6)  Codetree is the chief backend lower-half code representation.
#     7)  X86 instruction format (or equivalent for other target machines) -- an abstract tree format.
#     8)  X86 machine language   (or equivalent for other target machines) -- absolute binary code.
#
#     Our task here is converting from the third to the fourth form.
#
#
#
# For polylambda code format see:	     src/lib/compiler/upper/polylambda/polylambda.api
# For A-Normal code format see:		     src/lib/compiler/upper/anormal/anormal.api
# We get invoked (only) from:		     src/lib/compiler/toplevel/main/compile-g.pkg

# Compiled by:
#     src/lib/compiler/core.make6





###                      "Reading a translation is like examining
###                       the back of a piece of tapesty."
###
###                                              -- Cervantes.



api Translate_Polylambda_To_Anormal {

      translate:  polylambda::Polylambda_Expression -> anormal::Function_Declaration;
};

package translate_polylambda_to_anormal

: (weak)  Translate_Polylambda_To_Anormal		# Translate_Polylambda_To_Anormal	is from   src/lib/compiler/upper/polylambda/translate-polylambda-to-anormal.pkg

{
    stipulate

	package fl = pflatten;				#  Argument flattening 
	package di = debruijn_index;			# debruijn_index		is from   src/lib/compiler/front/typechecker/basics/de-bruijn-index.pkg

	package pt = highcode_data_representation;	# highcode_data_representation	is from   src/lib/compiler/upper/highcode/highcode-data-representation.pkg
	package po = highcode_primitive_op;		# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg

	package l  = polylambda;			# polylambda			is from   src/lib/compiler/upper/polylambda/polylambda.pkg
        package lt = polylambda_type;			# polylambda_type		is from   src/lib/compiler/upper/polylambda/polylambda-type.pkg

	package f  = anormal;				# anormal			is from   src/lib/compiler/upper/anormal/anormal.pkg
	package fu = anormal_stuff;			# anormal_stuff			is from   src/lib/compiler/upper/anormal/anormal-stuff.pkg

	package da = var_home;				# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package bt = type_types;			# type_types			is from   src/lib/compiler/front/typechecker/types/type-types.pkg

    herein

	say   = control_print::say;

	make_var =  highcode_var::make_highcode_variable;

	ident = fn le:  l::Polylambda_Expression
                    =
                    le;

	my (iadd_prim, uadd_prim)
            = 
	    {   lt_int = lt::ltc_int;

		int_op_type = lt::ltc_parrow (lt::ltc_tuple [lt_int, lt_int], lt_int);

		addu = po::ARITH { oper=>po::ADD, overflow=>FALSE, kind=>po::UINT 31 };
	    
                ( l::PRIMITIVE_OP (po::iadd, int_op_type, []),
                  l::PRIMITIVE_OP (addu,     int_op_type, [])
                );
	    };

	fun bug msg
            =
            error_message::impossible("translate_polylambda_to_anormal: " + msg);

	stipulate
            my (true_dcon', false_dcon')
		= 
		{   lt = lt::ltc_arrow (lt::ffc_rrhighcode, [lt::ltc_unit], [lt::ltc_bool]);

		    fun h (types::ENUM_CONSTRUCTOR { symbol, representation, ... } )
			=
			(symbol, representation, lt);

		
		    (h bt::true_dcon, h bt::false_dcon);
		};

	    fun bool_lexp b
                = 
		{   v = make_var();
                    w = make_var();

		    dc = if b  true_dcon'; else false_dcon';fi;
		
                    f::RECORD (fu::rk_tuple, [], v, 
		    f::CONSTRUCTOR (dc, [], f::VAR v, w, f::RET [f::VAR w]));
		};
	herein 

	    fun highcode_prim (po as (d, p, lt, ts), vs, v, e)
		= 
		case p
		     ( po::BOXED  | po::UNBOXED | po::CMP _ | po::PTREQL
		     | po::PTRNEQ | po::POLYEQL | po::POLYNEQ
                     )
                         =>
			 # Branch primops get translated into f::BRANCH:
			 #
			 f::LET([v], f::BRANCH (po, vs, bool_lexp TRUE, bool_lexp FALSE), e);

		     (po::GETRUNVEC | po::GETHANDLER | po::GET_CURRENT_THREAD_REGISTER | po::DEFLVAR)
                         =>
			 # primops that take zero arguments; argument types
			 # must be void
                         #
			 {   fun fix t
                                 = 
			         lt::ltw_arrow
                                   ( t, 
			             fn (ff,[t1], ts2)
					     =>
					     if (lt::type_constructors_are_equivalent (t1, lt::tcc_unit)) 

						 lt::ltc_tyc (lt::tcc_arrow (ff, [], ts2));
					     else
						 bug "unexpected zero-args prims 1 in highcode_prim";
					     fi;

				         _ => bug "highcodePrim: t1";
                                     end,

			             fn _ =  bug "unexpected zero-args prims 2 in highcode_prim"
                                   );

			     nlt = lt::ltw_ppoly
                                     ( lt, 
				       fn (ks, t) =  lt::ltc_ppoly (ks, fix t),
				       fn _       =  fix lt
                                     );

			     f::PRIMOP((d, p, nlt, ts), [], v, e);
			};

		    _ => 
			f::PRIMOP (po, vs, v, e);
                esac;

	end;					#  stipulate highcodePrim 

	# force_raw freezes the calling conventions of a data constructor;
	# strictly used by the CON and DATACON only 
	#
	fun force_raw (pty)
            = 
	    if (lt::ltp_ppoly pty )

	        my (ks, body) =  lt::ltd_ppoly pty;
	        my (aty, rty) =  lt::ltd_parrow body;

		lt::ltc_ppoly
                  ( ks,
		    lt::ltc_arrow (lt::ffc_rrhighcode, [fl::ltc_raw aty], [fl::ltc_raw rty])
                  );

	    else 
	        my (aty, rty) = lt::ltd_parrow pty;

		lt::ltc_arrow (lt::ffc_rrhighcode, [fl::ltc_raw aty], [fl::ltc_raw rty]);

	    fi;					#  function force_raw 

	fun tocon con
            =
	    case con
		 l::INTCON x    => f::INTCON x;
		 l::INT32CON x  => f::INT32CON x;
		 l::INTINFCON _ => bug "INTINFCON";
		 l::WORDCON x   => f::WORDCON x;
		 l::WORD32CON x => f::WORD32CON x;
		 l::REALCON x   => f::REALCON x;
		 l::STRINGCON x => f::STRINGCON x;
		 l::VLENCON x   => f::VLENCON x;
		 l::DATACON x   => bug "unexpected case in tocon";
	    esac;

	fun tofundec (venv, d, f_lv, arg_lv, arg_lty, body, is_recursive)
            =
	    {   my (body', body_lty)
                =
		# First, we translate the body
                # (in the extended dictionary):
		# 
		tolexp (lt::lt_insert (venv, arg_lv, arg_lty, d), d) body;

		# Detuple the arg type:
		# 
		my ((arg_raw, arg_ltys, _), unflatten)
                    =
                    fl::v_punflatten arg_lty;

		# Add tupling code at the beginning of the body:
		# 
		my (arg_lvs, body'') = unflatten (arg_lv, body');

		# Construct the return type if necessary:
		# 
		my (body_raw, body_ltys, _) = fl::t_pflatten body_lty;

		rettype = if (not is_recursive)  NULL;
			  else                   THE (map fl::ltc_raw body_ltys, f::OTHER_LOOP);
                          fi;

		my (f_lty, fkind)
                    =
		    if (lt::ltp_tyc arg_lty and lt::ltp_tyc body_lty) 

			# A function:
			#
			( lt::ltc_parrow (arg_lty, body_lty),

			  { is_recursive         => rettype,
                            all_call_sites_known => FALSE,
                            inlining_hint        => f::INLINE_IF_SIZE_SAFE,
			    calling_convention   => f::CALLING_CONVENTION_FUNCTION (lt::ffc_var (arg_raw, body_raw))
                          }
                        );
		    else 
			# A generic package:
			# 
			( lt::ltc_pfct (arg_lty, body_lty),

			  { is_recursive         => rettype,
                            all_call_sites_known => FALSE,
                            inlining_hint        => f::INLINE_IF_SIZE_SAFE,
			    calling_convention   => f::CALLING_CONVENTION_GENERIC
                          }
                        );
                    fi;

	        ( (fkind, f_lv, paired_lists::zip (arg_lvs, map fl::ltc_raw arg_ltys), body''),
		  f_lty
                );
	    }


	# Translate expressions whose package is the same
	# in Anormal as in polylambda (either both naming or both non-naming)
	# a fate is unnecessary:
	#
	also
        fun tolexp (venv, d) lambda_expression
            =
	    {   fun default_tovalues ()
                    =
		    tovalues
                      ( venv,
                        d,
                        lambda_expression,
			fn (vals, lambda_type)
                            =>
			    (f::RET vals, lambda_type); end
                      );

		case lambda_expression

		    l::APPLY (l::PRIMITIVE_OP _, arg) => default_tovalues();
		    l::APPLY (l::GENOP        _, arg) => default_tovalues();

		    l::APPLY (l::FN (arg_lv, arg_lty, body), arg_le)
                        =>
			tolexp (venv, d) (l::LET (arg_lv, arg_le, body));

		    l::APPLY (f, arg)
                        =>
			# First, evaluate f to a mere value:
                        # 
			tovalue
                          ( venv,
                            d,
                            f,
			    fn (f_val, f_lty)
                                =
				# Then evaluate the argument:
				#
				tovalues
                                  ( venv,
                                    d,
                                    arg,
				    fn (arg_vals, arg_lty)
                                        =
					# Now find the return type:
					#
					{   my (_, r_lty)
                                                = 
					        lt::ltp_pfct  f_lty
                                                    ??  lt::ltd_pfct    f_lty
					            ::  lt::ltd_parrow  f_lty;

					    # And finally do the call:
					    # 
					    (f::APPLY (f_val, arg_vals), r_lty);
					}
                                  )
                          );

		    l::MUTUALLY_RECURSIVE_FNS (lvs, ltys, lexps, lambda_expression)
                        =>
			# First, let's set up the enriched
                        # dictionary with those funs:
			#
			{   venv' = paired_lists::fold_left (fn (lv, lambda_type, ve) =>
						lt::lt_insert (ve, lv, lambda_type, d); end )
					       venv (lvs, ltys);

			     fun map3 _ ([], _, _) => [];
				 map3 _ (_, [], _) => [];
				 map3 _ (_, _, []) => [];

				 map3 f (x ! xs, y ! ys, z ! zs)
                                     =>
				     f (x, y, z) ! map3 f (xs, ys, zs);
                             end;

			     # Then translate each function in turn:
			     #	 
			     funs = map3  fn (f_lv, f_lty, l::FN (arg_lv, arg_lty, body))
						 =>
						 #1 (tofundec (venv', d, f_lv, arg_lv, arg_lty, body, TRUE));

					       _ =>
                                                 bug "non-function in l::MUTUALLY_RECURSIVE_FNS";
                                          end

					  (lvs, ltys, lexps);

			     # Finally, translate the Polylambda_Expression:
			     #
			     my (lambda_expression', lambda_type)
                                 =
                                 tolexp (venv', d) lambda_expression;

			     ( f::MUTUALLY_RECURSIVE_FNS (funs, lambda_expression'),
                               lambda_type
                             );
			 };

		    l::LET (highcode_variable, lambda_expression1, lambda_expression2)
                        =>
			tolvar
                          ( venv,
                            d,
                            highcode_variable,
                            lambda_expression1,
			    fn lambda_type1
                                =
			        tolexp
                                  ( lt::lt_insert (venv, highcode_variable, lambda_type1, d),
                                    d
                                  )
                                  lambda_expression2
                          );

		    l::RAISE (le, r_lty)
                        => 
			tovalue
                          ( venv,
                            d,
                            le,
			    fn (le_val, le_lty)
                                =
				{   my (_, r_ltys, _)
                                        =
                                        fl::t_pflatten r_lty;

				    ( f::RAISE (le_val, map fl::ltc_raw r_ltys),
                                      r_lty
                                    );
				}
                          );

		    l::EXCEPT (body, handler)
                        =>
			tovalue
                          ( venv,
                            d,
                            handler,
			    fn (h_val, h_lty)
                                =
				{   my (body', body_lty)
                                        =
                                        tolexp (venv, d) body;

				    (f::EXCEPT (body', h_val), body_lty);
				}
                          );

		    l::SWITCH (le, acs,[], NULL)
                        => bug "unexpected case in l::SWITCH";
			 #  tovalue (venv, d, le, fn _ = (f::RET[], [])) 

		    l::SWITCH (le, acs,[], THE lambda_expression)
                        =>
			tovalue
                          ( venv,
                            d,
                            le,
                            fn (v, lambda_type)
                                =
                                tolexp
                                  (venv, d)
                                  lambda_expression
                          );

		    l::SWITCH (le, acs, conlexps, default)
                        =>
			{   fun f (l::DATACON((s, cr, lambda_type), tycs, highcode_variable), le)
                                    =>
				    {   my (lv_lty, _)
                                            =
                                            lt::ltd_parrow
                                              (lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type
                                                  (lambda_type, tycs)
                                              );

				        newvenv = lt::lt_insert (venv, highcode_variable, lv_lty, d);

				        my (le, le_lty)
                                            =
                                            tolexp (newvenv, d) le;

				        ( ( f::DATACON
                                              ( (s, cr, force_raw  lambda_type),
						map fl::tcc_raw  tycs,
                                                highcode_variable
                                              ),
				            le
                                          ),
				          le_lty
                                        );
				    };

				f (con, le)
                                    =>
				    {   my (lambda_expression, lambda_type)
                                            =
                                            tolexp (venv, d) le;
				        ((tocon con, lambda_expression), lambda_type);
				    };
                            end;

			    tovalue
                              ( venv,
                                d,
                                le,
				fn (v, lambda_type)
                                    =
				    {   default  = null_or::map (#1 o tolexp (venv, d)) default;
					conlexps = map f conlexps;
					lambda_type = #2 (list::head conlexps);
				        (f::SWITCH (v, acs, map #1 conlexps, default), lambda_type);
				    }
                              );
		       };

		    # For mere values, use tovalues:
		    # 
		    _ => default_tovalues ();

                esac;
	    }


	# tovalue: turns a polylambda Polylambda_Expression into a value+type and then calls
	# the fate that will turn it into an Anormal Polylambda_Expression+type
	# (ltyenv * debruijn_index * l::Polylambda_Expression * ((value * Highcode_Type) -> (f::Polylambda_Expression * Highcode_Type list))) -> (f::Polylambda_Expression * Highcode_Type)
	# 
	# - venv is the type dictionary for values
	# - conts is the fate
	#
	also
        fun tovalue (venv, d, lambda_expression, fate)
            =
	    {   case lambda_expression
                  
		      # For simple values, it's trivial:
		      #	 
		      l::VAR v
                          =>
                          fate (f::VAR v, lt::lt_lookup (venv, v, d));

		      l::INT i
                          => 
			  {   i+i+2;					# Maybe trigger OVERFLOW exception.
			      fate (f::INT i, lt::ltc_int);
			  }
			  except
			      OVERFLOW
				  =
				  {   z  = i / 2;
				      ne = l::APPLY (iadd_prim, l::RECORD [l::INT z, l::INT (i-z)]);
				      tovalue (venv, d, ne, fate);
				  };


		      l::WORD i
                          => 
			  {   max_word = 0ux20000000;

			      if (unt::(<) (i, max_word))

				   fate (f::WORD i, lt::ltc_int);
			      else
				   x1 = unt::(/) (i, 0u2);
				   x2 = unt::(-) (i, x1);

				   ne = l::APPLY (uadd_prim, l::RECORD [l::WORD x1, l::WORD x2]);

				   tovalue (venv, d, ne, fate);
			      fi;
			  };

		      l::INT32  n =>  fate (f::INT32 n, lt::ltc_int32);
		      l::WORD32 n =>  fate (f::WORD32 n, lt::ltc_int32);
		      l::REAL   x =>  fate (f::REAL x, lt::ltc_real);
		      l::STRING s =>  fate (f::STRING s, lt::ltc_string);

		      # For cases where tolvar is more convenient:
		      #	 
		      _   => 
			  {   lv = make_var();
			      tolvar
                                ( venv,
                                  d,
                                  lv,
                                  lambda_expression,
                                  fn lambda_type
                                      =
                                      fate (f::VAR lv, lambda_type)
                                );
			  };
                esac;
	    }



	# tovalues: turns a polylambda Polylambda_Expression into a list of values and a list of types
	# and then calls the fate that will turn it into an Anormal Polylambda_Expression+type
	#
	# (ltyenv * debruijn_index * l::Polylambda_Expression * ((value list * Highcode_Type list) -> (f::Polylambda_Expression * Highcode_Type list))) -> (f::Polylambda_Expression * Highcode_Type)
	# 
	# - venv is the type dictionary for values
	# - fate is the fate
	#
	also
        fun tovalues (venv, d, lambda_expression, fate)
            =
	    {   1;

		case lambda_expression   

		    l::RECORD  lexps
                        =>
		        lexps2values
                          ( venv,
                            d,
                            lexps,
			    fn (vals, ltys)
                                =
				{   lambda_type = lt::ltc_tuple ltys;

				    my (_, ltys, _)
                                        =
                                        fl::t_pflatten lambda_type;

				    # Detect the case where
                                    # flattening is trivial:
				    # 
				    if (lt::lambda_types_are_equivalent (lambda_type, lt::ltc_tuple ltys) )

					fate (vals, lambda_type);
				    else
					lv = make_var();

					my (_, pflatten)   = fl::v_pflatten lambda_type; 
					my (vs, wrap)      = pflatten (f::VAR lv);
					my (c_lexp, c_lty) = fate (vs, lambda_type);

					( f::RECORD (fu::rk_tuple, vals, lv, wrap c_lexp),
					  c_lty
                                        );
				    fi;
				}
                          );

		    _   =>
                        tovalue
                          ( venv,
                            d,
                            lambda_expression,
			    fn (v, lambda_type)
                                =
				{   my (vs, wrap)
                                        =
                                        (#2 (fl::v_pflatten lambda_type))  v;

				    my (c_lexp, c_lty)
                                        =
                                        fate (vs, lambda_type);

				 (wrap c_lexp, c_lty);
				}
                          );
                esac;
	    }

	# Evaluate each lambda_expression
        # to a value:
        # 
	also
        fun lexps2values (venv, d, lexps, fate)
            =
	    f lexps ([], [])
            where

		fun f [] (vals, ltys)
                        =>
                        fate (reverse vals, reverse ltys);

		    f (lambda_expression ! lexps) (vals, ltys)
                        =>
		        tovalue
                          ( venv,
                            d,
                            lambda_expression,
			    fn (v, lambda_type)
                                =
			        f lexps (v ! vals, lambda_type ! ltys)
                          );
                end;
	    end


	# tolvar: Same as tovalue except that
        # it binds the value of the polylambda
	# to the indicated Highcode_Variable
        # and passes just the type to the continutation:
	#
	also
        fun tolvar (venv, d, highcode_variable, lambda_expression, fate)
            =
	    {   fun eta_expand (f, f_lty)
                    =
		    {   lv = make_var();

			my (arg_lty, ret_lty)
                            =
                            (lt::ltd_parrow f_lty);

		        tolvar
                          ( venv,
                            d,
                            highcode_variable,
			    l::FN (lv, arg_lty, l::APPLY (f, l::VAR lv)),
			    fate
                          );
		    };

		# inbetween tolvar and tovalue:
                # it binds the lambda_expression
                # to a variable but is free to choose
                # the Highcode_Variable and passes
                # it to the continutation:
		#
		fun tolvarvalue (venv, d, lambda_expression, fate)
                    =
		    tovalue
                      ( venv,
                        d,
                        lambda_expression,
			fn (v, lambda_type)
                            =
			    case v   

				f::VAR lv
                                    =>
                                    fate (lv, lambda_type);

			        _   =>
                                    {   lv = make_var();

					my (lambda_expression', lambda_type)
                                            =
                                            fate (lv, lambda_type);

				        (f::LET ([lv], f::RET [v], lambda_expression'), lambda_type);
				    };
                            esac
                      );

		fun po_helper (arg, f_lty, tycs, filler)
                    =
		    # Invariants: primitive_operation's
                    # types are always fully closed:
		    # 
		    {   # pty is the resulting highcode type of the underlying primitive_operation,
			# r_lty is the result polylambda type of this primitive_operation expression,
			# and flat indicates whether we should flatten the arguments or not.
                        # The results of primops are never flattened.
			#
			my (pty, r_lty, flat)
                            = 
			    case (lt::ltp_ppoly f_lty, tycs) 

			        (TRUE, _)
                                    => 
				    {   my (ks,  lt ) =  lt::ltd_ppoly   f_lty;
				        my (aty, rty) =  lt::ltd_parrow  lt;

				        r_lty
                                            = 
				            lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type
                                              ( lt::ltc_ppoly (ks, rty),
                                                tycs
                                              );

				        my (_, atys, flat) = fl::t_pflatten aty; 

					# You really want to have a simpler
					# flattening heuristics here; in fact,
					# primitive_operation can have its own flattening
					# strategy. The key is that primitive_operation's 
					# type never escape outside.

					atys = map fl::ltc_raw atys;
					nrty = fl::ltc_raw rty;
					pty  = lt::ltc_arrow (lt::ffc_rrhighcode, atys,[nrty]);

				        ( lt::ltc_ppoly (ks, pty),
                                          r_lty,
                                          flat
                                        );
				    };

			        (FALSE, [])		# Monomorphic case.
				    =>
				    {   my (aty,     rty ) =  lt::ltd_parrow  f_lty;
				        my (_, atys, flat) =  fl::t_pflatten  aty;

				        atys = map fl::ltc_raw atys;
				        nrty = fl::ltc_raw rty;
				        pty  = lt::ltc_arrow (lt::ffc_rrhighcode, atys,[nrty]);

				        (pty, rty, flat);
				    };

			        _ => bug "unexpected case in PO_helper";
                            esac;

		      if flat 

			  # ZHONG asks: is the following definitely safe ?
			  # what would happen if ltc_raw is not an identity function ?
			  #
			  tovalues
                            ( venv,
                              d,
                              arg,
			      fn (arg_vals, arg_lty)
                                  =
				  {   my (c_lexp, c_lty)
                                          =
                                          fate (r_lty);

				      # Put the filling inbetween:
				      #	 
				      (filler (arg_vals, pty, c_lexp), c_lty);
				  }
                            );  
		      else 
			  tovalue
                            ( venv,
                              d,
                              arg,
			      fn (arg_val, arg_lty)
                                  =
				  {   my (c_lexp, c_lty)
                                          =
                                          fate (r_lty);

				      # Put the filling inbetween:
				      #	
				      (filler([arg_val], pty, c_lexp), c_lty);
				  }
                            );
                      fi;   
		    };			# fun po_helper 

		fun default_tolexp ()
                    =
		    {   my (lambda_expression', lambda_type)
                            =
                            tolexp (venv, d) lambda_expression;

			my (c_lexp, c_lty) =  fate (lambda_type);
			my (_, punflatten) =  fl::v_punflatten lambda_type; 
			my (lvs, c_lexp' ) =  punflatten (highcode_variable, c_lexp);

		        (f::LET (lvs, lambda_expression', c_lexp'), c_lty);
		    };

	#       fun default_tovalue ()
        #           = 
	#           tovalue
        #             ( venv,
        #               d,
        #               lambda_expression, 
	#               fn (v, lambdaType)
        #                   => 
	#                   let my (lambda_expression', ltys) = fate (lambdaType) 
	#                   in (f::LET([highcode_variable], f::RET[v], lambda_expression'), ltys) 
	#                   end) 

	    
                case lambda_expression

	             # primops have to be eta-expanded since they're not valid
	             # function values anymore in Anormal

	             l::PRIMITIVE_OP (po, lambda_type, tycs)
			 =>
			 eta_expand (lambda_expression, lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lambda_type, tycs));

	             l::GENOP (dictionary, po, lambda_type, tycs)
			 =>
			 eta_expand (lambda_expression, lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type (lambda_type, tycs));

	             l::FN (arg_lv, arg_lty, body)
			 =>
			 # Translate the body with the extended 
			 # dictionary into a Function_Declaration:
			 #
			 {   my (function_declaration as (fk, f_lv, args, body'), f_lty)
				 =
				 tofundec (venv, d, highcode_variable, arg_lv, arg_lty, body, FALSE);

			     my (lambda_expression, lambda_type)
				 =
				 fate  f_lty;

			     ( f::MUTUALLY_RECURSIVE_FNS ( [function_declaration], lambda_expression),
			       lambda_type
			     );
			 };

		     # This is were we really deal with primops:
		     # 
		     l::APPLY (l::PRIMITIVE_OP ((po, f_lty, tycs)), arg)
			 =>
			 po_helper
                           ( arg,
                             f_lty,
                             tycs,
			     fn (arg_vals, pty, c_lexp)
                                 =
				 highcode_prim
                                   ( (NULL, po, pty, map fl::tcc_raw tycs),
				     arg_vals,
                                     highcode_variable,
                                     c_lexp
                                   )
                           );

		     l::APPLY (l::GENOP( { default, table }, po, f_lty, tycs), arg)
			 =>
			 {   fun f ([], table, fate)
                                     =>
                                     fate (table);

				 f ((tycs, le) ! t1, t2, fate)
                                     =>
			             tolvarvalue
                                       ( venv,
                                         d,
                                         le,
					 fn (le_lv, le_lty)
                                             =
					     f (t1, (map fl::tcc_raw tycs, le_lv) ! t2, fate)
                                       );
                             end;

			     # First, evaluate default:
			     # 
			     tolvarvalue
                               ( venv,
                                 d,
                                 default,
				 fn (default_lv, default_lty)
                                     =
				     # Then evaluate the table:
				     # 
				     f ( table,
                                         [],
					 fn table'
                                             =
					     po_helper
                                               ( arg,
                                                 f_lty,
                                                 tycs,
						 fn (arg_vals, pty, c_lexp)
                                                     =
						     highcode_prim
                                                       ( ( THE { default => default_lv, 
								 table   => table'
                                                               },
							   po,
                                                           pty, 
							   map fl::tcc_raw tycs
                                                         ),
							 arg_vals,
                                                         highcode_variable,
                                                         c_lexp
                                                       )
                                               )
                                       )
                               );
			 };


		     l::TYPE_FN (tks, body)
			 =>
			 {   my (body', body_lty)
                                 =
			         tovalue
                                   ( venv,
                                     di::next d,
                                     body, 
				     fn (le_val, le_lty)
                                         =
                                         (f::RET [le_val], le_lty)
                                   );

			     lambda_type = lt::ltc_ppoly (tks, body_lty);

			     my (lambda_expression', lambda_type)
                                 =
                                 fate (lambda_type);

			     args = map  (fn tk = (make_var(), tk))  tks;

			     ( f::TYPE_FN
                                 ( ( { inlining_hint => f::INLINE_IF_SIZE_SAFE },
                                     highcode_variable,
                                     args,
                                     body'
                                   ),
                                   lambda_expression'
                                 ),
			       lambda_type
                             );
			 };

		     l::TYPE_APPLY (f, tycs)
			 =>
			 # Similar to APPLY:
			 # 
			 tovalue
                           ( venv,
                             d,
                             f,
			     fn (f_val, f_lty)
                                 =
				 {   f_lty = lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type
                                                 (f_lty, tycs);

				     my (c_lexp, c_lty)
                                         =
                                         fate (f_lty);

				     ( f::LET( [highcode_variable],
                                               f::TYPE_APPLY (f_val,  map  fl::tcc_raw  tycs),
					       c_lexp
                                             ),
                                       c_lty
                                     );
				 }
                           );

		     l::EXCEPTION_TAG (le, lambda_type)
			 =>
			 tovalue
                           ( venv,
                             d,
                             le,
			     fn (le_lv, le_lty)
                                 =
				 {   my (c_lexp, c_lty)
                                         =
                                         fate (lt::ltc_etag lambda_type);

				     mketag = fu::mketag (fl::tcc_raw (lt::ltd_tyc lambda_type));

				     ( highcode_prim (mketag, [le_lv], highcode_variable, c_lexp),
                                       c_lty
                                     );
				 }
                           );

		     l::CONSTRUCTOR ((s, cr, lambda_type), tycs, le)
			 =>
			 tovalue
                           ( venv,
                             d,
                             le,
			     fn (v, _)
				 =
				 {   r_lty = lt::protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type
                                                 (lambda_type, tycs);

				     my (_,      v_lty) = lt::ltd_parrow r_lty;
				     my (c_lexp, c_lty) = fate (v_lty);

				     ( f::CONSTRUCTOR
                                         ( (s, cr, force_raw lambda_type),
					   map fl::tcc_raw tycs,
                                           v,
                                           highcode_variable,
                                           c_lexp
                                         ),

				       c_lty
                                     );
				 }
			    );

		     l::VECTOR (lexps, type_constructor)
			 =>
			 lexps2values
                           ( venv,
                             d,
                             lexps,
			     fn (vals, ltys)
                                 =
				 {   lambda_type
                                         =
                                         lt::ltc_tyc  (lt::tcc_vector  type_constructor);

				     my (c_lexp, c_lty)
                                         =
                                         fate (lambda_type);

				     ( f::RECORD
                                         ( f::RK_VECTOR (fl::tcc_raw type_constructor),
					   vals,
                                           highcode_variable,
                                           c_lexp
                                         ),
					 c_lty
                                     );
				 }
                           );

		     l::RECORD lexps
			 =>
			 lexps2values
                           ( venv,
                             d,
                             lexps,
			     fn (vals, ltys)
                                 =
				 {   lambda_type = lt::ltc_tuple ltys;

				     my (c_lexp, c_lty)
                                         =
                                         fate (lambda_type);

				     (f::RECORD (fu::rk_tuple, vals, highcode_variable, c_lexp), c_lty);
				 }
                           );

		     l::PACKAGE_RECORD lexps
			 =>
			 lexps2values
                           ( venv,
                             d,
                             lexps,
			     fn (vals, ltys)
                                 =
				 {   lambda_type = lt::ltc_str (ltys);

				     my (c_lexp, c_lty)
                                         =
                                         fate  lambda_type;

				     ( f::RECORD
                                         ( f::RK_STRUCT,
                                           vals,
                                           highcode_variable,
                                           c_lexp
                                         ),

                                       c_lty
                                     );
				 }
                           );

		     l::SELECT (n, lambda_expression)
			 =>
			 tovalue
                           ( venv,
                             d,
                             lambda_expression,
			     fn (v, lambda_type)
                                 =
				 {   lambda_type =  (lt::lt_select (lambda_type, n));

				     my (c_lexp, c_lty)
                                         =
                                         fate  lambda_type;

				     ( f::SELECT (v, n, highcode_variable, c_lexp),
                                       c_lty
                                     );
				 }
                           );

		     l::PACK (lambda_type, otycs, ntycs, lambda_expression)
                         =>
			 bug "PACK is not currently supported";

	     /*
			 tovalue (venv, d, lambda_expression,
				 fn (v, v_lty) =>
				 let nlty = lt::pmacroExpandPolymorephicLambdaTypeOrHOC (lambdaType, ntycs)
				     my (c_lexp, c_lty) = fate (nlty)
				 in (f::PACK (lambdaType,
					    map fl::tcc_raw otycs,
					    map fl::tcc_raw ntycs,
					    v, highcode_variable, c_lexp),
				     c_lty)
				 end)
	     */

		   #  these ones shouldn't matter because they shouldn't appear 
	     #        | l::WRAP _ => bug "unexpected WRAP in plambda" 
	     #        | l::UNWRAP _ => bug "unexpected UNWRAP in plambda" 

		    _ => default_tolexp ();
                esac;
	    };

	fun translate (lambda_expression as l::FN (arg_lv, arg_lty, e))
		=>
		#1 (tofundec (lt::init_lty_dictionary, di::top, make_var(), arg_lv, arg_lty, e, FALSE))
		except
                    x = raise exception x;

	    translate _
                =>
                bug "unexpected toplevel Polylambda_Expression";
        end;

    end;				# toplevel stipulate 
};					# package translate_polylambda_to_anormal 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1997 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
