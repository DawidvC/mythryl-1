## codetree-labexp.pkg -- expressions involving labels


# 2007-03-24 CrT: This file appears not to be compiled in at present.



###                       "For every problem there is one solution
###                        which is simple, neat -- and wrong."
###
###                                       -- H. L. Mencken



generic package label_expression (

    package t:  Codetree

    #  Hashing extensions 
    my hashSext:   t::hasher -> t::sext -> word
    my hashRext:   t::hasher -> t::rext -> word
    my hashFext:   t::hasher -> t::fext -> word
    my hashCCext:  t::hasher -> t::ccext -> word
    #  Equality extensions 
    my eqSext:   t::equality -> t::sext * t::sext -> Bool
    my eqRext:   t::equality -> t::rext * t::rext -> Bool
    my eqFext:   t::equality -> t::fext * t::fext -> Bool
    my eqCCext:  t::equality -> t::ccext * t::ccext -> Bool
    #  Assembly output 
    my labelFmt:  { gPrefix:  String, aPrefix: String }
): LABELEXP
{
    package t          = T
    package i          = t::I 
    package constant   = t::Constant
    package b          = t::Basis
    package c          = cells_basis
    package w          = Unt

    w =   w::from_int
    i2s =   int::to_string
    to_lower =   string::map char::to_lower

    fun error msg
        =
        lowcode_error_message::error("label_expression", msg)

    fun wv (c::CELL { id, ... } )
        =
        w id

    fun wvs is
	= 
	{   fun f ([], h) = h
	      | f (i . is, h) = f (is, wv i+h);

	    f (is, 0w0);
        }


    # Hashing

    hashLabel =   label::hash

    fun hasher () = { statement=hashStm, int_expression=hashRexp, float_expression=hashFexp, bool_expression=hashCCexp }
    also hashCtrl ctrl = wv ctrl
    also hashStm statement =
       case statement of  
       t::MOVE_INT (t, dst, int_expression) => 0w123 + w t + wv dst + hashRexp int_expression
     | t::MOVE_BOOL (dst, bool_expression) => 0w1234 + wv dst + hashCCexp bool_expression
     | t::MOVE_FLOAT (fty, dst, float_expression) => 0w12345 + w fty + wv dst + hashFexp float_expression
     | t::COPY_INTS (type, dst, src) => 0w234 + w type + wvs dst + wvs src
     | t::COPY_FLOATS (fty, dst, src) => 0w456 + w fty + wvs dst + wvs src
     | t::JUMP (ea, labels) => 0w45 + hashRexp ea
     | t::CALL { funct, targets, defs, uses, region, pops } =>
	   hashRexp funct + hashLowcodes defs + hashLowcodes uses 
     | t::RET _ => 0w567
     | t::STORE (type, ea, data, mem) => 0w888 + w type + hashRexp ea + hashRexp data 
     | t::FSTORE (fty, ea, data, mem) => 0w7890 + w fty + hashRexp ea + hashFexp data
     | t::BCC (a, lab) => 0w233 + hashCCexp a + hashLabel lab
     | t::IF (a, b, c) => 0w233 + hashCCexp a + hashStm b + hashStm c
     | t::NOTE (statement, a) => hashStm statement 
     | t::PHI { preds, block } => w block 
     | t::SOURCE => 0w123 
     | t::SINK => 0w423 
     | t::REGION (statement, ctrl) => hashStm statement + hashCtrl ctrl
     | t::RTL { hash, ... } => hash
     | t::SEQ ss => hashStms (ss, 0w23)
     | t::ASSIGN (type, lhs, rhs) => w type + hashRexp lhs + hashRexp rhs
     | _ => error "hashStm" 

    also hashStms([], h) = h
      | hashStms (s . ss, h) = hashStms (ss, hashStm s + h)

    also hashLowcode (t::BOOL_EXPRESSION bool_expression) = hashCCexp bool_expression
      | hashLowcode (t::INT_EXPRESSION int_expression) = hashRexp int_expression 
      | hashLowcode (t::FLOAT_EXPRESSION float_expression) = hashFexp float_expression

    also hashLowcodes [] = 0w123
      | hashLowcodes (m . ms) = hashLowcode m + hashLowcodes ms

    also hash2 (type, x, y) = w type + hashRexp x + hashRexp y

    also hashRexp int_expression =  
       case int_expression of
       t::REG (type, src) => w type + wv src
     | t::LITERAL i => i::hash i
     | t::LABEL l => hashLabel l
     | t::LABEXP le => hashRexp int_expression
     | t::CONST c => Constant::hash c
     | t::NEG (type, x) => w type + hashRexp x + 0w24
     | t::ADD x => hash2 x + 0w234
     | t::SUB x => hash2 x + 0w456
     | t::MULS x => hash2 x + 0w2131
     | t::DIVS x => hash2 x + 0w156
     | t::QUOTS x => hash2 x + 0w1565
     | t::REMS x => hash2 x + 0w231
     | t::MULU x => hash2 x + 0w123
     | t::DIVU x => hash2 x + 0w1234
     | t::REMU x => hash2 x + 0w211
     | t::NEGT (type, x) => w type + hashRexp x + 0w1224
     | t::ADDT x => hash2 x + 0w1219
     | t::SUBT x => hash2 x + 0w999
     | t::MULT x => hash2 x + 0w7887
     | t::DIVT x => hash2 x + 0w88884
     | t::QUOTT x => hash2 x + 0w8884
     | t::REMT x => hash2 x + 0w99
     | t::BITWISEAND x => hash2 x + 0w12312
     | t::BITWISEOR x => hash2 x + 0w558
     | t::BITWISEXOR x => hash2 x + 0w234
     | t::BITWISEEQV x => hash2 x + 0w734
     | t::BITWISENOT (type, x) => w type + hashRexp x  
     | t::RIGHTSHIFT x => hash2 x + 0w874 
     | t::RIGHTSHIFTU x => hash2 x + 0w223
     | t::LEFTSHIFT x => hash2 x + 0w499
     | t::COND (type, e, e1, e2) => w type + hashCCexp e + hashRexp e1 + hashRexp e2
     | t::SIGNEXTEND (type, type', int_expression) => 0w232 + w type + w type' + hashRexp int_expression
     | t::ZEROEXTEND (type, type', int_expression) => 0w737 + w type + w type' + hashRexp int_expression
     | t::CONVERTFLOATTOINT (type, round, type', float_expression) => 
	 w type + b::hashRoundingMode round + w type' + hashFexp float_expression
     | t::LOAD (type, ea, mem) => w type + hashRexp ea + 0w342
     | t::LET (statement, int_expression) => hashStm statement + hashRexp int_expression
     | t::PRED (e, ctrl) => hashRexp e + hashCtrl ctrl
     | t::MARK (e, _) => hashRexp e
     | t::REXT (type, rext) => w type + hashRext (hasher()) rext
     | T.??? => 0w485
     | t::OP (type, oper, es) => hashRexps (es, w type + hashOper oper)
     | t::ARG _ => 0w23
     | T.@@@(type, k, e) => w type + hashRexp e
     | t::PARAM n => w n
     | t::BITSLICE (type, sl, e) => w type + hashRexp e

   also hashOper (t::OPER { hash, ... } ) = hash

   also hashRexps([], h) = h 
     | hashRexps (e . es, h) = hashRexps (es, hashRexp e + h)

   also hash2'(type, x, y) = w type + hashFexp x + hashFexp y

   also hashFexp float_expression =  
       case float_expression of
       t::FREG (fty, src) => w fty + wv src
     | t::FLOAD (fty, ea, mem) => w fty + hashRexp ea
     | t::FADD x => hash2' x + 0w123
     | t::FMUL x => hash2' x + 0w1234
     | t::FSUB x => hash2' x + 0w12345
     | t::FDIV x => hash2' x + 0w234
     | t::COPY_FLOAT_SIGN x => hash2' x + 0w883
     | t::FCOND (fty, c, x, y) => w fty + hashCCexp c + hashFexp x + hashFexp y
     | t::FABS (fty, float_expression) => w fty + hashFexp float_expression + 0w2345
     | t::FNEG (fty, float_expression) => w fty + hashFexp float_expression + 0w23456
     | t::FSQRT (fty, float_expression) => w fty + hashFexp float_expression + 0w345
     | t::CVTI2F (fty, type, int_expression) => w fty + w type + hashRexp int_expression
     | t::CVTF2F (fty, fty', float_expression) => w fty + hashFexp float_expression + w fty' 
     | t::FMARK (e, _) => hashFexp e
     | t::FPRED (e, ctrl) => hashFexp e + hashCtrl ctrl
     | t::FEXT (fty, fext) => w fty + hashFext (hasher()) fext

   also hashFexps([], h) = h
     | hashFexps (e . es, h) = hashFexps (es, hashFexp e + h)

   also hashCCexp bool_expression =
       case bool_expression of
       t::CC (cc, src) => b::hashCond cc + wv src
     | t::FCC (fcc, src) => b::hashFcond fcc + wv src
     | t::CMP (type, cond, x, y) => 
	 w type + b::hashCond cond + hashRexp x + hashRexp y
     | t::FCMP (fty, fcond, x, y) => 
	 w fty + b::hashFcond fcond + hashFexp x + hashFexp y
     | t::NOT x => 0w2321 + hashCCexp x 
     | t::AND (x, y) => 0w2321 + hashCCexp x + hashCCexp y
     | t::OR (x, y) => 0w8721 + hashCCexp x + hashCCexp y
     | t::XOR (x, y) => 0w6178 + hashCCexp x + hashCCexp y
     | t::EQV (x, y) => 0w178 + hashCCexp x + hashCCexp y
     | t::TRUE => 0w0
     | t::FALSE => 0w1232
     | t::CCMARK (e, _) => hashCCexp e
     | t::CCEXT (type, ccext) => w type + hashCCext (hasher()) ccext

   also hashCCexps([], h) = h
     | hashCCexps (e . es, h) = hashCCexps (es, hashCCexp e + h)

   eqLabel = label::same
   fun eqLabels([],[]) = TRUE
     | eqLabels (a . b, c . d) = eqLabel (a, c) and eqLabels (b, d)
     | eqLabels _ = FALSE
   also eqCell (c::CELL { id=x, ... }, c::CELL { id=y, ... } ) = x=y
   also eqCells([], []) = TRUE
     | eqCells (x . xs, y . ys) = eqCell (x, y) and eqCells (xs, ys)
     | eqCells _ = FALSE
   also eqCopy((t1, dst1, src1), (t2, dst2, src2)) =
	t1=t2 and eqCells (dst1, dst2) and eqCells (src1, src2)
   also eqCtrl (c1, c2) = eqCell (c1, c2)
   also eqCtrls (c1, c2) = eqCells (c1, c2)

   #  statements 
   also equality() = { statement=eqStm, int_expression=eqRexp, float_expression=eqFexp, bool_expression=eqCCexp }
   also eqStm (t::MOVE_INT (a, b, c), t::MOVE_INT (d, e, f)) =
	   a=d and eqCell (b, e) and eqRexp (c, f)
     | eqStm (t::MOVE_BOOL (a, b), t::MOVE_BOOL (c, d)) = eqCell (a, c) and eqCCexp (b, d)
     | eqStm (t::MOVE_FLOAT (a, b, c), t::MOVE_FLOAT (d, e, f)) = 
	   a=d and eqCell (b, e) and eqFexp (c, f)
     | eqStm (t::COPY_INTS x, t::COPY_INTS y) = eqCopy (x, y)
     | eqStm (t::COPY_FLOATS x, t::COPY_FLOATS y) = eqCopy (x, y)
     | eqStm (t::JUMP (a, b), t::JUMP (a', b')) = eqRexp (a, a')
     | eqStm (t::CALL { funct=a, defs=b, uses=c, ... },
	     t::CALL { funct=d, defs=e, uses=f, ... } ) =  
	  eqRexp (a, d) and eqLowcodes (b, e) and eqLowcodes (c, f)
     | eqStm (t::RET _, t::RET _) = TRUE
     | eqStm (t::STORE (a, b, c, _), t::STORE (d, e, f, _)) = 
	  a=d and eqRexp (b, e) and eqRexp (c, f)
     | eqStm (t::FSTORE (a, b, c, _), t::FSTORE (d, e, f, _)) =
	  a=d and eqRexp (b, e) and eqFexp (c, f)
     | eqStm (t::NOTE (s1, _), s2) = eqStm (s1, s2)
     | eqStm (s1, t::NOTE (s2, _)) = eqStm (s1, s2)
     | eqStm (t::PHI x, t::PHI y) = x=y
     | eqStm (t::SOURCE, t::SOURCE) = TRUE
     | eqStm (t::SINK, t::SINK) = TRUE
     | eqStm (t::BCC (b, c), t::BCC (b', c')) = 
	 eqCCexp (b, b') and eqLabel (c, c')
     | eqStm (t::IF (b, c, d), t::IF (b', c', d')) = 
	 eqCCexp (b, b') and eqStm (c, c') and eqStm (d, d')
     | eqStm (t::RTL { attributes=x, ... }, t::RTL { attributes=y, ... } ) = x=y
     | eqStm (t::REGION (a, b), t::REGION (a', b')) = eqCtrl (b, b') and eqStm (a, a')
     | eqStm (t::EXT a, t::EXT a') = eqSext (equality()) (a, a')
     | eqStm _ = FALSE

   also eqStms([],[]) = TRUE
     | eqStms (a . b, c . d) = eqStm (a, c) and eqStms (b, d)
     | eqStms _ = FALSE

   also eqLowcode (t::BOOL_EXPRESSION a, t::BOOL_EXPRESSION b) = eqCCexp (a, b)
     | eqLowcode (t::INT_EXPRESSION a, t::INT_EXPRESSION b) = eqRexp (a, b)
     | eqLowcode (t::FLOAT_EXPRESSION a, t::FLOAT_EXPRESSION b) = eqFexp (a, b)
     | eqLowcode _ = FALSE

   also eqLowcodes([],[]) = TRUE
     | eqLowcodes (a . b, c . d) = eqLowcode (a, c) and eqLowcodes (b, d)
     | eqLowcodes _ = FALSE

   also eq2((a, b, c), (d, e, f)) = a=d and eqRexp (b, e) and eqRexp (c, f)

   also eqRexp (t::REG (a, b), t::REG (c, d)) = a=c and eqCell (b, d)
     | eqRexp (t::LITERAL a, t::LITERAL b) = a=b 
     | eqRexp (t::LABEL a, t::LABEL b) = eqLabel (a, b)
     | eqRexp (t::LABEXP a, t::LABEXP b) = eqRexp (a, b)
     | eqRexp (t::CONST a, t::CONST b) = Constant::(====) (a, b)
     | eqRexp (t::NEG (t, x), t::NEG (t', x')) = t = t' and eqRexp (x, x')
     | eqRexp (t::ADD x, t::ADD y) = eq2 (x, y)
     | eqRexp (t::SUB x, t::SUB y) = eq2 (x, y)
     | eqRexp (t::MULS x, t::MULS y) = eq2 (x, y)
     | eqRexp (t::DIVS x, t::DIVS y) = eq2 (x, y)
     | eqRexp (t::QUOTS x, t::QUOTS y) = eq2 (x, y)
     | eqRexp (t::REMS x, t::REMS y) = eq2 (x, y)
     | eqRexp (t::MULU x, t::MULU y) = eq2 (x, y)
     | eqRexp (t::DIVU x, t::DIVU y) = eq2 (x, y)
     | eqRexp (t::REMU x, t::REMU y) = eq2 (x, y)
     | eqRexp (t::NEGT (t, x), t::NEGT (t', x')) = t = t' and eqRexp (x, x')
     | eqRexp (t::ADDT x, t::ADDT y) = eq2 (x, y)
     | eqRexp (t::SUBT x, t::SUBT y) = eq2 (x, y)
     | eqRexp (t::MULT x, t::MULT y) = eq2 (x, y)
     | eqRexp (t::DIVT x, t::DIVT y) = eq2 (x, y)
     | eqRexp (t::QUOTT x, t::QUOTT y) = eq2 (x, y)
     | eqRexp (t::REMT x, t::REMT y) = eq2 (x, y)
     | eqRexp (t::BITWISEAND x, t::BITWISEAND y) = eq2 (x, y)
     | eqRexp (t::BITWISEOR x, t::BITWISEOR y) = eq2 (x, y)
     | eqRexp (t::BITWISEXOR x, t::BITWISEXOR y) = eq2 (x, y)
     | eqRexp (t::BITWISEEQV x, t::BITWISEEQV y) = eq2 (x, y)
     | eqRexp (t::BITWISENOT (a, b), t::BITWISENOT (c, d)) = a=c and eqRexp (b, d)
     | eqRexp (t::RIGHTSHIFT x, t::RIGHTSHIFT y) = eq2 (x, y)
     | eqRexp (t::RIGHTSHIFTU x, t::RIGHTSHIFTU y) = eq2 (x, y)
     | eqRexp (t::LEFTSHIFT x, t::LEFTSHIFT y) = eq2 (x, y)
     | eqRexp (t::COND (a, b, c, d), t::COND (e, f, g, h)) = 
	  a=e and eqCCexp (b, f) and eqRexp (c, g) and eqRexp (d, h)
     | eqRexp (t::SIGNEXTEND (a, b, c), t::SIGNEXTEND (a', b', c')) = 
	  a=a' and b=b' and eqRexp (c, c')
     | eqRexp (t::ZEROEXTEND (a, b, c), t::ZEROEXTEND (a', b', c')) = 
	  a=a' and b=b' and eqRexp (c, c')
     | eqRexp (t::CONVERTFLOATTOINT (a, b, c, d), t::CONVERTFLOATTOINT (e, f, g, h)) = 
	  a=e and b=f and c=g and eqFexp (d, h)
     | eqRexp (t::LOAD (a, b, _), t::LOAD (c, d, _)) = a=c and eqRexp (b, d)
     | eqRexp (t::LET (a, b), t::LET (c, d)) = eqStm (a, c) and eqRexp (b, d)
     | eqRexp (t::ARG x, t::ARG y) = x = y
     | eqRexp (t::PARAM x, t::PARAM y) = x = y
     | eqRexp (T.???, T.???) = TRUE
     | eqRexp (T.@@@(t1, k1, e1), T.@@@(t2, k2, e2)) = 
	 t1=t2 and k1=k2 and eqRexp (e1, e2)
     | eqRexp (t::BITSLICE (t1, s1, e1), t::BITSLICE (t2, s2, e2)) =
	 t1=t2 and s1=s2 and eqRexp (e1, e2)
     | eqRexp (t::MARK (a, _), b) = eqRexp (a, b)
     | eqRexp (a, t::MARK (b, _)) = eqRexp (a, b)
     | eqRexp (t::PRED (a, b), t::PRED (a', b')) = eqCtrl (b, b') and eqRexp (a, a')
     | eqRexp (t::REXT (a, b), t::REXT (a', b')) =   
	   a=a' and eqRext (equality()) (b, b') 
     | eqRexp _ = FALSE

   also eqRexps([],[]) = TRUE
     | eqRexps (a . b, c . d) = eqRexp (a, c) and eqRexps (b, d)
     | eqRexps _ = FALSE

   also eq2'((a, b, c), (d, e, f)) = a=d and eqFexp (b, e) and eqFexp (c, f)
   also eq1'((a, b), (d, e)) = a=d and eqFexp (b, e) 

   also eqFexp (t::FREG (t1, x), t::FREG (t2, y)) = t1=t2 and eqCell (x, y)
     | eqFexp (t::FLOAD (a, b, _), t::FLOAD (c, d, _)) = a=c and eqRexp (b, d)
     | eqFexp (t::FADD x, t::FADD y) = eq2'(x, y) 
     | eqFexp (t::FMUL x, t::FMUL y) = eq2'(x, y)
     | eqFexp (t::FSUB x, t::FSUB y) = eq2'(x, y) 
     | eqFexp (t::FDIV x, t::FDIV y) = eq2'(x, y)
     | eqFexp (t::COPY_FLOAT_SIGN x, t::COPY_FLOAT_SIGN y) = eq2'(x, y)
     | eqFexp (t::FCOND (t, x, y, z), t::FCOND (t', x', y', z')) = 
	 t=t' and eqCCexp (x, x') and eqFexp (y, y') and eqFexp (z, z')
     | eqFexp (t::FABS x, t::FABS y) = eq1'(x, y)
     | eqFexp (t::FNEG x, t::FNEG y) = eq1'(x, y)
     | eqFexp (t::FSQRT x, t::FSQRT y) = eq1'(x, y)
     | eqFexp (t::CVTI2F (a, b, c), t::CVTI2F (a', b', c')) = 
	  a=a' and b=b' and eqRexp (c, c')
     | eqFexp (t::CVTF2F (a, b, c), t::CVTF2F (a', b', c')) = 
	  a=a' and b=b' and eqFexp (c, c')
     | eqFexp (t::FEXT (a, f), t::FEXT (b, g)) = a=b and eqFext (equality()) (f, g) 
     | eqFexp (t::FMARK (a, _), b) = eqFexp (a, b)
     | eqFexp (a, t::FMARK (b, _)) = eqFexp (a, b)
     | eqFexp (t::FPRED (a, b), t::FPRED (a', b')) = eqCtrl (b, b') and eqFexp (a, a')
     | eqFexp _ = FALSE

   also eqFexps([],[]) = TRUE
     | eqFexps (a . b, c . d) = eqFexp (a, c) and eqFexps (b, d)
     | eqFexps _ = FALSE

   also eqCCexp (t::CC (c1, x), t::CC (c2, y)) = c1=c2 and eqCell (x, y)
     | eqCCexp (t::FCC (c1, x), t::FCC (c2, y)) = c1=c2 and eqCell (x, y)
     | eqCCexp (t::CMP (x, a, b, c), t::CMP (y, d, e, f)) = 
	 a=d and eqRexp (b, e) and eqRexp (c, f) and x = y
     | eqCCexp (t::FCMP (x, a, b, c), t::FCMP (y, d, e, f)) =
	 a=d and eqFexp (b, e) and eqFexp (c, f) and x = y
     | eqCCexp (t::NOT x, t::NOT y) = eqCCexp (x, y)
     | eqCCexp (t::AND x, t::AND y) = eqCCexp2 (x, y)
     | eqCCexp (t::OR x,  t::OR y) = eqCCexp2 (x, y)
     | eqCCexp (t::XOR x, t::XOR y) = eqCCexp2 (x, y)
     | eqCCexp (t::EQV x, t::EQV y) = eqCCexp2 (x, y)
     | eqCCexp (t::CCMARK (a, _), b) = eqCCexp (a, b)
     | eqCCexp (a, t::CCMARK (b, _)) = eqCCexp (a, b)
     | eqCCexp (t::CCEXT (t, a), t::CCEXT (t', b)) = 
	 t=t' and eqCCext (equality()) (a, b)
     | eqCCexp (t::TRUE, t::TRUE) = TRUE
     | eqCCexp (t::FALSE, t::FALSE) = TRUE
     | eqCCexp _ = FALSE

   also eqCCexp2((x, y), (x', y')) = eqCCexp (x, x') and eqCCexp (y, y')

   also eqCCexps([],[]) = TRUE
     | eqCCexps (a . b, c . d) = eqCCexp (a, c) and eqCCexps (b, d)
     | eqCCexps _ = FALSE

    exception NON_CONSTANT

    fun evaluate { label, const }
	=
	{   fun int_expression (t::LITERAL i) = i
	      | int_expression (t::CONST c) = const c
	      | int_expression (t::LABEL l) = integer::from_int (label l)
	      | int_expression (t::LABEXP e) = int_expression e

	      | int_expression (t::NEG (size, x)) = i::NEG (size, int_expression x)
	      | int_expression (t::ADD (size, x, y)) = i::ADD (size, int_expression x, int_expression y)
	      | int_expression (t::SUB (size, x, y)) = i::SUB (size, int_expression x, int_expression y)

	      | int_expression (t::MULS (size, x, y)) = i::MULS (size, int_expression x, int_expression y)
	      | int_expression (t::DIVS (size, x, y)) = i::DIVS (size, int_expression x, int_expression y)
	      | int_expression (t::QUOTS (size, x, y)) = i::QUOTS (size, int_expression x, int_expression y)
	      | int_expression (t::REMS (size, x, y)) = i::REMS (size, int_expression x, int_expression y)

	      | int_expression (t::MULU (size, x, y)) = i::MULU (size, int_expression x, int_expression y)
	      | int_expression (t::DIVU (size, x, y)) = i::DIVU (size, int_expression x, int_expression y)
	      | int_expression (t::REMU (size, x, y)) = i::REMU (size, int_expression x, int_expression y)

	      | int_expression (t::NEGT (size, x)) = i::NEGT (size, int_expression x)
	      | int_expression (t::ADDT (size, x, y)) = i::ADDT (size, int_expression x, int_expression y)
	      | int_expression (t::SUBT (size, x, y)) = i::SUBT (size, int_expression x, int_expression y)
	      | int_expression (t::MULT (size, x, y)) = i::MULT (size, int_expression x, int_expression y)
	      | int_expression (t::DIVT (size, x, y)) = i::DIVT (size, int_expression x, int_expression y)
	      | int_expression (t::QUOTT (size, x, y)) = i::QUOTT (size, int_expression x, int_expression y)
	      | int_expression (t::REMT (size, x, y)) = i::REMT (size, int_expression x, int_expression y)

	      | int_expression (t::BITWISENOT (size, x)) = i::BITWISENOT (size, int_expression x)
	      | int_expression (t::BITWISEAND (size, x, y)) = i::BITWISEAND (size, int_expression x, int_expression y)
	      | int_expression (t::BITWISEOR (size, x, y)) = i::BITWISEOR (size, int_expression x, int_expression y)
	      | int_expression (t::BITWISEXOR (size, x, y)) = i::BITWISEXOR (size, int_expression x, int_expression y)
	      | int_expression (t::BITWISEEQV (size, x, y)) = i::BITWISEEQV (size, int_expression x, int_expression y)
	      | int_expression (t::LEFTSHIFT (size, x, y)) = i::LEFTSHIFT (size, int_expression x, int_expression y)
	      | int_expression (t::RIGHTSHIFTU (size, x, y)) = i::RIGHTSHIFTU (size, int_expression x, int_expression y)
	      | int_expression (t::RIGHTSHIFT (size, x, y)) = i::RIGHTSHIFT (size, int_expression x, int_expression y)
	      | int_expression (t::BITSLICE (size, x, y)) = i::BITSLICE (size, x, int_expression y)

	      | int_expression (t::COND (size, cc, x, y)) = if bool_expression cc then int_expression x else int_expression y
	      | int_expression (t::SIGNEXTEND (a, b, x)) = i::SIGNEXTEND (a, b, int_expression x)
	      | int_expression (t::ZEROEXTEND (a, b, x)) = i::ZEROEXTEND (a, b, int_expression x)
	      | int_expression (t::MARK (e, _)) = int_expression e

	      | int_expression _ = raise exception NON_CONSTANT

	   also bool_expression (t::TRUE) = TRUE
	      | bool_expression (t::FALSE) = FALSE
	      | bool_expression (t::CMP (size, t::EQ, x, y)) = i::EQ (size, int_expression x, int_expression y)
	      | bool_expression (t::CMP (size, t::NE, x, y)) = i::NE (size, int_expression x, int_expression y)
	      | bool_expression (t::CMP (size, t::GT, x, y)) = i::GT (size, int_expression x, int_expression y)
	      | bool_expression (t::CMP (size, t::GE, x, y)) = i::GE (size, int_expression x, int_expression y)
	      | bool_expression (t::CMP (size, t::LT, x, y)) = i::LT (size, int_expression x, int_expression y)
	      | bool_expression (t::CMP (size, t::LE, x, y)) = i::LE (size, int_expression x, int_expression y)
	      | bool_expression (t::CMP (size, t::GTU, x, y)) = i::GTU (size, int_expression x, int_expression y)
	      | bool_expression (t::CMP (size, t::LTU, x, y)) = i::LTU (size, int_expression x, int_expression y)
	      | bool_expression (t::CMP (size, t::GEU, x, y)) = i::GEU (size, int_expression x, int_expression y)
	      | bool_expression (t::CMP (size, t::LEU, x, y)) = i::LEU (size, int_expression x, int_expression y)
	      | bool_expression (t::NOT x) = not (bool_expression x)
	      | bool_expression (t::AND (x, y)) = bool_expression x and bool_expression y
	      | bool_expression (t::OR (x, y)) = bool_expression x or bool_expression y
	      | bool_expression (t::XOR (x, y)) = bool_expression x <> bool_expression y
	      | bool_expression (t::EQV (x, y)) = bool_expression x = bool_expression y
	      | bool_expression (t::CCMARK (e, _)) = bool_expression e
	      | bool_expression _ = raise exception NON_CONSTANT;

	   { int_expression, bool_expression };
	}

    fun valueOf e
        = 
	  integer::toInt
	     (.int_expression (evaluate { const=fn c => integer::from_int (Constant::valueOf c),
			 label=label::addrOf } ) e)
    my ==== = eqRexp
    hash = hashRexp

    resolveConstants = LowCodeControl::getFlag "asm-resolve-constants"
    my _ = resolveConstants := TRUE

   /* This module should be parameterised, in order to generate
    * target label expressions for assembly code purposes.
    */
 /* operator precedences:
    (Note: these differ from C's precedences)
		 2 MULT, DIV, LSHIFT, RSHIFT
		 1 AND, OR
		 0 PLUS, MINUS
 */

   fun parens (str, prec, op_prec)
       = 
       if prec > op_prec then "(" + str + ")" else str

   fun prInt i = if i < 0 then "-" + int::to_string(-i) else int::to_string i
   fun prIntInf i = if integer::sign i < 0 then "-" + integer::to_string (integer::(-_) i) 
		    else integer::to_string i

   fun to_string le = tostring (le, 0) 

   also tostring (t::LABEL lab, _) = label::format_for_asm labelFmt lab 
     | tostring (t::LABEXP le, p) = tostring (le, p)
     | tostring (t::NEG(_, t::CONST c), _) =
	 if *resolveConstants then prInt(-(Constant::valueOf c))
	 else "(-"  +  Constant::to_string c  +  ")"
     | tostring (t::NEG(_, t::LITERAL i), _) = prIntInf(-i)
     | tostring (t::NEG(_, lambda_expression), prec) = parens (tostring (lambda_expression, 3), prec, 3)
     | tostring (t::CONST c, _) = 
	 if *resolveConstants then prInt (Constant::valueOf c)
	 else Constant::to_string c
     | tostring (t::LITERAL i, _) = prIntInf i
     | tostring (t::MULS(_, lambda_expression1, lambda_expression2), prec) =
	 parens (tostring (lambda_expression1, 2) + "*" + tostring (lambda_expression2, 2), prec, 2)
     | tostring (t::DIVS(_, lambda_expression1, lambda_expression2), prec) =
	 parens (tostring (lambda_expression1, 2) + "/" + tostring (lambda_expression2, 2), prec, 2)
     | tostring (t::LEFTSHIFT(_, lambda_expression, count), prec) =
	 parens (tostring (lambda_expression, 2) + "<<" + tostring (count, 2), prec, 2)
     | tostring (t::RIGHTSHIFTU(_, lambda_expression, count), prec) =
	 parens (tostring (lambda_expression, 2) + ">>" + tostring (count, 2), prec, 2)
     | tostring (t::BITWISEAND(_, lambda_expression, mask), prec) = 
	 parens (tostring (lambda_expression, 1) + "&" + tostring (mask, 1), prec, 1)
     | tostring (t::BITWISEOR(_, lambda_expression, mask), prec) = 
	 parens (tostring (lambda_expression, 1) + "|" + tostring (mask, 1), prec, 1)
     | tostring (t::ADD(_, lambda_expression1, lambda_expression2), prec) = 
	 parens (tostring (lambda_expression1, 0) + "+" + tostring (lambda_expression2, 0), prec, 0)
     | tostring (t::SUB(_, lambda_expression1, lambda_expression2), prec) = 
	 parens (tostring (lambda_expression1, 0) + "-" + tostring (lambda_expression2, 0), prec, 0)
     | tostring _ = error "tostring"

}


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
