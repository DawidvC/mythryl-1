
# This api describes the interface to a gc type system. 
# This encapsulates everything dealing with GC safety analysis
# into one single api.

generic package GCTypeSystem
  (package gc:     Garbage_Collector_Type
   package rtl:    Codetree_Rtl
   my isRecoverable:  gc::gctype -> Bool
  ) : GC_TYPE_SYSTEM {

   package gc    = GC
   package rtl   = RTL
   package t     = RTL::T

   fun error msg = lowcode_error_message::error("GCTypeSystem", msg)

   fun typeOf lookup
       = 
       let fun typeof (t::REG (t, r))      = lookup r
	     | typeof (t::LITERAL i)          = gc::CONST i
	     | typeof (t::CONST c)       = gc::INT
	     | typeof (t::LABEL l)       = gc::INT
	     | typeof (t::NEG (t, a))      = unaryArith (t, a)
	     | typeof (t::ADD (t, a, b))    = gc::ADD (t, typeof a, typeof b)
	     | typeof (t::SUB (t, a, b))    = gc::SUB (t, typeof a, typeof b)
	     | typeof (t::MULS (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::DIVS (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::QUOTS (t, a, b))  = binaryArith (t, a, b)
	     | typeof (t::REMS (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::MULU (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::DIVU (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::REMU (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::NEGT (t, a))     = unaryArith (t, a)
	     | typeof (t::ADDT (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::SUBT (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::MULT (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::DIVT (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::REMT (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::QUOTT (t, a, b))  = binaryArith (t, a, b)
	     | typeof (t::BITWISEAND (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::BITWISEOR (t, a, b))    = binaryArith (t, a, b)
	     | typeof (t::BITWISEXOR (t, a, b))   = binaryArith (t, a, b)
	     | typeof (t::LEFTSHIFT (t, a, b))    = binaryArith (t, a, b)
	     | typeof (t::RIGHTSHIFT (t, a, b))    = binaryArith (t, a, b)
	     | typeof (t::RIGHTSHIFTU (t, a, b))    = binaryArith (t, a, b)
	     | typeof (t::BITWISENOT (t, a))     = unaryArith (t, a)
	     | typeof (t::LOAD (t, ea, _))  = gc::TOP
	     | typeof (t::COND (t, a, b, c)) = gc::TOP 
	     | typeof (t::SIGNEXTEND _)          = gc::TOP 
	     | typeof (t::ZEROEXTEND _)          = gc::TOP 
	     | typeof (t::PRED (e, _))    = typeof e
	     /*| typeof (t::REXT (t, RTL::OP (misc_op, es))) = gc::INT
	     | typeof (t::REXT (t, RTL::FETCH (RTL::AGG(_, _, RTL::CELL (k, type, e, _))))) = gc::TOP*/
	     | typeof (e) = error("typeOf: " + RTL::expToString e)

	   and binaryArith (t, a, b) = 
	       let ta = typeof (a)
		   tb = typeof (b)
	       in  gc::join (ta, tb) end

	   and unaryArith (t, a) = typeof (a)
       in  typeof 
       end

   /*
    * Compute the effect    
    */
   fun effectOf { lookup, update } { action, dst, src, effect }
       =
       let fun err () = error("effectOf: " + RTL::rtlToString action)

	   #  Note the parallel copy semantics! 
	   fun copy (dst, src, e) =
	   let fun upd ([], [], e) = e
		 | upd (d . dst, t . tys, e) = upd (dst, tys, update (d, t, e))
		 | upd _ = error "copy"
	   in  upd (dst, map lookup src, e) end

	   fun effectof (t::COPY_INTS _, e)         = copy (dst, src, e)
	     | effectof (t::RTL { e=s, ... }, e)   = effectof (s, e)
	     | effectof (t::REGION (s, _), e)    = effectof (s, e)
	     | effectof (t::SEQ [], e)         = e
	     | effectof (t::JUMP _, e)         = e
	     | effectof (t::CALL _, e)         = e
	     | effectof (t::RET _, e)          = e
	     | effectof (t::MOVE_INT (t, x, expression), e)   = update (x, typeOf lookup expression, e)
	     | effectof (t::IF (x, y, z), e)     = e
	     | effectof (t::STORE _, e)       = e
	     /*| effectof (t::EXT (RTL::ASSIGN (loc, expression)), e) = 
		let t = typeOf lookup expression
		in  case loc of
		      RTL::AGG(_, _, RTL::CELL("FP", _, t::REG(_, x), _)) => 
			  update (x, gc::REAL64, e)
		    | RTL::AGG(_, _, RTL::CELL(_, _, t::REG(_, x), _)) => 
			  update (x, gc::TOP, e)
		    | RTL::AGG(_, _, _) => e
		end
	     | effectof (t::EXT (RTL::PAR (a, b)), e) = effectof (b, effectof (a, e))*/
	     | effectof (rtl, e) = err()
       in  effectof (action, effect) end

   isRecoverable = isRecoverable
}
