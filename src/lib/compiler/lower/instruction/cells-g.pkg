## cells-g.pkg
#
# Description of cell and other updatable cells.
# 
# -- Allen Leung.

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# This generic is applied to create the cells package for an  architecture



###             "When I was a boy of fourteen, my father was so ignorant
###              I could hardly stand to have the old man around. But when
###              I got to be twenty-one, I was astonished at how much he
###              had learned in seven years."
###
###                                           -- Mark Twain


# We get invoked from:
#
#     src/lib/compiler/lower/ppc/instruction/ppc-cells.pkg
#     src/lib/compiler/lower/sun/instruction/sparc-cells.pkg
#     src/lib/compiler/lower/x86/instruction/x86-cells.pkg

generic package cells_g (
    exception CELLS;
    first_pseudo:     Int;
    cell_kind_descs:  List( (cells_basis::Cellkind, cells_basis::Cellkind_Desc) );
)

: (weak) Cells		# Cells	is from   src/lib/compiler/lower/instruction/cells.api

{
    include cells_basis; 

    exception CELLS = CELLS;

    i2s = int::to_string;

    fun error msg
	=
        lowcode_error_message::error (exception_name CELLS, msg);

    cellkinds	 = map   (fn (kind, _) = kind)   cell_kind_descs;
    first_pseudo = first_pseudo;

    max_dedicated_cells = 256;
    first_name          = first_pseudo + max_dedicated_cells;
    name		= REF first_name;

 #    cellCounter = name ;

    my _ = apply
               (fn (_, desc as DESC { physical_regs, high, low, ... } )
		      =
		      {   n = high - low + 1;

			  if   (n > 0)
                              
			       a = rw_vector::tabulate (
                                     n,
                                     fn nth
                                         =
					 {   reg = nth + low;

					     CELL { id=>reg,
                                                    ref_color=>REF (MACHINE reg), 
					            ref_notes=>REF [],
                                                    desc
                                                  }; 
					 }
                                   );

				physical_regs := a;
			  fi;
		      }
              )
              cell_kind_descs;

    fun next_name ()
        =
        {   id = *name;
            name := *name + 1;
            id;
        };

    fun desc (k: Cellkind)
	=
	loop cell_kind_descs
        where
	    fun loop []
                    =>
                    error("missing info for " + cellkind_to_string k);

	        loop((kind, info) ! defs)
                    =>
		    if (kind == k ) info; else loop defs;fi;
            end;
        end;

    cellkind_desc = desc;

    fun cell_range k
	= 
	{   my DESC { low, high, ... }
	       =
	       desc k;

	    { low, high };
	};

    fun reg k
	=
	{   my desc as DESC { low, kind, physical_regs, ... }
		=
		desc k;

	    fn nth =  rw_vector::get(*physical_regs, nth)
	              except
		          _ = raise exception CELLS;
	};

    fun regs k
	=
	loop
        where
	    reg =   reg k;

	    fun loop { from, to, step }
		=
		if   (from > to)
                    
                     [];
		else
                     reg from ! loop { from=>from+step, to, step };
                fi;
	end;

    fun cell k
	=
	{   my desc as DESC { low, kind, physical_regs, ... }
		=
		desc k;

	    fn reg
                =
		rw_vector::get(*physical_regs, reg - low)
		except
		    _ = raise exception CELLS;
	};

    gpreg = reg REGISTER;
    fpreg = reg FLOAT_REGISTER;

    #  Counters 
    fun new_cell k
	= 
	{   my desc as DESC { counter, ... }
		=
		desc k;

	    fn _ =
		{   r =  *name;
		    name := r + 1; 
		    counter := *counter + 1;
		    CELL { id=>r, ref_color=>REF PSEUDO, ref_notes=>REF [], desc };
		};
	};

    stipulate
	my desc as DESC { counter, ... } = desc REGISTER;
    herein
       fun new_reg _ 
	   = 
	   {   r =   *name;

	       name := r + 1; 
	       counter := *counter + 1;
	       CELL { id=>r, ref_color=>REF PSEUDO, ref_notes=>REF [], desc };
	   };
    end;

    stipulate
	my desc as DESC { counter, ... }
	    =
	    desc FLOAT_REGISTER;
    herein
       fun new_freg _
	   = 
	   {   r = *name; 
	       name := r + 1; 
	       counter := *counter + 1;
	       CELL { id=>r, ref_color=>REF PSEUDO, ref_notes=>REF [], desc };
	   };
    end;

    fun new_dedicated_cell k
	= 
	{   my desc as DESC { dedicated, ... }
		=
	       desc k;

	    fn _ =
		{   d =   *dedicated;

		    dedicated := d + 1; 
		    if (d >= max_dedicated_cells ) 
		      error "too many dedicated cells";
		    else
		      CELL { id=>first_pseudo+d, ref_color=>REF PSEUDO, ref_notes=>REF [], desc };
                    fi;
		};
	};

    fun new_variable (CELL { desc, ref_notes, ... } )
	=
	{   r =   *name;
	    name := r + 1; 
	    CELL { id=>r, ref_color=>REF PSEUDO, ref_notes => REF *ref_notes, desc };
	};

    fun clone_cell c
	=
	{   my CELL { desc, ref_notes, ref_color, ... }
		=
		chase c;

	    r = *name;
	    name := r + 1; 
	    CELL { id=>r, ref_color=>REF *ref_color, ref_notes=>REF *ref_notes, desc };
	};

    fun num_cell k
	=
	{   my DESC { counter, ... }
		=
		desc k ;

	    .{ *counter; };
	};

    fun max_cell ()
        =
        *name;

    fun reset ()
	= 
	{   apply
                fn (_, DESC { counter, ... } ) => counter := 0; end
                cell_kind_descs;

	    name := first_name;
	};

    Cellset = cell_set::Cellset;

    empty   = cell_set::empty;

    fun get_cells_by_kind    (k:  Cellkind) =  cell_set::get    (desc k);
    fun update_cells_by_kind (k:  Cellkind) =  cell_set::update (desc k);

    get_reg  =  get_cells_by_kind REGISTER;
    get_freg =  get_cells_by_kind FLOAT_REGISTER;

    add_reg  =  cell_set::add; 
    add_freg =  cell_set::add; 
    rmv_reg  =  cell_set::rmv; 
    rmv_freg =  cell_set::rmv;

    # Misc 

    fun zero_reg k
	= 
	{   my desc as DESC { zero_reg, physical_regs, low, ... }
		=
		desc k;

	    case zero_reg
	      
	         NULL  => NULL;
		 THE r => THE (rw_vector::get(*physical_regs, r));
            esac; 
	};

    fun default_values k
	= 
	{   my DESC { default_values, ... }
		=
		desc k;

	    default_values;
	};

    # Dummy values for now; these get redefined for each architecture 

    stackptr_r =  gpreg 0;
    asm_tmp_r  =  gpreg 0;
    fasm_tmp   =  fpreg 0;
};
