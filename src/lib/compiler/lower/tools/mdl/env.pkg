# env.pkg


###                   "It is better wither to be silent, or to
###                    say things of more value than silence.
###                    Sooner throw a pearl at hazard than
###                    an idle or useless word; and do not say
###                    a little in many words, but a great deal in a few."
###
###                                          -- Pythagoras 



api DICTIONARY {

   type dictionary( X )
   type envir( X ) =  REF( dictionary( X ) )
   exception Dictionary 
   my dictionary:  String -> dictionary( X )
   my envir:  String -> envir( X )
   my get:  dictionary( X ) -> String -> X
   my lookup:  envir( X ) -> String -> X
   my get' : dictionary( X ) -> X -> String -> X
   my put:   dictionary( X ) -> String * X -> dictionary( X )
   my set:  envir( X ) -> String * X -> Void
   my apply:   (String * X -> Void) -> dictionary( X ) -> Void
   my map:   (String * X -> Y) -> dictionary( X ) -> List( Y )
   my fold:  (String * X * Y -> Y) -> Y -> dictionary( X ) -> Y
   my union:  dictionary( X ) * dictionary( X ) -> dictionary( X )
   my unions:  List( dictionary( X ) ) -> dictionary( X )
   my empty:  dictionary(  X )
   my bind:  String * X -> dictionary( X )
   my consolidate:  dictionary( X ) -> dictionary( X )

end

package Dictionary :> DICTIONARY = 
pkg

   package h = hash_table

   enum dictionary X = EMPTY 
                | TABLE    of h::Hash_Table  (String,X)
                | OVERRIDE of dictionary( X ) * dictionary( X )
                | NAMING  of String * X

   type envir( X ) = REF( dictionary( X ) )

   exception Dictionary 

   fun dictionary name = EMPTY
   fun envir name = REF EMPTY
   empty = EMPTY
   fun get EMPTY _  = raise exception Dictionary
     | get (NAMING (k, v)) x = if x == k then v else raise exception Dictionary 
     | get (OVERRIDE (a, b)) x = (get b x except _ => get a x)
     | get (TABLE t) x = h::lookup t x
   fun get' dictionary default x = get dictionary x except _ => default
   fun lookup (REF dictionary) x = get dictionary x
   fun union (a, EMPTY) = a
     | union (EMPTY, b) = b
     | union (a, b) = OVERRIDE (a, b)
   fun put dictionary x = union (dictionary, NAMING x)
   fun set dictionary x = dictionary := put *dictionary x
   fun flatten dictionary = 
   let t = h::make_table (hash_string::hash_string, op =) (13, Dictionary)
       put = h::set t
       fun f EMPTY = ()
         | f (NAMING x) = put x
         | f (OVERRIDE (a, b)) = (f a; f b)
         | f (TABLE t) = h::keyed_apply put t
   in  f dictionary; t end
   fun apply f dictionary = h::keyed_apply f (flatten dictionary)
   fun map f dictionary = list::map f (h::keyvals_list (flatten dictionary))
   fun fold f x dictionary = h::foldi f x (flatten dictionary)
   fun unions dicts = fold_right union EMPTY dicts
   fun consolidate dictionary = TABLE (flatten dictionary)
   bind = NAMING
end
