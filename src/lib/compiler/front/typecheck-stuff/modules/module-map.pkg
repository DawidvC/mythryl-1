## module-map.pkg
## Re-written by Matthias Blume (3/2000)

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6


# module_map instances are defined here and created by
# symbol_table_to_module_map::make_map in
#
#     src/lib/compiler/front/typecheck-stuff/symbol-table/symboltable-to-modulemap.sml
#
# based on the Module_Tree instances defined in
#
#     src/lib/compiler/front/typecheck-stuff/modules/module.api
#
# and placed in symbol tables during unpickling in
#
#     src/lib/compiler/front/semantic/pickle/unpickle-module.pkg 
#
# The idea is that Module_Tree instances are compact
# and self-sufficient, hence low-maintainance to
# keep around, whereas module_map instances are what
# we really want for module dependency analysis and
# such:  By storing Module_Tree instances in our
# symbol tables and then generating module_maps
# from them on the fly as needed (afterward promptly
# discarding them) we get the best of both worlds.




api Module_Map {

    Type_Identifier;
    Api_Identifier;
    Package_Identifier;
    Generic_Identifier;
    Dictionary_Identifier;

    type_identifier:              types::Primitive_Type_Constructor_Record                 -> Type_Identifier;
    api_identifier:               module::Api_Record                           -> Api_Identifier;
    package_identifier:           module::Package_Record                       -> Package_Identifier;
    generic_identifier:           module::Generic_Record                       -> Generic_Identifier;
    dictionary_identifier:        module::Typechecker_Dictionary_Record -> Dictionary_Identifier;

    package_identifier2:          (module::Api_Record,  module::Typechecked_Package) -> Package_Identifier;
    generic_identifier2:          (module::Generic_Api, module::Typechecked_Generic) -> Generic_Identifier;

    same_type_identifier:              (Type_Identifier,       Type_Identifier)       -> Bool;
    same_api_identifier:               (Api_Identifier,        Api_Identifier)        -> Bool;
    same_package_identifier:           (Package_Identifier,    Package_Identifier)    -> Bool;
    same_generic_identifier:           (Generic_Identifier,    Generic_Identifier)    -> Bool;
    same_dictionary_identifier:        (Dictionary_Identifier, Dictionary_Identifier) -> Bool;

    type_identifier_is_fresh:          Type_Identifier       -> Bool;
    api_identifier_is_fresh:           Api_Identifier        -> Bool;
    package_identifier_is_fresh:       Package_Identifier    -> Bool;
    generic_identifier_is_fresh:       Generic_Identifier    -> Bool;
    dictionary_identifier_is_fresh:    Dictionary_Identifier -> Bool;



    Module_Map;

    empty_module_map:  Module_Map;

    find_type_constructor_via_symbol_path:  (Module_Map, Type_Identifier)       -> Null_Or( types::Primitive_Type_Constructor_Record          );
    find_api_by_symbol:                     (Module_Map, Api_Identifier)        -> Null_Or( module::Api_Record                    );
    find_package_via_symbol_path:           (Module_Map, Package_Identifier)    -> Null_Or( module::Typechecked_Package           );
    find_generic_via_symbol_path:           (Module_Map, Generic_Identifier)    -> Null_Or( module::Typechecked_Generic           );
    find_typechecked_package:               (Module_Map, Dictionary_Identifier) -> Null_Or( module::Typechecker_Dictionary_Record );

    bind_type_constructor_identifier: (Module_Map, Type_Identifier,             types::Primitive_Type_Constructor_Record)           -> Module_Map;
    bind_api_identifier:              (Module_Map, Api_Identifier,              module::Api_Record)                     -> Module_Map;
    bind_package_identifier:          (Module_Map, Package_Identifier,          module::Typechecked_Package)            -> Module_Map;
    bind_generic_identifier:          (Module_Map, Generic_Identifier,          module::Typechecked_Generic)            -> Module_Map;
    bind_dictionary_identifier:       (Module_Map, Dictionary_Identifier,       module::Typechecker_Dictionary_Record)  -> Module_Map;

    type_identifier' : types::Type_Constructor -> Type_Identifier;



    Uniformly_Typed_Module_Map( X );

    empty_uniformly_typed_module_map:  Uniformly_Typed_Module_Map(  X );

    ufind_type_constructor:     (Uniformly_Typed_Module_Map( X ), Type_Identifier)       -> Null_Or( X );
    ufind_api:                  (Uniformly_Typed_Module_Map( X ), Api_Identifier)        -> Null_Or( X );
    ufind_package:              (Uniformly_Typed_Module_Map( X ), Package_Identifier)    -> Null_Or( X );
    ufind_g:              (Uniformly_Typed_Module_Map( X ), Generic_Identifier)    -> Null_Or( X );
    ufind_typechecked_package:      (Uniformly_Typed_Module_Map( X ), Dictionary_Identifier) -> Null_Or( X );

    u_insert_type_constructor:  (Uniformly_Typed_Module_Map( X ), Type_Identifier,       X) -> Uniformly_Typed_Module_Map( X );
    u_insert_api:               (Uniformly_Typed_Module_Map( X ), Api_Identifier,        X) -> Uniformly_Typed_Module_Map( X );
    u_insert_package:           (Uniformly_Typed_Module_Map( X ), Package_Identifier,    X) -> Uniformly_Typed_Module_Map( X );
    u_insert_g:           (Uniformly_Typed_Module_Map( X ), Generic_Identifier,    X) -> Uniformly_Typed_Module_Map( X );
    u_insert_typechecked_package:   (Uniformly_Typed_Module_Map( X ), Dictionary_Identifier, X) -> Uniformly_Typed_Module_Map( X );

}; #  Api Module_Map 



package module_map

: (weak)  Module_Map			# Module_Map	is from   src/lib/compiler/front/typecheck-stuff/modules/module-map.pkg

{
    package m  =  module;		# module	is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
    package t  =  types;		# types		is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
    package a  =  var_home;		# var_home	is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
    package st =  stamp;		# stamp		is from   src/lib/compiler/front/typecheck-stuff/basics/stamp.pkg

    fun bug m
        =
        error_message::impossible ("module_map: " + m);

    Stamp = st::Stamp;

    Type_Identifier = Stamp;
    Api_Identifier  = Stamp;

    Package_Identifier
        =
        { an_api:           Stamp,
          typechecked_package:  Stamp
        };

    Generic_Identifier
        =
        { parameter_api: Stamp,
          body_api:      Stamp,
          typechecked_package:     Stamp
        };

    Dictionary_Identifier = Stamp;

    type_identifier_is_fresh =   st::is_fresh;
    api_identifier_is_fresh  =   st::is_fresh;


    fun package_identifier_is_fresh { an_api, typechecked_package }
        =
        st::is_fresh  an_api
        or
        st::is_fresh  typechecked_package;


    fun generic_identifier_is_fresh  { parameter_api,  body_api,  typechecked_package }
        =
	st::is_fresh  parameter_api
        or
        st::is_fresh  body_api
        or
        st::is_fresh  typechecked_package;


    dictionary_identifier_is_fresh
        =
        st::is_fresh;

    fun type_identifier (r: types::Primitive_Type_Constructor_Record) =   r.stamp;
    fun api_identifier  (s: module::Api_Record          ) =   s.stamp;

    fun package_identifier2 (  an_api:           m::Api_Record,
                                 typechecked_package:  m::Typechecked_Package
                              )
        =
        { an_api    =>   an_api.stamp,
          typechecked_package   =>   typechecked_package.stamp
        };


    fun package_identifier ( { an_api => module::API s,
                               typechecked_package,
                               ...
                             }: module::Package_Record
                           )
	    =>
	    { an_api          =>  s.stamp,
	      typechecked_package =>  typechecked_package.stamp
	    };

        package_identifier _
            =>
            bug "package_identifier: bad api";
    end;


    fun generic_identifier2 ( m::GENERIC_API { parameter_api => m::API parameter_api,
                                                     body_api      => m::API body_api,
                                                     ...
                                                   },
		             typechecked_package: m::Typechecked_Generic
                           )
	    =>
	    { parameter_api =>  parameter_api.stamp,
	      body_api      =>  body_api.stamp,
	      typechecked_package     =>  typechecked_package.stamp
	    };

        generic_identifier2 _
            =>
            bug "generic_identifier2/genericIdentifier2: bad funsig";
    end;


    fun generic_identifier ( { a_generic_api, typechecked_generic, ... }: module::Generic_Record)
        =
        generic_identifier2  ( a_generic_api, typechecked_generic );


    fun dictionary_identifier (typechecker_dictionary: module::Typechecker_Dictionary_Record)
        =
        typechecker_dictionary.stamp;


    package package_key {

	Key
	    =
	    Package_Identifier;

	fun compare ( i1: Package_Identifier,
		      i2: Package_Identifier
		    )
	    =
	    case (st::compare (i1.an_api, i2.an_api))

		 EQUAL   =>  st::compare (i1.typechecked_package, i2.typechecked_package);
		 unequal =>  unequal;
	    esac;
    };

    package generic_key {

        Key
            =
            Generic_Identifier;

	fun compare ( i1: Generic_Identifier,
                      i2: Generic_Identifier
                    )
            =
	    case (st::compare (
                     i1.parameter_api,
                     i2.parameter_api
                 ))
	      
	         EQUAL
                     =>
                     case (st::compare (
                              i1.body_api,
			      i2.body_api
			  ))
		       
			  EQUAL
			      =>
			      st::compare (
				  i1.typechecked_package,
				  i2.typechecked_package
			      );

			  unequal
			      =>
			      unequal;
		     esac;


	         unequal
                     =>
                     unequal;
            esac;
    };

								# red_black_map_g		is from   src/lib/src/red-black-map-g.pkg

    package stamp_map   =  red_black_map_g( st );
    package package_map =  red_black_map_g( package_key );
    package generic_map =  red_black_map_g( generic_key );

    same_type_identifier =  st::eq;
    same_api_identifier  =  st::eq;

    fun same_package_identifier (x, y) =   package_key::compare (x, y) == EQUAL;
    fun same_generic_identifier (x, y) =   generic_key::compare   (x, y) == EQUAL;

    same_dictionary_identifier = st::eq;

    Module_Map
	=
	{ type_constructor_map: stamp_map::Map(   t::Primitive_Type_Constructor_Record ),
	  api_map:              stamp_map::Map(   m::Api_Record ),
	  package_map:          package_map::Map( m::Typechecked_Package ),
	  generic_map:          generic_map::Map( m::Typechecked_Generic ),
	  dictionary_map:       stamp_map::Map(   m::Typechecker_Dictionary_Record )
	};

    empty_module_map
        =
        { type_constructor_map =>  stamp_map::empty,
	  api_map        =>  stamp_map::empty,
	  package_map        =>  package_map::empty,
	  generic_map          =>  generic_map::empty,
	  dictionary_map       =>  stamp_map::empty
	};

    stipulate

	fun find
                (selector, find)
                (    map as { type_constructor_map, api_map, package_map, generic_map, dictionary_map },
                     key
                )
            =
	    find (selector map, key);

    herein

        fun find_type_constructor_via_symbol_path  x =  find (.type_constructor_map, stamp_map::get) x;
	fun find_api_by_symbol                     x =  find (.api_map,              stamp_map::get) x;
	fun find_package_via_symbol_path           x =  find (.package_map,        package_map::get) x;
	fun find_generic_via_symbol_path           x =  find (.generic_map,        generic_map::get) x;
	fun find_typechecked_package               x =  find (.dictionary_map,       stamp_map::get) x;
    end;

    fun bind_type_constructor_identifier ( { type_constructor_map, api_map, package_map, generic_map, dictionary_map }, k, t)
        =
	{ type_constructor_map =>  stamp_map::set (type_constructor_map, k, t),
	  api_map,
          package_map,
          generic_map,
          dictionary_map
        };
	  
    fun bind_api_identifier ( { type_constructor_map, api_map, package_map, generic_map, dictionary_map }, k, t)
        =
	{ api_map              =>  stamp_map::set (api_map, k, t),
	  type_constructor_map,
          package_map,
          generic_map,
          dictionary_map
        };
	  
    fun bind_package_identifier ( { type_constructor_map, api_map, package_map, generic_map, dictionary_map }, k, t)
        =
	{ package_map          =>  package_map::set (package_map, k, t),
	  type_constructor_map,
          api_map,
          generic_map,
          dictionary_map
        };
	  
    fun bind_generic_identifier ( { type_constructor_map, api_map, package_map, generic_map, dictionary_map }, k, t)
        =
	{ generic_map          =>  generic_map::set (generic_map, k, t),
	  type_constructor_map,
          api_map,
          package_map,
          dictionary_map
        };
	  
    fun bind_dictionary_identifier ( { type_constructor_map, api_map, package_map, generic_map, dictionary_map }, k, t)
        =
	{ dictionary_map       => stamp_map::set (dictionary_map, k, t),
	  type_constructor_map,
          api_map,
          package_map,
          generic_map
        };

    fun type_identifier' (t::PRIMITIVE_TYPE_CONSTRUCTOR r)             =>  type_identifier r;
	type_identifier' (t::DEFINED_TYPE_CONSTRUCTOR { stamp, ... } ) =>  stamp;
	type_identifier' _                                 =>  bug "type_identifier': neither PRIMITIVE_TYPE_CONSTRUCTOR nor DEFINED_TYPE_CONSTRUCTOR";
    end;



    #  And now for uniformly typed maps (implementations are shared)... 

    Uniformly_Typed_Module_Map( X )
        =
        { type_constructor_map:     stamp_map::Map( X ),
	  api_map:                  stamp_map::Map( X ),
	  package_map:            package_map::Map( X ),
	  generic_map:            generic_map::Map( X ),
	  dictionary_map:           stamp_map::Map( X )
	};

    empty_uniformly_typed_module_map   =   empty_module_map;

    ufind_type_constructor    =   find_type_constructor_via_symbol_path;
    ufind_api                 =   find_api_by_symbol;
    ufind_package             =   find_package_via_symbol_path;
    ufind_g                   =   find_generic_via_symbol_path;
    ufind_typechecked_package =   find_typechecked_package;

    u_insert_type_constructor =   bind_type_constructor_identifier;
    u_insert_api              =   bind_api_identifier;
    u_insert_package          =   bind_package_identifier;
    u_insert_g                =   bind_generic_identifier;
    u_insert_typechecked_package  =   bind_dictionary_identifier;

}; #  package module_map 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
