## rw-unt8-vector-slice.pkg
## Author: Matthias Blume (blume@tti-c.org)

# Compiled by:
#     src/lib/std/src/stdlib-core.make6



###                   "No sane man can be happy, for to him life is real,
###                    and he sees what a fearful thing it is.
###
###                   "Only the mad can be happy, and not many of those."
###
###                                         -- Mark Twain,
###                                            The Mysterious Stranger



package rw_unt8_vector_slice : Monomorphic_Rw_Vector_Slice		# Monomorphic_Rw_Vector_Slice	is from   src/lib/std/src/monomorphic-rw-vector-slice.api
			where  Element == unt8::Unt
			where  Rw_Vector == rw_unt8_vector::Rw_Vector
			where  Vector == unt8_vector::Vector
			where  Vector_Slice == unt8_vector_slice::Slice
= package {

     Element = unt8::Unt;
     Rw_Vector = rw_unt8_vector::Rw_Vector;
     Vector = unt8_vector::Vector;
     Vector_Slice = unt8_vector_slice::Slice;

     Slice = SL  { base:  Rw_Vector,
                   start: Int,
                   stop:  Int
                 };

    # Fast add/subtract avoiding
    # the overflow test:
    #
    infix val --- +++;
    #
    fun x --- y = inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x - inline_t::unt31::copyf_int31 y);
    fun x +++ y = inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x + inline_t::unt31::copyf_int31 y);

    unsafe_get    =  inline_t::rw_unt8_vector::get;
    unsafe_set    =  inline_t::rw_unt8_vector::set;

    ro_unsafe_get =  inline_t::unt8_vector::get;
    ro_unsafe_set =  inline_t::unt8_vector::set;

    alength       =  inline_t::rw_unt8_vector::length;
    vlength       =  inline_t::unt8_vector::length;

    fun length (SL { start, stop, ... } )
        =
        stop --- start;


    fun get (SL { base, start, stop }, i)
	=
	{   i' = start + i;

	    if (i' < start or i' >= stop)  raise exception SUBSCRIPT;
	    else                           unsafe_get (base, i');
            fi;
	};


    fun set (SL { base, start, stop }, i, x)
	=
	{   i' = start + i;

	    if  (i' < start
            or   i' >= stop
            )    raise exception SUBSCRIPT;
	    else unsafe_set (base, i', x);
	    fi;
	};


    fun make_full_slice  arr
        =
        SL { base => arr, start => 0, stop => alength arr };


    fun make_slice (arr, start, olen)
	=
	{   al = alength arr;

	    SL { base => arr,

		 start => if (start < 0 or al < start)  raise exception SUBSCRIPT;
			  else                          start;
                          fi,

		 stop => case olen
			     #
			     NULL => al;
			     #
			     THE len =>
				 {   stop = start +++ len;
				     #
				     if (stop < start or al < stop)   raise exception SUBSCRIPT;
				     else                             stop;
				     fi;
				 };
                         esac
               };
	};


    fun make_subslice (SL { base, start, stop }, i, olen)
	=
	{   start' = if (i < 0 or stop < i)  raise exception SUBSCRIPT;
		     else                    start +++ i;
                     fi;

	    stop'  = case olen
			 #
			 NULL => stop;
			 #
			 THE len =>
			     {   stop' = start' +++ len;
				 #
			         if (stop' < start' or stop < stop')   raise exception SUBSCRIPT;
			         else                                  stop';
                                 fi;
			     };
                     esac;

	    SL { base, start => start', stop => stop' };
	};


    fun base (SL { base, start, stop } )
        =
        (base, start, stop --- start);


    fun to_vector (SL { base, start, stop } )
        =
	case (stop --- start)
	    #          
	    0 => inline_t::cast "";
	    #          
	    len =>
		{   v = inline_t::cast (assembly::a::create_s len);

		    fun fill (i, j)
			=
			if (i < len)
			    #
			    ro_unsafe_set (v, i, unsafe_get (base, j));
			    fill (i +++ 1, j +++ 1);
			fi;

		    fill (0, start);

		    v;
		};
	esac;


    fun copy { from => SL { base, start, stop }, to, di }
	=
	{   sl = stop --- start;
	    de = sl + di;

	    fun copy_dn (s, d)
		=
		if (s >= start)
		    #
		    unsafe_set (to, d, unsafe_get (base, s));
		    copy_dn (s --- 1, d --- 1);
		fi;

	    fun copy_up (s, d)
		=
		if (s < stop)
		    #
		    unsafe_set (to, d, unsafe_get (base, s));
		    copy_up (s +++ 1, d +++ 1);
		fi;

	    if   (di < 0 or de > alength to) raise exception SUBSCRIPT;
	    elif (di >= start )              copy_dn (stop --- 1, de --- 1);
	    else                             copy_up (start, di);
            fi;
	};

    fun copy_vec { from => vsl, to, di }
	=
	{   my (base, start, vlen)
		=
		unt8_vector_slice::base vsl;

	    de = di + vlen;

	    fun copy_up (s, d)
		=
		if (d < de)
		    #
		    unsafe_set (to, d, ro_unsafe_get (base, s));
		    copy_up (s +++ 1, d +++ 1);
		fi;

	    if (di < 0 or de > alength to)   raise exception SUBSCRIPT;
	    else			     copy_up (start, di);	    #  Assume vector and rw_vector are disjoint 
	    fi;
	};

    fun is_empty (SL { start, stop, ... } )
        =
        start == stop;

    fun get_item (SL { base, start, stop } )
        =
	if (start >= stop)   NULL;
	else                 THE (unsafe_get (base, start),   SL { base, start => start +++ 1, stop } );
	fi;

    fun keyed_apply f (SL { base, start, stop } )
	=
	apply start
	where
	    fun apply i
		=
		if (i < stop)
		    #
		    f (i --- start, unsafe_get (base, i));
		    apply (i +++ 1);
		fi;
	end;

    fun apply f (SL { base, start, stop } )
	=
	apply start
	where
	    fun apply i
		=
		if (i < stop)
		    #
		    f (unsafe_get (base, i));
		    apply (i +++ 1);
		fi;
	end;

    fun modifyi f (SL { base, start, stop } )
	=
	mdf start
	where
	    fun mdf i
		=
		if (i < stop)
		    #
		    unsafe_set (base, i, f (i --- start, unsafe_get (base, i)));
		    mdf (i +++ 1);
		fi;
	end;

    fun modify f (SL { base, start, stop } )
	=
	mdf start
	where
	    fun mdf i
                =
		if (i < stop)
		    #
		    unsafe_set (base, i, f (unsafe_get (base, i)));
                    mdf (i +++ 1);
                fi;
	end;

    fun keyed_fold_left f init (SL { base, start, stop } )
	=
	fold (start, init)
	where
	    fun fold (i, a)
                =
		if (i >= stop)   a;
		else             fold (i +++ 1, f (i --- start, unsafe_get (base, i), a));
                fi;
	end;

    fun fold_left f init (SL { base, start, stop } )
	=
	fold (start, init)
	where
	    fun fold (i, a)
                =
		if (i >= stop)   a;
		else             fold (i +++ 1, f (unsafe_get (base, i), a));
                fi;
	end;

    fun keyed_fold_right f init (SL { base, start, stop } )
	=
	fold (stop --- 1, init)
	where
	    fun fold (i, a)
                =
		if (i < start)   a;
		else             fold (i --- 1, f (i --- start, unsafe_get (base, i), a));
                fi;
	end;

    fun fold_right f init (SL { base, start, stop } )
	=
	fold (stop --- 1, init)
	where
	    fun fold (i, a)
                =
		if (i < start)   a;
                else             fold (i --- 1, f (unsafe_get (base, i), a));
                fi;
	end;

    fun findi p (SL { base, start, stop } )
	=
	fnd start
	where
	    fun fnd i
                =
		if (i >= stop)
                    #  
                    NULL;
		else 
		    x = unsafe_get (base, i);
		    #
		    if (p (i, x))   THE (i --- start, x);
		    else            fnd (i +++ 1);
                    fi;
		fi;
	end;

    fun find p (SL { base, start, stop } )
	=
	fnd start
	where
	    fun fnd i
                =
		if (i >= stop )
		    #
                    NULL;
		else
		    x = unsafe_get (base, i);
		    #
		    if (p x)   THE x;
		    else       fnd (i +++ 1);
                    fi;
		fi;
	end;

    fun exists p (SL { base, start, stop } )
	=
	ex start
	where
	    fun ex i
                =
		i < stop
		and
		(   p (unsafe_get (base, i))
		    or
		    ex (i +++ 1)
		);
	end;

    fun all p (SL { base, start, stop } )
	=
	al start
	where
	    fun al i
                =
		i >= stop
		or
		(   p (unsafe_get (base, i))
		    and
		    al (i +++ 1)
		);
	end;

    fun collate c (SL { base => b1, start => s1, stop => e1 },
		   SL { base => b2, start => s2, stop => e2 } )
	=
	col (s1, s2)
	where
	    fun col (i1, i2)
                =
		if (i1 >= e1)
		    #                    
		    if (i2 >= e2 ) EQUAL;
		    else           LESS;
                    fi;
		elif (i2 >= e2 ) GREATER;
		else
		    case (c (unsafe_get (b1, i1), unsafe_get (b2, i2)))
			#
			EQUAL   =>  col (i1 +++ 1, i2 +++ 2);
			unequal =>  unequal;
		    esac;
                fi;
	end;
};




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 2003 by The Fellowship of SML/NJ
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
