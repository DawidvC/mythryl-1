## control-set.pkg

# Compiled by:
#     src/lib/controls/controls-lib.make6


package control_set: (weak)  Control_Set				# Control_Set	is from   src/lib/controls/control-set.api
{

    package rep =  control_reps;		# control_reps			is from   src/lib/controls/control-reps.pkg
    package tab =  quickstring_hash_table;	# quickstring_hash_table	is from   src/lib/src/quickstring-hash-table.pkg

    Control( X )       =  control::Control( X );
    Control_Set (X, Y) =  control_reps::Control_Set( X, Y ); 

    fun make ()
        =
        tab::make_table (16, FAIL "control set");

    fun member (cset, name)
        =
        case (tab::find cset name)
	  
	     NULL =>  FALSE;
	     _    =>  TRUE;
        esac;

    fun find (cset, name)
        =
        tab::find cset name;

    fun set (cset, control as rep::CONTROL { name, ... }, info)
        =
	tab::set cset (name, { control, info } );

    fun remove (cset, name)
        =
        case (tab::find cset name)
	  
	     NULL =>  ();
	     _    =>  ignore (tab::remove cset name);
        esac;

    fun info_of (cset:   Control_Set(X, Y)) (rep::CONTROL { name, ... } )
        =
	null_or::map .info (tab::find cset name);

    # list the members; the list is ordered by descreasing priority.  The
    # listControls' function allows one to specify an obscurity level; controls
    # with equal or higher obscurioty are omitted from the list.

    stipulate

	fun priority_of { control=>rep::CONTROL { priority, ... }, info }
            =
            priority;

	fun gt (a, b)
            =
            rep::priority_gt (priority_of a, priority_of b);

    herein
	fun list_controls cset
            =
            list_mergesort::sort gt (tab::vals_list cset);

	fun list_controls' (cset, obs)
	    =
	    list_mergesort::sort gt (tab::fold add [] cset)
            where
	        fun add (item as { control=>rep::CONTROL { obscurity, ... }, info }, l)
		    =
		    if (obs > obscurity)   item ! l;
		    else                          l;
                    fi;

	    end;

    end;

    fun apply f cset
        =
        tab::apply f cset;

    # Convert the controls in a set
    # to string controls and create
    # a new set for them:
    #
    fun convert_to_string_controls
            convert
            control_set
        =
        {   string_control
                =
                control::string_control   convert;

	    fun convert_control { control, info }
                =
                {   control => string_control control,
                    info
                };

	    tab::map convert_control   control_set;
	};

};



## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
