## topwindow.api
#
#
# Background
# ==========
#
# x-kit supports five kinds of windows:
# 
#    o Top-level windows (topwindows).
#    o Sub-windows.
#    o Transient windows.
#    o Pop-up windows.
#    o Input-only windows.
#     
# In more detail:    
#     
#  o   A Top-level window is the root of a widget hierarchy.
#      It is managed (and thus decorated) by the window manager.
#      This is what the end-user thinks of as a "window".
#
#  o   All descendents of a top-level window are called
#      subwindows. Typically there is one per widget.
#
#  o   Transient windows are top-level windows with
#      short lifetimes such as dialogue boxes.  These
#      are managed (and thus decorated) by the window
#      manager.
#
#  o   Popup windows are short-lifetime top-level windows
#      such as menus which are not managed by the window
#      manager, and which thus lack the usual window
#      manager decorations such as borders and close buttons.
#
#  o   An input-only window provides a new xevent-stream
#      handling context for an existing window.
#     
#
# Overview
# ========
#
# Here we focus on top-level window widgets.
# These serve as the root widgets of widget trees,
# interfacing between the X library/window manager
# and the generic widgets making up the rest of
# the widget tree.
#
# Topwindow widgets abstract the properties and
# responsibilities of top-level windows:
#
#  o They cannot be inserted into other windows.
#
#  o They mediate between the X and X-kit paradigms
#    for handling mouse and keyboard input.
#
#  o They provide an application gateway to X window
#    manager services.
#
# Graphically, a Topwindow widget is entirely overlaid
# by its child widget;  it has no graphical presence
# of its own.
#
# The preferred size of the topwindow is
# the preferred size of its child widget.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6



stipulate
    include threadkit;				# threadkit	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xc =  xcore;			# xcore		is from   src/lib/x-kit/xclient/xcore.pkg
    package xg =  xgeometry;			# xgeometry	is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xs =  xselection;			# xselection	is from   src/lib/x-kit/xclient/xselection.pkg
    package xw =  xwindow;			# xwindow	is from   src/lib/x-kit/xclient/xwindow.pkg
    #
    package wg =  widget;			# Widget	is from   src/lib/x-kit/widget/basic/widget.pkg
herein

    api Topwindow {

	Topwindow;

	Window_And_Icon_Names			# To pass to the X window manager.
	    =
	    { window_name:   Null_Or( String ),
	      icon_name:     Null_Or( String )
	    };

	Window_Manager_Hints;

	make_window_manager_hints
	    :
	    { size_hints:    List(  xs::Window_Manager_Size_Hint ),
	      nonsize_hints: List(  xs::Window_Manager_Nonsize_Hint )
	    } 
	    ->
	    Window_Manager_Hints;

	topwindow
	    :
	    (wg::Root_Window,  wg::View,  List( wg::Arg ))
	    ->
	    wg::Widget
		->
		Topwindow;

	# Create a topwindow.  We supply:
	#
	#   o  A child widget, the root widget of
	#      the widget-tree for the topwindow.
	#
	#   o  An optional color giving the
	#      topwindow's background color.
	#      (Defaults to white.)
	#
	#   o  Optional names for the window and
	#      icon, to be passed to the window
	#      manager.
	#
	make_topwindow
	    :
	    ( wg::Widget,			# Root of widget-tree for window.
	      Null_Or( xc::Rgb ),		# Background color; defaults to white.
	      Window_And_Icon_Names		# Label strings for window manager.
	    )
	    ->
	    Topwindow;

	make_topwindow_at
	    :
	    xg::Box
	    ->
	    ( wg::Widget,			# Root of widget-tree for window.
	      Null_Or( xc::Rgb ),		# Background color; defaults to white.
	      Window_And_Icon_Names		# Label strings for window manager.
	    )
	    ->
	    Topwindow;

	# Create a 'transient' Topwindow,
	# used for dialogue boxes and such.
	#
	# Transient windows are shorter-lived
	# than plain toplevel windows but are
	# still registered with the window manager,
	# although not usually given a title bar
	# the other decorations of a full-scale
	# application topwindow.
	#
	# Transient windows are longer-lived than
	# the simple pop-up windows used for menus
	# and such, which are not registered with
	# the window manager and created via
	#     make_simple_popup_window ()
	# from
	#     src/lib/x-kit/xclient/src/window/window.pkg
	#
	# A transient window is associated with the
	# main topwindow for the application; typically
	# the window manager will de/iconify the together.
	# 
	#
	make_transient_topwindow
	    :
	    xc::Window				# Main application topwindow; window manager will de/iconify us along with it.
	    -> 
	    ( wg::Widget,			# Root of widget-tree for window.
	      Null_Or( xc::Rgb ),		# Background color; defaults to white.
	      Window_And_Icon_Names		# Label strings for window manager.
	    )
	    ->
	    Topwindow;

	make_transient_topwindow_at
	    :
	    xg::Box
	    ->
	    xc::Window				# Main application topwindow; window manager will de/iconify us along with it.
	    ->
	    ( wg::Widget,			# Root of widget-tree for window.
	      Null_Or( xc::Rgb ),		# Background color; defaults to white.
	      Window_And_Icon_Names		# Label strings for window manager.
	    )
	    ->
	    Topwindow;

	set_window_manager_hints:  Topwindow -> Window_Manager_Hints -> Void;
	    #
	    # Override default window manager properties for window.
	    # If this is called before 'start' (i.e., before the
	    # window manager is made aware of the window), the
	    # topwindow caches the values for use in the 'start' call.

	start:      Topwindow -> Void;
	    #
	    # Instantiate the widget tree associated with
	    # the topwindow (via the child widget supplied
	    # to the 'make' call), creating and mapping all
	    # required X-server windows and thus making
	    # the widget hierarchy visible.

	map:        Topwindow -> Void;
	unmap:      Topwindow -> Void;

	destroy:    Topwindow -> Void;
	    #
	    # Recursively destroys all X-server windows
	    # associated with the topwindow's widget hierarchy.
	    #
	    # We invoke this if we get a REQ_DESTRUCTION
	    # from the root widget of our widget-tree.

	delete_mailop:  Topwindow ->  Mailop( Void );
	    #
	    # This appears to be a half-completed dusty deboer hack.
	    # This mailop will fire if we recieve (any) CLIENT_MESSAGE
	    # X event -- see logic in
	    #     src/lib/x-kit/xclient/src/window/topwindow-to-widget-router.pkg
	    # No existing code sends a CLIENT_MESSAGE,
	    # nor does any existing code reference delete_mailop.
    };
end;						# stipulate



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
