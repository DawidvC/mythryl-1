
# Compile the machine description into an internal digestable form



###               "I visualize a time when we
###                will be to robots what
###                dogs are to humans, and I'm
###                rooting for the machines."
###
###                       -- Claude Shannon



generic package mdl_compile
   (package Dictionary:        Mdl_Dictionary
    package RawSyntaxTreePP:      MDL_AST_PRETTY_PRINTER
    package raw_syntax_stuff:    MDL_AST_UTIL
    package Trans:      MDL_AST_TRANSLATION
    package Consts:     MDL_AST_CONSTANTS
    package Rewriter:   MDL_AST_REWRITER
    package TypeUtils:  Mdl_Type_Utilities
      sharing Dictionary::raw_syntax = RawSyntaxTreePP::raw_syntax = Trans::raw_syntax = raw_syntax_stuff::raw_syntax =
              Rewriter::raw_syntax = Consts::raw_syntax = TypeUtils::raw_syntax
   )

: Mdl_Compile

{
   package Dictionary       = Dictionary
   package raw_syntax       = Dictionary::raw_syntax
   package Trans     = Trans
   package Rewriter  = Rewriter
   package Consts    = Consts
   package error     = mdl_error
   package RawSyntaxTreePP     = RawSyntaxTreePP
   package util      = raw_syntax_stuff
   package TypeUtils = TypeUtils
   package h         = hash_table
      
   use error raw_syntax Util

   type filename = String

   infix ++
  
   my op ++ = Dictionary.++

   enum slot X = EMPTY of String | SLOT of String * X 

   #  machine description 
   enum md = MD of 
      { dictionary:        Ref( Dictionary::dictionary ),
       endianess:  REF(  slot(  raw_syntax::endianess ) ), 
       archKind:   REF(  slot(  raw_syntax::archKind ) ),
       asmCase:    REF(  slot(  raw_syntax::assemblycase ) ),
       name:       REF(  slot(  String ) ),
       filename:   filename, 
       cells:      REF(  List(  raw_syntax::storagedecl ) ),
       locations:  REF(  List(  raw_syntax::locbind ) ),
       formats:    ( Null_Or( Int ) * raw_syntax::formatbind) List REF,
       instructions:  REF( slot( List( raw_syntax::consbind ) ) ),
       debug:      Ref(  List(  String ) ),
       cpus:       Ref( slot( raw_syntax::cpubind List ) ),
       pipelines:  Ref( slot( raw_syntax::pipelinebind List) ),
       resources:  Ref( slot( List( raw_syntax::id ) ) ),
       latencies:  Ref( slot( List( raw_syntax::latencybind ) ) )
      }

   fun getSlot (REF (EMPTY name)) = error::fail (name$" has not been declared") 
     | getSlot (REF (SLOT(_, x))) = x

   fun getSlot'(REF (EMPTY _)) = []
     | getSlot'(REF (SLOT(_, x))) = x

   fun putSlot (s as REF (EMPTY name), x) = s := SLOT (name, x)
     | putSlot (s as REF (SLOT (name, _)), x) =
         error::error("duplicate declaration of "$name)

   fun putSlot'(s as REF (EMPTY name), x) = s := SLOT (name, x)
     | putSlot'(s as REF (SLOT (name, _)), x) = s := SLOT (name, x)

   #  Extract info from a machine description 
   fun endianess (MD { endianess, ... } ) = getSlot (endianess)
   fun archKind (MD { archKind, ... } ) = getSlot (archKind)
   fun asmCase (MD { asmCase, ... } ) = getSlot (asmCase)
   fun name (MD { name, ... } ) = getSlot (name)
   fun filename (MD { filename, ... } ) = filename
   fun dictionary (MD { dictionary, ... } ) = *dictionary
   fun cells (MD { cells, ... } ) = *cells
   fun locations (MD { locations, ... } ) = *locations
   fun formats (MD { formats, ... } ) = *formats
   fun instructions (MD { instructions, ... } ) = getSlot instructions
   fun debugging (MD { debug, ... } ) x = list::exists (fn x' => x = x') *debug
   fun resources (MD { resources, ... } ) = getSlot' resources
   fun latencies (MD { latencies, ... } ) = getSlot' latencies
   fun cpus (MD { cpus, ... } ) = getSlot' cpus
   fun pipelines (MD { pipelines, ... } ) = getSlot' pipelines

/*
   fun cellSets (MD { cells, ... } ) =
       list_mergesort::sort
         (fn (CELLdecl { from=f1, ... }, CELLdecl { from=f2, ... } ) => *f1 > *f2)
            (list::filter (fn CELLdecl { cellset=TRUE, alias=NULL, ... } => TRUE
                           | CELLdecl _ => FALSE) (*cells)
         )

   fun cellSetsAliases (MD { cells, ... } ) = 
        list_mergesort::sort
         (fn (CELLdecl { from=f1, ... }, CELLdecl { from=f2, ... } ) => *f1 > *f2)
           (list::filter (fn CELLdecl { cellset=TRUE, ... } => TRUE
                          | CELLdecl { alias=THE _, ... } => TRUE
                          | _ => FALSE) (*cells))
 */

   fun lookupCellKind (MD { cells, ... } ) k = 
   let fun loop [] = fail("cellkind "$k$" not found")
         | loop((c as CELLdecl { id, nickname, ... } ) . cs) =
            if k == id or k == nickname then c else loop cs
   in  loop (*cells) end

   fun lookupDatatype (MD { dictionary, ... } ) t = 
   let instrDict  = Dictionary::lookupPackage (*dictionary) (IDENT([], "Instruction"))
       datatypes = Dictionary::datatypeDefinitions instrDict
       fun loop [] = fail("enum "$t$" not found")
         | loop((db as DATATYPEbind { id, ... } ) . dbs) =
            if t == id then db else loop dbs
   in  loop datatypes end

   fun hasCopyImpl md =
       list::exists (fn CONSbind { id="COPY", type=THE (RECORDty fields), ... } =>
                      list::exists (fn (id, _) => id = "impl") fields
                    | _ => FALSE
                   ) (instructions md)

   #  Extract info from the dictionary 
   declOf  = Dictionary::declOf o dictionary
   genericArgOf = Dictionary::genericArgOf o dictionary
   typeOf = Dictionary::typeOf o dictionary

   #  Require the definitions of these things 
   fun require md dictionary_name { values, types } =
   let decls = declOf md dictionary_name
       hash = hash_string::hash_string
       exception NotDefined
       valueTable = h::make_table (hash, op =)(32, NotDefined)
       typeTable = h::make_table (hash, op =) (32, NotDefined)
       fun enterDty (DATATYPEbind { id, ... } ) = h::set typeTable (id, ())
         | enterDty (DATATYPEEQbind { id, ... } ) = h::set typeTable (id, ())
       fun enterType (TYPEbind (id, _, _)) = h::set typeTable (id, ())
       fun enterFb (FUNbind (id, _)) = h::set valueTable (id, ())
         
       fun decl _ (d as DATATYPEdecl (dts, ts)) = 
                 (apply enterDty dts; apply enterType ts; d)
         | decl _ (d as FUNdecl fbs) = (apply enterFb fbs; d)
         | decl _ d = d
       NO = Rewriter::noRewrite
       .decl (Rewriter::rewrite { decl=decl, expression=NO, pattern=NO,
                                      type=NO, sexp=NO } ) decls
       fun check kind table id = 
            (h::lookup table id)
             except _ => warning("missing "$kind$" "$dictionary_name$"."$id)
   in  apply (check "function" valueTable) values;
       apply (check "type" typeTable) types 
   end

   #  Compile an AST into a machine description 

   fun compile (filename, decls) = 
   let endianess   = REF (EMPTY "endianess")
       archKind    = REF (EMPTY "architecture")
       asmCase     = REF (EMPTY "assembly case")
       name        = REF (EMPTY "module name")
       instructions= REF (EMPTY "instructions")
       pipelines   = REF (EMPTY "pipelines")
       resources   = REF (EMPTY "resources")
       latencies   = REF (EMPTY "latencies")
       cpus        = REF (EMPTY "cpus")
       dictionary         = REF Dictionary::empty
       cells       = REF []
       locations   = REF []
       debug       = REF []
       formats     = REF []
       md = MD { dictionary      =dictionary,
                   endianess=endianess,
                   archKind =archKind,
                   asmCase  =asmCase,
                   name     =name,
                   filename =filename,
                   cells    =cells,
                   locations=locations,
                   formats  =formats,
                   instructions=instructions,
                   debug    =debug,
                   cpus     =cpus,
                   resources=resources,
                   pipelines=pipelines,
                   latencies=latencies
                  }
       fun decl d = dictionary := ((*dictionary) ++ Dictionary::elab (*dictionary) d)

       fun ddd d =
           case d of
           #  ML code 
             DATATYPEdecl _ => decl d
           | FUNdecl _      => decl d
           | VALdecl _      => decl d
           | VALSIGdecl _   => decl d
           | TYPESIGdecl _  => decl d
           | LOCALdecl _    => decl d
           | PACKAGE_DECL _ => decl d
           | INFIXdecl _     => decl d
           | INFIXRdecl _    => decl d
           | NONFIXdecl _    => decl d
           | OPENdecl _      => decl d
           | SEQdecl ds      => ddds ds
           | @@@ _             => ()
           | MARKdecl (l, d)   => (setLoc l; ddd d)

           #  MD Gen specific constructions 
           | FORMATdecl (bits, f) => formats :=  *formats @ 
                                      map (fn f => (bits, f)) f
           | STORAGEdecl d      => cells := *cells @ d 
           | LOCATIONSdecl d    => locations := *locations @ d
           | INSTRUCTIONdecl c  => (putSlot (instructions, c); decl d)
           | ARCHdecl (n, ds)     => (putSlot (name, n); ddds (ds))
           | BITSORDERINGdecl _ => error "bitsordering"
           | ARCHKINDdecl k     => putSlot (archKind, k)
           | ENDIANESSdecl e    => putSlot (endianess, e)
           | NAMEdecl n         => putSlot'(name, n)
           | ASSEMBLYCASEdecl c => putSlot (asmCase, c)
           | DEBUGdecl id       => (debug := id . *debug)
           | PIPELINEdecl p     => putSlot (pipelines, p)
           | CPUdecl c          => putSlot (cpus, c)
           | RESOURCEdecl r     => putSlot (resources, r)
           | LATENCYdecl l      => putSlot (latencies, l)
           | _ => error "compile"

       and ddds [] = ()
         | ddds (d . ds) = (ddd d; ddds ds)

   in  error::init();
       ddds decls;
       md 
   end



   # Code Generation methods


   type module = String
   type arguments = List( String )
   type apiName = String

   infix ++

   my op ++ = pp.++

   toupper = string::map char::to_upper
   tolower = string::map char::to_lower

   fun signame md suffix = toupper (name md)$suffix
   fun strname md suffix = name md$suffix
   fun fctname md suffix = name md$suffix

   fun mkSigCon "" = pp::nop
     | mkSigCon an_api = pp::sp ++ pp.! ":" ++ pp.! an_api 

   fun make_api md name body =
       pp::line (pp.! "api" ++ pp.! (signame md name) ++ pp.! "=") ++
       pp::line (pp.! "sig") ++
       pp::block (RawSyntaxTreePP::decls body) ++
       pp::line (pp.! "end") ++ pp::nl

    fun make_generic' md name args an_api body =
       pp::line (pp.! "generic package" ++ pp.! (fctname md name) ++
               pp::group("(", ")") (RawSyntaxTreePP::decl args) ++
               mkSigCon an_api ++ pp.! "=") ++
       pp::line (pp.! "struct") ++
       pp::block (RawSyntaxTreePP::decls body) ++
       pp::line (pp.! "end") ++ pp::nl

   fun make_generic md name args an_api body
       =
       make_generic' md name (@@@ args) an_api body

   fun make_package md name an_api body =
       pp::line (pp.! "package" ++ pp.! (strname md name) ++ 
               mkSigCon an_api ++ pp.!"=") ++
       pp::line (pp.! "struct") ++
       pp::block (RawSyntaxTreePP::decls body) ++
       pp::line (pp.! "end") ++ pp::nl

   fun mkCode body = pp::block (RawSyntaxTreePP::decls body)


   fun pathName md module suffix =
       let fun getName m = 
           winix::path::cat (winix::path::dir m, tolower (name md)$winix::path::file m)
           pathname = winix::path::cat(
                        winix::path::dir (filename md), getName (module$suffix)) 
       in  pathname end
 
   #  Emit text into a file 
   fun outfile md module suffix text =
   if *errorCount > 0 then () else
   let file = pathName md module suffix
       #  file = moduleName (module$".sml")     # For testing 
       oldText =
           let stream = file::open_for_read file
           in  file::read_n (stream, 1024*1024) before file::close_input stream
           end except _ => ""
       header =
       "#\n" $
       "# WARNING: This file was automatically generated by mdl_g (v3.0)\n" $
       "# from the machine description file \""$(filename md)$"\".\n" $
       "# DO NOT EDIT this file directly\n" $
       "\n" $
       "\n\n"
       newText = header$text
   in  if *errorCount == 0 then 
          (print("   Generating module "$file$" ... ");
           if oldText != newText then
	   let dir = winix::path::dir file
	       winix::file::make_directory dir except _ => ()
	       stream = file::open file
           in  
	       file::write (stream, newText);
	       file::close stream;
	       print("done\n")
	   end
           else print("file is unchanged\n")
          )
       else ()
   end

   #  Emit code into a file 
   fun codegen md module code =
   let newText = pp::text (pp::setmode "code" ++ pp::cat code)
   in  outfile md module ".sml" newText
   end

   fun errorHandler md suffix = ERRORfun (strname md suffix)

   /* Emit a function that dispatches to subfunctions according to the
    * cell kind
    */
   fun mkQueryByCellKind md name =
   let cellKinds = cells md
       clientDefined =  
           list::filter (fn CELLdecl { id, alias, ... } =>
              not (not_null alias) andalso
              not (lowcode_definitions::isPredefinedCellKind id) andalso
              not (lowcode_definitions::isPseudoCellKind id)) cellKinds

       newlyDefined =
           case clientDefined of
             [] => [CLAUSE([WILDCARD_PATTERN], NULL, APPLY("error", STRING_CONSTANT_IN_EXPRESSION name))]
           | _  => 
              [CLAUSE([IDpat "k"], NULL,
                 fold_right (fn (CELLdecl { id, alias, ... }, e) =>
                    IF_EXPRESSION (APPLY("=", TUPLEexp[ID "k", IDexp (IDENT(["C"], id))]),
                          ID (name$id),
                          e))
                    (APPLY("error", STRING_CONSTANT_IN_EXPRESSION name)) clientDefined)
              ]

       predefined =
          fold_right (fn (CELLdecl { id, alias, ... }, c) =>
                 if lowcode_definitions::isPredefinedCellKind id andalso 
                    not (lowcode_definitions::isPseudoCellKind id) 
                 then 
                   CLAUSE([CONSpat (IDENT(["C"], id), NULL)], NULL,
                          case alias of 
                            NULL       => ID (name$id)
                          | THE alias => APPLY (name, IDexp (IDENT(["C"], alias)))
                         ) . c
                 else c
                ) newlyDefined cellKinds 

   in  FUNdecl[FUNbind (name, predefined)]
   end

   /*
    * Do everything on user defined cellkinds
    */
   fun forallUserCellKinds md f = 
        map f (list::filter (fn CELLdecl { id, alias, ... } =>
               not (lowcode_definitions::isPseudoCellKind id)
               andalso not (not_null alias)
              ) (cells md))


};
