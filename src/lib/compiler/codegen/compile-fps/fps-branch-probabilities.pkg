## fps-branch-probabilities.pkg

# Compiled by:
#     src/lib/compiler/core.make6


# Implements the following Ball Larus heuristic estimates 
# for branch prediction.
# 
# PH (pointer heuristic) 
#    boxed and unboxed tests
#
# OH (op-code heuristic) 
#    comparisons of <=0, =0, =constant will fail.
#
# RH (return heuristic)
#    block containing a return is unlikely
#    block with a goto is likely.
#
# Unlikely:
#    bounds check, raising an exception, <any others>



###             "The laws of probability,
###              so true in general, so
###              fallacious in particular."
###
###                   -- Edward Gibbon (1737-1794)
###                      [British historian]




api Fps_Branch_Probability {

    exception FPS_PROBABILITIES_TABLE;

    branch_prob
        :
        List( fate_passing_style::Function )
        ->
        (fate_passing_style::Highcode_Variable -> Null_Or( probability::Probability ) );
};




package fps_branch_prob: (weak)  Fps_Branch_Probability {		# Fps_Branch_Probability	is from   src/lib/compiler/codegen/compile-fps/fps-branch-probabilities.pkg

    package prob = probability;						# probability			is from   src/lib/compiler/lower/library/probability.pkg
    package fps  = fate_passing_style;					# fate_passing_style		is from   src/lib/compiler/upper/fps/fate-passing-style.pkg
    package p    = fps::p;						# 

    disable_fps_branch_probability_computation
       = 
       low_code_control::make_bool
	 ("disable_fps_branch_probability_computation",
	  "Turn FPS branch probability computation off");

    # keep track of variables that hold a:
    #	chunk length,
    #	fate, or
    #     handler/handler-code-pointer
    #
    Info
       = CHUNKLEN 			# Chunk length 
       | CONT 				# Fate 
       | HANDLER			# exception handler 
       | HANDLER_CODEPTR;			# exception handler code pointer 


    # Condensed FPS flow graph 
    #
    Condensed
      =	BLOCK				# ordinary code block 
      | RETURN				# Calls a fate 
      | ESCAPE				# makes a function call 
      | GOTO				# Call to known function 
      | RAISE				# raises an exception 
      | SWITCH  List( Condensed )
      | BRANCH
          ( fps::p::Branch,
            List( fps::Value ),
            fps::Highcode_Variable,
            Condensed,
            Condensed
          )
      ;

    exception INFO_TABLE;
    exception FPS_PROBABILITIES_TABLE;

    fun error msg
	=
	lowcode_error_message::error ("CpsBranchProb", msg);


    fun branch_prob fs
	=
	{   my info_table:   int_hash_table::Hash_Table( Info )
			= int_hash_table::make_table (32, INFO_TABLE);

	    insert_info = int_hash_table::set info_table;
	    find_info   = int_hash_table::find   info_table;


	    # "br_prob_table" == "branch_probability_table"...?

	    my br_prob_table:  int_hash_table::Hash_Table( prob::Probability )
			    =  int_hash_table::make_table (32, FPS_PROBABILITIES_TABLE);

	    fun build_info (fk, f, args, tys, e)
		=
		{   # Record how the function returns:

		    fun return ()
			= 
			case fk

			    fps::FATE
				=> 
				case args

				    _ ! stdcont ! _ => insert_info (stdcont, CONT);
				    _ => error "return";
				esac;

			   fps::ESCAPE
			       => 
			       case args

				   _ ! _ ! stdcont ! _ => insert_info (stdcont, CONT);
				   _ => error "escape";
			       esac;

			   _  => 
			     #  Check if any of the arguments has a fps::CNTT -- fate 
			     paired_lists::apply 
				 (fn (x, fps::CNTT) => insert_info (x, CONT);  _ => (); end )
				 (args, tys);
			esac;

		    fun cexp (fps::RECORD(_, _, _, e))
                            =>
                            cexp e;

			cexp (fps::SELECT (0, fps::VAR v, x, _, e))
			    =>
			    case (find_info v)

				 THE HANDLER =>   { insert_info (x, HANDLER_CODEPTR); cexp e;};
				 _           =>   cexp e;
			    esac;

			cexp (fps::SELECT(_, _, _, _, e)) =>   cexp e;
			cexp (fps::OFFSET(_, _, _,    e)) =>   cexp e;

			cexp (fps::APPLY (v, _))
			    => 
			    case v

				 fps::VAR v
				     => 
				     case (find_info v)

					  THE CONT         =>   RETURN;
					  THE HANDLER_CODEPTR =>   RAISE;
					  _                =>   ESCAPE;
				     esac;


				 fps::LABEL _ => GOTO;
				 _            => BLOCK;
			    esac;


			cexp (fps::SWITCH(_, _, cexps))              =>   SWITCH (list::map cexp cexps);
			cexp (fps::BRANCH (cc, args, x, t, f))       =>   BRANCH (cc, args, x, cexp t, cexp f);
			cexp (fps::SETTER(_, _, e))                  =>   cexp e;
			cexp (fps::LOOKER (p::GETHANDLER, [], x, _, e)) =>   { insert_info (x, HANDLER); cexp e;};
			cexp (fps::LOOKER(_, _, _, _, e))            =>   cexp e;
			cexp (fps::ARITH(_, _, _, _, e))             =>   cexp e;
			cexp (fps::RAW_C_CALL(_, _, _, _, _, e))     =>   cexp e;

			cexp (fps::PURE (pure, _, x, _, e))
			    => 
			    {   case pure

				     p::CHUNKLENGTH => insert_info (x, CHUNKLEN);
				     p::LENGTH      => insert_info (x, CHUNKLEN);
				     _              => ();
				esac;

				cexp e;
			    };

			cexp fix_ => error "cexp: FIX";
		   end;

		   return ();
		   cexp e; 
		};

	    # PH = 80 means that 80% of the time the prediction was a hit.
	    #  ... and similarly for the others.

	    ph = prob::percent 80;	not_ph = prob::not (ph);		#  "ph" == "pointer heuristic "
	    oh = prob::percent 84;	not_oh = prob::not (oh);		#  "oh" == "opcode heuristic":
	    rh = prob::percent 72;	not_rh = prob::not (rh);		#  "rh" == "return heuristic":

	    unlikely = prob::prob (1, 100);
	    likely   = prob::not (prob::likely);

	    fun assign (SWITCH cs)
		    =>
		    list::apply assign cs;

		assign (BRANCH (test, args, x, c1, c2))
		    =>
		    {
			fun ph_fn ()		#  ph == "pointer heuristic "
			    = 
			    case test

				p::BOXED   => THE ph;
				p::UNBOXED => THE not_ph;
				p::PEQL    => THE not_ph;
				p::PNEQ    => THE ph;
				_ => NULL;
			    esac;

			fun oh_fn ()		#  "oh" == "opcode heuristic":
			    =
			    {    Num = ZERO | NUM | OTHER;

				fun number (fps::INT     0) =>   ZERO;
				    number (fps::INT     _) =>   NUM;
				    number (fps::INT32 0u0) =>   ZERO;
				    number (fps::INT32   _) =>   NUM;
				    number (fps::REAL    r) =>   if (r == "0.0" ) ZERO; else NUM;fi;
				    number _                =>   OTHER;
				end;


				case  (test, args)

				    (p::CMP { oper, kind },   [v1, v2])
					=> 
					case (oper,  number v1,  number v2)

					    (p::LT, _, ZERO) =>  THE not_oh;
					    (p::LE, _, ZERO) =>  THE not_oh;
					    (p::EQL, _, NUM) =>  THE not_oh;

					    (p::LT, ZERO, _) =>  THE oh;
					    (p::LE, ZERO, _) =>  THE oh;
					    (p::EQL, NUM, _) =>  THE not_oh;


					    (p::GT, _, ZERO) =>  THE oh;
					    (p::GE, _, ZERO) =>  THE oh;
					    (p::NEQ, _, NUM) =>  THE oh;

					    (p::GT, ZERO, _) =>  THE not_oh;
					    (p::GE, ZERO, _) =>  THE not_oh;
					    (p::NEQ, NUM, _) =>  THE oh;

					    _                =>  NULL;

					 esac;


				    (p::FCMP { oper, size },   [v1, v2])
					=> 
				        # The wu-larus paper does not mention floating point,
				        # but what the hey ...
				        # Note that the negation of LT is UGL, so we wont
				        # bother with all those.				    
					#
					case (oper, number v1, number v2)

					    (p::F_LT, _, ZERO) =>   THE not_oh;
					    (p::F_LE, _, ZERO) =>   THE not_oh;
					    (p::F_EQ, _, NUM ) =>   THE not_oh;

					    (p::F_LT, ZERO, _) =>   THE oh;
					    (p::F_LE, ZERO, _) =>   THE oh;
					    (p::F_EQ, NUM,  _) =>   THE not_oh;

					    _ => NULL;
					esac;


				    _ => NULL;
			       esac;

			  };

			fun rh_fn ()		  # "rh" == "return heuristic":
			    = 
			    case (c1, c2)

				(RETURN, RETURN) => NULL;
				(RETURN, _)      => THE not_rh;
				(_, RETURN)      => THE rh;
				_                => NULL;
			    esac;

			fun raise_exn ()
			   =
			   case (c1, c2)

			       (RAISE, _) => THE unlikely;
			       (_, RAISE) => THE likely;
			       _          => NULL;
			   esac;


			fun bounds_check ()
			    = 
			    case  (test, args)

				(p::CMP { oper=> p::LT, kind=>p::UINT 31 }, [v1, fps::VAR v2])
				    =>
				    case ( find_info v2)

					THE CHUNKLEN => THE likely;
					_ => NULL;
				    esac;

				_ => NULL;
			    esac;


			fun combine (f, true_prob)
			   = 
			   case (f(), true_prob)

			       (NULL, NULL)       =>   NULL;
			       (NULL, p as THE _) =>   p;
			       (p as THE _, NULL) =>   p;

			       (THE taken_p, THE true_p)
				   => 
				   (THE (.t (probability::combine_prob2 { true_prob=>true_p, taken_prob=>taken_p } )))
				   except
				       e => {   print (sfprintf::sprintf' "TRUE=%s, taken=%s\n"
						   [sfprintf::STRING (probability::to_string true_p),
						    sfprintf::STRING (probability::to_string taken_p)]);
						raise exception e;
					    }; end ;
			   esac;


		       case (list::fold_left combine NULL [ph_fn, oh_fn, rh_fn, raise_exn, bounds_check])

			    THE prob =>   int_hash_table::set  br_prob_table  (x, prob);
			    NULL     =>   ();
		       esac;

		       assign (c1);
		       assign (c2);
		    };

	       assign _ => ();
	  end;



	      if *disable_fps_branch_probability_computation
		   (fn _ = NULL);
	      else
		   condensed = list::map build_info fs; 

		   list::apply assign condensed;
		   int_hash_table::find br_prob_table; 
	      fi;
	};
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
