## unparse-interactive-deep-syntax-declaration.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



# This is the original 1992 deep syntax unparser.
#
# It is used only by
#
#     src/lib/compiler/toplevel/interact/read-eval-print-loop-g.pkg
#
# for displaying results of interactive expression evaluation.
#
# Everywhere else we use the newer   unparse_deep_syntax   package from
#
#     src/lib/compiler/front/typechecker/print/unparse-deep-syntax.pkg
#


api Unparse_Interactive_Deep_Syntax_Declaration {

     unparse_declaration:  compiler_table_set::Compiler_Table_Set
                              -> prettyprint::Stream 
		              -> ( ( deep_syntax::Declaration,
                                     List( var_home::Highcode_Variable )	# Exported lambda variables
                                   )
                                 )
                              -> Void;

     debugging:  Ref(  Bool );

}; #  Api PPDEC 


# 2007-12-05 Crt:   I'm not sure how this package relates to
#
#                 src/lib/compiler/front/typechecker/print/unparse-deep-syntax.pkg
#
#             which also prints out deep syntax declarations.


package unparse_interactive_deep_syntax_declaration: (weak)  Unparse_Interactive_Deep_Syntax_Declaration {

    stipulate 

	package s  = symbol;				# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package ip = inverse_path;			# inverse_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package m  = module;				# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
	package v  = variables_and_constructors;	# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
        package pp= prettyprint;			# prettyprint			is from   src/lib/prettyprint/src/prettyprint.pkg

	include types;					# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
        include variables_and_constructors;		# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
        include module;					# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
        include symbol_table_entry;			# symbol_table_entry		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg
        include fixity;					# fixity			is from   src/lib/compiler/front/basics/mlcomp/fixity.pkg
        include deep_syntax;				# deep_syntax			is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.pkg
        include prettyprint;				# prettyprint			is from   src/lib/prettyprint/src/prettyprint.pkg
        include unparse_stuff;				# unparse_stuff			is from   src/lib/compiler/front/typechecker/print/unparse-stuff.pkg
        include unparse_type;				# unparse_type			is from   src/lib/compiler/front/typechecker/print/unparse-type.pkg
        include unparse_chunk;				# unparse_chunk			is from   src/lib/compiler/src/print/unparse-chunk.pkg
        include var_home;				# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg

    herein 

	#  Debugging 
	say         =   controls::print::say;
	debugging   =   REF FALSE;
	#
	fun if_debugging_say (msg: String)
            =
	    if *debugging
                 say msg;
                 say "\n";
            fi;
	#
	fun bug msg
            =
            error_message::impossible("PPDec: " + msg);


	show_interactive_result_types = mythryl_parser::show_interactive_result_types;

	Chunk   =   unsafe::unsafe_chunk::Chunk;

	apis           =  controls::print::apis;
	print_includes =  controls::print::print_includes;
	print_depth    =  controls::print::print_depth;
	anon_sym       =  s::make_package_symbol "<anonymous_api>";
	anon_fsym      =  s::make_generic_symbol "<anonymous_generic_api>";
	#
	fun pplist_nl stream pr
	    =
	    unparse
            where

	        fun unparse []          =>  ();
		    unparse [el]        =>  pr el;

		    unparse (el ! rest) =>  {   pr el;
                                                pp::newline stream;
                                                unparse rest;
                                            };
                end;
	    end;

	#
	fun by f x y
            =
            f y x;

	#
	fun extract (v, pos)
            =
            unsafe::unsafe_chunk::nth (v, pos);


	exception OVERLOAD;


					# compiler_table_set		is from   src/lib/compiler/toplevel/compiler-state/compiler-table-set.pkg
					# deep_syntax			is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.pkg


        # Compare with   unparse_declaration   from
        #
        #     src/lib/compiler/front/typechecker/print/unparse-deep-syntax.pkg
        #
	# We (only) get invoked from
	#
	#     src/lib/compiler/toplevel/interact/read-eval-print-loop-g.pkg
	#
	# to print out the result of each
        # interactively evaluated expression:
	#
	fun unparse_declaration

                ( { symbol_table, linking_table, ... }: compiler_table_set::Compiler_Table_Set)

	        (stream: pp::Stream)

                (   declaration: deep_syntax::Declaration,
                    exported_highcode_variables
                )
	    =
	    {   declaration = /* prune_declaration */ declaration;

		# Return TRUE iff x is in given
                # list of lambda variables:
		#
		fun is_export ( x:  var_home::Highcode_Variable,
                                []
                              )
                        =>
                        FALSE;

		    is_export ( x,
                                a ! r
                              )
                        =>
                        x == a   ??   TRUE
                                 ::   is_export (x, r);
                end;

		pps   =   pp::string stream;


		# Get the type of the bound variable
		# from symbol_table, since the stamps
                # in the deep_syntax_tree haven't been
                # converted by the pickler:
		#
		fun true_val_type path
		    =
		    {   report_error
                            =
                            fn _ = fn _ = fn _ = (bug "true_val_type: unbound");
		    
			case path
			  
			     symbol_path::SYMBOL_PATH [id]
			         =>
			         case (find_in_symbol_table::find_value_by_symbol
                                          (
                                            symbol_table,
                                            id,
                                            report_error
                                          ))
				   
				     v::VARIABLE (v::ORDINARY_VARIABLE { var_type, ... } )
                                         =>
                                         *var_type;

				     v::VARIABLE (v::OVERLOADED_IDENTIFIER { name, type_scheme, ... } )
					 =>
					 {   print ("#true_val_type: OVERLOADED_IDENTIFIER" + symbol::name name + "\n");
					     raise exception OVERLOAD;
                                         };

				     v::VARIABLE (v::ERRORVAR)
                                         =>
                                         bug "true_val_type: ERRORVAR\n";

				     v::CONSTRUCTOR (ENUM_CONSTRUCTOR { symbol, ... } )
					 =>
					 bug ("true_val_type: ENUM_CONSTRUCTOR" + symbol::name symbol + "\n");
                                  esac;

			     _   =>
                                 bug "true_val_type: not singleton path";
                        esac;
		    };

		#
		fun true_tycon (path: ip::Inverse_Path)		# "tycon" == "type constructor"
		    =
		    {   report_error
                            =
                            fn _ = fn _ = fn _ = (bug "true_tycon: unbound ");
		    
			case (find_in_symbol_table::find_type_constructor_via_symbol_path
                                 (
                                   symbol_table,
                                   invert_path::invert_ipath  path,
                                   report_error
                                 ))
			  
			    DEFINED_TYPE_CONSTRUCTOR x =>  THE x;
			    _              =>  NULL;
                        esac;
		    };
		#
		fun is_lazy_bogus (symbol_path::SYMBOL_PATH  path)
		    =
		    case (reverse  (string::explode  (symbol::name  (list::last  path))))
		       
		        '$' ! ',' ! _ =>  TRUE;
		        _             =>  FALSE;
                    esac;

		#
		fun unparse_variable

                        (ORDINARY_VARIABLE
                            { path,
                              var_home,
                              var_type => (t0 as REF type),
                              inlining_info
                            }
                        )
			=>
			if   (not (is_lazy_bogus path))
			     
			     begin_horizontal_else_vertical_box stream;
			     begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
#
# 2008-01-03 CrT: Commented out some stuff here as a quick and dirty way of
#                 simplifying interactive result printing from the irritatingly verbose
#                     my it = 4 : int
#                 to nice simple
#                     4
#                 Need to do something cleaner by and by. XXX BUGGO FIXME
#
#			     pp::string stream "my "; 
#			     unparse_symbol_path stream path; 
#			     pp::string stream " =";
#			     break stream { spaces=>1, indent_on_wrap=>0 };

			     case var_home
			       
			          HIGHCODE_VARIABLE lv
                                      =>
				      case (symbol_table::get
                                               (
                                                  symbol_table,
                                                  symbol_path::last  path
                                               ))
				        
                                           NAMED_VARIABLE (ORDINARY_VARIABLE { var_home=>PATH (EXTERN pid, pos), ... } )
					       =>
					       if   (is_export (lv, exported_highcode_variables))
					           
                                                    chunkv = the (linking_table::get  linking_table  pid);
						    chunk  = extract (chunkv, pos);

						    unparse_chunk symbol_table stream 
							   (chunk, type, *print_depth);

						    if  *show_interactive_result_types

							# In interactive response to 'eval: 2+2;'
							# print '4: Int' instead of just '4':

							break stream { spaces=>1, indent_on_wrap=>0 };
							pp::string stream ": "; 

							unparse_type  symbol_table  stream
							    ( true_val_type path 
							      except OVERLOAD = type
							    );
						    fi;
					       else
                                                    pp::string stream "<hidden-value>";
						    break stream { spaces=>1, indent_on_wrap=>0 };
						    pp::string stream ": "; 
						    unparse_type  symbol_table  stream  type;
                                               fi;

				           _   =>
                                               pp::string stream "<PPDec::get_val failure>";
                                      esac;

			          # ** | PRIMOP _ => pp::string stream "<primitive_operation>" 

				  _   =>
                                      error_message::impossible "src/lib/compiler/src/print/unparse-interactive-deep-syntax-declaration.pkg: bug";
                             esac;

			     end_box stream;
			     end_box stream;
#			     pp::newline stream;
                        fi;

		    unparse_variable _ => ();
                end;

		#
		fun unparse_named_value (NAMED_VALUE { pattern, ... } )
		    =
		    unparse_bind pattern
		    where 
			#
		        fun unparse_bind (pattern)
                            =
			    case pattern
			      
			         VARIABLE_IN_PATTERN v                =>  unparse_variable v;
				 RECORD_PATTERN { fields, ... }         =>  apply (unparse_bind o #2) fields;
				 VECTOR_PATTERN (pats, _)             =>  apply unparse_bind pats;
				 APPLY_PATTERN(_, _, pattern)         =>  unparse_bind pattern;
				 TYPE_CONSTRAINT_PATTERN (pattern, _) =>  unparse_bind pattern;
				 OR_PATTERN (p1, _)                   =>  unparse_bind p1;
				 AS_PATTERN (pattern1, pattern2)      =>  {   unparse_bind pattern1;
                                                                              unparse_bind pattern2;
                                                                          };
				 _ => ();
                            esac;
		    
		    end

		also
		fun unparse_named_recursive_values (NAMED_RECURSIVE_VALUES { variable=>var, ... } )
                    =
                    unparse_variable var

		also
		fun unparse_named_type (DEFINED_TYPE_CONSTRUCTOR dt)
			=>
			{   my { path, type_scheme=>TYPE_SCHEME { arity, body }, ... }
				=
				the_else (true_tycon dt.path, dt);

			    begin_horizontal_else_vertical_box stream;
			    begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
			    pp::string stream "type"; 
			    unparse_symbol stream (inverse_path::last path); 
			    unparse_formals stream arity; 
			    pp::string stream " ="; 
			    break stream { spaces=>1, indent_on_wrap=>0 };
			    unparse_type  symbol_table  stream  body;
			    end_box stream;
			    end_box stream;
			    pp::newline stream;
			};

		    unparse_named_type _
                        =>
                        bug "unparse_named_type: DEFINED_TYPE_CONSTRUCTOR";
                end 

		also
		fun unparse_abstract_type (PRIMITIVE_TYPE_CONSTRUCTOR { path, arity, eq, ... } )
			=>
			case *eq
			  
			     EQ_ABSTRACT
                                 =>
				 {   begin_horizontal_else_vertical_box stream;
				     begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
				     pp::string stream "type"; 
				     unparse_symbol stream (inverse_path::last path); 
				     unparse_formals stream arity; 
				     end_box stream;
				     end_box stream;
				     pp::newline stream;
				 };

			     _   => 
				 {   begin_horizontal_else_vertical_box stream;
				     begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
				     pp::string stream "type"; 
				     unparse_symbol stream (inverse_path::last path); 
				     unparse_formals stream arity; 
				     end_box stream;
				     end_box stream;
				     pp::newline stream;
				 };
		       esac;

		    unparse_abstract_type _
			=>
			bug "unexpected case in unparse_abstract_type";
		end 

		also
		fun unparse_constructor (PRIMITIVE_TYPE_CONSTRUCTOR { path, arity,
					kind => DATATYPE { index, free_type_constructors,
							family=> { members, ... }, ... },
					... } )
			=>
			{   fun unparse_constructor' NIL
				    =>
				    ();

				unparse_constructor' (first ! rest)
				    =>
				    {   fun unparse_dcon ( { name, domain, representation } )
					    =
					    {   unparse_symbol stream name; 

						case domain
						  
						     THE dom
							 =>
							 {
#                                                             pp::string stream " of ";
							     unparse_enum_constructor_domain (members, free_type_constructors)
							     symbol_table stream dom;
							 };

						     NULL => ();
						esac;
					    };

					pp::string stream "= "; unparse_dcon first;

					apply
					    (fn d = {  break stream { spaces=>1, indent_on_wrap=>0 };
						       pp::string stream "| "; unparse_dcon d;
						    }
					    )
					    rest;
				    };
			    end;

			    my { type_constructor_name, constructor_list, ... }
				=
				vector::get (members, index);

			    begin_horizontal_else_vertical_box stream;
			    begin_horizontal_else_vertical_box stream;
#			    pp::string stream "enum";
			    unparse_symbol stream (inverse_path::last path); 
			    unparse_formals stream arity; 
			    break stream { spaces=>1, indent_on_wrap=>2 };
			    begin_horizontal_else_vertical_box stream;
			    unparse_constructor' constructor_list;
			    end_box stream;
			    end_box stream;
			    end_box stream;
			    pp::newline stream;
			};

		    unparse_constructor _
			=>
			bug "unexpected case in prettyprintDataTypeConstructor";
		end 

		also
		fun unparse_named_exception (
			NAMED_EXCEPTION {
			    exception_constructor => ENUM_CONSTRUCTOR { symbol, ... },
			    exception_type        => etype,
			    ...
			}
		    )
			=>
			{    begin_horizontal_else_vertical_box stream;
			     begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
			     pp::string stream "exception "; 
			     unparse_symbol  stream  symbol;

			     case etype
			       
			          NULL => ();

				  THE type'
                                      => 
				      {
#                                         pp::string stream " of"; 
					  break stream { spaces=>1, indent_on_wrap=>0 };
					  unparse_type  symbol_table  stream  type';
                                      };
                             esac;

			     end_box stream;
			     end_box stream;
			     pp::newline stream;
			};

		    unparse_named_exception (
			DUPLICATE_NAMED_EXCEPTION {
			    exception_constructor => ENUM_CONSTRUCTOR { symbol, ... },
			    equal_to => ENUM_CONSTRUCTOR { symbol => dname, ... }	# dname == "duplicate name", likely.
			}
		    )
			=>
			{   begin_horizontal_else_vertical_box stream;
			    begin_indented_wrap_box stream (pp::CURSOR_RELATIVE 2);
			    pp::string stream "exception "; 
			    unparse_symbol  stream  symbol;
			    pp::string stream " ="; 
			    break stream { spaces=>1, indent_on_wrap=>0 };
			    unparse_symbol stream dname;
			    end_box stream;
			    end_box stream;
			    pp::newline stream;
			};
		end 

		also
		fun unparse_named_package is_absolute ( NAMED_PACKAGE { name_symbol=>name, a_package=>str, ... } ) #  is_absolute strvar 
		    =            
		    {   begin_horizontal_else_vertical_box stream;
			begin_horizontal_else_vertical_box stream;
			pps "package ";
			unparse_symbol stream name;
			pps " :";
			break stream { spaces=>1, indent_on_wrap=>2 };
			unparse_package_language::unparse_package stream (str, symbol_table,*apis);
			end_box stream;
			end_box stream;
			pp::newline stream;
		    }

		also
		fun unparse_named_generic (NAMED_GENERIC { name_symbol=>name, a_generic=>fct, ... } )
		    =
		    {   begin_horizontal_else_vertical_box stream;
			pps "generic package ";
			unparse_symbol stream name;
			case fct   
			    m::GENERIC { a_generic_api, ... }
                                =>
			        unparse_package_language::unparse_generic_api stream (a_generic_api, symbol_table, *apis);
			   _ => pps " : <api>";  #  Blume: cannot (?) happen 
                         esac;
			end_box stream;
			pp::newline stream;
		    }

		also
		fun unparse_sigb an_api
		    = 
		    {   name = case an_api 
			         
				    m::API { name, ... } => the_else (name, anon_sym);
				    _ => anon_sym;
			       esac;

			{   begin_horizontal_else_vertical_box stream;
			    begin_horizontal_else_vertical_box stream;
			    pps "api "; unparse_symbol stream name; pps " =";
			    break stream { spaces=>1, indent_on_wrap=>2 };
			    unparse_package_language::unparse_api stream (an_api, symbol_table,*apis);
			    end_box stream;
			    end_box stream;
			    pp::newline stream;
			};
		    }

		also
		fun unparse_generic_api_naming fsig
		    = 
		    {   name = case fsig 
			         
				    m::GENERIC_API { kind=>THE s, ... }
					=>
					s;

				    _   =>
					anon_fsym;
			       esac;

			begin_horizontal_else_vertical_box stream;
			pps "funsig "; unparse_symbol stream name; 
			unparse_package_language::unparse_generic_api stream (fsig, symbol_table,*apis);
			end_box stream;
			pp::newline stream;
		    }

		also
		fun unparse_fixity { fixity, ops }
		    =
		    {   begin_horizontal_else_vertical_box stream;
			begin_horizontal_else_vertical_box stream;
			pp::string stream (fixity::fixity_to_string fixity);
			unparse_stuff::unparse_sequence stream { sep=>by break { spaces=>1, indent_on_wrap=>0 },
					       pr=>unparse_stuff::unparse_symbol,
					       style=>INCONSISTENT }
				       ops;
			end_box stream;
			end_box stream;
			pp::newline stream;		       
		    }

		also
		fun unparse_open (path_strs)
		    =  
		    if *print_includes

			  begin_horizontal_else_vertical_box stream;

			  apply
                              (fn (path, str)
                                  =
				  unparse_package_language::unparse_open
                                      stream 
                                      (path, str, symbol_table, *apis)
                              )
			      path_strs;

			 end_box stream;
		    else
			  begin_horizontal_else_vertical_box stream;
			  begin_horizontal_else_vertical_box stream;
			  pp::string stream "use ";

			  unparse_sequence
                              stream
                              { sep   => by break { spaces=>1, indent_on_wrap=>0 },
				style => INCONSISTENT,
				pr    => (fn stream = fn (path, _)
				             =
                                             unparse_symbol_path stream path)
                              }
			      path_strs;

			  end_box stream;
			  end_box stream;
			  pp::newline stream;		       
		    fi

		also
		fun unparse_declaration0 declaration
		    =
		    case { reset_unparse_type ();   declaration;}
		      
			 VALUE_DECLARATIONS            vbs               =>  apply unparse_named_value              vbs;
			 RECURSIVE_VALUE_DECLARATIONS  rvbs              =>  apply unparse_named_recursive_values   rvbs;
			 TYPE_DECLARATIONS             tbs               =>  apply unparse_named_type               tbs;
			 EXCEPTION_DECLARATIONS        ebs               =>  apply unparse_named_exception          ebs;
			 PACKAGE_DECLARATIONS          named_packages    =>  apply (unparse_named_package FALSE)    named_packages;
			 GENERIC_DECLARATIONS          named_generics    =>  apply unparse_named_generic            named_generics;
			 API_DECLARATIONS              named_apis        =>  apply unparse_sigb                     named_apis;
			 GENERIC_API_DECLARATIONS      fsigbs            =>  apply unparse_generic_api_naming       fsigbs;
			 LOCAL_DECLARATIONS            (dec_in, dec_out) =>  unparse_declaration0                   dec_out;
			 FIXITY_DECLARATION            fixd              =>  unparse_fixity                         fixd;
			 INCLUDE_DECLARATIONS              path_strs         =>  unparse_open                           path_strs;

			 ENUM_DECLARATIONS { datatype_constructors, with_type_constructors }
                             =>
			     {   apply unparse_constructor datatype_constructors; 
			         apply unparse_named_type with_type_constructors;
                             };

			 ABSTRACT_TYPE_DECLARATION { abstract_type_constructors, with_type_constructors, body }
                             =>
			     {   apply unparse_abstract_type  abstract_type_constructors;
			         apply unparse_named_type  with_type_constructors;
			         unparse_declaration0 body;
                             };

			 SEQUENTIAL_DECLARATIONS decs
                             => 
			     case decs
			       
			          INCLUDE_DECLARATIONS path_strs ! rest
                                      =>
				      unparse_open path_strs;

				  _   =>
                                      apply unparse_declaration0 decs;
                             esac;

			 OVERLOADED_VARIABLE_DECLARATION _
                             => 
			     {   pp::string stream "overloaded val";
                                 pp::newline stream;
                             };

			 SOURCE_CODE_REGION_FOR_DECLARATION (declaration, _)
                             =>
                             unparse_declaration0 declaration;
		    esac;

		begin_horizontal_else_vertical_box stream;
		unparse_declaration0 declaration;
		end_box stream;
		flush_stream stream;
	    };                       #  unparse_declaration 

    end;	#  stipulate
};		#  package unparse_interactive_deep_syntax_declaration


















##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
