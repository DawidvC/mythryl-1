## lib7-pseudo-ops-g.pkg -- pseudo ops

# Compiled by:
#     src/lib/compiler/core.make6

# We are invoked from:
#
#     src/lib/compiler/codegen/ppc/ppc-codetree.pkg
#     src/lib/compiler/codegen/sun/sparc-codetree.pkg
#     src/lib/compiler/codegen/x86/x86-codetree.pkg

generic package lib7_pseudo_op_g (

    package asm:  Pseudo_Ops_Basis;			# Pseudo_Ops_Basis	is from   src/lib/compiler/lower/flowgraph/pseudo-op-basis.api

)

: (weak) Lib7_Pseudo_Ops				# Lib7_Pseudo_Ops	is from   src/lib/compiler/codegen/compile-fps/pseudo-op.api

{
    package asm_pseudo_ops = asm;
    package w= unt;					# unt			is from   src/lib/std/unt.pkg
    package pb= pseudo_op_basis_type;			# pseudo_op_basis_type	is from   src/lib/compiler/lower/flowgraph/pseudo-op-basis-type.pkg
    package t = asm::codetree;

    Lib7_Pseudo_Op
      = JUMPTABLE  { base: label::Label, targets: List( label::Label ) }
      | FILENAME  String;

    Pseudo_Op
	 =
	 Lib7_Pseudo_Op;

    fun to_basis (JUMPTABLE { base, targets } )
	    =>
	    {   fun target_offset t
		    =
		    t::SUB (32, t::LABEL t, t::LABEL base);

		fun pseudo_op_off lab
		    =
		    pb::INT { size=>32, i => [t::LABEXP (target_offset lab)] };

		pb::ALIGN_SIZE 2 !
		   pb::DATA_LABEL base !
		     list::fold_right
                         (fn (target, acc) = pseudo_op_off target ! acc)
                         []
                         targets;
	    };

        to_basis (FILENAME file)
	    =>
	    {   fun int_8 n
		    =
		    pb::INT { size=>8, i=> [t::LITERAL (t::machine_int::from_int (8, n))] };

		# Adjust for zero termination and
                # last byte containing the length: 
		#
		len =   unt::from_int (string::length file) + 0u2;

		k4  =   unt::bitwise_and (len + 0u3, unt::bitwise_not 0u3);

		fun pad 0u0 =>   [int_8 (unt::to_int (unt::(>>) (k4, 0u2)))];
		    pad n   =>    int_8 (0) ! pad (n - 0u1);
                end;

		pb::ALIGN_SIZE 2 ! pb::ASCIIZ (file) ! pad (k4-len); 
	    };
    end;

    fun to_string p_op
	= 
	string::cat(
	  list::fold_right 
	    (fn (p, acc) =  asm_pseudo_ops::to_string p + "\n" ! acc) 
	    []
            (to_basis p_op)
        );

    fun emit_value { p_op, loc, emit }
	=
	{   pb =   to_basis p_op;

	    fun output (p, loc)
		= 
		{   asm_pseudo_ops::emit_value { p_op=>p, loc, emit };
		    loc + asm_pseudo_ops::size_of (p, loc);
		};

	    list::fold_left output loc (to_basis p_op);

	    ();
	};

    fun size_of (p_op, loc)
	= 
	list::fold_left 
	    (fn (p, a) = a + asm_pseudo_ops::size_of (p, loc)) 
	    0
	    (to_basis p_op);

    fun adjust_labels (JUMPTABLE { base, ... }, loc)
	    =>
	    {   base_addr
		    =
		    loc + asm_pseudo_ops::size_of (pb::ALIGN_SIZE 2, loc);

		if   (label::addr_of base == base_addr)
		    
		     FALSE;
		else
		     label::set_addr (base, base_addr);
		     TRUE;
		fi;
	    };

        adjust_labels (FILENAME _, _)
            =>
            FALSE;
    end;

};



## COPYRIGHT (c) 2001 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
