## syscall.pkg
## COPYRIGHT (c) 1996 AT&T Research.




# Some system calls may take a long time to complete and may
# be interrupted by timer signals before they complete.  This
# module implements mechanisms to protect against this problem.


package syscall:  api

    my isIntr:  winix::System_Error -> Bool

    my doSyscall:  (X -> Y) -> X -> Y
	#  Do a system call, and restart if it is interrupted 

    my doAtomicSyscall:  (X -> Y) -> X -> Y
	#  Do a system call with timer signals masked 

  end
{

    package s = scheduler

    fun isIntr err = FALSE #  TOFIX: this'll break... (err = posix::error::intr) 

    fun doAtomicSyscall f x = let
	  s::stopTimer()
	  y = (f x) except ex => (s::restartTimer(); raise exception ex)
	  in
	    s::restartTimer(); y
	  end

    fun doSyscall f x = let
	  fun try 0 = doAtomicSyscall f x
	    | try n = ((f x)
		except (ex as winix::SYSTEM_ERROR(_, THE err)) =>
		  if isIntr err then try (n - 1) else raise exception ex)
	  in
	    try 3
	  end

};



## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
