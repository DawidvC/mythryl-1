## control-index.pkg

# Compiled by:
#     src/lib/controls/controls-lib.make6


package control_index: (weak)  Control_Index			# Control_Index	is from   src/lib/controls/control-index.api
{

    package rep    =  control_reps;				# control_reps			is from   src/lib/controls/control-reps.pkg
    package cset   =  control_set;				# control_set			is from   src/lib/controls/control-set.pkg
    package atable =  quickstring_hash_table;			# quickstring_hash_table	is from   src/lib/src/quickstring-hash-table.pkg

    Control_Info
	=
	{ dictionary_name:  Null_Or( String ) };

    Control_Set
        =
        rep::Control_Set( String, Control_Info ); 

    Control_Index
        =
        CONTROL_INDEX  {
	  help:         String,					#  registry's description 
	  control_set:  Control_Set,				#  Controls in this registry 
	  q_regs:       atable::Hash_Table( Subindex ),		#  qualified sub-registries 
	  u_regs:       Ref(  List(  Subindex ) )		#  unqualified sub-registries 
        }

    also
    Subindex
        =
        SUB_REGISTRY  {
	  prefix:  Null_Or( String ),		#  the key for qualified registries 
	  priority:  control::Priority,		#  Control's priority 
	  obscurity:  Int,			#  registry's detail level; higher means 
						#  more obscure 
	  reg:  Control_Index
      };

    fun make { help }
        =
        CONTROL_INDEX {
	    help,
	    control_set =>  cset::make (),
	    q_regs      =>  atable::make_table (8, FAIL "qualified registries"),
	    u_regs      =>  REF []
	  };


    # Register a control:
    #
    fun note_control (CONTROL_INDEX { control_set, ... } ) { control, dictionary_name }
        =
	cset::set (control_set, control, { dictionary_name } );



    # Register a set of controls:
    #
    fun note_control_set (CONTROL_INDEX { control_set, ... } ) { control_set=>cs, make_dictionary_name }
        =
        {   fun insert { control, info }
                =
		cset::set (control_set, control, { dictionary_name=>make_dictionary_name (control::name control) } );
	  
	    cset::apply insert cs;
	};



    # Nest a registry inside another registry:
    #
    fun note_subindex (CONTROL_INDEX { u_regs, q_regs, ... } ) { prefix, pri, obscurity, reg }
        =
        {   sub_reg
                =
                SUB_REGISTRY {
		  prefix,
		  priority => pri,
		  obscurity,
		  reg
		};
	  
	    case prefix
	      
	         NULL
                     =>
                     u_regs :=  sub_reg ! *u_regs;

	         THE qual
                     =>
                     atable::set  q_regs  (quickstring::from_string qual, sub_reg);
            esac;
	};

    fun find_control reg (path:  List( String ))
        =
	find (reg,   list::map  quickstring::from_string  path)
        where

            fun find (_, [])
                    =>
                    NULL;

	        find (CONTROL_INDEX { control_set, u_regs, ... }, [name])
                    =>
		    case (cset::find (control_set, name))
		      
		         THE { control, ... } =>  THE control;
		         NULL                =>  find_in_list (*u_regs, [name]);
                    esac;

	        find (CONTROL_INDEX { q_regs, u_regs, ... }, prefix ! r)
                    =>
		    case (atable::find q_regs prefix)
		      
		         NULL
                             =>
                             find_in_list (*u_regs, prefix ! r);

		         THE (SUB_REGISTRY { reg, ... } )
                             =>
                             case (find (reg, r))
		               
		                  NULL     =>  find_in_list (*u_regs, prefix ! r);
			          some_ctl =>  some_ctl;
                             esac;
                    esac;

	    end

	    also
	    fun find_in_list ([], _)
                    =>
                    NULL;

	        find_in_list (SUB_REGISTRY { reg, ... } ! r, path)
                    =>
                    case (find (reg, path))
		      
		         NULL     =>  find_in_list (r, path);
		         some_ctl =>  some_ctl;
                    esac;
	    end;
	end;


    # Initialize the control values in the
    # registry from the unix environment,
    # e.g. cm::foo from CM_FOO
    #
    fun set_up_controls_from_unix_environment (CONTROL_INDEX { control_set, q_regs, u_regs, ... } )
        =
        {   fun set_up_control { control, info=> { dictionary_name=>THE var }}
		    =>
		    case (winix::process::get_env var)
		      
			 THE value =>  control::set (control, value);
			 NULL      =>  ();
		    esac;

	        set_up_control _ => ();
	    end;

	    fun set_up_subindex (SUB_REGISTRY { reg, ... } )
		=
		set_up_controls_from_unix_environment
                    reg;

	    cset::apply   set_up_control       control_set;
	    atable::apply set_up_subindex   q_regs;
	    list::apply   set_up_subindex  *u_regs;
	};

    Index_Tree
        =
	INDEX_TREE  {
	    path:          List( String ),
	    help:          String,
	    subregs:       List( Index_Tree ),

	    control_set:   List { control: control::Control( String ),
                                  info:    Control_Info
                                }
	};

    sort_subregs
        =
	list_mergesort::sort

	    (fn ( SUB_REGISTRY { priority=>p1, ... },
                  SUB_REGISTRY { priority=>p2, ... }
                )
                =
	        rep::priority_gt (p1, p2)
            );

    fun controls (root, obs)
        =
	get_tree ([], root)
        where

	    gather
                =
                case obs
		   
		     NULL    =>  (!);
		     THE obs =>  (fn (x as SUB_REGISTRY { obscurity, ... }, l)
                                      =
			              if (obscurity < obs  )   x ! l;
                                      else                         l;
                                      fi
                                 );
                esac;


            #  A function to build a list of subregistries,
            # filtering by obscurity:
	    #
	    fun get_tree (path, root as CONTROL_INDEX { help, control_set, q_regs, u_regs, ... } )
		=
		INDEX_TREE {
		    help,
		    path        => list::reverse  path,
		    subregs     => list::map  get_reg  subregs,
		    control_set => case obs
				     
					NULL    =>  control_set::list_controls    control_set;
					THE obs =>  control_set::list_controls'  (control_set, obs);
				   esac
		}
                where

		    subregs
                        =
			list::fold_left  gather  (atable::fold gather [] q_regs)  *u_regs;

		    subregs
                        =
                        sort_subregs  subregs;

		    fun get_reg (SUB_REGISTRY { prefix=>THE prefix, reg, ... } )
			    =>
			    get_tree (prefix ! path, reg);

			get_reg (SUB_REGISTRY { reg, ... } )
                            =>
                            get_tree (path, reg);
		    end;
		end;
	end;
};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.

##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
