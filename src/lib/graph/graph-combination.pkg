# This module implements some combinators that joins two graphs
# into a single view.

# Compiled by:
#     src/lib/graph/graphs.make6



###            "Life is the art of
###             drawing sufficient conclusions
###             from insufficient premises."
###
###                          -- Samuel Butler 1900



package graph_combination: (weak)  Graph_Combination		# Graph_Combination	is from   src/lib/graph/graph-combination.api
{
    package g      = graph;					# graph			is from   src/lib/graph/graph.pkg
    package union  = union_graph_view;				# union_graph_view	is from   src/lib/graph/uniongraph.pkg
    package rename = renamed_graph_view;			# renamed_graph_view	is from   src/lib/graph/renamed-graph-view.pkg
    package rev    = reversed_graph_view;			# reversed_graph_view	is from   src/lib/graph/revgraph.pkg


    # Disjoint union
    #
    fun my_union (a, b)
        =
        union::union_view (fn (x, y) => x; end ) (a, b);


    fun sum (graph_a as g::GRAPH a,
             graph_b as g::GRAPH b
            )
	=
	my_union (graph_a, rename::rename_view (a.capacity ()) graph_b);

    fun union []      => raise exception g::BAD_GRAPH "union";
	union [a]     => a;
	union [a, b]  => my_union (a, b);
	union (a ! b) => my_union (a, union b);
    end;

    fun sums []      => raise exception g::BAD_GRAPH "sums";
	sums [a]     => a;
	sums [a, b]  => sum (a, b);
	sums (a ! b) => sum (a, sums b);
    end;
};

