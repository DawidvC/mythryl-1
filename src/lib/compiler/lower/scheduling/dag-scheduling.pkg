#
# A region based scheduler.
#
# -- Allen Leung


generic package DAGScheduling
   (package ListScheduler:  LIST_SCHEDULER
    package DDGBuilder:     SCHEDULER_DDG_BUILDER
    package Ranks:          SCHEDULING_RANKS
                                where type edge = DDGBuilder::DDG::edge
    package viewer:         GLOBAL_SCHEDULER_DDG_VIEWER
       sharing DDGBuilder::DDG = ListScheduler::DDG = Ranks::DDG
       sharing DDGBuilder::control_flow_graph = ListScheduler::control_flow_graph
       sharing Viewer::IR = ListScheduler::IR
       sharing Viewer::DDG = DDGBuilder::DDG
   ) : GLOBAL_SCHEDULING_ALGORITHM =
pkg
   package ir  = ListScheduler::IR
   package control_flow_graph = ListScheduler::control_flow_graph
   package ddg = ListScheduler::DDG
   package g   = graph

   i2s = int::to_string

   view_IR = LowCodeControl::getFlag "view-IR"

   fun schedule cpu_info { ir, region, numberOfInstructions, blockIdTable } = 
   let my DDG as g::GRAPH ddg = 
           DDGBuilder::buildDDG { cpu_info=cpu_info, 
                                cfg=region, blockIdTable=blockIdTable,
                                numberOfInstructions=numberOfInstructions }
       print("V (ddg)="$i2s (ddg.order ()) $
                     " E (ddg)="$i2s (ddg.size ())$"\n")
       if *view_IR then Viewer::view ir DDG else ()
       ranking = Ranks::rank DDG
   in  ListScheduler::listScheduler
          { cpu_info=cpu_info, 
           blockIdTable=blockIdTable,
           cfg=ir, 
           region=region, 
           ddg=DDG, 
           ranking=ranking
          } 
   end

end
