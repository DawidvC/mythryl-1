## highcode-dictionary.pkg 

# Compiled by:
#     src/lib/compiler/core.make6


###         "I will not go so far as to say that to construct
###          a history of thought without profound study of
###          the mathematical ideas of successive epochs is
###          like omitting Hamlet from the play which is
###          named after him. 
###
###         "But it is certainly analogous to cutting out
###          the part of Ophelia. This simile is singularly exact.
###          For Ophelia is quite essential to the play,
###          she is very charming -- and a little mad."
###
###                   --  Alfred North Whitehead (1861-1947)
###                       [English philosopher and mathematician]


api Highcode_Dictionary {

    Highcode_Type_Constructor = highcode_guts::Highcode_Type_Constructor;
    Highcode_Type   = highcode_guts::Highcode_Type;

    tmemo_fn:  { tcf:  (Highcode_Type_Constructor -> X) -> (Highcode_Type_Constructor -> X),
		 ltf: (((Highcode_Type_Constructor -> X), (Highcode_Type -> Y))) -> (Highcode_Type -> Y)
	       } 
	       ->
	       { tc_map: Highcode_Type_Constructor -> X,
		 lt_map: Highcode_Type -> Y
	       };

    wmemo_fn:  { tc_wmap:  (((Highcode_Type_Constructor -> X), (Highcode_Type_Constructor -> X))) -> (Highcode_Type_Constructor -> X),
		 tc_umap:  (((Highcode_Type_Constructor -> X), (Highcode_Type_Constructor -> X))) -> (Highcode_Type_Constructor -> X),
		 lt_umap:  (((Highcode_Type_Constructor -> X), (Highcode_Type -> Y))) -> (Highcode_Type -> Y)
               }
	       ->
               { tc_wmap:  Highcode_Type_Constructor -> X,
		 tc_umap:  Highcode_Type_Constructor -> X, 
		 lt_umap:  Highcode_Type -> Y,
	         cleanup:  Void -> Void
               };

};

package highcode_dictionary: (weak)  Highcode_Dictionary {					# Highcode_Dictionary	is from   src/lib/compiler/upper/highcode/highcode-dictionary.pkg

    stipulate

	  include highcode_guts;

    herein 

	fun bug s
	    =
	    error_message::impossible ("LtyDict: " + s);

	say = controls::print::say;

	package tc_dictionary
            =
            red_black_map_g (								# red_black_map_g		is from   src/lib/src/red-black-map-g.pkg

                Key = Highcode_Type_Constructor;
		compare = compare_type_constructors;
	    );

	package lt_dictionary
            =
            red_black_map_g (

                Key = Highcode_Type;
		compare = compare_lambda_types;
	    );

	Highcode_Type_Constructor = Highcode_Type_Constructor;
	Highcode_Type   = Highcode_Type;

	fun tmemo_fn { tcf, ltf }
	    =
	    { tc_map => tc_look,
	      lt_map => lt_look
	    }
	    where
		m1 = REF (tc_dictionary::empty);
		m2 = REF (lt_dictionary::empty);

		fun tc_look t
		    = 
		    case (tc_dictionary::get (*m1, t))
		       THE t' => t';
		       NULL   => {   x = (tcf tc_look) t;
				     m1 := tc_dictionary::set (*m1, t, x);
				     x;
				 };
		    esac

		also
		fun lt_look t
		    = 
		    case (lt_dictionary::get (*m2, t))
		       THE t' => t';
		       NULL   => {   x = ltf (tc_look, lt_look) t;
				     m2 := lt_dictionary::set (*m2, t, x);
				     x;
				 };
		    esac;
	    end;			# fun tmemo_fn 

	fun wmemo_fn { tc_wmap, tc_umap, lt_umap }
            = 
	    { tc_wmap => tcw_look,
              tc_umap => tcu_look,
              lt_umap => ltu_look,
              cleanup
            }
            where
	        m1 = REF (tc_dictionary::empty);
		m2 = REF (tc_dictionary::empty);
		m3 = REF (lt_dictionary::empty);

		fun tcw_look t
                    = 
		    case (tc_dictionary::get (*m1, t))
		       THE t' => t';
		       NULL   => {   x = (tc_wmap (tcw_look, tcu_look)) t;
			             m1 := tc_dictionary::set (*m1, t, x);
			             x;
			         };
                    esac

		also
		fun tcu_look t
                    = 
		    case (tc_dictionary::get (*m2, t))
		       THE t' => t';
		       NULL   => {   x = (tc_umap (tcu_look, tcw_look)) t;
			             m2 := tc_dictionary::set (*m2, t, x);
			             x;
			         };
                    esac

		also
		fun ltu_look t
                    = 
		    case (lt_dictionary::get (*m3, t))
		       THE t' => t';
		       NULL   => {   x = lt_umap (tcu_look, ltu_look) t;
			             m3 := lt_dictionary::set (*m3, t, x);
			             x;
			         };
                    esac;

		fun cleanup () = ();
	    end;			# fun wmemo_fn 
    end;				# toplevel stipulate
};					# package highcode_dictionary 







##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 1997 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
