CM::make "automata-table-lib.cm";
local
generic package DFA (T:  AUTOMATA_TABLE) {

   use T
   t = new { min=0, max=255 };
   fun trans s cs = (s, map (fn c => go t (s, c)) cs)
   my _  = addState t (1,[(1, 1), (2, 2), (3, 3)])
   my _  = addState t (2,[(1, 1), (2, 2)])
   my _  = addState t (3,[(1, 1), (2, 2), (3, 1)])
   my _  = addState t (4,[(1, 4), (2, 4), (3, 4), (4, 1)])
   my _  = addState t (5,[(2, 2)])
   my _  = addState t (6,[(1, 1)])
   my _  = addState t (7,[(1, 3), (2, 3), (3, 3), (4, 3)])
   my _  = addState t (8,[(1, 3), (2, 3), (3, 3), (4, 0)])
   my _  = compress t
}
in
package D1 = DFA (SparseAutomataTable)
package D2 = DFA (DenseAutomataTable)
my _  = print "Sparse\n"
S0 = D1::trans 0 [1, 2, 3, 4]   : Int * List( Int )
S1 = D1::trans 1 [1, 2, 3, 4]   : Int * List( Int )
S2 = D1::trans 2 [1, 2, 3, 4]   : Int * List( Int )
S3 = D1::trans 3 [1, 2, 3, 4]   : Int * List( Int )
S4 = D1::trans 4 [1, 2, 3, 4, 5] : Int * List( Int )
S5 = D1::trans 5 [1, 2, 3, 4]   : Int * List( Int )
S6 = D1::trans 6 [1, 2, 3, 4]   : Int * List( Int )
S7 = D1::trans 7 [1, 2, 3, 4]   : Int * List( Int )
S8 = D1::trans 8 [1, 2, 3, 4]   : Int * List( Int )
a1 = D1::t
my _  = print "Dense\n"
S0' = D2::trans 0 [1, 2, 3, 4]   : Int * List( Int )
S1' = D2::trans 1 [1, 2, 3, 4]   : Int * List( Int )
S2' = D2::trans 2 [1, 2, 3, 4]   : Int * List( Int )
S3' = D2::trans 3 [1, 2, 3, 4]   : Int * List( Int )
S4' = D2::trans 4 [1, 2, 3, 4, 5] : Int * List( Int )
S5' = D1::trans 5 [1, 2, 3, 4]   : Int * List( Int )
S6' = D1::trans 6 [1, 2, 3, 4]   : Int * List( Int )
S7' = D1::trans 7 [1, 2, 3, 4]   : Int * List( Int )
S8' = D1::trans 8 [1, 2, 3, 4]   : Int * List( Int )
a2 = D2::t
end
