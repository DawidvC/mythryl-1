## x86-omit-frameptr-g.pkg
#
# Replaces uses and definitions of a virtual frame pointer (vfp) with the appropriate
# operation on the stack pointer. 
#
# Invariant: fp = sp + delta &&  stack grows from high to low 	&& fp >= sp
#
# Assumptions: At the entry node fp = sp + idelta
#
# The tricky business is to recognize that things that get like register may
# really be memory registers.
#
# See also:
#     Comments in   src/lib/compiler/lower/omit-frameptr/omit-frame-pointer.api

# Compiled by:
#     src/lib/compiler/lower/make7/ia32.make6

# We are invoked from:
#
#     src/lib/compiler/codegen/x86/x86-codegen-g.pkg

generic package x86_omit_frame_pointer_g (

    package instruction_set
	:
	Instruction_Set_X86; 					# Instruction_Set_X86	is from   src/lib/compiler/lower/x86/instruction/instruction-set-x86.api

    package control_flow_graph
	:
	Control_Flow_Graph					# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
        where instruction_set == instruction_set;

    package mem_regs
	:
	Memory_Registers					# Memory_Registers	is from   src/lib/compiler/lower/x86/instruction/x86-memory-registers.api
	where instruction_set == instruction_set;

    mem_reg_base:  Null_Or( cells_basis::Cell );
)

: (weak) Omit_Frame_Pointer					# Omit_Frame_Pointer	is from   src/lib/compiler/lower/omit-frameptr/omit-frame-pointer.api

{
    package control_flow_graph = control_flow_graph;
    package instruction_set    = instruction_set;
    package cells              = instruction_set::cells;

    package i = instruction_set;
    package c = cells;
    package cb= cells_basis;					# cells_basis		is from   src/lib/compiler/lower/instruction/cells-basis.pkg
    package ht= int_hash_table;					# int_hash_table	is from   src/lib/src/int-hash-table.pkg
    sp = c::esp;

    dump_control_flow_graph_after_omit_frame_pointer_phase	# Unused?
	=
	low_code_control::make_bool (
	    "dump_control_flow_graph_after_omit_frame_pointer_phase",
	    "whether control_flow_graph is shown after omit-framepointer phase"
	);

    fun error msg
	=
	lowcode_error_message::error("x86_omit_frame_pointer_g", msg);

    fun omitframeptr
        { virtual_frame_pointer: cb::Cell,
          idelta: Null_Or( int32::Int ),
          cfg as graph::GRAPH graph
        }
	=
	{   # Rewrite a list of instructions where
	    # the gap between fp and sp is delta:
	    #
	    fun rewrite (instrs, idelta)
		=
		{   #  What kind of register? 
		    Which = SP | FP | OTHER;

		    fun is_sp   cell =  cb::same_color (cell, sp);
		    fun is_vfp  cell =  cb::same_color (cell, virtual_frame_pointer);

		    fun which  cell
                        =
                        if      (is_sp  cell)  SP;
                        else if (is_vfp cell)  FP;
                        else                   OTHER;  fi; fi;

		    fun either cell
                        =
                        is_sp  cell   or
                        is_vfp cell; 


		    # Has the instruction been rewritten?
		    # 
		    changed_flag = REF FALSE;		


		    # Rewrite a single instruction assuming gap (fp=sp+delta).
		    # Returns NULL is instruction is deleted and THE (instruction) otherwise.
		    #
		    fun do_instr (instruction, delta: Null_Or( int32::Int ))
			=
			{
			    # If a delta exists then add to it, 
			    # otherwise maintain that there is no delta:
			    #
			    fun add_to_delta i
				= 
				case delta 
				  
				     THE d =>  THE (i+d);
				     NULL  =>  NULL;
				esac;


			    fun inc_offset i
				= 
				case delta
				  
				     THE k =>  k+i;
				     NULL  =>  error "incOffset";
				esac;


			    fun inc_disp (i::IMMED i) =>  i::IMMED (inc_offset (i));
				inc_disp _            =>  error "incDisp";	#  CONSTANTS?
			    end;

			    fun do_operand (operand as i::DISPLACE { base, disp, mem } )
				    => 
				    if (is_vfp base ) 
				      { changed_flag := TRUE;
				       i::DISPLACE { base=>sp, mem, disp=>inc_disp (disp) } ;};
				    else operand;fi;

				do_operand (operand as i::INDEXED { base, index, scale, disp, mem } )
				    => 
				    if   (is_vfp index)
				         
					 error "operand: frame pointer used in index";
				    else
					 case base
					   
					      NULL => operand;

					      THE b => if   (is_vfp b)
						            
							    changed_flag := TRUE;

							    i::INDEXED { base=>THE (sp), index, scale, mem, 
								     disp=>inc_disp (disp) };
						       else
							    operand;
						       fi;
					 esac;

				     fi;

				do_operand (operand as i::MEM_REG _)
				    => 
				    do_operand (mem_regs::mem_reg { reg=>operand, base=>null_or::the mem_reg_base } );

				do_operand (operand as i::FDIRECT _)
				    => 
				    do_operand (mem_regs::mem_reg { reg=>operand, base=>null_or::the mem_reg_base } );

				do_operand (operand) => operand;
			    end;


			    fun annotate (i, k: Null_Or( int32::Int ))
				=
				{   instruction
					= 
					if   (*changed_flag)
					     
					     changed_flag := FALSE;

					     case k 
					       
						  NULL  => i;

						  THE d => if   (d != 0)
							       
								cmt = "offset adjusted to " + int32::to_string d;
								ann = lowcode_notes::comment.create cmt;
								i::NOTE { instruction=>i, note=>ann };
							   else
								i;
							   fi;
					     esac;

					else
					     i;
					fi;

				   (THE (instruction), k);
				};

			    fun unchanged (i: i::Base_Instruction) =  annotate (i::BASE_INSTRUCTION i, delta);  
			    fun changedto (i, k)                   =  annotate (i::BASE_INSTRUCTION i, k);

			    fun compare (test, lsrc, rsrc)
				=
				unchanged (test { lsrc=>do_operand (lsrc), rsrc=>do_operand (rsrc) } );

			    fun float (oper, operand)
				=
				unchanged (oper (do_operand (operand)));

			    fun do_x86instr (instruction: i::Base_Instruction)
				=
			        case instruction

				    i::JMP (operand, labs) => unchanged (i::JMP (do_operand operand, labs));

				    i::JCC { cond: i::Cond, operand: i::Operand }
                                        => 
				        unchanged (i::JCC { cond, operand=>do_operand (operand) } );

				    i::CALL { operand, defs, uses, cuts_to, mem, return, pops=>0 }
                                        => 
				        unchanged (i::CALL { operand=>do_operand (operand), defs, uses,
						       cuts_to, mem, pops=>0,
						       return } );

				    i::CALL { operand, defs, uses, cuts_to, mem, return, pops }
                                        =>
				        changedto (i::CALL { operand=>do_operand (operand), defs, uses,
						      cuts_to, mem, pops,
						      return },
					       add_to_delta(-pops));

				    i::ENTER { src1=>i::IMMED i1, src2=>i::IMMED i2 } => changedto (instruction,  add_to_delta (i1 + i2*4));
				    i::LEAVE => (THE (i::BASE_INSTRUCTION instruction), NULL);
				    i::RET operand => (THE (i::BASE_INSTRUCTION instruction), NULL);

				    i::MOVE { mv_op: i::Move, src=>i::DIRECT s, dst=>i::DIRECT d }
                                        =>
				        case (which d, which s)

					    (FP, SP) => (NULL, THE 0);

					    (SP, FP) => case delta
					                    NULL => error "MOVE: (SP, FP)";

							    THE 0 => (NULL, THE 0);

							    THE n =>
                                                                {   address = i::DISPLACE { base=>sp, disp=>i::IMMED (n), mem=>i::region::stack };

								    (THE (i::lea { r32=>sp, address } ), THE 0);
							        };
							esac;

					    (OTHER, OTHER) => unchanged (instruction);
					    (FP, FP) => (NULL, delta);
					    (SP, SP) => (NULL, delta);
					    (FP, _) => error "MOVE: to FP";
					    (SP, _) => error "MOVE: to SP";
					    (OTHER, SP) => unchanged (instruction);
					    (OTHER, FP) => error "MOVE: FP to OTHER";	#  D:=sp+delta; lazy!
				        esac;

				    i::MOVE { mv_op, src, dst as i::DIRECT d }
                                        =>
				        if (either (d) ) error "MOVE: assignment to FP/SP";
				        else unchanged (i::MOVE { mv_op, src=>do_operand (src), dst } );
                                        fi;

				    i::MOVE { mv_op, src, dst }
                                        => 
				        unchanged (i::MOVE { mv_op, src=>do_operand (src), dst=>do_operand (dst) } );

				    i::LEA { r32: cb::Cell, address as i::DISPLACE { base, disp=>i::IMMED d, mem } }
                                        => 
				        case (which r32, which base) 

					    (SP, SP)
                                                => 
						# We assume the stack grows from high to low. 
						#
						# If sp is incremented by a positive delta,
						# then the gap is reduced by delta-d;
						#
						# If sp is decremented, the the gap
                                                # is increased and d is negative:
						#
						changedto (instruction, add_to_delta(-d));

					    (SP, FP)
                                                => 
						#    sp = fp + d 
						# or sp = sp + delta + d
						#
						changedto (i::LEA { r32, address=>do_operand (address) }, THE (inc_offset (d)));

					    (FP, FP)
                                                => 
						# fp = fp + d
						# if d is positive, then the gap is increased to delta+d,
						# if d is negative, then the gap is reduced.
						#
					        (NULL, THE (inc_offset (d)));

					    (FP, SP) => (NULL, add_to_delta (d));

					    (SP, OTHER) => error "LEA: sp changed by non-immed";
					    (FP, OTHER) => error "LEA: fp changed by non-immed";

					    _ => unchanged (instruction);
				      esac;

				    i::LEA { r32, address }
                                        => 
				        if (either r32)  error "LEA: SP/FP changed by non-immed";
				        else             unchanged (i::LEA { r32, address=>do_operand (address) } );
                                        fi;

				    i::CMPL { lsrc: i::Operand, rsrc: i::Operand } => compare (i::CMPL, lsrc, rsrc);
				    i::CMPW { lsrc: i::Operand, rsrc: i::Operand } => compare (i::CMPW, lsrc, rsrc);
				    i::CMPB { lsrc: i::Operand, rsrc: i::Operand } => compare (i::CMPB, lsrc, rsrc);
				    i::TESTL { lsrc: i::Operand, rsrc: i::Operand } => compare (i::TESTL, lsrc, rsrc);
				    i::TESTW { lsrc: i::Operand, rsrc: i::Operand } => compare (i::TESTW, lsrc, rsrc);
				    i::TESTB { lsrc: i::Operand, rsrc: i::Operand } => compare (i::TESTB, lsrc, rsrc);

				    i::BITOP { bit_op: i::Bit_Op, lsrc: i::Operand, rsrc: i::Operand }
                                        =>
				        unchanged (i::BITOP { bit_op, lsrc=>do_operand (lsrc), rsrc=>do_operand (rsrc) } );

				    i::BINARY { bin_op=>i::ADDL, src=>i::IMMED (k), dst=>i::DIRECT (d) }
                                        => 
					case (which d)
					   SP    => changedto (instruction, add_to_delta(-k));
					   FP    => (NULL, THE (inc_offset (k)));
					   OTHER => unchanged (instruction);
					esac;

				    i::BINARY { bin_op=>i::SUBL, src=>i::IMMED (k), dst=>i::DIRECT (d) }
                                        => 
				        case (which d)
					    SP    => changedto (instruction, add_to_delta (k));
					    FP    => (NULL, THE (inc_offset(-k)));
					    OTHER => unchanged (instruction);
				        esac;

				    i::BINARY { bin_op, dst as i::DIRECT (d), src }
                                        =>
				        if (either (d))  error "binary: assignment to SP | FP";
				        else             unchanged (i::BINARY { bin_op, src=>do_operand (src), dst } );
                                        fi;

				    i::BINARY { bin_op, src, dst }
                                        =>
				        unchanged (i::BINARY { bin_op, src=>do_operand (src), dst=>do_operand (dst) } );

				    i::CMPXCHG { lock: Bool, size: i::Isize, src: i::Operand, dst: i::Operand }
                                        =>
				        unchanged (i::CMPXCHG { lock, size, src=>do_operand (src), dst=>do_operand (dst) } );

				    i::MULTDIV { mult_div_op: i::Mult_Div_Op, src: i::Operand }
                                        =>
				        unchanged (i::MULTDIV { mult_div_op, src=>do_operand (src) } );

				    i::MUL3 { dst: cb::Cell, src2: int32::Int, src1: i::Operand }
                                        => 
				        if (either (dst))  error "MUL3: assignment to FP/SP";
				        else               unchanged (i::MUL3 { dst, src2, src1=>do_operand (src1) } );
                                        fi;

				    i::UNARY { un_op=>i::INCL, operand as i::DIRECT (r) }
                                        =>
					case (which r)
					    SP    => changedto (instruction, add_to_delta(-1));
					    FP    => (NULL, THE (inc_offset (1)));
					    OTHER => unchanged (i::UNARY { un_op=>i::INCL, operand } );
					esac;

				    i::UNARY { un_op=>i::DECL, operand as i::DIRECT (r) }
                                        => 
				        case (which r)
					    SP    => changedto (instruction, add_to_delta (1));
					    FP    => (NULL, THE (inc_offset(-1)));
					    OTHER => unchanged (i::UNARY { un_op=>i::DECL, operand } );
				      esac;

				    i::UNARY { un_op, operand } => unchanged (i::UNARY { un_op, operand=>do_operand (operand) } );

				    i::SET { cond: i::Cond, operand: i::Operand }
                                        => 
				        unchanged (i::SET { cond, operand=>do_operand (operand) } );

				    i::CMOV { cond: i::Cond, src as i::DIRECT (s), dst: cb::Cell }
                                        =>
				        if (either (s) or either (dst))  error "CMOV: FP/SP in conditional move";
				        else                             unchanged (i::CMOV { cond, src=>do_operand (src), dst } );
                                        fi;

				    i::PUSHL operand => changedto (i::PUSHL (do_operand (operand)), add_to_delta (4));
				    i::PUSHW operand => changedto (i::PUSHW (do_operand (operand)), add_to_delta (2));
				    i::PUSHB operand => changedto (i::PUSHB (do_operand (operand)), add_to_delta (1));
				    i::POP operand => changedto (i::POP (do_operand (operand)), add_to_delta(-4));

				    i::FBINARY { bin_op: i::Fbin_Op, src: i::Operand, dst: i::Operand }
                                        =>
				        unchanged (i::FBINARY { bin_op, src=>do_operand (src), dst=>do_operand (dst) } );

				    i::FIBINARY { bin_op: i::Fibin_Op, src: i::Operand }
                                        =>
				        unchanged (i::FIBINARY { bin_op, src=>do_operand (src) } );

				    i::FUCOM operand => unchanged (i::FUCOM (do_operand operand));
				    i::FUCOMP operand => unchanged (i::FUCOMP (do_operand (operand)));
				    i::FCOMI operand => unchanged (i::FCOMI (do_operand operand));
				    i::FCOMIP operand => unchanged (i::FCOMIP (do_operand (operand)));
				    i::FUCOMI operand => unchanged (i::FUCOMI (do_operand operand));
				    i::FUCOMIP operand => unchanged (i::FUCOMIP (do_operand (operand)));

				    i::FSTPL operand => float (i::FSTPL, operand);
				    i::FSTPS operand => float (i::FSTPS, operand);
				    i::FSTPT operand  => float (i::FSTPT, operand);
				    i::FSTL operand => float (i::FSTL, operand);
				    i::FSTS operand => float (i::FSTS, operand);
				    i::FLDL operand => float (i::FLDL, operand);
				    i::FLDS operand => float (i::FLDS, operand);
				    i::FLDT operand => float (i::FLDT, operand);
				    i::FILD operand => float (i::FILD, operand);
				    i::FILDL operand => float (i::FILDLL, operand);
				    i::FILDLL operand => float (i::FILDLL, operand);

				    i::FENV { fenv_op: i::Fenv_Op, operand: i::Operand }
                                        =>
				        unchanged (i::FENV { fenv_op, operand=>do_operand (operand) } );

				    i::FMOVE { fsize: i::Fsize, src: i::Operand, dst: i::Operand }
                                        =>
				        unchanged (i::FMOVE { fsize, src=>do_operand (src), dst=>do_operand (dst) } );

				    i::FILOAD { isize: i::Isize, ea: i::Operand, dst: i::Operand }
                                        =>
				        unchanged (i::FILOAD { isize, ea=>do_operand (ea), dst=>do_operand (dst) } );

				    i::FBINOP { fsize, bin_op, lsrc, rsrc, dst }
                                        =>
				        unchanged (i::FBINOP { fsize, bin_op, lsrc=>do_operand (lsrc), 
							  rsrc=>do_operand (rsrc), dst=>do_operand (dst) } );

				    i::FIBINOP { isize, bin_op, lsrc, rsrc, dst }
                                        =>
				        unchanged (i::FIBINOP { isize, bin_op, lsrc=>do_operand (lsrc), 
							  rsrc=>do_operand (rsrc), dst=>do_operand (dst) } );

				    i::FUNOP { fsize: i::Fsize, un_op: i::Fun_Op, src: i::Operand, dst: i::Operand }
                                        =>
				        unchanged (i::FUNOP { fsize, un_op, src=>do_operand (src), 
							 dst=>do_operand (dst) } );

				    i::FCMP { i, fsize: i::Fsize, lsrc: i::Operand, rsrc: i::Operand }
                                        =>
				        unchanged (i::FCMP { i, fsize, lsrc=>do_operand (lsrc), rsrc=>do_operand (rsrc) } );

				    _ => unchanged (instruction);
			        esac;


				case instruction 
				    i::NOTE { instruction, note }
                                        =>
                                        {
					    my (instruction, delta) = do_instr (instruction, delta);

					    case instruction 
					       NULL => (NULL, delta);
					       THE instruction => annotate (i::NOTE { instruction, note }, delta);
					    esac;
					};	       

				  i::COPY { kind => cb::REGISTER, dst, src, ... }
				      =>
				      {
					  # The situation where SP <- FP is somewhat complicated.
					  # The copy must be extracted, and a lea generated.
					  # Should it be before or after the parallel copy?
                                          # Depends on if SP is used. 
					  # However, will such a thing ever exist in a parallel copy!?

					  fun okay (s, d, acc)
					      = 
					      case (which s, which d) 
						  (FP, SP) => TRUE;
						  (SP, FP) => error "COPY: SP<-FP; lazy!";
						  (SP, OTHER) => error "COPY: SP<-OTHER";
						  (FP, OTHER) => error "COPY: FP<-OTHER";
						  (OTHER, SP) => error "COPY: OTHER<-SP";
						  (OTHER, FP)  => error "COPY: OTHER<-FP";
						  _ => acc;
					     esac;

					   annotate
                                             ( instruction,
                                               (paired_lists::fold_left okay FALSE (dst, src))
                                                   ??  THE 0
                                                   ::  delta
                                             );
				       };

				  i::BASE_INSTRUCTION instruction
                                      =>
                                      do_x86instr instruction;

				  _ => annotate (instruction, delta);			#  unchanged 
				esac;
			};				# do_instr

		    # Rewrite instructions:
		    #	
		    fun do_instrs ([], instrs, delta)
                            =>
                            (instrs, delta);

		        do_instrs (instruction ! rest, acc, delta)
                            =>
                            {   my (instruction, delta2)
                                    =
                                    do_instr (instruction, delta);

			        case instruction
			            NULL   =>  do_instrs (rest, acc, delta2);
			            THE  i =>  do_instrs (rest, i ! acc, delta2);
                                esac;
			    };
                    end;


		    do_instrs (instrs, [], idelta);
		};					 # fun rewrite 




	    # Rewrite blocks using a
            # depth first traversal
            # of the blocks:
	    #
	    my info:  ht::Hash_Table { visited: Bool, delta: Null_Or( int32::Int ) }
		    = 
		   ht::make_table (32, exceptions::FAIL "X86OmitFramePtr: Not Found");

	    no_info = { visited=>FALSE, delta=>NULL };

	    fun dfs (nid, delta)
                =
                {
		    fun do_succ (delta)
                        = 
		        apply (fn snid = dfs (snid, delta))
                              (graph.next nid);

		    my control_flow_graph::BLOCK { instructions, kind, ... }
                        =
                        graph.node_info nid;

		    case kind
			control_flow_graph::STOP => ();
			control_flow_graph::START => do_succ (delta);

			control_flow_graph::NORMAL
                            =>
                            {
				my { visited, delta=>d }
                                    =
                                    null_or::the_else (ht::find info nid, no_info);

				fun same_delta (NULL, NULL) => TRUE;
				    same_delta (THE i1: Null_Or( int32::Int ), THE i2)   =>   i1 == i2;
				    same_delta _ => FALSE;
                                end;

				if visited

				     if (not (same_delta (d, delta)))  error "dfs";  fi;
				else 
				     my (instrs, delta2)
					 =
					 rewrite (reverse *instructions, delta);

				     instructions := instrs;
				     ht::set info (nid, { visited=>TRUE, delta } );
				     do_succ (delta2);
				fi;
			    };
		    esac;

		  };

	    virtual_frame_pointer
                ->
                cb::CELL { ref_color, ... };

	    # Check that virtual frame pointer
            # is a pseudo register or aliased
	    # to the stack pointer:
	    #
	    case *ref_color
	        cb::PSEUDO => apply (fn nid = dfs (nid, idelta)) (graph.entries ());
	       _ => error "virtual frame pointer not a pseudo register";
            esac;

	    #  output cluster  
	#    if *dumpCfg then 
	#    pc::printCluster file::stdout "after omit frame pointer"  cl
	#    else ()

	};
};

