/* coreacc.pkg
 *
 * (C) 2001 Lucent Technologies, Bell Labs
 */

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6

package core_access

: (weak)
api {

    get_variable:     (symbol_table::Symbol_Table, String) -> variables_and_constructors::Variable;
    get_constructor:  (symbol_table::Symbol_Table, String) -> variables_and_constructors::Constructor;

    get_variable'
      :  (Void -> variables_and_constructors::Variable)
      -> (symbol_table::Symbol_Table, String)
      -> variables_and_constructors::Variable;

    get_constructor'
      :  (Void -> variables_and_constructors::Constructor)
      -> (symbol_table::Symbol_Table, String)
      -> variables_and_constructors::Constructor ;

    # Like get_constructor, but returns a
    # bogus exception instead of failing:
    #
    get_exception
      :  (symbol_table::Symbol_Table, String)
      -> variables_and_constructors::Constructor;

}

{
    stipulate

	exception NO_CORE;

	fun dummy_err _ _ _
            =
            raise exception NO_CORE;

	fun path name
            =
            symbol_path::SYMBOL_PATH [ core_symbol::core_symbol, symbol::make_value_symbol name];

	fun get_core (symbol_table, s)
            =
            find_in_symbol_table::find_value_via_symbol_path (symbol_table, path s, dummy_err);

	fun impossible m
            =
            error_message::impossible ("core_access: " + m);
    herein

	fun get_variable' err x
            =
	    case (get_core x)
		variables_and_constructors::VARIABLE r => r;
		_ => impossible "getVariable";
	    esac
	    except
                NO_CORE = err ();

	fun get_variable x
            =
            get_variable'
                (fn () = impossible "getVariable")
                x;

	fun get_constructor' err x
            =
	    case (get_core x)
		 variables_and_constructors::CONSTRUCTOR c => c;
		_ => err ();
	    esac
	    except
                NO_CORE = err ();

	fun get_constructor x
            =
            get_constructor'
                (fn () = impossible "get_constructor")
                x;

	fun get_exception x
            =
            get_constructor'
                (fn () = variables_and_constructors::bogus_exception)
                x;
    end;
};
