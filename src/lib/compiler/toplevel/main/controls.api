## controls.api 

# Compiled by:
#     src/lib/compiler/core.make6



api Controls {

    package mc:       Matchcompiler_Controls;	# Matchcompiler_Controls	is from   src/lib/compiler/toplevel/main/control-apis.api
    package cg:       Codegenerator_Controls;	# Codegenerator_Controls	is from   src/lib/compiler/toplevel/main/control-apis.api
    package lowcode:  Lowcode_Control;		# Lowcode_Control		is from   src/lib/compiler/lower/control/lowcode-control.pkg
    package print:    Control_Print;		# Control_Print			is from   src/lib/compiler/front/basics/print/printcontrol.pkg
    package highcode: Highcode_Controls;	# Highcode_Controls		is from   src/lib/compiler/toplevel/main/control-apis.api

    debugging:                     Ref( Bool );

    unparse_raw_syntax_tree:       Ref( Bool );
    unparse_deep_syntax_tree:      Ref( Bool );
    execute_compiled_code:         Ref( Bool );

    prettyprint_raw_syntax_tree:   Ref( Bool );


    include Basic_Control;			# Basic_Control	is from   src/lib/compiler/front/basics/main/basiccontrol.pkg

    # provides: my print_warnings: Ref( Bool )

    include Mythryl_Parser;		# Mythryl_Parser	is from   src/lib/compiler/front/parse/main/mythryl-parser.pkg

#   provides:    my primary_prompt:    Ref(  String )
#		 my secondary_prompt:  Ref(  String )
#		 my lazy_is_a_keyword: Ref(  Bool )
#		 my quotation:         Ref(  Bool )


     remember_highcode_variable_names:   Ref(  Bool );
     value_restriction_local_warn:     Ref( Bool );  #  Default FALSE        # Warning message on failure of value restriction in local decls 
     value_restriction_top_warn:       Ref( Bool );  #  Default TRUE         # Warning message on failure of value restriction at top level 
     mult_def_warn:                    Ref( Bool );  #  Default FALSE        # Warning messages for multiple defs in sigs 
     share_def_error:                  Ref( Bool );  #  Default TRUE         # Error (TRUE) or warning (FALSE) for defs in sharing constraints 
     macro_expand_sigs:                Ref( Bool );  #  Default TRUE         # Check apis at declaration by instantiating them 
     internals:                        Ref( Bool );  #  Default FALSE        # Print internal representations of types at top level 
     interp:                           Ref( Bool );                          #  Turn on interpreter -- defunct 

#    my debugLook:     Ref(  Bool )
#    my debugCollect:  Ref(  Bool )
#    my debugBind:     Ref( Bool )

     save_lambda:          Ref(  Bool );
     preserve_lvar_names:   Ref(  Bool );
     mark_deep_syntax_tree:  Ref(  Bool );
     track_exn:            Ref(  Bool );
     poly_eq_warn:          Ref(  Bool );
     indexing:            Ref(  Bool );
     inst_sigs:            Ref(  Bool );

     saveit:              Ref(  Bool );
     save_deep_syntax_tree:  Ref(  Bool );
     save_convert:         Ref(  Bool );
     save_cpsopt:          Ref(  Bool );
     save_closure:         Ref(  Bool );

    package inline:   api {
			       Global_Setting =
				  OFF			          #  Completely disabled 
				| DEFAULT  Null_Or( Int );     #  Default aggressiveness; NULL: off 

			       Localsetting =  Null_Or( Null_Or( Int ) );

			       use_default:  Localsetting;
			       suggest:     Null_Or( Int ) -> Localsetting;
			       set:         Global_Setting -> Void;
			       get:         Void -> Null_Or(  Int );
			       get'       : Localsetting -> Null_Or( Int );
			       parse:       String -> Null_Or( Global_Setting );
			       show:        Global_Setting -> String;
			  };

       tdp_instrument:  Ref(  Bool );
};


## COPYRIGHT (c) 1995 AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
