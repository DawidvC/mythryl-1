-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
2007-09-26 CrT NOTES:
 o  This version came from the c-glue hierarchy, it appears
    to be a more developed version of the standard SML/NJ regex lib.
 o  Api is defined in        src/lib/regex/glue/regex.api
 o  Added three packages to simplify using the package:
        awk_dfa_regex
        awk_nfa_regex
        regex
 o  Also to simplify using the package, added in Allen Leung's
    "lazy man's interface" functions, plus a '=~' binding.

 o  Example of simple use:
       include regex;
       if  "bobobo" =~ ".*obo"  then   print "BOBO LIVES!\n";
       else                            print "BOBO DIES!\n";
       fi;

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-



This is a regular expressions library. It is based on a decoupling
of the surface syntax used to specify regular expressions and the
backend engine that implements the matcher.  An abstract syntax is used
to communicate between the front end and the back end of the system,


                      USING REGULAR EXPRESSIONS

Given a package S1 describing a surface syntax and a package S2 
describing a matching engine, a regular expression package can be
defined by applying the package macro: 

  regular_expression_matcher_g (package p=S1  package e=S2) : Regular_Expression_Matcher

To match a regular expression, one first needs to compile a
representation in the surface syntax. The type of a compiled regular
expression is given in the Regular_Expression api as: 

  type regexp

Two functions are provided in
the Regular_Expression api:

  my compile :  string_conversion::Reader (char,X) -> string_conversion::Reader (regexp, X)
  my compile_string : String -> regexp  

The function compile is a regexp reader, while compile_string is
specialized to strings.

Once a regular expression has been compiled, three functions are
provided to perform the matching:

   my find   : 
   my prefix :   [[ See types in glue/regular-expression-matcher.api ]]
   my match  : 

The function find returns a reader that searches a stream and attempts
to match the given regular expression. The function prefix returns a
reader that attempts to match the regular expression at the current
position in the stream. The function match takes a list of regular
expressions and functions and returns a reader that attempts to match
one of the regular expressions at the current position in the
stream. The function corresponding to the matched regular expression
is invoked on the matching information.


                         MATCHING INFORMATION

Once a match is found, it is returned as a Match_Tree 
(defined in glue/match-tree.pkg). This is a hierarchical package
describing the matches of the various subexpressions appearing in the
matched regular expression. A match for an expression is a record
containing the position of the match and its length. The root of the
package always described the outermost match (the whole string
matched by the regular expression). See the file glue/match-tree.pkg
for more details. 


                               ROADMAP

front-end/     Implementation of various surface syntaxes
back-end/      Implementation of various matching engines
glue/         Glue code


                              FRONT ENDS

Two surface syntaxes are currently implemented, the original
AWK syntax and a perl-style syntax. See the files
front-end/awk-syntax.pkg and front-end/perl-syntax.pkg for
for syntax details.



                              BACK ENDS

Three matching engines are implemented:
1) A backtracking engine (back-end/bt-engine.pkg), that provides full
   submatching information. Slow, low memory footprint, low startup
   cost. 
2) An automaton-based engine (back-end/dfa-engine.pkg), that provides
   only top-level matching information (the string matched). Fast,
   but memory-intensive and high startup cost (the cost of
   constructing the automaton in the first place)
3) An engine designed specifically to support perl syntax.
