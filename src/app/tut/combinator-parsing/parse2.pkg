# A tutorial exercise in higher-order and curried functions,
# and specifically in combinatorial parsing.
#
# You may exercise it by doing
#
#     linux$ my
#
#     eval: make "parse2.make6";
#     eval: parse1::parse "The boy throws the little ball";

package parse2 {

    in = list::in;

    Parsetree = PAIR (Parsetree, Parsetree)
	      | TOKEN String
	      ;

    fun parsetree_to_string (TOKEN string)
	    =>
	    string;

	parsetree_to_string (PAIR (parsetree1, parsetree2))
	    =>
	    sprintf "(%s %s)"
		(parsetree_to_string  parsetree1)
		(parsetree_to_string  parsetree2);
    end;

    Token     = String;
    Tokens    = List( Token );

    Result    = (Parsetree, Tokens);
    Results   = List( Result );

    Failure_Fate
	=
	Void -> Void;   # Results;

    Success_Fate
	=
	Parsetree            ->
	Failure_Fate ->
	Tokens               ->
	Void;
#	Results;

    Parse_Function
	=
	Success_Fate ->
	Failure_Fate ->
	Tokens               ->
	Void;
#	Results;

    # The parse function which always fails:
    #
    fun fail success_fate  failure_fate  tokens
	=
	failure_fate  ();

    # A parse function which always matches
    # the next token:
    #
    fun any  success_fate  failure_fate  []
	    =>
	    failure_fate  ();                                               # No token to match.

	any  success_fate  failure_fate  (token ! tokens)
	    =>
	    success_fate  (TOKEN token)  failure_fate  tokens;
    end;

    # A parse function which matches any word in a given list:
    #
    fun match
	    (words: List(String))
	    (success_fate: Success_Fate)
	    (failure_fate: Failure_Fate)
	    ([]: List(String))
	    =>
	    failure_fate  ();                                               # No token to match.

	match
	    (words: List(String))
	    (success_fate: Success_Fate)
	    (failure_fate: Failure_Fate)
	    ((token ! tokens): List(String))
	    =>
	    if (string::to_lower(token) in words)

                 success_fate  (TOKEN token) failure_fate  tokens;
            else
                 failure_fate  ();                                               # Next token does not match.
	    fi;	    
    end;


    # A parse function which applies two given
    # sub-parse functions in sequence:
    #
    fun seq
        ( parse_fn_1: Parser,
          parse_fn_2: Parser
        )
        (success_fate: Success_Fate)
	=
	parse_fn_1
	    (fn (parsetree_1: Parsetree)
		=
		parse_fn_2
		    (fn (parsetree_2: Parsetree)
			=
			success_fate  (PAIR (parsetree_1, parsetree_2))
		    )
	    );


    # An "or" parser which applies any of the given
    # sub-parse functions:
    #
    fun one_of
            ([]: List(Parser))
            (success_fate: Success_Fate)
            (failure_fate: Failure_Fate)
            (tokens:               List(Token))
	    =>
            failure_fate ();

	one_of (parser ! parsers) success_fate  failure_fate  tokens
            =>
	    parser  success_fate  failure_fate'  tokens
	    where
		fun failure_fate'  ()
		    =
	            one_of  parsers  success_fate  failure_fate   tokens;
		    
	    end;
    end;

    # Now a simple grammar:
    #
    verb      =  match [ "eats", "throws"               ];
    noun      =  match [ "boy", "girl", "apple", "ball" ];
    article   =  match [ "the", "a"                     ];
    adjective =  match [ "big", "little", "good", "bad" ];
    adverb    =  match [ "quickly", "slowly"            ];

    qualified_noun = one_of [ noun, seq (adjective, noun) ];
    qualified_verb = one_of [ verb, seq (adverb   , verb) ];

    noun_phrase    = one_of [ qualified_noun, seq (article, qualified_noun) ];

    sentence
        =
        one_of
          [ seq (noun_phrase   , seq (qualified_verb, noun_phrase)),
            seq (qualified_verb, noun_phrase                      ),
            seq (noun_phrase   , qualified_verb                   ),
            qualified_verb
          ];


    fun toplevel_success_fate  parsetree  failure_fate  tokens
        =
        printf "Successful parse: %s\n" (parsetree_to_string  parsetree);


    fun toplevel_failure_fate  ()
        =
        print  "No parse found.\n";


    fun string_to_words  string
        =
        string::tokens  char::is_space  string;

    fun parse (string: String)
        =
        sentence
            toplevel_success_fate
            toplevel_failure_fate
            (string_to_words  string);
};
