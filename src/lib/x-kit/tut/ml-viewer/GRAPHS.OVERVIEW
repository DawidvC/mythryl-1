Here is a rough sketch of the graph data structures used in the viewer.
The three levels (three types of "graphs" and "nodes") reflect the
structure (abstract graph) -> (graph embedded in plane) -> (window on graph).
Some of the redundancies in the data structures are for efficiency; the
rest are due to the code not being redesigned since it was written in PML.

The edges and nodes of an attributed graph (Attributed_Graph) carry a
dictionary (name/value pairs) and user-defined info. The dictionaries
are referenced using get_attr/set_attr. The user-defined info is
referenced using info_of_node, info_of_graph and info_of_edge.

The .dot file is read in to create a dot_graph::Graph,
which is an attributed graph. The nodes and edges look like:
 
  Node
    [
        name:        String,
        dictionary:  Dictionary( String ),
        info:  ref to 
               {
                 center: g::Point,	# from "pos" in dict.
                 size:   g::Size,	# from "width","height" in dict.
                 shape:  Shape,		# from "shape" in dict.
                 label:  String		# from "label" in dict.
               }
    ]

  Edge
    [
        dictionary:  Dictionary( String ),
        info:  Ref
               {
                 pts:  List( g::Point ),	# from "pos" in dict
                 arrow:      g::Point           # from "pos" in dict
               }
    ]

dotgraph_to_planargraph::convert_dotgraph_to_planargraph converts this graph to a planar_graph::Graph,
which is  also an attributed graph. Its nodes and edges look like:

  Node
    [
        name:        String,			# Same as related dot_graph node.
        dictionary:  Dictionary(String),	# Empty.
        info: 
               {
                 base:  dot_graph::Node,	# Related node in dot_graph.
                 pos:   geometry::Point,	# base.center, scaled.
                 shape:  attr::Shape,		# base.shape.
                 bbox:   geometry::Box,	# Bounding box of base, scaled.
                 label:  String			# base.label.
               }
    ]

  Edge
    [
        dictionary:  Dictionary( String ),	# Empty.
        info :
               {
                 pts:    List( g::Point ),	# Pts from related edge, scaled.
                 arrow : List( g::Point )	# Pts to draw arrow head.
               }
    ]

Finally, the actual viewer maintains a set of
visible nodes represented as follows. There is
no actual graph structure involved.

    {
      node:   planar_graph::Node,		# Related planar_graph node.
      bbox:   Box,				# Screen bounding box.
      draw:  (Drawable, Pen) -> Box -> Void,	# Draw function.
      fill:  (Drawable, Pen) -> Box -> Void,	# Fill function.
      label:  String				# node.label.
    }

