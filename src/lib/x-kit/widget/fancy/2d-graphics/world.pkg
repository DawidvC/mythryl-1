## world.pkg
## COPYRIGHT (c) 1994 AT&T Bell Laboratories.



# This is the internal representation of
# the structured graphics canvas.



###        "It occurred to me this morning
###         that many system design flaws
###         can be traced to unwarrantedly
###         anthropomorphizing the user."
###
###                     -- Steven Maker



package World:  WORLD =
  pkg

    package w  = widget
    package XC = w::XC
    package c  = Canvas
    package d  = drawing
    package g  = geometry
    package r  = region
    package v  = WorldView
    package sb = Scrollbar
    package int_map = IntBinaryMap

    type box = { minX:  real, maxX:  real, minY:  real, maxY:  real }

    # This should be part of the region package 
    fun mkRegion [] = r::empty
      | mkRegion [r] = r::box r
      | mkRegion (r . rr) = list::fold_right
	  (fn (r, rg) => r::union (r::box r, rg))
	    (r::box r)
	      rr

    # specification of a width; either in absolute pixels or in universal
    # coordinates.

    enum width_spec
      = WID_Pixel of Int
/****
      | WID_UCoord of real
****/

  #  specification of an arrow head 
    enum arrow_spec
      = NoArrow
      | Arrow of { len:  real, wid:  real }

    # the different ways to specify a border; either an absolute number of
    # pixels, or proportional border specified in universal coordinate units.

    enum border_spec
      = BORDER_None
      | BORDER_Pixel2D of (XC::color * Int)
/****
      | BORDER_Pixel3D of {
	    relief:  three_d::relief,
	    wid:  Int,
	    light:  XC::color,
	    dark:   XC::color
	  }
      | BORDER_UCoord of (XC::color * real)
****/

    type chunk_id = Int

  #  An chunk that is (at least) partially visible on the canvas 
    enum vis_chunk X = VChunk of {
	chunk:  chunk( X ),
	region:  r::region,
	erase:  Void -> Void,
	draw:  Void -> Void
      }

    and X chunk = Chunk of {
	id:  chunk_id,
	desc:  chunk_desc,
	depth:  Int,
	info:  Null_Or( X ),
	visible:  Ref( Bool )
      }

    and chunk_desc
      = CHUNK_LINE of {
	    pts:   List { x:  real, y:  real },
	    head:   arrow_desc { x:  real, y:  real },
	    tail:   arrow_desc { x:  real, y:  real },
	    color:  XC::color,
	    width:  width_spec
	  }
      | CHUNK_BOX of {
	    x:  real, y:  real,
	    wid:  real, ht:  real,
	    fill:  Null_Or( XC::color ),
	    border:  border_spec
	  }
      | CHUNK_ELLIPSE of {
	    x:  real, y:  real,
	    wid:  real, ht:  real,
	    fill:  Null_Or( XC::color ),
	    border:  border_spec
	  }
      | CHUNK_DIAMOND of {
	    x:  real, y:  real,
	    wid:  real, ht:  real,
	    fill:  Null_Or( XC::color ),
	    border:  border_spec
	  }
      | CHUNK_TEXT of {
	    x:  real, y:  real,
	    wid:  real, ht:  real,	#  the size of the text when drawn in it 
					#  natural size and transformed to 
					#  unscaled world coordinates (i.e., 
					#  inches). 
	    text:  String,
	    color:  XC::color,
	    ptSz:  Int,
	    fontStyle:  ScalableFont::font_style
	  }

    and X arrow_desc
      = NO_ARROW
      | ARROW of {
	    p0:  X,
	    p1:  X,	#  this is the tip of the arrow 
	    p2:  X
	  }

    # Sort chunks by depth, with deeper chunks first.  Note: the sorting
    # function takes a ">" operator and sorts in nondecreasing order.

    fun sortVisChunks l = let
	  fun depth (VChunk { chunk=Chunk { depth, ... }, ... } ) = depth
	  in
	    list_mergesort::sort (fn (chunk1, chunk2) => (depth chunk1 < depth chunk2)) l
	  end


    # sets of visible chunks, keyed by chunk ID

    fun visChunkId (VChunk { chunk=Chunk { id, ... }, ... } ) = id

    fun insertChunk (map, chunk) = int_map::set (map, visChunkId chunk, chunk)

    fun union (map1, map2) = int_map::union_with #2 (map1, map2)

    emptyMap = int_map::empty

    # Compute the region covered by a list of chunks 
    fun regionOfChunks chunks =
	  list::fold_right (fn (VChunk { region, ... }, rg) => r::union (region, rg))
	    r::empty
	      chunks

    # Append the chunks in the set s to the list l 
    fun appendChunks (s, l) = int_map::fold_left (fn (chunk, l) => chunk . l) l s

    # Create a list of the chunks in s 
    fun listChunks s = appendChunks (s, [])

    # Given a set of chunks, and a region that has been drawn in,
    # compute a list of the damaged chunks (i.e., the ones that intersect
    # the region).  This requires a fixed-point compuatation, since
    # redrawing damaged chunks can damage other chunks.

    # NOTE: there might be some optimization based on depth;
    #       i.e., drawing a shallow chunk cannot damage a
    #       deeper chunk.

    fun computeDamagedChunks (chunks, region) = let
	  fun testAndAdd (chunk, (okayChunks, damagedChunks, damagedRegion)) = let
		my VChunk { region, ... } = chunk
		in
		  if (r::overlap (region, damagedRegion))
		    then (
		        okayChunks,
			insertChunk (damagedChunks, chunk),
			r::union (region, damagedRegion)
		      )
		    else (insertChunk (okayChunks, chunk), damagedChunks, damagedRegion)
		end
	  fun findFixedPt (okayChunks, damagedChunks, damagedRegion) = let
		my (okay, damaged, damagedRegion) =
		      int_map::fold_left testAndAdd
			(emptyMap, damagedChunks, damagedRegion)
			  okayChunks
		in
		  if ((int_map::vals_count damaged) == (int_map::vals_count damagedChunks))
		    then (listChunks damagedChunks)
		    else findFixedPt (okay, damaged, damagedRegion)
		end
	  in
	    findFixedPt (chunks, emptyMap, region)
	  end

    # Convert a center coordinate, plus a width and height to a bounding box 
    fun rectToBox { x, y, wid, ht } = let
	  dx = (0.5 * wid) and dy = (0.5 * ht)
	  in
	    { minX = (x - dx), minY = (y - dy), maxX = (x + dx), maxY = (y + dy) }
	  end

    fun bbox (CHUNK_LINE _) = raise exception FAIL "bbox of line"
      | bbox (CHUNK_BOX { x, y, wid, ht, ... } ) =
	  rectToBox { x=x, y=y, wid=wid, ht=ht }
      | bbox (CHUNK_ELLIPSE { x, y, wid, ht, ... } ) =
	  rectToBox { x=x, y=y, wid=wid, ht=ht }
      | bbox (CHUNK_DIAMOND { x, y, wid, ht, ... } ) =
	  rectToBox { x=x, y=y, wid=wid, ht=ht }
      | bbox (CHUNK_TEXT { x, y, wid, ht, ... } ) =
	  rectToBox { x=x, y=y, wid=wid, ht=ht }

    # Return TRUE, if a point is inside an chunk;
    # for the time being, we just test the point
    # against the bounding box.

    fun pointInChunk (chunk, x, y) = let
	  bb = bbox chunk
	  in
	    ((bb.minX <= x) and (x <= bb.maxX)
	      and (bb.minY <= y) and (y <= bb.maxY))
	  end

/*****
    package BSP = BSP2D (pkg
	type chunk = (chunk_id * chunk_desc)
	fun boundingBox (_, chunk) = bbox chunk
	fun pointInChunk ((_, chunk), x, y) = pointInChunk (chunk, x, y)
      end)

    partitionSpace = BSP::partitionSpace 5
*****/

  #  test to see if an chunk is visible 
    fun isVisible (view, chunk) = let
	  vb = v::viewVBox view
	#  Does a line segment  intersect the visible box? 
	  fun lineInView ( { x=x1, y=y1 }, { x=x2, y=y2 } ) = let
		fun cmpMin (a, b, min) = (a < min) and (b < min)
		fun cmpMax (a, b, max) = (a > max) and (b > max)
		in
/**
file::print (format::format "lineInView: p1 = (%f, %f), p2 = (%f, %f)" [
format::REAL x1, format::REAL y1, format::REAL x2, format::REAL y2
]);
**/
		  if (cmpMin (x1, x2, vb.minX) or cmpMin (y1, y2, vb.minY)
		  or cmpMax (x1, x2, vb.maxX) or cmpMax (y1, y2, vb.maxY))
		    then FALSE
		    else TRUE # * We need to do more work here *
		end
/**
lineInView = fn arg => let result = lineInView arg in
if result then file::print "  is visible\n" else file::print "  not visible\n"; result end
**/
	/* is any part of a box (specified as center, wid, ht) in
	 * the visible box?
	 */
	  fun rectInView { x, y, wid, ht } = let
		hw = 0.5*wid and hh = 0.5*ht
		in
/**
file::print (format::format "rectInView: x = %f, y = %f, wid = %f, ht = %f" [
format::REAL x, format::REAL y, format::REAL wid, format::REAL ht
]);
**/
		  (vb.minX <= x+hw) and (x-hw <= vb.maxX)
		  and (vb.minY <= y+hh) and (y-hh <= vb.maxY)
		end
/**
rectInView = fn arg => let result = rectInView arg in
if result then file::print "  is visible\n" else file::print "  not visible\n"; result end
**/
	  in
	    case chunk
	     of (CHUNK_LINE { pts=(p1 . r), head, tail, ... } ) => let
		  fun testArrow (NO_ARROW) = FALSE
		    | testArrow (ARROW { p0, p1, p2 } ) =
			lineInView (p0, p1) or lineInView (p1, p2)
		  fun test (p1, p2 . r) =
			lineInView (p1, p2) or test (p2, r)
		    | test _ = FALSE
		  in
		    testArrow head or testArrow tail or test (p1, r)
		  end
	      | (CHUNK_LINE _) => raise exception FAIL "line w/o points"
	      | (CHUNK_BOX { x, y, wid, ht, ... } ) =>
		  rectInView { x=x, y=y, wid=wid, ht=ht }
	      | (CHUNK_ELLIPSE { x, y, wid, ht, ... } ) =>
		  rectInView { x=x, y=y, wid=wid, ht=ht }
	      | (CHUNK_DIAMOND { x, y, wid, ht, ... } ) =>
		  rectInView { x=x, y=y, wid=wid, ht=ht }
	      | (CHUNK_TEXT { x, y, wid, ht, ... } ) =>
		  rectInView { x=x, y=y, wid=wid, ht=ht }
	    #  end case 
	  end

    type cached_pen = {
	color:  xcore::color,
	lineWid:  Int,
	pen:  Drawing::pen
      }

    enum chunk_op = DRAW | ERASE

    enum world X = WORLD of {
	canvas:  c::canvas,		#  the drawing canvas 
	background:  xcore::Color,	#  the background color 
	findFont:  (ScalableFont::font_style * Int) -> Null_Or( xcore::Font ),
	view:  Ref( v::view ),			
	canvasSz:  Ref( g::size ),
	idMap:  REF( int_map::map( chunk( X ) ) ),
					#  maps chunk IDs to chunks 
	visMap:  REF( int_map::map( vis_chunk( X ) ) ),
					#  A mapping of chunk IDs to the 
					#  visible chunks 
	changed:   REF( list( chunk_op * vis_chunk( X ) ) ),
					#  A list of visible chunks that need 
					#  to be displayed or erased 
/*****
	posMap:  Ref( BSP::bsp ),		#  A map of chunk positions in world 
					#  Coordinates. 
*****/
	pens:  REF(  List(  cached_pen ) ),	#  Cached pens for drawing 
	idCnt:  REF( Int )			#  for generating chunk IDs 
      }


  # * basic drawing routines *

    fun drawableOfWorld (WORLD { canvas, ... } ) = c::drawableOfCanvas canvas

    fun drawChunk (VChunk { draw, ... } ) = draw()
    fun eraseChunk (VChunk { erase, ... } ) = erase()
    fun drawChunkList l = apply drawChunk (sortVisChunks l)

  #  find or create a pen with the given foreground color and line width 
    fun findPen (WORLD { background, pens, ... } ) (c, w) = let
	  penList = *pens
	  fun get [] = let
		pen = d::newPen [
			d::PV_Function d::OP_Copy,
			d::PV_Foreground c,
			d::PV_Background background,
			d::PV_LineWidth w
		      ]
		in
		  pens := { color=c, lineWid=w, pen=pen } . penList;
		  pen
		end
	    | get ( { color, lineWid, pen } . r) =
		if ((lineWid == w) and w::XC::sameColor (color, c))
		  then pen
		  else get r
	  in
	    get penList
	  end

  #  Create the drawing and erasure operations for an chunk 
    fun mkDrawFn (drawable, findPen, findFont, view, chunk) = let
	/* convert a world coordinate box, which is specified as a center
	 * point, plust width and height, to a pixel box.
	 */
	  fun uCoordToRect { x, y, wid, ht } = let
/**
file::print (format::format "uCoordToRect: x = %f, y = %f, wid = %f, ht = %f\n" [
format::REAL x, format::REAL y, format::REAL wid, format::REAL ht
])
**/
		hw = 0.5*wid and hh = 0.5*ht
		my g::PT { x, y } = v::uCoordToPixel (view, x-hw, y+hh)
		my g::SIZE { wid, ht } = v::uCoordToSize (view, wid, ht)
		in
/**
file::print (format::format "        box: x = %d, y = %d, wid = %d, ht = %d\n" [
format::INT x, format::INT y, format::INT wid, format::INT ht
]);
**/
		  g::BOX { x=x, y=y, wid=wid, ht=ht }
		end
	  in
	    case chunk
	     of (CHUNK_LINE { pts, head, tail, color, width=WID_Pixel w } ) => let
		  drawLines = d::drawLines drawable (findPen (color, w))
		  fun drawArrow NO_ARROW = ()
		    | drawArrow (ARROW { p0, p1, p2 } ) = drawLines [p0, p1, p2]
		  fun cvtPt { x, y } = v::uCoordToPixel (view, x, y)
		  fun cvtArrow (NO_ARROW) = NO_ARROW
		    | cvtArrow (ARROW { p0, p1, p2 } ) =
			  ARROW { p0 = cvtPt p0, p1 = cvtPt p1, p2 = cvtPt p2 }
		  fun lineRegion (g::PT { x=x1, y=y1 }, g::PT { x=x2, y=y2 } ) = let
			my (x, wid) = if (x1 < x2)
			      then (x1, (x2-x1)+1)
			      else (x2, (x1-x2)+1)
			my (y, ht) = if (y1 < y2)
			      then (y1, (y2-y1)+1)
			      else (y2, (y1-y2)+1)
			in
			  r::box (g::BOX { x=x, y=y, wid=wid, ht=ht } )
			end
		  fun arrowRegion NO_ARROW = r::empty
		    | arrowRegion (ARROW { p0, p1, p2 } ) =
			r::union (lineRegion (p0, p1), lineRegion (p1, p2))
		  fun mkRegion (p1 . p2 . r, region) =
			mkRegion (p2 . r,
			  r::union (lineRegion (p1, p2), region))
		    | mkRegion (_, region) = region
		  pts = map cvtPt pts
		  head = cvtArrow head
		  tail = cvtArrow tail
		  region = mkRegion (pts,
			r::union (arrowRegion head, arrowRegion tail))
		  fun draw () = (drawLines pts; drawArrow head; drawArrow tail)
		  fun erase () = raise exception FAIL "erase line"
		  in
		    (region, draw, erase)
		  end
	      | (CHUNK_BOX { x, y, ht, wid, border, fill } ) => let
		  box = uCoordToRect { x=x, y=y, wid=wid, ht=ht }
		  region = r::box box
		  fun eraseFn () = (d::clearArea drawable box)
		  in
		    case (border, fill)
		     of (BORDER_Pixel2D (c, w), NULL) => let
			  drawRect = d::drawRect drawable (findPen (c, w))
			  in
			    (region, fn () => drawRect box, eraseFn)
			  end
		      | (BORDER_None, THE c) => let
			  fillRect = d::fillRect drawable (findPen (c, 0))
			  in
			    (region, fn () => fillRect box, eraseFn)
			  end
		      | (BORDER_Pixel2D (c, w), THE c') => let
			  drawRect = d::drawRect drawable (findPen (c, w))
			  fillRect = d::fillRect drawable (findPen (c', w))
			  in
			    ( region,
			      fn () => (fillRect box; drawRect box),
			      eraseFn
			    )
			  end
		      | _ => raise exception FAIL "box w/o fill or border"
		    #  end case 
		  end
/*****
	      | (CHUNK_ELLIPSE {... } ) =>
	      | (CHUNK_DIAMOND {... } ) =>
*****/
	      | (CHUNK_TEXT { x, y, wid, ht, text, color, ptSz, fontStyle } ) => let
		  drawFontSz = v::scaleFontSz (view, ptSz)
		  in
		    case findFont (fontStyle, drawFontSz)
		     of NULL => (r::empty, fn () => (), fn () => ())
		      | (THE f) => let
			my (box as g::BOX { x, y, ... } ) =
			      uCoordToRect { x=x, y=y, wid=wid, ht=ht }
			region = r::box box
			fun eraseFn () = (d::clearArea drawable box)
			my { ascent, ... } = Font::fontHt f
			pos = g::PT { x=x, y=y+ascent }
			draw = d::drawString drawable (findPen (color, 1)) f
			in
			  (region, fn () => draw (pos, text), eraseFn)
			end
		  end
	      | _ => raise exception FAIL "mkDrawFn"
	    #  end case 
	  end

    # Create the representation of a visible chunk.
    # This means creating the draw and erase fns:
    #
    fun mkVisChunk (world as WORLD w, chunk as Chunk { desc, ... } ) = let
	  my (region, draw, erase) = mkDrawFn (
		  drawableOfWorld world,
		  findPen world, w.findFont, *w.view, desc)
	  in
	    VChunk { chunk = chunk, region = region, draw = draw, erase = erase }
	  end


    #  given a world, recompute the visibility of the chunks in the world 
    fun checkVisibility (world as WORLD w) = let
	  view = *w.view
	  fun doChunk (id, chunk as Chunk { visible, desc, ... }, vm) = let
		isVis =isVisible (view, desc)
		in
		  visible := isVis;
		  if isVis
		    then int_map::set (vm, id, mkVisChunk (world, chunk))
		    else vm
		end
	  in
	    w.visMap := int_map::keyed_fold_left doChunk int_map::empty (*w.idMap)
	  end

    # Compute the resolution of the screen in pixels per inch 
    #
    fun resolution root = let
	  fun realSz (g::SIZE { wid, ht } ) = (real wid, real ht)
	  my (widP, htP) = realSz (w::sizeOfScr root)
	  my (widMM, htMM) = realSz (w::sizeMMOfScr root)
	  fun result (pixels, mm) = (25.4 * pixels) / mm
	  in
	    { x_res = result (widP, widMM), y_res = result (htP, htMM) }
	  end

    fun makeWorld (root, canvas, fontServer, bg, size as g::SIZE { wid, ht }, initialBBox) = let
	  my { x_res, y_res } = resolution root
	  pixelsPerIn = if float.!=(x_res, y_res)
		then 0.5*(x_res+y_res)
		else x_res
	  fun padBBox { minX, maxX, minY, maxY } = let
/*
		xPad = 0.5 * (maxX - minX) and yPad = 0.5 * (maxY - minY)
*/
		xPad = 1.5 and yPad = 1.5
		in
		  { minX = minX - xPad, maxX = maxX + xPad,
		    minY = minY - yPad, maxY = maxY + yPad
		  }
		end
	  bbox = (case initialBBox
		 of NULL => padBBox {
			minX = 0.0, maxX = (real wid) / pixelsPerIn,
			minY = 0.0, maxY = (real ht) / pixelsPerIn
		      }
# * if the given BBox is smaller than the view, need to grow the BBox *
		  | (THE bbox) => padBBox bbox 
		)		# end case
	  view = v::makeView {
		  minX = bbox.minX, maxX = bbox.maxX,
		  minY = bbox.minY, maxY = bbox.maxY,
		  scale = pixelsPerIn,
		  wid = wid, ht = ht
		}
	  in
/**
let vb = v::viewVBox view in
file::print (format::format "mkWorld: wid = %d, ht = %d, pixels/in = %f\n" [
format::INT wid, format::INT ht, format::REAL pixelsPerIn
]);
file::print (format::format "  bbox:  minX = %f, minY = %f, maxX = %f, maxY = %f\n" [
format::REAL bbox.minX, format::REAL bbox.minY, format::REAL bbox.maxX, format::REAL bbox.maxY
]);
file::print (format::format "  vbox:  minX = %f, minY = %f, maxX = %f, maxY = %f\n" [
format::REAL vb.minX, format::REAL vb.minY, format::REAL vb.maxX, format::REAL vb.maxY
]) end;
**/
	    WORLD {
		canvas = canvas,
		background = bg,
		findFont = ScalableFont::findFont fontServer,
		view = REF view,
		canvasSz = REF size,
		idMap = REF int_map::empty,
		visMap = REF int_map::empty,
		changed = REF [],
/*****
		posMap = REF (partitionSpace (bbox, [])),
*****/
		pens = REF [],
		idCnt = REF 0
	      }
	  end #  makeWorld 

    fun canvasOfWorld (WORLD { canvas, ... } ) = canvas

    fun viewOfWorld (WORLD { view, ... } ) = *view

  /* given a point in pixel coordinates, return the list of chunks (sorted
   * by increasing depth) that contain that point.
   * NOTE: eventually, this will be done using the BSP tree.
   */
    fun pickChunk (WORLD w, pt) = let
	  my (x, y) = v::pixelToUCoord (*w.view, pt)
	  fun scanChunk (vchunk as VChunk { chunk=Chunk { desc, ... }, ... }, l) =
		if (pointInChunk (desc, x, y)) then vchunk . l else l
	  fun proj (VChunk { chunk=Chunk { id, info=THE info, ... }, ... } ) = THE (id, info)
	    | proj _ = NULL
	  in
	    list::map_maybe_null_fn proj (
	      sortVisChunks (
	        int_map::fold_left scanChunk [] (*w.visMap)))
	  end

    fun addChunk (world as WORLD w, chunk, info, depth) = let
	  id = *w.idCnt
	  isVis = isVisible (*w.view, chunk)
	  chunk = Chunk {
		  id = id, desc = chunk, depth = depth, info = info, visible = REF isVis
		}
	  in
	  #  Add chunk to idMap 
	    w.idMap := int_map::set(*w.idMap, id, chunk);
	  #  if it is visible, add it to the visible map 
	    if isVis
	      then let
		vchunk = mkVisChunk (world, chunk)
		in
		  w.visMap := int_map::set(*w.visMap, id, vchunk);
		  w.changed := (DRAW, vchunk) . *w.changed
		end
	      
/*****
	  #  Add chunk to BSP; note that only chunks with info are added 
	    case info
	     of NULL => ()
	      | (THE info) => w.posMap := partitionSpace(?, ?)
	    /* end case */;
*****/
	    w.idCnt := (id+1);
	    id
	  end

    fun delChunk (WORLD w, id) = let
	  my (idMap', Chunk { visible, depth, ... } ) = int_map::remove(*w.idMap, id)
	  in
	    w.idMap := idMap';
	    if (*visible)
	      then let
		my (visMap', vchunk) = int_map::remove(*w.visMap, id)
		in
		  w.visMap := visMap';
		  w.changed := (ERASE, vchunk) . *w.changed
		end
	      else ()
	  end

  /* ensure that the view of the canvas reflects any chunk additions
   * and deletions.
   */
    fun updateCanvas (WORLD w) = let
	  fun split ([], dl, el) = (dl, el)
	    | split ((DRAW, vchunk) . r, dl, el) = split (r, vchunk . dl, el)
	    | split ((ERASE, vchunk) . r, dl, el) = split (r, dl, vchunk . el)
	  my (dl, el) = split (*w.changed, [], [])
	  damagedChunks = computeDamagedChunks (*w.visMap, regionOfChunks el)
	  in
/**
file::print (format::format "updateCanvas: %d changed, %d erase, %d draw, %d damaged\n"
[format::INT (length(*w.changed)), format::INT (length el), format::INT (length dl),  format::INT (length damagedChunks)]);
**/
	    apply eraseChunk el;
	    drawChunkList (dl @ damagedChunks);
	    w.changed := []
	  end #  updateCanvas 

    fun scrollAmount s = (case s
	   of (sb::ScrUp r) => THE r
	    | (sb::ScrDown r) => THE (-r)
	    | (sb::ScrStart r) => NULL
	    | (sb::ScrMove r) => NULL
	    | (sb::ScrEnd r) => NULL
	  )		# end case

    fun scrollFn scrollView (world as WORLD w, s) = let
	  v = *w.view
	  clear = d::clearArea (drawableOfWorld world)
	  in
	    case scrollAmount s
             of NULL => ()
              | (THE amt) => let
		  my (view', pixels) = scrollView (*w.view, amt)
		  my g::SIZE { wid, ht } = *w.canvasSz
		  newRect = g::BOX { x=0, y=0, wid=wid, ht=ht }
		  in
		    if (pixels != 0)
		      then (
			w.view := view';
			checkVisibility world;
#  should do bitblt to reduce redrawing 
			clear newRect;
			drawChunkList (computeDamagedChunks(*w.visMap,
			  r::box newRect)))
		      else ()
		  end
	    #  end case 
	  end

    fun vScroll arg = scrollFn v::vScrollView arg
    fun hScroll arg = scrollFn v::hScrollView arg

    fun zoom (world as WORLD w, zm) = let
	  v = v::zoomView (*w.view, zm)
	  my g::SIZE { wid, ht } = *w.canvasSz
	  in
	    w.view := v;
	    checkVisibility world;
	    d::clearDrawable (drawableOfWorld world);
	    drawChunkList (computeDamagedChunks(*w.visMap,
	      r::box (g::BOX { x=0, y=0, wid=wid, ht=ht } )))
	  end

    fun redrawCanvas (WORLD w, damageList) =
	  drawChunkList (computeDamagedChunks(*w.visMap, mkRegion damageList))

    fun resizeCanvas (WORLD w, size as g::SIZE { wid, ht } ) = (
	  w.canvasSz := size;
	  /** RESIZE the VIEW **/())

    # Get the associated info (if any) of a chunk.
    # Raise the NotFound exception if the ID is bogus:

    fun infoOfChunk (WORLD w, id) = let
	  my Chunk { info, ... } = the (int_map::find(*w.idMap, id))
	  in
	    info
	  end

  end #  World 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
