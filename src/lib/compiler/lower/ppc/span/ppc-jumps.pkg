
# Compiled by:
#     src/lib/compiler/lower/make7/ppc.make6



#                      "I much prefer the sharpest criticism
#                       of a single intelligent man to the
#                       thoughtless approval of the masses."
#
#                                         --Johann Kepler 

# We are invoked from:
#
#     src/lib/compiler/codegen/ppc/ppc-codegen.pkg

generic package ppc_jumps_g (

    package instruction_set: Instruction_Set_Ppc;	# Instruction_Set_Ppc	is from   src/lib/compiler/lower/ppc/instruction/instruction-set-ppc.api

    package shuffle:  Ppcshuffle			# Ppcshuffle		is from   src/lib/compiler/lower/ppc/instruction/ppc-shuffle.api
                      where instruction_set == instruction_set;

    package codetree_eval
	:
	Codetree_Eval					# Codetree_Eval		is from   src/lib/compiler/lower/codetree/codetree-eval.api
	where codetree == instruction_set::codetree;
)

: (weak) Span_Dependent_Jumps				# Span_Dependent_Jumps	is from   src/lib/compiler/lower/span/span-dependent-jumps.api

{
    package instruction_set =  instruction_set;
    package cells           =  instruction_set::cells;

    package i = instruction_set;
    package c = cells;
    package const = i::constant;
    package cb= cells_basis;				# cells_basis		is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    fun error msg
        =
        lowcode_error_message::error("ppc_jumps_g", msg);

    warn_long_branch
        =
	low_code_control::make_bool ("ppc-warn-long-branch",
			      "whether to warn about long form of branch");

    branch_delayed_arch = FALSE;

    fun is_sdi (i::NOTE { instruction, ... } ) => is_sdi instruction;
	is_sdi (i::LIVE _)	   => TRUE;
	is_sdi (i::DEAD _)	   => TRUE;
	is_sdi (i::COPY _)	   => TRUE;

	is_sdi (i::BASE_INSTRUCTION instruction)
            =>
            {   fun operand (i::LABEL_OP _) => TRUE;
		    operand _               => FALSE;
                end;

		case instruction
		    i::LL { d, ... } => operand d;
		    i::LF { d, ... } => operand d;
		    i::ST { d, ... } => operand d;
		    i::STF { d, ... } => operand d;
		    i::ARITHI { im, ... } => operand im;
		    i::ROTATEI { sh, ... } => operand sh;
		    i::COMPARE { rb, ... } => operand rb;
		    i::TW { si, ... } => operand si;
		    i::TD { si, ... } => operand si;
		    i::BC { address, ... } => operand address;
		    _ => FALSE;
		esac;
	    };
    end;


    # max Size is not used by the
    # PPC span dependency analysis:
    #
    fun max_size _
	=
	error "max_size";

    fun min_size (i::LIVE _)		  => 0;
	min_size (i::DEAD _)		  => 0;
	min_size (i::COPY _)		  => 0;
	min_size (i::NOTE { instruction, ... } ) => min_size instruction;
	min_size _ => 4;
    end;

    fun sdi_size (i::NOTE { instruction, ... }, labmap, loc) => sdi_size (instruction, labmap, loc);
	sdi_size (i::LIVE _, _, _) => 0;
	sdi_size (i::DEAD _, _, _) => 0;

	sdi_size (i::COPY { kind => cb::REGISTER, src, dst, tmp, ... }, _, _)
            =>
	    4 * length (shuffle::shuffle { tmp, dst, src } );

	sdi_size (i::COPY { kind => cb::FLOAT_REGISTER, src, dst, tmp, ... }, _, _)
            => 
	    4 * length (shuffle::shufflefp { src, dst, tmp } );

	sdi_size (i::BASE_INSTRUCTION instruction, labmap, loc)
            =>
            {
		fun signed16 n = -32768 <= n and n < 32768;
		fun signed12 n = -2048 <= n and n < 2048;
		fun signed14 n = -8192 <= n and n < 8192;
		fun unsigned16 n = 0 <= n and n < 65536;
		fun unsigned5 n = 0 <=n and n < 32;

		fun operand (i::LABEL_OP le, in_range, lo, hi)
                        => 
		        in_range (codetree_eval::value_of le)
                          ??  lo
                          ::  hi;

		    operand _
                        =>
                        error "sdiSize: operand";
		end;

		case instruction

		    i::LL { ld=>(i::LBZ | i::LHZ | i::LHA | i::LWZ), d, ... }
                        => 
		        operand (d, signed16, 4, 8);

		    i::LL { d, ... } => operand (d, signed12, 4, 8);
		    i::LF { ld=>(i::LFS | i::LFD), d, ... } => operand (d, signed16, 4, 8);
		    i::LF { d, ... } => operand (d, signed12, 4, 8);
		    i::ST { st=>(i::STB | i::STH | i::STW), d, ... } => operand (d, signed16, 4, 8);
		    i::ST { d, ... } => operand (d, signed12, 4, 8);
		    i::STF { st=>(i::STFS | i::STFD), d, ... } => operand (d, signed16, 4, 8);
		    i::STF { d, ... } => operand (d, signed12, 4, 8);

		    i::ARITHI { oper, im, ... }
			=> 
			case oper

			    i::ADDI
				=>
				operand (im, signed16, 4, 8);

			   (i::ADDIS | i::SUBFIC | i::MULLI)
				=>
				operand (im, signed16, 4, 12);

			   (i::ANDI_RC | i::ANDIS_RC | i::ORI | i::ORIS | i::XORI | i::XORIS)
			       => 
			       operand (im, unsigned16, 4, 12);

			   (i::SRAWI | i::SRADI)
			       =>
			       operand (im, unsigned5, 4, 12);
			esac;

		    i::ROTATEI { sh, ... }
                        =>
                        error "sdiSize: ROTATE";

		    i::COMPARE { cmp, rb, ... }
                        => 
			case cmp
			    i::CMP => operand (rb,   signed16, 4, 12);
			   i::CMPL => operand (rb, unsigned16, 4, 12);
			esac;

		    i::BC { address=>i::LABEL_OP lambda_expression, ... }
                        => 
		        signed14((codetree_eval::value_of lambda_expression - loc) / 4)
                          ??  4
                          ::  8;

		    _   =>
                        error "sdiSize";
		esac;
	    };

	sdi_size _
            =>
            error "sdi_size";
    end;

    fun value_of (i::LABEL_OP lambda_expression)
            =>
            codetree_eval::value_of lambda_expression;

        value_of _
            =>
            error "valueOf";
    end;

    fun split operand
	=
	{   i = value_of operand;
	    w = unt::from_int i;
	    hi = unt::(>>>) (w, 0u16);
	    lo = unt::bitwise_and (w, 0u65535);

	    my (high, low)
                = 
	        if (lo <  0u32768)  (hi, lo);
                else                (hi+0u1, lo - 0u65536);
                fi;

	   ( unt::to_int_x high,
             unt::to_int_x low
           );
	};

    fun cnv i::ADDI    => i::ADD;
	cnv i::SUBFIC  => i::SUBF; 
	cnv i::MULLI   => i::MULLW; 
	cnv i::ANDI_RC => i::AND; 
	cnv i::ORI     => i::OR; 
	cnv i::XORI    => i::XOR; 
	cnv i::SRAWI   => i::SRAW; 
	cnv i::SRADI   => i::SRAD; 
	cnv _         => error "cnv";
    end;

    fun expand (i::NOTE { instruction, ... }, size, pos)
            =>
            expand (instruction, size, pos);

	expand (i::LIVE _, _, _) => [];
	expand (i::DEAD _, _, _) => [];

	expand (i::COPY { kind => cb::REGISTER, src, tmp, dst, ... }, _, _)
            => 
	    shuffle::shuffle { src, dst, tmp };

	expand (i::COPY { kind => cb::FLOAT_REGISTER, src, tmp, dst, ... }, _, _)
            => 
	    shuffle::shufflefp { src, dst, tmp };

	expand (instruction as i::BASE_INSTRUCTION i, size, pos)
	    => 
	    case i

		i::LL { ld, rt, ra, d, mem }
		    =>
		    case size

		        4 => [i::ll { ld, rt, ra, d=>i::IMMED_OP (value_of d), mem } ];

		        8 => {   my (hi, lo) = split d;

				 [ i::arithi { oper=>i::ADDIS, rt=>c::asm_tmp_r, ra, im=>i::IMMED_OP hi },
				   i::ll { ld, rt, ra=>c::asm_tmp_r, d=>i::IMMED_OP lo, mem }
                                 ];
			     };

		        _ => error "expand: L";
		    esac;

		i::LF { ld, ft, ra, d, mem }
		    =>
		    case size

		        4 => [i::lf { ld, ft, ra, d=>i::IMMED_OP (value_of d), mem } ];

		        8 => {   my (hi, lo) = split d;

				 [ i::arithi { oper=>i::ADDIS, rt=>c::asm_tmp_r, ra, im=>i::IMMED_OP hi },
				   i::lf { ld, ft, ra=>c::asm_tmp_r, d=>i::IMMED_OP lo, mem }
                                 ];
		             };

		        _ => error "expand: LF";
		    esac;

		i::ST { st, rs, ra, d, mem }
		    =>
		    case size 

		        4 => [i::st { st, rs, ra, d=>i::IMMED_OP (value_of d), mem } ];

		        8 => {   my (hi, lo) = split d;

				 [ i::arithi { oper=>i::ADDIS, rt=>c::asm_tmp_r, ra, im=>i::IMMED_OP hi },
				   i::st { st, rs, ra=>c::asm_tmp_r, d=>i::IMMED_OP lo, mem }
                                 ];
			     };

		        _ => error "expand: ST";
		    esac;

		i::STF { st, fs, ra, d, mem }
		    =>
		    case size 

		        4 => [i::stf { st, fs, ra, d=>i::IMMED_OP (value_of d), mem } ];

		        8 => {   my (hi, lo) = split d;

			         [ i::arithi { oper=>i::ADDIS, rt=>c::asm_tmp_r, ra, im=>i::IMMED_OP hi },
			           i::stf { st, fs, ra=>c::asm_tmp_r, d=>i::IMMED_OP lo, mem }
                                 ];
			 };

		      _ => error "expand: STF";
		    esac;

		i::ARITHI { oper, rt, ra, im }
		    => 
		    case size

		        4 => [i::arithi { oper, rt, ra, im=>i::IMMED_OP (value_of im) } ];

		        8 => {   my (hi, lo) = split im; #  must be ADDI 

			         [ i::arithi { oper=>i::ADDIS, rt, ra, im=>i::IMMED_OP hi },
				   i::arithi { oper=>i::ADDI, rt, ra=>rt, im=>i::IMMED_OP lo }
                                 ];
			     };

		       12 => {   my (hi, lo) = split im;

			         [ i::arithi { oper=>i::ADDIS, rt=>c::asm_tmp_r, ra=>c::reg cells_basis::REGISTER 0, im=>i::IMMED_OP hi },
			           i::arithi { oper=>i::ADDI, rt=>c::asm_tmp_r, ra=>c::asm_tmp_r, im=>i::IMMED_OP lo },
			           i::arith { oper=>cnv oper, rt, ra, rb=>c::asm_tmp_r, oe=>FALSE, rc=>(oper == i::ANDI_RC) }
                                 ];
		             };
		        _ => error "ARITHI";
		    esac;

		i::BC { bo, bf, bit, fall, address, lk }
                    => 
		    case size

			4 => [instruction];

		        8 => {   new_bo = case bo 
					     i::TRUE => i::FALSE;
					     i::FALSE => i::TRUE;
					     i::ALWAYS => error "expand: newBO: BC";
					     i::COUNTER { eq_zero, cond } => error "expand: newBO: COUNTER";
					  esac;

				 if *warn_long_branch 
				     print("emiting long form of branch"  + "\n");
				 fi;

				 [ i::bc { bo=>new_bo, bf, bit, address=>fall, fall, lk=>FALSE },
				   i::bb { address, lk }
                                 ];
			     };

		        _ => error "expand: BC";
                    esac;

	        # The other span dependent instructions are not generated 
		#
	        i::COMPARE _
                    =>
                    error "expand: COMPARE";

	         _  =>
                    error "expand";
	     esac;

	expand _ => error "expand";
    end;				# fun expand
};
