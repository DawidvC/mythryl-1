
# This takes a bunch of RTL and build a database that can be reused.


###      "To understand that cleverness can lead to stupidity
###       is to be close to the ways of Heaven."
###
###                                  -- Huang Binhong


package build_rtl:  BUILD_RTL {

    package rtl = codetree_rtl
    package t   = rtl::T

    type aType = Int

    fun newOper name
        =
        REF { name=name, hash=0w0, attributes=0w0 }

    fun wordConst type w
        =
        t::LI32 (w)

    fun intConst type i
        =
        wordConst type (unt32::from_int i)

    fun error msg
        =
        lowcode_error_message::error("build_rtl", msg)

    fun fetch type loc
        =
        t::REXT (type, rtl::FETCH loc)

    wildCard =   newOper "?"

    fun op := type (x, y)
        =
        t::EXT (rtl::ASSIGN (x, y))

    noregion =   t::LITERAL 0

    fun @@@ (k, type) address
        =
        rtl::CELL (k, type, address, noregion)

    fun @@ (k, type) (address, region)
        =
        rtl::CELL (k, type, address, region)

    fun aggb (t1, t2) cell =   rtl::AGG (t2, rtl::BIG_ENDIAN,    cell)
    fun aggl (t1, t2) cell =   rtl::AGG (t2, rtl::LITTLE_ENDIAN, cell)
    fun idaggr t cell      =   rtl::AGG (t,  rtl::LITTLE_ENDIAN, cell)

    fun copy type (dst, src)
        =
        t::COPY_INTS (type,[],[])

    dummyType = 32

    fun ! (t, x, y)
        =
        t::REXT (t, rtl::ARG (x, y))

    #  Integer operators 
    fun unary   f type x         =   f (type, x) 
    fun binary  f type (x, y)    =   f (type, x, y)
    fun ternary f type (x, y, z) =   f (type, x, y, z)

    fun operand type opn
        =
        opn 

    fun label type label
        =
        label

    fun immed type imm
        =
        imm

    enum kind
         =
         GP | FP | CC

    fun newOp name
	= 
	{   oper =   newOper name;

	    fn xs =>   t::REXT (32, rtl::OP (oper, xs)) : rtl::expression;
	}

    newCond = newOp

    fun sx (t1, t2) e =   t::CVTI2I (t2, t::SIGN_EXTEND, t1, e)
    fun zx (t1, t2) e =   t::CVTI2I (t2, t::ZERO_EXTEND, t1, e)

    fun ? type
        =
        t::REXT (type, rtl::OP (wildCard,[]))

    fun forall t e
        =
        t::REXT (t, rtl::FORALL e)

    fun bitslice t2 ranges e
        =
	{   t1 =   fold_right (fn ((a, b), l) => b-a+1+l) 0 ranges;
	    r  =   map (fn (a, b) => { from=t::LITERAL a, to=t::LITERAL b } ) ranges;

	    t::REXT (t1, rtl::SLICE (r, t2, e));
        }

    not   = t::NOT
    False = t::FALSE
    True  = t::TRUE

    my op +  = binary t::ADD
    my op -  = binary t::SUB
    muls  = binary t::MULS
    mulu  = binary t::MULU
    divs  = ternary t::DIVS
    divu  = binary t::DIVU
    rems  = ternary t::REMS
    remu  = binary t::REMU

    fun (-_) type x
        =
        (op - type) (intConst type 0, x)

    bitwise_and  = binary t::BITWISEAND
    bitwise_or   = binary t::BITWISEOR
    bitwise_xor  = binary t::BITWISEXOR
    bitwise_not  = unary  t::BITWISENOT
    my <<    = binary t::LEFTSHIFT
    my >>    = binary t::RIGHTSHIFTU
    my >>>   = binary t::RIGHTSHIFT

    fun eqvb type (x, y)
        =
        bitwise_not type (bitwise_xor type (x, y))

    #  Trapping operators 
    addt  = binary t::ADDT
    subt  = binary t::SUBT
    mult  = binary t::MULT
    divt  = binary t::DIVT
    remt  = binary t::REMT

    fun cond type (x, y, z)
        =
        t::COND (type, x, y, z)

    #  Integer comparisons 

    fun compare cond type (x, y)
        =
        t::COMPARE (type, cond, x, y) 

    my ====   = compare t::EQ
    my op != = compare t::NE
    my op >  = compare t::GT
    my op <  = compare t::LT
    my op <= = compare t::LE
    my op >= = compare t::GE
    ltu   = compare t::LTU
    leu   = compare t::LEU
    gtu   = compare t::GTU
    geu   = compare t::GEU

    #  Floating point operators 
    fun funary f
	=
	{   oper =   newOper f;

	    fn type =>

                fn x  =>
                        t::REXT (type, rtl::OP (oper,[x]));
	}

    fun fbinary f
	=
	{   oper =   newOper f;

	    fn type =>

                fn (x, y) =>   t::REXT (type, rtl::OP (oper,[x, y])); 
	}

    fadd  = fbinary "FADD"
    fsub  = fbinary "FSUB"
    fmul  = fbinary "FMUL"
    fdiv  = fbinary "FDIV"
    fabs  = funary  "FABS"
    fneg  = funary  "FNEG"
    fsqrt = funary  "FSQRT"

    #  Floating point comparisons 
    fun fcmp fcond
	=
	{   name =   t::Basis::fcondToString fcond;
	    oper =   newOper name;

	    fn type =>

                fn (x, y) =>

	            t::CMP (type, t::NE, t::REXT (type, rtl::OP (oper,[x, y])), t::LITERAL 0); 
	}

    my |?|     = fcmp T::(?)
    my |!<=>|  = fcmp T::(!<=>)
    my |==|    = fcmp T::(====)
    my |?=|    = fcmp T::(?=)
    my |!<>|   = fcmp T::(!<>)
    my |!?>=|  = fcmp T::(!?>=)
    my |<|     = fcmp T::(<)
    my |?<|    = fcmp T::(?<)
    my |!>=|   = fcmp T::(!>=z)
    my |!?>|   = fcmp T::(!?>)
    my |<=|    = fcmp T::(<=)
    my |?<=|   = fcmp T::(?<=)
    my |!>|    = fcmp T::(!>)
    my |!?<=|  = fcmp T::(!?<=)
    my |>|     = fcmp T::(>)
    my |?>|    = fcmp T::(?>)
    my |!<=|   = fcmp T::(!<=)
    my |!?<|   = fcmp T::(!?<)
    my |>=|    = fcmp T::(>=)
    my |?>=|   = fcmp T::(?>=)
    my |!<|    = fcmp T::(!<)
    my |!?=|   = fcmp T::(!?=)
    my |<>|    = fcmp T::(<>)
    my |!=|    = fcmp T::(!=)
    my |!?|    = fcmp T::(!?)
    my |<=>|   = fcmp T::(<=>)
    my |?<>|   = fcmp T::(?<>)

    #  Action combinators 

    fun || (a, b)
        =
        t::EXT (rtl::PAR (a, b))

    Nop   = t::SEQ []

    fun Jmp  type e
        =
        t::JUMP([], e,[])

    fun Call type e
        =
        t::CALL { funct=e, targets=[], defs=[], uses=[],
			   cdefs=[], cuses=[], region= -1 }

    Ret   = t::RET([],[])

    fun If (x, y, z)
        =
        t::IF([], x, y, z)

    fun map type
        =
        list::map
}


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
