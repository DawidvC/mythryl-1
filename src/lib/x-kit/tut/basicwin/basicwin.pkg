## basicwin.pkg
## This code was transcribed from a C program that is under the following copyright:
## Copyright 1989 O'Reilly and Associates, Inc.

# Compiled by:
#     src/lib/x-kit/tut/basicwin/basicwin.make6

stipulate
    include threadkit;						# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xc =  xcore;					# xcore				is from   src/lib/x-kit/xclient/xcore.pkg
    package xd =  xdraw;					# xdraw				is from   src/lib/x-kit/xclient/xdraw.pkg
    package xf =  xfont;					# xfont				is from   src/lib/x-kit/xclient/xfont.pkg
    package xg =  xgeometry;					# xgeometry			is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xi =  xinput;					# xinput			is from   src/lib/x-kit/xclient/xinput.pkg
    package xs =  xselection;					# xselection			is from   src/lib/x-kit/xclient/xselection.pkg
    package xw =  xwindow;					# xwindow			is from   src/lib/x-kit/xclient/xwindow.pkg

    package ctl = thread_scheduler_control;			# thread_scheduler_control	is from   src/lib/src/lib/thread-kit/src/unix/thread-scheduler-control.pkg	
    package ib  = icon_bitmap;					# icon_bitmap			is from   src/lib/x-kit/tut/basicwin/icon-bitmap.pkg
herein

    package basic_win: (weak) api {

	do_it' : (List( String ), String, integer::Int) -> winix::process::Status;
	do_it:   String -> winix::process::Status;
	main:   (String, List( String )) -> winix::process::Status;

    }{
								    # thread_scheduler_control_g	is from   src/lib/src/lib/thread-kit/src/glue/thread-scheduler-control-g.pkg
	min_wid = 300;
	min_ht  = 200;

	min_sz = xg::SIZE { wide => min_wid, high => min_ht };

	# A trace module for debugging output (see threadkit manual) 
	#
	tracing  = tracing::make_trace_tree_leaf { parent => xtracing::xkit_tracing, name => "basic_win::tracing" };

	fun print_if f =   tracing::print_if  tracing  f;

	fun init display_name
	    =
	    {   print_if .{ "open display " + display_name; };

# XXX BUGGO FIXME need xauthentication here:
		xsession =   xc::open_xsession (display_name, NULL)
			    except
				xc::XSERVER_CONNECT_ERROR s
				    =
				    {   file::print s;
					file::print "\n";

					shut_down_thread_scheduler
					#	
					    winix::process::failure;
				    };

		screen = xc::default_screen_of  xsession;

		window_size
		    =
		    {   my  xg::SIZE { wide, high }
			    =
			    xc::size_of_screen screen;

			xg::SIZE { wide => wide / 3,
				   high => high / 4
				 };
		    };

									    # xwindow	is from   src/lib/x-kit/xclient/xwindow.pkg
		my (window, in_dict, _)
		    =
		    xw::make_simple_top_window
			screen
			{
			  border_color     =>  xc::black,
			  background_color =>  xc::rgb8_from_int 0xFFFFFF,
			  #	
			  site  => xg::WINDOW_SITE
				     { upperleft    =>  xg::POINT {  col => 0,  row => 0  },
				       size         =>  window_size,
				       border_width =>  1
				     }
			};


		# The real basicwin gets the
		# list of icon sizes for the
		# xsession here.


		icon_ro_pixmap = xc::make_ro_pixmap_from_cs_pixmap
				#
				screen
				#
				ib::icon_bitmap;

		print_if .{ "set properties"; };

									    # iccc		is from   src/lib/x-kit/xclient/src/api/xkit-lib-external-interface.pkg
									    # commandline	is from   src/lib/std/commandline.pkg
		xw::set_window_manager_properties
		    window
		      {
			argv        => commandline::get_arguments (),
			window_name => THE "Basic Window Program",
			icon_name   => THE "basicwin",

			size_hints  => [ xs::HINT_PPOSITION,
					 xs::HINT_PSIZE,
					 xs::HINT_PMIN_SIZE min_sz
				       ],

			nonsize_hints => [ xs::HINT_ICON_RO_PIXMAP  icon_ro_pixmap ],
			ilk_hints     => THE { res_name => "basicwin", res_ilk => "Basicwin" }
		      };

		xw::show_window  window;

		(xsession, screen, in_dict, window);
	    };

									    # drawing	is from   src/lib/x-kit/xclient/src/api/xkit-lib-external-interface.pkg
									    # pen		is from	  src/lib/x-kit/xclient/src/window/pen.pkg
									    # PV_FOREGROUND	def in    src/lib/x-kit/xclient/src/window/pen.pkg
	fun make_pen screen
	    =
	    xd::make_pen
	      [
		xd::FOREGROUND (xc::rgb8_from_int 0x000000),
		xd::LINE_WIDTH 6,
		xd::LINE_STYLE_ON_OFF_DASH,
		xd::CAP_STYLE_ROUND,
		xd::JOIN_STYLE_ROUND,
		xd::DASH_OFFSET 0,
		xd::DASH_LIST [12, 24]
	      ];

									    # font		is from   src/lib/x-kit/xclient/src/api/xkit-lib-external-interface.pkg
	fun load_font display
	    =
	    xf::open_font display "9x15";

	fun place_text (window, pen, font, xg::SIZE { wide, high } )
	    =
	    {   print_if .{ "place_text"; };

		draw_transparent_string
		    =
		    xd::draw_transparent_string
			(xd::drawable_of_window  window)
			pen
			font;

		text_width = xf::text_width font;

		my (font_high, font_descent)
		    =
		    {   my { ascent, descent }
			    =
			    xf::font_high font;

			(ascent + descent, descent);
		    };

		fun draw (y_pos, s)
		    =
		    {   w = text_width s;

			draw_transparent_string
			  ( xg::POINT { col => ((wide - w) / 2),
				        row => y_pos
				      },
			    s
			  );
		    };

		y_offset = (high / 2) - font_high - font_descent;

		my  xg::SIZE { wide => scr_wid, high => scr_ht }
		    =
		    xc::size_of_screen (xw::screen_of_window  window);

		depth = xc::depth_of_screen (xw::screen_of_window  window);

		print_if .{ "place_text: draw text"; };

		apply
		    draw
		    [
		      (font_high,			"Hi! I'm a window, who are you?"),
		      (high - (2*font_high),	"To terminate program: press any key"),
		      (y_offset,			"Screen Dimensions:"),
		      (y_offset + (1*font_high),	" Height - " + (int::to_string scr_ht)  + " pixels"),
		      (y_offset + (2*font_high),	" Width  - " + (int::to_string scr_wid) + " pixels"),
		      (y_offset + (3*font_high),	" Depth  - " + (int::to_string depth)   + " plane (s)"),
		      (high - font_high,		"or button while in this window.")
		    ];
	    };

	fun place_graphics (window, pen, xg::SIZE { wide => win_wid, high => win_ht } )
	    =
	    {   print_if .{ "place_graphics"; };

		wide = (3 * win_wid) / 4;
		high = win_ht / 2;

		xd::draw_box
		    #
		    (xd::drawable_of_window  window)
		    #
		    pen
		    #
		    (xg::BOX
		      { col => (win_wid / 2) - (wide / 2),
			row => (win_ht  / 2) - (high / 2),
			wide,
			high
		      }
		    );
	    };

	fun too_small (window, pen, font)
	    =
	    {   my { ascent, ... }
		    =
		    xf::font_high font;

		xd::draw_transparent_string
		    #
		    (xd::drawable_of_window  window)
		    pen
		    font;

		( xg::POINT { col => 2, row => ascent+2 },
		  "Too Small"
		);
	    };

	fun basicwin display_name
	    =
	    {   print_if .{ "basicwin init"; };

		my (xsession, screen, xi::KIDPLUG { from_mouse', from_keyboard', from_other', ... }, window)
		    =
		    init display_name;

		from_mouse'    =  from_mouse'    ==>  xi::envelope_contents;
		from_keyboard' =  from_keyboard' ==>  xi::envelope_contents;
		from_other'    =  from_other'    ==>  xi::envelope_contents;

		print_if .{ "basicwin make_pen"; };

		pen =  make_pen  screen;

		print_if .{ "load"; };

		font = load_font xsession;


		fun quit _
		    =
		    {   print_if .{ "QUIT"; };

			xc::close_xsession xsession;

			shut_down_thread_scheduler  winix::process::success;
		    };


		fun size_too_small (xg::SIZE { wide, high } )
		    =
		    (wide < min_wid) or (high < min_ht);


										    # window_dictionary	is from   src/lib/x-kit/xclient/src/window/window-dictionary.pkg
										    # MOUSE_FIRST_DOWN	def in    src/lib/x-kit/xclient/src/window/window-dictionary.pkg
										    # ETC_RESIZE		def in    src/lib/x-kit/xclient/src/window/window-dictionary.pkg
		fun loop size
		    =
		    {   fun do_mouse (xi::MOUSE_FIRST_DOWN _) =>  quit ();
			    do_mouse (xi::MOUSE_LAST_UP _)    =>  quit ();
			    do_mouse _                        =>  loop size;
			end;


			fun do_mom (xi::ETC_RESIZE (xg::BOX { wide, high, ... } ))
				=>
				loop (xg::SIZE { wide, high } );

			    do_mom (xi::ETC_REDRAW _)
				=>
				{	if (size_too_small size)
					#
					too_small (window, pen, font);
					();
				    else
					place_text     (window, pen, font, size);
					place_graphics (window, pen, size);
				    fi;

				    loop size;
				};

			    do_mom  xi::ETC_OWN_DEATH
				=>
				quit ();
			end;


			select [
			    from_mouse'    ==> do_mouse,
			    from_keyboard' ==> quit,
			    from_other'    ==> do_mom
			];
		    };


		print_if .{ "go"; };

		loop min_sz;
	    };

	fun do_it' (flgs, xsession, tq)
	    =
	    {   xtracing::init flgs;

		start_up_thread_scheduler'
		    #
		    (time::from_milliseconds tq)
		    #
		    (fn ()  =   {   xtracing::xspawn("basicwin", fn () = basicwin xsession);
				    ();
				}
		    );
	    };

	fun do_it s
	    =
	    do_it' ([], s, 20);

	fun main (program, "-display" ! server ! _) =>  basicwin server;
	    main _                                  =>  basicwin "";
	end;
    };						# package basic_win

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
