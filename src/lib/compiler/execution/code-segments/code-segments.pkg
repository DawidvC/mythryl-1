## code-segments.pkg

# Compiled by:
#     src/lib/compiler/execution/execute.make6



# An interface for manipulating code chunks.



###         "The Analytical Engine is not merely adapted
###          for tabulating the results of one particular
###          function and of no other, but for developing
###          and tabulating any function whatever."
###
###                           -- Ada Lovelace, 1842



package code_segments: Code_Segments {				# Code_Segments		is from   src/lib/compiler/execution/code-segments/code-segments.api

    package w8a = rw_unt8_vector;				# rw_unt8_vector	is from   src/lib/std/src/rw-unt8-vector.pkg
    package w8v =    unt8_vector;				# unt8_vector		is from   src/lib/std/src/unt8-vector.pkg

    Chunk
        =
        unsafe::unsafe_chunk::Chunk;				# unsafe		is from   src/lib/std/src/unsafe/unsafe.pkg

    Code_Segment
        =
        CODE_SEGMENT  {
	    entrypoint:  Ref( Int ),
	    chunk:  rw_unt8_vector::Rw_Vector
        };

    Code_Segments
	=
	{   c0:    Code_Segment,
	    cn:    List( Code_Segment ), 
	    data:  unt8_vector::Vector
	};

    Executable
        =
        Chunk -> Chunk;

    # Raised by input when there
    # are insufficient bytes:

    exception FORMAT_ERROR;

    stipulate
        package ci
            =
            unsafe::c_interface;				# unsafe		is from   src/lib/std/src/unsafe/unsafe.pkg
    herein
	my alloc_code:  Int -> w8a::Rw_Vector
            =
            ci::c_function "Lib7-Runtime" "allocCode";

	my make_literals:  w8v::Vector -> Chunk
            =
            ci::c_function "Lib7-Runtime" "mkLiterals";

	my make_executable:  (w8a::Rw_Vector, Int) -> Executable
            =
            ci::c_function "Lib7-Runtime" "mkExec";
    end;


    # Allocate an uninitialized code segment:

    fun alloc n
        =
	{    if   (n <= 0)      raise exception SIZE;    fi;

	     CODE_SEGMENT {
               entrypoint =>  REF 0,
               chunk      =>  alloc_code n
             };
        };

    # Allocate a code segment of the given size and initialize it
    # from the input stream.
    # NOTE: someday, we might read the data directly into the code
    # segment, but this will require hacking around with the reader.

    fun read (in_strm, size)
        =
        {   my (co as CODE_SEGMENT { chunk, ... } )
                =
                alloc size;

	    data =  binary_io::read_n (in_strm, size);

	    if   (w8v::length data < size)
	         
		 control_print::say (cat [
		    ".o7 file format error: expected ", int::to_string size,
		    " bytes, but only found ", int::to_string (w8v::length data)
		  ]);

		 raise exception FORMAT_ERROR;
	    fi;

	    w8a::copy_vec { from=>data, to=>chunk, di=>0 };

	    co;
	};



    #  Output a code segment to the given output stream 

    fun write (out_strm, CODE_SEGMENT { chunk, ... } )
        =
        {   binary_io::write (out_strm, unsafe::cast chunk);		# binary_io	is from   src/lib/std/src/unix/posix-binary-io.pkg

	    binary_io::flush out_strm;
        };



    # View the code segment as an updatable rw_vector of bytes:

    fun bytes (CODE_SEGMENT { chunk, ... } )
        =
        chunk;



    # View the code chunk as an executable.
    #
    # This has the side-effect of flushing
    # the instruction cache:

    fun exec (CODE_SEGMENT { chunk, entrypoint => REF ep } )
        =
        make_executable (chunk, ep);



    # Return the size of the code chunk 

    fun size (CODE_SEGMENT { chunk, ... } )
        =
        w8a::length chunk;


    fun entrypoint (CODE_SEGMENT c)
        =
        *(c.entrypoint);


    fun set_entrypoint (CODE_SEGMENT c,  entrypoint)
        =
        c.entrypoint :=  entrypoint;

};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
