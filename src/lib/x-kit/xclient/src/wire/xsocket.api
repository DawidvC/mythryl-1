## xsocket.api
#
# Manage binary socket I/O to an X server for an X client.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6





###        "To be on the wire is life.
###         The rest is waiting."
###
###           -- Karl Wallenda, highwire walker


									# Socket		is from   src/lib/std/src/socket/socket.api
									# socket		is from   src/lib/std/socket.pkg
									# socket_guts		is from   src/lib/std/src/socket/socket-guts.pkg
									# xerrors		is from   src/lib/x-kit/xclient/src/wire/xerrors.pkg
# This API is implemented by:
#     src/lib/x-kit/xclient/src/wire/xsocket.pkg

stipulate
    include threadkit;							# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package g   =  geometry;						# geometry		is from   src/lib/x-kit/xclient/src/window/geometry.pkg
    package xt  =  xtypes;						# xtypes			is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
herein

    api Xsocket {

	exception LOST_REPLY;
	exception ERROR_REPLY  xerrors::Xerror;

	Xsocket;

	make_xsocket:       socket::Socket( X, socket::Stream( socket::Active ) ) -> Xsocket;
	close_xsocket:      Xsocket -> Void;

	same_xsocket:      (Xsocket, Xsocket) -> Bool;

	request:            Xsocket -> unt8_vector::Vector -> Void;
	request_and_check:  Xsocket -> unt8_vector::Vector -> Mailop( Void );
	request_reply:      Xsocket -> unt8_vector::Vector -> Mailop( unt8_vector::Vector );

	request_replies
	    :
	    Xsocket
	    ->
	    (unt8_vector::Vector, (unt8_vector::Vector -> Int))
	    ->
	    Mailop( unt8_vector::Vector );

	request_with_exposures
	    :
	    Xsocket
	    ->
	    (unt8_vector::Vector,  oneshot_maildrop::Oneshot_Maildrop( Void -> List( g::Box )))
	    ->
	    Void;

	flush:  Xsocket -> Void;

	wait_for_xevent:  Xsocket -> Mailop( event_types::Xevent );

	read_xerror:  Xsocket -> (Unt, unt8_vector::Vector);



	################################################################################
	# X-server queries

	# A convenience function for querying the X server.
	# It is designed to be used via curried application
	# to define specific queries, e.g
	#
	#     query_font = query (v2w::encode_query_font, w2v::decode_query_font_reply);
	#
	query
	    :
	    ( X -> unt8_vector::Vector,		# The encode-query fn, from   src/lib/x-kit/xclient/src/wire/value-to-wire.api
	      unt8_vector::Vector -> Y		# The decode-reply fn, from   src/lib/x-kit/xclient/src/wire/wire-to-value.api
	    )
	    -> Xsocket				# Connection to the X server.
	    -> X				# The actual query info.
	    -> Y				# The reply.
	    ;	

	# Some predefined queries based on the above.
	# (Maybe we should predefine them all here?)
	#
	# It is possible these should be a separate
	# package, but for now it seems simplest to
	# just fold them into xsocket:

	query_font
	    :
	    Xsocket
	    ->
            { font: 	       xt::Xid }
	    ->
            {
	      all_chars_exist: Bool, 
	      default_char:    Int, 
	      #
	      char_infos:      List(xt::Char_Info), 
	      draw_dir:        xt::Font_Drawing_Direction, 
	      #
	      font_ascent:     Int,
	      font_descent:    Int, 
	      #
	      min_bounds:      xt::Char_Info, 
	      max_bounds:      xt::Char_Info,
	      #
	      max_byte1:       Int, 
	      min_byte1:       Int,
	      #
	      min_char:        Int, 
	      max_char:        Int,
	      #
	      properties:      List(xt::Font_Prop)
	    }
	    ;

	# See   p34 http://mythryl.org/pub/exene/X-protocol-R6.pdf
	#
	query_pointer
	    :	
	    Xsocket
	    ->
	    { window_id:    xt::Xid }
	    ->
	    { child:			Null_Or(xt::Xid),		# Child window containing the mouse pointer.
	      #
	      mousebuttons_state:	xt::Mousebuttons_State, 
	      modifier_keys_state:	xt::Modifier_Keys_State, 
	      #
	      root:			xt::Xid,			# Root window containing the mouse pointer.
	      #
	      root_point:		g::Point,			# Mouse position in root  window coordinates.
	      window_point:		g::Point,			# Mouse position in local window coordinates.
	      #
	      same_screen: 		Bool				# Normally TRUE; FALSE if mouse pointer is not on this screen.
	    }
	    ;

	query_colors
	    :
	    Xsocket
	    ->
	    { cmap:	xt::Xid,
	      pixels:   List(rgb8::Rgb8)
	    }
	    ->
	    List(rgb::Rgb)
	    ;

	query_best_size
	    :	
	    Xsocket
	    ->
            { drawable: xt::Xid,
              ilk:      xt::Best_Size_Ilk, 
	      size:     g::Size
            }
	    ->
	    { high:	Int,
              wide:	Int
            }
	    ;
	
	query_text_extents
	    :
	    Xsocket
	    ->
	    { font:	xt::Xid,
              string:	String
	    }
	    ->
	    { draw_direction:  xt::Font_Drawing_Direction,
	      #
	      font_ascent:     unt32::Unt,
	      font_descent:    unt32::Unt, 
	      #
	      overall_ascent:  unt32::Unt, 
	      overall_descent: unt32::Unt,
	      #
	      overall_left:    unt32::Unt, 
	      overall_right:   unt32::Unt,
	      #
	      overall_width:   unt32::Unt
	    }
	    ;

	# See   p23 http://mythryl.org/pub/exene/X-protocol-R6.pdf
	#
	query_tree
	    :
	    Xsocket
	    ->
	    { window_id:	xt::Xid }
	    ->
	    { children:		List(xt::Xid), 
	      parent:		Null_Or(xt::Xid),
	      root:		xt::Xid
	    }
	    ;

	string_to_hex:                 String -> String;
	string_to_ascii:               String -> String;

	bytes_to_hex:     unt8_vector::Vector -> String;
	bytes_to_ascii:   unt8_vector::Vector -> String;

	# XXX BUGGO FIXME the above four belong somewhere like string:: and unt8_vector::
    };

end;



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
