#!/bin/sh
#
# This script is used to create the initial make files of a new project
# Usage: init-ffi 
#

PWD=`pwd`
PROJ=`basename $PWD`
PROJ1=`expr substr $PROJ 1 1 | tr a-z A-Z`
PROJ2=`expr substr $PROJ 2 '(' length $PROJ - 1 ')'`
UPROJ=$PROJ1$PROJ2

if [ ! -f Makefile ]; then
echo "Writing Makefile"
cat <<EOF >Makefile
############################################################################
#
#  These are user definable parameters
#
############################################################################
PROJECT=sml-$PROJ
RPMS=$PROJ $PROJ-devel
CONFIGPROG=$PROJ-config
CFLAGS=\`\$(CONFIGPROG) --cflags\`
LDFLAGS=\`\$(CONFIGPROG) --libs\`
SHARED_LIBRARIES=libsml$PROJ.so 
FFIS=$PROJ-ffi 
CM_FILES=$PROJ.cm 
C_HEADERS=<$PROJ.h> 
H_FILE=$PROJ.h
H_FILTER='s/((un)*signed)* long long *(int)* / struct {long lo; long hi; } /g'
MLNLFFIGEN_OPTS=-match '.*$PROJ.*'

include ../config/ffi-lib.make
EOF
fi


if [ ! -f make.pkg ]; then
echo "Writing make.pkg"
cat <<EOF >make.pkg
fun make file = if CM.make file then () else raise Fail("Can't load "^file);
fun again() = use "make.pkg";

make "../ffi-packager/ffi-packager.cm";

(*---------------------------------------------------------------------------
 * 
 * This program drives the sml-$PROJ library packaging process
 *
 *---------------------------------------------------------------------------*)
structure P =
GiftWrap
(  open FFIPackager
   open GiftWrapDefaults
   structure A = Ast
  
   val NAME     = "$PROJ"
   val NAME'    = "$PROJ"
   val VERSION  = "0.1"
   val ENUMS    = [("$PROJ-enums.sml","${UPROJ}Enums", "")]
   val DEFINES  = [("$PROJ-macros.sml","${UPROJ}Macros",
                     [
                      ("^[A-Z]",false)
                     ]
                   )
                  ]
   fun INIT info = 
       (Tr.declare info "^f-" (String o BoolIfCtypeIs "bool")
       )
)
EOF
fi


if [ ! -f $PROJ.cm ]; then
echo "Writing $PROJ.cm"
cat <<EOF >$PROJ.cm
Library
	library(FFI/$PROJ-ffi.cm)
is
	FFI/$PROJ-ffi.cm
EOF
fi
