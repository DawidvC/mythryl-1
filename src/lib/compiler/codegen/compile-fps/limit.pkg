## limit.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



###                 "To define is to limit."
###                         -- Oscar Wilde



# This file implements one of the
# fate-passing-style transforms.
# For context, see the comments in
#
#     src/lib/compiler/upper/highcode/highcode.api



# Checking for heap overflow on every heap allocation would be
# unacceptably slow, so instead we keep a generous amount of
# free space on the heap, and only check now and then.
#
# Our task in this file is to insert heap-limit checks in the
# code in such a way as to ensure that the checks happen often
# enough to guarantee that we never overrun the end of the heap.
#
# Nowadays, we also use this mechanism for scheduling periodic
# tasks like thread switches, so we need to guarantee that the
# heap-limit code gets called regularly even if -no- actual
# heap allocation is happening.



api Limit {

    nolimit:  List( fate_passing_style::Function )
              -> 
              ( List( fate_passing_style::Function ),
                (fate_passing_style::Highcode_Variable -> ((Int, Int)))
              );
};

package limit: (weak)  Limit
=
package {

    stipulate

      include fate_passing_style;

    herein

	say   =   controls::print::say;
	error =   error_message::impossible;

	package cgoptions= controls::cg;	# controls	is from   src/lib/compiler/toplevel/main/controls.pkg

	max_alloc = 1023;		# Maximum number of words to allocate per check 

	fun findescapes fl
	    =
	    {   exception LIMIT;

		my m:  int_hash_table::Hash_Table( Fun_Kind )
		    =  int_hash_table::make_table (32, LIMIT);

		apply (fn (k, f, _, _, _) =  int_hash_table::set m (f, k))
		      fl;

		escapes =   int_hash_table::get  m;

		{   escapes,
		    check =>   fn f =   case (escapes f)

					     KNOWN =>   int_hash_table::set m (f, KNOWN_CHECK);
					     _     =>   ();
					esac
		};
	    };

	# Path now counts instructions as well
	#  as allocations, for polling 
	#
	fun path escapes fl
	    = 
	    {   exception LIMIT';

		my b:  int_hash_table::Hash_Table( Fps_Expression )
		    =  int_hash_table::make_table (32, LIMIT');

		apply (int_hash_table::set b  o  (fn (_, f, _, _, body) =  (f, body)))
		      fl;

		body =   int_hash_table::get  b;


		my  m:  int_hash_table::Hash_Table { known: Fun_Kind, alloc: Int, instrs: Int }
		     =  int_hash_table::make_table( 32, LIMIT' );

		get =   int_hash_table::get  m;

		store_list_size =   2;	  # Size of store list entry.

		fun g (d, RECORD (RK_FBLOCK, vl, _, e)) => g (d + (length (vl) * 2) + 2, e);
		    g (d, RECORD (RK_FCONT, vl, _, e)) => g (d + (length (vl) * 2) + 2, e);
		    g (d, RECORD (RK_VECTOR, vl, _, e)) => g (d + length (vl) + 4, e);

		    g (d, RECORD(_, vl, _, e)) => g (d+length (vl)+1, e);
		    g (d, SELECT(_, _, _, _, e)) => g (d, e);
		    g (d, OFFSET(_, _, _, e)) => g (d, e);

		    g (d, SWITCH(_, _, el)) => fold_right int::max 0 (map (fn e = g (d, e)) el);
		    g (d, SETTER (p::ASSIGN, _, e)) => g (d+store_list_size, e);
		    g (d, SETTER (p::UPDATE, _, e)) => g (d+store_list_size, e);
		    g (d, SETTER (p::BOXED_SET, _, e)) => g (d+store_list_size, e);
		       /*** should be +0 when unboxedfloat is turned on ***/   
		    g (d, ARITH (p::ARITH { kind=>p::FLOAT 64, ... }, _, _, _, e)) => g (d+3, e);   
		    g (d, ARITH (p::ARITH { kind=>p::INT _, ... }, _, _, _, e)) => g (d+1, e);   
		    g (d, ARITH (p::TESTU _, _, _, _, e)) => g (d+1, e);
		    g (d, ARITH (p::TEST _, _, _, _, e)) => g (d+1, e);

		    g (d, ARITH (p::TEST_INF _, _, _, _, e)) => error "9827489 test_inf in limit";

		    g (d, ARITH(_, _, _, _, e)) => g (d, e);
		    g (d, PURE (p::PURE_ARITH { kind=>p::FLOAT 64, ... }, _, _, _, e)) => g (d+3, e);
		    g (d, PURE (p::REAL { tokind=>p::FLOAT 64, ... }, _, _, _, e)) => g (d+3, e);       
		    g (d, PURE (p::FWRAP, _, _, _, e)) => g (d+4, e);     
		    g (d, PURE (p::IWRAP, _, _, _, e)) => g (d+2, e);     
		    g (d, PURE (p::I32WRAP, _, _, _, e)) => g (d+2, e);     
		    g (d, PURE (p::NEWARRAY0, _, _, _, e)) => g (d+5, e);
		    g (d, PURE (p::MAKEREF, _, _, _, e)) => g (d+2, e);
		    g (d, PURE (p::MAKE_SPECIAL, _, _, _, e)) => g (d+2, e);

		    g (d, PURE (p::RAWRECORD tag,[INT n], _, _, e))
                        => 
			g (d+n+(case tag    THE _ => 1;  NULL => 0; esac), e);

		    g (d, PURE((p::TRUNC_INF _ | p::EXTEND_INF _ | p::COPY_INF _), _, _, _, e))
                        =>
		        error "23487978 *_inf in limit";

		    g (d, LOOKER (p::NUMSUBSCRIPT { kind=>p::FLOAT 64 }, _, _, _, e)) => g (d+3, e);
		    g (d, SETTER(_, _, e)) => g (d, e);
		    g (d, LOOKER(_, _, _, _, e)) => g (d, e);
		    g (d, PURE(_, _, _, _, e)) => g (d, e);
		    g (d, RAW_C_CALL(_, _, _, _, _, e)) => g (d, e);
		    g (d, BRANCH(_, _, _, a, b)) => int::max (g(d, a), g (d, b));

		    g (d, APPLY (LABEL w, _))
			=> 
			case (maxpath w)

			    { known=>KNOWN, alloc=>n, instrs=>i }
				=> 
				if (d+n > max_alloc)
				     int_hash_table::set m (w,{ known=>KNOWN_CHECK,
								alloc=>n,
								instrs=>i } );
				      d;
				else d+n;fi;

			    _ => d;
			esac;

		    g (d, APPLY(_, _)) => d;
	   #        g (d, RECORD (RK_SPILL, vl, _, e)) = g (d + (length (vl) * 4) + 1, e) 
		    g (d, MUTUALLY_RECURSIVE_FNS _) => error "8932 in limit";
		end 

		also
		fun h (d, RECORD(_, _, _, e)) => h (d+1, e);
		    h (d, SELECT(_, _, _, _, e)) => h (d+1, e);
		    h (d, OFFSET(_, _, _, e)) => h (d+1, e);
		    h (d, SWITCH(_, _, el)) => fold_right  int::max  1  (map (fn e = g (d, e)) el);
		    h (d, SETTER(_, _, e)) => h (d+1, e);
		    h (d, ARITH(_, _, _, _, e)) => h (d+1, e);      
		    h (d, PURE(_, _, _, _, e)) => h (d+1, e);      
		    h (d, LOOKER(_, _, _, _, e)) => h (d+1, e);
		    h (d, RAW_C_CALL(_, _, _, _, _, e)) => h (d+1, e);
		    h (d, BRANCH(_, _, _, a, b)) => int::max (h(d, a), h (d, b)) + 1;

		    h (d, APPLY (LABEL w, _))
			=> 
			case (maxpath w)    
			     { known=>KNOWN, alloc, instrs=>i } => d+i;
			    _ => d;
			esac;
		    h (d, APPLY(_, _)) => d;
		    h (d, MUTUALLY_RECURSIVE_FNS _) => error "8932.1 in limit";
	       end 

	       also
	       fun maxpath w
		    =
		    get w
		    except
			LIMIT'
			=>
			# Note that the heap may need
                        # to be aligned so g is called
                        # with g (1, bod). Be conservative.
			#
			case (escapes w)

			    KNOWN
				=>
				{   bod =   body w;
				    n   =   g (1, bod);
				    i   =   h (0, bod);

				    z   =   n > max_alloc   ??   { known=>KNOWN_CHECK, alloc=>n, instrs=>i }
							    ::   { known=>KNOWN,       alloc=>n, instrs=>i };

				    int_hash_table::set m (w, z);

				    z;
				};

			    kind
				=>
				{   bod =   body w;

				    z   =   {   int_hash_table::set m (w, { known=>kind,
									    alloc=>0,
									    instrs=>0 } );
						{ known  => kind,
						  alloc  => g (1, bod),
						  instrs => h (0, bod)
						};
					    };

				    int_hash_table::set m (w, z);

				    z;
				};
                        esac;
		end;

		apply (fn (_, x, _, _, _) = { maxpath x; ();})
                      fl;

		nfl =   map (fn (fk, v, args, cl, ce)
                                 =
                                 (.known (get v), v, args, cl, ce)
                            )
			    fl;

		( nfl,

		  fn x
		     =
		     {   f =   get x;

			 (   f.alloc,
			     f.instrs
			 );
		     }
		);
	    };

	fun nolimit fl
	    =
	    path escapes fl
	    where
		my  { escapes, check }
		    =
		    findescapes fl;

		fun makenode (_, f, vl, _, body)
		    =
		    (f, edges body)
		    where
			fun edges (RECORD(_, _, _, e)) => edges e;
			    edges (SELECT(_, _, _, _, e)) => edges e;
			    edges (OFFSET(_, _, _, e)) => edges e;
			    edges (SWITCH(_, _, el)) => list::cat (map edges el);
			    edges (SETTER(_, _, e)) => edges e;
			    edges (LOOKER(_, _, _, _, e)) => edges e;
			    edges (ARITH(_, _, _, _, e)) => edges e;
			    edges (PURE(_, _, _, _, e)) => edges e;
			    edges (RAW_C_CALL(_, _, _, _, _, e)) => edges e;
			    edges (BRANCH(_, _, _, a, b)) => edges a @ edges b;
			    edges (APPLY (LABEL w, _)) => case (escapes w)
                                                              KNOWN => [w]; 
							      _     => NIL;
                                                          esac;
			    edges (APPLY _) => NIL;
			    edges (MUTUALLY_RECURSIVE_FNS _) => error "8933 in limit";
			end;
		    end;

		if *cgoptions::printit
		     say "Starting feedback...";
		     controls::print::flush ();
		fi;

		apply check (feedback::feedback (map makenode fl));

		if *cgoptions::printit
		     say "Finished\n";
		     controls::print::flush ();
		fi;
	    end;

	nolimit
	    =
	    fn fl
	       =
	       if (not *cgoptions::printit)

		   nolimit fl;
	       else
		   my info as (newfl, limits)
                       =
                       nolimit fl;

		   fun showinfo (k, f, _, _, _)
		       = 
		       {   my (alloc, instrs) =   limits f;

			   s =   int::to_string alloc;
			   i =   int::to_string instrs;

			   say (highcode_var::name_of_highcode_variable f);
			   say "\t";

			   case k
			       KNOWN        =>  say "K  ";
			       KNOWN_CHECK  =>  say "H  ";
			       ESCAPE       =>  say "E  ";
			       FATE =>  say "C  ";
			       _ => error "nolimit 323 in limit.pkg";
			   esac;

			   say s;
			   say "\t";
			   say i;
			   say "\n";

		       };

		   apply showinfo newfl;

		   info;
	       fi;

    end;		# stipulate
};			#  package limit 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
