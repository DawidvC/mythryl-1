2006-11-27 CrT:

BUILDING TK
    Here's an overview of the start-up logic
    triggered by doing 'make tk' in the top-level
    install directory.

    The above make simply does a 'cd src/tk; make all'.

    The
	src/lib/tk/Makefile

    makefile contains the root configuration definitions
    for the critical parameters

	SMLTK_LIB     = /pub/home/cynbe/src/mythryl/mythryl7/mythryl7.110.58/mythryl7.110.58/src/lib/tk/lib
	SMLTK_TCL     = /usr/bin/wish
	SMLTK_LOGFILE = /pub/home/cynbe/src/mythryl/mythryl/mythryl7.110.58/mythryl7.110.58/tk.log
	SMLTK_BINARY   = /pub/home/cynbe/src/mythryl/mythryl7/mythryl7.110.58/mythryl7.110.58/bin/tk
	COMP      = njml
	COMP_BIN  = /pub/home/cynbe/src/mythryl/mythryl/mythryl7.110.58/mythryl7.110.58/bin/mythryld
	COMP_NAME = mythryl7.110.58

    It mainly passes these values to the

	src/lib/tk/src/Makefile

    makefile whose 'all' target is for our purpose

	all :   
		echo "use \"root_njml.pkg\"; \
		      tk.init(); \
		      tk.xSmlTk {imagefile=\"$(SMLTK_BINARY)\", banner=\"$(SMLTK_BANNER)\"};" | \
		$(SMLTK_COMP)

    where:

        root_njml.pkg contains

	    use "sys_dep.api";  (* Defines types of exportML() &tc. *)
	    use "njml.pkg";     (* SML/NJ-specific implementations for exportML() setPrintDepth(n) initTTY(abort) resetTTY() interruptable exec *)
	    use "root.pkg";     (* CM-produced root file -- basically does a 'use' of every sourcefile in the system. *)

        tk.init()

            is defined in   src/lib/tk/src/export.pkg
            as
		fun init()
		    =
		    (   resetTcl ();
			SysInit.initSmlTk ()
		    )

		where   resetTcl()   is defined in   src/lib/tk/src/com.pkg
		as


		    fun resetTcl()
			=
			(   gui_state::initGuiState();
			    ComState.initComState()
			)

		    where in turn the harmless    initGuiState()   is from   src/lib/tk/src/gui_state.pkg

			    fun initGuiState() = (GUI_state:=([],[]));

		    and initComState() is from   src/lib/tk/src/com_state_pipe.pkg

			    fun initComState()
				= 
			       (COM_state:= {wapp= NONE,
					     logfile=getLogfilename (),
					     wish= getWishPath(),
					     tclInit= getTclInit(),
					     libPath= getLibPath(),
					     tclAnswers=[]})

		and   SysInit.initSmlTk()   is defined in   src/lib/tk/src/sys_init.pkg


		    fun initSmlTk ()
			=
			(   checkUpdPaths();

			    SysDep.initTTY (fn ()=> print"[smltk] Abort.\n");

			    (* Default initializiation for the wish *)       
			    updTclInit
			      " set tcl_prompt1 \"puts -nonewline {} \" \n \
			       \ set tcl_prompt2 \"puts -nonewline {} \" \n ";

			    (* If DISPLAY has changed, re-initialize fonts: *)
			    let val nuDisplay= getDisplay()
			    in
				if   nuDisplay = (!oldDisplay)
				then ()
				else (   oldDisplay := nuDisplay;
					 Fonts.init(getLibPath())
				     )
			    end	           
		       )


        tk.xSmlTk

            is defined in   src/lib/tk/src/export.pkg
            as

		fun xSmlTk {imagefile, banner} 
		    =
		    SysDep.exportML {
			init      = SysInit.initSmlTk,
			banner    = banner,
			imagefile = imagefile
		    }


                where courtesy of      src/lib/tk/src/root_njml.pkg
                SysDep is defined in   src/lib/tk/src/njml.pkg
                with

                    fun exportML {...}
                        =
                            ... 
  		            if   Lib7.exportLib7 imagefile
                            then
				 (   print(banner^"\n");
				     init()
				 )
                            ...

                    where init() will in practice be SysInit.initSmlTk() -- see above

                where SysInit.initSmlTk is from
 




        The following is from src/lib/tk/doc/manual.html

	    Also, the dumped images call
                tk.initSmlTk
            first thing after they are loaded
            in order to correctly set 
                SMLTK_ROOT
            etc from the environment variables.

            This can be changed in
	        src/njml1.sml
            in the function
                xSmlTk

EVENT LOOP

    The main event loop, 'appLoop',  is sealed in 

	src/lib/tk/src/event_loop.pkg

    which provides 

	startTcl    (windows)
	startTclExn (windows)

    to start it up.

    These appear to be called only as part of
    examples and applications, not as part of
    the routine tk start-up procedure. 



*)
        fun update (CC v, vals)
            =
            let val _ = print "posix-tty.pkg:update(): TOP\n"
                val _ = print "posix-tty.pkg:update(): TOP\n"
                val _ = print "posix-tty.pkg:update(): TOP\n"
                val _ = print "posix-tty.pkg:update(): TOP\n"

                fun wvsub i
                    = 
                    let val _ = print ("posix-tty.pkg:update():wvsub: i < 0  = " ^ (if i <  0 then "true" else "false") ^ "\n")
                        val _ = print ("posix-tty.pkg:update():wvsub: i = 0  = " ^ (if i =  0 then "true" else "false") ^ "\n")
                        val _ = print ("posix-tty.pkg:update():wvsub: i < 1  = " ^ (if i <  1 then "true" else "false") ^ "\n")
                        val _ = print ("posix-tty.pkg:update():wvsub: i < 2  = " ^ (if i <  2 then "true" else "false") ^ "\n")
                        val _ = print ("posix-tty.pkg:update():wvsub: i < 3  = " ^ (if i <  3 then "true" else "false") ^ "\n")
                        val _ = print ("posix-tty.pkg:update():wvsub: i < 4  = " ^ (if i <  3 then "true" else "false") ^ "\n")
                        val _ = print ("posix-tty.pkg:update():wvsub: i > 26 = " ^ (if i > 26 then "true" else "false") ^ "\n")
                        val _ = print ("posix-tty.pkg:update():wvsub: i > 28 = " ^ (if i > 28 then "true" else "false") ^ "\n")
                        val _ = print ("posix-tty.pkg:update():wvsub: i > 30 = " ^ (if i > 30 then "true" else "false") ^ "\n")
                        val _ = print ("posix-tty.pkg:update():wvsub: i > 31 = " ^ (if i > 31 then "true" else "false") ^ "\n")
                        val _ = print ("posix-tty.pkg:update():wvsub: i > 32 = " ^ (if i > 32 then "true" else "false") ^ "\n")

                        val result = WV.sub(v,i)  

                        val _ = print "posix-tty.pkg:update():wvsub: DONE\n"
                        val _ = print "posix-tty.pkg:update():wvsub: DONE\n"
                        val _ = print "posix-tty.pkg:update():wvsub: DONE\n"
                        val _ = print "posix-tty.pkg:update():wvsub: DONE\n"
                        val _ = print "posix-tty.pkg:update():wvsub: DONE\n"
                        val _ = print "posix-tty.pkg:update():wvsub: DONE\n"
                        val _ = print "posix-tty.pkg:update():wvsub: DONE\n"
                        val _ = print "posix-tty.pkg:update():wvsub: DONE\n"
                        val _ = print "posix-tty.pkg:update():wvsub: DONE\n"
                        val _ = print "posix-tty.pkg:update():wvsub: DONE!!\n"
                    in
                        result  
                    end

                val _ = print "posix-tty.pkg:update(): about to mumble...\n"
                val _ = print "posix-tty.pkg:update(): about to mumble...\n"
                val _ = print "posix-tty.pkg:update(): about to mumble...\n"
                val _ = print "posix-tty.pkg:update(): about to mumble...\n"

                val mumble = WA.tabulate (nccs, wvsub)

                val _ = print "posix-tty.pkg:update(): mumble in hand\n"
                val _ = print "posix-tty.pkg:update(): mumble in hand\n"
                val _ = print "posix-tty.pkg:update(): mumble in hand\n"
                val _ = print "posix-tty.pkg:update(): mumble in hand\n"

                val result = mkCC (mumble, vals)

                val _ = print "posix-tty.pkg:update(): result in hand\n"
                val _ = print "posix-tty.pkg:update(): result in hand\n"
                val _ = print "posix-tty.pkg:update(): result in hand\n"
                val _ = print "posix-tty.pkg:update(): result in hand\n"
            in
                result
            end



                         val _ = print "src/lib/tk/src/njml.pkg:initTTY: 'else': back from getattr stdin...\n"
                         val _ = os.Process.sleep (Time.fromSeconds (Int.toLarge 1))
