/* Simple memoization.
 *
 * (C) 1999 Lucent Technologies, Bell Laboratories
 *
 * Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)
 */

# Compiled by:
#     src/app/make7/util/Make7_Utilities.make6

package memoize : api {
			 /* If g is the result of (memoize f),
                          * then calling g the first time will result
			  * in f being called with the same argument.
                          *
			  * Any subsequent call to g simply returns
                          * the result that was computed during the
                          * first call.
                          *
                          * Thus, f will be called at most
			  * once on g's behalf.
                          */
			  memoize:  (X -> Y) -> (X -> Y);
		     }
{



    fun memoize f
        =
        { cache = REF (fn _ => raise exception FAIL "memoize::memoize: uninitialized"; end );

	    fun first_time x
                =
                { v = f x;

		    fun later_on _
                        =
                        v;
		
		    cache := later_on;
		    v;
		};
	
	    cache := first_time;

	    (fn x => *cache x; end );
	};
};
