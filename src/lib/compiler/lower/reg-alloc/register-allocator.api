## register-allocator.api
#
# The interface to the new register allocator.
#
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

api Register_Allocator {

    package instruction_set:  Instruction_Set;			# Instruction_Set		is from   src/lib/compiler/lower/instruction/instruction-set.api
    package cells:            Cells;				# Cells				is from   src/lib/compiler/lower/instruction/cells.api

    package f:  Register_Allocation_Flowgraph; 			# Register_Allocation_Flowgraph	is from   src/lib/compiler/lower/reg-alloc/ra-flowgraph.api
      sharing f::instruction_set     == instruction_set;
      sharing instruction_set::cells == cells;

    package cb:  Cells_Basis					# Cells_Basis			is from   src/lib/compiler/lower/instruction/cells-basis.api
              =  cells_basis;

    Getreg
        =
        { pref:   List( cb::Cell_Id ),
          stamp:  Int, 
          prohibitions:   rw_vector::Rw_Vector( Int )
        }
        ->
        cb::Cell_Id;

    Mode = Unt;

    Spill_Loc == register_allocation_graph::Spill_Loc;


    # Optimizations/options.
    # 'or' them together:

    no_optimization:       Mode;
    dead_copy_elim:        Mode;
    biased_selection:      Mode;
    spill_coloring:        Mode;
    spill_coalescing:      Mode;
    spill_propagation:     Mode;
    has_parallel_copies:   Mode; 
	#
	# The above MUST be used when spill coloring is used and
	# you have parallel copies in the program. Otherwise, phantom
	# problems involving copy temporaries may appear.



    # Perform register allocation.
    #
    # spill_prohibitions is a list of register ranges (inclusive) that cannot be spilled.
    #
    Register_Allocation_Client
	= 
	{ cellkind:            cb::Cellkind,                # kind of register 
	  spill_prohibitions:  List( cb::Cell ),            # Don't spill these 
	  mem_regs:            List( cb::Cell ),            # memory registers 
	  k:                   Int,                         # number of colors 
	  dedicated:           Int -> Bool,                 # Dedicated registers 
	  getreg:              Getreg,                      # how to find a color 
	  copy_instr:          f::spill::Copy_Instr,        # how to make a copy 
	  spill:               f::spill::Spill,             # spill callback 
	  spill_src:           f::spill::Spill_Src,         # spill callback 
	  spill_copy_tmp:      f::spill::Spill_Copy_Tmp,    # spill callback 
	  reload:              f::spill::Reload,            # reload callback 
	  reload_dst:          f::spill::Reload_Dst,        # reload callback 
	  rename_src:          f::spill::Rename_Src,        # rename callback 
	  mode:                Mode                         # mode 
	}; 

     ra:  List( Register_Allocation_Client ) -> f::Flowgraph -> f::Flowgraph;

};
