
# (Non-deterministic) finite state automata 

api FSA =
api
   type Symbol  = Int
   type ruleno  = Int
   type groupid = Int
   type nfa 
   type node
   package int_set:  Set where type key::Key = Int

   my intsetToString:  int_set::set -> String

   #  methods for constructing an nfa 
   my nfa:         { min: Symbol, max: Symbol } -> nfa
   my newNode:     nfa -> node
   my setDelta:    node * Symbol * node -> node #  transition node 
   my setEpsilon:  node * node -> node          #  epsilon node 
   my setOr:       node * List( node ) -> node     #  Disjunction 
   my setAccept:   node * ruleno -> node        #  Accept state 
   my setBeginGroup:  node * groupid * node -> node 
   my setEndGroup:    node * groupid * node -> node 
   my setError:       node -> node

   #  Compute the epsilon closure 
   my computeClosure:  nfa -> Void

   #  query methods 
   my closure:         nfa -> node -> int_set::set
   my move:            nfa -> int_set::set ->  List (Symbol * int_set::set)
   my acceptingAll:    nfa -> int_set::set -> int_set::set #  set of rulenos 
   my accepting:       nfa -> int_set::set -> Null_Or( ruleno )

   # Get the begin groups and end groups that can occur in this state 
   # These are indexed by the group ids.

   my groupings:       nfa -> int_set::set ->  List( groupid ) * List( groupid )
end
