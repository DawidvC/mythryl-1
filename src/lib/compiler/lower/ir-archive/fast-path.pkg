#
# This module implements Tarjan's fast path computation algorithm.
#
# -- Allen Leung


###                    "The trouble with programmers is that you
###                     can never tell what a programmer is doing
###                     until it is too late."
###                                          -- Seymour Cray


generic package TarjanFastPath (Dom:  Dominator_Tree) : TARJAN_FAST_PATH
{

   package dom = Dom
   package g   = graph
   package a   = rw_vector

   enum pexp E = 
      NULLSET
   |  LAMBDA 
   |  EDGE of graph::edge( E )
   |  ||   of pexp( E ) * pexp( E )
   |  ++   of pexp( E ) * pexp( E )

   type pseq( E ) = List ( pexp(E) * Int * Int)

   infix || ++

   fun simp (NUL || x) = x
     | simp (x || NUL) = x
     | simp (NUL ++ x) = NUL
     | simp (x ++ NUL) = NUL
     | simp (EMP ++ x) = x
     | simp x = x

   fun solve P s = 

   fun decompose_and_sequence (G as g::GRAPH G, Dom as g::GRAPH dom) =
   let N        = dom.capacity ()
       ancestor = a::rw_vector (N,-1)
       derived  = a::rw_vector (N,-1)
       S        = a::rw_vector (N, LAMBDA)
       R        = a::rw_vector (N, NULLSET)
       fun eliminate (g::GRAPH G) =

       fun walk (u, lvl, sequence) =
   in
   end

}
