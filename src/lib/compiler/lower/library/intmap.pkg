## intmap.pkg



###          "The reasonable man adapts himself to the world;
###           the unreasonable man persists in trying to adapt the world to himself.
###           Therefore all progress depends on the unreasonable man."
###
###                                 -- George Bernard Shaw



package int_map:  INTMAP =
pkg
  use rw_vector list
  infix 9 sub
  wtoi = unt::toIntX
  itow = unt::from_int

  enum bucket X = NIL
                 | B of   (Int * X * bucket( X ) )


  enum intmap X =
    H of { table:  Ref( Rw_Vector( bucket( X ) ) ), elems: Ref( Int ), exn: exn, name: Null_Or( String ) }

  fun clear (H { table, elems, ... } ) = 
      if *elems > 0 then (table := rw_vector (32, NIL); elems := 0) else ()
  fun bucketapp f =
      let fun loop NIL = ()
	    | loop (B(i, j, r)) = (f (i, j); loop r)
      in loop
      end
  fun roundsize size = 
      let fun f x = if x >= size then x else f (x*2)
      in f 1
      end
  fun namednew (name, size, exn) =
      H { table=REF (rw_vector (roundsize size, NIL)), elems=REF 0, exn=exn, name=THE name }
  fun new (size, exn) =
      H { table=REF (rw_vector (roundsize size, NIL)), elems=REF 0, exn=exn, name=NULL }
  elems = fn (H { elems, ... } ) => *elems
  fun index (a, i) = wtoi (unt::bitwise_and (itow i, itow (rw_vector::length a - 1)))
  fun map (H { table, exn, ... } ) =
      (fn i => let fun find NIL = raise exception exn
		     | find (B(i', j, r)) = if i==i' then j else find r
		   my REF a = table
	       in find (a sub (index (a, i)))
	       end)
  fun mapWithDefault (H { table, exn, ... }, default) =
      (fn i => let fun find NIL = default
		     | find (B(i', j, r)) = if i==i' then j else find r
		   my REF a = table
	       in find (a sub (index (a, i)))
	       end)
  fun mapInt (H { table, exn, ... } ) =
      (fn i => let fun find NIL = i
		     | find (B(i', j, r)) = if i==i' then j else find r
		   my REF a = table
	       in find (a sub (index (a, i)))
	       end)
  fun rmv (H { table=REF a, elems, ... } ) i =
      let fun f (B(i', j, r)) = if i==i' then (elems := *elems - 1; r) else B (i', j, f r)
	    | f x = x
	  index = index (a, i)
      in update (a, index, f (a sub index))
      end
  fun apply f (H { table=REF a, ... } ) =
      let fun zap 0 = ()
	    | zap n = let m = n - 1 in bucketapp f (a sub m); zap m end
      in  zap (rw_vector::length a)
      end
  fun add (m as H { table as REF a, elems, name, ... } ) (v as (i, j)) =
    let size = rw_vector::length a
    in if *elems != size
       then let index = wtoi (unt::bitwise_and (itow i, itow (size - 1)))
	        fun f (B(i', j', r)) = if i==i' then B (i, j, r) else B (i', j', f r)
		  | f x = (elems := *elems+1; B (i, j, x))
	    in update (a, index, f (a sub index))
	    end
       else let newsize = size+size
	        newsize1 = newsize - 1
	        new = rw_vector (newsize, NIL)
		fun bucket n =
		    let fun add'(a, b, B (i, j, r)) =
		            if wtoi (unt::bitwise_and (itow i, itow newsize1)) == n
		            then add'(B (i, j, a), b, r)
		            else add'(a, B (i, j, b), r)
		          | add'(a, b, NIL) = 
		            (update (new, n, a);
			     update (new, n+size, b);
			     bucket (n+1))
		    in add'(NIL, NIL, a sub n)
		    end
	    in
	       bucket 0 except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) => ();
	       table := new;
	       add m v
	    end
    end
  fun intMapToList (H { table, ... } )=
     let a = *table;
	 last = rw_vector::length a - 1
         fun loop (0, NIL, acc) = acc
         |   loop (n, B (i, j, r), acc) = loop (n, r, (i, j) . acc)
         |   loop (n, NIL, acc) = loop (n - 1, a sub (n - 1), acc)
      in loop (last, a sub last,[])
     end
  fun values (H { table, ... } )=
   let a = *table;
	 last = rw_vector::length a - 1
         fun loop (0, NIL, acc) = acc
         |   loop (n, B (i, j, r), acc) = loop (n, r, j . acc)
         |   loop (n, NIL, acc) = loop (n - 1, a sub (n - 1), acc)
      in loop (last, a sub last,[])
     end
  fun keys (H { table, ... } )=
   let a = *table;
	 last = rw_vector::length a - 1
         fun loop (0, NIL, acc) = acc
         |   loop (n, B (i, j, r), acc) = loop (n, r, i . acc)
         |   loop (n, NIL, acc) = loop (n - 1, a sub (n - 1), acc)
      in loop (last, a sub last,[])
     end

  fun copy (H { table=REF a, elems, exn, name } ) =
  let a' = rw_vector::Rw_Vector (rw_vector::length a, NIL)
  in  rw_vector::copy { di=0, dst=a', len=NULL, si=0, src=a };
      H { table=REF a', elems=REF *elems, exn=exn, name=name }
  end

end



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
