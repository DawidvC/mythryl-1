
# This helper module allows you to derive a new GtkWidget subclass 

generic GadgetSubclass
    (package super :
     api
        type tag( X )
        my type:  (tag( gtk::base ), c::rw)  c::T.type( c::ptr( c::su_obj ) )
        my get_type:  Void -> mlrep::unsigned::word
     end
     type name:  String
     type self_data
    ) :> GTK_GADGET_SUBCLASS where type super_tag( X ) = super_tag( X )
                             where type self_data = self_data
=
package {
   use C Gtk ZString

   package e = ephemeral_obj

   type self_data = self_data
   type super_tag( X ) = super_tag( X )
   type self_t( X )   = X  
   type self_tag( X ) = X self_t super_tag 
   type Self = gtkptr'( self_tag )

   #  Type info for this new class 
   self_type = 
        e::new { init=REF NULL:  REF(  Null_Or(  mlrep::unsigned::word ) ),
              reinit=fn x => (x := NULL; x)
             }

   # Get a unique type id for this class 
   # NOTE: non-thread safe!!! XXX BUGGO FIXME

   fun get_type() =
       case e::get self_type of
         REF (THE t) => t
       | type as REF NULL => 
         let #  Allocate a new GtkTypeInfo object 
             info  = newObj' GtkTypeInfo::size
             use GtkTypeInfo
             #  Initialize the fields 

                #  All wrong! XXX 
             my () = set::ptr' (f_type_name' info, dupML' name)
             my () = set::uint'(f_object_size' info, 0w0)
             my () = set::uint'(f_class_size' info, 0w0)
             my () = set::fptr'(f_class_init_func' info, FNULL)
             my () = set::fptr'(f_object_init_func' info, FNULL)
             my () = set::fptr'(f_reserved_1' info, NULL)
             my () = set::fptr'(f_reserved_2' info, NULL)
             my () = set::fptr'(f_base_class_init_func' info, FNULL)

                 #  Allocate a new type id 
             t  = gtk_type_unique::f (super_get_type(), &info)

         in  type := THE t;
             t
         end

   #  Upcasting function 
   fun asSelf x = x

   #  Downcasting function 
   fun cast' x:  Self( base ) = gtk_downcast::downcast (get_type, x)
   fun cast (x:  GtkObject( X )) = cast'(Ptr::inject' x)

   #  Extract data 
   fun get_data x = 

end
}
