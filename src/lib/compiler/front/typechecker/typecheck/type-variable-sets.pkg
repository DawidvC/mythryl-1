## type-variable-sets.pkg

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6



api Typevariable_Set {

     Type_Variable_Set;

     empty:      Type_Variable_Set;

     singleton:  types::Typevar_Ref  ->  Type_Variable_Set;

     make_type_variable_set:  List( types::Typevar_Ref )  ->  Type_Variable_Set;

     union:      (Type_Variable_Set, Type_Variable_Set, error_message::Plaint_Sink)  ->  Type_Variable_Set;
     diff:       (Type_Variable_Set, Type_Variable_Set, error_message::Plaint_Sink)  ->  Type_Variable_Set;
     diff_pure:  (Type_Variable_Set, Type_Variable_Set                            )  ->  Type_Variable_Set;

     get_elements:  Type_Variable_Set  ->  List( types::Typevar_Ref );

};

package type_variable_set:  Typevariable_Set {		# Typevariable_Set	is from   src/lib/compiler/front/typechecker/typecheck/type-variable-sets.pkg

    stipulate 

	package em= error_message;	# error_message	is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
	include types; 
	fun bug msg = error_message::impossible("type_variable_set: " + msg);

    herein

        Type_Variable_Set = List( Typevar_Ref );

	empty = NIL;
	fun singleton t = [t];
	fun make_type_variable_set l = l;
	fun get_elements s = s;

	fun is_member
                (                           a as REF (USER_TYPE_VARIABLE { name=>name_a, eq=>eq_a, fn_nesting=>fn_nesting_a } ), 
		  { id => _, ref_typevar => b as REF (USER_TYPE_VARIABLE { name=>name_b, eq=>eq_b, fn_nesting=>fn_nesting_b } ) } ! rest,
                   err
                )
                =>
		if (a == b)

                     TRUE;

		elif (symbol::eq (name_a, name_b) )

		     if (eq_a != eq_b)
			err em::ERROR ("type variable " + (symbol::name name_a) +
				      " occurs with different equality properties \
				       \in the same scope")
			    em::null_error_body;
		     fi;

		     if (fn_nesting_a != fn_nesting_b)   bug "is_member:  fn_nesting levels differ";
		     fi;

		     # USER_TYPE_VARIABLE type_variables are created with fn_nesting == infinity
		     # and this should not change until type checking is done

		     a := RESOLVED_TYPE_VARIABLE
                            (TYPE_VARIABLE_REF
                                (types::make_type_variable_ref' (b, ["is_member  from  type_variable_set"])));

		     TRUE;
		else
                     is_member (a, rest, err);
                fi;

	   is_member _ => FALSE;
        end;

	fun is_member_pure
		(
		                          (a as REF (USER_TYPE_VARIABLE { name=>name_a, ... } )), 
		 { id => _, ref_typevar => b as REF (USER_TYPE_VARIABLE { name=>name_b, ... } ) } ! rest
		)
		=>
		if   (a == b)                       TRUE;
		elif (symbol::eq (name_a, name_b))  TRUE;
		else                                is_member_pure (a, rest);
		fi;

	    is_member_pure _ => FALSE;
        end;

	fun union([], s, err) => s;
	    union (s,[], err) => s;

	    union ((v as { id, ref_typevar => a }) ! r,  s,  err)
	       =>
	       if (is_member (a, s, err) )      union (r, s, err);
	       else                         v ! union (r, s, err);
               fi;
        end;

	fun diff (s,[], err) => s;
	    diff([], _, err) => [];

	    diff ((v as { id, ref_typevar => a }) ! r, s, err)
	       =>
	       if (is_member (a, s, err) )     diff (r, s, err);
	       else                        v ! diff (r, s, err);
               fi;
        end;

	fun diff_pure (s,[]) => s;
	    diff_pure([], _) => [];

	    diff_pure ((v as { id, ref_typevar => a }) ! r, s)
	       =>
	       if (is_member_pure (a, s) )      diff_pure (r, s);
	       else                         v ! diff_pure (r, s);
               fi;
        end;

    end;	#  stipulate
};		#  Abstraction type_variable_set 



## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
