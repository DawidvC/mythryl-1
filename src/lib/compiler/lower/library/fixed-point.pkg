# 
# A simple fixed point enum
# 
# -- Allen Leung


generic package FixedPoint (my decimal_bits:  Int) : FIXED_POINT =
pkg

   package w = Word31

   infix << >> 
   infix & ||

   decimal_places = (decimal_bits + 2) div 3
   realToString   = float::fmt (string_conversion::FIX (THE decimal_places))

   my op<< = W.<<
   my op>> = W.>>
   my op&  = w::bitwise_and
   my op|| = w::bitwise_or
   my op div = w::div
   word = w::from_int
   int  = w::toInt

   type fixed_point = w::word

   bits  = word decimal_bits
   bits2 = bits >> 0w1
   bits4 = bits >> 0w2

   zero     = 0w0
   one      = 0w1 << bits
   realOne  = float::from_int (int one)

   compare  = w::compare

   my op*      = fn (i: fixed_point, j: fixed_point) => W.*(i >> bits2, j >> bits2)
   my op/      = fn (i: fixed_point, j: fixed_point) => (i << bits) div j

   mask     = one - 0w1

   fun from_int i    =  (word i) << bits
   fun fixed_point (a, b) = let b' = word b
                          in (((word a) << bits) + (b' >> 0w1)) div b' end
   fun from_float r    = word (float::round (float.*(r, realOne)))
   fun to_float p      = float./(float::from_int (int p), realOne)
   fun toWord f      = f

   fun to_string p
       =
       realToString (to_float p)
       except
           OVERFLOW = "inf";

   fun scale (i, j)   = W.*(i, word j)
   fun i div j      = w::div (i, word j)

   min = w::min 
   max = w::max 

end

