# sparse-rw-vector.pkg
# Dynamic (sparse) rw_vector that uses hashing
#
# -- Allen Leung

# Compiled by:
#     src/lib/src/lib7.make6
#     src/lib/thread-kit/threadkit-lib/cm-descr/lib7.make6

package sparse_rw_vector
: (weak)  
api {
    include Rw_Vector;		# Rw_Vector	is from   src/lib/std/src/rw-vector.api

    make_rw_vector' : (Int, (Int -> X)) -> Rw_Vector( X );
    make_rw_vector'': (Int, (Int -> X)) -> Rw_Vector( X );

    remove:     (Rw_Vector( X ), Int) -> Void;

    clear:       Rw_Vector( X ) ->  Void; 
    dom:         Rw_Vector( X ) ->  List( Int );
    copy_array:  Rw_Vector( X ) ->  Rw_Vector( X );
}
{
    package a= rw_vector;	# rw_vector	is from   src/lib/std/src/rw-vector.pkg

    Default X = VVV  X | FFF  Int -> X | UUU  Int -> X;

    Rw_Vector X
        = 
        ARRAY  (Ref( a::Rw_Vector( List ((Int, X)) ) ), Default( X ), Ref( Int ), Ref( Int ));

    Vector( X ) = vector::Vector( X );

    max_len   = a::max_len;

    fun make_rw_vector  (n, d) = ARRAY (REF (a::make_rw_vector (16,[])), VVV d, REF n, REF 0);
    fun make_rw_vector' (n, f) = ARRAY (REF (a::make_rw_vector (16,[])), FFF f, REF n, REF 0);
    fun make_rw_vector''(n, f) = ARRAY (REF (a::make_rw_vector (16,[])), UUU f, REF n, REF 0);

    fun clear (ARRAY (r, d, n, c))
        =
        {   r := a::make_rw_vector (16,[]);
            n := 0;
            c := 0;
        };

    fun roundsize n
	=
	{   fun loop i
                =
                if (i >= n ) i; else loop (i+i);fi;

	    loop 1;
	}; 

    fun copy_array (ARRAY (REF a, d, REF n, REF c))
        = 
        {   a' = a::make_rw_vector (n,[]);
            a::copy { from=>a, to=>a', di=>0 };
            ARRAY (REF a', d, REF n, REF c);
        };

    itow = unt::from_int;
    wtoi = unt::to_int_x;

    fun index (a, i)
        =
        wtoi (unt::bitwise_and (itow i, itow (rw_vector::length a - 1)));

    fun tabulate (n, f)
	=
	{   nnn = n*n+1;
	    nnn = if (nnn < 16 ) 16; else roundsize nnn;fi;
	    a = a::make_rw_vector (nnn,[]);

	    fun ins i
                = 
		{   pos = index (a, i);
		    x   = f i;
		    a::set (a, pos, (i, x) ! a::get (a, pos)); x;
		};

	    fun insert 0 => ins 0;
	        insert i => {  ins i;   insert (i - 1);  };
            end;

 	    if (n < 0)   ARRAY (REF a, FFF (fn _ = raise exception SUBSCRIPT), REF 0, REF 0);
	    else         ARRAY (REF a, VVV (insert (n - 1)), REF n, REF n);
            fi;
	};


    fun from_list l
	=
	{   n   = length l;
	    nnn = n*n+1;
	    nnn = if (nnn < 16 ) 16; else roundsize nnn;fi;
	    a   = a::make_rw_vector (nnn,[]);

	    fun ins (i, x)
                = 
		{   pos = index (a, i);
		    a::set (a, pos, (i, x) ! a::get (a, pos)); x;
		};

	    fun insert (i,[])     =>  FFF (fn _ = raise exception SUBSCRIPT);
	        insert (i,[x])    =>  VVV (ins (i, x));
	        insert (i, x ! l) =>  { ins (i, x);   insert (i+1, l);};
            end;

	    ARRAY (REF a, insert (0, l), REF n, REF n);
	};


    fun length (ARRAY(_, _, REF n, _))
        =
        n;


    fun get (a' as ARRAY (REF a, d, _, _), i)
	= 
	search (a::get (a, pos))
	where
	    pos = index (a, i);

	    fun search []
                    =>
                    case d
			#
			VVV d =>  d;
			FFF f =>  f i;
			UUU f =>  {   x = f i;
				      set (a', i, x);
				      x;
				  };
                    esac;

	        search ((j, x) ! l)
                    =>
                    if (i == j ) x; else search l;fi;
            end;
	end

    also
    fun set (a' as ARRAY (REF a, _, n, s as REF size), i, x)
        =
	{   nnn   = a::length a;
	    pos = index (a, i);


	    fun change ([], l)
                    => 
		    if (size + size  >= nnn)
			#
			grow (a', i, x);
		    else
			s := size + 1;
			a::set (a, pos, (i, x) ! l);
                    fi;

	        change ((y as (j, _)) ! l', l)
                    => 
		    if (j == i)   a::set (a, pos, (i, x) ! l'@l);
		    else          change (l', y ! l);
                    fi;
            end;
	
	    change (a::get (a, pos),[]);

	    if (i >= *n)   n := i+1;   fi;
	}

    also
    fun grow (ARRAY (a' as REF a, _, _, _), i, x)
         = 
	 {   nnn   = a::length a;
	     nnn'  = nnn+nnn;
	     a''   = a::make_rw_vector (nnn',[]);

	     fun insert (i, x)
                 = 
		 {   pos = index (a'', i);
		     a::set (a'', pos, (i, x) ! a::get (a'', pos));
                 };
	   
	     a::apply (list::apply insert) a;
	     insert (i, x);
	     a' := a'';
	 };

    # Note:  The (_[])   enables   'vec[index]'           notation;
    #        The (_[]:=) enables   'vec[index] := value'  notation;

    (_[]) = get;

    fun remove (a' as ARRAY (REF a, _, n, s as REF size), i)
	=
	change (a::get (a, pos),[])
        where
	    nnn   = a::length a;
	    pos = index (a, i);

	    fun change ([], _) => ();

	        change ((y as (j, _)) ! l', l)
                    => 
		    if   (j == i)
                         s := size - 1;
                         a::set (a, pos, l'@l);
		    else
                         change (l', y ! l);
                    fi;
            end;
	end;



    # These seem bogus since they do not run in order 
    #
    fun keyed_apply f (ARRAY (REF a, _, REF n, _))
        =
        a::apply (list::apply f) a;


    fun apply f (ARRAY (REF a, _, _, _))
        =
        a::apply (list::apply (fn (_, x) => f x; end )) a;


    fun copy { from, to, di }
        =
	keyed_apply (fn (i, x) =  set (to, i, x))  from;


    fun copy_vec { from, to, di }
        =
	vector::keyed_apply (fn (i, x) =  set (to, di + i, x))  from;


    # These seem bogus since they do not run in order 
    #
    fun keyed_fold_left f e (ARRAY (REF a, _, _, _))
        =
	a::fold_left (fn (l, e) => list::fold_left (fn ((i, x), e) => f (i, x, e); end ) e l; end ) e a;


    fun keyed_fold_right f e (ARRAY (REF a, _, _, _))
        =
	a::fold_right (fn (l, e) => list::fold_right (fn ((i, x), e) => f (i, x, e); end ) e l; end ) e a;


    fun fold_left f e (ARRAY (REF a, _, _, _))
	=
	a::fold_left (fn (l, e) => list::fold_left (fn ((_, x), e) => f (x, e); end ) e l; end ) e a;


    fun fold_right f e (ARRAY (REF a, _, _, _))
        =
        a::fold_right (fn (l, e) => list::fold_right (fn ((_, x), e) => f (x, e); end ) e l; end ) e a;


    fun modifyi f (ARRAY (REF a, _, _, _))
        =
	a::modify (list::map (fn (i, x) => (i, f (i, x)); end )) a;


    fun modify f (ARRAY (REF a, _, _, _))
        =
        a::modify (list::map (fn (i, x) => (i, f x); end )) a; 


    fun dom (ARRAY (REF a, _, _, _))
        = 
        a::fold_left
            ( fn (e, l)
                  =
                  list::fold_right
                      (fn ((i, _), l) =   i ! l)
                      l
                      e
            )
            []
            a;


    fun findi p (ARRAY (REF a, _, _, _))
	=
	fnd 0
	where
	    len = a::length a;

	    fun fnd i
                =
		if (i >= len)
		    #	
                    NULL;
		else
		    case (list::find p (a::get (a, i)))
			#
			NULL =>  fnd (i + 1);
			some =>  some;
		    esac;
                fi;
	end;


    fun find p (ARRAY (REF a, _, _, _))
	=
	fnd 0
	where
	    len = a::length a;

	    fun fnd i
		=
		if (i >= len)
		    #
		    NULL;
		else
		    case (list::find (p o #2) (a::get (a, i)))
			#
			THE (_, x) =>  THE x;
			NULL       =>  fnd (i + 1);
		    esac;
		fi;
	end;


    fun exists p arr
        =
        not_null (find p arr);


    fun all p arr
        =
        not (not_null (find (not o p) arr));


    fun collate _ _
        =
        raise exception FAIL "sparse_rw_vector::collate unimplemented";


    fun to_vector  arr
        =
        vector::from_list (reverse (fold_left (!) [] arr));


    (_[]:=)  =  set;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
