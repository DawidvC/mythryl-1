## nada-parser.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/parse/parser.make6

# NB: None of the 'nada' stuff is current usable or used.
#     I'm keeping it as a place-holder in case I decide
#     to support an alternate syntax like prolog or lisp.



# The Nada parser proper is implemented in
#
#     src/lib/compiler/front/parse/main/nada-parser-guts.pkg
#
# The external interface to it is implemented in
#
#     src/lib/compiler/front/parse/main/parse-nada.pkg



api Nada_Parser {

    primary_prompt:    Ref(  String );
    secondary_prompt:  Ref( String );

    #  Turn on lazy keywords and lazy declaration processing 
    #
    lazy_is_a_keyword:      Ref( Bool );		#  Default FALSE.                  
    quotation:         Ref( Bool );		#  Controls backquote quotation.   
};

package nada_parser: (weak)  Nada_Parser {

    priority    =   [10, 10, 3];
    obscurity   =   3;
    prefix      =   "nada_parser";

    registry    =   control_index::make { help => "parser settings" };
                                                              

    # Commented out because I don't want this unused and unusable
    # stuff showing up at the user level when they list controls.
    # If this stuff goes production, this should be uncommented:
    #
#   my _ = basic_control::note_subindex (prefix, registry, priority);

    convert_string = control_utilities::convert::string;
    convert_bool   = control_utilities::convert::bool;

    nextpri     = REF 0;

    fun make (c, name, help, d)
        =
        {   r   = REF d;
	    p   = *nextpri;

	    control
                =
                control::control
                    {
                      name,
		      obscurity,
		      help,
		      pri     =>  [p],
		      control =>  r
		  };
	
	    nextpri := p + 1;

	    control_index::note_control
		registry
		{   control         =>  control::string_control c control,
		    dictionary_name =>  THE (control_utilities::dictionary_name::to_upper "PARSER_" name)
                };
	    r;
	};


    primary_prompt
        =
	make (convert_string, "primary_prompt", "primary prompt", "-/- ");


    secondary_prompt
        =
	make (convert_string, "secondary_prompt", "secondary prompt", "=/= ");


    lazy_is_a_keyword
        =
	make (   convert_bool,
                 "lazy_is_a_keyword",
	         "whether `lazy' is considered a keyword",
                 FALSE
             );

    quotation
        =
	make (   convert_bool,
                 "quotations",
	         "whether (anti-)quotations are recognized",
                 FALSE
             );
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
