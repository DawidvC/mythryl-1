
# lowcode specific things are abstracted out here in this module.



###                   "Virtue is harmony."
###
###                          -- Pythagoras 



generic package lowcode_types 
  (package Comp:  Mdl_Compile
   package rtl:   Codetree_Rtl
  )

: Lowcode_Types

{
   package raw_syntax    = Comp::raw_syntax
   package RawSyntaxTreePP  = Comp::RawSyntaxTreePP
   package tu     = Comp::TypeUtils
   package rtl    = RTL
   package t      = RTL::T
   package rw     = Comp::Rewriter
   package c      = cells_basis

   use raw_syntax Comp::Util Comp::error

   t2s  = pp::text o RawSyntaxTreePP::type
   e2s  = pp::text o RawSyntaxTreePP::expression
   SKIP = rw::noRewrite

   #  Does this type has special meaning in an instruction representation?  
   fun isSpecialRepType t =
   let fun isSpecial t =
       case tu::deref t of 
         CELLty _                  => TRUE  #  Cell types are special 
       | IDty (IDENT(_, "int"))      => TRUE
       | IDty (IDENT([], "operand")) => TRUE
       | IDty (IDENT(_, "cellset"))  => TRUE
       | _ => FALSE

       found = REF FALSE
 
       fun type _ t = (if isSpecial t then found := TRUE  t)  
       .type (rw::rewrite { type = type, expression=SKIP, decl=SKIP, sexp=SKIP, pattern=SKIP } ) t
   in  *found
   end

   #  return the real representation type of an rtl argument 
   fun representationOf (rtlName, arg, loc, type) =
   let fun err () =
          (errorPos (loc,
               "'"$arg$"' in rtl "$rtlName$" has an illegal type "$t2s type);
           (0, "bits")
          )
   in  case tu::deref type of
         IDty (IDENT([], "operand"))             => (0, "operand")
       | IDty (IDENT([], "label"))               => (0, "label")
       | IDty (IDENT([], "region"))              => (0, "region")
       | APPty (IDENT([], "operand"), [INTVARty n]) => (n, "operand")
       | APPty (IDENT([], "bits"), [INTVARty n]) => (n, "bits")
       | type => err()
   end
 
   fun representationOf (rtlName, arg, loc, type) =
   let fun err () =
          (errorPos (loc,
               "'"$arg$"' in rtl "$rtlName$" has an illegal type "$t2s type);
           (0, "bits")
          )
   in  case tu::deref type of
         IDty (IDENT([], "operand"))                => (0, "operand")
       | IDty (IDENT(_, "label"))                   => (0, "label")
       | IDty (IDENT([], "region"))                 => (0, "region")
       | APPty (IDENT([], "operand"), [INTVARty n]) => (n, "operand")
       | APPty (IDENT([], "bits"), [INTVARty n])    => (n, "cell")
       | type => err()
   end

   /* Given the actual represention of an rtl argument, 
    * insert coercion if possible.
    */
   fun insertRepCoercion (expression, type) = 
       (case (expression, tu::deref type) of
         (t::ARG(_, k, _), IDty (IDENT([], "int")))     => k := t::REP "int"
       | (t::ARG(_, k, _), IDty (IDENT(_, "label")))    => k := t::REP "label"
       | (t::ARG(_, k, _), IDty (IDENT([], "operand"))) => k := t::REP "operand"
       | (T.@@@(_, _, t::ARG(_, k, _)), CELLty _) => k := t::REP "cell"
       | _ => ()
       )

   fun ofCellKind (T.@@@(_, k, _), CELLdecl { id, ... } ) = 
          (case c::cellkindToString k of
             "CELLSET" => TRUE
           | k => k = id 
          )
     | ofCellKind (t::ARG _, CELLdecl { id, ... } ) = FALSE
     | ofCellKind(_, _) = FALSE



    # A database of all special types

    enum howto = 
       HOWTO of 
        { rep:            String, #  name of representation 
          isSSAValue:     Bool,   #  is it a value in SSA form? 
          mlType:         raw_syntax::type, #  type in ML 
          isConst:        Bool,   /* if so, is it always a constant? */ 
          isMultiValued:          #  if a value can it take more than one 
             Comp::md -> Bool
        } 
 
     howtos = REF [] : Ref( List( howto ) )
 
     fun findRep r =
         case list::find (fn HOWTO { rep, ... } => rep = r) *howtos
         of 
           THE (HOWTO howto) => howto
         | NULL => fail("bug: representation "$r$" not known")
 
    # ---------------------------------------------------------------------
    # 
    # Code generation magic
    #
    # ---------------------------------------------------------------------
     fun isConst (t::REP rep) = .isConst (findRep rep)

    # ---------------------------------------------------------------------
    # 
    # Okay, now specify all the types that we have to handle.
    #
    # ---------------------------------------------------------------------
     fun no _ = FALSE
     fun yes _ = TRUE
     fun bug _ = fail("unimplemented")
 
     my _ = howtos :=
       [HOWTO { rep           = "label",
              isSSAValue    = FALSE,
              mlType        = IDty (IDENT(["Label"], "label")),
              isConst       = TRUE,
              isMultiValued = no
             },
 
        HOWTO { rep           = "int",
              isSSAValue    = TRUE,
              mlType        = IDty (IDENT([], "int")),
              isConst       = TRUE,
              isMultiValued = no
             },
 
        HOWTO { rep           = "operand",
              isSSAValue    = TRUE,
              mlType        = IDty (IDENT(["I"], "operand")),
              isConst       = FALSE,
              isMultiValued = yes
             },
 
        HOWTO { rep           = "cellset",
              isSSAValue    = TRUE,
              mlType        = IDty (IDENT(["C"], "cellset")),
              isConst       = FALSE,
              isMultiValued = yes
             }
       ]

   # ---------------------------------------------------------------------
   # 
   # Generate an expression for performing the appropriate conversion
   #
   # ---------------------------------------------------------------------
   enum conv = IGNORE | CONV of String | MULTI of String

   package DescMap = red_black_map_g (type Key = String
                                     compare = string::compare)
   fun getOpnd desc = 
   let table =
           fold_right (fn ((rep, conv), table) =>
                    DescMap::set (table, rep, conv)) DescMap::empty desc

       fun mkConvFun (rep, conv) = 
           "fun get_"$rep$"(x, L) = " $
             (case conv of 
               IGNORE => "L"
             | CONV f => f$" . L"
             | MULTI f => f$"@L"
             )
       fun mkConvFun0 (rep, conv) = 
           "fun get_"$rep$"'(x) = " $
             (case conv of 
               IGNORE => "[]"
             | CONV f => "["$f$"]"
             | MULTI f => f
             )
       decl = @@@(map mkConvFun desc @ map mkConvFun0 desc)

       fun apply (rep, this, rest) = APPLY("get_"$rep, TUPLEexp[this, rest])

       fun getIt (rep, this, rest) = 
           case (DescMap::find (table, rep), rest) of
             (NULL, _) => fail("getOpnd: "$rep$" is not defined")
           | (THE IGNORE, _)   => rest
           | (THE (CONV _), _)  => apply (rep, this, rest)
           | (THE (MULTI conv), LISTexp([], NULL)) => APPLY("get_"$rep$"'", this)
           | (THE (MULTI _), rest) => apply (rep, this, rest)

       fun get (this, T.@@@(_, k, _), rest) =  
             if c::cellkindToString k == "CELLSET" then
                 getIt("cellset", this, rest)
             else
                 getIt("cell", this, rest)
          | get (this, t::ARG(_, REF (t::REP rep), _), rest) = getIt (rep, this, rest)
          | get(_, e, _) = fail("lowcode_types::get: "$RTL::Util::rexpToString e)

   in  { decl= decl,
         get = get 
       }
   end

};
