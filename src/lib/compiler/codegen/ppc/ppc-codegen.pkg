# ppc-codegen.pkg
#
# PPC specific backend

# Compiled by:
#     src/lib/compiler/backend-ppc.make6

package ppc_codegen
    = 
    codegen_g (									# codegen_g				is from   src/lib/compiler/codegen/main/codegen-g.pkg

	package machine_properties
	    =
	    ppc_machine_properties;						# ppc_machine_properties		is from   src/lib/compiler/codegen/ppc/ppc-machine-properties.pkg

	abi_variant      = NULL;

	package t= ppccodetree;							# ppccodetree				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package cb= cells_basis;						# cells_basis				is from   src/lib/compiler/lower/instruction/cells-basis.pkg
	package client_pseudo_ops= ppcclient_pseudo_ops;			# ppcclient_pseudo_ops			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package pseudo_op= ppcpseudo_ops;					# ppcpseudo_ops				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package ext        = lib7codetree_ext;					#  generic extension 
	package fps_regs= ppccps_regs;						# ppccps_regs				is from   src/lib/compiler/codegen/ppc/ppc-fps-registers.pkg
	package instruction_properties= ppcprops;				# ppcprops				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package asm= ppcasm_emitter;						# ppcasm_emitter			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package shuffle= ppcshuffle;						# ppcshuffle				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg

	package ccalls
            =
	    ppc_mac_osx_ccalls (						# ppc_mac_osx_ccalls			is from   src/lib/compiler/lower/ppc/c-calls/ppc-macosx.pkg
		package codetree = ppccodetree;
	    );

	package omit_frame_ptr {

	    package control_flow_graph= ppccfg;					# ppccfg				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	    package instruction_set = instruction_set_ppc;			# instruction_set_ppc			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	    virtual_frame_pointer = ppccps_regs::virtual_frame_pointer;
	    #  no rewriting necessary, backend does not change sp 
	    fun omitframeptr _ = ();
	};

	package translate_codetree_to_target_machine
	    =
	    translate_codetree_to_ppc_g (				# translate_codetree_to_ppc_g	is from   src/lib/compiler/lower/ppc/codetree/translate-codetree-to-ppc-g.pkg

                package instruction_set = instruction_set_ppc;

		package ppccodetree = ppccodetree;

		package pseudo_instrs
		    =
		    ppc_pseudo_instruction_g (					# ppc_pseudo_instruction_g		is from   src/lib/compiler/codegen/ppc/ppc-pseudo-instructions.pkg

                        package instruction_set = instruction_set_ppc;
                    );

		package extension_comp
		    =
		    lib7_codetree_extension_compilation_g (			# lib7_codetree_extension_compilation_g	is from   src/lib/compiler/codegen/compile-fps/lib7-codetreeext.pkg
#			package i = instruction_set_ppc;
#			package t = ppccodetree;
			package control_flow_graph= ppccfg;			# ppccfg				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
			package codetree_stream = ppccodetree_stream;		# ppccodetree_stream			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
		    );

		bit64mode=FALSE;
		mult_cost=REF 6;	 # An estimate 
	    );

	package jumps
	    =
	    ppc_jumps_g (							# ppc_jumps_g				is from   src/lib/compiler/lower/ppc/span/ppc-jumps.pkg
                package instruction_set = instruction_set_ppc;			# instruction_set_ppc			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
		package codetree_eval= ppccodetree_eval;			# ppccodetree_eval			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
		package shuffle= ppcshuffle;					# ppcshuffle				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
            );

	package back_patch
	    =
	    basic_block_scheduler2_g (						# basic_block_scheduler2_g		is from   src/lib/compiler/lower/span/basic-block-scheduler2-g.pkg
                package control_flow_graph= ppccfg;				# ppccfg				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
		package jumps = jumps;
		package instruction_properties = ppcprops;			# ppcprops				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
		package emitter= ppcmcemitter;					# ppcmcemitter				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
            );

	package register_allocation
	    = 
	    risc_register_allocation_g (					# risc_register_allocation_g		is from   src/lib/compiler/lower/reg-alloc/risc-register-allocation-g.pkg

		package instruction_set = instruction_set_ppc;			# instruction_set_ppc			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
		package control_flow_graph= ppccfg;				# ppccfg				is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
		package fps_regs= ppccps_regs;					# ppccps_regs				is from   src/lib/compiler/codegen/ppc/ppc-fps-registers.pkg
		package instruction_properties = instruction_properties; 

		package rewrite
		    =
                    ppc_instructions_rewrite_g (				# ppc_instructions_rewrite_g		is from   src/lib/compiler/lower/ppc/reg-alloc/ppc-instructions-rewrite-g.pkg
			instruction_set_ppc
                    ); 

		package spill_instr
		    =
		    ppc_spill_instructions_g (					# ppc_spill_instructions_g		is from   src/lib/compiler/lower/ppc/reg-alloc/ppc-spill-instructions-g.pkg
			instruction_set_ppc
		    );

		package asm= ppcasm_emitter;					# ppcasm_emitter			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
		package spill_heuristic= chaitin_spill_heuristic;		# chaitin_spill_heuristic		is from   src/lib/compiler/lower/reg-alloc/chaitin-spill-heuristic.pkg

		package spill
                    =
                    register_allocation_spilling_g (				# register_allocation_spilling_g	is from   src/lib/compiler/lower/reg-alloc/register-allocation-spilling-g.pkg
                        package instruction_properties = instruction_properties;
		        package asm= ppcasm_emitter;				# ppcasm_emitter			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
                    );

		package spill_table
                    =
                    spill_table_g (						# spill_table_g				is from   src/lib/compiler/codegen/main/spill-table-g.pkg
			ppc_machine_properties
		    );

		architecture_name						# "ppc", "sparc" or "x86".
		    =
		    ppc_machine_properties::architecture_name;

		Spill_Operand_Kind = SPILL_LOC | CONST_VAL;

		Spill_Info = Void;

		fun before_ra _
                    =
                    spill_table::spill_init();

		sp = instruction_set::cells::stackptr_r;
		spill = cpsregions::spill;

		fun pure _
                    =
                    FALSE;

		package int {

			avail     = ppccps_regs::avail_r;
			dedicated = ppccps_regs::dedicated_r;

			fun make_disp loc
			    =
			    t::LITERAL (t::machine_int::from_int (32, spill_table::get_reg_loc loc));

			fun spill_loc { info, an, cell, id }
			    = 
			    { operand=>instruction_set::DISPLACE { base=>sp, disp=>make_disp (register_allocation_graph::FRAME id), mem=>spill },
			      kind=>SPILL_LOC };

			mode = register_allocation_core::no_optimization;
	       };

	       package float {

		       avail     = ppccps_regs::avail_f;
		       dedicated = ppccps_regs::dedicated_f;

		       fun make_disp loc
                           =
                           t::LITERAL (t::machine_int::from_int (32, spill_table::get_freg_loc loc));

		       fun spill_loc (s, an, loc)
                           = 
			   instruction_set::DISPLACE { base=>sp, disp=>make_disp (register_allocation_graph::FRAME loc), mem=>spill };

		       mode = register_allocation_core::no_optimization;
	       };
	);
  );


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
