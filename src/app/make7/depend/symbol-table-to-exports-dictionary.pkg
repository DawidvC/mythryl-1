## symbol-table-to-exports-dictionary.sml
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6



# See comments in
#
#     src/app/make7/depend/exports-dictionary.pkg



api Symbol_Table_To_Exports_Dictionary {

     convert:  symbol_table::Symbol_Table
               -> (exports_dictionary::Dictionary
                , (Void -> symbol_set::Set));

    # The thunk passed to convert_memo will not b called
    # until the first attempt to query the resulting
    # exports_dictionary::dictionary.
    #
    # If the symbols for which queries succeed are known, then one
    # should further guard the resulting dictionary with an appropriate filter
    # to avoid queries that are known in advance to be unsuccessful
    # because they would needlessly cause the thunk to be called.

     convert_memo:  (Void -> symbol_table::Symbol_Table)
                      -> exports_dictionary::Dictionary;
};

package symbol_table_to_exports_dictionary: Symbol_Table_To_Exports_Dictionary {		# Symbol_Table_To_Exports_Dictionary	is from   src/app/make7/depend/symbol-table-to-exports-dictionary.pkg

    package bst = browse_symbol_table;								# browse_symbol_table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/browse.pkg

    fun convert_generic_dictionary get
        =
        exports_dictionary::FCTENV (convert_result o get)

    also
    fun convert_result (bst::DICTIONARY { get, ... } )   =>   THE (convert_generic_dictionary get);
         convert_result  bst::NO_DICTIONARY                   =>   NULL;
    end;

    fun convert sb
        =
        {   fun list_to_set l
                =
                {   fun add_module ((symbol, _), set)
                        =
			case (symbol::name_space symbol)

			     (   symbol::PACKAGE_NAMESPACE
                             |   symbol::API_NAMESPACE
                             |   symbol::GENERIC_NAMESPACE
                             |   symbol::GENERIC_API_NAMESPACE
                             )
				 => symbol_set::add (set, symbol);

			    _    => set;
                        esac;
		
		    fold_left add_module symbol_set::empty l;
		};

	    exports_dictionary
		=
		convert_generic_dictionary (bst::browse sb);

	    fun make_domain ()
                =
                list_to_set (symbol_table::to_sorted_list  sb);
	
	    (   exports_dictionary,
                make_domain
            );
	};

    fun convert_memo get_sb
        =
        {   l =   REF (fn s = raise exception FAIL "se2dae: uninitialized");

	    fun looker s
                =
                {   fun get_cme () = bst::browse (get_sb ());

		    lk = convert_result o (get_cme ());
		
		    l := lk;
		    lk s;
		};
	
	    l := looker;
	    exports_dictionary::FCTENV (fn s => *l s; end );
	};
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
