## button-appearance-from-shape-g.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6



# Generic for producing simple shape button views.



###         "[By the end of the 20th Century there will be a generation]
###          to whom it will not be injurious to read a dozen quire
###          of newspapers daily, to be constantly called to the telephone
###          [and] to live half their time in a railway carriage
###          or in a flying machine."
###
###                                      -- Max Nordau 1895


stipulate
    package bst =  button_shape_types;				# button_shape_types	is from   src/lib/x-kit/widget/leaf/button-shape-types.pkg
    package w   =  widget;					# widget		is from   src/lib/x-kit/widget/basic/widget.pkg
    package wa  =  widget_attribute;				# widget_attribute	is from   src/lib/x-kit/widget/lib/widget-attribute.pkg
    package wt  =  widget_types;				# widget_types		is from   src/lib/x-kit/widget/basic/widget-types.pkg
    package xc  =  xcore;					# xcore			is from   src/lib/x-kit/xclient/xcore.pkg
herein

    generic package  button_appearance_from_shape_g  (
	s:  Button_Shape					# Button_Shape		is from   src/lib/x-kit/widget/leaf/button-shape.api
    )
    : (weak)  Button_Appearance					# Button_Appearance	is from   src/lib/x-kit/widget/leaf/button-appearance.api

    {


	attributes
	   = (wa::border_width,   wa::INT,    wa::INT_VAL 2)
	   ! (wa::width,          wa::INT,    wa::INT_VAL 30)
	   ! (wa::height,         wa::INT,    wa::NO_VAL)
	   ! (wa::background,     wa::COLOR,  wa::STRING_VAL "white")
	   ! (wa::color,          wa::COLOR,  wa::NO_VAL)
	   ! (wa::ready_color,    wa::COLOR,  wa::NO_VAL)
	   ! (wa::foreground,     wa::COLOR,  wa::NO_VAL)
	   ! s::attributes
	   ;

	 Button_Appearance
	     =
	     BUTTON_APPEARANCE
	       {
		 bw:  Int,

		 shades:   w::Shades,
		 rshades:  w::Shades,

		 stipple:  xc::Ro_Pixmap,
		 drawfn:   bst::Drawfn,

		 fg:  Null_Or( xc::Color ),
		 bg:  xc::Color,

		 size:  w::Widget_Size_Preference
	       };

	fun make_button_appearance (root, view, args)
	    =
	    {   attributes
		    =
		    w::find_attribute (w::attributes (view, attributes, args));

		my (sizefn, drawfn)
		    =
		    s::config attributes;

		stipple = w::ro_pixmap root "gray";

		wide =  wa::get_int     (attributes wa::width);
		high =  wa::get_int_opt (attributes wa::height);

		foreground_color = wa::get_color_opt (attributes wa::foreground);
		background_color = wa::get_color     (attributes wa::background);

		color  = case (wa::get_color_opt (attributes wa::color))   
			     #
			     THE color => color;
			      _ => background_color;
			 esac;

		readyc = case (wa::get_color_opt (attributes wa::ready_color))   
			     #
			     THE color => color;
			      _        => color;
			 esac;

		bwid = wa::get_int (attributes wa::border_width);

		shades = w::shades root color;

		BUTTON_APPEARANCE
		  {
		    bg => background_color,
		    fg => foreground_color,

		    bw => bwid,
		    stipple,
		    shades,

		    rshades => (xc::same_color (color, readyc))
				 ?? shades
				 :: w::shades root readyc,
		    drawfn,
		    size => sizefn (wide, high)
		  };
	      };

	fun config (BUTTON_APPEARANCE v, window, size)
	    =
	    {   include xdraw;					# xdraw		is from   src/lib/x-kit/xclient/xdraw.pkg

		dr = drawable_of_window window;

		v ->  { fg, bw, drawfn, shades, rshades, ... };

		draw = drawfn (dr, size, bw);

		fun add_stipple p
		    =
		    clone_pen
		      ( p,
			[ FILL_STYLE_STIPPLED, 
			  STIPPLE v.stipple
			]
		      );

		shades  ->  { light, base, dark };
		rshades ->  { light=>rlight, base=>rbase, dark=>rdark };

		ilight =  add_stipple  light;
		idark  =  add_stipple  dark;
		ibase  =  add_stipple  base;

		my (fore, ifore)
		    = 
		    case fg   

			NULL  => (base, ibase);

			THE c => {   forepen = make_pen [FOREGROUND c];
				     (forepen, add_stipple forepen);
				 };
		    esac;

		fun setf (wt::INACTIVE TRUE, _, _) => draw (ibase, idark, ilight);
		    setf (wt::INACTIVE FALSE, _, _)=> draw (ibase, ilight, idark);

		    setf (wt::ACTIVE FALSE, ready, FALSE)
			=> 
			if ready  draw (rbase, rlight, rdark);
			else      draw ( base,  light,  dark);
			fi;

		    setf (wt::ACTIVE FALSE, ready, TRUE)
			=>
			if ready  draw (rbase, rdark, rlight);
			else      draw ( base,  dark,  light);
			fi;

		    setf (wt::ACTIVE TRUE, ready, FALSE)
			=>
			if ready  draw (rbase, rdark, rlight);
			else      draw ( base,  dark,  light);
			fi;

		    setf (wt::ACTIVE TRUE, ready, TRUE)
			=>
			if ready  draw (rbase, rdark, rlight);
			else      draw ( base,  dark,  light);
			fi;
		end;

		fun fsetf (wt::INACTIVE TRUE, _, _) => draw (ifore, ilight, idark);
		    fsetf (wt::INACTIVE FALSE, _, _)=> draw (ibase, ilight, idark);

		    fsetf (wt::ACTIVE FALSE, ready, FALSE)
			=> 
			if ready  draw (rbase, rlight, rdark);
			else      draw ( base,  light,  dark);
			fi;

		    fsetf (wt::ACTIVE FALSE, ready, TRUE)
			=>
			if ready  draw (rbase, rdark, rlight);
			else      draw ( base,  dark,  light);
			fi;

		    fsetf (wt::ACTIVE TRUE, ready, FALSE)
			=>
			if ready  draw (fore, rlight, rdark);
			else      draw (fore,  light,  dark);
			fi;

		    fsetf (wt::ACTIVE TRUE, ready, TRUE)
			=>
			if ready  draw (fore, rdark, rlight);
			else      draw (fore,  dark,  light);
			fi;
		 end;

		 case fg
		     #
		     NULL =>   setf;
			_ =>  fsetf;
		 esac;
	    };


	fun bounds (BUTTON_APPEARANCE { size, ... } )
	    =
	    size;


	fun window_args (BUTTON_APPEARANCE { bg, ... } )
	    =
	    { background => THE bg };

    };						# generic package button_appearance_from_shape_g 

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
