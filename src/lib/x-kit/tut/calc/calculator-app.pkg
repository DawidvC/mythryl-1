## calculator-app.pkg
#
# One way to run this app from the base-directory commandline is:
#
#     linux% my
#     eval: make "src/lib/x-kit/tut/calc/calculator-app.make6";
#     eval: calculator_app::do_it ();

# Compiled by:
#     src/lib/x-kit/tut/calc/calc-app.make6


# This is a test driver for the calculator.


stipulate
    include threadkit;					# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xc  =  xcore;				# xcore			is from   src/lib/x-kit/xclient/xcore.pkg
    package xw  =  xwindow;				# xwindow		is from   src/lib/x-kit/xclient/xwindow.pkg
    package xg  =  xgeometry;				# xgeometry		is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xtr =  xtracing;				# xtracing		is from   src/lib/x-kit/xclient/src/stuff/xtracing.pkg
    package rx  =  run_xkit;				# run_xkit		is from   src/lib/x-kit/widget/lib/run-xkit.pkg
    #
    package top =  topwindow;				# topwindow		is from   src/lib/x-kit/widget/basic/topwindow.pkg
    package wg  =  widget;				# widget		is from   src/lib/x-kit/widget/basic/widget.pkg
    package wa  =  widget_attribute;			# widget_attribute	is from   src/lib/x-kit/widget/lib/widget-attribute.pkg
    package wy  =  widget_style;			# widget_style		is from   src/lib/x-kit/widget/lib/widget-style.pkg
    #
    package cal =  calculator;				# calculator		is from   src/lib/x-kit/tut/calc/calculator.pkg
herein

    package calculator_app {

	stipulate

	    run_selfcheck =  REF FALSE;

	    stipulate
		selfcheck_tests_passed =  REF 0;
		selfcheck_tests_failed =  REF 0;
	    herein
		fun test_passed () =  selfcheck_tests_passed :=  *selfcheck_tests_passed + 1;
		fun test_failed () =  selfcheck_tests_failed :=  *selfcheck_tests_failed + 1;
		#
		fun assert bool    =  if bool   test_passed ();
				      else      test_failed ();
				      fi;				
		#
		fun test_stats  ()
		    =
		    { passed => *selfcheck_tests_passed,
		      failed => *selfcheck_tests_failed
		    };
	    end;

	    # Thread to exercise the app by simulating user
	    # mouseclicks and verifying their effects:
	    #
	    fun make_selfcheck_thread  { topwindow, widgettree }
		=
		xtr::make_thread "calculator-app selfcheck" selfcheck
		where
		    # Figure midpoint of window and also
		    # a small box centered on the midpoint:
		    #
		    fun midwindow window
			=
			{
			    # Get size of drawing window:
			    #
			    (xw::get_window_site  window)
				->
				xg::BOX { row, col, high, wide };

			    # Define midpoint of drawing window,
			    # and a 9x9 box enclosing it:
			    #
			    stipulate
				row =  high / 2;
				col =  wide / 2;
			    herein
				midpoint =  xg::POINT { row, col };
				midbox   =  xg::BOX { row => row - 4, col => col - 4, high => 9, wide => 9 };
			    end;

			    (midpoint, midbox);
			};

		    fun selfcheck ()
			=
			{   # Wait until the widgettree is realized and running:
			    # 
			    get (wg::get_''gui_startup_complete''_oneshot_of  widgettree);

#			    drawing_window =  get drawing_window_oneshot;
#
#			    # Fetch from X server the center pixels
#			    # over which we are about to draw:
#			    #
#			    (midwindow      drawing_window) ->  (_, drawing_window_midbox);
#			    #
#			    antedraw_midwindow_image
#				=
#				xc::make_clientside_pixmap_from_window (drawing_window_midbox, drawing_window);
#
#			    # Give the drawing thread time to
#			    # draw over the window center:
#			    #
#			    sleep_for (time::from_milliseconds 500);
#
#			    # Re-fetch center pixels, verify
#			    # that new result differs from original result.
#			    #
#			    # Strictly speaking we have a race condition
#			    # here, but I think this is good enough for
#			    # the purpose -- this isn't flight control:
#			    #
#			    postdraw_midwindow_image
#				=
#				xc::make_clientside_pixmap_from_window (drawing_window_midbox, drawing_window);
#			    #
#			    assert (not (xc::same_cs_pixmap (antedraw_midwindow_image, postdraw_midwindow_image)));

			    # All done -- shut everything down:
			    #
			    (xw::xsession_of_window  (wg::window_of widgettree)) ->  xsession;
			    xc::close_xsession  xsession;
			    shut_down_thread_scheduler  winix::process::success;
			};
		end;						# fun make_selfcheck_thread

	    resources
		=
		[ "*background: gray" ];

	    fun calculator_app root_window
		=
		{   fun quit ()
			=
			{   wg::delete_root_window root_window;
			    shut_down_thread_scheduler  winix::process::success;
			};

		    style = wg::style_from_strings (root_window, resources);

		    name = wy::make_view
			     {
			       name    =>   wy::style_name [],
			       aliases => [ wy::style_name [] ]
			     };

		    view = (name, style);

		    widgettree = cal::make_calculator (root_window, view, []);

		    topwindow_args
			=
			[ (wa::title,      wa::STRING_VAL "calculator"),
			  (wa::icon_name,  wa::STRING_VAL "calculator")
			];

		    topwindow = top::topwindow  (root_window, view, topwindow_args)  widgettree;

		    top::start  topwindow;

		    if *run_selfcheck
			#
			make_selfcheck_thread  { topwindow, widgettree };
			();
		    fi;

		    ();
		};
	herein

	    fun do_it' (debug_flags, server)
		=
		{   xtracing::init debug_flags;

		    rx::run_xkit'
			calculator_app
			{ display => THE server,
			  time_quantum_in_milliseconds  => NULL
			};
		};

	    fun do_it ()
		=
		rx::run_xkit  calculator_app;

	    fun main (program, server ! _) =>  do_it' ([], server);
		main _                     =>  do_it  ();
	    end;

	    fun selfcheck ()
		=
		{   run_selfcheck :=  TRUE;
		    do_it ();
		    test_stats ();
		};	


	end;			# stipulate
    };				# package calc_test 
end;

## COPYRIGHT (c) 1991 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
