## accumulator.pkg

# Compiled by:
#     src/lib/x-kit/tut/calc/calc-app.make6


# The accumulator of the calculator.

stipulate
    include threadkit;					# threadkit	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
herein

    package accumulator:  Accumulator {			# Accumulator	is from   src/lib/x-kit/tut/calc/accumulator.api

	Op_T = PLUS | MINUS | DIVIDE | TIMES;
	Plea_Mail = OP Op_T | CLEAR | EQUAL | VAL Int;
	Out_Val = OVAL Int | OINFINITY | OOVERFLOW;

	Accumulator = ACCUMULATOR (Mailslot(Plea_Mail), Mailslot(Out_Val) );

	fun arithmetic_op_of PLUS   => int::(+);
	    arithmetic_op_of MINUS  => int::(-);
	    arithmetic_op_of TIMES  => int::(*);
	    arithmetic_op_of DIVIDE => int::(/);
	end;

	fun make_accumulator ()
	    =
	    {
		plea_slot   =  make_mailslot ();
		result_slot =  make_mailslot ();

		fun get_plea ()  =  take  plea_slot;

		fun put_val v   =  give (result_slot, OVAL v);
		fun put_inf ()  =  give (result_slot, OINFINITY);
		fun put_ovfl () =  give (result_slot, OOVERFLOW);

		fun update (v, v')
		    =
		    {   newval = 10*v + v';
			#
			put_val newval;
			newval;
		    }
		    except OVERFLOW = v;

		fun do_err DIVIDE_BY_ZERO =>  put_inf  ();
		    do_err OVERFLOW       =>  put_ovfl ();
		    do_err a              =>  raise exception a;
		end;


		fun init_state ()
		    =
		    case (get_plea ())
			#
			OP _  =>   init_state ();
			CLEAR =>   do_clear   ();
			EQUAL =>   init_state ();
			VAL v => { put_val v;   read_num (THE v, NULL);  };
		    esac

		also
		fun read_num arg
		    =
		    case (get_plea ())
			#
			OP operator'
			    =>
			    case arg
				#
				(NULL, NULL)               =>  init_state ();				# Impossible.
				(NULL, THE (st, operator)) =>  read_num (NULL, THE (st, operator'));
				(THE v, NULL)              =>  read_num (NULL, THE (v,  operator'));

				(THE v, THE (st, operator))
				    =>
				    {   newval = (arithmetic_op_of operator) (st, v);
					#
					put_val newval;
					read_num (NULL, THE (newval, operator'));
				    }
				    except
					err = {   do_err err;
						  init_state ();
					      };
			    esac;

			CLEAR  => do_clear ();
			EQUAL  => do_equal arg;

			VAL v'
			    =>
			    case arg
				#
				(NULL,  st) =>  { put_val v';   read_num (THE v', st);  };
				(THE v, st) =>    read_num (THE (update (v, v')), st);
			    esac;
		     esac

		also
		fun do_clear ()
		    =
		    {   put_val 0;
			init_state();
		    }

		also
		fun do_equal (THE v, THE (st, operator))
			=>
			{   put_val ((arithmetic_op_of operator) (st, v))
			    except
				err = do_err err;

			    init_state ();
			};

		    do_equal _
			=>
			init_state ();
		end;


		make_thread "accumulator"  init_state;

		ACCUMULATOR (plea_slot, result_slot);
	    };

	fun send_to_accumulator  (ACCUMULATOR (plea_slot, _))  msg
	    =
	    give (plea_slot, msg);

	fun from_accumulator_mailop_of (ACCUMULATOR(_, result_slot))
	    =
	    take' result_slot;

    };					# package accumulator 
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1991 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
