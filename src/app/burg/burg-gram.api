api Burg_TOKENS =
sig
type Token( X, Y )
type Semantic_Value
my RAW: (String List) *  X * X -> (Semantic_Value,X) token
my ID: (String) *  X * X -> (Semantic_Value,X) token
my INT: (Int) *  X * X -> (Semantic_Value,X) token
my PPERCENT: (String List) *  X * X -> (Semantic_Value,X) token
my K_PIPE:  X * X -> (Semantic_Value,X) token
my K_EQUAL:  X * X -> (Semantic_Value,X) token
my K_RPAREN:  X * X -> (Semantic_Value,X) token
my K_LPAREN:  X * X -> (Semantic_Value,X) token
my K_COMMA:  X * X -> (Semantic_Value,X) token
my K_SEMICOLON:  X * X -> (Semantic_Value,X) token
my K_COLON:  X * X -> (Semantic_Value,X) token
my K_SIG:  X * X -> (Semantic_Value,X) token
my K_RULEPREFIX:  X * X -> (Semantic_Value,X) token
my K_TERMPREFIX:  X * X -> (Semantic_Value,X) token
my K_START:  X * X -> (Semantic_Value,X) token
my K_TERM:  X * X -> (Semantic_Value,X) token
my K_EOF:  X * X -> (Semantic_Value,X) token
end
api Burg_LRVALS {

package tokens:  Burg_Tokens
package parser_data: Parser_Data
sharing parser_data::token::Token = tokens::Token
sharing parser_data::Semantic_Value = tokens::Semantic_Value
}
