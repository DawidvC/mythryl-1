## label.pkg
#
# Label widget.
#
# TODO:		XXX BUGGO FIXME
#   allow user control over maxc, either in pixels or as character

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6





###                    "I think computer viruses should count as life.
###                     I think it says something about human nature
###                     that the only form of life we have created
###                     so far is purely destructive.
###                     We've created life in our own image."
###
###                                    -- Stephen Hawking (1942 - )



stipulate
    include threadkit;				# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package d3 =  three_d;			# three_d		is from   src/lib/x-kit/widget/lib/three-d.pkg
    package wg =  widget;			# widget		is from   src/lib/x-kit/widget/basic/widget.pkg
    package wa =  widget_attribute;		# widget_attribute	is from   src/lib/x-kit/widget/lib/widget-attribute.pkg
    package wy =  widget_style;			# widget_style		is from   src/lib/x-kit/widget/lib/widget-style.pkg
    package wt =  widget_types;			# widget_types		is from   src/lib/x-kit/widget/basic/widget-types.pkg
    #
    package xc =  xcore;			# xcore			is from   src/lib/x-kit/xclient/xcore.pkg
    package xd =  xdraw;			# xdraw			is from   src/lib/x-kit/xclient/xdraw.pkg
    package xf =  xfont;			# xfont			is from   src/lib/x-kit/xclient/xfont.pkg
    package xg =  xgeometry;			# xgeometry		is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xi =  xinput;			# xinput		is from   src/lib/x-kit/xclient/xinput.pkg
herein

    package label: (weak)  Label {		# Label			is from   src/lib/x-kit/widget/leaf/label.api


	Label_Type = TEXT  String
		   | ICON  xc::Ro_Pixmap
		   ;

	Plea_Mail
	    = SET_LABEL  Label_Type
	    #
	    | SET_BC  xc::Rgb
	    | SET_FC  xc::Rgb
	    #
	    | GET_SIZE_CONSTRAINT  Oneshot_Maildrop( wg::Widget_Size_Preference )
	    #
	    | DO_REALIZE
		{
		  kidplug:  xi::Kidplug,
		  window:   xc::Window,
		  size:     xg::Size
		};

	Label_Data
	  = TEXT_DATA  { s:  String, rb:  Int, lb:  Int }
	  | ICON_DATA  xc::Ro_Pixmap
	  ;

	Font_Info
	    =
	    FONT_INFO
	      {
		font:   xc::Font,
		fonta:  Int,                  #  font ascent 
		fontd:  Int,                  #  font descent 
		maxc:   Int                   #  max. char width 
	      };

	fun make_font_info font
	    =
	    {   my { ascent, descent } =  xf::font_high     font;
		my { max_bounds, ... } =  xf::font_info_of  font;

		max_bounds ->  xf::CHAR_INFO { char_width, ... };

	       FONT_INFO { font, fonta=>ascent, fontd=>descent, maxc => char_width };
	    };

	fun make_text_label (s, font)
	    =
	    {   my xf::CHAR_INFO { left_bearing=>lb, right_bearing=>rb, ... }
		    =
		    .overall_info  (xf::text_extents  font  s);

		TEXT_DATA { s, lb, rb };
	    };

	Label_View
	    =
	    LABEL_VIEW
	      {
		label:   Ref( Label_Data   ), 
		fg:      Ref( xc::Rgb ), 
		bg:      Ref( xc::Rgb ), 
		shades:  Ref( wg::Shades    ),
		#
		relief:        wg::Relief,
		border_width:  Int,
		font:          Font_Info,
		align:         wt::Horizontal_Alignment,
		#
		width:   Int,
		height:  Int,
		padx:    Int,
		pady:    Int
	    };

	default_font = "-Adobe-Helvetica-Bold-R-Normal--*-120-*";


	attributes
	    =
	    [ (wa::halign,       wa::HALIGN, wa::HALIGN_VAL wt::HCENTER),
	      (wa::tile,         wa::TILE,   wa::NO_VAL),
	      (wa::label,        wa::STRING, wa::STRING_VAL ""),
	      (wa::border_width, wa::INT,    wa::INT_VAL 2),
	      (wa::height,       wa::INT,    wa::INT_VAL 0),
	      (wa::width,        wa::INT,    wa::INT_VAL 0),
	      (wa::padx,         wa::INT,    wa::INT_VAL 1),
	      (wa::pady,         wa::INT,    wa::INT_VAL 1),
	      (wa::font,         wa::FONT,   wa::STRING_VAL default_font),
	      (wa::relief,       wa::RELIEF, wa::RELIEF_VAL wg::FLAT),
	      (wa::foreground,   wa::COLOR,  wa::STRING_VAL "black"),
	      (wa::background,   wa::COLOR,  wa::STRING_VAL "white")
	    ];


	fun label_view (root_window, view, args)
	    =
	    {   include xdraw;					# xdraw		is from   src/lib/x-kit/xclient/xdraw.pkg

		attributes = wg::find_attribute (wg::attributes (view, attributes, args));

		align  = wa::get_halign (attributes wa::halign);
		bw     = wa::get_int    (attributes wa::border_width);
		height = wa::get_int    (attributes wa::height);
		width  = wa::get_int    (attributes wa::width);
		padx   = wa::get_int    (attributes wa::padx);
		pady   = wa::get_int    (attributes wa::pady);

		my fifi as FONT_INFO { font=>f, ... }
		    =
		    make_font_info (wa::get_font (attributes wa::font));

		label = ICON_DATA (wa::get_tile (attributes wa::tile))
			except
			    _ = make_text_label (wa::get_string (attributes wa::label), f);

		relief = wa::get_relief (attributes wa::relief);
		lab    = wa::get_string (attributes wa::label);

		fg     = wa::get_color  (attributes wa::foreground);
		bg     = wa::get_color  (attributes wa::background);

		shades = wg::shades root_window bg;

		LABEL_VIEW {
		    label => REF label,
		    fg => REF fg,
		    bg => REF bg,
		    shades => REF shades,
		    relief,
		    border_width => int::max (0, bw),
		    font => fifi,
		    align,

		    width  => int::max (0, width),
		    height => int::max (0, height),

		    padx  => int::max (0, padx),
		    pady  => int::max (0, pady)
		  };
	    };

	Label
	    =
	    LABEL
	      { widget:     wg::Widget,
		plea_slot:  Mailslot( Plea_Mail )
	      };

	fun bounds lview
	    =
	    {   my LABEL_VIEW { border_width, width, height, padx, pady, font, ... }
		    =
		    lview;

		fun compute_size (LABEL_VIEW { label => REF (ICON_DATA ro_pixmap), ... } )
			=>
			{   my  xg::SIZE { wide, high }
				=
				xc::size_of_ro_pixmap  ro_pixmap;

			    w = if (width  > 0) width;  else wide; fi;
			    h = if (height > 0) height; else high; fi;

			    xg::SIZE { wide=>w, high=>h };
			};

		   compute_size (LABEL_VIEW { label => REF (TEXT_DATA { rb, lb, s } ), ... } )
		       =>
		       {   font ->  FONT_INFO { fonta, fontd, maxc, ... };

			   wide = rb - lb;
			   line_high = fonta + fontd;

			   w = if (width == 0)  wide; 
			       else             width*maxc;
			       fi;

			   h = if (height > 0)  height*line_high;
			       else             line_high;
			       fi;

			   xg::SIZE { wide=>w, high=>h };
			};
		end;

		my  xg::SIZE { wide, high }
		    =
		    compute_size  lview;

		col_preference =  wg::tight_preference (wide + 2*(border_width+padx+1));
		row_preference =  wg::tight_preference (high + 2*(border_width+pady+1));

		{ col_preference,
		  row_preference
		};
	    };

	fun update_label (lv as LABEL_VIEW { label, ... }, ICON t)
		=>
		{   label := ICON_DATA t;
		    lv;
		};

	    update_label (lv as LABEL_VIEW { label, font=>FONT_INFO { font, ... }, ... }, TEXT s)
		=> 
		{   label := make_text_label (s, font);
		    lv;
		};
	end;

	fun update_fg (lv as LABEL_VIEW { fg, ... }, c)
	    =
	    {   fg := c;
		lv;
	    };

	fun update_bg root_window (lv as LABEL_VIEW { bg, shades, ... }, c)
	    = 
	    {   bg := c;
		shades := wg::shades root_window c;
		lv;
	    };

	fun draw
            (dr, xg::SIZE { wide, high } )
            (LABEL_VIEW lv)
	    =
	    {   include xdraw;						# xdraw		is from   src/lib/x-kit/xclient/xdraw.pkg

		my { shades, relief, label, border_width, fg, bg, ... }
		    =
		    lv;

		box  =  xg::BOX { col=>0, row=>0, wide, high };
		xoff =  border_width + lv.padx;

		fill_box  dr  (make_pen [FOREGROUND (xc::rgb8_from_rgb *bg)])  box;

		case *label
		    #
		    ICON_DATA ro_pixmap
			=>
			{   pen = make_pen [ FOREGROUND (xc::rgb8_from_rgb  *fg),
					     BACKGROUND (xc::rgb8_from_rgb  *bg)
					   ];

			    my  xg::SIZE { wide=>twid, high=>tht }
				=
				xc::size_of_ro_pixmap  ro_pixmap;

			    sr =  xg::BOX { col=>0, row=>0, wide=>twid, high=>tht };

			    x = case lv.align
				    #
				    wt::HLEFT   => xoff;
				    wt::HRIGHT  =>  wide - xoff - twid;
				    wt::HCENTER => (wide - twid) / 2;
				esac;

			    y = (high - tht) / 2;

			    pos =  xg::POINT { col=>x, row=>y };

			    bitblt dr pen { from=> FROM_RO_PIXMAP ro_pixmap, from_box=>sr, to_pos=>pos }; (); 
			};

		   TEXT_DATA { s, lb, rb }
		       =>
		       {   lv.font -> FONT_INFO { font, fonta, fontd, ... };

			   pen = make_pen [FOREGROUND (xc::rgb8_from_rgb  *fg)];

			   col = case lv.align   
				     #
				     wt::HLEFT   => xoff - lb + 1;
				     wt::HRIGHT  => wide - xoff - rb - 1;
				     wt::HCENTER => (wide - lb - rb) / 2;
				 esac;

			   row = (high + fonta - fontd) / 2;

			   draw_transparent_string dr pen font (xg::POINT { col, row }, s);
		       };
		esac;

		d3::draw_box dr { box, relief, width=>border_width }
			*shades;
	    };

	fun realize { kidplug, window, size } (root_window, plea_slot, lv)
	    =
	    {   include xinput;					# xinput	is from   src/lib/x-kit/xclient/xinput.pkg

		my KIDPLUG { from_other', to_mom, ... }
		    =
		    ignore_mouse_and_keyboard  kidplug;

		dr =  xd::drawable_of_window  window;

		fun check_size (label, label', wide, high)
		    =
		      case (label, label')

			   (TEXT_DATA { lb, rb, ... }, TEXT_DATA { lb=>lb', rb=>rb', ... } )
			       =>
			       if (wide == 0 and rb' - lb' != rb - lb)
				    do_mailop (to_mom REQ_RESIZE);
			       fi;

			   (ICON_DATA t, ICON_DATA t')
			       =>
			       {   size = xc::size_of_ro_pixmap t;
				   size' = xc::size_of_ro_pixmap t';

				   if ((wide == 0 or high == 0) and size != size' )

					file::print "resize2\n";
					do_mailop (to_mom REQ_RESIZE);
				   fi; 
			       };

			   _   =>
			       {   file::print "resize3\n";
				   do_mailop (to_mom REQ_RESIZE);
			       };
		      esac;


		fun do_plea (SET_LABEL v, lv)
			=>
			{   lv ->  LABEL_VIEW { label=> REF l, width, height, ... };

			    my lv' as LABEL_VIEW { label => REF l', ... }
				=
				update_label (lv, v);

			    check_size (l, l', width, height);

			    THE lv';
			};

		    do_plea (SET_BC c, lv)
			=>
			THE (update_bg root_window (lv, c));

		    do_plea (SET_FC c, lv)
			=>
			{   update_fg (lv, c);
			    THE lv;
			};

		    do_plea (GET_SIZE_CONSTRAINT reply_1shot, lv)
			=>
			{   set (reply_1shot, bounds lv);
			    NULL;
			};

		    do_plea _
			=>
			NULL;
		end;


		fun do_mom (ETC_REDRAW _, me as (lv, drawf))
			=> 
			{ drawf lv; me;};

		    do_mom (ETC_RESIZE (xg::BOX { wide, high, ... } ), (lv, _))
			=> 
			(lv, draw (dr, xg::SIZE { wide, high } ));

		    do_mom (_, me)
			=>
			me;
		end;


		fun loop (lv, drawf)
		    =
		    select [
			#
			take'  plea_slot
			    ==>
			    (fn event = case (do_plea (event, lv))

					    NULL    => loop (lv, drawf);

					    THE lv' => {   drawf lv';
							   loop (lv', drawf);
						       };
					esac),

			from_other'
			    ==>
			    (fn envelope
				=
				loop (do_mom (envelope_contents envelope, (lv, drawf))))
		    ];

		loop (lv, draw (dr, size));
	    };

	fun init (root_window, plea_slot, lv)
	    =
	    loop lv
	    where 
		fun loop lv
		    =
		    case (take  plea_slot)
			#                  
			SET_LABEL l => loop (update_label (lv, l));

			SET_BC c => loop (update_bg root_window (lv, c));
			SET_FC c => loop (update_fg (lv, c));

			DO_REALIZE arg         =>  realize arg (root_window, plea_slot, lv);
			GET_SIZE_CONSTRAINT reply_1shot =>  {   set (reply_1shot, bounds lv);   loop lv;  };
		    esac;
	    end;

	fun make_label' (args as (root_window, _, _))
	    =
	    {   lv = label_view args;

		plea_slot = make_mailslot ();

		fun get_bounds ()
		    =
		    {   reply_1shot = make_oneshot_maildrop ();

			give (plea_slot, GET_SIZE_CONSTRAINT reply_1shot);

			get reply_1shot;
		    };

		make_thread  "label"  .{
		    #
		    init (root_window, plea_slot, lv);
		};

		LABEL
		  {
		    plea_slot,

		    widget => wg::make_widget
				{ root_window,
				  args      =>  fn () = { background => NULL },
				  size_preference_thunk_of =>  get_bounds,
				  realize   =>  fn arg = give (plea_slot, DO_REALIZE arg)
				}
		  };
	      };


	fun make_label root_window { label=>caption, font, foreground, background, align }
	    =
	    {   name = wy::make_view
			 { name    => wy::style_name ["label"],
			   aliases => []
			 };

		args = [ (wa::halign, wa::HALIGN_VAL align),
			 (wa::label,  wa::STRING_VAL caption)
		       ];

		args = case font
			   #
			   THE f => (wa::font, wa::STRING_VAL f) ! args;
			   NULL  => args;
		       esac;

		args = case foreground    
			   #
			   THE fc => (wa::foreground, wa::COLOR_VAL fc) ! args;
			   NULL   => args;
		       esac;

		args = case background    
			   #
			   THE bc => (wa::background, wa::COLOR_VAL bc) ! args;
			   NULL   => args;
		       esac;

		make_label' (root_window, (name, wg::style_of root_window), args);
	    };

	fun as_widget (LABEL { widget,    ... } )     =   widget;
	fun set msg   (LABEL { plea_slot, ... } ) arg =   give  (plea_slot,  msg arg);

	set_label =  set  SET_LABEL;

	set_background = set SET_BC;
	set_foreground = set SET_FC;

    };			#  Label 

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
