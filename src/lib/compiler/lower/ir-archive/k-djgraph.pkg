# 
# The algorithm for computing iterated dominance
# frontier is my own algorithm which uses the $k$-compressed DJ-graph,
# which is a variant of DJ-graph due to Sreedhar, Gao and Lee.   Here, 
# I've set k=2.  The algorithm using $k$-compressed DJ-graph is significantly
# faster than the DJ-graph version when |DF (x)| <= k.
#
# The write up will be in my thesis.
# 
# --Allen



###               "That tendency to err that programmers have
###                been noticed to share with other human beings
###                has often been treated as though it were an awkwardness 
###                attendant upon programming's adolescence, which like
###                acne would disappear with the craft's coming of age.
###                It has proved otherwise."
###                                            -- Mark Halpern



generic package K_DJGraph (dom:  Dominator_Tree) : DJ_GRAPH
{

   package g       = graph
   package dom     = dom
   package a       = rw_vector

   type Dj_Graph (N,E,G) = dom::Dominator_Tree (N,E,G) 

   fun error msg = lowcode_error_message::error("K_DJGraph", msg)

   stats          = TRUE #  Collect statistics? 
   levelPrune     = TRUE
   domPrune       = TRUE
   pathPrune      = TRUE
   visitCount     = LowCodeControl::getCounter "dj-visit-count"
   liveVisitCount = LowCodeControl::getCounter "dj-live-visit-count"
   debug          = TRUE
   K_max = 2

   fun dj x = x

   #  Compute dominance frontier 
   fun df (ddd as g::GRAPH dom) =
   let my g::GRAPH cfg = dom::cfg ddd
       lll           = dom::max_levels ddd
       nnn           = dom.capacity ()
       levels      = dom::levelsMap ddd
       in_DF       = a::rw_vector (nnn, 0)  #  has appeared in the df set? 
       stamp       = REF 0
       fun new_stamp () = let s = *stamp + 1 in stamp := s; s end

       fun unmarked (marked, i, stamp:  Int) =
           let s = a::sub (marked, i)
           in  if s == stamp then FALSE else (a::update (marked, i, stamp); TRUE)
           end

       /* 
        * Compute the dominance frontiers of a node
        * Dominance frontier of x: 
        *   The set of all nodes y such that x dominates a predecessor 
        *   of y but x doesn't strictly dominates y.
        */
       fun df x =
       let stamp = new_stamp()
           level_x = a::sub (levels, x)
           fun walk (z, S) = 
               let fun scan ((_, y, _) . es, S) =
                       if a::sub (levels, y) <= level_x and
                           unmarked (in_DF, y, stamp) then scan (es, y . S)
                       else scan (es, S)
                     | scan([], S) = S
                   S = scan (cfg.out_edges z, S)
                   fun walkList([], S) = S
                     | walkList((_, z, _) . es, S) = walkList (es, walk (z, S))
               in  walkList (dom.out_edges z, S)
               end
       in  walk (x,[])
       end

   in  df end

   #  Compute iterated dominance frontier 
   fun idfs (ddd as g::GRAPH dom) = 
   let my g::GRAPH cfg = dom::cfg ddd
       lll           = dom::max_levels ddd
       nnn           = dom.capacity ()
       levels      = dom::levelsMap ddd
       in_DF       = a::rw_vector (nnn, 0)  #  has appeared in the df set? 
       stamp       = REF 0
       fun new_stamp () = let s = *stamp + 1 in stamp := s; s end

       fun unmarked (marked, i, stamp:  Int) =
           let s = a::sub (marked, i)
           in  if s == stamp then FALSE else (a::update (marked, i, stamp); TRUE)
           end

       in_alpha  = a::rw_vector (nnn, 0)  #  has appeared in N_alpha? 
       visited   = a::rw_vector (nnn, 0)  #  has it been visited 
       piggybank = a::rw_vector (lll,[]) #  nodes in the piggy bank 

       /* 
        * This algorithm is described in POPL 95 
        */
       fun idfs xs =
       let stamp = new_stamp()
           fun init ([], l) = l
             | init (x . xs, l) = 
               let l_x = a::sub (levels, x)
               in  a::update (in_alpha, x, stamp);
                   a::update (piggybank, l_x, x . a::sub (piggybank, l_x));
                   init (xs, if l < l_x then l_x else l)
               end 
           fun visit (y, level_x, S) =
           let fun scan ([], S) = S
                 | scan((_, z, _) . es, S) =
                   let level_z = a::sub (levels, z)
                   in  if level_z <= level_x and unmarked (in_DF, z, stamp) 
                       then (if a::sub (in_alpha, z) != stamp 
                             then a::update (piggybank, level_z,
                                           z . a::sub (piggybank, level_z)) 
                             
                             scan (es, z . S))
                       else scan (es, S)  
                   end
               fun visitSucc([], S) = S
                 | visitSucc((_, z, _) . es, S) = 
                   visitSucc (es, if unmarked (visited, z, stamp)
                                then visit (z, level_x, S) else S)
               S = scan (cfg.out_edges y, S)
           in  visitSucc (dom.out_edges y, S) 
           end 

           fun visitAll(-1, S) = S
             | visitAll (l, S) =
               case a::sub (piggybank, l) of
                 [] => visitAll (l - 1, S)
               | x . xs => (a::update (visited, x, stamp);
                           a::update (piggybank, l, xs);
                           visitAll (l, visit (x, a::sub (levels, x), S)))

           lll = init (xs,-1) 
       in  visitAll (lll,[])
       end

   in  idfs
   end


   # Compute iterated dominance frontier intersected with liveness.
   # This is my special algorithm!  The idea is that when we find a
   # new node b in IDF^+(S) we first check whether b is liveIn.  If not,
   # we can prune the search right there.  If so, we continue as normal.
   # Checking whether something is liveIn triggers the incremental liveness 
   # routine.
   #
   # -- Allen Leung

   enum Kind = JOIN | DOM

   fun LiveIDFs (ddd as g::GRAPH dom) = 
   let my g::GRAPH cfg = dom::cfg ddd
       lll           = dom::max_levels ddd
       nnn           = dom.capacity ()
       levels      = dom::levelsMap ddd

       in_phi      = a::rw_vector (nnn, 0)  #  has appeared in the df set? 
       stamp       = REF 0
       fun new_stamp () = let s = *stamp + 2 in stamp := s; s end

       in_alpha   = a::rw_vector (nnn, 0)  #  has appeared in N_alpha? 
       piggybank  = a::rw_vector (lll,[]) #  nodes in the piggy bank 
       minJLevels = a::rw_vector (nnn, 10000000)  
       djGraph    = a::rw_vector (nnn,[]) #  path compressed dj graph 
       liveIn     = a::rw_vector (nnn, 0) #  is a variable live in 
       visited    = a::rw_vector (nnn, 0)
       strictly_dominates = dom::dominates ddd

       K_inf = 255

       fun compressDJGraph (X, lvl) =
       let nextLvl = lvl + 1
           stamp   = -X

           #  merge join list, make sure there are no duplicates 
           fun mergeJoin (Z, E, n) = 
               if a::sub (visited, Z) == stamp or
                  a::sub (levels, Z) >= lvl then (E, n)
               else (a::update (visited, Z, stamp);
                     (Z . E, n+1))
 
           fun mergeJoins([], E, n) = (E, n)
             | mergeJoins (Z . Zs, E, n) = 
               let my (E, n) = mergeJoin (Z, E, n)
               in  mergeJoins (Zs, E, n)
               end

           fun appendJoins([], E) = E
             | appendJoins (Z . Zs, E) = appendJoins (Zs, (JOIN, Z) . E)

           fun collapse ([], DJ_X) = DJ_X
             | collapse((e as (DOM, _)) . Zs, DJ_X) = collapse (Zs, e . DJ_X) 
             | collapse((e as (JOIN, Z)) . Zs, DJ_X) = 
               if a::sub (levels, Z) <= lvl then collapse (Zs, e . DJ_X) 
               else collapse (Zs, DJ_X)

           /* L_X   -- min level of all join edges in SubTree (X)
            * DJ_X  -- all dj-graph edges of X
            * E_X   -- all J-edges in SubTree (X) to level < lvl.
            * K_X   -- |E_X|
            */
           fun walkDomSucc([], L_X, DJ_X, E_X, K_X) = (L_X, DJ_X, E_X, K_X)
             | walkDomSucc((_, Y, _) . es, L_X, DJ_X, E_X, K_X) =
               let my (L_Y, E_Y, K_Y) = compressDJGraph (Y, nextLvl)
                   L_X = int::min (L_X, L_Y)
               in  if pathPrune then
                      if L_Y >= nextLvl then
                         #  Disconnect dom edge! 
                          walkDomSucc (es, L_X, DJ_X, E_X, K_X)
                      else if K_Y <= K_max then
                         #  path compress! 
                       let my (E_X, K_X) = mergeJoins (E_Y, E_X, K_X)
                       in walkDomSucc (es, L_X, appendJoins (E_Y, DJ_X), E_X, K_X)
                       end
                      else 
                       let Zs = a::sub (djGraph, Y)
                       in  if length Zs <= K_max then
                             walkDomSucc (es, L_X, collapse (Zs, DJ_X), [], K_inf)
                           else
                             walkDomSucc (es, L_X, (DOM, Y) . DJ_X, [], K_inf)
                       end
                   else    
                      walkDomSucc (es, L_X, (DOM, Y) . DJ_X, [], K_inf)
               end
           fun walkCFGSucc([], L_X, DJ_X, E_X, K_X) = (L_X, DJ_X, E_X, K_X)
             | walkCFGSucc((_, Y, _) . es, L_X, DJ_X, E_X, K_X) = 
               let L_X = int::min (L_X, a::sub (levels, Y))
                   my (E_X, K_X) = mergeJoin (Y, E_X, K_X)
               in  walkCFGSucc (es, L_X, (JOIN, Y) . DJ_X, E_X, K_X)
               end
 
           my (L_X, DJ_X, E_X, K_X) = 
                 walkDomSucc (dom.out_edges X, 10000000, [], [], 0)
           my (L_X, DJ_X, E_X, K_X) = 
                 walkCFGSucc (cfg.out_edges X, L_X, DJ_X, E_X, K_X)

       in  a::update (minJLevels, X, L_X);
           a::update (djGraph, X, DJ_X);
           (L_X, E_X, K_X)
       end

       my [ENTRY] = dom.entries () 
       compressDJGraph (ENTRY, 0)


       fun LiveIDFs { defs, localLiveIn=[] } = [] #  special case 
         | LiveIDFs { defs=xs, localLiveIn } = 
       let stamp = new_stamp()
           /* n = REF 0
           m = REF 0 */

           fun initDefs([], maxLvl) = maxLvl
             | initDefs (x . xs, maxLvl) =
               let lvl_x = a::sub (levels, x)
               in  a::update (in_alpha, x, stamp);
                   a::update (piggybank, lvl_x, x . a::sub (piggybank, lvl_x));
                   initDefs (xs, if maxLvl < lvl_x then lvl_x else maxLvl)
               end 

           fun markLiveIn (b) =
           let fun markPred [] = ()
                 | markPred((j, _, _) . es) = 
                    (if a::sub (liveIn, j) != stamp and
                        a::sub (in_alpha, j) != stamp then
                       markLiveIn j 
                      
                     markPred es
                    )
           in  #  m := *m + 1; 
               a::update (liveIn, b, stamp);
               if stats then liveVisitCount := *liveVisitCount + 1 
               markPred (cfg.in_edges b)
           end

           fun initLiveIn [] = ()
             | initLiveIn (x . xs) = (markLiveIn x; initLiveIn xs)

           fun isLive b = a::sub (liveIn, b) = stamp

           fun visit (y, level_x, S) =
           let fun foreach ([], S) = S
                 | foreach((JOIN, z) . zs, S) = 
                   let level_z = a::sub (levels, z)
                   in  if level_z <= level_x and
                          a::sub (in_phi, z) != stamp and
                          isLive z
                           /* z is a new IDF^+ candidate; 
                            * make sure it is live.
                            */
                       then (a::update (in_phi, z, stamp);
                             if a::sub (in_alpha, z) != stamp 
                             then a::update (piggybank, level_z,
                                           z . a::sub (piggybank, level_z)) 
                             
                             foreach (zs, z . S)
                            )
                       else foreach (zs, S)  
                   end
                 | foreach((DOM, z) . zs, S) = 
                   foreach (zs, if isLive z and 
                                   a::sub (visited, z) != stamp and
                                   (not levelPrune or 
                                    a::sub (minJLevels, z) <= level_x) 
                                then (a::update (visited, z, stamp);
                                      visit (z, level_x, S)
                                     ) 
                                else S)
           in  if stats then visitCount := *visitCount + 1 
               foreach (a::sub (djGraph, y), S) 
           end 

           fun visitAll(-1, S) = S
             | visitAll (l, S) =
               case a::sub (piggybank, l) of
                 [] => visitAll (l - 1, S)
               | x . xs => 
                  let a::update (piggybank, l, xs)
                      a::update (visited, x, stamp);
                      S = visit (x, a::sub (levels, x), S)
                  in  
                      visitAll (l, S)
                  end

           fun domTest([x], uses) = 
               let fun loop [] = TRUE
                     | loop (y . ys) = strictly_dominates (x, y) and loop ys    
               in  loop uses end
             | domTest _ = FALSE

       in  if domPrune and domTest (xs, localLiveIn) then []
           else 
             let lll = initDefs (xs, -1) 
             in  initLiveIn (localLiveIn);
                 visitAll (lll, [])
             end
       end

   in  LiveIDFs
   end

}

