## xsocket-to-topwindow-router.pkg
#
# Primary functionality
# =====================
#
# For the big picture, see the dataflow diagram in:
#
#     src/lib/x-kit/xclient/src/window/xsession.pkg
#
# Our job is to route each incoming X event from
# the X server to the appropriate toplevel window,
# after which it will trickle down the widget
# hierarchy associated with that window.
#
# To do this we need to track all toplevel windows
# created by the application, keyed by their
# X-server-assigned IDs, so that we can translate
# the xid in the event to the corresponding widget
# for delivery.
#
#
# Secondary functionality
# =======================
#
# This file also implements a facility to
# freeze selected windows, with draw commands
# to them queueing up until they are unlocked:
# See make_overlay_buffer in
#     src/lib/x-kit/xclient/src/window/draw-imp.pkg  
#
# The idea might have been to allow XOR-implemented
# rubber-banding selection to work without anomalies
# due to the window contents changing between draw
# and undraw calls.
#
# The lock_window_tree entrypoint is called
# nowhere in the codebase, so this is apparently
# code that was just being phased in when
# development ceased.
#

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6



# TODO			XXX BUGGO FIXME
#   - refresh the keymap on ModifierMappingNotifyXEvt and KeyboardMappingNotifyXEvt
#     events.
#   - think about the relation of locks and changes in the tree structure
#     also locking already locked windows.


stipulate
    package xt  = xtypes;				# xtypes		is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package et  = event_types;				# event_types		is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
    package dy  = display;				# display		is from   src/lib/x-kit/xclient/src/wire/display.pkg
    package xok = xsocket;				# xsocket		is from   src/lib/x-kit/xclient/src/wire/xsocket.pkg

herein
    package xsocket_to_topwindow_router: (weak)  Xsocket_To_Topwindow_Router {		# Xsocket_To_Topwindow_Router	is from   src/lib/x-kit/xclient/src/window/xsocket-to-topwindow-router.api

	include threadkit;								# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg

	Envelope_Route
	  = ENVELOPE_ROUTE_END  xtypes::Window_Id
	  | ENVELOPE_ROUTE     (xtypes::Window_Id, Envelope_Route)
	  ;

	stipulate

	    package plea {
		#
		Mail
		  = NOTE_WINDOW       xt::Window_Id
		  | LOCK_WINDOW       xt::Window_Id
		  | UNLOCK_WINDOW     xt::Window_Id
		  | WINDOW_IS_LOCKED  xt::Window_Id
		  ;
	    };

	    # * NOTE: could bundle this all into a couple of functions *
	    #
	    Window_Desc
		=
		WINDOW_DESC
		  { id:          xt::Window_Id,
		    route:       Envelope_Route,
		    parent:      Null_Or( Window_Desc ),

		    children:    Ref(  List(  Window_Desc ) ),
		    lock:        Ref( Bool ),

		    event_slot:  Mailslot( (Envelope_Route, et::x::Event) )
		  };

	    Xevent_Dst
	      = TO_WINDOW       xt::Window_Id
	      | DESTROY_WINDOW  xt::Window_Id
	      | TO_KEYMAP_IMP
	      | TO_WINDOW_PROPERTY_IMP
	      | TO_SELECTION_IMP
	      | TO_ALL
	      | TO_TRASH
	      | CREATE_WINDOW  { parent:      xt::Window_Id,
				 new_window:  xt::Window_Id
			       }
	      ;

		# ddeboer test, fall 2004. 
		# rcref = REF 0

	    # Discard instances of an X-event that
	    # are the product of SubstructureNotify,
	    # instead of StructureNotify.
	    #
	    fun ignore_substructure_notify_xevents (w1, w2)
		=
		if (w1 == w2)  TO_WINDOW w1;
		else           TO_TRASH;
		fi;

	    # Extract the destination xid of an X-event 
	    #
	    fun extract_dst (et::x::KEY_PRESS      { event_window_id, ... } ) =>  TO_WINDOW event_window_id;
		extract_dst (et::x::KEY_RELEASE    { event_window_id, ... } ) =>  TO_WINDOW event_window_id;
		extract_dst (et::x::BUTTON_PRESS   { event_window_id, ... } ) =>  TO_WINDOW event_window_id;
		extract_dst (et::x::BUTTON_RELEASE { event_window_id, ... } ) =>  TO_WINDOW event_window_id;
		extract_dst (et::x::MOTION_NOTIFY  { event_window_id, ... } ) =>  TO_WINDOW event_window_id;
		extract_dst (et::x::ENTER_NOTIFY   { event_window_id, ... } ) =>  TO_WINDOW event_window_id;
		extract_dst (et::x::LEAVE_NOTIFY   { event_window_id, ... } ) =>  TO_WINDOW event_window_id;
		extract_dst (et::x::FOCUS_IN       { event_window_id, ... } ) =>  TO_WINDOW event_window_id;
		extract_dst (et::x::FOCUS_OUT      { event_window_id, ... } ) =>  TO_WINDOW event_window_id;

#		extract_dst (et::x::KeymapNotify {, ... } ) = 
#		extract_dst (et::x::GraphicsExpose ?? 
#		extract_dst (et::x::NoExpose {, ... } ) =
#		extract_dst (et::x::MapRequest {, ... } ) =
#		extract_dst (et::x::ConfigureRequest {, ... } ) =
#		extract_dst (et::x::ResizeRequest {, ... } ) =
#		extract_dst (et::x::CirculateRequest {, ... } ) =

		extract_dst (et::x::EXPOSE { exposed_window_id, ... } ) =>  TO_WINDOW  exposed_window_id;


		extract_dst (et::x::VISIBILITY_NOTIFY { changed_window_id, ... } ) =>  TO_WINDOW  changed_window_id;

		extract_dst (et::x::CREATE_NOTIFY { parent_window_id => parent , created_window_id, ... } )
		    =>
		    CREATE_WINDOW { parent, new_window => created_window_id };

		extract_dst (et::x::DESTROY_NOTIFY { event_window_id, destroyed_window_id, ... } )
		    =>
		    event_window_id == destroyed_window_id
			##
                        ??  DESTROY_WINDOW  event_window_id	# Remove window from registry. 
			::  TO_WINDOW       event_window_id;	# Report to parent that child is dead. 

		extract_dst (et::x::UNMAP_NOTIFY { event_window_id, unmapped_window_id, ... } )
		    =>
		    ignore_substructure_notify_xevents (event_window_id, unmapped_window_id);

		extract_dst (et::x::MAP_NOTIFY { event_window_id, mapped_window_id, ... } )
		    =>
		    ignore_substructure_notify_xevents (event_window_id, mapped_window_id);


		extract_dst (et::x::REPARENT_NOTIFY _)
		    =>
		    TO_TRASH;

		extract_dst (et::x::CONFIGURE_NOTIFY { event_window_id, configured_window_id, ... } )
		    =>
		    ignore_substructure_notify_xevents (event_window_id, configured_window_id);


		extract_dst (et::x::GRAVITY_NOTIFY { event_window_id, moved_window_id, ... } )
		    =>
		    ignore_substructure_notify_xevents (event_window_id, moved_window_id);


		extract_dst (et::x::CIRCULATE_NOTIFY { event_window_id, circulated_window_id, ... } )
		    =>
		    ignore_substructure_notify_xevents (event_window_id, circulated_window_id);


		extract_dst (et::x::PROPERTY_NOTIFY   _) => TO_WINDOW_PROPERTY_IMP;    # We may have other uses of PropertyNotify someday.
		extract_dst (et::x::SELECTION_CLEAR   _) => TO_SELECTION_IMP;
		extract_dst (et::x::SELECTION_REQUEST _) => TO_SELECTION_IMP;
		extract_dst (et::x::SELECTION_NOTIFY  _) => TO_SELECTION_IMP;

		extract_dst (et::x::COLORMAP_NOTIFY { window_id, ... } ) => TO_WINDOW window_id;
		extract_dst (et::x::CLIENT_MESSAGE  { window_id, ... } ) => TO_WINDOW window_id;

		extract_dst  et::x::MODIFIER_MAPPING_NOTIFY     => TO_ALL;
		extract_dst (et::x::KEYBOARD_MAPPING_NOTIFY _)  => TO_ALL;
		extract_dst  et::x::POINTER_MAPPING_NOTIFY      => TO_ALL;

		extract_dst e => {
		   xgripe::warning (string::cat [
		     "[xsocket-to-topwin: unexpected ", xevent_to_string::xevent_name e, " event]\n"]);
		   TO_TRASH;};
	      end;
    #  +DEBUG 

	stipulate

	    xid_to_string = xtype_to_string::xid_to_string;

	    fun dst2s (TO_WINDOW w)
		    =>
		    ("ToWindow(" + xid_to_string w + ")");

		dst2s (CREATE_WINDOW { parent, new_window } )
		    =>
		    string::cat [
		     "CreateWin { parent=", xid_to_string parent, ", new_window=",
		     xid_to_string new_window, "}"
		   ];

		dst2s (DESTROY_WINDOW w)     => ("DestroyWin(" + xid_to_string w + ")");
		dst2s TO_KEYMAP_IMP          => "ToKeymapServer";
		dst2s TO_WINDOW_PROPERTY_IMP => "ToPropertyServer";
		dst2s TO_SELECTION_IMP       => "ToSelectionServer";
		dst2s TO_ALL                 => "ToAll";
		dst2s TO_TRASH               => "ToTrash";
	    end;

	herein

	    extract_dst
		=
		fn event
		    =
		    {   dst = extract_dst event;

			xtracing::print_if xtracing::winreg_tracing .{
			    cat ["xsocket_to_topwindow_router: ", xevent_to_string::xevent_name event, " => ", dst2s dst];
			};

			dst;
		    };
	end;
    #  -DEBUG 

	herein

	    Xsocket_To_Topwindow_Router
		=
		XSOCKET_TO_TOPWINDOW_ROUTER 
		  {
		    plea_slot:    Mailslot( plea::Mail ),
		    reply_slot:   Mailslot( Mailop( (Envelope_Route, et::x::Event) ) ),
		    lock_slot:    Mailslot( Bool )
		  };



	    stipulate

		fun set_window_subtree_locks_to
			(bool: Bool)	
		    =
		    set
		    where
			fun set (WINDOW_DESC { lock, children, ... } )
			    =
			    {   lock := bool;
				set_list *children;
			    }

			also
			fun set_list (wd ! r)
				=>
				{   set wd;
				    set_list r;
				};

			    set_list []
				=>
				();
			end;
		    end;
	    herein

		lock_tree   =  set_window_subtree_locks_to   TRUE;
		unlock_tree =  set_window_subtree_locks_to   FALSE;

	    end;

	    # This is called exactly one place, in
	    #     src/lib/x-kit/xclient/src/window/xsession.pkg
	    #
	    fun make_xsocket_to_topwindow_router
		{
		  display => dy::XDISPLAY { xsocket, ... },
		  keymap_imp,
		  prop_event_slot,
		  sel_event_slot
		}
		=
		{
    #		/* testing: ddeboer, fall 2004. *
    #		rn = *rcref
    #		(file::print ("Started registry " + (int::to_string rn) + "\n");
    #			      rcref:= *rcref + 1)
    #		* end testing. */

		    xevent_in'
			=
			xok::wait_for_xevent  xsocket;

		    register_plea_slot  =   make_mailslot ();
		    register_reply_slot =   make_mailslot ();

		    lock_reply_slot     =   make_mailslot ();
								    # hash_xid	is from   src/lib/x-kit/xclient/src/stuff/hash-xid.pkg
		    id_map =  hash_xid::make_map ();
		    #
		    find   =  hash_xid::get    id_map;
		    insert =  hash_xid::set    id_map;
		    remove =  hash_xid::remove id_map;

		    fun do_plea (plea::NOTE_WINDOW window)
			    =>
			    {   # Log a new top-level window:

				event_slot = make_mailslot ();

				insert
				  ( window,
				    WINDOW_DESC
				      {
					id => window,
					route => ENVELOPE_ROUTE_END window,
					parent => NULL,
					children => REF [],
					lock => REF FALSE,
					event_slot => event_slot
				      }
				  );

				give  (register_reply_slot,  take'  event_slot);
			    };

		       do_plea (plea::LOCK_WINDOW   window) =>   lock_tree (find window);
		       do_plea (plea::UNLOCK_WINDOW window) => unlock_tree (find window);

		       do_plea (plea::WINDOW_IS_LOCKED window)
			   =>
			   {   my WINDOW_DESC { lock, ... }
				   =
				   find window;

			       give  (lock_reply_slot,  *lock);
			   };
		    end;

		    fun new_subwin (parent, child_id)
			=
			{
			    (find parent)
				-> 
				parent_desc as WINDOW_DESC { route, event_slot, children, lock, ... };

			    fun extend_route (ENVELOPE_ROUTE_END w)      =>  ENVELOPE_ROUTE (w, ENVELOPE_ROUTE_END child_id);
				extend_route (ENVELOPE_ROUTE (w, route)) =>  ENVELOPE_ROUTE (w, extend_route route);
			    end;

			    child_route = extend_route route;

			    child
				=
				WINDOW_DESC
				  {
				    id => child_id,
				    route => child_route,
				    parent => THE parent_desc,
				    children => REF [],
				    lock => REF *lock,
				    event_slot
				  };

			    children := child ! *children;
			    insert (child_id, child);
			};

		    # ddeboer, test, fall 2004 
		    # cref = REF 0

		    fun push_event (e, WINDOW_DESC { route, event_slot, ... } )
			= 
			give  (event_slot, (route, e));


		    fun push_event_to_window (e, window_id)
			=
			(push_event (e, find window_id))
			except
			    hash_xid::XID_NOT_FOUND = ();

		    fun do_xevent e
			=
			case (extract_dst e)
			    #
			    TO_WINDOW window_id
				=>
				push_event_to_window (e, window_id);

			    CREATE_WINDOW { parent, new_window }
				=>
				{   new_subwin (parent, new_window);
				    push_event_to_window (e, parent);
				};

			    DESTROY_WINDOW window_id
				=>
				case (remove window_id)
				    #
				    (window as WINDOW_DESC { parent=>THE (WINDOW_DESC { children, ... } ), ... } )
					=>
					{   fun remove_child ((w as WINDOW_DESC { id, ... } ) ! r)
						    =>
						    if (id == window_id)  r;
						    else                  (w ! (remove_child r));
						    fi;

						remove_child []
						    =>
						    {   xgripe::warning "[xsocket-to-topwin: missing child]";
							[];
						    };
					    end;

					    children
						:=
						remove_child *children;

					    push_event (e, window);
					};

				    window
					=>
					push_event (e, window);
				esac;

			    TO_KEYMAP_IMP
				=>
				{   xgripe::warning "[xsocket-to-topwin: unexpected ToKeymapServer]";
				    ();
				};

			    TO_WINDOW_PROPERTY_IMP  =>  give  (prop_event_slot, e);
			    TO_SELECTION_IMP =>  give  (sel_event_slot,  e);

			    TO_TRASH => ();
			    TO_ALL   => apply (fn (_, x) = push_event (e, x))
					      (hash_xid::list id_map);
			esac;

		    mailop
			=
			choose [
			    take'  register_plea_slot
				==>
				do_plea,

			    xevent_in'
				==>
				do_xevent
			];

		    # fun loop () = { do_mailop mailop; loop(); };
	  /* DEBUG */ fun loop () = { xtracing::print_if xtracing::winreg_tracing .{ "Winreg::loop: waiting."; };
				      do_mailop mailop;
				      loop();
				    };

		    xtracing::make_thread  "xsocket-to-topwin"  loop;

		    XSOCKET_TO_TOPWINDOW_ROUTER
		      {
			plea_slot  => register_plea_slot,
			reply_slot => register_reply_slot,
			lock_slot  => lock_reply_slot
		      };
		};						# fun make_xsocket_to_topwindow_router


	    fun note_toplevel_window (XSOCKET_TO_TOPWINDOW_ROUTER { plea_slot, reply_slot, ... }, window)
		=
		{   give  (plea_slot,  plea::NOTE_WINDOW window);
		    take   reply_slot;
		};

	    # This is nowhere called:
	    #
	    fun lock_window_tree (XSOCKET_TO_TOPWINDOW_ROUTER { plea_slot, reply_slot, ... }, window)
		=
		{   give (plea_slot, plea::LOCK_WINDOW window);

		    .{  give (plea_slot, plea::UNLOCK_WINDOW window);  };
		};

	    # This gets called exactly one place, in
	    #
	    #     src/lib/x-kit/xclient/src/window/draw-imp.pkg
	    #
	    fun window_is_locked (XSOCKET_TO_TOPWINDOW_ROUTER { plea_slot, lock_slot, ... }, window)
		=
		{   give (plea_slot, plea::WINDOW_IS_LOCKED window);
		    take lock_slot;
		};
	end;					# stipulate
    };						# package xsocket_to_topwindow_router
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
