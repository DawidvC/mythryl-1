
# This module is responsible for partitioning the character set into
# equivalence classes

package EquivClassTable :> EQUIV_CLASS_TABLE {

   package a = rw_vector
   package h = hash_table
   type Symbol = Int

   enum equivclass = 
      EQV of { stamp:    Ref( word ),
              min_char:  Symbol,
              max_char:  Symbol,
              classes:  a::Rw_Vector(  List(  word ) )
             }

   fun new { min, max } = 
   let n = max+1 
   in  EQV { stamp=REF 0w0, classes=a::rw_vector (n,[]), min_char=min, max_char=max }
   end
       
   fun set (EQV { stamp, classes, ... } ) s = 
   let st = *stamp
       fun mark [] = ()
         | mark (c . cs) = (a::update (classes, c, st . a::sub (classes, c)); mark cs)
   in  stamp := st + 0w1; 
       mark s
   end

   fun single (EQV { stamp, classes, ... } ) c = 
   let st = *stamp
   in  stamp := st + 0w1;
       a::update (classes, c, [st])
   end

   fun classes (EQV { classes, min_char, max_char, ... } ) = 
   let exception Classes
       fun h ([], w) = w
         | h (x . xs, w) = h (xs, x+unt.<<(w, 0w2))
       fun hash xs = h (xs, 0w0)
       fun eq (x, y: List( word )) = x=y
       table  = h::makeTable (hash, eq) (16, Classes)
       find   = h::find table
       insert = h::set table
       numclasses = REF 0
   in  a::keyed_apply (fn (c, marker) => 
               case find marker of
                NULL => (insert (marker, (*numclasses,[c])); 
                         numclasses := *numclasses+1)
              | THE (k, cs) => insert (marker, (k, c . cs)))
                (classes, min_char, NULL);
       { numclasses = *numclasses,
        partitions = h::vals_list table
       }
   end
 
   fun mapping (eqv as EQV { max_char, ... } ) =
   let my { numclasses, partitions, ... } = classes eqv
       m = a::rw_vector (max_char+1,-1)
   in  apply (fn (k, cs) => apply (fn c => a::update (m, c, k)) cs) partitions;
       { numclasses=numclasses, mapping=m }
   end
       

}
