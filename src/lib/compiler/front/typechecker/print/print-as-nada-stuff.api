## print-as-nada-stuff.api

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6



api Print_As_Nada_Stuff {

    Break_Style = CONSISTENT | INCONSISTENT;

    open_style_box:  Break_Style
		   -> prettyprint::Stream
		   -> prettyprint::Indent
		   -> Void;

    print_sequence_as_nada:  prettyprint::Stream
			  ->
			   {   sep:   prettyprint::Stream -> Void, 
			       pr:    prettyprint::Stream -> X -> Void,
			       style: Break_Style
			   }
			  -> List( X )
			  -> Void;

    print_closed_sequence_as_nada:  prettyprint::Stream
				-> {   front: prettyprint::Stream -> Void, 
				       sep:   prettyprint::Stream -> Void,
				       back:  prettyprint::Stream -> Void,
				       pr:    prettyprint::Stream -> X -> Void,
				       style: Break_Style
				   }
				-> List( X )
				-> Void;

    print_symbol_as_nada:  prettyprint::Stream
			-> symbol::Symbol
			-> Void;

    heap_string:  String -> String;

    print_lib7_string_as_nada:  prettyprint::Stream
			  -> String
			  -> Void;

    print_intinf_as_nada:  prettyprint::Stream
		-> integer::Int
		-> Void;

    ppvseq:  prettyprint::Stream
	     -> Int
	     -> String
	     -> (prettyprint::Stream -> X -> Void)
	     -> List( X ) -> Void;

    ppvlist:  prettyprint::Stream
	      -> (String,
		 String,
		 (prettyprint::Stream -> X -> Void),
		 List( X ))
	      -> Void;

    ppvlist' : prettyprint::Stream
	       -> (String,
		  String,
		  (prettyprint::Stream -> String -> X -> Void),
		  List( X ))
	       -> Void;

    print_int_path_as_nada:      prettyprint::Stream -> List( Int )                -> Void;
    print_symbol_path_as_nada:   prettyprint::Stream -> symbol_path::Symbol_Path   -> Void;
    print_inverse_path_as_nada:  prettyprint::Stream -> inverse_path::Inverse_Path -> Void;
    newline_indent:              prettyprint::Stream -> Int                        -> Void;

   #  Needed in PPTypes, unparse_package_language 

    find_path:  (inverse_path::Inverse_Path,
		 (X -> Bool),
		 (symbol_path::Symbol_Path -> X))
	       -> ((List( symbol::Symbol ), Bool));

    print_tuple_as_mythrl7:  prettyprint::Stream
		       -> (prettyprint::Stream -> X -> Void)
		       -> List( X )
		       -> Void;

    print_int_as_nada:           prettyprint::Stream -> Int -> Void;
    print_comma_as_nada:         prettyprint::Stream -> Void;
    print_comma_newline_as_nada:  prettyprint::Stream -> Void;

    newline_apply:  prettyprint::Stream
		   -> (prettyprint::Stream -> X -> Void)
		   -> List( X )
		   -> Void; 

    break_apply:  prettyprint::Stream
		 -> (prettyprint::Stream -> X -> Void)
		 -> List( X )
		 -> Void; 

    en_pp:  prettyprint::Stream
	   -> {   break:       { spaces: Int,   indent_on_wrap: Int } -> Void, 
		  newline:     Void -> Void,
		  begin_horizontal_else_vertical_box:   Int -> Void,
		  begin_wrap_box:  Int -> Void,
		  end_box:    Void -> Void, 
		  pps:         String -> Void
	      };

    print_array_as_nada:  prettyprint::Stream
		       -> ((prettyprint::Stream -> X -> Void),
			  Rw_Vector( X ))
		       -> Void;

}; #  Api Print_As_Nada_Stuff 


## Copyright 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
