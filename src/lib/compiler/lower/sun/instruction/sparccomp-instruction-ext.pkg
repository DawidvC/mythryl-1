## sparccomp-instruction-ext.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/sparc.make6



# Compiling a trivial extensions to the Sparc instruction set
# (UNIMP instruction)



###              "Aerial flight is one of that class of problems
###               with which men will never have to cope."
###
###                                  -- Simon Newcomb



api Sparccomp_Instr_Ext {

    package codetree:  Codetree;				# Codetree		is from   src/lib/compiler/lower/codetree/codetree.api

    package instruction_set
	:
	Instruction_Set_Sparc					# Instruction_Set_Sparc	is from   src/lib/compiler/lower/sun/instruction/instruction-set-sparc.api
	where codetree == codetree;

    package codetree_stream
	:
	Codetree_Stream						# Codetree_Stream	is from   src/lib/compiler/lower/codetree/codetree-stream.api
	where codetree == instruction_set::codetree;

    package control_flow_graph
	:
	Control_Flow_Graph					# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where instruction_set == instruction_set;


    Reducer
	=
	codetree_stream::Reducer
          (
            instruction_set::Instruction,
            instruction_set::cells::Cellset,
            instruction_set::Operand,
            instruction_set::Addressing_Mode,
            control_flow_graph::Control_Flow_Graph
          );

    compile_sext
	:
	Reducer
	->
        { statement:  sparc_instr_ext::Sext (codetree::Statement, codetree::Int_Expression, codetree::Float_Expression, codetree::Bool_Expression),
	  notes: List( codetree::Note )
        }
	->
        Void;
};

# We are invoked from:
#
#     src/lib/compiler/codegen/sun/sparc-codetree-ext-comp.pkg

generic package sparc_compiler_instructionset_extension_g (

    package instruction_set:    Instruction_Set_Sparc;		# Instruction_Set_Sparc		is from   src/lib/compiler/lower/sun/instruction/instruction-set-sparc.api

    package codetree_stream
	:
	Codetree_Stream						# Codetree_Stream	is from   src/lib/compiler/lower/codetree/codetree-stream.api
	where codetree == instruction_set::codetree;

    package control_flow_graph
	:
	Control_Flow_Graph					# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where
            instruction_set == instruction_set
	also
            pseudo_op
            ==
            codetree_stream::instruction_stream::pseudo_op;
   )

: (weak) Sparccomp_Instr_Ext					# Sparccomp_Instr_Ext	is from   src/lib/compiler/lower/sun/instruction/sparccomp-instruction-ext.pkg

{
    package control_flow_graph =  control_flow_graph;
    package codetree_stream    =  codetree_stream;
    package codetree           =  codetree_stream::codetree;
    package instruction_set    =  instruction_set;
    package cells              =  instruction_set::cells;

    package g  = control_flow_graph;
    package t  = codetree;
    package ts = codetree_stream;
    package i  = instruction_set;
    package c  = cells;
    package x  = sparc_instr_ext;				# sparc_instr_ext	is from   src/lib/compiler/lower/sun/instruction/sparcinstr-ext.pkg

    Statement
        =
        x::Sext
          (
            t::Statement,
            t::Int_Expression,
            t::Float_Expression,
            t::Bool_Expression
          );

    Reducer
        =
        ts::Reducer
          (
            i::Instruction,
            c::Cellset,
            i::Operand,
            i::Addressing_Mode,
            g::Control_Flow_Graph
          );

    fun compile_sext reducer { statement: Statement, notes: List( t::Note ) }
	=
	{   reducer -> ts::REDUCER { emit, ... };

	    case statement   
                x::UNIMP i => emit (i::unimp { const22 => i }, notes);
            esac;
	};
};


## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
