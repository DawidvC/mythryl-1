
# Use this module to create a new Gtk class 

api GTK_NEW_CLASS =
api
   type super_tag( X )                            #  tag of superclass 
   type self_t( X )                               #  new tag of this class 
   type tag( X )    = super_tag( self_t( X ) )   #  full path of the tag 
   type GtkSelf( X ) = gtk::gtkptr'( tag( X ) )  #  full type 
   type data                                       #  each widget object carries this 

   #  metaclass for self 
   package class :
   api
      type tag
      my size:  c::S::size( c::su( tag ) )
      my type:   c::T::type( c::su( tag ) )
   end

   #  RTTI 
   my size:  c::S::size( c::su( tag( gtk::base ) ) )
   my type:   c::T::type(  c::su( tag( gtk::base ) ) )

   #  Function for getting a unique type id for this class 
   my get_type:  Void -> mlrep::unsigned::word

   #  Upcasting/Downcasting 
   my asSelf:  GtkSelf( X )        -> GtkSelf( gtk::base )
   my cast:    gtk::GtkObject( X ) -> GtkSelf( gtk::base )
   my cast'  : c::voidptr           -> GtkSelf( gtk::base )

   # Create a new object:
   my create:  data -> GtkSelf( gtk::base )
  
   # Get/Set data field 
   my get:  GtkSelf( X ) -> data
   my set:  GtkSelf( X ) * data -> Void

end
