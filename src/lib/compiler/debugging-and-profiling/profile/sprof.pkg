## sprof.pkg 

# Compiled by:
#     src/lib/compiler/debugging-and-profiling/debugprof.make6


api Sprof {

   instrument_declaration:  (symbol_table::Symbol_Table, compile_info::Compile_Info( deep_syntax::Declaration ))
                           -> source_code_source::Input_Source
                           -> deep_syntax::Declaration
                           -> deep_syntax::Declaration;

};

###            "The honest truth is that having
###             a lot of people staring at the code
###             does not find the really nasty bugs.
###                The really nasty bugs are found
###             by a couple of really smart people
###             who just kill themselves."
###
###                               -- Bill Joy


package sprof: Sprof {			# Sprof	is from   src/lib/compiler/debugging-and-profiling/profile/sprof.pkg

# WARNING: THE MAIN CODE IS CURRENTLY TURNED OFF; 
#     we will merge in Chesakov's SProf in the future (ZHONG).

fun instrument_declaration (dictionary, 
		compile_info as { make_highcode_variable, ... } : compile_info::Compile_Info( deep_syntax::Declaration ))
	       source deep_syntax_tree = deep_syntax_tree;

};


/* 

package {

local package sp = symbol_path
      package v = variables_and_constructors
      package m  = module
      package b  = Namings
      package p = highcode_primitive_op
      use deep_syntax variables_and_constructors types type_types
in 

infix -->
xsym = symbol::make_value_symbol "x"

fun instrumentDeclaration dictionary source deep_syntax_tree
    =
    if not *runtime_internals::profiling_control::sprofiling			# runtime_internals	is from   src/lib/std/src/nj/runtime-internals.pkg
    then deep_syntax_tree
    else let 

my namelist:   Ref( List( String ) ) = REF NIL
namecount = REF 0

alpha = TYPE_SCHEME_ARG_I 0

my entervar as ORDINARY_VARIABLE { type=entertyp, ... } = 
        make_ordinary_variable (symbol::make_value_symbol "enter", HIGHCODE_VARIABLE (make_highcode_variable()))
entertyp := TYPE_SCHEME_TYPE { sign=[FALSE],
			   type_scheme = TYPE_SCHEME { arity=1,
					 body=tupleType[alpha, intType] --> alpha }}


enterexp = VARIABLE_IN_EXPRESSION (REF entervar, [])

fun clean names = names
err = error_message::impossible

fun enter((line_a, line_b), names, expression) = 
   let fun dot (a,[z]) = symbol::name z . a
	 | dot (a, x . rest) = dot("." . symbol::name x . a, rest)
	 | dot _ = err "no path in instrexp"
       my (fname, lineno_a, charpos_a) = source_code_source::filepos source line_a
       my (_, lineno_b, charpos_b) = source_code_source::filepos source line_b
       position = [fname, ":", int::to_string lineno_a, ".",
		       int::to_string charpos_a, "-", int::to_string lineno_b, ".",
		       int::to_string charpos_b, ":"]
       name =  cat (position @ dot (["\n"], names))
       index = *namecount
    in namecount := index + 1;
       namelist := name . *namelist;
       APPLY_EXPRESSION (enterexp,
	      typecheck_stuff::TUPLEexp[expression, INT_CONSTANT_IN_EXPRESSION (int::to_string index, intType)])
   end		    

fun instrdec (line, names, VALUE_DECLARATIONS vbl)
	=
	{   fun instrvb (valueNaming as NAMED_VALUE { pattern=VARIABLE_IN_PATTERN (ORDINARY_VARIABLE { access=PRIMOP _, ... } ), ... } ) =valueNaming
	      | instrvb (valueNaming as NAMED_VALUE { pattern=TYPE_CONSTRAINT_PATTERN
			  (VARIABLE_IN_PATTERN (ORDINARY_VARIABLE { access=PRIMOP _, ... } ), _), ... } ) = valueNaming
	      | instrvb (NAMED_VALUE { pattern as VARIABLE_IN_PATTERN (ORDINARY_VARIABLE { path=sp::SYMBOL_PATH[n], ... } ),
			    expression, type_variables, bound_typevar_refs } ) =
		  NAMED_VALUE { pattern=pattern,
		     expression=instrexp (line, n . clean names) expression,
		     type_variables=type_variables, bound_typevar_refs=bound_typevar_refs }
	      | instrvb (NAMED_VALUE { pattern as TYPE_CONSTRAINT_PATTERN (VARIABLE_IN_PATTERN (ORDINARY_VARIABLE { path=sp::SYMBOL_PATH[n], ... } ), _),
			    expression, type_variables, bound_typevar_refs } ) =
		  NAMED_VALUE { pattern=pattern,
		     expression=instrexp (line, n . clean names) expression,
		     type_variables=type_variables, bound_typevar_refs=bound_typevar_refs }
	      | instrvb (NAMED_VALUE { pattern, expression, type_variables, bound_typevar_refs } ) =
			NAMED_VALUE { pattern=pattern, expression=instrexp (line, names) expression, type_variables=type_variables,
			   bound_typevar_refs=bound_typevar_refs };

	    VALUE_DECLARATIONS (map instrvb vbl);
	}
  
  | instrdec (line, names, RECURSIVE_VALUE_DECLARATIONS rvbl)
	=
	{   fun instrrvb (NAMED_RECURSIVE_VALUES { var as ORDINARY_VARIABLE { path=sp::SYMBOL_PATH[n], ... },
			       expression, result_type, ref_typevar_refs, bound_typevar_refs } ) =
		   NAMED_RECURSIVE_VALUES { var=var,
		       expression=instrexp (line, n . clean names) expression, 
		       result_type=result_type, ref_typevar_refs, bound_typevar_refs=bound_typevar_refs }
	       | instrrvb _ = err "RECURSIVE_VALUE_DECLARATIONS in SProf::instrdec";

	    RECURSIVE_VALUE_DECLARATIONS (map instrrvb rvbl);
	}

  | instrdec (line, names, ABSTRACT_TYPE_DECLARATION { abstract_type_constructors, with_type_constructors, body } )
	= 
	ABSTRACT_TYPE_DECLARATION { abstract_type_constructors=abstractTypeConstructors, with_type_constructors=withTypeConstructors, 
		    body=instrdec (line, names, body) };

  | instrdec (line, names, PACKAGE_DECLARATION strbl)
        = 
        PACKAGE_DECLARATION (map (fn named_package => instrstrb (line, names, named_package)) strbl)

  | instrdec (line, names, ABSTRACT_PACKAGE_DECLARATIONS strbl) = 
             ABSTRACT_PACKAGE_DECLARATIONS (map (fn named_package => instrstrb (line, names, named_package)) strbl)
  | instrdec (line, names, GENERIC_DECLARATION fctable) = 
             GENERIC_DECLARATION (map (fn generic_naming => instrfctb (line, names, generic_naming)) fctable)
  | instrdec (line, names, LOCAL_DECLARATION (localdec, visibledec)) =
	LOCAL_DECLARATION (instrdec (line, names, localdec), 
		 instrdec (line, names, visibledec))
  | instrdec (line, names, SEQUENTIAL_DECLARATIONS decl) = 
        SEQUENTIAL_DECLARATIONS (map (fn declaration => instrdec (line, names, declaration)) decl)
  | instrdec (line, names, SOURCE_CODE_REGION_FOR_DECLARATION (declaration, source_code_region)) = 
        SOURCE_CODE_REGION_FOR_DECLARATION (instrdec (source_code_region, names, declaration), source_code_region)
  | instrdec (line, names, other) = other

and /* instrstrexp (line, names, STRUCTstr { body, locations, str } ) =
      STRUCTstr { body = (map (fn declaration => instrdec (line, names, declaration)) body),
                locations=locations, str=str }
  | */ instrstrexp (line, names, COMPUTED_PACKAGE { oper, arg, parameterTypes, result, restycs } ) = 
      COMPUTED_PACKAGE { oper=oper, arg=instrstrexp (line, names, arg),
	     parameterTypes=parameterTypes, result=result, restycs=restycs }
  | instrstrexp (line, names, VARIABLE_PACKAGE x) = VARIABLE_PACKAGE x
  | instrstrexp (line, names, PACKAGE_LET { declaration => d, expression => body })
        =
	PACKAGE_LET { declaration => instrdec (line, names, d), expression => instrstrexp (line, names, body)}
  | instrstrexp (line, names, SOURCE_CODE_REGION_FOR_PACKAGE (body, source_code_region))
        = 
        SOURCE_CODE_REGION_FOR_PACKAGE (instrstrexp (source_code_region, names, body), source_code_region)

and instrstrb (line, names, NAMED_PACKAGE { name, str, def } ) = 
        NAMED_PACKAGE { str=str, def=instrstrexp (line, name . names, def), name=name }

and instrfctb (line, names,
               NAMED_GENERIC { fct, name, def=GENERIC_DEFINITION { parameter, def=d, parameterTypes, 
                                          fct=f, restycs }} ) =
      NAMED_GENERIC { fct=fct, name=name,
	   def=GENERIC_DEFINITION { parameter=parameter, def=instrstrexp (line, name . names, d),
		      fct=f, restycs=restycs, parameterTypes=parameterTypes }}
  | instrfctb (line, names, generic_naming) = generic_naming

and instrexp (line, names) =
 let fun rule (RULE (p, e)) = RULE (p, iexp e)
     and iexp (RECORD_EXPRESSION (l as _ . _)) =
          let fun field (lab, expression) = (lab, iexp expression)
           in enter (line, symbol::make_value_symbol (int::to_string (length l)) . names,
		       RECORD_EXPRESSION (map field l))
          end
       | iexp (VECTOR_EXPRESSION (l, t)) = VECTOR_EXPRESSION((map iexp l), t)
       | iexp (SEQUENTIAL_EXPRESSIONS l) = SEQUENTIAL_EXPRESSIONS (map iexp l)
       | iexp (APPLY_EXPRESSION (f, a)) = APPLY_EXPRESSION (iexp f, iexp a)
       | iexp (TYPE_CONSTRAINT_EXPRESSION (e, t)) = TYPE_CONSTRAINT_EXPRESSION (iexp e, t)
       | iexp (EXCEPT_EXPRESSION (e, HANDLER (FN_EXPRESSION (l, t)))) = 
	   EXCEPT_EXPRESSION (iexp e, HANDLER (FN_EXPRESSION (map rule l, t)))
       | iexp (EXCEPT_EXPRESSION (e, HANDLER h)) = EXCEPT_EXPRESSION (iexp e, HANDLER (iexp h))
       | iexp (RAISE_EXPRESSION (e, t)) = RAISE_EXPRESSION (iexp e, t)
       | iexp (LET_EXPRESSION (d, e)) = LET_EXPRESSION (instrdec (line, names, d), iexp e)
       | iexp (CASE_EXPRESSION (e, l, b)) = CASE_EXPRESSION (iexp e, map rule l, b)
       | iexp (FN_EXPRESSION (l, t)) = enter (line, names, (FN_EXPRESSION (map rule l, t)))
       | iexp (SOURCE_CODE_REGION_FOR_EXPRESSION (e, source_code_region)) = SOURCE_CODE_REGION_FOR_EXPRESSION (instrexp (source_code_region, names) e, source_code_region)
       | iexp (e as CONSTRUCTOR_EXPRESSION (ENUM_CONSTRUCTOR { rep, ... }, _)) =
           (case rep
	      of (UNTAGGED | TAGGED _ | REF | EXNFUN _) => # ZHONG?
		  etaexpand e
	       | _ => e)
       | iexp e = e 

     and etaexpand (e as CONSTRUCTOR_EXPRESSION(_, t)) = 
	 let v = ORDINARY_VARIABLE { access=HIGHCODE_VARIABLE (make_highcode_variable()), 
                            path=sp::SYMBOL_PATH [xsym], 
	                    type=REF types::UNDEFINED_TYPE }
	  in FN_EXPRESSION([RULE (VARIABLE_IN_PATTERN v, 
			 enter (line, names, APPLY_EXPRESSION (e, VARIABLE_IN_EXPRESSION (REF v, []))))],
		   types::UNDEFINED_TYPE)
	 end
       | etaexpand _ = err "etaexpand in sprof.pkg"
  in iexp
 end


derefop = ORDINARY_VARIABLE { path = sp::SYMBOL_PATH [symbol::make_value_symbol "!"],
		     access = PRIMOP p::DEREF,
		     type = REF (TYPE_SCHEME_TYPE { sign=[FALSE],
				      type_scheme = TYPE_SCHEME { arity=1,
						    body=
						      CONSTRUCTOR_TYPE (refTycon,[alpha]) 
						      --> alpha }} ) }

registerType =  
    TYPE_SCHEME_TYPE { sign=[FALSE],
	   type_scheme = TYPE_SCHEME { arity=1,
			 body= CONSTRUCTOR_TYPE (refTycon,[stringType -->
					       (tupleType[alpha, intType] 
						--> alpha)]) }}

registerVariable = core_access::getVariable "profile_sregister"

deep_syntax_tree' =instrdec((0, 0), NIL, deep_syntax_tree) 

in 
   LOCAL_DECLARATION (

       VALUE_DECLARATIONS [

           NAMED_VALUE {

               pattern = VARIABLE_IN_PATTERN entervar,

	       expression = APPLY_EXPRESSION (
                                APPexp (
                                    VARIABLE_IN_EXPRESSION (REF derefop,[]),
				    VARIABLE_IN_EXPRESSION (REF (registerVariable),[])
                                ),
				STRING_CONSTANT_IN_EXPRESSION (cat (reverse *namelist))
                            ),

	       type_variables = REF NIL,
	       bound_typevar_refs = []
           }
       ], #  ZHONG? 

       deep_syntax_tree'
   )

end #  function instrumentDeclaration 

end #  local 
}   #  package sprof 
*/





##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
