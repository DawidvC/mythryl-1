## codetree-stuff-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# This is a generic module for transforming Codetreeexpressions:
#   (1) expressions involving non-standard type widths are promoted when
#       necessary.
#   (2) operators that cannot be directly handled are expanded into 
#       more complex instruction sequences when necessary.
# 
# -- Allen Leung



###              "A mind all logic is like a knife all blade.
###               It makes the hand bleed that uses it."
###
###                             -- Rabindranath Tagore


# We are invoked by:
#
#     src/lib/compiler/lower/ppc/codetree/translate-codetree-to-ppc-g.pkg
#     src/lib/compiler/lower/sun/codetree/translate-codetree-to-sparc-g.pkg
#     src/lib/compiler/lower/x86/codetree/translate-codetree-to-x86-g.pkg


generic package codetree_stuff_g (

    package codetree:	Codetree;					# Codetree		is from   src/lib/compiler/lower/codetree/codetree.api
    package cells:  	Cells;						# Cells			is from   src/lib/compiler/lower/instruction/cells.api
    int_type:		codetree::Some_Type;				# Size of integer word 

    # This is a list of possible data widths to promote to.
    # The list must be in increasing sizes.  
    # We'll try to promote to the next largest size.
    #
    natural_widths:  List( codetree::Some_Type );  


    # Are integers of widths less than the size of integer word.
    # automatically sign extended, zero extended, or neither.
    # When in doubt, choose neither since it is conservative.
    #
    Rep = SE | ZE | NEITHER;

    rep:  Rep;
)

: (weak) Codetree_Stuff							# Codetree_Stuff	is from   src/lib/compiler/lower/codetree/codetree-stuff.api

{
    package codetree = codetree;
    package t        = codetree;

    package size
        =
        codetree_size_g (						# codetree_size_g	is from   src/lib/compiler/lower/codetree/codetree-size-g.pkg
            package codetree = codetree;
            int_type = int_type;
        );

    package c=   cells_basis;						# cells_basis		is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    fun error msg
        =
        lowcode_error_message::error("codetree_stuff_g", msg);

    fun unsupported what
        =
        error ("unsupported: " + what);

    zero_t =   t::LITERAL 0;

    fun li i
        =
        t::LITERAL (t::machine_int::from_int (int_type, i));

    fun cond_of (t::CC (cc, _)) => cc;
	cond_of (t::CMP(_, cc, _, _)) => cc;
	cond_of (t::CCMARK (cc, _)) => cond_of cc;
	cond_of _ => error "condOf";
    end;

    fun fcond_of (t::FCC (fcc, _)) => fcc;
	fcond_of (t::FCMP(_, fcc, _, _)) => fcc;
	fcond_of (t::CCMARK (cc, _)) => fcond_of cc;
	fcond_of _ => error "fcondOf";
    end;

    www =   int_type;

    # To compute f::type (a, b) 
    #
    # let r1 <- a << (intType - type)
    #     r2 <- b << (intType - type)
    #     r3 <- f (a, b) 
    # in
    #     r3 >>> (intType - type)
    # end
    # 
    # Lal showed me this neat trick!
    #
    fun arith (right_shift, f, type, a, b)
        = 
	{   shift =   li (www-type);

	    right_shift (www, f (www, t::LEFTSHIFT (www, a, shift), t::LEFTSHIFT (www, b, shift)), shift);
	};

    fun promote_type  type
	=
	loop  natural_widths
        where
	    fun loop ([])
		    => 
		    unsupported("Cannot promote integer width " + int::to_string type);

	        loop (t ! ts)
		    =>
		    t > type   ??    t
				 ::    loop ts;
            end;
	end;

    fun promotable right_shift (e, f, type, a, b)
        =
	case natural_widths

	     [] =>  arith (right_shift, f, type, a, b); 
	     _  =>  f (promote_type type, a, b);
        esac;

    fun is_natural w
	=
	loop natural_widths
        where
	    fun loop []
		    =>
		    FALSE;

	        loop (h ! t)
		    =>
		    h == w            or
		    w >  h  and  loop t;
            end;
	end;


    # Implement division with round-to-negative-infinity in terms
    # of division with round-to-zero.
    # The logic is as follows:
    #    - if q > 0, then we are done since any rounding was
    #      at the same time TO_ZERO and TO_NEGINF
    #      (This is the fast path that does not require calculating the remainder.)
    #    - otherwise we calculate r and see if it is zero; if so, no adjustment
    #    - finally if r and b have the same sign (i.e., r XOR b >= 0)
    #      we still don't need adjustment
    #    - otherwise adjust
    #
    # Instruction selection for machines (e.g., x86) where the hardware returns both
    # q and r anyway should implement this logic directly.
    #
    fun divinf (xdiv, type, aexp, bexp)
	=
	{   a =   cells::new_reg ();
	    b =   cells::new_reg ();
	    q =   cells::new_reg ();
	    r =   cells::new_reg ();

	    zero =   t::LITERAL 0;
	    one  =   t::LITERAL 1;

	    t::LET
	     (t::SEQ
	      [t::MOVE_INT (type, a, aexp),
	       t::MOVE_INT (type, b, bexp),
	       t::MOVE_INT (type, q, xdiv (t::DIV_TO_ZERO, type, t::REG (type, a), t::REG (type, b))),
	       t::IF (t::CMP (type, t::basis::GT, t::REG (type, q), zero),
		      t::SEQ [],
		      t::SEQ
		      [t::MOVE_INT (type, r, t::SUB (type, t::REG (type, a),
					       t::MULS (type, t::REG (type, b),
							   t::REG (type, q)))),
		       t::IF (t::CMP (type, t::basis::EQ, t::REG (type, r), zero),
			     t::SEQ [],
			     t::IF (t::CMP (type, t::basis::GE,
					  t::BITWISEXOR (type, t::REG (type, b), t::REG (type, r)),
					  zero),
				   t::SEQ [],
				   t::MOVE_INT (type, q, t::SUB (type, t::REG (type, q),
							   one))))])],
	      t::REG (type, q));
	};

    # Same for rem when rounding to negative infinity.
    # Since we have to return (and therefore calculate) the remainder anyway,
    # we can skip the q > 0 test because it will be caught by the samesign (r, b)
    # test.
    #
    # The odd case is when a = MININT and b = -1 in which case the DIVS op
    # will overflow and trap on some machines.  On others the result
    # will be bogus.  Should we fix that?
    #
    fun reminf (type, aexp, bexp)
	=
	{   a =   cells::new_reg ();
	    b =   cells::new_reg ();
	    q =   cells::new_reg ();
	    r =   cells::new_reg ();

	    zero =   t::LITERAL 0;

	    t::LET
	     (t::SEQ
	      [t::MOVE_INT (type, a, aexp),
	       t::MOVE_INT (type, b, bexp),
	       t::MOVE_INT (type, q, t::DIVS (t::DIV_TO_ZERO, type, t::REG (type, a),
						       t::REG (type, b))),
	       t::MOVE_INT (type, r, t::SUB (type, t::REG (type, a),
				       t::MULS (type, t::REG (type, q),
						   t::REG (type, b)))),
	       t::IF (t::CMP (type, t::basis::EQ, t::REG (type, r), zero),
		     t::SEQ [],
		     t::IF (t::CMP (type, t::basis::GE,
				      t::BITWISEXOR (type, t::REG (type, b), t::REG (type, r)),
				      zero),
			   t::SEQ [],
			   t::MOVE_INT (type, r, t::ADD (type, t::REG (type, r), t::REG (type, b)))))],
	      t::REG (type, r));
	};

    # Same for rem when rounding to zero. 
    #
    fun remzero (xdiv, xmul, type, aexp, bexp)
	=
	{   a =   cells::new_reg ();
	    b =   cells::new_reg ();

	    t::LET (t::SEQ [t::MOVE_INT (type, a, aexp),
			  t::MOVE_INT (type, b, bexp)],
		   t::SUB (type, t::REG (type, a),
			      xmul (type, t::REG (type, b),
					xdiv (t::DIV_TO_ZERO, type, t::REG (type, a),
								 t::REG (type, b)))));
	};


    # Translate integer expressions of unknown types into the appropriate
    # term.
    #
    fun divremz d (type, a, b)
        =
        d (t::DIV_TO_ZERO, type, a, b);

    fun compile_int_expression  expression
        = 
	case expression

	    t::CONST c => t::LABEXP expression;

	    # Non-overflow trapping ops 

	    t::NEG (type, a)    => t::SUB (type, zero_t, a);
	    t::ADD (type, a, b)  => promotable t::RIGHTSHIFT (expression, t::ADD, type, a, b);
	    t::SUB (type, a, b)  => promotable t::RIGHTSHIFT (expression, t::SUB, type, a, b);
	    t::MULS (type, a, b) => promotable t::RIGHTSHIFT (expression, t::MULS, type, a, b);

	    t::DIVS (t::DIV_TO_ZERO, type, a, b)
                =>
		promotable t::RIGHTSHIFT (expression, divremz t::DIVS, type, a, b);

	    t::DIVS (t::DIV_TO_NEGINF, type, a, b)
                =>
                divinf (t::DIVS, type, a, b);

	    t::REMS (t::DIV_TO_ZERO, type, a, b)
                =>
	        if (is_natural type)  remzero (t::DIVS, t::MULS, type, a, b);
	        else                    promotable t::RIGHTSHIFT (expression, divremz t::REMS, type, a, b);
                fi;

	    t::REMS (t::DIV_TO_NEGINF, type, a, b) => reminf (type, a, b);
	    t::MULU (type, a, b) => promotable t::RIGHTSHIFTU (expression, t::MULU, type, a, b);
	    t::DIVU (type, a, b) => promotable t::RIGHTSHIFTU (expression, t::DIVU, type, a, b);

	    t::REMU (type, a, b)
		 =>
		 if   (is_natural type)
		     
		      remzero (fn (_, type, a, b) => t::DIVU (type, a, b); end , t::MULU, type, a, b);
		 else
		      promotable t::RIGHTSHIFTU (expression, t::REMU, type, a, b);
                 fi;

	    # For overflow trapping ops; we have to do the simulation 
	    #
	    t::NEGT (type, a)   => t::SUBT (type, zero_t, a);
	    t::ADDT (type, a, b) => arith (t::RIGHTSHIFT, t::ADDT, type, a, b);
	    t::SUBT (type, a, b) => arith (t::RIGHTSHIFT, t::SUBT, type, a, b);
	    t::MULT (type, a, b) => arith (t::RIGHTSHIFT, t::MULT, type, a, b);
	    t::DIVT (t::DIV_TO_ZERO, type, a, b) => arith (t::RIGHTSHIFT, divremz t::DIVT, type, a, b);
	    t::DIVT (t::DIV_TO_NEGINF, type, a, b) => divinf (t::DIVT, type, a, b);

	     #  Conditional evaluation rules 
    /*** XXX: Seems wrong.
	   | t::COND (type, t::CC (cond, r), x, y)
                 =>
	         t::COND (type, t::CMP (type, cond, t::REG (type, r), zeroT), x, y)
    ***/
	    t::COND (type, t::CCMARK (cc, a), x, y) => t::MARK (t::COND (type, cc, x, y), a);
    /*** XXX: TODO
	   | t::COND (type, t::CMP (t, cc, e1, e2), x as (t::LITERAL 0 | t::LI32 0w0), y)
                 => 
	         t::COND (type, t::CMP (t, t::Basis::negateCond cc, e1, e2), y, t::LITERAL 0)
	         #  we'll let others strength reduce the multiply 
    ***/
	    t::COND (type, cc as t::FCMP _, yes, no)
		 =>
		 {   tmp =   cells::new_reg ();

		     t::LET(
		       t::SEQ [t::MOVE_INT (type, tmp, no), t::IF (cc, t::MOVE_INT (type, tmp, yes), t::SEQ [])],
		       t::REG (type, tmp));
		 };
    /*** XXX: TODO
	   | t::COND (type, cc, e1, (t::LITERAL 0 | t::LI32 0w0))
                 => 
	         t::MULU (type, t::COND (type, cc, t::LITERAL 1, t::LITERAL 0), e1)

	   | t::COND (type, cc, t::LITERAL m, t::LITERAL n)
                 =>
	         t::ADD (type, t::MULU (type, t::COND (type, cc, t::LITERAL 1, t::LITERAL 0), t::LITERAL (m-n)), t::LITERAL n)
    ***/

	    t::COND (type, cc, e1, e2)
                 => 
	         t::ADD (type, t::MULU (type, t::COND (type, cc, t::LITERAL 1, zero_t), t::SUB (type, e1, e2)), e2);

	    # ones-complement.
	    # WARNING: we are assuming two's complement architectures here.
	    # Are there any architectures in use nowadays that doesn't use 
	    # two's complement for integer arithmetic?
	    #
	    t::BITWISENOT (type, e)
                =>
                t::BITWISEXOR (type, e, t::LITERAL -1);


	    # Default ways of converting integers to integers
	    #
	    t::SIGNEXTEND (type, from_type, e)
		=> 
		if (from_type == type)
                     e;
		else
                     if (rep == SE           and
                         from_type < type  and
		         from_type >= head natural_widths
                        )
                        e; 
		     else
			  shift =   t::LITERAL (t::machine_int::from_int (int_type, www - from_type));

			  t::RIGHTSHIFT (www, t::LEFTSHIFT (www, e, shift), shift);
		     fi;
                fi;

	    t::ZEROEXTEND (type, from_type, e)
		=> 
		if (from_type <= type )
                    e;
                else 
		    case type    #  A_type < fromType 
			8 =>  t::BITWISEAND (type, e, t::LITERAL 0xff); 
		       16 =>  t::BITWISEAND (type, e, t::LITERAL 0xffff);
		       32 =>  t::BITWISEAND (type, e, t::LITERAL 0xffffffff);
		       64 =>  e;
		       _  =>  unsupported("unknown expression");
		     esac;
		fi;


	    # Converting floating point to integers.
	    # The following rule handles the case when type is not
	    # one of the naturally supported widths on the machine.
	    #
	    t::CONVERTFLOATTOINT (type, round, fty, e)
		 => 
		 {   type'   = promote_type (type);

		     t::SIGNEXTEND (type, type', t::CONVERTFLOATTOINT (type', round, fty, e));
		 };

	    # Promote to higher width and zero high bits:
	    # 
	    t::LEFTSHIFT (type, data, shift)
		 => 
		 {   type' =   promote_type (type);

		     t::ZEROEXTEND (type, type', t::LEFTSHIFT (type', data, shift));
                 };

	    expression => unsupported("unknown expression");
        esac;


    fun compile_float_expression float_expression
        =
        unsupported("unknown expression");


    fun mark (s, [])     =>   s;
        mark (s, a ! an) =>   mark (t::NOTE (s, a), an);
    end;


    fun compile_statement (t::SEQ s)
            =>
            s;

        compile_statement (t::IF (cond, t::JUMP (t::LABEL l, _), t::SEQ []))
            => 
	    [ t::BCC (cond, l) ];

        compile_statement (t::IF (cond, yes, no))
	    => 
	    {   label1 =   label::make_anonymous_label ();
		label2 =   label::make_anonymous_label ();

	        [t::BCC (cond, label1),
		 no,
		 t::JUMP (t::LABEL label2,[]),
		 t::DEFINE label1,
		 yes,
		 t::DEFINE label2
		];
	    };

        compile_statement stm
            =>
            error "compile_statement";
    end;


    # This function translations conditional expressions into a 
    # branch sequence.  
    # Note: we'll actually take advantage of the fact that 
    # e1 and e2 are allowed to be eagerly evaluated. 
    #
    fun compile_cond { expression=>(type, bool_expression, e1, e2), rd, notes }
	=
	{   label1 =   label::make_anonymous_label ();

	    [ t::MOVE_INT (type, rd, e1),
	      mark (t::BCC (bool_expression, label1), notes),
	      t::MOVE_INT (type, rd, e2),
	      t::DEFINE label1
	    ];
	};

    fun compile_fcond { expression=>(fty, bool_expression, e1, e2), fd, notes }
	=
	{   label1 =   label::make_anonymous_label ();

	    [ t::MOVE_FLOAT (fty, fd, e1),
	      mark (t::BCC (bool_expression, label1), notes),
	      t::MOVE_FLOAT (fty, fd, e2),
	      t::DEFINE label1
	    ];
	};
};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
