# html.grammar
#
# COPYRIGHT (c) 1996 AT&T Research.
#
# This grammar parses HTML 3.2.  Note that it does not enforce exclusions
# (for the content of FORM, PRE, etc).  Exclusions should be enforced as
# a second pass over the parse tree.


fun text_list_fn [text] => text;
    text_list_fn l => html::TEXT_LIST l;
end;

fun block_list_fn [blk] => blk;
    block_list_fn l => html::BLOCK_LIST l;
end;

fun textablock l
    =
    html::TEXTABLOCK (text_list_fn l);
    
# The elements of a definition list (<DL>) are tags (<DT>) and items (<DD>).
# To avoid shift/reduce problems, we parse them and then group them.


Deflist_Item
  = DL_TAG  html::Text
  | DL_ITEM html::Block;

fun group_def_list_contents []
        =>
        [];

    group_def_list_contents (h ! t)
        =>
	{   fun gdlc (DL_TAG tag, [])
                    =>
                    (   { dt=> [tag], dd=>html::BLOCK_LIST [] },
                        []
                    );

	        gdlc (DL_TAG tag, h ! t)
                    =>
                    {   my  ( { dt, dd }, r)
                            =
                            gdlc (h, t);

		        (   { dt => tag ! dt, dd },
                            r
                        );
		    };

	        gdlc (DL_ITEM blk, r)
                    =>
                    (   { dt => [], dd => blk },
                        group_def_list_contents r
                    );
           end;


	   (!) (gdlc (h, t));
	};
end;

# A list of Text, paragraphs and blocks requires grouping the Text items and
# making an implicit paragraph.  We cannot directly use TEXT_LIST because of
# conflicts. 


Blklist_Item
  = BL_TEXT  List( html::Text  )
  | BL_BLOCK List( html::Block );

fun cons_text_fn (txt, BL_TEXT tl ! r) =>   BL_TEXT (txt ! tl) ! r;
    cons_text_fn (txt, l)                =>   BL_TEXT [txt] ! l;
end;

fun cons_block_fn (blk, BL_BLOCK bl ! r) =>   BL_BLOCK (blk ! bl) ! r;
    cons_block_fn (blk, l)                 =>   BL_BLOCK [blk] ! l;
end;

fun make_block blks
    =
    {   fun f (BL_TEXT  tl) =>   textablock tl;
	    f (BL_BLOCK bl) =>   block_list_fn bl;
        end; 

	block_list_fn (list::map f blks);
    };

fun make_body blks = html::BODY {
	background => NULL,
	bgcolor => NULL,
	text => NULL,
	link => NULL,
	vlink => NULL,
	alink => NULL,
	content => make_block blks
      };

%%

# %pure
%verbose

%nonterm document of html::Html
       | starthtml of Null_Or html::Cdata
       | end_html
       | head of List html::Head_Content
       | starthead
       | endhead
       | headcontents of List html::Head_Content
       | headelements of List html::Head_Content
       | headelement of html::Head_Content
       | body of html::Body
       | startbody
       | endbody
       | bodycontent of html::Block
       | bodycontent0 of html::Body
       | bodycontent1 of List Blklist_Item
       | bodycontent2 of List Blklist_Item
       | bodyelement of html::Block
       | addresscontent1 of List Blklist_Item
       | addresscontent2 of List Blklist_Item
       | blockwoindex of html::Block
       | block of html::Block
       | paragraph of html::Block
       | list of html::Block
       | listitemlist of List html::List_Item
       | listitem of html::List_Item
       | dlitemlist of List Deflist_Item
       | dlitem of Deflist_Item
       | flow1 of List Blklist_Item
       | flow2 of List Blklist_Item
       | endli
       | enddt
       | enddd
       | preformatted of html::Block
       | optcaption of Null_Or html::Caption
       | tablerowlist of List html::Tr
       | tablerow of html::Tr
       | tablecelllist of List html::Table_Cell
       | tablecell of html::Table_Cell
       | textlist of html::Text
       | textlist' of List html::Text
       | textwoscript of html::Text
       | text of html::Text
       | font of html::Text
       | phrase of html::Text
       | special of html::Text
       | arealist of List html::Area
       | form of html::Text
       | optionlist of List html::Select_Option
       | endoption
       | pcdata of html::Pcdata
       | pcdatalist of List html::Pcdata
       | pcdataelem of html::Pcdata

%term EOF
  /* tags in alphabetical order */
    | START_A of htmlattr_vals::Attributes | END_A
    | START_ADDRESS | END_ADDRESS
    | START_APPLET of htmlattr_vals::Attributes | END_APPLET
    | TAG_AREA of htmlattr_vals::Attributes
    | START_B | END_B
    | TAG_BASE of htmlattr_vals::Attributes
    | START_BIG | END_BIG
    | START_BLOCKQUOTE | END_BLOCKQUOTE
    | START_BODY of htmlattr_vals::Attributes | END_BODY
    | TAG_BR of htmlattr_vals::Attributes
    | START_CAPTION of htmlattr_vals::Attributes | END_CAPTION
    | START_CENTER | END_CENTER
    | START_CITE | END_CITE
    | START_CODE | END_CODE
    | START_DD | END_DD
    | START_DFN | END_DFN
    | START_DIR of htmlattr_vals::Attributes | END_DIR
    | START_DIV of htmlattr_vals::Attributes | END_DIV
    | START_DL of htmlattr_vals::Attributes | END_DL
    | START_DT | END_DT
    | START_EM | END_EM
    | START_FONT of htmlattr_vals::Attributes | END_FONT
    | START_BASEFONT of htmlattr_vals::Attributes | END_BASEFONT
    | START_FORM of htmlattr_vals::Attributes | END_FORM
    | START_H1 of htmlattr_vals::Attributes | END_H1
    | START_H2 of htmlattr_vals::Attributes | END_H2
    | START_H3 of htmlattr_vals::Attributes | END_H3
    | START_H4 of htmlattr_vals::Attributes | END_H4
    | START_H5 of htmlattr_vals::Attributes | END_H5
    | START_H6 of htmlattr_vals::Attributes | END_H6
    | START_HEAD | END_HEAD
    | TAG_HR of htmlattr_vals::Attributes
    | START_HTML | END_HTML
    | START_I | END_I
    | TAG_IMG of htmlattr_vals::Attributes
    | TAG_INPUT of htmlattr_vals::Attributes
    | TAG_ISINDEX of htmlattr_vals::Attributes
    | START_KBD | END_KBD
    | START_LI of htmlattr_vals::Attributes | END_LI
    | TAG_LINK of htmlattr_vals::Attributes
    | START_MAP of htmlattr_vals::Attributes | END_MAP
    | START_MENU of htmlattr_vals::Attributes | END_MENU
    | TAG_META of htmlattr_vals::Attributes
    | START_OL of htmlattr_vals::Attributes | END_OL
    | START_OPTION of htmlattr_vals::Attributes | END_OPTION
    | START_P of htmlattr_vals::Attributes | END_P
    | TAG_PARAM of htmlattr_vals::Attributes
    | START_PRE of htmlattr_vals::Attributes | END_PRE
    | START_SAMP | END_SAMP
    | START_SCRIPT | END_SCRIPT
    | START_SELECT of htmlattr_vals::Attributes | END_SELECT
    | START_SMALL | END_SMALL
    | START_STRIKE | END_STRIKE
    | START_STRONG | END_STRONG
    | START_STYLE | END_STYLE
    | START_SUB | END_SUB
    | START_SUP | END_SUP
    | START_TABLE of htmlattr_vals::Attributes | END_TABLE
    | START_TD of htmlattr_vals::Attributes | END_TD
    | START_TEXTAREA of htmlattr_vals::Attributes | END_TEXTAREA
    | START_TH of htmlattr_vals::Attributes | END_TH
    | START_TITLE | END_TITLE
    | START_TR of htmlattr_vals::Attributes | END_TR
    | START_TT | END_TT
    | START_U | END_U
    | START_UL of htmlattr_vals::Attributes | END_UL
    | START_VAR | END_VAR
  /* raw text data */
    | PCDATA of String
    | CHAR_REF of String	/* &#dd; */
    | ENTITY_REF of String	/* &#name; */

%pure
%pos Int
%name Html
%start document

%header (
  generic package html_lr_vals_g (
    package token:  Token;
    package htmlattrs:  Html_Attributes; ))

%arg (ctx):  Int -> htmlattrs::Context

%eop EOF
%noshift EOF  /* avoids infinite loop in error recovery */

/** Some error-correction support **/
%value START_A ([])
%value START_APPLET ([
    ("CODE", htmlattrs::NAME ""),
    ("WIDTH", htmlattrs::NAME ""),
    ("HEIGHT", htmlattrs::NAME "")
  ])
%value TAG_AREA ([("ALT", htmlattrs::NAME "")])
%value TAG_BASE ([("URL", htmlattrs::NAME "")])
%value START_BODY ([])
%value TAG_BR ([])
%value START_CAPTION ([])
%value START_DIR ([])
%value START_DIV ([])
%value START_DL ([])
%value START_FONT ([])
%value START_BASEFONT ([])
%value START_FORM ([])
%value START_H1 ([])
%value START_H2 ([])
%value START_H3 ([])
%value START_H4 ([])
%value START_H5 ([])
%value START_H6 ([])
%value TAG_HR ([])
%value TAG_IMG ([("SRC", htmlattrs::NAME "")])
%value TAG_INPUT ([])
%value TAG_ISINDEX ([])
%value TAG_LINK ([])
%value START_MAP ([])
%value START_MENU ([])
%value TAG_META ([("CONTENT", htmlattrs::NAME "")])
%value START_OL ([])
%value START_OPTION ([])
%value START_P ([])
%value TAG_PARAM ([("NAME", htmlattrs::NAME "")])
%value START_PRE ([])
%value START_SELECT ([("NAME", htmlattrs::NAME "")])
%value START_TABLE ([])
%value START_TD ([])
%value START_TEXTAREA ([
    ("NAME", htmlattrs::NAME ""),
    ("ROWS", htmlattrs::NAME "0"),
    ("COLS", htmlattrs::NAME "0")
  ])
%value START_TH ([])
%value START_TR ([])
%value START_UL ([])

%%

document
	: starthtml head body end_html
		(html::HTML { version=>starthtml, head, body } )

starthtml
	: /* empty */		(NULL)
	| START_HTML		(NULL)

end_html
	: /* empty */		()
	| END_HTML		()


/*** head markup ***/

head
	: starthead headcontents endhead
		(headcontents)

starthead
	: /* empty */		()
	| START_HEAD 		()
endhead
	: /* empty */		()
	| END_HEAD 		()

headcontents
	: headelements START_TITLE pcdata END_TITLE headelements
		(headelements1 @ (html::HEAD_TITLE pcdata ! headelements2))

headelements
	: /* empty */
		([])
	| headelement headelements
		(headelement ! headelements)

headelement
	: TAG_META
		(htmlattrs::make_meta (ctx tag_metaleft, tag_meta))

	| TAG_LINK
		(htmlattrs::make_link (ctx tag_linkleft, tag_link))

	| TAG_ISINDEX
		(   {   stuff = htmlattrs::make_isindex (ctx tag_isindexleft, tag_isindex);
		        html::HEAD_ISINDEX stuff;
                    }
		)

	| TAG_BASE
		(htmlattrs::make_base (ctx tag_baseleft, tag_base))

	| START_STYLE pcdata END_STYLE
		(html::HEAD_STYLE (pcdata))

	| START_SCRIPT pcdata END_SCRIPT
		(html::HEAD_SCRIPT (pcdata))


/*** body content ***/

body
	: bodycontent0 endbody
		(bodycontent0)

endbody
	: /* empty */		()
	| END_BODY		()

bodycontent
	: bodycontent1
		(make_block bodycontent1)

bodycontent0
	: START_BODY bodycontent
		(htmlattrs::make_body (ctx start_bodyleft, start_body, bodycontent))
	| textwoscript bodycontent1
		(make_body (cons_text_fn (textwoscript, bodycontent1)))
	| bodyelement bodycontent1
		(make_body (cons_block_fn (bodyelement, bodycontent1)))
	| blockwoindex bodycontent1
		(make_body (cons_block_fn (blockwoindex, bodycontent1)))
	| paragraph END_P bodycontent1
		(make_body (cons_block_fn (paragraph, bodycontent1)))
	| paragraph bodycontent2
		(make_body (cons_block_fn (paragraph, bodycontent2)))

bodycontent1
	: /* empty */
		([])
	| text bodycontent1
		(cons_text_fn (text, bodycontent1))
	| bodyelement bodycontent1
		(cons_block_fn (bodyelement, bodycontent1))
	| block bodycontent1
		(cons_block_fn (block, bodycontent1))
	| paragraph END_P bodycontent1
		(cons_block_fn (paragraph, bodycontent1))
	| paragraph bodycontent2
		(cons_block_fn (paragraph, bodycontent2))

bodycontent2
	: /* empty */
		([])
	| bodyelement bodycontent1
		(cons_block_fn (bodyelement, bodycontent1))
	| block bodycontent1
		(cons_block_fn (block, bodycontent1))
	| paragraph END_P bodycontent1
		(cons_block_fn (paragraph, bodycontent1))
	| paragraph bodycontent2
		(cons_block_fn (paragraph, bodycontent2))

bodyelement
	: START_H1 textlist END_H1
		(htmlattrs::make_hn (1, ctx start_h1left, start_h1, textlist))
	| START_H2 textlist END_H2
		(htmlattrs::make_hn (2, ctx start_h2left, start_h2, textlist))
	| START_H3 textlist END_H3
		(htmlattrs::make_hn (3, ctx start_h3left, start_h3, textlist))
	| START_H4 textlist END_H4
		(htmlattrs::make_hn (4, ctx start_h4left, start_h4, textlist))
	| START_H5 textlist END_H5
		(htmlattrs::make_hn (5, ctx start_h5left, start_h5, textlist))
	| START_H6 textlist END_H6
		(htmlattrs::make_hn (6, ctx start_h6left, start_h6, textlist))
	| START_ADDRESS addresscontent1 END_ADDRESS
		(html::ADDRESS (make_block addresscontent1))

addresscontent1
	: /* empty */
		([])
	| text addresscontent1
		(cons_text_fn (text, addresscontent1))
	| paragraph END_P addresscontent1
		(cons_block_fn (paragraph, addresscontent1))
	| paragraph addresscontent2
		(cons_block_fn (paragraph, addresscontent2))

addresscontent2
	: /* empty */
		([])
	| paragraph END_P addresscontent1
		(cons_block_fn (paragraph, addresscontent1))
	| paragraph addresscontent2
		(cons_block_fn (paragraph, addresscontent2))

/*** block ***/

blockwoindex
	: list
		(list)
	| preformatted
		(preformatted)
	| START_DIV bodycontent END_DIV
		(htmlattrs::make_div (ctx start_divleft, start_div, bodycontent))
	| START_CENTER bodycontent END_CENTER
		(html::CENTER bodycontent)
	| START_BLOCKQUOTE bodycontent END_BLOCKQUOTE
		(html::BLOCKQUOTE bodycontent)
	| START_FORM bodycontent END_FORM
		(htmlattrs::make_form (ctx start_formleft, start_form, bodycontent))
	| TAG_HR
		(htmlattrs::make_hr (ctx tag_hrleft, tag_hr))
	| START_TABLE optcaption tablerowlist END_TABLE
		(htmlattrs::make_table(
		    ctx start_tableleft, start_table,
		    { caption => optcaption, body => tablerowlist } )
		)

block
	: blockwoindex
		(blockwoindex)
	| TAG_ISINDEX
		(   {   stuff =   htmlattrs::make_isindex (ctx tag_isindexleft, tag_isindex);
		        html::ISINDEX stuff;
                    }
		)

paragraph
	: START_P textlist
		(htmlattrs::make_p (ctx start_pleft, start_p, textlist))

list
	: START_UL listitemlist END_UL
		(htmlattrs::make_ul (ctx start_ulleft, start_ul, listitemlist))
	| START_OL listitemlist END_OL
		(htmlattrs::make_ol (ctx start_olleft, start_ol, listitemlist))
	| START_DIR listitemlist END_DIR
		(htmlattrs::make_dir (ctx start_dirleft, start_dir, listitemlist))
	| START_MENU listitemlist END_MENU
		(htmlattrs::make_menu (ctx start_menuleft, start_menu, listitemlist))
	| START_DL dlitemlist END_DL
		(htmlattrs::make_dl(
		  ctx start_dlleft, start_dl,
		  group_def_list_contents dlitemlist)
		)

listitemlist
	: /* empty */
		([])
	| listitem listitemlist
		(listitem ! listitemlist)

listitem
	: START_LI flow1 endli
		(htmlattrs::make_li (ctx start_lileft, start_li, make_block flow1))

dlitemlist
	: /* empty */
		([])
	| dlitem dlitemlist
		(dlitem ! dlitemlist)

dlitem
	: START_DT textlist enddt
		(DL_TAG textlist)
	| START_DD flow1 enddd
		(DL_ITEM (make_block flow1))

flow1
	: /* empty */
		([])
	| text flow1
		(cons_text_fn (text, flow1))
	| block flow1
		(cons_block_fn (block, flow1))
	| paragraph END_P flow1
		(cons_block_fn (paragraph, flow1))
	| paragraph flow2
		(cons_block_fn (paragraph, flow2))

flow2
	: /* empty */
		([])
	| block flow1
		(cons_block_fn (block, flow1))
	| paragraph END_P flow1
		(cons_block_fn (paragraph, flow1))
	| paragraph flow2
		(cons_block_fn (paragraph, flow2))

endli
	: /* empty */	()
	| END_LI	()
enddt
	: /* empty */	()
	| END_DT	()
enddd
	: /* empty */	()
	| END_DD	()

preformatted
	: START_PRE textlist END_PRE
		(htmlattrs::make_pre (ctx start_preleft, start_pre, textlist))

/*** Tables ***/

optcaption
	: /* empty */
		(NULL)
	| START_CAPTION textlist END_CAPTION
		(THE (htmlattrs::make_caption(
		  ctx start_captionleft, start_caption, textlist)))

tablerowlist
	: tablerow
		([tablerow])
	| tablerow tablerowlist
		(tablerow ! tablerowlist)

tablerow
	: START_TR tablecelllist
		(htmlattrs::make_tr (ctx start_trleft, start_tr, tablecelllist))
	| START_TR tablecelllist END_TR
		(htmlattrs::make_tr (ctx start_trleft, start_tr, tablecelllist))

tablecelllist
	: tablecell
		([tablecell])
	| tablecell tablecelllist
		(tablecell ! tablecelllist)

tablecell
	: START_TH bodycontent END_TH
		(htmlattrs::make_th (ctx start_thleft, start_th, bodycontent))
	| START_TH bodycontent
		(htmlattrs::make_th (ctx start_thleft, start_th, bodycontent))
	| START_TD bodycontent END_TD
		(htmlattrs::make_td (ctx start_tdleft, start_td, bodycontent))
	| START_TD bodycontent
		(htmlattrs::make_td (ctx start_tdleft, start_td, bodycontent))

/*** text ***/

textlist
	: textlist'
		(text_list_fn textlist')

textlist'
	: /* empty */
		([])
	| text textlist'
		(text ! textlist')

textwoscript
	: pcdataelem
		(html::PCDATA pcdataelem)
	| font
		(font)
	| phrase
		(phrase)
	| special
		(special)
	| form
		(form)

text
	: textwoscript
		(textwoscript)
	| START_SCRIPT pcdata END_SCRIPT
		(html::SCRIPT pcdata)
		
font
	: START_TT textlist END_TT
		(html::TT (textlist))
	| START_I textlist END_I
		(html::IX (textlist))
	| START_B textlist END_B
		(html::BX (textlist))
	| START_U textlist END_U
		(html::UX (textlist))
	| START_STRIKE textlist END_STRIKE
		(html::STRIKE (textlist))
	| START_BIG textlist END_BIG
		(html::BIG (textlist))
	| START_SMALL textlist END_SMALL
		(html::SMALL (textlist))
	| START_SUB textlist END_SUB
		(html::SUB (textlist))
	| START_SUP textlist END_SUP
		(html::SUP (textlist))
phrase
	: START_EM textlist END_EM
		(html::EM (textlist))
	| START_STRONG textlist END_STRONG
		(html::STRONG (textlist))
	| START_CODE textlist END_CODE
		(html::CODE (textlist))
	| START_DFN textlist END_DFN
		(html::DFN (textlist))
	| START_SAMP textlist END_SAMP
		(html::SAMP (textlist))
	| START_KBD textlist END_KBD
		(html::KBD (textlist))
	| START_VAR textlist END_VAR
		(html::VAR (textlist))
	| START_CITE textlist END_CITE
		(html::CITE (textlist))

special
	: START_A textlist END_A
		(htmlattrs::make_a (ctx start_aleft, start_a, textlist))
	| TAG_IMG
		(htmlattrs::make_img (ctx tag_imgleft, tag_img))
	| START_APPLET textlist END_APPLET
		(htmlattrs::make_applet (ctx start_appletleft, start_applet, textlist))
	| START_FONT textlist END_FONT
		(htmlattrs::make_font (ctx start_fontleft, start_font, textlist))
	| START_BASEFONT textlist END_BASEFONT
		(htmlattrs::make_basefont(
		  ctx start_basefontleft, start_basefont, textlist)
		)
	| TAG_BR
		(htmlattrs::make_br (ctx tag_brleft, tag_br))
	| START_MAP arealist END_MAP
		(htmlattrs::make_map (ctx start_mapleft, start_map, arealist))
	| TAG_PARAM
		(htmlattrs::make_param (ctx tag_paramleft, tag_param))

arealist
	: /* empty */
		([])
	| TAG_AREA arealist
		(htmlattrs::make_area (ctx tag_arealeft, tag_area) ! arealist)

form
	: TAG_INPUT
		(htmlattrs::make_input (ctx tag_inputleft, tag_input))
	| START_SELECT optionlist END_SELECT
		(htmlattrs::make_select (ctx start_selectleft, start_select, optionlist))
	| START_TEXTAREA pcdata END_TEXTAREA
		(htmlattrs::make_textarea(
		  ctx start_textarealeft, start_textarea,
		  pcdata)
		)

optionlist
	: /* empty */
		([])
	| START_OPTION pcdata endoption optionlist
		(htmlattrs::make_option (ctx start_optionleft, start_option, pcdata)
		  ! optionlist
		)

endoption
	: /* empty */
		()
	| END_OPTION
		()


/*** PCDATA list ***/

pcdata
	: pcdatalist
		(cat pcdatalist)

pcdatalist
	: /* empty */
		([])
	| pcdataelem pcdatalist
		(pcdataelem ! pcdatalist)

pcdataelem
	: PCDATA
		(pcdata)
	| CHAR_REF
		(char_ref)
	| ENTITY_REF
		(entity_ref)

