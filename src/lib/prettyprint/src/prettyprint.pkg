## prettyprint.pkg

# Compiled by:
#     src/lib/prettyprint/Prettyprint.make6


# An implementation of the Prettyprint interface.
#   - This is an (almost) literal copy of the original code in
#     lib/prettyprint/examples/old-prettyprint.sml



###            "The gods too are fond of a joke."
###
###                            -- Aristotle


api Prettyprint {

    include Prettyprint_Stream;				# Prettyprint_Stream	is from   src/lib/prettyprint/src/prettyprint-stream.api

    with_prettyprint_device:  Device
                              -> (Stream -> Void)
                              -> Void;

    prettyprint_to_string:  Int
                            -> (Stream -> X -> Void)
                            -> X
                            -> String;
};

package prettyprint: (weak)  Prettyprint {

    Prettyprint_Consumer
        =
        {   consumer:   String -> Void,
	    linewidth:  Int,
	    flush:      Void -> Void
        };

    package device {

	Device = Prettyprint_Consumer;
	Style  = Void;

	fun same_style _    = TRUE;
	fun push_style _    = ();
	fun pop_style _     = ();
	fun default_style _ = ();

	fun depth _ = NULL;
	fun line_width { consumer, linewidth, flush } = THE linewidth;
	fun text_width _ = NULL;

	fun space ( { consumer, linewidth, flush }, n)
	    =
	    consumer (string_conversion::pad_left ' ' n "");

	fun newline  { consumer, linewidth, flush }     = consumer "\n";
	fun string ( { consumer, linewidth, flush }, s) = consumer s;
	fun char   ( { consumer, linewidth, flush }, c) = consumer (str c);
	fun flush    { consumer, linewidth, flush }     = flush();
    };

    package pp
        =
        prettyprint_stream_g (				# prettyprint_stream_g		def in    src/lib/prettyprint/src/prettyprint-stream-g.pkg

            package token  = string_token;		# string_token			is from   src/lib/prettyprint/devices/string-token.pkg
            package device = device;
        );

    include pp;

    fun with_prettyprint_device device (f: pp::Stream -> Void)
        =
	{   stream =   pp::open_stream device;

            f stream;

	    pp::close_stream stream;
	};

    fun prettyprint_to_string   linewidth   prettyprint_g   chunk
        =
	{   l =   REF ([] : List( String ));

	    fun attach s
                =
                l   :=   s ! *l;

	    device
                =
                {   consumer => attach,
                    linewidth,
                    flush => fn()=>(); end 
                };

            with_prettyprint_device
                device
	        (fn prettyprint_stream => prettyprint_g prettyprint_stream chunk; end );

	    string::cat (list::reverse *l);
	};

}; #  package prettyprint 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 2003 The SML/NJ Fellowship
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
