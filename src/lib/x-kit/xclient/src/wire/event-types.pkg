## event-types.pkg
#
# Define the representation of X events
# used throughout x-kit.  These get created in
#
#     src/lib/x-kit/xclient/src/wire/wire-to-value.pkg
#
# and then routed through the widget mail system by
#
#     src/lib/x-kit/xclient/src/window/xsocket-to-topwindow-router.pkg
#     src/lib/x-kit/xclient/src/window/topwindow-to-widget-router.pkg
#
# and finally consumed by clients like
#
#     src/lib/x-kit/xclient/src/window/window.pkg
#
# These may be printed using
#
#     src/lib/x-kit/xclient/src/stuff/xevent-to-string.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6

stipulate
    package g  = geometry;		# geometry		is from   src/lib/x-kit/xclient/src/window/geometry.pkg
    package ts = xserver_timestamp;	# xserver_timestamp	is from   src/lib/x-kit/xclient/src/wire/xserver-timestamp.pkg
    package xt = xtypes;		# xtypes		is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
herein

    package event_types {

	stipulate

	    my (&)  = unt::bitwise_and;
	    my (|)  = unt::bitwise_or;
	    my (<<) = unt::(<<);

	    infix val | << & ;

	herein

	    # X event names 
	    #
	    Xevent_Name
	     = XEVENT_KEY_PRESS
	     | XEVENT_KEY_RELEASE
	     | XEVENT_BUTTON_PRESS
	     | XEVENT_BUTTON_RELEASE
	     | XEVENT_ENTER_WINDOW
	     | XEVENT_LEAVE_WINDOW
	     | XEVENT_POINTER_MOTION
	     | XEVENT_POINTER_MOTION_HINT
	     | XEVENT_BUTTON1MOTION
	     | XEVENT_BUTTON2MOTION
	     | XEVENT_BUTTON3MOTION
	     | XEVENT_BUTTON4MOTION
	     | XEVENT_BUTTON5MOTION
	     | XEVENT_BUTTON_MOTION
	     | XEVENT_KEYMAP_STATE
	     | XEVENT_EXPOSURE
	     | XEVENT_VISIBILITY_CHANGE
	     | XEVENT_STRUCTURE_NOTIFY
	     | XEVENT_RESIZE_REDIRECT
	     | XEVENT_SUBSTRUCTURE_NOTIFY
	     | XEVENT_SUBSTRUCTURE_REDIRECT
	     | XEVENT_FOCUS_CHANGE
	     | XEVENT_PROPERTY_CHANGE
	     | XEVENT_COLORMAP_CHANGE
	     | XEVENT_OWNER_GRAB_BUTTON
	     ;

	    # The types of the information
	    # carried by some XEvents: 
	    #
	    Key_Xevtinfo				#  KeyPress and KeyRelease 
	       =
	       { root:        xt::Window_Id,		# Root of the source window.
		 event:       xt::Window_Id,		# The window in which this was generated.
		 child:       Null_Or( xt::Window_Id ),	# The child of the event window that is the 
							# ancestor of the source window.
		 same_screen: Bool,			#  
		 root_pt:     g::Point,			# Event coordinates in the root window.
		 event_pt:    g::Point,			# Event coordinates in the event window.
		 keycode:     xt::Keycode,		# Keycode of the depressed key.
		 mod_state:   xt::Modifier_Key_State,	# State of the modifier keys (shift, ctrl...).
		 mbut_state:  xt::Mousebutton_State,	# State of mouse buttons.
		 timestamp:   ts::Xserver_Timestamp
	       };

	    Button_Xevtinfo				# ButtonPress and ButtonRelease.
	       =
	       {
		 root:        xt::Window_Id,		# Root of the source window.
		 event:       xt::Window_Id,		# Window in which this was generated.
		 child:       Null_Or( xt::Window_Id ),	# The child of the event window that is the 
							# ancestor of the source window.
		 same_screen: Bool,			#  
		 root_pt:     g::Point,			# Event coordinates in the root window.
		 event_pt:    g::Point,			# Event coordinates in the event window.
		 button:      xt::Mousebutton,		# The button that was pressed.
		 mod_state:   xt::Modifier_Key_State,	# State of the modifier keys (shift, ctrl...).
		 mbut_state:  xt::Mousebutton_State,	# State of mouse buttons.
		 timestamp:   ts::Xserver_Timestamp
	       };

	    Inout_Xevtinfo				#  EnterNotify and LeaveNotify 
	       =
	       {
		 root:        xt::Window_Id,		# Root window for the pointer position.
		 event:       xt::Window_Id,		# Event window.
		 child:       Null_Or( xt::Window_Id ),	# Child of event containing the pointer.
		 same_screen: Bool,			#  
		 root_pt:     g::Point,			# Final pointer position in root coordinates.
		 event_pt:    g::Point,			# Final pointer position in event coordinates 
		 mode:        xt::Focus_Mode,		# 
		 detail:      xt::Focus_Detail,		#  
		 mod_state:   xt::Modifier_Key_State,
		 mbut_state:  xt::Mousebutton_State,
		 focus:       Bool,			# TRUE, if event is the focus 
		 timestamp:   ts::Xserver_Timestamp
	       };

	    Focus_Xevtinfo				# FocusIn and FocusOut 
	       =
	       { event:   xt::Window_Id,		# The window that gained the focus 
		 mode:    xt::Focus_Mode,
		 detail:  xt::Focus_Detail
	       };


	   # X event messages:
	   #
	    Xevent
	     = KEY_PRESS_XEVENT       Key_Xevtinfo
	     | KEY_RELEASE_XEVENT     Key_Xevtinfo
	     | BUTTON_PRESS_XEVENT    Button_Xevtinfo
	     | BUTTON_RELEASE_XEVENT  Button_Xevtinfo
	     #
	     | MOTION_NOTIFY_XEVENT
		 {
		   root:        xt::Window_Id,		# The root of the source window.
		   event:       xt::Window_Id,		# The window in which this was generated.
		   child:       Null_Or(xt::Window_Id),	# The child of the event window that is the 
							# ancestor of the source window 
		   same_screen: Bool,			#  
		   root_pt:     g::Point,			# Event coords in the root window.
		   event_pt:    g::Point,			# Event coords in the event window.
		   hint:        Bool,			# TRUE if PointerMotionHint is selected.
		   mod_state:   xt::Modifier_Key_State,
		   mbut_state:  xt::Mousebutton_State,
		   timestamp:   ts::Xserver_Timestamp
		 }

	     | ENTER_NOTIFY_XEVENT  Inout_Xevtinfo
	     | LEAVE_NOTIFY_XEVENT  Inout_Xevtinfo
	     | FOCUS_IN_XEVENT  Focus_Xevtinfo
	     | FOCUS_OUT_XEVENT  Focus_Xevtinfo
	     | KEYMAP_NOTIFY_XEVENT  { }

	     | EXPOSE_XEVENT
		 { window:  xt::Window_Id,		# The exposed window. 
		   boxes:  List( g::Box ),		# The exposed rectangle.  The list is
							# so  that multiple events can be packed. 
		   count:  Int				# Number of subsequent expose events.
		 }

	     | GRAPHICS_EXPOSE_XEVENT
		 { drawable:      xt::Drawable_Id,
		   box:           g::Box,		# The obscured rectangle. 
		   count:         Int,			# The number of additional GraphicsExpose events.
		   major_opcode:  Unt,			# The graphics operation code.
		   minor_opcode:  Unt			# Always 0 for core protocol.
		 }

	     | NO_EXPOSE_XEVENT
		 { drawable:      xt::Drawable_Id,
		   major_opcode:  Unt,			# The graphics operation code.
		   minor_opcode:  Unt			# Always 0 for core protocol.
		 }

	     | VISIBILITY_NOTIFY_XEVENT
		 { window:      xt::Window_Id,		# The window with changed visibility state.
		   state:       xt::Visibility		# The new visibility state.
		 }

	     | CREATE_NOTIFY_XEVENT
		 { parent:      xt::Window_Id,		# The created window's parent.
		   window:      xt::Window_Id,		# The created window.
		   box:         g::Box,			# The window's rectangle.
		   border_wid:  Int,			# The width of the border.
		   override_redirect:  Bool		#  
		 }

	     | DESTROY_NOTIFY_XEVENT
		 { event:       xt::Window_Id,		# The window on which this was generated.
		   window:      xt::Window_Id		# The destroyed window.
		 }

	     | UNMAP_NOTIFY_XEVENT
		 { event:       xt::Window_Id,		# The window on which this was generated.
		   window:      xt::Window_Id,		# The window being unmapped.
		   from_config: Bool			# TRUE if parent was resized.
		 }

	     | MAP_NOTIFY_XEVENT
		 { event:       xt::Window_Id,		# The window on which this was generated.
		   window:      xt::Window_Id,		# Tthe window being mapped.
		   override_redirect:  Bool		#  
		 }

	     | MAP_REQUEST_XEVENT
		 { parent:      xt::Window_Id,		# The parent.
		   window:      xt::Window_Id		# The mapped window.
		 }

	     | REPARENT_NOTIFY_XEVENT
		 { event:       	xt::Window_Id,	# The window on which this was generated.
		   parent:      	xt::Window_Id,	# The new parent.
		   window:      	xt::Window_Id,	# The re-rooted window.
		   upperleft_corner:    g::Point,	# The upper-left corner.
		   override_redirect:   Bool		#  
		 }

	     | CONFIGURE_NOTIFY_XEVENT
		 { event:       xt::Window_Id,		# The window on which this was generated.
		   window:      xt::Window_Id,		# The reconfigured window.
		   sibling:     Null_Or(xt::Window_Id),	# The sibling that window is above (if any).
		   box:         g::Box,			# The window's rectangle.
		   border_wid:  Int,			# The width of the border.
		   override_redirect:  Bool		#  
		 }

	     | CONFIGURE_REQUEST_XEVENT
		 { parent:      xt::Window_Id,		# The parent.
		   window:      xt::Window_Id,		# The window to reconfigure.
		   sibling:     Null_Or(xt::Window_Id),	# The new sibling (if any).
		   x:           Null_Or(Int),		# The window's rectangle.
		   y:           Null_Or(Int),
		   wide:        Null_Or(Int),
		   high:        Null_Or(Int),
		   border_wid:  Null_Or(Int),		# The width of the border.
		   stack_mode:  Null_Or(xt::Stack_Mode)	# The mode for stacking windows.
		 }

	     | GRAVITY_NOTIFY_XEVENT  {
	       event:			xt::Window_Id,	# The window on which this was generated.
	       window:      		xt::Window_Id,	# The window being moved.
	       upperleft_corner:	g::Point	# Upper-left corner of window.
	     }

	     | RESIZE_REQUEST_XEVENT  {
	       window:      xt::Window_Id,		# The window to resize.
	       req_size:    g::Size			# The requested new size.
	     }

	     | CIRCULATE_NOTIFY_XEVENT  {
	       event:       xt::Window_Id,		# The window on which this was generated.
	       window:      xt::Window_Id,		# The window being circulated.
	       parent:      xt::Window_Id,		# The parent.
	       place:       xt::Stack_Pos		# The new place.
	     }

	     | CIRCULATE_REQUEST_XEVENT  {
	       parent:      xt::Window_Id,		# The parent.
	       window:      xt::Window_Id,		# The window to circulate.
	       place:       xt::Stack_Pos		# The place to circulate the window to.
	     }

	     | PROPERTY_NOTIFY_XEVENT  {
	       window:      xt::Window_Id,		# The window with the changed property.
	       atom:        xt::Atom,			# The affected property.
	       timestamp:   ts::Xserver_Timestamp,	# When the property was changed.
	       deleted:     Bool			# TRUE if the property was deleted.
	     }

	     | SELECTION_CLEAR_XEVENT  {
	       owner:       xt::Window_Id,		# The current owner of the selection.
	       selection:   xt::Atom,			# The selection.
	       timestamp:   ts::Xserver_Timestamp	# The last-change time.
	     }

	     | SELECTION_REQUEST_XEVENT  {
	       owner:       xt::Window_Id,		# The owner of the selection.
	       selection:   xt::Atom,			# The selection.
	       target:      xt::Atom,			# The requested type for the selection.
	       requestor:   xt::Window_Id,		# The requesting window.
	       property:    Null_Or( xt::Atom ),	# The property to store the selection in. 
	       timestamp:   xt::Timestamp		#  
	     }

	     | SELECTION_NOTIFY_XEVENT  {
	       requestor:  xt::Window_Id,		# The requestor of the selection.
	       selection:  xt::Atom,			# The selection.
	       target:     xt::Atom,          		# The requested type of the selection.
	       property:   Null_Or( xt::Atom ),		# The property to store the selection in.
	       timestamp:  xt::Timestamp       		#  
	     }

	     | COLORMAP_NOTIFY_XEVENT  {
	       window:     xt::Window_Id,		# The affected window.
	       cmap:       Null_Or( xt::Colormap_Id ),	# The colormap.
	       new:        Bool,			# TRUE, if the colormap attribute is changed.
	       installed:  Bool				# TRUE, if the colormap is installed.
	     }

	     | CLIENT_MESSAGE_XEVENT  {
	       window:     xt::Window_Id,		#  
	       type:       xt::Atom,			# The type of the message.
	       value:      xt::Raw_Data	        	# The message value.
	     }

	     | MODIFIER_MAPPING_NOTIFY_XEVENT		# Really a MappingNotify event.

	     | KEYBOARD_MAPPING_NOTIFY_XEVENT		# Really a MappingNotify event.
		 {
		   first_keycode:  xt::Keycode,
		   count:          Int
		 }

	     | POINTER_MAPPING_NOTIFY_XEVENT		# Really a MappingNotify event.
	     ;

	    fun mask_of_xevent XEVENT_KEY_PRESS             => xt::EVENT_MASK (0u1 << 0u0);
		mask_of_xevent XEVENT_KEY_RELEASE           => xt::EVENT_MASK (0u1 << 0u1);
		mask_of_xevent XEVENT_BUTTON_PRESS          => xt::EVENT_MASK (0u1 << 0u2);
		mask_of_xevent XEVENT_BUTTON_RELEASE        => xt::EVENT_MASK (0u1 << 0u3);
		mask_of_xevent XEVENT_ENTER_WINDOW          => xt::EVENT_MASK (0u1 << 0u4);
		mask_of_xevent XEVENT_LEAVE_WINDOW          => xt::EVENT_MASK (0u1 << 0u5);
		mask_of_xevent XEVENT_POINTER_MOTION        => xt::EVENT_MASK (0u1 << 0u6);
		mask_of_xevent XEVENT_POINTER_MOTION_HINT   => xt::EVENT_MASK (0u1 << 0u7);
		mask_of_xevent XEVENT_BUTTON1MOTION         => xt::EVENT_MASK (0u1 << 0u8);
		mask_of_xevent XEVENT_BUTTON2MOTION         => xt::EVENT_MASK (0u1 << 0u9);
		mask_of_xevent XEVENT_BUTTON3MOTION         => xt::EVENT_MASK (0u1 << 0u10);
		mask_of_xevent XEVENT_BUTTON4MOTION         => xt::EVENT_MASK (0u1 << 0u11);
		mask_of_xevent XEVENT_BUTTON5MOTION         => xt::EVENT_MASK (0u1 << 0u12);
		mask_of_xevent XEVENT_BUTTON_MOTION         => xt::EVENT_MASK (0u1 << 0u13);
		mask_of_xevent XEVENT_KEYMAP_STATE          => xt::EVENT_MASK (0u1 << 0u14);
		mask_of_xevent XEVENT_EXPOSURE              => xt::EVENT_MASK (0u1 << 0u15);
		mask_of_xevent XEVENT_VISIBILITY_CHANGE     => xt::EVENT_MASK (0u1 << 0u16);
		mask_of_xevent XEVENT_STRUCTURE_NOTIFY      => xt::EVENT_MASK (0u1 << 0u17);
		mask_of_xevent XEVENT_RESIZE_REDIRECT       => xt::EVENT_MASK (0u1 << 0u18);
		mask_of_xevent XEVENT_SUBSTRUCTURE_NOTIFY   => xt::EVENT_MASK (0u1 << 0u19);
		mask_of_xevent XEVENT_SUBSTRUCTURE_REDIRECT => xt::EVENT_MASK (0u1 << 0u20);
		mask_of_xevent XEVENT_FOCUS_CHANGE          => xt::EVENT_MASK (0u1 << 0u21);
		mask_of_xevent XEVENT_PROPERTY_CHANGE       => xt::EVENT_MASK (0u1 << 0u22);
		mask_of_xevent XEVENT_COLORMAP_CHANGE       => xt::EVENT_MASK (0u1 << 0u23);
		mask_of_xevent XEVENT_OWNER_GRAB_BUTTON     => xt::EVENT_MASK (0u1 << 0u24);
	    end;

	    fun mask_of_xevent_list l
		=
		f (l, 0u0)
		where 

		    fun f ([], m)
			    =>
			    xt::EVENT_MASK m;

			f (xevent ! r, m)
			    => 
			    {   my (xt::EVENT_MASK m')
				    =
				    mask_of_xevent xevent;

				f (r, m | m');
			    };
		    end;

		end;

	    fun union_xevent_masks (xt::EVENT_MASK m1, xt::EVENT_MASK m2) = xt::EVENT_MASK (m1 | m2);
	    fun inter_xevent_masks (xt::EVENT_MASK m1, xt::EVENT_MASK m2) = xt::EVENT_MASK (m1 & m2);

	end;	# stipulate
    };		# package event_types

end;



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
