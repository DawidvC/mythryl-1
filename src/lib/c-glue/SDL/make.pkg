fun make file = if cm::make file then () else raise exception FAIL("Can't load "$file);
fun again () = run "make.pkg";

make "../ffi-packager/ffi-packager.cm";

/*---------------------------------------------------------------------------
 * 
 * This program drives the sml-SDL library packaging process
 *
 *---------------------------------------------------------------------------*/
package p =
gift_wrap_g
(   use ffi_packager
    use gift_wrap_defaults
    package a = Ast

    name          = "SDL"
    name'         = "SDL"
    version       = "0.1.3"
    enums         = [("SDL-enums.sml", "SDLEnums", "")]
    defines       = [("SDL-macros.sml", "SDLMacros",
			    [("^AUDIO", FALSE),
			     ("^CD", FALSE),
			     ("^SDL_[A-Z][A-Z]", FALSE),
			     ("^TIMER_", FALSE),
			     ("^MIX_", FALSE),
			     ("^GL_", FALSE)
			    ] 
			 )
			]
    fun make_accessors _ = TRUE

    macros_file = "macros.pkg"

    other_defines =
	 THE (fn(_, prog, _) =>
	   str::addToBody (prog,
	     A.@@@["fun cd_indrive (x: SDLEnums::CDstatus) = x > 0"
		]))

    fun init info
	=
	{   use ffi_transforms;

	    infix && ;

	    #  Transformations for functions 
	    fun convert x = x;

	    convert = convert o FastString;
	    convert = convert o BoolIfCtypeIs "SDL_bool";	#  Boolean type 

	    tr::declare info "^f-" convert;

	    #  Transformations for accessors 

	    tr::declare info "^u--SDL_Event.sml" 
		      (ForeachOut (If (FunNameIs "get_type") SignedRet));
	    ();
	}

    fun cleanup info 
        = 
	(cm::add (info, "package sdl", "../SDL.pkg")
	)
)
