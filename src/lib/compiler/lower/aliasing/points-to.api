## points-to.api
#
#  This module can be used to perform points-to analysis for typed languages
#
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

#                      "Novices and masters both break the rules.
#                       The difference is that the master knows
#                       which rules he is breaking, and why."



api Points_To {

    eqtype Edgekind; 

    package c:  Cells_Basis					# Cells_Basis	is from   src/lib/compiler/lower/instruction/cells-basis.api
	     =  cells_basis;

    Cell
	= LINK   Region                             
	| SREF   (c::Cell, Ref( Edges ))
	| WREF   (c::Cell, Ref( Edges ))
	| SCELL  (c::Cell, Ref( Edges ))
	| WCELL  (c::Cell, Ref( Edges ))
	| TOP    { mutable: Bool, id: c::Cell, name: String }

    withtype Region = Ref( Cell )				# A collapsed node 
    also     Edges  = List( (Edgekind, Int, Region) );

    reset:     (Void -> c::Cell) -> Void;

    # Generate a new reference/immutable cell 
    #
    new_sref:   Void -> Region;  
    new_wref:   Void -> Region;  
    new_scell:  Void -> Region;  
    new_wcell:  Void -> Region;  

    # Generate a new collapsed node 
    #
    new_top:    { mutable: Bool,   name: String } -> Region;  


    # The following are methods for constructing the storage shape graph.
    #
    ith_projection:  (Region, Int) -> Region;
    ith_subscript:   (Region, Int) -> Region;
    ith_domain:      (Region, Int) -> Region;
    ith_range:       (Region, Int) -> Region;
    ith_offset:      (Region, Int) -> Region;

    unify:      (Region, Region) -> Void; 
    interfere:  (Region, Region) -> Bool; /* do they interfere? */ 


    # More complex methods
    #
    make_record:  (Null_Or( Region ), List( Region )) -> Region;    
    make_ref:     (Null_Or( Region ), Region) -> Region;        
    make_array:   (Null_Or( Region ), List( Region )) -> Region;
    make_vector:  (Null_Or( Region ), List( Region )) -> Region;
    make_fn:       List( Region ) -> Region; #  Define a function 

    apply:     (Region, List( Region )) -> Void; #  Apply a function 
    ret:       (Region, List( Region )) -> Void; #  Binds the return values 

    strong_set:     (Region, Int, Region) -> Void;
    strong_get:     (Region, Int) -> Region; 
    weak_set:       (Region, Region) -> Void;
    weak_get:        Region -> Region;

    to_string:   Region -> String;

};



## Changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
