## globalfix.pkg

# Compiled by:
#     src/lib/compiler/core.make6



# This file implements one of the fate-passing-style transforms.
# For context, see the comments in
#
#     src/lib/compiler/upper/highcode/highcode.api




#       "Do not worry about your problems with mathematics, 
#        I assure you mine are far greater."
# 
#                                     --Albert Einstein 




api Global_Fix {

     globalfix
         :
         fate_passing_style::Function
         ->
         List fate_passing_style::Function;
};


package global_fix

: (weak)  Global_Fix		# Global_Fix	is from   src/lib/compiler/upper/closures/globalfix.pkg

{

    include fate_passing_style; 

    fun globalfix (fk, f, vl, cl, cexp)
        =
	{
	    fun gfix ce
                =
		case ce 

		     MUTUALLY_RECURSIVE_FNS (fl, c)
			 =>
			 {   my (n, c')
				 =
				 gfix c;

			     l'
				 =
				 fold_left
				     (   fn ((k, v, a, t, c), m)
					    =
					    {   my (l, d)
						    =
						    gfix c;

						(k, v, a, t, d)  !  l @ m;
					    }
				     )
				     n
				     fl;

			     (l', c');
			 };

		     APPLY _   =>   ([], ce);

		     SWITCH (v, c0, l)
			 =>
			 {   my (f, l')
				 =
				 fold_right
				     (   fn (c, (fl, cl))
					    =
					    {   my (f, d)
						    =
						    gfix c;

						(   f @ fl,
						    d ! cl
						);
					    }
				     )

				     ([], [])

				     l;

			     (f, SWITCH (v, c0, l'));
			 };

		     RECORD  (k, l, v, c)     => { my (f, c') = gfix c;  (f, RECORD (k, l, v, c'));     };
		     SELECT  (i, v, w, t, c)  => { my (f, c') = gfix c;  (f, SELECT (i, v, w, t, c'));  };
		     OFFSET  (i, v, w, c)     => { my (f, c') = gfix c;  (f, OFFSET (i, v, w, c'));     };

		     SETTER  (i, vl, c)       => { my (f, c') = gfix c;  (f, SETTER (i, vl, c'));       };
		     LOOKER  (i, vl, w, t, c) => { my (f, c') = gfix c;  (f, LOOKER (i, vl, w, t, c')); };
		     ARITH   (i, vl, w, t, c) => { my (f, c') = gfix c;  (f, ARITH  (i, vl, w, t, c')); };

		     PURE    (i, vl, w, t, c) => { my (f, c') = gfix c;  (f, PURE   (i, vl, w, t, c')); };

		     RAW_C_CALL (k, l, p, vl, wtl, c)
                         =>
                         {   my (f, c') = gfix c;
                             (f, RAW_C_CALL (k, l, p, vl, wtl, c'));
                         };

		     BRANCH (i, args, c, e1, e2)
			 =>
			 {   my (f1, e1') = gfix e1;
			     my (f2, e2') = gfix e2;

			     ( f1 @ f2,
			       BRANCH (i, args, c, e1', e2')
			     );
			 };
                esac;

	    my   (l, body)   =   gfix cexp;

	
            (fk, f, vl, cl, body) ! l;
	};

};		#  package global_fix 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
