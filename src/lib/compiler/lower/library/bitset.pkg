#
# Non growable dense set in bitvector format.
# 
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/lower/make7/lib.make6


package bit_set: Bit_Set {			# Bit_Set	is from   src/lib/compiler/lower/library/bitset.api

    package a =  rw_unt8_vector;		# rw_unt8_vector	is from   src/lib/std/src/rw-unt8-vector.pkg
    package w =  unt8;				# unt8			is from   src/lib/std/unt8.pkg

    include a;

    infix val  << >> & | ;

    Bitset = Rw_Vector; 

    word =  unt::from_int; 
    int  =  unt::to_int;

    my (&)  =  unt::bitwise_and;
    my (>>) =  unt::(>>);
    my (<<) =  w::(<<);

    fun create n
        =
        make_rw_vector((n+7) / 8,  0ux0);


    fun size a
        =
        length a * 8;


    fun set (a, i)
	=
	{   byte = int ((word i) >> 0u3);
	    mask = w::(<<) (0u1, (word i) & 0u7);
	    a::set (a, byte, w::bitwise_or (a[byte], mask));
	};


    fun reset (a, i)
	=
	{   byte = int((word i) >> 0u3);
	    mask = w::bitwise_not (w::(<<) (0u1, (word i) & 0u7));
	    a::set (a, byte, w::bitwise_and (a[byte], mask));
	};


    fun clear a
        =
        modify
            (fn _ =  0ux0)
            a;


    fun copy (a)
        =
        tabulate  (length a,  fn i =  a[i]);


    fun to_string (a)
	= 
	{   fun f i
		=
		if (i < length a)   w::to_string (a[i]) ! f (i+1);
                else                [];
                fi;

	    s =   string::cat (f 0);

	    "[" + s + "]";
	};


    fun contains (a, i)
	= 
	{   byte =  int((word i) >> 0u3);
	    mask =  w::(<<) (0u1, (word i) & 0u7);

	    w::bitwise_and (a::get (a, byte), mask) != 0ux0;
	};


    fun mark_and_test (a, i)
	=
	{   byte =  int((word i) >> 0u3);
	    mask =  w::(<<) (0u1, (word i) & 0u7);
	    word =  a::get (a, byte);

	    if   (w::bitwise_and (word, mask) != 0ux0)
	        
		 TRUE;
	    else 
		 a::set (a, byte, w::bitwise_or (word, mask));
		 FALSE;
	    fi;
	};


    fun unmark_and_test (a, i)
	=
	{   byte =  int (word i >> 0u3);
	    mask =  w::(<<) (0u1, (word i) & 0u7);
	    word =  a::get (a, byte);

	    if   (w::bitwise_and (word, mask) != 0ux0)
	        
		 a::set (a, byte, w::bitwise_and (word, w::bitwise_not mask));
		 TRUE;
	    else 
		 FALSE;
	    fi;
	}; 

};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
