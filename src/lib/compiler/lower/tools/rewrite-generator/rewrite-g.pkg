


###                  "The definition of a good mathematical problem
###                   is the mathematics it generates rather than
###                   the problem itself."
###
###                                          -- Andrew Wiles



generic package RewriteGen
   (package RawSyntaxTreeRewriter:  MDL_AST_REWRITER
    package RawSyntaxTreePP:        MDL_AST_PRETTY_PRINTER
    package RawSyntaxTreeTrans:     MDL_AST_TRANSLATION
    package Parser:       MDL_PARSER_DRIVER
    package PolyGen:      POLY_GEN
       sharing RawSyntaxTreeRewriter::raw_syntax = RawSyntaxTreePP::raw_syntax = RawSyntaxTreeTrans::raw_syntax = 
               Parser::raw_syntax = PolyGen::raw_syntax
   ) : REWRITE_GEN = 
pkg
   package raw_syntax = RawSyntaxTreeRewriter::raw_syntax 
   package a   = raw_syntax
   package t   = RawSyntaxTreeTrans

   NO = RawSyntaxTreeRewriter::noRewrite
   RW = RawSyntaxTreeRewriter::rewrite

   exception RewriteGen
   fun bug msg = lowcode_error_message::error("RewriteGen", msg)
   fun error msg = (file::write (file::stderr, msg$"\n"); raise exception RewriteGen) 

   fun id_fn x = a::IDexp (a::IDENT([], x))


   # Collect enum and function declaractions

   fun processDecls hook (decls, exps) = 
   let datatypeBinds = REF []
       funBinds      = REF []
       miscDecls     = REF []

       fun enterDb (db as a::DATATYPEbind _) = 
              datatypeBinds := db . *datatypeBinds
         | enterDb _ = ()
       fun enterFb fbs = funBinds := fbs . *funBinds
       fun enterMisc d = miscDecls := d . *miscDecls

       fun decl _ (d as a::DATATYPEdecl (dbs, _)) = (apply enterDb dbs; d)
         | decl _ (d as a::FUNdecl fbs) = (enterFb fbs; d)
         | decl _ (d as a::VALdecl vbs) = (enterMisc d; d)
         | decl _ (d as a::OPENdecl vbs) = (enterMisc d; d)
         | decl _ d = d #  ignore the rest 

       /* Collect info */ 
       map (.decl (RW { sexp=NO, type=NO, decl=decl, expression=NO, pattern=NO } )) decls

       #  Collect rules  
       fun findDb name =
       let fun find ((db as a::DATATYPEbind { id, ... } ) . dbs) =
                if name == id then db else find dbs
             | find(_ . dbs) = find dbs
             | find [] = error("unknown enum "$name)
       in  find *datatypeBinds
       end

       fun processRules (a::FUNbind (name, clauses)) =  (findDb (name), clauses)
       rules     = map (map processRules) (reverse(*funBinds))
       nonTerms  = fold_right (fn (fbs, ids) => 
                               fold_right (fn (a::FUNbind (id, _), ids) => id . ids) 
                                  ids fbs) [] (*funBinds)
       fun isNonTerm id = list::exists (fn id' => id=id') nonTerms
       generated = map (PolyGen::gen hook isNonTerm) rules
       miscs     = reverse(*miscDecls)
   in  a::LET_EXPRESSION (miscs @ generated, exps)
   end

   /*
    * Hooks for various things
    */
   rewriteHook = 
       PolyGen::HOOK
       { name  ="rewrite",
         factor=TRUE,
         args  =["redex"],
         ret   ="redex",
         unit  =fn x => x,
         gen   =fn (trans, cons) => 
                  t::mapConsToExpression
                    { id=fn { newName, type, ... } => trans (type, id_fn newName),
                     prefix=[]
                    } cons
       }

   applyHook = 
       PolyGen::HOOK
       { name  ="apply",
         factor=FALSE,
         args  =["redex"],
         ret   ="_",
         unit  =fn _ => a::TUPLEexp [],
         gen   =fn (trans, cons) => 
                let fun f ( { origName, newName, type }, es) = trans (type, id_fn newName) . es
                in  a::SEQUENTIAL_EXPRESSIONS (reverse (t::foldCons f [] cons))
                end
       }

   foldHook = 
       PolyGen::HOOK
       { name  ="fold",
         factor=FALSE,
         args  =["redex", "foldArg"],
         ret   ="foldArg",
         unit  = fn _ => id_fn "foldArg",
         gen   = fn (trans, cons) => 
                    t::foldCons  
                     (fn( { origName, newName, type }, e) => 
                          trans (type, a::TUPLEexp[id_fn newName, e]))
                      (id_fn "foldArg") cons
       }       

   fun compile decl =
   let fun expression _ (a::APPLY_EXPRESSION (a::IDexp (a::IDENT(["Generic"], "rewrite")),
                           a::LET_EXPRESSION (decls, expression))) = 
               processDecls rewriteHook (decls, expression)
         | expression _ (a::APPLY_EXPRESSION (a::IDexp (a::IDENT(["Generic"], "apply")),
                           a::LET_EXPRESSION (decls, expression))) = 
               processDecls applyHook (decls, expression)
         | expression _ (a::APPLY_EXPRESSION (a::IDexp (a::IDENT(["Generic"], "fold")),
                           a::LET_EXPRESSION (decls, expression))) = 
               processDecls foldHook (decls, expression)
         | expression _ e = e
   in  .decl (RW { sexp=NO, type=NO, decl=NO, expression=exp, pattern=NO } ) decl
   end

   fun gen filename =
   let decl = a::SEQdecl (Parser::load filename)
       decl = 
        a::SEQdecl
          [A.@@@["# WARNING: This file is generated using 'rwgen "$
               filename$"' "],
           compile decl
          ]
   in  pp::text (RawSyntaxTreePP::decl decl) 
   end

   fun main (_, [filename]) =
         ((print (gen filename); 0) 
            except e => (print("Uncaught exception "$exception_name e$"\n"); 1))
     | main(_, _) = (print("Usage: rwgen <filename>\n"); 1)

end
