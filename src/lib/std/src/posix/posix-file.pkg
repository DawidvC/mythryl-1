## posix-file.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6



# Package for POSIX 1003.1 file system operations
# This is a subpackage of the POSIX 1003.1 based
# 'Posix' package
#
#     src/lib/std/src/posix/posix.pkg

# An alternative portable (cross-platform)
# filesystem interface is defined and implemented in:
#
#     src/lib/std/src/winix/winix-file.api
#     src/lib/std/src/unix/winix-file.pkg



###               "Let him choose out of my files,
###                his projects to accomplish."
###
###                      -- William Shakespeare, "Coriolanus"



stipulate
    package host_unt =  host_unt_guts;				# host_unt_guts		is from   src/lib/std/src/bind-sysword-32.pkg
    # At some point I think the Unts should all become Ints
    # -- having unsigneds floating around is mainly a pain:
    #    package host_int =       int_guts;			# int_guts		is from   src/lib/std/src/bind-int-32.pkg
    package unt32    =  unt32_guts;				# unt32_guts		is from   src/lib/std/src/unt32.pkg
    package time     =  time_guts;				# time_guts		is from   src/lib/std/src/time-guts.pkg
herein

package posix_file # : Posix_File				# Posix_File		is from   src/lib/std/src/posix/posix-file.api
{

    my (|) =  host_unt::bitwise_or;
    my (&) =  host_unt::bitwise_and;

#    infix val  | & ;

								# c_interface		is from   src/lib/std/src/unsafe/cinterface.pkg
								# host_int		is from   src/lib/std/src/posix/posix-prelude.pkg
    fun cfun x
        =
        c_interface::c_function "POSIX-FileSys" x;


    my osval:  String -> host_int::Int
        =
        cfun "osval";					# osval is from src/runtime/c-libs/posix-filesys/osval.c

    w_osval = host_unt::from_int o osval;

    User_Id  =  host_unt::Unt;
    Group_Id =  host_unt::Unt;

    File_Descriptor = host_int::Int;


    fun fd_to_int  fd
        =
        fd;


    fun int_to_fd  fd
        =
        fd;


							# winix_types				is from   src/lib/std/src/unix/winix-types.pkg

    #  Conversions between winix::io::Io_Descriptor values and Posix file descriptors. 
    #
    fun fd_to_iod fd
        =
        winix_types::io::int_to_iod fd;


    fun iod_to_fd iod
        =
        winix_types::io::iod_to_fd  iod;

    o_rdonly =  w_osval "O_RDONLY";
    o_wronly =  w_osval "O_WRONLY";
    o_rdwr   =  w_osval "O_RDWR";

    include posix_common;

    fun omode_from_unt omode
        =
	if   (omode == o_rdonly ) O_RDONLY;
	elif (omode == o_wronly ) O_WRONLY;
	elif (omode == o_rdwr   ) O_RDWR;
	else                      raise exception FAIL ("posix_file::omodeFromWord: unknown mode " + (unt32::to_string omode));
        fi;

    fun omode_to_unt O_RDONLY => o_rdonly;
        omode_to_unt O_WRONLY => o_wronly;
        omode_to_unt O_RDWR   => o_rdwr;
    end;

    fun uid_to_word i =  i;
    fun word_to_uid i =  i;
    fun gid_to_word i =  i;
    fun word_to_gid i =  i;

    Ckit_Dirstream = assembly::Chunk;  #  the underlying C DIRSTREAM 

    Directory_Stream
        =
        DIRECTORY_STREAM  {
	  dir_strm:  Ckit_Dirstream,
	  is_open:  Ref( Bool )
        };

    my opendir'   : String -> Ckit_Dirstream  = cfun "opendir";		# opendir	is from  src/runtime/c-libs/posix-filesys/opendir.c
    my readdir'   : Ckit_Dirstream -> String  = cfun "readdir";		# readdir	is from  src/runtime/c-libs/posix-filesys/readdir.c
    my rewinddir' : Ckit_Dirstream -> Void    = cfun "rewinddir";	# rewinddir	is from  src/runtime/c-libs/posix-filesys/rewinddir.c
    my closedir'  : Ckit_Dirstream -> Void    = cfun "closedir";	# closedir	is from  src/runtime/c-libs/posix-filesys/closedir.c

    fun open_directory_stream path
        =
        DIRECTORY_STREAM {   dir_strm =>  opendir' path,
	       is_open  =>  REF( TRUE )
	   };


    fun read_directory_entry (DIRECTORY_STREAM { dir_strm, is_open => REF FALSE } )
            =>
	    raise exception assembly::SYSTEM_ERROR("readdir on closed directory stream", NULL);

        read_directory_entry (DIRECTORY_STREAM { dir_strm, ... } )
            =>
	    case (readdir' dir_strm)
              
	         ""   =>  NULL;
	         name =>  THE name;
            esac;
    end;


    fun rewind_directory_stream (DIRECTORY_STREAM { dir_strm, is_open => REF FALSE } )
            =>
	    raise exception assembly::SYSTEM_ERROR("rewinddir on closed directory stream", NULL);

        rewind_directory_stream (DIRECTORY_STREAM { dir_strm, ... } )
            =>
           rewinddir' dir_strm;
    end;


    fun close_directory_stream (DIRECTORY_STREAM { dir_strm, is_open => REF FALSE } )
            =>
            ();

        close_directory_stream (DIRECTORY_STREAM { dir_strm, is_open } )
            =>
            {   is_open := FALSE;
	        closedir' dir_strm;
            };
    end;

    my change_directory:   String -> Void    = cfun "chdir";			# chdir		is from  src/runtime/c-libs/posix-filesys/chdir.c
    my current_directory:  Void -> String    = cfun "getcwd";			# getcwd	is from  src/runtime/c-libs/posix-filesys/getcwd.c

    stdin  = int_to_fd 0;
    stdout = int_to_fd 1;
    stderr = int_to_fd 2;

    package s {

        stipulate
            package bf = bit_flags_g ();
	herein
	    include bf;
	    Mode = Flags;
	end;

        irwxu = from_word (w_osval "irwxu");
        irusr = from_word (w_osval "irusr");
        iwusr = from_word (w_osval "iwusr");
        ixusr = from_word (w_osval "ixusr");
        irwxg = from_word (w_osval "irwxg");
        irgrp = from_word (w_osval "irgrp");
        iwgrp = from_word (w_osval "iwgrp");
        ixgrp = from_word (w_osval "ixgrp");
        irwxo = from_word (w_osval "irwxo");
        iroth = from_word (w_osval "iroth");
        iwoth = from_word (w_osval "iwoth");
        ixoth = from_word (w_osval "ixoth");
        isuid = from_word (w_osval "isuid");
        isgid = from_word (w_osval "isgid");
    };

    mode_0755
        =
        s::flags
            [
	      s::irusr, s::iwusr, s::ixusr,
	      s::irgrp,           s::ixgrp,
	      s::iroth,           s::ixoth
	    ];

    mode_0700
        =
        s::flags
            [
	      s::irusr, s::iwusr, s::ixusr
	    ];

    mode_0666
        =
        s::flags
            [
	      s::irusr, s::iwusr,
	      s::irgrp, s::iwgrp,
	      s::iroth, s::iwoth
	    ];

    mode_0644
        =
        s::flags
            [
	      s::irusr, s::iwusr,
	      s::irgrp,
	      s::iroth
	    ];


    mode_0600
        =
        s::flags
            [
	      s::irusr, s::iwusr
	    ];


    package o {

	stipulate
	    package bf = bit_flags_g ();				# bit_flags_g	def in    src/lib/std/src/bit-flags-g.pkg
	herein
	    include bf;
	end;

	append   = from_word (w_osval "O_APPEND");
	dsync    = from_word (w_osval "O_DSYNC");
	excl     = from_word (w_osval "O_EXCL");
	noctty   = from_word (w_osval "O_NOCTTY");
	nonblock = from_word (w_osval "O_NONBLOCK");
	rsync    = from_word (w_osval "O_RSYNC");
	sync     = from_word (w_osval "O_SYNC");
	o_trunc  = w_osval "O_TRUNC";
	trunc    = from_word  o_trunc;
	o_creat  = w_osval "O_CREAT";
	crflags  = o_wronly | o_creat | o_trunc;

    };

    my openf' : (String, host_unt::Unt, host_unt::Unt) -> host_int::Int
        =
        cfun "openf";							# openf		is from   src/runtime/c-libs/posix-filesys/openf.c

    fun openf (fname, omode, flags)
        =
        int_to_fd (openf'(fname, o::to_word flags | (omode_to_unt omode), 0u0));


    fun createf (fname, omode, oflags, mode)
        =
        {   flags = o::o_creat
                  | o::to_word  oflags
                  | omode_to_unt  omode
                  ;
          
            int_to_fd (openf' (fname, flags, s::to_word mode));
        };


    fun creat (fname, mode)
        =
        int_to_fd (openf'(fname, o::crflags, s::to_word mode));


    my umask' : host_unt::Unt -> host_unt::Unt = cfun "umask";
    fun umask mode = s::from_word (umask' (s::to_word mode));

    my link' : (String, String) -> Void = cfun "link";
    fun link { old, new } = link'(old, new);

    my rename' : (String, String) -> Void = cfun "rename";
    fun rename { from, to } = rename'(from, to);

    my symlink' : (String, String) -> Void = cfun "symlink";
    fun symlink { old, new } = symlink'(old, new);

    my mkdir' : (String, host_unt::Unt) -> Void = cfun "mkdir";
    fun mkdir (dirname, mode) = mkdir'(dirname, s::to_word mode);

    my make_pipe' : (String, host_unt::Unt) -> Void = cfun "mkfifo";
    fun make_pipe (name, mode) = make_pipe'(name, s::to_word mode);

    my unlink:    String -> Void   =  cfun "unlink";
    my rmdir:     String -> Void   =  cfun "rmdir";
    my readlink:  String -> String =  cfun "readlink";

    my ftruncate' : (host_int::Int, int31_guts::Int) -> Void = cfun "ftruncate";
    fun ftruncate (fd, len) = ftruncate' (fd, len);

    Device = host_unt::Unt;
    fun dev_to_word (i) = i;
    fun word_to_dev i = i;

    Inode = host_unt::Unt;
    fun ino_to_word (i) = i;
    fun word_to_ino i = i;

    package stat {

	Stat = { ftype:  host_int::Int,
		 mode:   s::Flags,
		 inode:  Int,
		 dev:    Int,
		 nlink:  Int,
		 uid:    host_unt::Unt,
		 gid:    host_unt::Unt,
		 size:   file_position::Int,
		 atime:  time::Time,
		 mtime:  time::Time,
		 ctime:  time::Time
	       };

	# The following assumes the C stat functions pull the
	# file type from the mode field and return the
	# integer below corresponding to the file type.

	fun is_directory  ( { ftype, ... }: Stat ) = (ftype == 0x4000);
	fun is_char_dev   ( { ftype, ... }: Stat ) = (ftype == 0x2000);
	fun is_block_dev  ( { ftype, ... }: Stat ) = (ftype == 0x6000);
	fun is_file       ( { ftype, ... }: Stat ) = (ftype == 0x8000);
	fun is_pipe       ( { ftype, ... }: Stat ) = (ftype == 0x1000);
	fun is_symlink    ( { ftype, ... }: Stat ) = (ftype == 0xA000);
	fun is_socket     ( { ftype, ... }: Stat ) = (ftype == 0xC000);

        fun mode  ( { mode,  ... }: Stat ) = mode;
        fun inode ( { inode, ... }: Stat ) = inode;
        fun dev   ( { dev,   ... }: Stat ) = dev;
        fun nlink ( { nlink, ... }: Stat ) = nlink;
        fun uid   ( { uid,   ... }: Stat ) = uid;
        fun gid   ( { gid,   ... }: Stat ) = gid;
        fun size  ( { size,  ... }: Stat ) = size;
        fun atime ( { atime, ... }: Stat ) = atime;
        fun mtime ( { mtime, ... }: Stat ) = mtime;
        fun ctime ( { ctime, ... }: Stat ) = ctime;

    };  /* package stat */ 

    # This layout needs to track c-libs/posix-filesys/stat.c 
    Statrep
      =
      ( (host_int::Int,		#  file type 
         host_unt::Unt,		#  mode 
         host_unt::Unt,		#  inode 
         host_unt::Unt,		#  Devno 
         host_unt::Unt,		#  nlink 
         host_unt::Unt,		#  uid 
         host_unt::Unt,		#  gid 
         int31::Int,		#  size 
         int32::Int,		#  Atime 
         int32::Int,		#  mtime 
         int32::Int)		#  Ctime 
      );

    fun mk_stat (sr:  Statrep)
        =
          {
	    ftype =>                  (#1 sr),
            mode  => s::from_word     (#2 sr),
            inode => host_unt::to_int (#3 sr),
            dev   => host_unt::to_int (#4 sr),
            nlink => host_unt::to_int (#5 sr),	/* probably should be an int in the run-time too. */
            uid =>                    (#6 sr),
            gid =>                    (#7 sr),
            size =>                   (#8 sr),
            atime => time::from_seconds (int32_guts::to_large (#9 sr)),
            mtime => time::from_seconds (int32_guts::to_large (#10 sr)),
            ctime => time::from_seconds (int32_guts::to_large (#11 sr))
          };

    my stat'  : String -> Statrep = cfun "stat";
    my lstat' : String -> Statrep = cfun "lstat";
    my fstat' : host_int::Int -> Statrep = cfun "fstat";

    fun stat  fname =  mk_stat (stat' fname);
    fun lstat fname =  mk_stat (lstat' fname); #  POSIX 1003.1a 

    fun fstat fd
        =
        mk_stat (fstat' fd);

    Access_Mode
        =
        MAY_READ | MAY_WRITE | MAY_EXECUTE;

    a_read  = w_osval "MAY_READ";	#  R_OK 
    a_write = w_osval "MAY_WRITE";	#  W_OK 
    a_exec  = w_osval "MAY_EXECUTE";	#  X_OK 
    a_file  = w_osval "FILE_EXISTS";	#  F_OK 

    fun amode_to_word []
            =>
            a_file;

        amode_to_word l
            =>
            {   fun amtoi (MAY_READ,    v) =>   a_read  | v;
                    amtoi (MAY_WRITE,   v) =>   a_write | v;
                    amtoi (MAY_EXECUTE, v) =>   a_exec  | v;
                end;
          
                list::fold_left
                    amtoi
                    a_file
                    l;
            };
    end;

    my access' : (String, host_unt::Unt) -> Bool = cfun "access";
    fun access (fname, aml) = access'(fname, amode_to_word aml);

    my chmod' : (String, host_unt::Unt) -> Void = cfun "chmod";
    fun chmod (fname, m) = chmod'(fname, s::to_word m);

    my fchmod' : (host_int::Int, host_unt::Unt) -> Void = cfun "fchmod";
    fun fchmod (fd, m) = fchmod'(fd, s::to_word m);

    my chown' : (String, host_unt::Unt, host_unt::Unt) -> Void = cfun "chown";
    fun chown (fname, uid, gid) = chown'(fname, uid, gid);

    my fchown' : (host_int::Int, host_unt::Unt, host_unt::Unt) -> Void = cfun "fchown";
    fun fchown (fd, uid, gid) = fchown'(fd_to_int fd, uid, gid);

    my utime' : (String, int32::Int, int32::Int) -> Void = cfun "utime";

    fun utime (file, NULL)
            =>
            utime' (file, -1, 0);

        utime (file, THE { actime, modtime } )
            =>
            {
                atime =  int32_guts::from_large  (time::to_seconds  actime);
                mtime =  int32_guts::from_large  (time::to_seconds  modtime);

                utime'(file, atime, mtime);
            };
    end;
    

    my pathconf:   ((String, String)) -> Null_Or( host_unt::Unt )
       =
       cfun "pathconf";


    my fpathconf'  : ((host_int::Int, String)) -> Null_Or( host_unt::Unt )
        =
        cfun "fpathconf";


    fun fpathconf (fd, s)
        =
        fpathconf'(fd, s);

};				#  package posix_file 
end;



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
