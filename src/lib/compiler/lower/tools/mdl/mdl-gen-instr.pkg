

# Generate the <architecture>Instr api and generic.
# This package contains the definition of the instruction set.



###                "We can only see a short distance ahead, but
###                 we can see plenty there that needs to be done."
###
###                                         -- Alan Turing 



generic package MDLGenInstr (Comp:  Mdl_Compile) : Mdl_Gen_Module =
pkg

   package raw_syntax  = Comp::raw_syntax
   package Comp = Comp

   use raw_syntax Comp::Util

   to_lower = string::map char::to_lower

   instructionDatatype = 
   @@@["and instruction =",
     "  LIVE of { regs: c::cellset, spilled: c::cellset }",
     "| DEAD of { regs: c::cellset, spilled: c::cellset }",
     "| COPY of { kind: cells_basis::cellkind, ",
     "            size_in_bits: Int,          /* in bits */", 
     "            dst: List( cells_basis::cell ), ",
     "            src: List( cells_basis::cell ), ", 
     "            tmp: Null_Or(  ea ) /* NULL if |dst|= = { src| == 1 */",
     "          }",
     "| NOTE of { instruction: Instruction, note: note::Note }",
     "| BASE_INSTRUCTION of Base_Instruction"
    ]

   fun gen md =
   let #  name of the package/api 
       strName = Comp::strname md "Instr"  
       sigName = Comp::signame md "INSTR"

       #  The enum that defines the instruction set 
       instructions = Comp::instructions md
       instrDatatype =
           DATATYPEdecl([DATATYPE("instruction",[], instructions)],[])

       #  Arguments to the instruction generic 
       args = ["T: Codetree"] 

       #  the shorthand functions 
       instrType = IDty (IDENT([], "instruction"))
       shortHandSig = 
           map (fn CONSbind { id, type=NULL, ... } => 
                    VALSIGdecl([to_lower id], instrType) 
                 | CONSbind { id, type=THE type, ... } =>
                    VALSIGdecl([to_lower id], FUNty (type, instrType))) 
               instructions
       shortHandFuns = 
           VALdecl(
           map (fn CONSbind { id, type=NULL, ... } => 
                     NAMED_VARIABLE (IDpat (to_lower id), APPLY("INSTR", ID id))
                 | CONSbind { id, type=THE _, ... } => 
                     NAMED_VARIABLE (IDpat (to_lower id),
                         APPLY("o", TUPLEexp[ID "INSTR", ID id])))
               instructions)

       #  The api 
       sigBody =
          [@@@ ["package c:  "$Comp::signame md "_Cells",
	      "package cb:  Cells_Basis = cells_basis",
              "package t:  Codetree",
              "package constant: CONSTANT",
              "package region:  Region",
              "   sharing Constant = t::Constant",
              "   sharing Region = t::Region"
              ],
           Comp::typeOf md "Instruction",
           instrDatatype,
           instructionDatatype
          ] @ shortHandSig

       #  The generic 
       strBody = 
           [@@@ ["package c = "$Comp::strname md "_cells",
               "package cb = cells_basis",
               "package t = T",
               "package region = t::region",
               "package constant = t::Constant"
              ],
            Comp::declOf md "Instruction",
            instrDatatype,
            instructionDatatype,
            shortHandFuns
           ] 

       Comp::require md "Instruction"
                  { types =["ea", "operand", "addressing_mode"],
                   values=[]
                  }

   in  Comp::codegen md "instruction/Instr"
         [Comp::make_api md "INSTR" (map Comp::Trans::stripMarks sigBody),
          Comp::make_generic md "Instr" args sigName 
                (map Comp::Trans::stripMarks strBody)
         ]
   end
end
