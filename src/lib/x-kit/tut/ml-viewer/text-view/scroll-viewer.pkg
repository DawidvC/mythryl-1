# scroll-viewer.pkg
#
# An ML viewer with scroll bars.

# Compiled by:
#     src/lib/x-kit/tut/ml-viewer/ml-viewer.make6

stipulate
    include threadkit;				# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xc  =  xcore;			# xcore			is from   src/lib/x-kit/xclient/xcore.pkg
    #
    package bdr =  border;			# border		is from   src/lib/x-kit/widget/wrapper/border.pkg
    package dvd =  divider;			# divider		is from   src/lib/x-kit/widget/leaf/divider.pkg
    package low =  line_of_widgets;		# line_of_widgets	is from   src/lib/x-kit/widget/layout/line-of-widgets.pkg
    package sb  =  scrollbar;
    package sl  =  widget_with_scrollbars;
    package w   =  widget;
    #
    package v   =  ml_source_code_viewer;
herein

    package scroll_viewer {

	fun make_viewer
		root
		(view, init_loc)
	    =
	    {
		is_bw = case (xc::display_class_of_screen (w::screen_of root))
			    #	
			    xc::STATIC_GRAY =>  TRUE;
			    xc::GRAY_SCALE  =>  TRUE;
			    _               =>  FALSE;
			esac;

		vsb = sb::make_vertical_scrollbar  root
			{ color => NULL,
			  size  => 10
			};

		vsb_widget				# "vsb" == "vertical scroll bar".
		    =
		    bdr::as_widget
			(bdr::make_border
			  {
			    color =>  NULL,
			    width =>  1,
			    child =>  sb::as_widget  vsb
			  }
			);

		view_wid = v::as_widget view;

		fun init_sb ()
		    =
		    {  my { view_start, view_ht, nlines }
			   =
			   v::view_of  view;

			r_ht = real view_ht;

			r_nlines
			    =
			    nlines == 0  ??  r_ht
					 ::  real nlines;

			sb::set_scrollbar_thumb  vsb
			  {
			    size =>  THE (r_ht // r_nlines),
			    top  =>  THE (float::from_int view_start // r_nlines)
			  };
		    };

		horizontal_scrollbar_change'
		    =
		    sb::scrollbar_change'_of  vsb;

		fun set_top (new_top, nlines)
		    =
		    {	  v::scroll_view (view, new_top);

			my { view_start, nlines, ... }
			    =
			    v::view_of  view;

			sb::set_scrollbar_thumb  vsb
			  {
			    size =>  NULL,
			    top  =>  nlines == 0  ??  THE 0.0
						  ::  THE (float::from_int view_start // real nlines)
			  };
		    };

		fun smooth r
		    =
		    {   timeout'
			    =
			    timeout_in'
				(time::from_milliseconds 50);

			my { view_start, nlines, ... }
			    =
			    v::view_of view;

			r_nlines = real nlines;

			top = floor (r * real nlines);

			fun do_scrollbar_change i
			    =
			    fn mailop
				=
				case mailop
				    #
				    sb::SCROLL_MOVE r
					=>
					{    top' = floor (r * r_nlines);

					     if (top' != top)   sm (i+1, top');
					     else               sm (i, top);
					     fi;
					};

				    sb::SCROLL_END r
					=>
					{   top' = floor (r * r_nlines);

					    v::scroll_view (view, top');
					};
				    _   => sm (i, top);
				esac

			also
			fun sm (0, top)
				=>
				do_scrollbar_change 0 (do_mailop  horizontal_scrollbar_change');

			    sm (7, top)
				=>
				{   v::scroll_view (view, top);
				    sm (0, top);
				};

			    sm (i, top)
				=>
				select [
				    #
				    horizontal_scrollbar_change'
					==>
					do_scrollbar_change  i,

				    timeout'
					==>
				       .{   v::scroll_view (view, top);
					    sm (0, top);
					}
				];
			end;

			if (top != view_start) 
			    # 
			    v::scroll_view (view, top);
			    sm (0, top);
			else
			    sm (0, view_start);
			fi;
		    };

		fun scroller ()
		    =
		    for (;;) {	

			case (do_mailop  horizontal_scrollbar_change')
			    #
			    sb::SCROLL_UP r
				=>
				{   # Move selected line to top:

				    my { view_start, view_ht, nlines }
					=
					v::view_of view;

				    set_top (view_start + floor (real view_ht * r), nlines);
				};

			    sb::SCROLL_DOWN r
				=>
				{   # Move top to selected line:

				    my { view_start, view_ht, nlines }
					=
					v::view_of view;

				    set_top (view_start - floor (real view_ht * r), nlines);
				};

			    sb::SCROLL_START r
				=>
				smooth r;

			    sb::SCROLL_MOVE r
				=> 
				raise exception  lib_base::IMPOSSIBLE "scroller: move before start";

			    sb::SCROLL_END r
				=>
				raise exception  lib_base::IMPOSSIBLE "scroller: end before start";
			esac;
		    };

		fun scroll_server ()
		    =
		    {	  v::scroll_view (view, init_loc);
			init_sb ();
			 scroller ();
		    };

		layout = if is_bw

			     low::make_line_of_widgets  root
				 (low::HZ_CENTER
				   [
				     low::WIDGET  vsb_widget,

				     low::WIDGET
					 (dvd::make_vertical_divider root
					   {
					     color =>  NULL,
					     width =>  1
					   }
					 ),

				     low::WIDGET  view_wid
				   ]
				 );
			 else
			     sl::make_widget_with_scrollbars  root
			       {
				 scrolled_widget      =>  view_wid,
				 horizontal_scrollbar =>  NULL,

				 vertical_scrollbar
				    =>
				    THE { scrollbar =>  vsb_widget,
					  pad       =>  0,
					  left      =>  TRUE
					}
			       };
			 fi;

		  xtracing::xspawn
		    ("scroll_viewer::scroller", scroll_server);

		  low::as_widget  layout;
	    };

    };				# package scroll_viewer 

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
