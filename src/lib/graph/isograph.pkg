#
# Graph isomorphism view.  This works like the map function on lists.
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

api Isomorphic_Graph_View {
   
    map:  (graph::Node( N ) -> N') ->
              (graph::Edge( E ) -> E') ->
              (G -> G') ->
              graph::Graph( N, E, G )  -> 
              graph::Graph( N', E', G' ); 
};

package isomorphic_graph_view: (weak)  Isomorphic_Graph_View		# Isomorphic_Graph_View	is from   src/lib/graph/isograph.pkg
{
    package g= graph;		# graph	is from   src/lib/graph/graph.pkg

    fun map p q r (g::GRAPH graph)
	=
	{   fun rename_node f (i, n)    =  f (i, p (i, n));
	    fun rename_node' (i, n)     =  (i, p (i, n));
	    fun rename_edge f (i, j, e) =  f (i, j, q (i, j, e));
	    fun rename_edge' (i, j, e)  =  (i, j, q (i, j, e));
	    fun rename_edges es         =  list::map rename_edge' es;
	    fun unimplemented _         =  raise exception g::UNIMPLEMENTED;

	    g::GRAPH {
	      name            =>  graph.name,
	      graph_info      =>  r graph.graph_info,
	      new_id          =>  unimplemented,
	      add_node        =>  unimplemented,
	      add_edge        =>  unimplemented,
	      remove_node     =>  unimplemented,
	      set_in_edges    =>  unimplemented,
	      set_out_edges   =>  unimplemented,
	      set_entries     =>  unimplemented,
	      set_exits       =>  unimplemented,
	      garbage_collect =>  graph.garbage_collect,
	      nodes           =>  .{ list::map rename_node' (graph.nodes ()); },
	      edges           =>  .{ rename_edges (graph.edges ()); },
	      order           =>  graph.order,
	      size            =>  graph.size,
	      capacity        =>  graph.capacity,
	      out_edges       =>  fn i = rename_edges (graph.out_edges i),
	      in_edges        =>  fn i = rename_edges (graph.in_edges i),
	      next            =>  graph.next,
	      prior            =>  graph.prior,
	      has_edge        =>  graph.has_edge,
	      has_node        =>  graph.has_node,
	      node_info       =>  fn i = p (i, graph.node_info i),
	      entries         =>  graph.entries,
	      exits           =>  graph.exits,
	      entry_edges     =>  fn i = rename_edges (graph.entry_edges i),
	      exit_edges      =>  fn i = rename_edges (graph.exit_edges i),
	      forall_nodes    =>  fn f = graph.forall_nodes (rename_node f),
	      forall_edges    =>  fn f = graph.forall_edges (rename_edge f)

	 #    fold_nodes,
	 #    fold_edges

	    };
	};
};

