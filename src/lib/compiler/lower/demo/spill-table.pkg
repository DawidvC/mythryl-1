generic spill_table_g
   (my architecture:  String  
    my initialSpillOffset:  Int
    my spillAreaSz:  Int
   ) : 
api
  
   my architecture:  String
   my beginRA:  Void -> Void
   my get:      register_allocation_graph::spillLoc -> Int
   my getF:     register_allocation_graph::spillLoc -> Int

end
{

   package g = register_allocation_graph

   fun error msg = lowcode_error_message::error (architecture$".spill_table_g", msg)
  
   itow = unt::from_int

   architecture = architecture

   exception REGISTER_SPILLS and FLOAT_REGISTER_SPILLS
   spillOffset = REF initialSpillOffset
   my regspills:   g::SpillLocHashTable::Hash_Table( Int ) =
       g::SpillLocHashTable::make_table (0, REGISTER_SPILLS)
   my fregspills:   g::SpillLocHashTable::Hash_Table( Int ) =
       g::SpillLocHashTable::make_table (0, FLOAT_REGISTER_SPILLS)
   lookupReg  = g::SpillLocHashTable::lookup regspills
   enterReg   = g::SpillLocHashTable::set regspills
   lookupFreg = g::SpillLocHashTable::lookup fregspills
   enterFreg  = g::SpillLocHashTable::set fregspills

   fun beginRA() =
      (#  Reset the regspills/fregspills map by need. 
       if *spillOffset == initialSpillOffset then ()
       else (g::SpillLocHashTable::clear regspills;
             g::SpillLocHashTable::clear fregspills
            )
       ;
       spillOffset := initialSpillOffset
      )

   fun newOffset offset =
       if offset >= spillAreaSz then error "spill area too small"
       else spillOffset := offset

   #  Get spill location for integer registers 
   fun get loc =
       lookupReg loc except _ =>
       let offset = *spillOffset
       in  newOffset (offset+4);
           enterReg (loc, offset);
           offset
       end

   #  Get spill location for floating point registers 
   fun getF loc =
       lookupFreg loc except _ =>
       let offset = *spillOffset
           aligned = unt::toIntX (unt::bitwise_and (itow (offset+7), itow -8))
       in
           newOffset (aligned+8);
           enterFreg (loc, aligned);
           aligned
       end

}
