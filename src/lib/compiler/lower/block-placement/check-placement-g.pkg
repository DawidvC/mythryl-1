## check-placement-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# This generic implements code to check
# that a block placement is correct.

generic package check_placement_g (

    package control_flow_graph:      Control_Flow_Graph;	# Control_Flow_Graph		is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api

    package instruction_properties
	:
	Instruction_Properties					# Instruction_Properties	is from   src/lib/compiler/lower/instruction/instruction-properties.api
        where instruction_set
              ==
              control_flow_graph::instruction_set;
)

: (weak) api {

    package control_flow_graph:  Control_Flow_Graph;		# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api

    check:  ((control_flow_graph::Control_Flow_Graph, List( control_flow_graph::Node )) ) -> Void;

}

{   package control_flow_graph = control_flow_graph;

    package ip = instruction_properties;
    package g  = graph;						# graph			is from   src/lib/graph/graph.pkg

    dump_strm = low_code_control::debug_stream;


    fun block_to_string (id', control_flow_graph::BLOCK { id, ... } )
        =
	cat ["<", int::to_string id', ":", int::to_string id, ">"];


    fun check (cfg as g::GRAPH graph, blocks)
        =
        {
	    # A rw_vector that maps from block id
            # to position in the placement (starting
	    # from 1).
            #
            # Nodes that have no placement have index -1.
	    #
	    order = {   vec = rw_vector::make_rw_vector (graph.capacity (), -1);

		        fun init ((id, _), i)
                            =
                            {   rw_vector::set (vec, id, i);
                                i+1;
                            };

		        ignore (list::fold_left init 1 blocks);

		        vec;
		    };

	    fun adjacent_nodes (a, b)
		=
		rw_vector::get (order, a) + 1
                ==
		rw_vector::get (order, b);


	    any_errors = REF FALSE;


	    # Report an error and dump the cfg 
	    #
	    fun report_error msg
                =
                {   fun say s
                        =
                        file::write (*dump_strm, s);

		    if   (not *any_errors)
		        
			 any_errors := TRUE;
			 say "********** Bogus block placement **********\n";
                    fi;

		    say (cat ("** " ! msg));
		};

	    fun report_not_adjacent (src, dst)
		=
		{   fun b2s id
			=
			cat [
			    int::to_string id, "@", int::to_string (rw_vector::get (order, id))
			];

		    report_error [
			"Blocks ", b2s src, " and ", b2s dst,
			" are not adjacent\n"
		      ];
		};


	    # Return TRUE if the edge
            # must connect adjacent nodes:
	    #
	    fun adj_edge (control_flow_graph::EDGE { kind => control_flow_graph::FALLSTHRU,     ... } ) =>  TRUE;
	        adj_edge (control_flow_graph::EDGE { kind => control_flow_graph::BRANCH FALSE,  ... } ) =>  TRUE;
	        adj_edge _ => FALSE;
            end;

	    # Entry and exit nodes:
	    #
	    entry_id =  control_flow_graph::entry_id  cfg;
	    exit_id  =  control_flow_graph::exit_id   cfg;

	    # Get the jump targets from the
            # last instruction in a block 
	    #
	    fun get_jump_targets id
                =
                case (graph.node_info id)
		  
		     control_flow_graph::BLOCK { instructions=>REF (i ! _), ... }
                         =>
			 case (ip::instruction_kind i)
			   
			      ip::IK_JUMP =>  ip::branch_targets i;
			      _           =>  [];
                         esac;


		     _   =>
                         [];
                  esac;


	    # Check that FALLSTHRU and BRANCH FALSE
            # edges connect adjacent nodes 
	    #
	    fun check_edge (src, dst, control_flow_graph::EDGE { kind, ... } )
                =
                case kind
		  
		     (control_flow_graph::FALLSTHRU | control_flow_graph::BRANCH FALSE)
                         =>
			 if   (not (adjacent_nodes (src, dst)))
			      
			      report_not_adjacent (src, dst);
                         fi;

		     control_flow_graph::BRANCH TRUE
                         =>
                         case (get_jump_targets src)
			   
			      [ip::FALLTHROUGH, ip::LABELLED _] => ();
			      [ip::LABELLED _, ip::FALLTHROUGH] => ();

			      _   =>
                                  report_error [
				      "Block ", int::to_string src,
				      " doesn't end in conditiona branch\n"
			          ];
                         esac;

		     control_flow_graph::JUMP
                         =>
                         case (get_jump_targets src)
			   
			      [ip::LABELLED _] => ();

			      _   =>
                                  report_error [
				      "Block ", int::to_string src, " doesn't end in jump\n"
			          ];
                         esac;

		     control_flow_graph::ENTRY
                         =>
                         if   (src != entry_id)
			     
                              report_error [
			          "Block ", int::to_string src, " is not ENTRY\n"
			      ];
			 fi;

		     control_flow_graph::EXIT
                         =>
                        if   (dst != exit_id)
			    
                             report_error [
			         "Block ", int::to_string dst, " is not EXIT\n"
			     ];
			else
                             case (get_jump_targets src)
			       
			          [ip::ESCAPES] => ();

			          _   =>
                                      report_error [
				          "Block ", int::to_string src,
				          "doesn't end in an escaping jump\n"
				      ];
                             esac;
			fi;

		     _ => ();

                esac;			# No checking for SWITCH or FLOWSTO 


	    graph.forall_edges  check_edge;

	    if *any_errors

		 fun say s
		     =
		     file::write (*dump_strm, s);

		 pr_block
		     =
		     control_flow_graph::dump_block (*dump_strm, cfg);

		 say "Block placement order:\n";

		 list::apply
		     (fn b =  say (cat ["  ", block_to_string b, "\n"]))
		     blocks;

		 file::write (*dump_strm, "[ control-flow-graph ]\n");
		 list::apply pr_block blocks;
		 say "**********\n";
		 lowcode_error_message::error ("check_placement_g", "bogus placement");
	    fi;
	};			# fun check
};				# generic package  check_placement_g


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
