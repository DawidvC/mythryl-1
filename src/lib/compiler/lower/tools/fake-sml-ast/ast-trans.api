# ast-trans.api
# Translation from one sort to another

# Compiled by:
#     src/lib/compiler/lower/tools/sml-ast.make6


api  Mdl_Ast_Translation {

    package raw_syntax:  Mdl_Ast;		# Mdl_Ast	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast.api

    Map( X )
       =
       {   orig_name:  raw_syntax::Id,		#  Original name 
           new_name:   raw_syntax::Id,		#  New name (for duplicates) 
           type:     raw_syntax::Some_Type	#  The type associated with it 
       } -> X;

    Folder( X )
       =
       ({    orig_name:  raw_syntax::Id,
            new_name:   raw_syntax::Id,
            type:    raw_syntax::Some_Type
       },
       X) -> X;


    #  Simplify an expression, declaration etc. 
    simplify_expression:   raw_syntax::Expression  -> raw_syntax::Expression;
    simplify_declaration:  raw_syntax::Decl -> raw_syntax::Decl;
    simplify_pattern:   raw_syntax::Pattern -> raw_syntax::Pattern;
    simplify_type:    raw_syntax::Some_Type -> raw_syntax::Some_Type;
    simplify_sexp:  raw_syntax::Package_Exp -> raw_syntax::Package_Exp;

    #  Strip away all location markings 
    strip_marks:    raw_syntax::Decl -> raw_syntax::Decl;

    # Translate a type to a pattern.  Apply the map function on each naming

    map_ty_to_pattern:    Map( raw_syntax::Pattern ) -> raw_syntax::Some_Type -> raw_syntax::Pattern;

    # Translate a type to an expression.  Apply the map function on 
    # each identifier.

    map_ty_to_expression:    Map( raw_syntax::Expression ) -> raw_syntax::Some_Type -> raw_syntax::Expression;

    # Fold functions that does similar things as the ones above, i.e.,
    # it enumerates all the namings and their types.

    fold_type:  Folder( X ) -> X -> raw_syntax::Some_Type -> X;
    fold_cons:  Folder( X ) -> X -> raw_syntax::Consbind -> X;

    #  Translate a constructor to a pattern 
    map_cons_to_pattern:  {   prefix:  List( raw_syntax::Id ),  #  path prefix 
                             id:      Map( raw_syntax::Pattern )   #  how to map identifiers 
                         }
                         -> raw_syntax::Consbind
                         -> raw_syntax::Pattern;

    #  Translate a constructor to an expression representing its arguments 
    map_cons_arg_to_expression:  Map( raw_syntax::Expression )                #  how to map identifiers 
                        -> raw_syntax::Consbind
                        -> raw_syntax::Expression;

    #  Translate a constructor to a constructor expression 
    map_cons_to_expression:  {      prefix:  List( raw_syntax::Id ),         #  path prefix 
                                   id:      Map( raw_syntax::Expression )   #  how to map identifiers 
                            }
                           -> raw_syntax::Consbind
                           -> raw_syntax::Expression;

    #  Translate a constructor to a clause 
    map_cons_to_clause:  {   prefix:  List( raw_syntax::Id ),        #  path prefix 
                            pattern:     raw_syntax::Pattern -> raw_syntax::Pattern,
                            expression:     raw_syntax::Expression  
                        }
                        -> raw_syntax::Consbind
                        -> raw_syntax::Clause;

    # Given a constructor, return a function that looks up the pattern
    # variables and their types

    cons_namings:  raw_syntax::Consbind -> (raw_syntax::Id -> (raw_syntax::Expression, raw_syntax::Some_Type));

};
