## posix-io-64.pkg



# Package for POSIX 1003.1 primitive I/O operations
# Using 64-bit positions.



stipulate
    package host_unt = host_unt_guts
    package int = int_guts
    package file_position = file_position_guts
herein
package posix_io {

    splitpos = inline_t::Int64::extern
    joinpos  = inline_t::Int64::intern

    package fs = posix_file

    package om:  api 
                      enum open_mode = O_RDONLY | O_WRONLY | O_RDWR 
                    end = FS
    use OM

    type word = host_unt::word
    type s_int = host_int::int

    my ++ = host_unt::bitwise_or
    my & = host_unt::bitwise_and
    infix ++ &

    fun cfun x
        =
        c_interface::c_function "POSIX-IO" x

    my  osval:  String -> s_int
        =
        cfun "osval"

    w_osval = host_unt::from_int o osval

    fun fail (fct, msg)
        =
        raise exception FAIL ("POSIX_IO." + fct + ": " + msg)

    type File_Descriptor = fs::File_Descriptor
    type pid = posix_process::pid
    
    my pipe' : Void -> s_int * s_int = cfun "pipe"

    fun pipe () = let
          my (ifd, ofd) = pipe' ()
          in
            { infd = fs::fd ifd, outfd = fs::fd ofd }
          end

    my dup'  : s_int -> s_int         =  cfun "dup"
    my dup2' : s_int * s_int -> Void  =  cfun "dup2"

    fun dup fd = fs::fd (dup' (fs::intOf fd))
    fun dup2 { old, new } = dup2'(fs::intOf old, fs::intOf new)

    my close' : s_int -> Void = cfun "close"
    fun close fd = close' (fs::intOf fd)

    my read' : Int * Int -> unt8_vector::Vector = cfun "read"
    my readbuf' : Int * rw_unt8_vector::Rw_Vector * Int * Int -> Int = cfun "readbuf"
    fun readArr (fd, asl) = let
	my (buf, i, len) = rw_unt8_vector_slice::base asl
    in
	readbuf' (fs::intOf fd, buf, len, i)
    end
    fun readVec (fd, count) = 
          if count < 0 then raise exception SIZE else read'(fs::intOf fd, count)

    my writevec' : (Int * unt8_vector::Vector * Int * Int) -> Int = cfun "writebuf"
    my writearr' : (Int * rw_unt8_vector::Rw_Vector * Int * Int) -> Int = cfun "writebuf"
    fun writeArr (fd, asl) = let
	my (buf, i, len) = rw_unt8_vector_slice::base asl
    in
	writearr' (fs::intOf fd, buf, len, i)
    end

    fun writeVec (fd, vsl) = let
	my (buf, i, len) = unt8_vector_slice::base vsl
    in
	writevec' (fs::intOf fd, buf, len, i)
    end

    enum whence = SEEK_SET | SEEK_CUR | SEEK_END
    seek_set = osval "SEEK_SET"
    seek_cur = osval "SEEK_CUR"
    seek_end = osval "SEEK_END"
    fun whToWord SEEK_SET = seek_set
      | whToWord SEEK_CUR = seek_cur
      | whToWord SEEK_END = seek_end
    fun whFromWord wh =
          if wh == seek_set then SEEK_SET
          else if wh == seek_cur then SEEK_CUR
          else if wh == seek_end then SEEK_END
          else fail ("whFromWord", "unknown whence "$(int::to_string wh))
    
    package fd {

        local package bf = bit_flags_g ()
	in
	    use BF
	end

        cloexec = fromWord (w_osval "cloexec")
      }

    package o {

        local package bf = bit_flags_g ()
	in
	    use BF
	end

        append   = fromWord (w_osval "append")
        dsync    = fromWord (w_osval "dsync")
        nonblock = fromWord (w_osval "nonblock")
        rsync    = fromWord (w_osval "rsync")
        sync     = fromWord (w_osval "sync")
      }

    my fcntl_d:    s_int * s_int -> s_int = cfun "fcntl_d"
    my fcntl_gfd:  s_int -> word = cfun "fcntl_gfd"
    my fcntl_sfd:  (s_int * word) -> Void = cfun "fcntl_sfd"
    my fcntl_gfl:  s_int -> (word * word) = cfun "fcntl_gfl"
    my fcntl_sfl:  (s_int * word) -> Void = cfun "fcntl_sfl"
    fun dupfd { old, base } = fs::fd (fcntl_d (fs::intOf old, fs::intOf base))
    fun getfd fd = fd::fromWord (fcntl_gfd (fs::intOf fd))
    fun setfd (fd, fl) = fcntl_sfd (fs::intOf fd, fd::toWord fl)
    fun getfl fd = let
          my (status, omode) = fcntl_gfl (fs::intOf fd)
          in
            (o::fromWord status, fs::omodeFromWord omode)
          end
    fun setfl (fd, status) = fcntl_sfl (fs::intOf fd, o::toWord status)

    enum lock_type = F_RDLCK | F_WRLCK | F_UNLCK

    package FLock {

        enum flock = FLOCK of {
             ltype:  lock_type,
             whence:  whence,
             start:  file_position::Int,
             len:    file_position::Int,
             pid:  Null_Or( pid )
           }

        fun flock fv = FLOCK fv
        fun ltype (FLOCK fv) = fv.ltype
        fun whence (FLOCK fv) = fv.whence
        fun start (FLOCK fv) = fv.start
        fun len (FLOCK fv) = fv.len
        fun pid (FLOCK fv) = fv.pid
      }

    type flock_rep = s_int *
		     s_int *
		     unt32::word * unt32::word *
		     unt32::word * unt32::word *
		     s_int

    my fcntl_l:  s_int * s_int * flock_rep -> flock_rep = cfun "fcntl_l_64"
    f_getlk = osval "F_GETLK"
    f_setlk = osval "F_SETLK"
    f_setlkw = osval "F_SETLKW"
    f_rdlck = osval "F_RDLCK"
    f_wrlck = osval "F_WRLCK"
    f_unlck = osval "F_UNLCK"

    fun flockToRep (FLock::FLOCK { ltype, whence, start, len, ... } ) = let
          fun ltypeOf F_RDLCK = f_rdlck
            | ltypeOf F_WRLCK = f_wrlck
            | ltypeOf F_UNLCK = f_unlck
	  my (shi, slo) = splitpos start
	  my (lhi, llo) = splitpos len
          in
            (ltypeOf ltype, whToWord whence, shi, slo, lhi, llo, 0)
          end
    fun flockFromRep (usepid, (ltype, whence, shi, slo, lhi, llo, pid)) = let
          fun ltypeOf ltype = 
                if ltype == f_rdlck then F_RDLCK
                else if ltype == f_wrlck then F_WRLCK
                else if ltype == f_unlck then F_UNLCK
                else fail ("flockFromRep", "unknown lock type "$(int::to_string ltype))
          in
            FLock::FLOCK { 
              ltype = ltypeOf ltype,
              whence = whFromWord whence,
              start = joinpos (shi, slo),
              len = joinpos (lhi, llo),
              pid = if usepid then THE (posix_process::PID pid) else NULL
            }
          end

    fun getlk (fd, flock) =
          flockFromRep (TRUE, fcntl_l (fs::intOf fd, f_getlk, flockToRep flock))
    fun setlk (fd, flock) =
          flockFromRep (FALSE, fcntl_l (fs::intOf fd, f_setlk, flockToRep flock))
    fun setlkw (fd, flock) =
          flockFromRep (FALSE, fcntl_l (fs::intOf fd, f_setlkw, flockToRep flock))

    my lseek'
        :
	s_int * unt32::word * unt32::word * s_int -> unt32::word * unt32::word
        =
	cfun "lseek_64"

    fun lseek (fd, offset, whence)
        =
	let my (ohi, olo) = splitpos offset
	in joinpos (lseek'(fs::intOf fd, ohi, olo, whToWord whence))
	end

    my fsync' : s_int -> Void = cfun "fsync"

    fun fsync fd = fsync' (fs::intOf fd)



    # Making readers and writers...
    #   (code lifted from posix-binary-primitive-io.pkg and posix-text-primitive-io.pkg)

    fun announce s x y = (
	  # print "Posix: "; print (s: String); print "\n"; 
	  x y)

    bufferSzB = 4096

    fun isRegFile fd = fs::st::isReg (fs::fstat fd)

    fun posFns (closed, fd) =
	if isRegFile fd then
	    let pos = REF (file_position::from_int 0)
		fun getPos () = *pos
		fun setPos p =
		    (if *closed then raise exception io::CLOSED_IO_STREAM 
		     pos := announce "lseek" lseek (fd, p, SEEK_SET))
		fun endPos () =
		    (if *closed then raise exception io::CLOSED_IO_STREAM 
		     fs::st::size (announce "fstat" fs::fstat fd))
		fun verifyPos () =
		    let curPos = lseek (fd, file_position::from_int 0, SEEK_CUR)
		    in
			pos := curPos; curPos
		    end
	    in
		ignore (verifyPos ());
		{ pos = pos,
		  getPos = THE getPos,
		  setPos = THE setPos,
		  endPos = THE endPos,
		  verifyPos = THE verifyPos }
	    end
	else { pos = REF (file_position::from_int 0),
	       getPos = NULL, setPos = NULL, endPos = NULL, verifyPos = NULL }

    fun mkReader { mkRD, cvtVec, cvtArrSlice } { fd, name, initablekMode } =
	let closed = REF FALSE
            my { pos, getPos, setPos, endPos, verifyPos } = posFns (closed, fd)
            blocking = REF initablekMode
            fun blockingOn () = (setfl (fd, o::flags[]); blocking := TRUE)
	    fun blockingOff () = (setfl (fd, o::nonblock); blocking := FALSE)
	    fun incPos k = pos := position.+(*pos, file_position::from_int k)
	    fun r_readVec n =
		let v = announce "read" readVec (fd, n)
		in
		    incPos (unt8_vector::length v);
		    cvtVec v
		end
	    fun r_readArr arg =
		let k = announce "readBuf" readArr (fd, cvtArrSlice arg)
		in
		    incPos k; k
		end
	    fun blockWrap f x =
		(if *closed then raise exception io::CLOSED_IO_STREAM 
		 if *blocking then () else blockingOn();
		 f x)
	    fun noBlockWrap f x =
		(if *closed then raise exception io::CLOSED_IO_STREAM 
		 if *blocking then blockingOff() 
		 (/* try */ THE (f x)
			    except (e as assembly::SYSTEM_ERROR(_, THE cause)) =>
				   if cause == posix_error::again then NULL
				   else raise exception e
		  /* end try */))
	    fun r_close () =
		if *closed then ()
		else (closed:=TRUE; announce "close" close fd)
	    isReg = isRegFile fd
	    fun avail () =
		if *closed then THE 0
		else if isReg then
		    THE (file_position::toInt (fs::st::size (fs::fstat fd) - *pos))
		else NULL
	in
	    mkRD { name = name,
		   chunkSize = bufferSzB,
		   readVec = THE (blockWrap r_readVec),
		   readArr = THE (blockWrap r_readArr),
		   readVecNB = THE (noBlockWrap r_readVec),
		   readArrNB = THE (noBlockWrap r_readArr),
		   block = NULL,
		   can_read = NULL,
		   avail = avail,
		   getPos = getPos,
		   setPos = setPos,
		   endPos = endPos,
		   verifyPos = verifyPos,
		   close = r_close,
		   ioDesc = THE (fs::fdToIOD fd) }
	end

    fun mkWriter { mkWR, cvtVecSlice, cvtArrSlice }
		 { fd, name, initablekMode, appendMode, chunkSize } =
	let closed = REF FALSE
            my { pos, getPos, setPos, endPos, verifyPos } = posFns (closed, fd)
	    fun incPos k = (pos := position.+(*pos, file_position::from_int k); k)
	    blocking = REF initablekMode
	    appendFS = o::flags (if appendMode then [o::append] else NIL)
	    fun updateStatus() =
		let flgs = if *blocking then appendFS
			       else o::flags[o::nonblock, appendFS]
		in
		    announce "setfl" setfl (fd, flgs)
		end
	  fun ensureOpen () = if *closed then raise exception io::CLOSED_IO_STREAM else ()
	  fun ensureBlock (x) =
	      if *blocking == x then () else (blocking := x; updateStatus())
	  fun writeVec' (fd, s) = writeVec (fd, cvtVecSlice s)
	  fun writeArr' (fd, s) = writeArr (fd, cvtArrSlice s)
	  fun putV x = incPos (announce "writeVec" writeVec' x)
	  fun putA x = incPos (announce "writeArr" writeArr' x)
	  fun write (put, block) arg =
	      (ensureOpen();
	       ensureBlock block; 
	       put (fd, arg))
	  fun handleBlock writer arg =
	      THE (writer arg)
	      except (e as assembly::SYSTEM_ERROR(_, THE cause)) => 
 		     if cause == posix_error::again then NULL else raise exception e
	  fun w_close () =
	      if *closed then ()
	      else (closed:=TRUE; announce "close" close fd)
	in
	    mkWR { name = name,
		   chunkSize = chunkSize,
		   writeVec = THE (write (putV, TRUE)),
		   writeArr = THE (write (putA, TRUE)),
		   writeVecNB = THE (handleBlock (write (putV, FALSE))),
		   writeArrNB = THE (handleBlock (write (putA, FALSE))),
		   block = NULL,
		   canOutput = NULL,
		   getPos = getPos,
		   setPos = setPos,
		   endPos = endPos,
		   verifyPos = verifyPos,
		   ioDesc = THE (fs::fdToIOD fd),
		   close = w_close }
	end

    local
	fun c2w_vs cvs = let
	    my (cv, s, l) = char_vector_slice::base cvs
	    wv = byte::string_to_bytes cv
	in
	    unt8_vector_slice::slice (wv, s, THE l)
	end

	# hack!!!  This only works because rw_char_vector::Rw_Vector and
	#          rw_unt8_vector::Rw_Vector are really the same internally.
	my c2w_a
           :
           rw_char_vector::Rw_Vector -> rw_unt8_vector::Rw_Vector
           =
           inline_t::cast

	fun c2w_as cas = let
	    my (ca, s, l) = rw_char_vector_slice::base cas
	    wa = c2w_a ca
	in
	    rw_unt8_vector_slice::slice (wa, s, THE l)
	end
    in

    mkBinReader = mkReader { mkRD = binary_primitive_io::RD,
				 cvtVec = fn v => v,
				 cvtArrSlice = fn s => s }

    mkTextReader = mkReader { mkRD = text_primitive_io::RD,
				  cvtVec = byte::bytes_to_string,
				  cvtArrSlice =	c2w_as }

    mkBinWriter = mkWriter { mkWR = binary_primitive_io::WR,
				 cvtVecSlice = fn s => s,
				 cvtArrSlice = fn s => s }

    mkTextWriter = mkWriter { mkWR = text_primitive_io::WR,
				  cvtVecSlice =	c2w_vs,
				  cvtArrSlice = c2w_as }

    end #  local 

  }; #  package posix_io 
end


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 2004 by The Fellowship of SML/NJ
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
