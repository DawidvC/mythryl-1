/*
 * WARNING: This file was automatically generated by mdl_g (v3.0)
 * from the machine description file "x86/x86.mdl".
 * DO NOT EDIT this file directly
 */

# Compiled by:
#     src/lib/compiler/lower/make7/ia32.make6


api Xy86Cells {

    include Cells;		# Cells	is from   src/lib/compiler/lower/instruction/cells.api

    eflags_kind:   cells_basis::Cellkind;
    fflags_kind:   cells_basis::Cellkind;
    cellset_kind:  cells_basis::Cellkind;

    show_gp:       cells_basis::Register_Id -> String;
    show_fp:       cells_basis::Register_Id -> String;
    show_cc:       cells_basis::Register_Id -> String;
    show_eflags:   cells_basis::Register_Id -> String;
    show_fflags:   cells_basis::Register_Id -> String;
    show_mem:      cells_basis::Register_Id -> String;
    show_ctrl:     cells_basis::Register_Id -> String;
    show_cellset:  cells_basis::Register_Id -> String;

    show_gpwith_size:       (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_fpwith_size:       (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_ccwith_size:       (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_eflagswith_size:   (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_fflagswith_size:   (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_memwith_size:      (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_ctrlwith_size:     (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_cellsetwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;

    eax:  cells_basis::Cell;
    ecx:  cells_basis::Cell;
    edx:  cells_basis::Cell;
    ebx:  cells_basis::Cell;
    esp:  cells_basis::Cell;
    ebp:  cells_basis::Cell;
    esi:  cells_basis::Cell;
    edi:  cells_basis::Cell;

    st:  Int -> cells_basis::Cell;

    st0:     cells_basis::Cell;
    eflags:  cells_basis::Cell;

    add_gp:       (cells_basis::Cell, Cellset) -> Cellset;
    add_fp:       (cells_basis::Cell, Cellset) -> Cellset;
    add_cc:       (cells_basis::Cell, Cellset) -> Cellset;
    add_eflags:   (cells_basis::Cell, Cellset) -> Cellset;
    add_fflags:   (cells_basis::Cell, Cellset) -> Cellset;
    add_mem:      (cells_basis::Cell, Cellset) -> Cellset;
    add_ctrl:     (cells_basis::Cell, Cellset) -> Cellset;
    add_cellset:  (cells_basis::Cell, Cellset) -> Cellset;
};


package x86cells: (weak)  Xy86Cells {		# Xy86Cells	is from   src/lib/compiler/lower/x86/instruction/x86-cells.pkg

    exception X86_CELLS;

    fun error msg = lowcode_error_message::error("X86_CELLS", msg);

    include cells_basis;

    fun show_gpwith_size (r, type)
	=
	fn  (0,  8) => "%al";
	    (0, 16) => "%ax";
	    (0, 32) => "%eax";
	    (1,  8) => "%cl";
	    (1, 16) => "%cx";
	    (1, 32) => "%ecx";
	    (2,  8) => "%dl";
	    (2, 16) => "%dx";
	    (2, 32) => "%edx";
	    (3,  8) => "%bl";
	    (3, 16) => "%bx";
	    (3, 32) => "%ebx";
	    (4, 16) => "%sp";
	    (4, 32) => "%esp";
	    (5, 16) => "%bp";
	    (5, 32) => "%ebp";
	    (6, 16) => "%si";
	    (6, 32) => "%esi";
	    (7, 16) => "%di";
	    (7, 32) => "%edi";
	    (r,  _) => "%" + (int::to_string r);
	 end 
	 (r, type)

    also
    fun show_fpwith_size (r, type)
        =
        (fn (f, _)
            =
            if (f < 8)     "%st(" + (int::to_string f) + ")";
            else           "%f"   + (int::to_string f)      ;
            fi
        )
        (r, type)

    also    fun show_ccwith_size      (r, type) =  (fn _ = "cc"     ) (r, type)
    also    fun show_eflagswith_size  (r, type) =  (fn _ = "$eflags") (r, type)
    also    fun show_fflagswith_size  (r, type) =  (fn _ = "$fflags") (r, type)
    also    fun show_memwith_size     (r, type) =  (fn _ = "mem"    ) (r, type)
    also    fun show_ctrlwith_size    (r, type) =  (fn _ = "ctrl"   ) (r, type)
    also    fun show_cellsetwith_size (r, type) =  (fn _ = "CELLSET") (r, type);

    fun show_gp r =  show_gpwith_size (r, 32);
    fun show_fp r =  show_fpwith_size (r, 64);
    fun show_cc r =  show_ccwith_size (r, 32);

    fun show_eflags  r =  show_eflagswith_size (r, 32);
    fun show_fflags  r =  show_fflagswith_size (r, 32);
    fun show_mem     r =  show_memwith_size (r, 8);
    fun show_ctrl    r =  show_ctrlwith_size (r, 0);
    fun show_cellset r =  show_cellsetwith_size (r, 0);

    eflags_kind  =  cells_basis::new_cell_kind { name=>"EFLAGS",  nickname=>"eflags" };
    fflags_kind  =  cells_basis::new_cell_kind { name=>"FFLAGS",  nickname=>"fflags" };
    cellset_kind =  cells_basis::new_cell_kind { name=>"CELLSET", nickname=>"cellset"};

    package my_cells
	=
	cells_g (						# cells_g	is from   src/lib/compiler/lower/instruction/cells-g.pkg

	    exception CELLS = X86_CELLS;

	    first_pseudo = 256;

	    desc_gp = cells_basis::DESC { low=>0, high=>31, kind=>cells_basis::REGISTER, default_values => [], 
		   zero_reg=>NULL, to_string=>show_gp, to_string_with_size=>show_gpwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_fp = cells_basis::DESC { low=>32, high=>63, kind=>cells_basis::FLOAT_REGISTER, 
		   default_values => [], zero_reg=>NULL, to_string=>show_fp, to_string_with_size=>show_fpwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_eflags = cells_basis::DESC { low=>64, high=>64, kind=>eflags_kind, default_values => [], 
		   zero_reg=>NULL, to_string=>show_eflags, to_string_with_size=>show_eflagswith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_fflags = cells_basis::DESC { low=>65, high=>65, kind=>fflags_kind, default_values=> [], 
		   zero_reg=>NULL, to_string=>show_fflags, to_string_with_size=>show_fflagswith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_mem = cells_basis::DESC { low=>66, high=>65, kind=>cells_basis::RAM_CELL, 
		   default_values=> [], zero_reg=>NULL, to_string=>show_mem, to_string_with_size=>show_memwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_ctrl = cells_basis::DESC { low=>66, high=>65, kind=>cells_basis::CONTROL_DEPENDENCY, 
		   default_values=> [], zero_reg=>NULL, to_string=>show_ctrl, to_string_with_size=>show_ctrlwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_cellset = cells_basis::DESC { low=>66, high=>65, kind=>cellset_kind, default_values=> [], 
		   zero_reg=>NULL, to_string=>show_cellset, to_string_with_size=>show_cellsetwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    cell_kind_descs = [(cells_basis::REGISTER, desc_gp), (cells_basis::FLOAT_REGISTER, desc_fp), 
		   (cells_basis::CONDITION_CODES, desc_gp), (eflags_kind, desc_eflags), (fflags_kind, desc_fflags), 
		   (cells_basis::RAM_CELL, desc_mem), (cells_basis::CONTROL_DEPENDENCY, desc_ctrl), (cellset_kind, 
		   desc_cellset)];
       );

    include my_cells;

    add_gp      = cell_set::add;
    add_fp      = cell_set::add;
    add_cc      = cell_set::add;
    add_eflags  = cell_set::add;
    add_fflags  = cell_set::add;
    add_mem     = cell_set::add;
    add_ctrl    = cell_set::add;
    add_cellset = cell_set::add;

    reg_gp      = reg REGISTER;
    reg_fp      = reg FLOAT_REGISTER;
    reg_cc      = reg CONDITION_CODES;
    reg_eflags  = reg eflags_kind;
    reg_fflags  = reg fflags_kind;
    reg_mem     = reg RAM_CELL;
    reg_ctrl    = reg CONTROL_DEPENDENCY;
    reg_cellset = reg cellset_kind;

    eax = reg_gp 0;
    ecx = reg_gp 1;
    edx = reg_gp 2;
    ebx = reg_gp 3;
    esp = reg_gp 4;
    ebp = reg_gp 5;
    esi = reg_gp 6;
    edi = reg_gp 7;

    stackptr_r = reg_gp 4;

    st = (fn x = reg_fp x);

    st0       = reg_fp 0;
    asm_tmp_r = reg_gp 0;
    fasm_tmp  = reg_fp 0;

    eflags    = reg_eflags 0;
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
