## threadkit-pre-socket.pkg

# Compiled by:
#     src/lib/std/stdlib.make6


# Provide some utility operations for threadkit sockets.


package threadkit_pre_socket: (weak)

api {

    Socket_State
      = UNCONNECTED		# Initial state.
      | CONNECTING		# Waiting for a connect to complete.
      #
      | CONNECTED		# Connected. 
      | ACCEPTING		# Waiting for an accept to complete. 
      #
      | WAITING_ON_IO		# Waiting on an input and/or output operation. 
      | CLOSED
      ;

    Threadkit_Socket (X, Y)
	=
        THREADKIT_SOCKET
          {
            state:   maildrop::Maildrop( Socket_State ),
	    #
	    socket:  socket::Socket( X, Y )
          };

     make_socket:  socket::Socket( X, Y ) -> Threadkit_Socket (X, Y);

     in_mailop:   Threadkit_Socket( X, Y ) -> threadkit::Mailop( Void );
     out_mailop:  Threadkit_Socket( X, Y ) -> threadkit::Mailop( Void );

}{
    include threadkit;					# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
#    package md    = maildrop;				# maildrop		is from   src/lib/thread-kit/src/core-thread-kit/maildrop.pkg
    package io    = threadkit_io_manager;		# threadkit_io_manager	is from   src/lib/thread-kit/src/core-thread-kit/threadkit-io-manager.pkg


    Socket_State
      = UNCONNECTED		# Initial state.
      | CONNECTING		# Waiting for a connect to complete.
      #	
      | CONNECTED		# Connected.
      | ACCEPTING		# Waiting for an accept to complete. 
      #
      | WAITING_ON_IO		# Waiting on an input and/or output operation.
      | CLOSED
      ;

    Threadkit_Socket (X, Y)
        =
        THREADKIT_SOCKET
          {
	    state:    Maildrop( Socket_State ),
	    #
	    socket:   socket::Socket( X, Y )
          };

    # Given a Mythryl socket, return a threadkit socket 
    #
    fun make_socket s
        =
	THREADKIT_SOCKET {
            state  => make_full_maildrop  UNCONNECTED,
	    socket => s
        };

    stipulate

	include threadkit;							# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg

	fun socket_to_poll_request  { socket, readable, writable, oobdable }
            =
            { iod => socket::io_descriptor socket,
              readable,
              writable,
              oobdable
            };

    herein

	fun in_mailop  (THREADKIT_SOCKET { socket, ... } )
            =
            io::io_mailop (socket_to_poll_request { socket, readable => TRUE,  writable => FALSE, oobdable => FALSE } )
                ==>
                ignore;


	fun out_mailop (THREADKIT_SOCKET { socket, ... } )
            =
            io::io_mailop (socket_to_poll_request { socket, readable => FALSE, writable => TRUE,  oobdable => TRUE  } )
		==>
		ignore;

    end;
};


## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
