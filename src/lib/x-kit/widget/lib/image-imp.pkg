## image-imp.pkg
#
# This provides a name to x-kit image imp.  

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6






###                 "Programming is one of the most difficult branches of applied mathematics;
###                  the poorer mathematicians had better remain pure mathematicians."
###
###                                                      -- E.J. Dijkstra



stipulate
    include threadkit;					# threadkit	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package qk = quark;					# quark		is from   src/lib/x-kit/style/quark.pkg
    package xc = xcore;					# xcore		is from   src/lib/x-kit/xclient/src/api/xkit-lib-external-interface.pkg
herein

    package image_imp: (weak)  Image_Imp {			# Image_Imp	is from   src/lib/x-kit/widget/util/image-imp.api

	exception BAD_NAME;

	Plea_Mail
          #
	  = GET_IMAGE   qk::Quark
	  | ADD_IMAGE  (qk::Quark, xc::Cs_Pixmap)
	  ;

	Reply_Mail
          #
	  = IMAGE  xc::Cs_Pixmap
	  | OKAY
	  | ERROR
	  ;

	 Image_Imp
	     =
	     IMAGE_IMP
	       { plea_slot:     Mailslot( Plea_Mail  ),
		 reply_slot:    Mailslot( Reply_Mail )
	       };

							    # monomorphic_hash_table_g	is from   src/lib/src/monomorphic-hash-table-g.pkg
	package string_table
	    =
	    monomorphic_hash_table_g (
		Hash_Key   =   qk::Quark;
		same_key   =   qk::same;
		hash_value =   qk::hash;
	    );

	Image_Table
	    =
	    string_table::Hash_Table( xc::Cs_Pixmap );

	fun make_image_imp inits
	    =
	    {   exception NOT_FOUND;

		my image_table:  Image_Table
		    =
		    string_table::make_table (32, NOT_FOUND);

		image_ins  = string_table::set image_table;
		image_find = string_table::find image_table;

		plea_slot = make_mailslot ();
		reply_slot   = make_mailslot ();

		fun do_plea (GET_IMAGE n)
			=>
			case (image_find n)
			    #
			    NULL  => ERROR; 
			    THE i => IMAGE i;
			esac;

		    do_plea (ADD_IMAGE (q, i))
			=>
			case (image_find q )
			    #
			    NULL => { image_ins (q, i);   OKAY; };
			    THE _ => ERROR;
			esac;
		end;

		fun loop ()
		    =
		    for (;;) {
			#
			give (reply_slot,   do_plea  (take  plea_slot));
		    };

		apply image_ins inits;

		xtracing::make_thread  "image_imp"  loop;

		IMAGE_IMP { plea_slot, reply_slot };
	    };

	fun get_image (IMAGE_IMP { plea_slot, reply_slot } ) name
	    =
	    {   give  (plea_slot,  GET_IMAGE name);

		case (take  reply_slot)
		    #
		    IMAGE i => i;
		    _       => raise exception BAD_NAME; 
		esac;
	    };

	fun add_image (IMAGE_IMP { plea_slot, reply_slot } ) arg
	    =
	    {   give  (plea_slot,  ADD_IMAGE arg);

		case (take  reply_slot)
		    #
		    OKAY => ();
		    _    => raise exception  BAD_NAME;
		esac;
	    };

    };

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories.  See COPYRIGHT file for details
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
