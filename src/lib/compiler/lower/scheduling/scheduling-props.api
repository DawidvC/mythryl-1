#
# This api describes the machine properties needed by the 
# global schedulers. 
#
# -- Allen Leung


###          "How rare it is that maintaining someone else's
###           code is akin to entering a beautifully designed
###           building, which you admire as you walk around
###           and plan how to add a wing or do some redecorating.
###
###           More often, maintaining someone else's code is like
###           being thrown headlong into a big pile of slimy,
###           smelly garbage."
###
###                                 -- Bill Venners


api SCHEDULING_PROPERTIES =
api

   package i:  Instruction_Set


   # Type reservation_table is used to represent the state 
   # of the pipeline as a partial schedule is constructed.
   # Type resource represents the resources used by an instruction
   # during its execution.  Normally this is represented by a
   # reservation table.   These are kept abstract so that the
   # client can have freedom on how to implement these things.

   type reservation_table 
   type pipeline
   type latency = Int
   type time = Int

   type cpu #  name identifying the implementaton 

   #  special instructions 
   my source:  i::instruction
   my sink:    i::instruction 

   #  Convert a name to a specific implementation 
   my cpu:     String -> cpu

   enum cpu_info = 
      CPU_INFO of
      { #  maximum number of instructions issued per cycle 
        maxIssues:  Int, 

        # Definition/use.  Definitions contain latencies.

        defUse:  i::instruction ->  List( i::C.cell * latency ) *  List( i::C.cell ),


        # Create a new reservation table of at most n time steps.
        # If the backward flag is on then we are actually building
        # the schedule in backwards manner.

        newTable:  Int -> reservation_table,


        # Extract the pipeline characteristics of an instruction 

        pipeline:  i::instruction -> pipeline,

        # Take a reservation table, a time step t, and an instruction. 
        # Find a slot to insert the instruction into the reservation 
        # table at the earliest (latest) feasible time no earlier (later) 
        # than t.  

        findSlot:  reservation_table * time * pipeline -> time,
        insert:    reservation_table * time * pipeline -> Void
      }

   # This function takes an architecture name and returns
   # a bunch of properties specific to the architecture.
   # It is structured this way so that we can dynamically change the
   # architecture parameter.

   my info:  { cpu: cpu, backward: Bool /* backward scheduling? */} -> cpu_info

   my splitCopies:  (i::C.cell -> i::C.cell) -> 
                         i::instruction -> List( i::instruction )

end
