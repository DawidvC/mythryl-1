## stamp.pkg 
## Re-written by Matthias Blume (3/2000) 

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6


package stamp:  Stamp {					# Stamp		is from   src/lib/compiler/front/typecheck-stuff/basics/stamp.api

    # For global stamps:
    #
    Picklehash
        =
        picklehash::Picklehash;				# picklehash	is from   src/lib/compiler/front/basics/mlcomp/picklehash.pkg


# XXX BUGGO FIXME It is odd to have GLOBAL but no LOCAL, and FRESH but not STALE.  Should "FRESH" be renamed "LOCAL"?
    Stamp
        = SPECIAL  String
	| FRESH    Int
	| GLOBAL   { picklehash: Picklehash,
		     count:      Int
		   };

    Key = Stamp;

    Generator
        =
        Ref Int;

    fun compare (FRESH i, FRESH i')     =>  int::compare (i, i');	# int	is from   src/lib/std/int.pkg
	compare (FRESH _, _)            =>  GREATER;
	compare (_, FRESH _)            =>  LESS;
	compare (SPECIAL s, SPECIAL s') =>  string::compare (s, s');
	compare (SPECIAL _, _)          =>  GREATER;
	compare (_, SPECIAL _)          =>  LESS;

	compare (GLOBAL g, GLOBAL g')
	    =>
	    case (int::compare (g.count, g'.count))
	      
                 EQUAL   =>  picklehash::compare (g.picklehash, g'.picklehash);
		 unequal =>  unequal;
            esac;
    end;

    fun eq (s, s')
        =
        compare (s, s') == EQUAL;

    fun new_generator ()
        =
        REF 0;

    fun fresh intref
        =
        {   i =  *intref;
        
	    intref :=  i + 1;

	    FRESH i;
	};

    special =  SPECIAL;
    global  =  GLOBAL;

    stipulate

	package m = int_red_black_map;				# int_red_black_map	is from   src/lib/src/int-red-black-map.pkg

    herein

        Converter
            =
            ( Ref( m::Map (Int) ),
              Ref( Int )
            );

	fun new_converter ()
            =
            ( REF m::empty,
              REF 0
            );

	fun case' _ (SPECIAL s) { fresh, global, special }
                =>
                special s;

	    case' _ (GLOBAL g) { global, ... }
                =>
                global g;

	    case' (m, n) (FRESH i) { fresh, ... }
		=>
		case (m::get (*m, i))
		  
		     THE i'
                         =>
                         fresh i';

		     NULL
                         =>
                         {   i' =  *n;

			     n :=  i' + 1;
                             m :=  m::set (*m, i, i');

			     fresh i';
			 };
		esac;
        end;
    end;



    fun is_fresh (FRESH _) =>  TRUE;
        is_fresh _         =>  FALSE;
    end;



    fun to_string (FRESH i)
            =>
            cat ["FRESH_STAMP(", int::to_string i, ")"];

        to_string (GLOBAL { picklehash, count } )
	    =>
	    cat ["GLOBAL_STAMP(", picklehash::to_hex picklehash, ", ", int::to_string count, ")"];

        to_string (SPECIAL s)
            =>
            cat ["SPECIAL_STAMP(", s, ")"];
    end;



    fun to_short_string (FRESH i)
            =>
            "#FRESH(" + int::to_string i + ")";

        to_short_string (SPECIAL s)
            =>
            "#SPECIAL(" + s + ")";

        to_short_string (GLOBAL { picklehash, count } )
	    =>
	    {   fun trim3 s
                    =
                    substring (s, size s - 3, 3);

		cat ["#GLOBAL(", trim3 (picklehash::to_hex picklehash), ".", int::to_string count, ")"];
	    };
    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
