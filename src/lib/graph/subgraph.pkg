#
# Subgraph adaptor.  This restricts the view of a graph.
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

api Subgraph_View {

    # Node induced subgraph:

    subgraph_view:  List( graph::Node_Id )
                      ->
                      (graph::Edge( E ) -> Bool)
                      ->
                      graph::Graph( N, E, G ) 
                      -> 
                      graph::Graph( N, E, G );
};

package subgraph_view: (weak)  Subgraph_View		# Subgraph_View	is from   src/lib/graph/subgraph.pkg
{
    package g= graph;	# graph	is from   src/lib/graph/graph.pkg

    fun subgraph_view nodes edge_pred (g::GRAPH graph)
	=
	{   set =  int_hash_table::make_table (32, g::NOT_FOUND);
	    ins =  int_hash_table::set set;

	    ins =  fn i =  ins (i, TRUE);

	    fun rmv r
                =
                {   int_hash_table::remove set r;
                    ();
                }
                except
                    _ = ();

	    fun find r
                =
                the_else (int_hash_table::find set r, FALSE);

	    apply ins nodes;

	    fun edge_p (e as (i, j, _))
                =
                find i    and
                find j    and
                edge_pred e;

	    fun check i
                =
                if  (find i)
                     raise exception g::SUBGRAPH;
                fi;

	    fun check_edge e
                =
               if  (edge_p  e)
                    raise exception g::SUBGRAPH;
               fi;

	    fun add_node (n as (i, _))
                =
                {   ins i;
                    graph.add_node n;
                };

	    fun add_edge (e as (i, j, _))
                =
                {   check i;
                    check j;
                    graph.add_edge e;
                };

	    fun remove_node i
                =
                {   check i;
                    rmv i;
                    graph.remove_node i;
                };

	    fun set_out_edges (i, es)
                = 
		{   check i;
                    apply check_edge es;
                    graph.set_out_edges (i, es);
                };

	    fun set_in_edges (j, es)
                =
		{   check j;
                    apply check_edge es;
                    graph.set_in_edges (j, es);
                };

	    fun get_nodes ()
                =
                map
                    (fn (i, _)
                        =
                        (i, graph.node_info i)
                    ) 
		    (int_hash_table::keyvals_list set);

	    fun get_edges ()
		= 
		{   fun find_edges ([], l)
                            =>
                            l;

		        find_edges (e ! es, l)
                            =>
			    if  (edge_p  e)   find_edges (es, e ! l);
                            else              find_edges (es,     l);   fi;
                  end;

		  fold_right
                      (fn ((i, _), l)
                          =
                          find_edges (graph.out_edges i, l))
                      [] 
		      (int_hash_table::keyvals_list set);
		};

	    fun order ()
                =
                int_hash_table::vals_count set;

	    fun size  ()
		=
		{   fun find_edges ([], n)
                            =>
                            n;

		        find_edges (e ! es, n)
                            =>
			    if   (edge_p e)   find_edges (es, n+1);
                            else              find_edges (es, n);   fi;
                    end;

		    fold_right
                        (fn ((i, _), n) =  find_edges (graph.out_edges i, n))
                        0 
		        (int_hash_table::keyvals_list set);
		};

	    fun out_edges i =  (list::filter edge_p (graph.out_edges i));
	    fun in_edges  i =  (list::filter edge_p (graph.in_edges  i));

	    fun get_succ i =  map #2 (out_edges i);
	    fun get_pred i =  map #1 (in_edges  i);

	    fun has_edge (i, j) =  find i and find j;
	    fun has_node  i     =  find i; 

	    fun node_info i
                =
                {   check i;
                    graph.node_info i;
                };

	    fun entry_edges i
                =
                list::filter
                    (fn (j, _, _) =  not (find j))
		    (graph.in_edges i);

	    fun exit_edges i
                =
                list::filter
                    (fn (_, j, _) =  not (find j))
		    (graph.out_edges i);

	    fun entries ()
                =
                fold_right
                    (fn ((i, _), l)
                        =
			if  (list::exists
                                 (fn (j, _, _) =  not (find j)) 
				 (graph.in_edges i))

                             i ! l;
                        else     l;   fi)
                    [] 
		    (int_hash_table::keyvals_list set);

	    fun exits ()
                =
                fold_right
                    (fn ((i, _), l)
                        =
			if   (list::exists
                                 (fn (_, j, _) =  not (find j)) 
				 (graph.out_edges i))

                             i ! l;
                        else     l;   fi)
                [] 
		(int_hash_table::keyvals_list set);

	    fun forall_nodes f
                =
                int_hash_table::keyed_apply
                    (fn (i, _) =  f (i, graph.node_info i))
                    set;

	    fun forall_edges f
                =
                int_hash_table::keyed_apply
                    (fn (i, _)
                        =
                        apply
                            (fn e
                                =
			        if   (edge_p e   )   f e;   fi)
			    (graph.out_edges i))
                    set;

	    g::GRAPH {
	      name            =>  graph.name,
	      graph_info      =>  graph.graph_info,
	      new_id          =>  graph.new_id,
	      add_node,
	      add_edge,
	      remove_node,
	      set_in_edges,
	      set_out_edges,
	      set_entries     =>  fn _ =  raise exception g::READ_ONLY,
	      set_exits       =>  fn _ =  raise exception g::READ_ONLY,
	      garbage_collect =>  graph.garbage_collect,
	      nodes           =>  get_nodes,
	      edges           =>  get_edges,
	      order,
	      size,
	      capacity        =>  graph.capacity,
	      out_edges,
	      in_edges,
	      next            =>  get_succ,
	      prior            =>  get_pred,
	      has_edge,
	      has_node,
	      node_info,
	      entries,
	      exits,
	      entry_edges,
	      exit_edges,
	      forall_nodes,
	      forall_edges

	#     fold_nodes,
	#     fold_edges

	    };
	};
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
