## region-based-register-allocation-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# Region-based register allocator.  
# This register allocation takes a cluster of large size and partitions
# it into manageable pieces to be allocated.

# This is nowhere invoked.

generic package region_based_register_allocation_g

	(ra:  Register_Allocator)						# Register_Allocator				is from   src/lib/compiler/lower/reg-alloc/register-allocator.api

	(flowgraph_partitioner:  Register_Allocation_Flowgraph_Partitioner	# Register_Allocation_Flowgraph_Partitioner	is from   src/lib/compiler/lower/reg-alloc/ra-flowgraph-partitioner.api
	    where  Flowgraph == ra::f::Flowgraph
	    where cells      == ra::cells
	)

: (weak)  Register_Allocator							# Register_Allocator				is from   src/lib/compiler/lower/reg-alloc/register-allocator.api

{
    package f                = ra::f;
    package fp               = flowgraph_partitioner;
    package instruction_set  = f::instruction_set;

    package cells      	     = instruction_set::cells;
    package core             = register_allocation_core;			# register_allocation_core			is from   src/lib/compiler/lower/reg-alloc/register-allocation-core.pkg
    package g      	     = core::g;

    include ra;

    max_blocks
	=
	low_code_control::make_int ("ra-max-blocks", "max block count for region-based RA");


    # Main entry point.  
    # All the magic is actually done
    # in the flowgraph_partitioner module:
    #
    fun ra (parameters: List( Register_Allocation_Client )) flowgraph
        =
	if (fp::number_of_blocks flowgraph > *max_blocks)

	     fun ra (parameter as { cellkind, ... } )
                 = 
		 fp::partition flowgraph cellkind (ra::ra [parameter]);

	     apply ra parameters;

	     flowgraph;

	else
             ra::ra parameters flowgraph;
        fi;

};
