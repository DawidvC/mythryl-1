# Computation of the dominance frontier using the algorithm
# of Cytron, Ferrante, Rosen, Wegman and Zadeck in TOPLAS 91
#
# -- Allen Leung


generic package DominanceFrontiers (Dom:  Dominator_Tree) 
   : DOMINANCE_FRONTIERS
{

   package dom   = Dom
   package g     = graph
   package a     = rw_vector

   type dominance_frontiers = a::Rw_Vector( List( g::node_id ) )

   fun DFs (Dom as g::GRAPH dom) =
   let N           = dom.capacity ()
       DF          = a::rw_vector (N,[]) : dominance_frontiers
       my g::GRAPH cfg = Dom::cfg Dom
       immediately_dominates = Dom::immediately_dominates Dom
       fun computeDF X =
       let #  the successors in X that are not strictly dominated by X 
           S = fold_right (fn ((_, Y, _), S) =>
                          if immediately_dominates (X, Y) 
                          then S else Y . S) [] (cfg.out_edges X)
             /* Nodes in the dominance frontier of n that are not
              * dominated by n's immediate dominator
              */
           fun computeChild((_, Z, _), S) =
           let DF_Z = computeDF Z
               S    = fold_right (fn (Y, S) =>
                             if immediately_dominates (X, Y) 
                             then S else Y . S) S DF_Z
           in  S
           end
           S = fold_left computeChild S (dom.out_edges X) 
       in
           a::update (DF, X, S);
           S
       end 

       my [root] = dom.entries ()
       computeDF root
   in
       DF
   end

}

