## tdp-instrument.pkg
## Author: Matthias Blume (blume@tti-c.org)

# Compiled by:
#     src/lib/compiler/debugging-and-profiling/debugprof.make6

# Perform deep_syntax annotations for tracing- debugging- and profiling support.
#   This adds a tdp_enter at the entry point of each FN_EXPRESSION,
#   a push-restore sequence (tdp_push) at each non-tail call site of
#   a non-primitive function, and a save-restore sequence to each EXCEPT_EXPRESSION.
#




###        "We didn't have to replicate the problem.
###         We understood it."
###                            -- Linus Torvalds



stipulate

    package deep =  deep_syntax;			# deep_syntax			is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.pkg
#   package st   =  symbol_table;			# symbol_table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
    package sp   =  symbol_path;			# symbol_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
    package em   =  error_message;			# error_message			is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package vc   =  variables_and_constructors;		# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
    package bt   =  core_type_types;			# core_type_types		is from   src/lib/compiler/front/typecheck-stuff/types/core-type-types.pkg
    package au   =  deep_syntax_stuff;			# deep_syntax_stuff		is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax-stuff.pkg

herein

    api Tdp_Instrument {

	 enabled:  Ref(  Bool );

	 instrument:
	    (symbol::Symbol -> Bool) 	#  isSpecial 
            ->
	    (symbol_table::Symbol_Table, compile_info::Compile_Info( deep::Declaration ))
            ->
            deep::Declaration
            ->
            deep::Declaration;
    };

    package tdp_instrument : Tdp_Instrument {		# Tdp_Instrument	is from   src/lib/compiler/debugging-and-profiling/profile/tdp-instrument.pkg

	priority = [10, 1];
	obscurity = 1;
	prefix = "tdp";

	registry
            =
            control_index::make
                { help => "tracing/debugging/profiling" };
								my _ = 
        basic_control::note_subindex (prefix, registry, priority);

	convert_boolean
            =
            control_utilities::convert::bool;

	enabled
            =
            runtime_internals::tdp::mode;		# runtime_internals	is from   src/lib/std/src/nj/runtime-internals.pkg

	p = 0;

	control
	    =
	    control::control {

	      name      =>  "instrument",
	      pri       =>  [p],
	      obscurity,
	      help      =>  "trace-, debug-, and profiling instrumentation mode",
	      control   =>  enabled
	    };
								my _ = 
        control_index::note_control
	    registry
	    { control         =>  control::string_control convert_boolean control,
	      dictionary_name =>  THE "Tdp_Instrument"
            };

	fun impossible s
	    =
	    em::impossible ("tdp_instrument: " + s);

	infix val  --> ;
	#
	(-->) = bt::(-->);


	i_i_ty    =   bt::int_type --> bt::int_type;
	ii_u_ty   =   bt::tuple_type [bt::int_type, bt::int_type] --> bt::void_type;
	ii_u_u_ty =   ii_u_ty --> bt::void_type;
	u_u_ty    =   bt::void_type --> bt::void_type;
	u_u_u_ty  =   bt::void_type --> u_u_ty;
	iiis_u_ty =   bt::tuple_type [bt::int_type, bt::int_type, bt::int_type, bt::void_type] --> bt::void_type;

	fun instrument0 is_special (symbol_table, compile_info: compile_info::Compile_Info( deep::Declaration )) d
	    =
	    {   matchstring =   compile_info.error_match;

		make_var =   compile_info.make_highcode_variable;

		fun tmpvar (n, t)
		    =
		    {   symbol =   symbol::make_value_symbol n;

			vc::ORDINARY_VARIABLE {

			    var_home        =>   var_home::named_var_home (symbol, make_var),
			    inlining_info =>   inlining_information::NULL,

			    path          =>   sp::SYMBOL_PATH [symbol],
			    var_type      =>   REF t
			};
		    };

	/*
		isSpecial
		    =
		    {    l = [   special_symbols::paramId,
				 special_symbols::genericId,
				 special_symbols::hiddenId,
				 special_symbols::tempPackageId,
				 special_symbols::tempGenericId,
				 special_symbols::genericBodyId,
				 special_symbols::anonymousPkgFunApiId,
				 special_symbols::result_id,
				 special_symbols::return_id,
				 special_symbols::internalVarId
			     ];

			fn s => list::exists (fn s' => symbol::eq (s, s')) l;
		   };
	*/

		fun cons (s, [])
			=>
			if (is_special s ) []; else [(s, 0)];fi;

		    cons (s, l as ((s', m) ! t))
			=>
			if   (is_special s ) l;
			elif (symbol::eq    (s, s') ) (s, m+1) ! t;
			else                (s, 0) ! l;
                        fi;
                end;

		fun get_core_val s
		    =
		    core_access::get_variable (symbol_table, s);

		fun get_core_con s
		    =
		    core_access::get_constructor (symbol_table, s);

		tdp_reserve  =   get_core_val "tdp_reserve";
		tdp_register =   get_core_val "tdp_register";
		tdp_save     =   get_core_val "tdp_save";
		tdp_push     =   get_core_val "tdp_push";
		tdp_nopush   =   get_core_val "tdp_nopush";
		tdp_enter    =   get_core_val "tdp_enter";
		matchcon     =   get_core_con "MATCH";

		tdp_register_var =   tmpvar ("<tdp_register>", iiis_u_ty);
		tdp_save_var     =   tmpvar ("<tdp_save>",      u_u_u_ty);
		tdp_push_var     =   tmpvar ("<tdp_push>",     ii_u_u_ty);
		tdp_nopush_var   =   tmpvar ("<tdp_nopush>",     ii_u_ty);
		tdp_enter_var    =   tmpvar ("<tdp_enter>",      ii_u_ty);
		tdp_reserve_var  =   tmpvar ("<tdp_reserve>",     i_i_ty);
		tdp_module_var   =   tmpvar ("<tdp_module>", bt::int_type);

		fun variable_in_expression v
		    =
		    deep::VARIABLE_IN_EXPRESSION (REF v, []);

		fun integer_constant_in_expression i
		    =
		    deep::INT_CONSTANT_IN_EXPRESSION (integer::from_int i, bt::int_type);

		u_expression =   au::unit_expression;
		pushexp      =   deep::APPLY_EXPRESSION (variable_in_expression tdp_push_var, u_expression);
		saveexp      =   deep::APPLY_EXPRESSION (variable_in_expression tdp_save_var, u_expression);

		fun mkmodidexp fctvar id
		    =
		    deep::APPLY_EXPRESSION (variable_in_expression fctvar,
			      au::tupleexp [variable_in_expression tdp_module_var, integer_constant_in_expression id]);

		mkenterexp  =   mkmodidexp tdp_enter_var;
		mkpushexp   =   mkmodidexp tdp_push_var;
		mknopushexp =   mkmodidexp tdp_nopush_var;

		fun mkregexp (k, id, s)
		    =
		    deep::APPLY_EXPRESSION (variable_in_expression tdp_register_var,
			      au::tupleexp [variable_in_expression tdp_module_var,
					   integer_constant_in_expression k, integer_constant_in_expression id, deep::STRING_CONSTANT_IN_EXPRESSION s]);

		regexps =   REF [];
		next    =   REF 0;

		fun newid k s
		    =
		    {   id =   *next;

			next := id + 1;
			regexps := mkregexp (k, id, s) ! *regexps;
			id;
		    };

		mkenter  =   mkenterexp  o newid core::tdp_idk_entry_point;
		mkpush   =   mkpushexp   o newid core::tdp_idk_non_tail_call;
		mknopush =   mknopushexp o newid core::tdp_idk_tail_call;

		fun value_declarations (v, e)
		    =
		    deep::VALUE_DECLARATIONS [

			deep::NAMED_VALUE {
			    pattern => deep::VARIABLE_IN_PATTERN v,
			    expression => e,
			    ref_typevar_refs => REF [],
			    bound_typevar_refs => []
			}
		    ];

		fun let_expression (v, e, b)
		    =
		    deep::LET_EXPRESSION (value_declarations (v, e), b);

		fun auexp v
		    =
		    deep::APPLY_EXPRESSION (variable_in_expression v, u_expression);		#  Apply to unit 

		fun is_primitive_expression (deep::VARIABLE_IN_EXPRESSION (REF (vc::ORDINARY_VARIABLE v), _))
		        =>
		        inlining_information::is_simple v.inlining_info;

		    is_primitive_expression (deep::CONSTRUCTOR_EXPRESSION _)
                        =>
                        TRUE;

		    is_primitive_expression (deep::TYPE_CONSTRAINT_EXPRESSION (e, _))
                        =>
                        is_primitive_expression e;

		    is_primitive_expression (deep::SOURCE_CODE_REGION_FOR_EXPRESSION (e, _))
                        =>
                        is_primitive_expression e;

		    is_primitive_expression _
                        =>
                        FALSE;
                end;

		fun is_raise_exp (deep::RAISE_EXPRESSION (e, _))
			=>
			{   fun is_simple_exn (deep::VARIABLE_IN_EXPRESSION _) => TRUE;
				is_simple_exn (deep::CONSTRUCTOR_EXPRESSION _) => TRUE;
				is_simple_exn (deep::TYPE_CONSTRAINT_EXPRESSION (e, _)) => is_simple_exn e;
				is_simple_exn (deep::SOURCE_CODE_REGION_FOR_EXPRESSION (e, _)) => is_simple_exn e;
				is_simple_exn (deep::RAISE_EXPRESSION (e, _)) => is_simple_exn e;	#  !! 
			        is_simple_exn _ => FALSE;
                            end;

			    is_simple_exn e;
			};

		    is_raise_exp (deep::SOURCE_CODE_REGION_FOR_EXPRESSION (e, _) |
				  deep::TYPE_CONSTRAINT_EXPRESSION (e, _) |
				  deep::SEQUENTIAL_EXPRESSIONS [e])
			=>
			is_raise_exp e;

		    is_raise_exp _
			=>
			FALSE;
                end;

		fun mk_descr ((n, r), what)
		    =
		    {   fun name ((s, 0), a) => symbol::name s ! a;
			    name ((s, m), a) => symbol::name s ! "[" !
						int::to_string (m + 1) ! "]" ! a;
			end;

			fun dot ([z], a) => name (z, a);
			    dot (h ! t, a) => dot (t, "." ! name (h, a));
			    dot ([], a) => impossible (what + ": no path");
			end;

			ms =   matchstring r;

			cat (ms ! ": " ! dot (n, []));
		    };

		fun i_exp _ loc (deep::RECORD_EXPRESSION l)
			=>
			deep::RECORD_EXPRESSION (map (fn (l, e) = (l, i_exp FALSE loc e)) l);

		    i_exp _ loc (deep::RECORD_SELECTOR_EXPRESSION (l, e))
			=>
			deep::RECORD_SELECTOR_EXPRESSION (l, i_exp FALSE loc e);

		    i_exp _ loc (deep::VECTOR_EXPRESSION (l, t))
			=>
			deep::VECTOR_EXPRESSION (map (i_exp FALSE loc) l, t);

		    i_exp tail loc (deep::PACK_EXPRESSION (e, t, tcl))
			=>
			deep::PACK_EXPRESSION (i_exp tail loc e, t, tcl);

		    i_exp tail loc (e as deep::APPLY_EXPRESSION (f, a))
			=>
			{   mainexp =   deep::APPLY_EXPRESSION (i_exp FALSE loc f, i_exp FALSE loc a);

			    if   (is_primitive_expression f)
			        
				 mainexp;
			    else
				 if tail
				      deep::SEQUENTIAL_EXPRESSIONS [mknopush (mk_descr (loc, "GOTO")),
							mainexp];
				 else
				      type =   reconstruct::expression_type e;
				      result =   tmpvar ("tmpresult", type);
				      restore =  tmpvar ("tmprestore", u_u_ty);
				      pushexp =  mkpush (mk_descr (loc, "CALL"));

				      let_expression (restore, pushexp,
					      let_expression (result, mainexp,
						      deep::SEQUENTIAL_EXPRESSIONS [auexp restore,
								variable_in_expression result]));
				 fi;
			    fi;
			};

		    i_exp tail loc (deep::EXCEPT_EXPRESSION (e, (rl, t)))
			=>
			{   restore =   tmpvar ("tmprestore", u_u_ty);

			    fun rule (r as deep::CASE_RULE (p, e))
				=
				if   (is_raise_exp e)
				     r;
				else deep::CASE_RULE (p, deep::SEQUENTIAL_EXPRESSIONS [auexp restore, i_exp tail loc e]);fi;

			    let_expression (restore, saveexp,
				    deep::EXCEPT_EXPRESSION (i_exp FALSE loc e, (map rule rl, t)));
			};

		    i_exp _ loc (deep::RAISE_EXPRESSION (e, t))
			=>
			deep::RAISE_EXPRESSION (i_exp FALSE loc e, t);

		    i_exp tail loc (deep::CASE_EXPRESSION (e, rl, b))
			=>
			deep::CASE_EXPRESSION (i_exp FALSE loc e, map (i_rule tail loc) rl, b);

		    i_exp tail loc (deep::IF_EXPRESSION { test_case, then_case, else_case } )
			=>
			deep::IF_EXPRESSION { test_case => i_exp FALSE loc test_case,
					      then_case => i_exp tail loc then_case,
					      else_case => i_exp tail loc else_case
					    };

		    i_exp tail loc (deep::AND_EXPRESSION (e1, e2))
			=>
			deep::AND_EXPRESSION (i_exp FALSE loc e1, i_exp tail loc e2);

		    i_exp tail loc (deep::OR_EXPRESSION (e1, e2))
			=>
			deep::OR_EXPRESSION (i_exp FALSE loc e1, i_exp tail loc e2);

		    i_exp _ loc (deep::WHILE_EXPRESSION { test, expression } )
			=>
			deep::WHILE_EXPRESSION { test       => i_exp FALSE loc test,
				     expression => i_exp FALSE loc expression };

		    i_exp tail loc (deep::FN_EXPRESSION (rl, t))
			=>
			{   enterexp =   mkenter (mk_descr (loc, "FN"));
			    arg =   tmpvar ("fnvar", t);
			    rl' =   map (i_rule TRUE loc) rl;
			    re  =   {   my deep::CASE_RULE (_, lst)
					   =
					   list::last rl;

					t = reconstruct::expression_type lst;

					deep::RAISE_EXPRESSION (deep::CONSTRUCTOR_EXPRESSION (matchcon, []), t);
				    };

			    deep::FN_EXPRESSION ([deep::CASE_RULE (deep::VARIABLE_IN_PATTERN arg,
					      deep::SEQUENTIAL_EXPRESSIONS [enterexp,
							deep::CASE_EXPRESSION (deep::VARIABLE_IN_EXPRESSION (REF arg, []),
								   rl', TRUE)]),
				      deep::CASE_RULE (deep::WILDCARD_PATTERN, re)],
				     t);
			};

		    i_exp tail loc (deep::LET_EXPRESSION (d, e)) =>
		      deep::LET_EXPRESSION (i_dec loc d, i_exp tail loc e);

		    i_exp tail loc (deep::SEQUENTIAL_EXPRESSIONS l) =>
		      deep::SEQUENTIAL_EXPRESSIONS (#1 (fold_right (fn (e, (l, t)) = (i_exp t loc e ! l, FALSE))
					  ([], tail) l));
		    i_exp tail loc (deep::TYPE_CONSTRAINT_EXPRESSION (e, t))
		       =>
		       deep::TYPE_CONSTRAINT_EXPRESSION (i_exp tail loc e, t);

		    i_exp tail (n, _) (deep::SOURCE_CODE_REGION_FOR_EXPRESSION (e, r))
		       =>
		       deep::SOURCE_CODE_REGION_FOR_EXPRESSION (i_exp tail (n, r) e, r);

		    i_exp _ _ (e as (deep::VARIABLE_IN_EXPRESSION     _ | deep::CONSTRUCTOR_EXPRESSION       _ | deep::INT_CONSTANT_IN_EXPRESSION    _ |
				     deep::UNT_CONSTANT_IN_EXPRESSION _ | deep::FLOAT_CONSTANT_IN_EXPRESSION _ | deep::STRING_CONSTANT_IN_EXPRESSION _ |
				     deep::CHAR_CONSTANT_IN_EXPRESSION _)) => e;
		end 

		also
		fun i_dec loc (deep::VALUE_DECLARATIONS l) => deep::VALUE_DECLARATIONS (map (i_vb loc) l);
		    i_dec loc (deep::RECURSIVE_VALUE_DECLARATIONS l) => deep::RECURSIVE_VALUE_DECLARATIONS (map (i_rvb loc) l);
		    i_dec loc (deep::ABSTRACT_TYPE_DECLARATION { abstract_type_constructors, with_type_constructors, body } ) =>
		       deep::ABSTRACT_TYPE_DECLARATION { abstract_type_constructors, with_type_constructors,
				      body => i_dec loc body };
		    i_dec loc (deep::EXCEPTION_DECLARATIONS        l) => deep::EXCEPTION_DECLARATIONS        (map (i_eb   loc) l);
		    i_dec loc (deep::PACKAGE_DECLARATIONS          l) => deep::PACKAGE_DECLARATIONS          (map (i_strb loc) l);
		    i_dec loc (deep::GENERIC_DECLARATIONS          l) => deep::GENERIC_DECLARATIONS          (map (i_fctb loc) l);

		    i_dec loc (deep::LOCAL_DECLARATIONS (d, d'))
		     =>
		     deep::LOCAL_DECLARATIONS (i_dec loc d, i_dec loc d');

		    i_dec loc (deep::SEQUENTIAL_DECLARATIONS l) => deep::SEQUENTIAL_DECLARATIONS (map (i_dec loc) l);
		    i_dec (n, _) (deep::SOURCE_CODE_REGION_FOR_DECLARATION (d, r)) => deep::SOURCE_CODE_REGION_FOR_DECLARATION (i_dec (n, r) d, r);
		    i_dec _ (d as (deep::TYPE_DECLARATIONS _ | deep::ENUM_DECLARATIONS _ |
				    deep::API_DECLARATIONS _ | deep::GENERIC_API_DECLARATIONS _ | deep::INCLUDE_DECLARATIONS _ |
				    deep::OVERLOADED_VARIABLE_DECLARATION _ | deep::FIXITY_DECLARATION _)) => d;
		end 

		also
		fun i_rule tail loc (deep::CASE_RULE (p, e))
                    =
                    deep::CASE_RULE (p, i_exp tail loc e)

		also
		fun i_vb (n, r) (named_value as deep::NAMED_VALUE { pattern, expression, bound_typevar_refs, ref_typevar_refs } )
		    =
		    {   fun gv (deep::VARIABLE_IN_PATTERN v) => THE v;
			    gv (deep::TYPE_CONSTRAINT_PATTERN (p, _)) => gv p;
			    gv (deep::AS_PATTERN (p, p')) =>
			       case (gv p)   
				    THE v => THE v;
				   NULL => gv p';
                               esac;
			    gv _ => NULL;
			end;

			fun recur n
			    =
			    deep::NAMED_VALUE {

				pattern,
				expression => i_exp FALSE (n, r) expression,
				bound_typevar_refs,
				ref_typevar_refs
			    };

			case (gv pattern)
			  
			     THE (vc::ORDINARY_VARIABLE { path => sp::SYMBOL_PATH [x], inlining_info, ... } )
				 =>
				 if (inlining_information::is_simple inlining_info)
				      named_value;
				 else recur (cons (x, n));fi;

			     THE (vc::ORDINARY_VARIABLE { inlining_info, ... } )
				 =>
				 if (inlining_information::is_simple inlining_info)  named_value;
				 else                                                recur n;
                                 fi;

			     _ => recur n;
			esac;
		    }

		also
		fun i_rvb (n, r) (deep::NAMED_RECURSIVE_VALUES { variable=>var, expression, bound_typevar_refs, null_or_type, ref_typevar_refs } )
		    =
		    {   x = case var

			         vc::ORDINARY_VARIABLE { path => symbol_path::SYMBOL_PATH [x], ... }
				     =>
				     x;

			       _ => impossible "RECURSIVE_VALUE_DECLARATIONS";
                            esac;

			deep::NAMED_RECURSIVE_VALUES
                          {
                            variable => var,
                            expression => i_exp FALSE (cons (x, n), r) expression,
			    bound_typevar_refs,
                            null_or_type,
                            ref_typevar_refs
                          };
		    }

		also
		fun i_eb loc (deep::NAMED_EXCEPTION { exception_constructor=>exn, exception_type=>etype, name_string=>ident } )
		    =>
		    deep::NAMED_EXCEPTION {
			exception_constructor => exn,
			exception_type => etype,
			name_string    => i_exp FALSE loc ident
		    };

		    i_eb _ eb => eb;
                end 

		also
		fun i_strb (n, r) (deep::NAMED_PACKAGE { name_symbol=>name, a_package, definition=>def } )
		    =
		    deep::NAMED_PACKAGE {
			name_symbol => name,
			a_package,
			definition => i_strexp (cons (name, n), r) def
		    }

		also
		fun i_fctb (n, r) (deep::NAMED_GENERIC { name_symbol=>name, a_generic=>fct, definition=>def } )
		    =
		    deep::NAMED_GENERIC {
			name_symbol => name,
			a_generic  => fct,
			definition => i_fctexp (cons (name, n), r) def
		    }

		also
		fun i_strexp loc (deep::PACKAGE_LET { declaration, expression })
			=>
			deep::PACKAGE_LET { declaration => i_dec loc declaration,
					    expression  => i_strexp loc expression
					  };

		    i_strexp (n, _) (deep::SOURCE_CODE_REGION_FOR_PACKAGE (s, r))
			=>
			deep::SOURCE_CODE_REGION_FOR_PACKAGE (i_strexp (n, r) s, r);

		    i_strexp _ s
                        =>
                        s;
                end 

		also
		fun i_fctexp loc (deep::GENERIC_DEFINITION { parameter, parameter_types, definition=>def } )
			=>
			deep::GENERIC_DEFINITION {
			    parameter,
			    parameter_types,
			    definition => i_strexp loc def
			};

		    i_fctexp loc (deep::GENERIC_LET (d, f))
			=>
			deep::GENERIC_LET (i_dec loc d, i_fctexp loc f);

		    i_fctexp (n, _) (deep::SOURCE_CODE_REGION_FOR_GENERIC (f, r))
			=>
			deep::SOURCE_CODE_REGION_FOR_GENERIC (i_fctexp (n, r) f, r);

		    i_fctexp _ f
                        =>
                        f;
                end;

		d' =   i_dec ([], (0, 0)) d;

		deep::LOCAL_DECLARATIONS (deep::SEQUENTIAL_DECLARATIONS [value_declarations (tdp_reserve_var, variable_in_expression tdp_reserve),
				      value_declarations (tdp_module_var,
					      deep::APPLY_EXPRESSION (variable_in_expression tdp_reserve_var,
							integer_constant_in_expression *next)),
				      value_declarations (tdp_save_var, auexp tdp_save),
				      value_declarations (tdp_push_var, auexp tdp_push),
				      value_declarations (tdp_nopush_var, auexp tdp_nopush),
				      value_declarations (tdp_register_var, auexp tdp_register),
				      value_declarations (tdp_enter_var,
					      deep::SEQUENTIAL_EXPRESSIONS (*regexps @
							[auexp tdp_enter]))],
			    d');
	    };

	fun instrument is_special parameters d
	    =
	    if *enabled
		 instrument0 is_special parameters d
		 except
                     no_core = d;		#  this takes care of core.pkg 
	    else
		 d;
	    fi;
    };

end; #  with


## Copyright (c) 2004 by The Fellowship of SML/NJ
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
