#  example-start rangewidgets rangewidgets.c 

local
  use C Gtk gtk_enums gtk_macros

  hscale = REF NULL
  vscale = REF NULL 

  fun cb_pos_menu_select pos item
    = 
    #  Set the value position on both scale widgets 
    (gtk_scale_set_value_pos::f (*hscale, pos);
     gtk_scale_set_value_pos::f (*vscale, pos)
    )

  fun cb_update_menu_select policy item =
    #  Set the update policy for both scale widgets 
    (gtk_range_set_update_policy::f (*hscale, policy);
     gtk_range_set_update_policy::f (*vscale, policy)
    )

  fun cb_digits_scale adj = 
  let value = GtkAdjustment::get'value adj
      value = int32::from_int (float::round value)
      #  Set the number of decimal places to which adj->value is rounded 
  in  gtk_scale_set_digits::f (*hscale, value);
      gtk_scale_set_digits::f (*vscale, value)
  end

  fun cb_page_size set get = 
  let use GtkAdjustment
     /* Set the page size and page increment size of the sample
      * adjustment to the value specified by the "Page Size" scale */
      value = get'value get
  in  set'page_size (set, value);
      set'page_increment (set, value);
     /* Now emit the "changed" signal to reconfigure all the widgets that
      * are attached to this adjustment */
      gtk_signal_emit_by_name::f (set, "changed")
  end

  fun cb_draw_value button = 
  let active = GtkToggleButton::get'active button 
      /* Turn the value display on the scale widgets off or on depending
       *  on the state of the checkbutton */
  in  gtk_scale_set_draw_value::f (*hscale, active);
      gtk_scale_set_draw_value::f (*vscale, active)
  end

  #  Convenience functions 

  fun make_menu_item (name, callback, data) = 
  let item = gtk_menu_item_new_with_label::f name
  in  gtk_signal_connect::f (item, "activate", callback data);
      gtk_widget_show::f item;
      item
  end

  fun scale_set_default_values scale = 
      (gtk_range_set_update_policy::f (scale, GTK_UPDATE_CONTINUOUS);
       gtk_scale_set_digits::f (scale, 1);
       gtk_scale_set_value_pos::f (scale, GTK_POS_TOP);
       gtk_scale_set_draw_value::f (scale, TRUE)
      )

  #  makes the sample window 
  fun create_range_controls () = 
  let 
      #  Standard window-creating stuff 
      window = gtk_window_new::f GTK_WINDOW_TOPLEVEL
      gtk_signal_connect::f (window, "destroy", gtk_main_quit::f)
      gtk_window_set_title::f (window, "range controls")

      box1   = gtk_vbox_new::f (FALSE, 0)
      gtk_container_add::f (window, box1)
      gtk_widget_show::f box1

      box2   = gtk_hbox_new::f (FALSE, 10)
      gtk_container_set_border_width::f (box2, 0w10)
      gtk_box_pack_start::f (box1, box2, TRUE, TRUE, 0w0)
      gtk_widget_show::f box2

      #  value, lower, upper, step_increment, page_increment, page_size 
      /* Note that the page_size value only makes a difference for
       * scrollbar widgets, and the highest value you'll get is actually
       * (upper - page_size). */
      adj1   = gtk_adjustment_new::f (0.0, 0.0, 101.0, 0.1, 1.0, 1.0);
  
      vscale := gtk_vscale_new::f adj1
      scale_set_default_values(*vscale)
      gtk_box_pack_start::f (box2, *vscale, TRUE, TRUE, 0w0)
      gtk_widget_show::f(*vscale)

      box3   = gtk_vbox_new::f (FALSE, 10)
      gtk_box_pack_start::f (box2, box3, TRUE, TRUE, 0w0)
      gtk_widget_show::f box3

      #  Reuse the same adjustment 
      hscale := gtk_hscale_new::f adj1
      gtk_widget_set_usize::f (*hscale, 200, 30)
      scale_set_default_values (*hscale)
      gtk_box_pack_start::f (box3, *hscale, TRUE, TRUE, 0w0)
      gtk_widget_show::f (*hscale)

      #  Reuse the same adjustment again 
      scrollbar = gtk_hscrollbar_new::f adj1

      /* Notice how this causes the scales to always be updated
       * continuously when the scrollbar is moved */
      gtk_range_set_update_policy::f (scrollbar, 
                                                  GTK_UPDATE_CONTINUOUS)
      gtk_box_pack_start::f (box3, scrollbar, TRUE, TRUE, 0w0)
      gtk_widget_show::f scrollbar

      box2   = gtk_hbox_new::f (FALSE, 10)
      gtk_container_set_border_width::f (box2, 0w10)
      gtk_box_pack_start::f (box1, box2, TRUE, TRUE, 0w0)
      gtk_widget_show::f box2

      #  A checkbutton to control whether the value is displayed or not 
      button = gtk_check_button_new_with_label::f 
                     "Display value on scale widgets"
      gtk_toggle_button_set_active::f (button, TRUE)
      gtk_signal_connect::f (button, "toggled", cb_draw_value)
      gtk_box_pack_start::f (box2, button, TRUE, TRUE, 0w0)
      gtk_widget_show::f button
  
      box2   = gtk_hbox_new::f (FALSE, 10)
      gtk_container_set_border_width::f (box2, 0w10)

      #  An option menu to change the position of the value 
      label  = gtk_label_new::f "Scale Value Position:"
      gtk_box_pack_start::f (box2, label, FALSE, FALSE, 0w0)
      gtk_widget_show::f label
  
      opt    = gtk_option_menu_new::f()
      menu   = gtk_menu_new::f()

      item   = make_menu_item ("Top", cb_pos_menu_select, GTK_POS_TOP)
      gtk_menu_append::f (menu, item)
  
      item   = make_menu_item ("Bottom", cb_pos_menu_select, GTK_POS_BOTTOM)
      gtk_menu_append::f (menu, item)
  
      item   = make_menu_item ("Left", cb_pos_menu_select, GTK_POS_LEFT)
      gtk_menu_append::f (menu, item)
  
      item   = make_menu_item ("Right", cb_pos_menu_select, GTK_POS_RIGHT)
      gtk_menu_append::f (menu, item)
  
      gtk_option_menu_set_menu::f (opt, menu)
      gtk_box_pack_start::f (box2, opt, TRUE, TRUE, 0w0)
      gtk_widget_show::f opt

      gtk_box_pack_start::f (box1, box2, TRUE, TRUE, 0w0)
      gtk_widget_show::f box2

      box2   = gtk_hbox_new::f (FALSE, 10)
      gtk_container_set_border_width::f (box2, 0w10)

      /* Yet another option menu, this time for the update policy of the
       * scale widgets */
      label  = gtk_label_new::f "Scale Update Policy:"
      gtk_box_pack_start::f (box2, label, FALSE, FALSE, 0w0)
      gtk_widget_show::f label
  
      opt    = gtk_option_menu_new::f()
      menu   = gtk_menu_new::f()
  
      item   = make_menu_item ("Continuous", cb_update_menu_select,
                                   GTK_UPDATE_CONTINUOUS)
      gtk_menu_append::f (menu, item)
  
      item   = make_menu_item ("Discontinuous", cb_update_menu_select,
                                   GTK_UPDATE_DISCONTINUOUS)
      gtk_menu_append::f (menu, item)
  
      item   = make_menu_item ("Delayed", cb_update_menu_select,
                                   GTK_UPDATE_DELAYED)
      gtk_menu_append::f (menu, item)
  
      gtk_option_menu_set_menu::f (opt, menu)
      gtk_box_pack_start::f (box2, opt, TRUE, TRUE, 0w0)
      gtk_widget_show::f opt
  
      gtk_box_pack_start::f (box1, box2, TRUE, TRUE, 0w0)
      gtk_widget_show::f box2

      box2   = gtk_hbox_new::f (FALSE, 10)
      gtk_container_set_border_width::f (box2, 0w10)
  
      /* An HScale widget for adjusting the number of digits on the
       * sample scales. */
      label  = gtk_label_new::f "Scale Digits:"
      gtk_box_pack_start::f (box2, label, FALSE, FALSE, 0w0)
      gtk_widget_show::f label

      adj2   = gtk_adjustment_new::f (1.0, 0.0, 5.0, 1.0, 1.0, 0.0)
      gtk_signal_connect::f (adj2, "value_changed", cb_digits_scale)
      scale  = gtk_hscale_new::f adj2
      gtk_scale_set_digits::f (scale, 0)
      gtk_box_pack_start::f (box2, scale, TRUE, TRUE, 0w0)
      gtk_widget_show::f scale

      gtk_box_pack_start::f (box1, box2, TRUE, TRUE, 0w0)
      gtk_widget_show::f box2
  
      box2   = gtk_hbox_new::f (FALSE, 10)
      gtk_container_set_border_width::f (box2, 0w10)
  
      /* And, one last HScale widget for adjusting the page size of the
       * scrollbar. */
      label  = gtk_label_new::f "Scrollbar Page Size:"
      gtk_box_pack_start::f (box2, label, FALSE, FALSE, 0w0)
      gtk_widget_show::f label

      adj2   = gtk_adjustment_new::f (1.0, 1.0, 101.0, 1.0, 1.0, 0.0)
      gtk_signal_connect::f (adj2, "value_changed",
                                        cb_page_size adj1)
      scale  = gtk_hscale_new::f adj2
      gtk_scale_set_digits::f (scale, 0)
      gtk_box_pack_start::f (box2, scale, TRUE, TRUE, 0w0)
      gtk_widget_show::f scale

      gtk_box_pack_start::f (box1, box2, TRUE, TRUE, 0w0)
      gtk_widget_show::f box2

      separator = gtk_hseparator_new::f ()
      gtk_box_pack_start::f (box1, separator, FALSE, TRUE, 0w0)
      gtk_widget_show::f separator

      box2   = gtk_vbox_new::f (FALSE, 10)
      gtk_container_set_border_width::f (box2, 0w10)
      gtk_box_pack_start::f (box1, box2, FALSE, TRUE, 0w0)
      gtk_widget_show::f box2

      button = gtk_button_new_with_label::f "Quit"
      gtk_signal_connect::f (button, "clicked", gtk_main_quit::f)
      gtk_box_pack_start::f (box2, button, TRUE, TRUE, 0w0)
      gtk_widget_set_flags (button, GTK_CAN_DEFAULT)
      gtk_widget_grab_default::f button
      gtk_widget_show::f button
  in  gtk_widget_show::f window
  end

in

  fun main (prog, argv) =
      (gtk_init::f (prog . argv);
       create_range_controls();
       gtk_main::f();
       0
      )
end
#  example-end 
