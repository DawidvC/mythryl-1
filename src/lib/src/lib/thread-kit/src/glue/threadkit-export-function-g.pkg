## threadkit-export-function-g.pkg

# Compiled by:
#     src/lib/std/stdlib.make6

# Invoked at compiletime by:
#     src/lib/thread-kit/src/glue/run-threadkit-g.pkg


							# Threadkit_Os_Glue	is from   src/lib/src/lib/thread-kit/src/unix/threadkit-os-glue.api
							# threadkit_os_glue	is from   src/lib/src/lib/thread-kit/src/unix/unix-threadkit-os-glue.pkg
generic package   threadkit_export_function_g  (

    threadkit_os_glue:  Threadkit_Os_Glue
)
: (weak)
api {

    poll_fate:   fate::Fate(  Void );
    pause_fate:  fate::Fate(  Void );

    Pair (X, Y)
        =
        PAIR  (X, Y);

    wrap_for_export
        :
	((((String, List( String ))) -> winix::process::Status),  Null_Or( time::Time ))
	  ->  Pair( String, List( String ) )
	  ->  winix::process::Status;

}
{
    package q     = threadkit_queue;				# threadkit_queue			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit-queue.pkg
    package sched = thread_scheduler;				# thread_scheduler			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg
    package cu    = threadkit_startup_and_shutdown_hooks;	# threadkit_startup_and_shutdown_hooks	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit-startup-and-shutdown-hooks.pkg

    package glue = threadkit_os_glue;


								# fate					is from   src/lib/std/src/nj/fate.pkg

    my poll_fate:  fate::Fate( Void )
        =
        fate::make_isolated_fate
	    (fn _
		=
		{   sched::disable_thread_switching ();
	            glue::poll_os ();
	            sched::reenable_thread_switching_and_dispatch_next_thread ();
                }
            );

    my pause_fate:  fate::Fate( Void )
	=
	fate::make_isolated_fate
	    (fn _
		=
		{   sched::disable_thread_switching();

		    # Poll OS to schedule any ready threads:
		    # 
		    glue::poll_os ();

		    # Check for ready threads or pause:
		    #
		    if (not (q::is_empty sched::foreground_ready_queue) or glue::pause())

			sched::reenable_thread_switching_and_dispatch_next_thread ();

		    else

			sched::reenable_thread_switching ();

			fate::resume_fate
			    *sched::shutdown_hook
			    (TRUE, winix::process::failure);
		    fi;
		}
	    );


    Pair (X, Y)
        =
        PAIR  ((X, Y));


    Cmdt = Pair( String, List (String) )
          ->
          winix::process::Status;


    my spawn_to_disk':  (String, Cmdt) -> Void
        =
	unsafe::c_interface::c_function
	    "Lib7-Runtime"
            "spawn_to_disk";


    fun wrap_for_export (f, tq) (PAIR args)
        =
        {   runtime_internals::initialize_signal_table ();		# runtime_internals	is from   src/lib/std/src/nj/runtime-internals.pkg
	    thread::reset TRUE;

	    glue::init();

	    sched::scheduler_hook := poll_fate;
	    sched::pause_hook     := pause_fate;

	    fun initial_proc ()
		=
		winix::process::exit
		    (   f args
			except
			    _ = winix::process::failure
		    );

	    my  (clean_up, status)
		=
		fate::call_with_current_fate
                    (
		     fn done_fate
			=
			{   sched::shutdown_hook
				:=
				done_fate;

			    case tq
				THE tq =>  sched::start_timer   tq;
				 _     =>  sched::restart_timer ();
			    esac;

			    cu::do_actions_for  cu::APP_STARTUP;

			    thread::make_thread  "export_function_g"  initial_proc;

			    thread::thread_done ();
			}
		    );

	    cu::do_actions_for  cu::SHUTDOWN;

	    glue::shutdown    ();
	    sched::stop_timer ();
	    thread::reset  FALSE;

	    status;
	};
};


## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1997 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
