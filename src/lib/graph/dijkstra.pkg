/*
 * This module implements the Dijkstra algorithm for computing
 * the single source shortest paths.
 *
 * -- Allen Leung
 */

# Compiled by:
#     src/lib/graph/graphs.make6



###         "What science strives for is an utmost acuteness and clarity of concepts
###          as regards their mutual relation and their correspondence to sensory data."
###
###                                                       -- Albert Einstein



generic package dijkstras_single_source_shortest_paths (num:  Abelian_Group_With_Infinity) 	# Abelian_Group_With_Infinity	is from   src/lib/graph/group.api
     : (weak) Single_Source_Shortest_Paths						# Single_Source_Shortest_Paths	is from   src/lib/graph/shortest-paths.api
{

   package num = num;
   package q   = node_priority_queue( rw_vector );
   package g= graph;									# graph				is from   src/lib/graph/graph.pkg
   package a= rw_vector;								# rw_vector			is from   src/lib/std/src/rw-vector.pkg

   fun single_source_shortest_paths { graph=>ggg' as g::GRAPH ggg, weight, s }
       =
       {   nnn   = ggg.capacity ();
	   dist  = a::make_rw_vector (nnn, num::inf);
	   prior = a::make_rw_vector (nnn, -1);
	   qqq   = q::from_graph (fn (i, j) => num::(<) (a::get (dist, i), a::get (dist, j)); end ) ggg';

	   fun relax (e as (u, v, _))
	       =
	       {   d_v = a::get (dist, v);
		   d_x = num::(+) (a::get (dist, u), weight e);

		   if  (num::(<) (d_x, d_v))

			a::set (dist, v, d_x);
			a::set (prior, v, u);
			q::decrease_weight (qqq, v);
		   fi;
	       };

	   a::set (dist, s, num::zero);
	   q::decrease_weight (qqq, s);

	   (for (TRUE)
	      apply relax (ggg.out_edges (q::delete_min qqq))
	   )
           except
               q::EMPTY_PRIORITY_QUEUE = ();

	   { dist,
	     prior
	   };
       };
        
};
