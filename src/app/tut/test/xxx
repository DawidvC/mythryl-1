# A totally trivial test program.
# See AN.OVERVIEW

# api Test {
#    My_Type;
#    two: Int;
# };

# package test: (weak) Test {
package test {

# package test:  Test {

    My_Type = Int;

    two = 2;
    six = 6;

};



eval:  make "test.make6";

typecheck_declaration': unparsing declaration raw syntax:
package test =
              stipulate 
                 herein package _ {
                      My_Type = Int;
                      my two = 2
                      my six = 6};
                end;

typecheck_declaration': prettyprinting declaration raw syntax:
PACKAGE_DECLARATIONS
[ NAMED_PACKAGE test = 
      LET_IN_PACKAGE[ 
      
               
           SEQUENTIAL_DECLARATIONS[ 
           ]SEQUENTIAL DECLARATIONS 
           
      ;LET_IN_PACKAGE 
          
           PACKAGE_DEFINITION[
               
                 
               SEQUENTIAL_DECLARATIONS[ SOURCE_CODE_REGION_FOR_DECLARATION <...> TYPE_DECLARATIONS [ NAMED_TYPE My_Type = TYPE_CONSTRUCTOR_TYPE Int; ]TYPE_DECLARATIONS 
                                        ;SEQUENTIAL_DECLARATIONS
                                        SOURCE_CODE_REGION_FOR_DECLARATION <...> 
                                        
                                        VALUE_DECLARATIONS    [ NAMED_VALUE[ 
                                                VARIABLE_IN_PATTERN two
                                             = (NAMED_VALUE)
                                                 PRE_FIXITY_EXPRESSION[ 
                                                    SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 2 ] 
                                                 ]PRE_FIXITY_EXPRESSION 
                                            ]NAMED_VALUE
                                        ]VALUE_DECLARATIONS 
                                        
                                        
                                        ;SEQUENTIAL_DECLARATIONS
                                        SOURCE_CODE_REGION_FOR_DECLARATION <...> 
                                        
                                        VALUE_DECLARATIONS    [ NAMED_VALUE[ 
                                                VARIABLE_IN_PATTERN six
                                             = (NAMED_VALUE)
                                                 PRE_FIXITY_EXPRESSION[ 
                                                    SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 6 ] 
                                                 ]PRE_FIXITY_EXPRESSION 
                                            ]NAMED_VALUE
                                        ]VALUE_DECLARATIONS 
                                        
                                        
               ]SEQUENTIAL DECLARATIONS 
           ]PACKAGE_DEFINITION
           
                
            ]LET_IN_PACKAGE ;
     ]PACKAGE_DECLARATIONS 
[[typecheck_named_packages
[[typecheck_named_packages
--typecheck_named_packages: package test
[[typecheck_named_packages: doing 'constraint' case

[[typecheck_named_packages[(NULL api constraint)]: not calling typecheck_api

[[typecheck_named_packages: DONE 'constraint' case

[[typecheck_package: test
[[typecheck_package'[LET_IN_PACKAGE]

typecheck_declaration': unparsing declaration raw syntax:


typecheck_declaration': prettyprinting declaration raw syntax:

SEQUENTIAL_DECLARATIONS[ 
]SEQUENTIAL DECLARATIONS 
[[typecheck_seq_declaration
typecheck_seq_declaration - symbols: 
      []
    ]]typecheck_seq_declaration
--typecheck_package'[LET_IN_PACKAGE]: local typecheck_declaration' done
[[typecheck_package'[PACKAGE_DEFINITION]

typecheck_declaration': unparsing declaration raw syntax:
My_Type = Int;
my two = 2
my six = 6

typecheck_declaration': prettyprinting declaration raw syntax:

SEQUENTIAL_DECLARATIONS[ SOURCE_CODE_REGION_FOR_DECLARATION <...> TYPE_DECLARATIONS [ NAMED_TYPE My_Type = TYPE_CONSTRUCTOR_TYPE Int; ]TYPE_DECLARATIONS 
                         ;SEQUENTIAL_DECLARATIONS
                         SOURCE_CODE_REGION_FOR_DECLARATION <...> 
                         
                         VALUE_DECLARATIONS    [ NAMED_VALUE[ 
                                 VARIABLE_IN_PATTERN two
                              = (NAMED_VALUE)
                                  PRE_FIXITY_EXPRESSION[ 
                                     SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 2 ] 
                                  ]PRE_FIXITY_EXPRESSION 
                             ]NAMED_VALUE
                         ]VALUE_DECLARATIONS 
                         
                         
                         ;SEQUENTIAL_DECLARATIONS
                         SOURCE_CODE_REGION_FOR_DECLARATION <...> 
                         
                         VALUE_DECLARATIONS    [ NAMED_VALUE[ 
                                 VARIABLE_IN_PATTERN six
                              = (NAMED_VALUE)
                                  PRE_FIXITY_EXPRESSION[ 
                                     SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 6 ] 
                                  ]PRE_FIXITY_EXPRESSION 
                             ]NAMED_VALUE
                         ]VALUE_DECLARATIONS 
                         
                         
]SEQUENTIAL DECLARATIONS 
[[typecheck_seq_declaration

typecheck_declaration': unparsing declaration raw syntax:
My_Type = Int;

typecheck_declaration': prettyprinting declaration raw syntax:
SOURCE_CODE_REGION_FOR_DECLARATION <...> TYPE_DECLARATIONS [ NAMED_TYPE My_Type = TYPE_CONSTRUCTOR_TYPE Int; ]TYPE_DECLARATIONS 

typecheck_declaration': unparsing declaration raw syntax:
My_Type = Int;

typecheck_declaration': prettyprinting declaration raw syntax:
TYPE_DECLARATIONS [ NAMED_TYPE My_Type = TYPE_CONSTRUCTOR_TYPE Int; ]TYPE_DECLARATIONS 

typecheck_declaration': unparsing declaration raw syntax:
my two = 2

typecheck_declaration': prettyprinting declaration raw syntax:
SOURCE_CODE_REGION_FOR_DECLARATION <...> 

VALUE_DECLARATIONS    [ NAMED_VALUE[ 
        VARIABLE_IN_PATTERN two
     = (NAMED_VALUE)
         PRE_FIXITY_EXPRESSION[ 
            SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 2 ] 
         ]PRE_FIXITY_EXPRESSION 
    ]NAMED_VALUE
]VALUE_DECLARATIONS 



typecheck_declaration': unparsing declaration raw syntax:
my two = 2

typecheck_declaration': prettyprinting declaration raw syntax:


VALUE_DECLARATIONS    [ NAMED_VALUE[ 
        VARIABLE_IN_PATTERN two
     = (NAMED_VALUE)
         PRE_FIXITY_EXPRESSION[ 
            SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 2 ] 
         ]PRE_FIXITY_EXPRESSION 
    ]NAMED_VALUE
]VALUE_DECLARATIONS 


[[typecheck_declaration'::declaration[after tcl::typecheck_declaration: top=TRUE
[[typecheck_declaration'::declaration[after transform]
[[typecheck_declaration'::declaration[after typecheck_module_declaration_type]

typecheck_declaration': unparsing declaration raw syntax:
my six = 6

typecheck_declaration': prettyprinting declaration raw syntax:
SOURCE_CODE_REGION_FOR_DECLARATION <...> 

VALUE_DECLARATIONS    [ NAMED_VALUE[ 
        VARIABLE_IN_PATTERN six
     = (NAMED_VALUE)
         PRE_FIXITY_EXPRESSION[ 
            SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 6 ] 
         ]PRE_FIXITY_EXPRESSION 
    ]NAMED_VALUE
]VALUE_DECLARATIONS 



typecheck_declaration': unparsing declaration raw syntax:
my six = 6

typecheck_declaration': prettyprinting declaration raw syntax:


VALUE_DECLARATIONS    [ NAMED_VALUE[ 
        VARIABLE_IN_PATTERN six
     = (NAMED_VALUE)
         PRE_FIXITY_EXPRESSION[ 
            SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 6 ] 
         ]PRE_FIXITY_EXPRESSION 
    ]NAMED_VALUE
]VALUE_DECLARATIONS 


[[typecheck_declaration'::declaration[after tcl::typecheck_declaration: top=TRUE
[[typecheck_declaration'::declaration[after transform]
[[typecheck_declaration'::declaration[after typecheck_module_declaration_type]
typecheck_seq_declaration - symbols: 
      [six, two, My_Type]
    ]]typecheck_seq_declaration
--typecheck[PACKAGE_DEFINITION]: typecheck_declaration' done
--typecheck_package'[PACKAGE_DEFINITION]: calling extract_symbol_table_contents...
--typecheck_package'[PACKAGE_DEFINITION]: extract_symbol_table_contents done
]]typecheck_package'[PACKAGE_DEFINITION]
]]typecheck_package'[LET_IN_PACKAGE]: typecheck body pkg done
]]typecheck_package
--typecheck_named_packages: typecheck_package done
unconstrained package: 
      A_PACKAGE
          an_api:
            BEGIN_API:
              stamp: #F3
              name: ANONYMOUS
              elements:
                six : int[GP;#S:int;YES];
                  two : int[GP;#S:int;YES];
                  test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                      module_stamp: #F2
                      scope: 0;;
          typechecked_package:
            Typechecked_Package:
              inverse_path: <test>
              stamp: #F4
              typechecker_dictionary:
                #F2:
                    test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                  
              lambdaty:
                <lambdaty>
    
--typecheck_named_packages: NOT calling typecheck_constrained_package
--typecheck_named_packages: now past typecheck_constrained_package call point.
--typecheck_named_packages: constrain done
--typecheck_named_packages: result_package: 
      A_PACKAGE
          an_api:
            BEGIN_API:
              stamp: #F3
              name: ANONYMOUS
              elements:
                six : int[GP;#S:int;YES];
                  two : int[GP;#S:int;YES];
                  test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                      module_stamp: #F2
                      scope: 0;;
          typechecked_package:
            Typechecked_Package:
              inverse_path: <test>
              stamp: #F4
              typechecker_dictionary:
                #F2:
                    test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                  
              lambdaty:
                <lambdaty>
    
--typecheck_named_packages: bound_package: 
      A_PACKAGE
          an_api:
            BEGIN_API:
              stamp: #F3
              name: ANONYMOUS
              elements:
                six : int[GP;#S:int;YES];
                  two : int[GP;#S:int;YES];
                  test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                      module_stamp: #F2
                      scope: 0;;
          typechecked_package:
            Typechecked_Package:
              inverse_path: <test>
              stamp: #F4
              typechecker_dictionary:
                #F2:
                    test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                  
              lambdaty:
                <lambdaty>
    
--typecheck_named_packages: bound_package: 
      A_PACKAGE
          an_api:
            BEGIN_API:
              stamp: #F3
              name: ANONYMOUS
              elements:
                six : int[GP;#S:int;YES];
                  two : int[GP;#S:int;YES];
                  test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                      module_stamp: #F2
                      scope: 0;;
          typechecked_package:
            Typechecked_Package:
              inverse_path: <test>
              stamp: #F4
              typechecker_dictionary:
                #F2:
                    test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                  
              lambdaty:
                <lambdaty>
    
]]typecheck_named_packages
          src/app/make7/main/make7-g.pkg:   New names added.

TRUE

eval:  
