/* ***************************************************************************
   The communication state (tightly coupled version -- tk_inside).
   Author: bu & behrends
   (C) 1998, ALU Freiburg
  ************************************************************************** */

package com_state:  Com_State {

  use basic_tk_types basic_utilities

  prelude_tcl = 
"proc Write { msg } {                     \n \
\  toSML $msg                           \n \
\}                                      \n \
\proc WriteSec { tag msg } {              \n \
\  set status [catch { eval $msg } res]   \n \
\  if {$status == 0 } {                  \n \
\    toSML  \"$tag $res\"               \n \
\  } else {                             \n \
\    toSML \"ERROR $res\"               \n \
\  }                                    \n \
\}                                      \n \
\proc WriteCmd { tag msg } {              \n \
\  set status [catch { eval $msg } res]   \n \
\  if {$status == 0 } {                  \n \
\   toSML \"$tag\"                      \n \
\  } else {                             \n \
\   toSML \"ERROR $res\"                \n \
\  }                                    \n \
\}                                      \n \
\proc WriteM { msg } {                    \n \
\  toSML $msg                           \n \
\  toSML \"EOM\"                        \n \
\}                                      \n "; 

  fun getEnv (ev: sys_conf::envVar) = 
      null_or::the (winix::process::getEnv ev.name)
      except null_or::NULL_OR=> ev.default

  /* As opposed to the loosely coupled version, the wish does not 
   * posses an input/output stream here, so we only keep a flag here which
   * indicates wether the eventloop should be running or not. 
   */

  COM_state	= REF
      { act= FALSE,
       tclProt = NULL:  null_or::Null_Or( file::Output_Stream ),
       logfile= winix::process::getEnv (sys_conf::logfile_var.name),
       wish=    getEnv (sys_conf::wishVar),
       tclInit= " set tcl_prompt1 \"puts -nonewline {} \" \n \
	        \ set tcl_prompt2 \"puts -nonewline {} \" \n ",
       libPath= getEnv (sys_conf::libVar),
       tclAnswers = []: List( Tcl_Answer )
      }

  fun wishActive() =  .act(*COM_state)
  fun updAct act =
      let my { tclProt, logfile, wish, tclInit, libPath, tclAnswers, ... } = *COM_state
      in  COM_state:= { act, tclProt, logfile, wish,
                       tclInit, libPath, tclAnswers } 
      end

  fun getWishProt() = .tclProt (*COM_state)

  fun getLogfilename () = .logfile(*COM_state)
  fun updLogfilename log =
      let my { act, tclProt, wish, tclInit, libPath, tclAnswers, ... } = *COM_state
      in  COM_state:= { act, tclProt, logfile=log, wish,
                       tclInit, libPath, tclAnswers } 
      end


  fun getWishPath () = .wish(*COM_state)
  fun updWishPath wp =
      let my { act, tclProt, logfile, tclInit, libPath, tclAnswers, ... } = *COM_state
      in  COM_state:= { act, tclProt, logfile, wish= wp,
                       tclInit, libPath, tclAnswers } 
      end

  fun getTclInit () = .tclInit(*COM_state)
  fun updTclInit ti =
      let my { act, tclProt, logfile, wish, libPath, tclAnswers, ... } = *COM_state
      in  COM_state:= { act, tclProt, logfile, wish,
                       tclInit= ti, libPath, tclAnswers } 
      end


  fun get_lib_path () = .libPath(*COM_state)
  fun update_lib_path rp =
      let my { act, tclProt, logfile, wish, tclInit, tclAnswers, ... } = *COM_state
      in  COM_state:= { act, tclProt, logfile, wish,
                       tclInit, libPath= rp, tclAnswers } 
      end

  fun getTclAnswersGUI ()    = .tclAnswers(*COM_state)
  fun updTclAnswersGUI nansw =
      let my { act, tclProt, logfile, wish, tclInit, libPath, tclAnswers } = *COM_state
      in  COM_state:= { act, tclProt, logfile, wish,
                       tclInit, libPath, tclAnswers=nansw } 
      end


/* get_event in the sense of com is a malconception in the sense
   it is used for both: reading values from the tcl-interpreterstate
   as well as "getting Events", i.e. waiting until they occur,
   and passing event-information to tk. The following 
   function attempts to mimick this double character */
  fun get_event ()  = 
      let ev = access::get_event()  #  read possible value . . . 
      in  case ev of
	  "\n"=> (access::do_one_event(); 
		  #  wait until event occurs, copy it to EventCmd-Buffer
		  access::get_event()
	          /* get it from there . . . */)
	| _   => ev
      end

  fun eval ps        = access::eval ps

  fun initWish()     = 
      (access::init(); updAct TRUE)

  fun closeWish()  = 
      (access::reset(); updAct FALSE)

  fun initComState() = 
     (access::reset();
      COM_state:= { act= FALSE, 
		   tclProt= NULL,
		   logfile=getLogfilename (),
		   wish= getWishPath(),
		   tclInit= getTclInit(),
		   libPath= get_lib_path(),
		   tclAnswers=[] } )



  
};




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
