## rw-vector.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

package rw_vector: (weak)  Rw_Vector {		# Rw_Vector		is from   src/lib/std/src/rw-vector.api

						# inline_t		is from   src/lib/core/init/built-in.pkg	

    Rw_Vector( X )   = primitive_types::Rw_Vector(  X );
       Vector( X )   = primitive_types::Vector(     X );

    # Fast add/subtract avoiding
    # the overflow test:
    #
    infix val  --- +++ ;
    #
    fun x --- y =  inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x - inline_t::unt31::copyf_int31 y);
    fun x +++ y =  inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x + inline_t::unt31::copyf_int31 y);

    max_len = core::max_length;

    my make_rw_vector:  (Int, X) -> Rw_Vector( X )
                     =  inline_t::poly_rw_vector::array;

#    fun make_rw_vector (0, _) => inline_t::poly_rw_vector::newArray0()
#
#        make_rw_vector (n, init)
#	    => 
#	    if inline_t::DfltInt::ltu (maxLen, n) then
#		raise exception core::SIZE ;
#	    else
#		assembly::a::rw_vector (n, init);
#	    fi;
#    end;

    fun from_list []
            =>
            inline_t::poly_rw_vector::new_array0();

        from_list (l as (first ! rest))
	    => 
	    fill (1, rest)
            where
	        fun len (_ ! _ ! r, i) =>  len (r, i +++ 2);
		    len([x],         i) =>  i +++ 1;
		    len([],          i) =>  i;
                end;

		n = len (l, 0);
		a = make_rw_vector (n, first);

		fun fill (i, [])
                        =>
                        a;

		    fill (i, x ! r)
                        => 
		        {   inline_t::poly_rw_vector::set (a, i, x);
                            fill (i +++ 1, r);
                        };
                end;
	    end;
        end;

    fun tabulate (0, _)
            =>
            inline_t::poly_rw_vector::new_array0();

	tabulate (n, f:  Int -> X) : Rw_Vector( X )
            => 
	    tab 1
            where
	        a =  make_rw_vector (n, f 0);

		fun tab i
                    = 
		    if   (i < n)
                        
                         inline_t::poly_rw_vector::set (a, i, f i);
			 tab (i +++ 1);
		    else
                         a;
                    fi;
	    end;
    end;


    my length:   Rw_Vector( X ) -> Int             = inline_t::poly_rw_vector::length;

    # Note:  The (_[])   enables   'vec[index]'           notation;
    #        The (_[]:=) enables   'vec[index] := value'  notation;

    my get:     (Rw_Vector( X ), Int) -> X         = inline_t::poly_rw_vector::check_sub;
    my (_[]):   (Rw_Vector( X ), Int) -> X         = inline_t::poly_rw_vector::check_sub;

    my set:     (Rw_Vector( X ), Int, X) -> Void   = inline_t::poly_rw_vector::check_set;
    my (_[]:=): (Rw_Vector( X ), Int, X) -> Void   = inline_t::poly_rw_vector::check_set;

    unsafe_get    =  inline_t::poly_rw_vector::get;
    unsafe_set    =  inline_t::poly_rw_vector::set;

    ro_unsafe_get =  inline_t::poly_vector::get;
    ro_length     =  inline_t::poly_vector::length;


    fun copy { from, to, di }
	=
	{
	    sl =  length from;
	    de =  sl + di;

	    fun copy_dn (s,  d)
		=
		if   (s >= 0)
		    
		     unsafe_set (to, d, unsafe_get (from, s));
		     copy_dn (s --- 1, d --- 1);
		fi;

	    if   (di < 0   or   de  >  length to)
	        
		 raise exception SUBSCRIPT;
	    else
		 copy_dn (sl --- 1, de --- 1);
	    fi;
	};

    fun copy_vec { from, to, di }
	=
	{   sl = ro_length from;
	    de = sl + di;

	    fun copy_dn (s, d)
                =
		if   (s >= 0)
                    
                     unsafe_set (to, d, ro_unsafe_get (from, s));
		     copy_dn (s --- 1, d --- 1);
                fi;

	    if   (di < 0   or   de  >  length to)
		#                
                raise exception SUBSCRIPT;
	    else
                copy_dn (sl --- 1, de --- 1);
            fi;
	};

    fun keyed_apply f arr
	=
	apply 0
	where
	    len =  length arr;

	    fun apply i
		=
		if   (i < len)
		    
		     f (i, unsafe_get (arr, i));
		     apply (i +++ 1);
		fi;
	end;

    fun apply f arr
	=
	apply 0
	where
	    len =  length arr;

	    fun apply i
		=
		if   (i < len)
		     
		     f (unsafe_get (arr, i));
		     apply (i +++ 1);
		fi;
	end;

    fun modifyi f arr
	=
	mdf 0
	where
	    len = length arr;

	    fun mdf i
                =
		if   (i < len)
                    
                     unsafe_set (arr, i, f (i, unsafe_get (arr, i)));
                     mdf (i +++ 1);
		fi;

	end;

    fun modify f arr
	=
	mdf 0
	where
	    len =  length arr;

	    fun mdf i
                =
		if   (i < len)
                    
                     unsafe_set (arr, i, f (unsafe_get (arr, i)));
                     mdf (i +++ 1);
		fi;
	end;

    fun keyed_fold_left f init arr
	=
	fold (0, init)
	where
	    len =  length arr;

	    fun fold (i, a)
                =
		if   (i < len)
                    
                     fold (i +++ 1, f (i, unsafe_get (arr, i), a));
                else
                     a;
                fi;
	end;

    fun fold_left f init arr
	=
	fold (0, init)
	where
	      len =  length arr;

	      fun fold (i, a)
                  =
		  if   (i < len)
                      
                       fold (i +++ 1, f (unsafe_get (arr, i), a));
                  else
                       a;
                  fi;
	end;

    fun keyed_fold_right f init arr
	=
	fold (length arr --- 1, init)
	where
	    fun fold (i, a)
		=
		if   (i < 0)
		    
		     a;
		else
		     fold (i --- 1, f (i, unsafe_get (arr, i), a));
		fi;
	end;

    fun fold_right f init arr
	=
	fold (length arr --- 1, init)
	where
	    fun fold (i, a)
                =
		if   (i < 0)
                    
                     a;
                else
                     fold (i --- 1, f (unsafe_get (arr, i), a));
                fi;
	end;

    fun findi p arr
	=
	fnd 0
	where
	    len =  length arr;

	    fun fnd i
                =
		if   (i >= len)
                    
                     NULL;
		else
                     x = unsafe_get (arr, i);

		     if   (p (i, x))
                         
                          THE (i, x);
                     else
                          fnd (i +++ 1);
                     fi;
		fi;
	end;

    fun find p arr
	=
	fnd 0
	where
	    len =  length arr;

	    fun fnd i
                = 
		if   (i >= len)
                    
                     NULL;
		else
                     x = unsafe_get (arr, i);

		     if   (p x)
                         
                          THE x;
                     else
                          fnd (i +++ 1);
                     fi;
		fi;

	end;

    fun exists p arr
	=
	ex 0
	where
	    len =  length arr;

	    fun ex i
                =
                i < len   and
                (p (unsafe_get (arr, i))  or  ex (i +++ 1));
	end;

    fun all p arr
	=
	al 0
	where
	    len = length arr;

	    fun al i
                =
                i >= len   or
                (p (unsafe_get (arr, i))  and  al (i +++ 1));
	end;

    fun collate c (a1, a2)
	=
	coll 0
	where
	    l1 =  length a1;
	    l2 =  length a2;

	    l12 =  inline_t::int31::min (l1, l2);

	    fun coll i
                =
		if   (i >= l12)
                    
                     int_guts::compare (l1, l2);
		else
                     case (c (unsafe_get (a1, i), unsafe_get (a2, i)))
                       
			  EQUAL   =>  coll (i +++ 1);
			  unequal =>  unequal;
                     esac;
                fi;

	end;


    # XXX BUGGO FIXME: this is inefficient (going through intermediate list):
    # 
    fun to_vector arr
        =
	case (length arr)
	      0   =>  assembly::vector0;
	      len =>  assembly::a::create_v (len, fold_right (!) [] arr);
        esac;

};	#  package rw_vector 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
