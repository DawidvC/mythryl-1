## mailcaster.pkg

# Compiled by:
#     src/lib/std/stdlib.make6

# Asynchronous multicast (one-to-many) mail distribution.
# This implementation is based on a condition variable
# implementation of multicast channels.
# See Chapter 5 of "Concurrent Programming in ML" for details.



###                 "The horns came riding in like the
###                  rainbow masts of silver ships."
###
###                          -- Peter S. Beagle, "The Last Unicorn"



package mailcaster: (weak)  Mailcaster {			# Mailcaster		is from   src/lib/thread-kit/threadkit-lib/mailcaster.api

    package md1 = oneshot_maildrop;				# oneshot_maildrop	is from   src/lib/thread-kit/src/core-thread-kit/oneshot-maildrop.pkg
    package md  = maildrop;					# maildrop		is from   src/lib/thread-kit/src/core-thread-kit/maildrop.pkg
    package ms  = mailslot;					# mailslot		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/mailslot.pkg
    package td  = thread;					# thread		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/thread.pkg

    (==>) =  mailop::(==>);

    give  =  ms::give;
    take  =  ms::take;
    take' =  ms::take';

    Mailop(X)
	=
	mailop::Mailop(X);

    Mailcaster(X)
	=
	MAILCASTER
          ( ms::Mailslot( Request(   X ) ),
            ms::Mailslot( Readqueue( X ) )
          )

    also
    Readqueue(X)
      =
      READQUEUE
        ( ms::Mailslot ((X, md1::Oneshot_Maildrop( Mc_State(X)))),
          md::Maildrop (md1::Oneshot_Maildrop( Mc_State(X)))
        )

    also
    Request(X)
      = MESSAGE(X)
      | NEW_QUEUE

    also
    Mc_State(X)
	=
	MCSTATE( (X, md1::Oneshot_Maildrop( Mc_State(X))) );

    # Internal make-readqueue function.
    # This is not externally visible:
    #
    fun internal_make_readqueue reply_1shot
        =
        {   out_ch         =   ms::make_mailslot ();
	    state_maildrop =   md::make_full_maildrop reply_1shot;

	    fun tee reply_1shot
		=
		{   my (MCSTATE (v, next_cv))
			=
			md1::get reply_1shot;

		    give (out_ch, (v, next_cv));
		    tee next_cv;
		};

	      td::make_thread
		  #
                  "mailcaster internal_make_readqueue"
		  #
                  .{ tee reply_1shot; };

	      READQUEUE (out_ch, state_maildrop);
	};

    fun make_mailcaster ()
        =
        {   plea_slot =  ms::make_mailslot ();
	    reply_slot   =  ms::make_mailslot ();

	    fun server cv
                =
                case (take plea_slot)
		  
		    NEW_QUEUE => {
			give (reply_slot, internal_make_readqueue  cv);
			server cv;
                    };

		    MESSAGE m => {
			next_cv = md1::make_oneshot_maildrop ();

			  md1::set (cv, MCSTATE (m, next_cv));
			  server next_cv;
		    };
                esac;

	      td::make_thread  "mailcaster"  .{ server (md1::make_oneshot_maildrop ()); };

	      MAILCASTER (plea_slot, reply_slot);
          };

    fun make_readqueue (MAILCASTER (plea_slot, reply_slot))
        =
        {   give (plea_slot, NEW_QUEUE);
            take reply_slot;
        };

    fun transmit (MAILCASTER (slot, _), m)
        =
        give (slot, MESSAGE m);

    fun clone_readqueue (READQUEUE(_, state_maildrop))
        =
        internal_make_readqueue (md::peek state_maildrop);

    fun get_msg state_maildrop (v, next_cv)
        =
        {   md::swap (state_maildrop, next_cv);
            v;
        };

    fun receive (READQUEUE (slot, state_maildrop))
        =
        get_msg state_maildrop (take slot);

    fun receive' (READQUEUE (slot, state_maildrop))
        =
        take'  slot
            ==>
            get_msg  state_maildrop;

};						# package mailcaster



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
