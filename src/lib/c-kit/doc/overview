c-kit: A front end for C in Mythryl.
------------------------------------

1. Getting Started
------------------

On unpacking the ckit sources, you should see a src directory, a doc directory
and a README file (and possibly other directories, depending on the distribution).

The src directory contains the following subdirectories:

 parser:   lexer and parser, parse trees.
 ast:      abstract syntax trees (RawSyntaxTree), type-checker, pretty-printer.
 variants: flags for controlling the parser and type-checker. 
 
To build the system, cd to src, run bin/mythryld and type 

- make7::.make ();

To test the parser on "test.c", type 

- parse_to_raw_syntax_tree::file_to_raw_syntax_tree "test.c";

This parses and typechecks "test.c" and returns an abstract syntax tree for
"test.c".  Alternatively, to parse, type-check and then pretty-print "test.c",
type  

- parse_to_raw_syntax_tree::file_to_c "test.c";


2. USING THE FRONTEND
---------------------

The following describes some commonly used c-kit functions.

2.1: parse_to_raw_syntax_tree::file_to_raw_syntax_tree: string -> parse_to_raw_syntax_tree::astBundle
   
This is the main function to parse a file and produce abstract syntax.
When applied to a string (file name), it produces a bundle of information of
type Ast_Bundle:
   
Ast_Bundle
    =
    { ast:            raw_syntax_tree::Ast,
      tidtab:         namings::Tid_Naming tidtab::Uidtab,
      error_count:    Int,
      warning_count:  Int,
      auxiliary_info: { ast_types: tables::Ast_Index_Tab,
	                implicits: tables::Ast_Index_Tab,
                        env:       state::Symtab}}

where:
 ast is the abstract syntax tree.
 tidtab is the type identifier table that maps type identifiers into their meanings.
 error_count is the count of all errors encountered during parsing and type checking.
 warning_count is the count of all warnings encountered during parsing and type checking.
 ast_types is a table mapping ast indexes into the types of the corresponding ast expressions.
 env is used to carry over global symbol information in some mult-file parsing applications.

2.2 parse_to_raw_syntax_tree::file_to_c

2.3 parser::parse_file
  parse_file: String -> (List( parse_tree::External_Decl ), error::error_stream)

2.4 error_stream
 -- not used for much
 -- contains count of warnings and errors

Top level driving functions are in file parse-to-ast.pkg.  Generally
use parse_to_raw_syntax_tree::file_to_raw_syntax_tree.  It returns a
record of type build_raw_syntax_tree::Program_Info.

Example:

    parse_to_raw_syntax_tree::file_to_raw_syntax_tree "file"
        ->
        { aidtab   :  tables::Aidtab,
	  opaidtab :  tables::Aidtab,
	  env      :  state::Symtab,
          ast : { ast: raw_syntax_tree::Ast,
	          tidtab: namings::tid_naming tidtab::Uidtab,
	          errstrm: error::error_stream},
        };
       

raw_syntax_tree::ast is the abstract syntax type for translation units
(a list of top-level C declarations).  For further information, read the code.

To get a hold of parse trees (parser/parse-tree.pkg), which is the raw data
structure produced by the parser:

  my (parse_tree, error_stream) = parser::parse_file "file";

See parse/util/error.pkg for the definition of the Error_Stream type.



3. SYSTEM STRUCTURE
-------------------

The frontend consists of a number of phases.
The first phase consists of a lexer/parser (written using mythryl-lex and mythryl-yacc
respectively).  The output of this phase is a data-structure (parse tree)
that is a simple "unprocessed" form that closely follows the structure of C's
grammar.   The next phase reads the parse tree data-structure, typechecks it,
and produces a "processed" abstract syntax tree representation (raw_syntax_tree).

3.1 THE LEXER AND PARSER

These are built using mythryl-lex and mythryl-yacc.  The lex and yacc files can be found
in src/parser/grammar/[c.lex,c.grm].  The parser performs only a minimal amount
of syntactic processing.  Many syntactic restrictions are enforced during the
type-checking phase e.g restrictions on the number and combination of type
specifiers used in a type.

Similarly, most scoping issues are addressed during type-checking. 
One exception is typedef.  This must be handled during parsing because typedefs
introduce new types and these can dramatically alter the shape of parse trees.
In principle, the scoping of typedefs could be delayed till later processing,
but in practice this is not feasible: in particular, if typedefs are not
processed during parsing, then we cannot distinguish between 
declaration forms and expressions.  Consider, the following program.

char x;
f() {
  typedef int x;
  {
    x * x;
  }
}

Here, "x * x" declares x as a pointer to an integer.
However, if the typedef is commented out, then
"x * x" is interpreted as an expression.

The treatment of typedefs involves a subtle interaction between the parser and
lexer.  When the parser recognizes a typedef for an identifier, it communicates
to the lexer that the identifier should now be treated as a "type".
Parser lookahead introduces additional complication: we cannot lex a token until
any preceding typedefs have been processed.  In particular, we must limit
lookahead to one symbol.  In fact, this only works because C's grammar requires 
typedefs to end in a semicolon --- this semicolon acts as a buffer so that a
typedef will be completely processed before any use of the new type is lexed.
Note that typedefs can be scoped (e.g. see the above program), and so the parser
must tell the lexer to undo the effect of a typedef when the typedef's scope is
exited.  Another complication is the error recovery mechanism of mythryl-yacc.

The parser produces parse trees (see src/parser/parse-tree.api).
This data structure is a simple "unprocessed" form that closely follows the
structure of C's grammar.  These parse trees are built up by the actions of the
mythryl-yacc grammar.

Any language extension is likely to involve extensions to the lexer, parser and
to the parse tree datatype.  When extending the lexer and parser, care must be taken to
preserve the interaction between the lexer, the parser, and the use of one-token
lookahead.  Extensions to the parse tree datatype are supported via a collection
of "Ext" constructors in the parse tree datatypes.  The file
extensions/c/parse-tree-ext.pkg contains the default "empty extension" for
standard C.  

Files: 
  parser/parser-tree-sig.sml, parser-tree.sml:  Definition of parse tree types
  parser/grammar/c.lex, c.grm:                  Lex and yacc specifications
  parser/util/sourcemap.api, sourcemap.pkg:     Mapping source file locations
  parser/util/error.api, error.pkg:             Error reporting functions


3.2 ABSTRACT SYNTAX TREES (AST'S) AND BUILD-AST

build_raw_syntax_tree (src/ast/build-ast.pkg) consumes parse trees and builds up abstract
syntax trees (Raw_Syntax_Tree s) while performing type checking.  Raw_Syntax_Tree s (src/ast/ast.pkg)
are defined so that each of the major syntactic categories (statements,
expressions, and declarations) have a unique integer index associated with them.
These indices are used to associate information with specific parts of the
code.  Care must be taken to preserve their uniqueness when performing code
transformations.  

Chunks (global variables, local variables, functions, etc) and struct/union
fields are assigned globally unique integers called program identifiers
(pids). This simplifies treatment of scope in Raw_Syntax_Tree.  Similarly,
types introduced by structs, unions, enums and typedefs are assigned globally
unique integers called type identifiers (tids).
 
build_raw_syntax_tree performs the following tasks:

  1. Scoping: scoping of variables, structs, unions, fields and enums 
     is resolved.

  2. Type Checking: Full ANSI C type checking is performed, and appropriate
     errors and warnings are generated.  Errors and warnings are suppressed
     in the case where there are parse errors.  The behaviour of the type
     checker can be customized using a collection of flags in 
     the type_check_control structure defined in src/variants/ansi-c/config.pkg.
     build_raw_syntax_tree incrementally constructs a mapping between expression indices and
     types that records the type of each expression. 
     
  3. Type Sizes And Memory Layout: build_raw_syntax_tree computes the sizes of the chunks
     declared in the program.  It also optionally reduces sizeof expressions to
     integer constants (the flag build_raw_syntax_tree::reduce_sizeof can be used to enable
     this feature; the default setting does not reduce sizeof constructs).
     build_raw_syntax_tree also computes the layout and alignment properties of
     all chunks, including the offsets for fields of structs.
     Type size and memory layout is architecture and compiler specific.
     The behaviour of this aspect of build_raw_syntax_tree is specified in 
     Sizes structure defined in src/variants/ansi-c/config.pkg.

  4. Initializer Normalization: The meaning of an chunk initializer is partly
     determined by the type of the chunk being initialized.  build_raw_syntax_tree
     normalizes initializers so that they are easier to implement.
     Moreover, certain aspects of the type of an chunk are inferred from 
     an initializer (e.g. int x[] = {1,2,3}). 

Files:

  ast/ast.api, ast.pkg: definition of abstract syntax datatypes.
  ast/build-ast.pkg: translation from parse trees to abstract syntax, with type checking and other
                     static semantics processing.
  extensions/
    c/  -- dummy extension structures for C
variants/
  ansi-c/
    config.pkg: various flags controlling error checking, type checking, etc.

3.3 PRETTY PRINTER FOR AST
    raw_syntax_tree comes equipped with a pretty-printer (ast/prettyprint/pp-ast.api).
    Not only is this useful for debugging purposes, but it also is an integral
    component of source-to-source applications of the frontend.  
    When pretty printing Raw_Syntax_Tree, pids and tids can be optionally printed.
    The following flags control this behavior:
        
     pplib::suppress_pid_underscores:        controls printing of pids
     pplib::suppress_pid_global_underscores: controls printing of pids for global chunks
     pplib::suppress_tid_underscores:        controls printing of tids.

Files:
    prettyprint/pp-ast-fn.pkg:        the generic pretty printing code for ast.
    prettyprint/pp-ast.api:           pretty printing signature.
    prettyprint/pp-ast.pkg:           default pretty printer
    prettyprint/pp-ast-adornment.sml: pretty printer for printing ast interspersed with adornment info.
    prettyprint/pp-lib.pkg:           pretty printing for identifiers; some pretty printing combinators.
  

3.4 AST-UTILS [Not distributed yet]

Files:
   ast-utils/copy/: copying ast types
   ast-utils/equality/: equality for ast types
   ast-utils/simplifier/: ast simplifier


5. LOCATION INFO
----------------
