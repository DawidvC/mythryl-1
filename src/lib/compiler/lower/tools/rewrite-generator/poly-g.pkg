


###                  "So each of these breakthroughs,
###                   while sometimes they're momentary,
###                   sometimes over a period of a day or two,
###                   they are the culmination of - and
###                   couldn't exist without - the many months
###                   of stumbling around in the dark that precede them."
###
###                                        -- Andrew Wiles 



generic package PolyGen
   (package RawSyntaxTreePP:     MDL_AST_PRETTY_PRINTER
    package RawSyntaxTreeTrans:  MDL_AST_TRANSLATION
       sharing RawSyntaxTreePP::raw_syntax = RawSyntaxTreeTrans::raw_syntax
   ) : POLY_GEN =
pkg
   package raw_syntax = RawSyntaxTreePP::raw_syntax
   package a   = raw_syntax
   package t   = RawSyntaxTreeTrans
   package h   = hash_table

   fun bug msg = lowcode_error_message::error("PolyGen", msg)
   exception PolyGen
   fun error msg = (mdl_error::error msg; raise exception PolyGen)
 
   enum hook =
      HOOK of 
      { name:    String,      #  name of function 
        factor:  Bool,        #  factor rules by constructor? 
        args:    List( String ), #  function arguments 
        ret:     String,      #  return argument name 
        unit:    raw_syntax::expression -> raw_syntax::expression,
        gen:     (raw_syntax::aType * raw_syntax::expression -> raw_syntax::expression) * raw_syntax::consbind -> raw_syntax::expression
      }  

   fun id_fn id = a::IDexp (a::IDENT([], id))
   argExpression = id_fn "arg"
   argPattern = a::IDpat "arg"

   fun gen (HOOK { name, args, ret, unit, factor, gen, ... } ) isNonTerm ruleSet =
   let redex = id_fn (hd args) #  the redex must be the first argument 


       # Given a type, returns the appropriate function that performs the  
       # transformation

       nullTrans = a::LAMBDAexp[a::CLAUSE([argPattern], NULL, argExpression)]
       fun aType2Expression (a::IDty (a::IDENT(_, id))) = 
              if isNonTerm id then THE (id_fn (name$"'"$id)) else NULL
         | aType2Expression (a::APPty (a::IDENT(_, id), args)) =
              if isNonTerm id then 
                 let args = map aType2Expression args
                 in  if list::exists null_or::not_null args then
                       THE (a::APPLY_EXPRESSION (id_fn (name$"'"$id),
                         a::TUPLEexp (map (fn THE f => f | NULL => nullTrans)
                                    args)))
                     else NULL 
                 end
              else NULL
         | aType2Expression (a::TUPLEty tys) = #  Create a functional 
              let args = map aType2Expression tys
                  fun bind ([], i, pats, exps, some) = (reverse pats, reverse exps, some)
                    | bind (arg . args, i, pats, exps, some) = 
                      let v = "v_"$int::to_string i
                          pattern = a::IDpat v
                          expression = id_fn v
                          my (expression, some) = 
                             case arg of NULL => (expression, some)
                                       | THE f => (a::APPLY_EXPRESSION (f, expression), TRUE)
                      in  bind (args, i+1, pattern . pats, expression . exps, some) end
                  my (pats, exps, some) = bind (args, 0, [], [], FALSE)
              in  if some then
                     THE (a::LAMBDAexp[a::CLAUSE([a::TUPLEpat pats], NULL,
                                                a::TUPLEexp exps)])
                  else NULL
              end
         | aType2Expression (a::RECORDty ltys) = 
              let args = map (fn (l, t) => (l, aType2Expression t)) ltys
                  fun bind ([], i, pats, exps, some) = (reverse pats, reverse exps, some)
                    | bind((l, arg) . args, i, pats, exps, some) = 
                      let pattern = (l, a::IDpat l)
                          expression = id_fn l
                          my (expression, some) = 
                             case arg of NULL => (expression, some)
                                       | THE f => (a::APPLY_EXPRESSION (f, expression), TRUE)
                      in  bind (args, i+1, pattern . pats, (l, expression) . exps, some)
                      end
                  my (pats, exps, some) = bind (args, 0, [], [], FALSE)
              in  if some then
                     THE (a::LAMBDAexp[a::CLAUSE([a::RECORD_PATTERN (pats, FALSE)], NULL,
                                                a::RECORD_EXPRESSION exps)])
                  else NULL
              end
         | aType2Expression (a::TYVARty (a::VARtv id)) = THE (id_fn("parameter"$id))
         | aType2Expression t = error("Can't handle type "$pp::text (RawSyntaxTreePP::type t))

       fun genOneRule (a::DATATYPEbind { id, type_variables, cbs, ... }, rules) =  
       let prefix = []
           subTerm = REF FALSE
           fun applyTrans (type, e) =
               case aType2Expression type of 
                 NULL => unit e
               | THE f => (subTerm := TRUE; a::APPLY_EXPRESSION (f, e))

           #  Arguments for this function 
           #  How to generate the walk of one constructor 
           fun genNonFactoredWalk (cons)
               =
	       let                                                                  
                   subTerm := FALSE
		   expression = gen (applyTrans, cons)
		   expression = if *subTerm then expression else unit redex
		   fun mapPattern { origName, newName, type } = a::IDpat newName
	       in
                   t::mapConsToClause { prefix=prefix, pattern=fn p => p, expression=exp } cons
	       end

           exception Can'tFactor

           #  How to generate the walk of one constructor 
           fun genFactoredWalk (cons as a::CONSbind { id, type, ... }, rules)  =
           let subTerm := FALSE
               my resultExpression as a::CONSexp(_, caseExpression) = gen (applyTrans, cons)
               caseExpression = case caseExpression of THE e => e
                                           | NULL => a::TUPLEexp []
               body =
                   case (rules, *subTerm) of  
                     ([], FALSE) => redex
                   | ([], TRUE) => resultExpression
                   | (_, _) =>
                     a::CASE_EXPRESSION
                      (caseExpression, 
                       rules @
                       [a::CLAUSE([argPattern], NULL,
                           case type of 
                             THE _ => a::CONSexp (a::IDENT([], id), THE argExpression)
                           | NULL => redex
                         ) 
                       ]
                      )
               fun mapPattern { origName, newName, type } = a::IDpat newName
           in  t::mapConsToClause { prefix=prefix, pattern=fn p => p, expression=body } cons
           end

           #  first factor all rules by their top level constructors 
           fun factorRules (rules) = 
           let exception Bad  
               table = h::make_table (hash_string::hash_string, op=)(32, Can'tFactor)   
               apply (fn a::CONSbind { id, ... } => h::set table (id,[]))
                               cbs
               fun factor (r, a::CONSpat (a::IDENT([], id), arg), g, e) =
                   enterRule (r, id, arg, g, e)
                 | factor (r, a::IDpat id, g, e) =
                   enterRule (r, id, NULL, g, e)
                 | factor (r, a::ASpat(_, p), g, e) = factor (r, p, g, e)
                 | factor _ = raise exception Can'tFactor
               and factorRule (r as a::CLAUSE([p], g, e)) = factor (r, p, g, e)
                 | factorRule _ = raise exception Can'tFactor
               and enterRule (r, consName, arg, g, e) =
                  let rs = h::lookup table consName
                      r  = a::CLAUSE([case arg of NULL => a::WILDCARD_PATTERN
                                                   | THE p => p], g, e)  
                  in  h::set table (consName, r . rs)
                  end 
               apply factorRule rules
    
           in  map (fn c as a::CONSbind { id, ... } => (c, reverse (h::lookup table id))) cbs
           end

           fun factoredBody rules =
                a::CASE_EXPRESSION (redex, map genFactoredWalk (factorRules rules))
           fun nonfactoredBody rules =
                a::LET_EXPRESSION([a::VALdecl[a::NAMED_VARIABLE (a::IDpat ret, 
                          a::CASE_EXPRESSION (redex, map genNonFactoredWalk cbs))]],
                         [a::CASE_EXPRESSION (a::TUPLEexp (map id_fn args), rules)]
                        )

           body = 
               if factor then (factoredBody rules except Can'tFactor =>
                               nonfactoredBody rules)
               else nonfactoredBody rules
           fun curriedArg (a::VARtv id) = a::IDpat("parameter"$id)
             | curriedArg _ = bug "curriedArg"
           args = [a::TUPLEpat (map a::IDpat args)] 
           args = case type_variables of
                        []  => args
                      | vs  => a::TUPLEpat (map curriedArg vs) . args
       in  a::FUNbind (name$"'"$id,[a::CLAUSE (args, NULL, body)]) 
       end
         | genOneRule _ = bug "genOneRule"
   in  a::FUNdecl (map genOneRule ruleSet)
   end
end
