## reconstruct.pkg 

# Compiled by:
#     src/lib/compiler/debugging-and-profiling/debugprof.make6



###            "1545 Relay #70 Panel F (moth) in relay.
###             First actual case of bug being found."
###
###                    -- Harvard Mark II logbook, 1947



package reconstruct
: (weak)
api {
    expression_type
        :
        deep_syntax::Deep_Expression
        ->
        types::Type;
}
{
    package tu= type_stuff;	# type_stuff	is from   src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg

    include  deep_syntax;
    include  variables_and_constructors;
    include  types;
    include  core_type_types;
    include  type_stuff;

    fun bug msg
        =
        error_message::impossible("Reconstruct: " + msg);

    infix val  --> ;

    fun reduce_type (TYPE_SCHEME_TYPE { type_scheme => TYPE_SCHEME { body, arity }, ... } )
            =>
            head_reduce_type body;

        reduce_type type
            =>
            head_reduce_type type;
    end;

    fun expression_type (VARIABLE_IN_EXPRESSION (REF (ORDINARY_VARIABLE { var_type => REF type, ... } ), insttys))
	    =>
	    case type
		    TYPE_SCHEME_TYPE { type_scheme, ... } => tu::apply_type_scheme (type_scheme, insttys);
		   _ => type;
            esac;

	expression_type (VARIABLE_IN_EXPRESSION _)
	    =>
	    bug "varexp";

	expression_type (CONSTRUCTOR_EXPRESSION (ENUM_CONSTRUCTOR { constructor_type, ... }, insttys))
	    =>
	    case constructor_type
		 TYPE_SCHEME_TYPE { type_scheme, ... } =>  tu::apply_type_scheme (type_scheme, insttys);
		 _                                     =>  constructor_type;
	    esac;

	expression_type (INT_CONSTANT_IN_EXPRESSION (_, t)) =>  t;
	expression_type (UNT_CONSTANT_IN_EXPRESSION (_, t)) =>  t;
	expression_type (STRING_CONSTANT_IN_EXPRESSION _)   =>  string_type;
	expression_type (CHAR_CONSTANT_IN_EXPRESSION _)     =>  char_type;
	expression_type (FLOAT_CONSTANT_IN_EXPRESSION _)    =>  real_type;

	expression_type (RECORD_EXPRESSION fields)
	    =>
	    {   fun extract (NUMBERED_LABEL { name, ... }, expression)
		    =
		    (name, expression_type expression);

		record_type (map extract (sort_fields fields));
	    };

	expression_type (VECTOR_EXPRESSION (NIL, vty))      =>  CONSTRUCTOR_TYPE (vector_tycon,[vty]);
	expression_type (VECTOR_EXPRESSION((a ! _), vty))   =>  CONSTRUCTOR_TYPE (vector_tycon,[vty]);
	expression_type (PACK_EXPRESSION (e, t, _))         =>  t;
	expression_type (SEQUENTIAL_EXPRESSIONS [a])        =>  expression_type a;
	expression_type (SEQUENTIAL_EXPRESSIONS (_ ! rest)) =>  expression_type (SEQUENTIAL_EXPRESSIONS rest);

	expression_type (APPLY_EXPRESSION (operator, operand))
            =>
	    case (reduce_type (expression_type operator))

		 CONSTRUCTOR_TYPE(_,[_, t]) =>  t;

		 TYPE_SCHEME_TYPE _         =>  bug "poly-operator";
		 WILDCARD_TYPE              =>  bug "wildcard-operator";
		 UNDEFINED_TYPE             =>  bug "undef-operator";
		 TYPE_SCHEME_ARG_I _        =>  bug "ibound-operator"; 
		 TYPE_VARIABLE_REF _        =>  bug "varty-operator";
		 _ => bug "operator";
            esac;

	expression_type (TYPE_CONSTRAINT_EXPRESSION (e, type))      =>  expression_type e;
	expression_type (EXCEPT_EXPRESSION (e, h))                    =>  expression_type e;
	expression_type (RAISE_EXPRESSION (e, t))                     =>  t;
	expression_type (LET_EXPRESSION(_, e))                        =>  expression_type e;
	expression_type (CASE_EXPRESSION(_, CASE_RULE(_, e) ! _, _))  =>  expression_type e;
	expression_type (FN_EXPRESSION (CASE_RULE(_, e) ! _, type)) =>  type --> expression_type e;
	expression_type (SOURCE_CODE_REGION_FOR_EXPRESSION (e, _))    =>  expression_type e;
	expression_type _                                             =>  bug "expressionType";
    end;

}; #  package reconstruct 




## COPYRIGHT (c) 1996 AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
