/*
 * Module for adding preheaders and splitting critical edges
 *
 * -- Allen Leung
 */

generic package CFGStructuring (IR:  LOWCODE_IR) : CFG_STRUCTURING 
{

   package ir   = IR
   package control_flow_graph  = ir::control_flow_graph
   package loop = ir::Loop
   package util = ir::Util
   package w    = control_flow_graph::W
   package g    = graph

   package reshape = ControlFlowGraphRestructureFn (package loop = Loop)

   fun reshape { add_preheader, split_critical_edges } IR =
   let  my CFG as g::GRAPH cfg = IR
        loop               = ir::loop IR

        fun is_falls_thru (_, _, control_flow_graph::EDGE { k=control_flow_graph::BRANCH FALSE, ... } ) = TRUE
          | is_falls_thru(_, _, control_flow_graph::EDGE { k=control_flow_graph::FALLSTHRU, ... } ) = TRUE
          | is_falls_thru(_, _, _) = FALSE

        fun ins_preheader { header, entries=[] } = ()
          | ins_preheader { header, entries=[_] } = ()
          | ins_preheader { header=(h, h'), entries } =
            let fun sum_weights ([], n) = n
                  | sum_weights((_, _, control_flow_graph::EDGE { w, a, ... } ) . es, n) = 
                      sum_weights (es,*w + n)
                w = sum_weights (entries, w::zero)
                my control_flow_graph::BLOCK { annotations=old_an, ... } = h'
                p = cfg.new_id ()
                my (preheader as control_flow_graph::BLOCK { freq, annotations, ... }, new_edge) = 
                   if list::exists is_falls_thru entries then
                     (control_flow_graph::empty_block (p, w), 
                     (p, h, control_flow_graph::EDGE { k=control_flow_graph::FALLSTHRU, w=REF w, a=a } ))
                   else
                     (control_flow_graph::jump_block (p, control_flow_graph::define_local_label h', w),
                     (p, h, control_flow_graph::EDGE { k=control_flow_graph::JUMP, w=REF w, a=a } ))
                new_entries = map (fn (i, j, e) => (i, p, e)) entries
            in  annotations := *old_an; 
                apply (fn (i, j, _) => cfg.remove_edge (i, j)) entries;
                apply cfg.add_edge new_entries;
                cfg.add_node (p, preheader);
                cfg.add_edge new_edge;
                apply (fn (i, _, _) => Util::set_target (CFG, i)) new_entries
            end

    in  Reshape::restructure (CFG, loop)
             { add_preheader   = if add_preheader then THE ins_preheader 
                                 else NULL,
               add_landing_pad = NULL
             };
        control_flow_graph::changed CFG
    end

}
    
