# 
#  Common operations on Codetree
#
# -- Allen Leung 

# Compiled by:
#     src/lib/compiler/lower/make7/codetree.make6


###               "I have a feeling that if over the next ten years
###                we train a third of our undergraduates at M.I.T.
###                in programming, this will generate enough worthwhile
###                languages for us to be able to stop, and that succeeding
###                undergraduates will face the console with such a natural
###                keyboard and such a natural language that there will be
###                very little left, if anything, to the teaching of programming."
###
###                                                -- Peter Elias


generic package codetree_utils_g (

    package codetree:  Codetree;		# Codetree	is from   src/lib/compiler/lower/codetree/codetree.api

    # Hashing extensions 
    hash_sext:   codetree::Hash_Fns -> codetree::Sext -> Unt;
    hash_rext:   codetree::Hash_Fns -> codetree::Rext -> Unt;
    hash_fext:   codetree::Hash_Fns -> codetree::Fext -> Unt;
    hash_ccext:  codetree::Hash_Fns -> codetree::Ccext -> Unt;

    # Equality extensions 
    eq_sext:   codetree::Eq_Fns -> (codetree::Sext, codetree::Sext) -> Bool;
    eq_rext:   codetree::Eq_Fns -> (codetree::Rext, codetree::Rext) -> Bool;
    eq_fext:   codetree::Eq_Fns -> (codetree::Fext, codetree::Fext) -> Bool;
    eq_ccext:  codetree::Eq_Fns -> (codetree::Ccext, codetree::Ccext) -> Bool;

    # Pretty printing extensions 
    show_sext:   codetree::Prettyprint_Fns -> codetree::Sext -> String;
    show_rext:   codetree::Prettyprint_Fns -> (codetree::Some_Type, codetree::Rext) -> String;
    show_fext:   codetree::Prettyprint_Fns -> (codetree::Fty, codetree::Fext) -> String;
    show_ccext:  codetree::Prettyprint_Fns -> (codetree::Some_Type, codetree::Ccext) -> String;

)

: (weak) Codetree_Utilities			# Codetree_Utilities	is from   src/lib/compiler/lower/codetree/codetree-utils.api

{
    package codetree   = codetree;
    package t          = codetree;

    package i          = t::machine_int;
    package constant   = t::constant;
    package region     = t::region;
    package b          = t::basis;

    package c= cells_basis;			# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg
    package w= unt;				# unt		is from   src/lib/std/unt.pkg


    w =   w::from_int;
    i2s =   int::to_string;
    to_lower =   string::map char::to_lower;

    fun error msg
        =
        lowcode_error_message::error("codetree_utils", msg);

    fun wv (c::CELL { id, ... } )
        =
        w id;

    fun wvs is
        = 
	f (is, 0u0)
        where
	    fun f ([],      h) =>   h;
	        f (i ! is, h) =>   f (is, wv i+h);
            end;

        end;


    # Hashing

    hash_label =   label::hash; 

    fun hasher ()
        =
        {   statement   => hash_statement,
            int_expression  => hash_int_expression,
            float_expression  => hash_float_expression,
            bool_expression => hash_bool_expression
        }

    also
    fun hash_ctrl ctrl
        =
        wv ctrl

    also
    fun hash_statement statement
       =
       case statement
         
	    t::MOVE_INT (t, dst, int_expression) =>   0u123 + w t + wv dst + hash_int_expression int_expression;
	    t::MOVE_BOOL (dst, bool_expression) =>   0u1234 + wv dst + hash_bool_expression bool_expression;
	    t::MOVE_FLOAT (fty, dst, float_expression) =>   0u12345 + w fty + wv dst + hash_float_expression float_expression;
	    t::COPY_INTS (type, dst, src) =>   0u234 + w type + wvs dst + wvs src;
	    t::COPY_FLOATS (fty, dst, src) =>   0u456 + w fty + wvs dst + wvs src;
	    t::JUMP (ea, labels) =>   0u45 + hash_int_expression ea;

	    t::FLOW_TO (statement, _) =>   hash_statement statement;
	    t::RET _ =>   0u567;
	    t::STORE (type, ea, data, mem) =>   0u888 + w type + hash_int_expression ea + hash_int_expression data; 
	    t::FSTORE (fty, ea, data, mem) =>   0u7890 + w fty + hash_int_expression ea + hash_float_expression data;
	    t::BCC (a, lab) =>   0u233 + hash_bool_expression a + hash_label lab;
	    t::IF (a, b, c) =>   0u233 + hash_bool_expression a + hash_statement b + hash_statement c;
	    t::NOTE (statement, a) =>   hash_statement statement; 
	    t::PHI { preds, block } =>   w block; 
	    t::SOURCE =>   0u123; 
	    t::SINK =>   0u423; 
	    t::REGION (statement, ctrl) =>   hash_statement statement + hash_ctrl ctrl;
	    t::RTL { hash, ... } =>   hash;
	    t::SEQ ss =>   hash_statements (ss, 0u23);
	    t::ASSIGN (type, lhs, rhs) =>   w type + hash_int_expression lhs + hash_int_expression rhs;

	    t::CALL { funct, targets, defs, uses, region, pops }
		 =>
		 hash_int_expression funct + hash_lowcodes defs + hash_lowcodes uses; 

	    _ => error "hashStm";
       esac 

    also
    fun hash_statements ([],     h) =>   h;
	hash_statements (s ! ss, h) =>   hash_statements (ss, hash_statement s + h);
    end 

    also
    fun hash_lowcode (t::BOOL_EXPRESSION bool_expression) =>   hash_bool_expression bool_expression;
	hash_lowcode (t::INT_EXPRESSION int_expression)  =>   hash_int_expression int_expression; 
	hash_lowcode (t::FLOAT_EXPRESSION float_expression)  =>   hash_float_expression float_expression;
    end 

    also
    fun hash_lowcodes [] => 0u123;
	hash_lowcodes (m ! ms) => hash_lowcode m + hash_lowcodes ms;
    end 

    also
    fun hash2 (type, x, y)
	 =
	 w type + hash_int_expression x + hash_int_expression y

    also
    fun hashm t::DIV_TO_ZERO   =>   0u158;
	hashm t::DIV_TO_NEGINF =>   0u159;
    end 

    also
    fun hash3 (m, type, x, y)
	 =
	 hashm m + w type + hash_int_expression x + hash_int_expression y

    also
    fun hash_int_expression int_expression
	 =  
	 case int_expression
	   
	      t::REG (type, src) =>   w type + wv src;
	      t::LITERAL i =>   i::hash i;
	      t::LABEL l =>   hash_label l;
	      t::LABEXP le =>   hash_int_expression int_expression;
	      t::CONST c =>   constant::hash c;
	      t::NEG (type, x) =>   w type + hash_int_expression x + 0u24;
	      t::ADD x =>   hash2 x + 0u234;
	      t::SUB x =>   hash2 x + 0u456;
	      t::MULS x =>   hash2 x + 0u2131;
	      t::DIVS x =>   hash3 x + 0u156;
	      t::REMS x =>   hash3 x + 0u231;
	      t::MULU x =>   hash2 x + 0u123;
	      t::DIVU x =>   hash2 x + 0u1234;
	      t::REMU x =>   hash2 x + 0u211;
	      t::NEGT (type, x) =>   w type + hash_int_expression x + 0u1224;
	      t::ADDT x =>   hash2 x + 0u1219;
	      t::SUBT x =>   hash2 x + 0u999;
	      t::MULT x =>   hash2 x + 0u7887;
	      t::DIVT x =>   hash3 x + 0u88884;
	      t::BITWISEAND x =>   hash2 x + 0u12312;
	      t::BITWISEOR x =>   hash2 x + 0u558;
	      t::BITWISEXOR x =>   hash2 x + 0u234;
	      t::BITWISEEQV x =>   hash2 x + 0u734;
	      t::BITWISENOT (type, x) =>   w type + hash_int_expression x;  
	      t::RIGHTSHIFT x =>   hash2 x + 0u874; 
	      t::RIGHTSHIFTU x =>   hash2 x + 0u223;
	      t::LEFTSHIFT x =>   hash2 x + 0u499;
	      t::COND (type, e, e1, e2) =>   w type + hash_bool_expression e + hash_int_expression e1 + hash_int_expression e2;
	      t::SIGNEXTEND (type, type', int_expression) =>   0u232 + w type + w type' + hash_int_expression int_expression;
	      t::ZEROEXTEND (type, type', int_expression) =>   0u737 + w type + w type' + hash_int_expression int_expression;
	      t::CONVERTFLOATTOINT (type, round, type', float_expression) =>   
		 w type + b::hash_rounding_mode round + w type' + hash_float_expression float_expression;
	      t::LOAD (type, ea, mem) =>   w type + hash_int_expression ea + 0u342;
	      t::LET (statement, int_expression) =>   hash_statement statement + hash_int_expression int_expression;
	      t::PRED (e, ctrl) =>   hash_int_expression e + hash_ctrl ctrl;
	      t::MARK (e, _) =>   hash_int_expression e;
	      t::REXT (type, rext) =>   w type + hash_rext (hasher()) rext;
	      t::QQQ =>   0u485;
	      t::OP (type, oper, es) =>   hash_rexps (es, w type + hash_operator oper);
	      t::ARG _ =>   0u23;
	      t::ATATAT(type, k, e) =>   w type + hash_int_expression e;
	      t::PARAM n =>   w n;
	      t::BITSLICE (type, sl, e) =>   w type + hash_int_expression e;
	 esac

    also
    fun hash_operator (t::OPERATOR { hash, ... } )
        =
        hash

    also
    fun hash_rexps ([], h)
            =>
            h; 

	hash_rexps (e ! es, h)
            =>
            hash_rexps (es, hash_int_expression e + h);
    end 

    also
    fun hash2'(type, x, y)
        =
        w type + hash_float_expression x + hash_float_expression y

    also
    fun hash_float_expression float_expression
	 =  
	 case float_expression
	   
	      t::FREG (fty, src) =>   w fty + wv src;
	      t::FLOAD (fty, ea, mem) =>   w fty + hash_int_expression ea;
	      t::FADD x =>   hash2' x + 0u123;
	      t::FMUL x =>   hash2' x + 0u1234;
	      t::FSUB x =>   hash2' x + 0u12345;
	      t::FDIV x =>   hash2' x + 0u234;
	      t::COPY_FLOAT_SIGN x =>   hash2' x + 0u883;
	      t::FCOND (fty, c, x, y) =>   w fty + hash_bool_expression c + hash_float_expression x + hash_float_expression y;
	      t::FABS (fty, float_expression) =>   w fty + hash_float_expression float_expression + 0u2345;
	      t::FNEG (fty, float_expression) =>   w fty + hash_float_expression float_expression + 0u23456;
	      t::FSQRT (fty, float_expression) =>   w fty + hash_float_expression float_expression + 0u345;
	      t::CVTI2F (fty, type, int_expression) =>   w fty + w type + hash_int_expression int_expression;
	      t::CVTF2F (fty, fty', float_expression) =>   w fty + hash_float_expression float_expression + w fty'; 
	      t::FMARK (e, _) =>   hash_float_expression e;
	      t::FPRED (e, ctrl) =>   hash_float_expression e + hash_ctrl ctrl;
	      t::FEXT (fty, fext) =>   w fty + hash_fext (hasher()) fext;
       esac

   also
   fun hash_fexps ([],     h) =>   h;
       hash_fexps (e ! es, h) =>   hash_fexps (es, hash_float_expression e + h);
   end 

   also
   fun hash_bool_expression bool_expression
       =
       case bool_expression
         
	    t::CC (cc, src) =>   b::hash_cond cc + wv src;
	    t::FCC (fcc, src) =>   b::hash_fcond fcc + wv src;

	    t::CMP (type, cond, x, y) =>   
	       w type + b::hash_cond cond + hash_int_expression x + hash_int_expression y;

	    t::FCMP (fty, fcond, x, y) =>   
	       w fty + b::hash_fcond fcond + hash_float_expression x + hash_float_expression y;

	    t::NOT x =>   0u2321 + hash_bool_expression x; 
	    t::AND (x, y) =>   0u2321 + hash_bool_expression x + hash_bool_expression y;
	    t::OR (x, y) =>   0u8721 + hash_bool_expression x + hash_bool_expression y;
	    t::XOR (x, y) =>   0u6178 + hash_bool_expression x + hash_bool_expression y;
	    t::EQV (x, y) =>   0u178 + hash_bool_expression x + hash_bool_expression y;
	    t::TRUE =>   0u0;
	    t::FALSE =>   0u1232;
	    t::CCMARK (e, _) =>   hash_bool_expression e;
	    t::CCEXT (type, ccext) =>   w type + hash_ccext (hasher()) ccext;
       esac

    also
    fun hash_bool_expressions ([], h)
	    =>
	    h;

	hash_bool_expressions (e ! es, h)
	    =>
	    hash_bool_expressions (es, hash_bool_expression e + h);
    end;


    # Equality


    eq_label = label::same;

    fun eq_labels ([],[]) => TRUE;
	eq_labels (a ! b, c ! d) => eq_label (a, c) and eq_labels (b, d);
	eq_labels _ => FALSE;
    end 

    also
    fun eq_cell (c::CELL { id=>x, ... }, c::CELL { id=>y, ... } )
	=
	x == y

    also
    fun eq_cells ([], []) => TRUE;
        eq_cells (x ! xs, y ! ys) => eq_cell (x, y) and eq_cells (xs, ys);
        eq_cells _ => FALSE;
    end 

    also
    fun eq_copy ((t1, dst1, src1), (t2, dst2, src2))
        =
	t1==t2 and eq_cells (dst1, dst2) and eq_cells (src1, src2)

    also
    fun eq_ctrl (c1, c2)
        =
        eq_cell (c1, c2)

    also
    fun eq_ctrls (c1, c2)
        =
        eq_cells (c1, c2)

    #  statements 
    also
    fun equality ()
        =
        { statement=>eq_statement, int_expression=>eq_int_expression, float_expression=>eq_float_expression, bool_expression=>eq_bool_expression }

    also
    fun eq_statement (t::MOVE_INT (a, b, c), t::MOVE_INT (d, e, f)) =>
	    a==d and eq_cell (b, e) and eq_int_expression (c, f);
	eq_statement (t::MOVE_BOOL (a, b), t::MOVE_BOOL (c, d)) => eq_cell (a, c) and eq_bool_expression (b, d);
	eq_statement (t::MOVE_FLOAT (a, b, c), t::MOVE_FLOAT (d, e, f)) => 
	     a==d and eq_cell (b, e) and eq_float_expression (c, f);
	eq_statement (t::COPY_INTS x, t::COPY_INTS y) => eq_copy (x, y);
	eq_statement (t::COPY_FLOATS x, t::COPY_FLOATS y) => eq_copy (x, y);
	eq_statement (t::JUMP (a, b), t::JUMP (a', b')) => eq_int_expression (a, a');
	eq_statement (t::CALL { funct=>a, defs=>b, uses=>c, ... },
	       t::CALL { funct=>d, defs=>e, uses=>f, ... } ) =>  
	    eq_int_expression (a, d) and eq_lowcodes (b, e) and eq_lowcodes (c, f);
	eq_statement (t::FLOW_TO (x, a), t::FLOW_TO (y, b)) =>
	    eq_statement (x, y) and eq_labels (a, b);
	eq_statement (t::RET _, t::RET _) => TRUE;
	eq_statement (t::STORE (a, b, c, _), t::STORE (d, e, f, _)) => 
	    a==d and eq_int_expression (b, e) and eq_int_expression (c, f);
	eq_statement (t::FSTORE (a, b, c, _), t::FSTORE (d, e, f, _)) =>
	    a==d and eq_int_expression (b, e) and eq_float_expression (c, f);
	eq_statement (t::NOTE (s1, _), s2) => eq_statement (s1, s2);
	eq_statement (s1, t::NOTE (s2, _)) => eq_statement (s1, s2);
	eq_statement (t::PHI x, t::PHI y)   =>   x == y;
	eq_statement (t::SOURCE, t::SOURCE) => TRUE;
	eq_statement (t::SINK, t::SINK) => TRUE;
	eq_statement (t::BCC (b, c), t::BCC (b', c')) => 
	   eq_bool_expression (b, b') and eq_label (c, c');
	eq_statement (t::IF (b, c, d), t::IF (b', c', d')) => 
	   eq_bool_expression (b, b') and eq_statement (c, c') and eq_statement (d, d');
	eq_statement (t::RTL { attributes=>x, ... }, t::RTL { attributes=>y, ... } )   =>   x == y;
	eq_statement (t::REGION (a, b), t::REGION (a', b')) => eq_ctrl (b, b') and eq_statement (a, a');
	eq_statement (t::EXT a, t::EXT a') => eq_sext (equality()) (a, a');
	eq_statement _ => FALSE;
    end 

    also
    fun eq_statements ([],[]) => TRUE;
        eq_statements (a ! b, c ! d) => eq_statement (a, c) and eq_statements (b, d);
        eq_statements _ => FALSE;
    end 

    also
    fun eq_lowcode (t::BOOL_EXPRESSION a, t::BOOL_EXPRESSION b) => eq_bool_expression (a, b);
        eq_lowcode (t::INT_EXPRESSION a, t::INT_EXPRESSION b) => eq_int_expression (a, b);
        eq_lowcode (t::FLOAT_EXPRESSION a, t::FLOAT_EXPRESSION b) => eq_float_expression (a, b);
        eq_lowcode _ => FALSE;
    end 

    also
    fun eq_lowcodes ([],[]) => TRUE;
        eq_lowcodes (a ! b, c ! d) => eq_lowcode (a, c) and eq_lowcodes (b, d);
        eq_lowcodes _ => FALSE;
    end 

    also
    fun eq2 ((a, b, c), (d, e, f))
        =
        a == d and eq_int_expression (b, e) and eq_int_expression (c, f)

    also
    fun eq3 ((m, a, b, c), (n, d, e, f))
	=
	m==n and a==d and eq_int_expression (b, e) and eq_int_expression (c, f)

    also
    fun eq_int_expression (t::REG (a, b), t::REG (c, d))   =>   a == c and eq_cell (b, d);
	eq_int_expression (t::LITERAL a, t::LITERAL b)   =>   a == b;
	eq_int_expression (t::LABEL a, t::LABEL b) => eq_label (a, b);
	eq_int_expression (t::LABEXP a, t::LABEXP b) => eq_int_expression (a, b);
	eq_int_expression (t::CONST a, t::CONST b) => constant::(====) (a, b);
	eq_int_expression (t::NEG (t, x), t::NEG (t', x')) => t == t' and eq_int_expression (x, x');
	eq_int_expression (t::ADD x, t::ADD y) => eq2 (x, y);
	eq_int_expression (t::SUB x, t::SUB y) => eq2 (x, y);
	eq_int_expression (t::MULS x, t::MULS y) => eq2 (x, y);
	eq_int_expression (t::DIVS x, t::DIVS y) => eq3 (x, y);
	eq_int_expression (t::REMS x, t::REMS y) => eq3 (x, y);
	eq_int_expression (t::MULU x, t::MULU y) => eq2 (x, y);
	eq_int_expression (t::DIVU x, t::DIVU y) => eq2 (x, y);
	eq_int_expression (t::REMU x, t::REMU y) => eq2 (x, y);
	eq_int_expression (t::NEGT (t, x), t::NEGT (t', x')) => t == t' and eq_int_expression (x, x');
	eq_int_expression (t::ADDT x, t::ADDT y) => eq2 (x, y);
	eq_int_expression (t::SUBT x, t::SUBT y) => eq2 (x, y);
	eq_int_expression (t::MULT x, t::MULT y) => eq2 (x, y);
	eq_int_expression (t::DIVT x, t::DIVT y) => eq3 (x, y);
	eq_int_expression (t::BITWISEAND x, t::BITWISEAND y) => eq2 (x, y);
	eq_int_expression (t::BITWISEOR x, t::BITWISEOR y) => eq2 (x, y);
	eq_int_expression (t::BITWISEXOR x, t::BITWISEXOR y) => eq2 (x, y);
	eq_int_expression (t::BITWISEEQV x, t::BITWISEEQV y) => eq2 (x, y);
	eq_int_expression (t::BITWISENOT (a, b), t::BITWISENOT (c, d))   =>   a == c and eq_int_expression (b, d);
	eq_int_expression (t::RIGHTSHIFT x, t::RIGHTSHIFT y) => eq2 (x, y);
	eq_int_expression (t::RIGHTSHIFTU x, t::RIGHTSHIFTU y) => eq2 (x, y);
	eq_int_expression (t::LEFTSHIFT x, t::LEFTSHIFT y) => eq2 (x, y);
	eq_int_expression (t::COND (a, b, c, d), t::COND (e, f, g, h)) => 
	    a==e and eq_bool_expression (b, f) and eq_int_expression (c, g) and eq_int_expression (d, h);
	eq_int_expression (t::SIGNEXTEND (a, b, c), t::SIGNEXTEND (a', b', c')) => 
	    a==a' and b==b' and eq_int_expression (c, c');
	eq_int_expression (t::ZEROEXTEND (a, b, c), t::ZEROEXTEND (a', b', c')) => 
	    a==a' and b==b' and eq_int_expression (c, c');
	eq_int_expression (t::CONVERTFLOATTOINT (a, b, c, d), t::CONVERTFLOATTOINT (e, f, g, h)) => 
	    a==e and b==f and c==g and eq_float_expression (d, h);
	eq_int_expression (t::LOAD (a, b, _), t::LOAD (c, d, _))   =>   a == c and eq_int_expression (b, d);
	eq_int_expression (t::LET (a, b), t::LET (c, d)) => eq_statement (a, c) and eq_int_expression (b, d);
	eq_int_expression (t::ARG x, t::ARG y)   =>   x == y;
	eq_int_expression (t::PARAM x, t::PARAM y)   =>   x == y;
	eq_int_expression (t::QQQ, t::QQQ) => TRUE;
	eq_int_expression (t::ATATAT(t1, k1, e1), t::ATATAT(t2, k2, e2)) => 
	   t1==t2 and k1==k2 and eq_int_expression (e1, e2);
	eq_int_expression (t::BITSLICE (t1, s1, e1), t::BITSLICE (t2, s2, e2)) =>
	   t1==t2 and s1==s2 and eq_int_expression (e1, e2);
	eq_int_expression (t::MARK (a, _), b) => eq_int_expression (a, b);
	eq_int_expression (a, t::MARK (b, _)) => eq_int_expression (a, b);
	eq_int_expression (t::PRED (a, b), t::PRED (a', b')) => eq_ctrl (b, b') and eq_int_expression (a, a');
	eq_int_expression (t::REXT (a, b), t::REXT (a', b')) =>   
	     a==a' and eq_rext (equality()) (b, b'); 
	eq_int_expression _ => FALSE;
    end 

    also
    fun eq_rexps ([],[]) => TRUE;
        eq_rexps (a ! b, c ! d) => eq_int_expression (a, c) and eq_rexps (b, d);
        eq_rexps _ => FALSE;
    end 

    also
    fun eq2'((a, b, c), (d, e, f))
        =
        a==d and eq_float_expression (b, e) and eq_float_expression (c, f)

    also
    fun eq1'((a, b), (d, e))
        =
        a==d and eq_float_expression (b, e) 

    also
    fun eq_float_expression (t::FREG (t1, x), t::FREG (t2, y))    =>   t1==t2 and eq_cell (x, y);
	eq_float_expression (t::FLOAD (a, b, _), t::FLOAD (c, d, _)) =>   a==c and eq_int_expression (b, d);
	eq_float_expression (t::FADD x, t::FADD y) => eq2'(x, y); 
	eq_float_expression (t::FMUL x, t::FMUL y) => eq2'(x, y);
	eq_float_expression (t::FSUB x, t::FSUB y) => eq2'(x, y); 
	eq_float_expression (t::FDIV x, t::FDIV y) => eq2'(x, y);
	eq_float_expression (t::COPY_FLOAT_SIGN x, t::COPY_FLOAT_SIGN y) => eq2'(x, y);
	eq_float_expression (t::FCOND (t, x, y, z), t::FCOND (t', x', y', z')) => 
	   t==t' and eq_bool_expression (x, x') and eq_float_expression (y, y') and eq_float_expression (z, z');
	eq_float_expression (t::FABS x, t::FABS y) => eq1'(x, y);
	eq_float_expression (t::FNEG x, t::FNEG y) => eq1'(x, y);
	eq_float_expression (t::FSQRT x, t::FSQRT y) => eq1'(x, y);
	eq_float_expression (t::CVTI2F (a, b, c), t::CVTI2F (a', b', c')) => 
	    a==a' and b==b' and eq_int_expression (c, c');
	eq_float_expression (t::CVTF2F (a, b, c), t::CVTF2F (a', b', c')) => 
	    a==a' and b==b' and eq_float_expression (c, c');
	eq_float_expression (t::FEXT (a, f), t::FEXT (b, g))   =>   a==b and eq_fext (equality()) (f, g); 
	eq_float_expression (t::FMARK (a, _), b) => eq_float_expression (a, b);
	eq_float_expression (a, t::FMARK (b, _)) => eq_float_expression (a, b);
	eq_float_expression (t::FPRED (a, b), t::FPRED (a', b')) => eq_ctrl (b, b') and eq_float_expression (a, a');
	eq_float_expression _ => FALSE;
    end 

    also
    fun eq_fexps ([],[]) => TRUE;
	eq_fexps (a ! b, c ! d) => eq_float_expression (a, c) and eq_fexps (b, d);
	eq_fexps _ => FALSE;
    end 

    also
    fun eq_bool_expression (t::CC (c1, x), t::CC (c2, y))    =>   c1 == c2 and eq_cell (x, y);
	eq_bool_expression (t::FCC (c1, x), t::FCC (c2, y))   =>   c1 == c2 and eq_cell (x, y);
	eq_bool_expression (t::CMP (x, a, b, c), t::CMP (y, d, e, f)) => 
	   a==d and eq_int_expression (b, e) and eq_int_expression (c, f) and x == y;
	eq_bool_expression (t::FCMP (x, a, b, c), t::FCMP (y, d, e, f)) =>
	   a==d and eq_float_expression (b, e) and eq_float_expression (c, f) and x == y;
	eq_bool_expression (t::NOT x, t::NOT y) => eq_bool_expression (x, y);
	eq_bool_expression (t::AND x, t::AND y) => eq_bool_expression2 (x, y);
	eq_bool_expression (t::OR x,  t::OR y) => eq_bool_expression2 (x, y);
	eq_bool_expression (t::XOR x, t::XOR y) => eq_bool_expression2 (x, y);
	eq_bool_expression (t::EQV x, t::EQV y) => eq_bool_expression2 (x, y);
	eq_bool_expression (t::CCMARK (a, _), b) => eq_bool_expression (a, b);
	eq_bool_expression (a, t::CCMARK (b, _)) => eq_bool_expression (a, b);
	eq_bool_expression (t::CCEXT (t, a), t::CCEXT (t', b)) => 
	   t==t' and eq_ccext (equality()) (a, b);
	eq_bool_expression (t::TRUE, t::TRUE) => TRUE;
	eq_bool_expression (t::FALSE, t::FALSE) => TRUE;
	eq_bool_expression _ => FALSE;
    end 

    also
    fun eq_bool_expression2 ((x, y), (x', y'))
        =
        eq_bool_expression (x, x') and eq_bool_expression (y, y')

    also
    fun eq_bool_expressions ([],[]) => TRUE;
	eq_bool_expressions (a ! b, c ! d) => eq_bool_expression (a, c) and eq_bool_expressions (b, d);
	eq_bool_expressions _ => FALSE;
    end;


    # Pretty printing

    fun show { def, uses, region_def, region_use }
	=
	{   fun type t = "." + i2s t;

	    fun fty 32 => ".s";
		fty 64 => ".d";
		fty 128 => ".q";
		fty t   => type t;
            end;

	    fun reg (t, v) = c::to_string v + type t;
	    fun freg (t, v) = c::to_string v + fty t;
	    fun ccreg v = c::to_string v;
	    fun ctrlreg v = c::to_string v;

	    fun src_reg (t, v) = reg (t, v);
	    fun src_freg (t, v) = freg (t, v);
	    fun src_ccreg v = ccreg v;
	    fun src_ctrlreg v = ctrlreg v;

	    fun dst_reg (t, v) = reg (t, v);
	    fun dst_freg (t, v) = freg (t, v);
	    fun dst_ccreg v = ccreg v;
	    fun dst_ctrlreg v = ctrlreg v;

	    fun src_param (i) = def  i except _ =  "<" + i2s i + ">";
	    fun dst_param (i) = uses i except _ =  "<" + i2s i + ">";

	    fun listify f
		=
		{   fun g (t,[]) => "";
			g (t,[r]) => f (t, r);
			g (t, r ! rs) => f (t, r) + ", " + g (t, rs);
                    end;

		    g;
		};

	    fun listify' f
		=
		(string::join ", ") o (list::map f);

	    src_regs =   listify src_reg; 
	    dst_regs =   listify dst_reg; 
	    src_fregs =   listify src_freg; 
	    dst_fregs =   listify dst_freg; 
	    src_ccregs =   listify' src_ccreg; 
	    dst_ccregs =   listify' dst_ccreg; 
	    src_ctrlregs =   listify' src_ctrlreg; 
	    dst_ctrlregs =   listify' dst_ctrlreg; 

	    fun usectrl cr  =   " [" + src_ctrlreg cr + "]";

	    fun usectrls [] => "";
	        usectrls cr => " [" + src_ctrlregs cr + "]";
            end;

	    fun defctrl cr
                =
                "" + dst_ctrlreg cr + " <- ";

	    fun defctrls [] => "";
	        defctrls cr => "" + dst_ctrlregs cr + " <- ";
            end;

	    fun copy (t, dst, src)
                =
                dst_regs (t, dst) + " := " + src_regs (t, src);

	    fun fcopy (t, dst, src)
                =
                dst_fregs (t, dst) + " := " + src_fregs (t, src);

	    fun shower ()
		=
		{ statement, int_expression, float_expression, bool_expression, dst_reg, src_reg }

		#  pretty print a statement 

	    also
	    fun statement (t::MOVE_INT (t, dst, e)) => dst_reg (t, dst) + " := " + int_expression e;
		statement (t::MOVE_BOOL (dst, e)) => dst_ccreg dst + " := " + bool_expression e;
		statement (t::MOVE_FLOAT (fty, dst, e)) => dst_freg (fty, dst) + " := " + float_expression e;
		statement (t::COPY_INTS (type, dst, src)) => copy (type, dst, src);
		statement (t::COPY_FLOATS (fty, dst, src)) => fcopy (fty, dst, src);
		statement (t::JUMP (ea, labels)) => "jmp " + int_expression ea;
		statement (t::BCC (a, lab)) => 
		    "bcc " + bool_expression a + " " + label::to_string lab;
		statement (t::CALL { funct, targets, defs, uses, region, pops } ) => 
		     "call " + int_expression funct;
		statement (t::FLOW_TO (s, targets)) =>
		     statement s + " [" + listify' label::to_string targets + "]";
		statement (t::RET (flow)) => "ret";
		statement (t::IF (a, b, t::SEQ [])) => "if " + bool_expression a + " then " + statement b;
		statement (t::IF (a, b, c)) => "if " + bool_expression a + " then " + statement b + " else " + statement c;
		statement (t::STORE (type, ea, e, mem)) => store (type, "", ea, mem, e);
		statement (t::FSTORE (fty, ea, e, mem)) => fstore (fty, "", ea, mem, e);
		statement (t::REGION (s, cr)) => statement s + usectrl cr;
		statement (t::SEQ []) => "skip";
		statement (t::SEQ s) => statements(";\n", s);
		statement (t::DEFINE lab) => label::to_string lab + ":";
		statement (t::NOTE (s, a)) => statement s; 
		statement (t::EXT x) => show_sext (shower()) x;
		statement (t::LIVE exps) => "live: " + lowcodes exps;
		statement (t::DEAD exps) => "dead: " + lowcodes exps;
		statement (t::PHI { preds, block } ) => "phi[" + i2s block + "]";
		statement (t::ASSIGN (type, lhs, t::QQQ)) => "define " + int_expression lhs;
		statement (t::ASSIGN (type, t::QQQ, rhs)) => "use " + int_expression rhs;
		statement (t::ASSIGN (type, x, rhs)) => lhs x + " := " + int_expression rhs;
		statement (t::SOURCE) => "source";
		statement (t::SINK) => "sink";
		statement (t::RTL { e, ... } ) => statement e;
            end 

	    also
	    fun statements (sep,[]) => "";
	        statements (sep,[s]) => statement s;
	        statements (sep, s ! ss) => statement s + sep + statements (sep, ss);
            end 

	    also
	    fun lhs (t::PARAM i) => dst_param i;
	        lhs (t::ATATAT(type, k, t::PARAM i)) => dst_param i;
	        lhs (e) => int_expression e;
            end 

		#  pretty print an expression  
	    also
	    fun int_expression (t::REG (type, src)) => src_reg (type, src);
		int_expression (t::LITERAL i) => integer::to_string i;
		int_expression (t::LABEL l) => label::to_string l;
		int_expression (t::CONST c) => constant::to_string c;
		int_expression (t::LABEXP le) => int_expression le;
		int_expression (t::NEG x) => unary("-_", x);
		int_expression (t::ADD x) => binary("+", x);
		int_expression (t::SUB x) => binary("-", x);
		int_expression (t::MULS x) => two("muls", x);
		int_expression (t::DIVS x) => three("divs", x);
		int_expression (t::REMS x) => three("rems", x);
		int_expression (t::MULU x) => two("mulu", x);
		int_expression (t::DIVU x) => two("divu", x);
		int_expression (t::REMU x) => two("remu", x);
		int_expression (t::NEGT x) => one("negt", x);
		int_expression (t::ADDT x) => two("addt", x);
		int_expression (t::SUBT x) => two("subt", x);
		int_expression (t::MULT x) => two("mult", x);
		int_expression (t::DIVT x) => three("divt", x);
		int_expression (t::BITWISEAND x) => binary("&", x);
		int_expression (t::BITWISEOR x)  => binary("|", x);
		int_expression (t::BITWISEXOR x) => binary("^", x);
		int_expression (t::BITWISEEQV x) => binary("eqvb", x);
		int_expression (t::BITWISENOT x) => unary("!", x);
		int_expression (t::RIGHTSHIFT x) => binary(">>>", x);
		int_expression (t::RIGHTSHIFTU x) => binary(">>", x);
		int_expression (t::LEFTSHIFT x) => binary("<<", x);
		int_expression (t::COND (t, cc, e1, e2)) => 
		    "cond" + type t + "(" + bool_expression cc + ", " + int_expression e1 + ", " + int_expression e2 + ")";
		int_expression (t::SIGNEXTEND (t, t', e)) => "sx" + type t + type t' + " " + int_expression e;
		int_expression (t::ZEROEXTEND (t, t', e)) => "zx" + type t + type t' + " " + int_expression e;
		int_expression (t::CONVERTFLOATTOINT (t, round, t', e)) => 
		    "cvtf2i" + type t + to_lower (b::rounding_mode_to_string round)  + 
		    fty t' + " " + float_expression e;
		int_expression (t::LOAD (type, ea, mem)) => load (type, "", ea, mem);
		int_expression (t::LET (s, e)) => statement s + ";" + int_expression e;
		int_expression (t::PRED (e, cr)) => int_expression e + usectrl cr;
		int_expression (t::MARK (e, _)) => int_expression e;
		int_expression (t::REXT e) => show_rext (shower()) e;
		int_expression (t::QQQ) => "???";
		int_expression (t::OP (t, opc, es)) => operator opc + type t + " " + rexps es;
		int_expression (t::ARG (t, REF (t::REP kind), name)) => 
		    name + ":" + kind + (if (t == 0 ) ""; else type t;fi);
		int_expression (t::PARAM n) => src_param n;
		int_expression (t::ATATAT(type, k, e)) =>    
		    "@@@" + c::cellkind_to_nickname k + "[" + int_expression e + "]";
		int_expression (t::BITSLICE (type, sl, e)) => int_expression e + " at " + slices sl;
            end 

	    also
	    fun operator (t::OPERATOR { name, ... } )
                =
                name 

	    also
	    fun paren_int_expression
		  (e as (t::REG _ | t::LITERAL _ | t::ATATAT _ | t::ARG _)) => 
		    int_expression e;
	        paren_int_expression e => "(" + int_expression e + ")";
            end 

	    also
	    fun slices sc
                =
                listify'
                    (fn (from, to) =  i2s from + ".." + i2s to)
                    sc


	    #  pretty print a real expression  
	    also
	    fun float_expression (t::FREG f) => src_freg f;
		float_expression (t::FLOAD (fty, ea, mem)) => fload (fty, "", ea, mem);
		float_expression (t::FADD x) => two'("fadd", x);
		float_expression (t::FMUL x) => two'("fmul", x);
		float_expression (t::FSUB x) => two'("fsub", x);
		float_expression (t::FDIV x) => two'("fdiv", x);
		float_expression (t::COPY_FLOAT_SIGN x) => two'("fcopysign", x);
		float_expression (t::FABS x) => one'("fabs", x);
		float_expression (t::FNEG x) => one'("fneg", x);
		float_expression (t::FSQRT x) => one'("fsqrt", x);
		float_expression (t::FCOND (t, cc, e1, e2)) => 
		    "fcond" + fty t + bool_expression cc + "(" + float_expression e1 + ", " + float_expression e2 + ")";
		float_expression (t::CVTI2F (t, t', e)) => "cvti2f" + type t' + " " + int_expression e;
		float_expression (t::CVTF2F (t, t', e)) => "cvtf2f" + fty t + fty t' + " " + float_expression e;
		float_expression (t::FPRED (e, cr)) => float_expression e + usectrl cr;
		float_expression (t::FMARK (e, _)) => float_expression e;
		float_expression (t::FEXT e) => show_fext (shower()) e;
            end 

	    also
	    fun bool_expression (t::CC (cc, r)) => src_ccreg r + to_lower (b::cond_to_string cc);
		bool_expression (t::FCC (fcc, r)) => src_ccreg r + to_lower (b::fcond_to_string fcc);
		bool_expression (t::CMP (t, t::SETCC, x, y)) => "setcc" + type t + pair (x, y);
		bool_expression (t::CMP (t, cc, x, y)) => 
		   "cmp" + to_lower (b::cond_to_string cc) + type t + pair (x, y);
		bool_expression (t::FCMP (t, t::SETFCC, x, y)) => "setfcc" + type t + pair'(x, y);
		bool_expression (t::FCMP (t, fcc, x, y)) => 
		       "fcmp" + to_lower (b::fcond_to_string fcc) + fty t + pair'(x, y);
		bool_expression (t::NOT x) => "not " + bool_expression x;
		bool_expression (t::AND (x, y)) => two''(" and ", x, y);
		bool_expression (t::OR (x, y)) => two''(" or ", x, y);
		bool_expression (t::XOR (x, y)) => two''(" xor ", x, y);
		bool_expression (t::EQV (x, y)) => two''(" eqv ", x, y);
		bool_expression (t::CCMARK (e, _)) => bool_expression e;
		bool_expression (t::TRUE) => "TRUE";
		bool_expression (t::FALSE) => "FALSE";
		bool_expression (t::CCEXT (e)) => show_ccext (shower()) e;
            end 

	    also
	    fun lowcode (t::INT_EXPRESSION e) => int_expression e;
	        lowcode (t::FLOAT_EXPRESSION e) => float_expression e;
	        lowcode (t::BOOL_EXPRESSION e) => bool_expression e;
            end 

	    also
	    fun lowcodes l
                =
                listify' lowcode l


	    #  Auxiliary functions 
	    also
	    fun one (opcode, (t, x))
                =
                opcode + type t + "(" + int_expression x + ")"

	    also
	    fun two (opcode, (t, x, y))
                =
                opcode + type t + pair (x, y)

	    also
	    fun three (opcode, (m, t, x, y))
                =
                opcode + dmr m + type t + pair (x, y)

	    also
	    fun dmr t::DIV_TO_ZERO => "{ 0 }";
	        dmr t::DIV_TO_NEGINF => "{-inf }";
            end 

	    also
	    fun binary (opcode, (t, x, y))
                =
                paren_int_expression x + " " + opcode + type t + " " + paren_int_expression y

	    also
	    fun unary (opcode, (t, x))
                =
                opcode + type t + " " + paren_int_expression x

	    also
	    fun pair (x, y)
                =
                "(" + int_expression x + ", " + int_expression y + ")"

	    also
	    fun one'(opcode, (t, x))
                =
                opcode + fty t + "(" + float_expression x + ")"

	    also
	    fun two'(opcode, (t, x, y))
                =
                opcode + fty t + pair'(x, y)

	    also
	    fun two''(c, x, y)
                =
                "(" + bool_expression x +  c  +  bool_expression y + ")"

	    also
	    fun pair'(x, y)
                =
                "(" + float_expression x + ", " + float_expression y + ")"

	    also
	    fun rexps es
                =
                "("
                 + 
                fold_right
                    (fn (e, "") => int_expression e;
			(e,  x) => int_expression e + ", " + x;
                     end)
                    ""
                    es
                 + 
                ")"

	    also
	    fun fexps es
                =
                "(" + fold_right
                    (fn (e, "") => float_expression e;
			(e, x) => float_expression e + ", " + x;
                     end ) "" es + ")"
	    also
	    fun bool_expressions es
                =
                "(" + fold_right (fn (e, "") => bool_expression e;
			 	   (e,  x) => bool_expression e + ", " + x;
                                end
                               ) "" es + ")"

	    also
	    fun store (t, u, ea, m, e)
                =
                memdef (t, u, ea, m) + " := " + int_expression e

	    also
	    fun fstore (t, u, ea, m, e)
                =
                fmemdef (t, u, ea, m) + " := " + float_expression e

	    also
	    fun ccstore (u, ea, m, e)
                =
                ccmemdef (u, ea, m) + " := " + bool_expression e

	    also
	    fun load (t, u, ea, m)
                =
                memuse (t, u, ea, m)

	    also
	    fun fload (t, u, ea, m)
                =
                fmemuse (t, u, ea, m)

	    also
	    fun ccload (u, ea, m)
                =
                ccmemuse (u, ea, m)

	    also
	    fun address (u, ea, m, show)
		 = 
		 {   r =   show m
			   except
			       _ => region::to_string m; end ;

		     r =   if (r == ""   ) r;
					else ":"  +  r;fi;

		     u  +  "["  +  int_expression ea  +  r  +  "]";
		 }

	    also
	    fun mem (t, u, ea, m, show)
                =
                "mem" + type t + address (u, ea, m, show)

	    also
	    fun fmem (t, u, ea, m, show)
                =
                "mem" + fty t + address (u, ea, m, show)

	    also
	    fun ccmem (u, ea, m, show)
                =
                "mem" + address (u, ea, m, show)

	    also
	    fun memdef (t, u, ea, m)
                =
                mem (t, u, ea, m, region_def)

	    also
	    fun fmemdef (t, u, ea, m)
                =
                fmem (t, u, ea, m, region_def)

	    also
	    fun ccmemdef (u, ea, m)
                =
                ccmem (u, ea, m, region_def)

	    also
	    fun memuse (t, u, ea, m)
                =
                mem (t, u, ea, m, region_use)

	    also
	    fun fmemuse (t, u, ea, m)
                =
                fmem (t, u, ea, m, region_use)

	    also
	    fun ccmemuse (u, ea, m)
                =
                ccmem (u, ea, m, region_use);

	    shower ();
	 };

     exception NOTHING;

     fun dummy _
	 =
	 raise exception NOTHING;

     dummy
	 =
	 { def        => dummy,
	   uses       => dummy,
	   region_def => dummy,
	   region_use => dummy
	 };

     fun statement_to_string         s =   .statement         (show dummy) s;
     fun int_expression_to_string    s =   .int_expression    (show dummy) s;
     fun float_expression_to_string  s =   .float_expression  (show dummy) s;
     fun bool_expression_to_string   s =   .bool_expression   (show dummy) s;

}; 
