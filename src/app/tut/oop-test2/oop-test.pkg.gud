## oop-test.pkg

# Test via:
#     linux% my
#     eval: make "oop-test.make6";
#     eval: obj1 = test_class::new       (                                            { int_field =>   1, string_field =>   "a" }, ());
#     eval: obj2 = test_subclass::new    (                      { int2_field => 2  }, { int_field =>  11, string_field =>  "aa" }, ());
#     eval: obj3 = test_subsubclass::new ( { int3_field => 3 }, { int2_field => 22 }, { int_field => 111, string_field => "aaa" }, ());
#     eval: test_class::get_int obj1;
#     eval: test_class::get_int obj2;
#     eval: test_class::get_int obj3;
#     eval: test_subclass::get_int2 obj2;
#     eval: test_subclass::get_int2 obj3;
#     eval: test_subsubclass::get_int3 obj3;

api Test_Class {
 
    Full_State(X);
    Self(X)  = object::Self( Full_State( X ) );
    Myself   = Self( oop::Oop_Null );			# Used only for the return type of 'new', everywhere else is Self(X).

    Fields(X) = { string_field:  String,
	          int_field:     Int
                };

    Methods(X) = { get_string: Self(X) -> String,
		   get_int:    Self(X) -> Int
	         };

    get_string:  Self(X)  -> String;
    get_int:     Self(X)  -> Int;

    repack_methods:  (Methods(X) -> Methods(X)) -> Self(X) -> Self(X);
#   repack_fields:   (Fields(X)  -> Fields(X) ) -> Self(X) -> Self(X);	# We don't actually export this.


    pack:        (Fields(X), Void)  ->  X -> Self(X);
    unpack:      Self(X)            -> (X -> Self(X), X);
    new:         (Fields(X), Void)  -> Myself;

};

package test_class: Test_Class{


    package super = object;

    State(X) = STATE { methods: Methods(X),
                       fields:  Fields(X)
                     }
    withtype
        Full_State(X) = (State(X), X)			# Our state record plus those of our subclass chain, if any.
    also
        Self(X) = super::Self( Full_State(X) )
    also
        Methods(X) = { get_string: Self(X) -> String,
		       get_int:    Self(X) -> Int
		     }
    also
	Fields(X)  = { string_field:  String,
		       int_field:     Int
		     }
    ;

    Myself = Self( oop::Oop_Null );

    fun get_string_method (self: Self(X))
        =
        {   my (recreate, (STATE { methods, fields }, substate)) = super::unpack self;
            fields.string_field;
        }

    also
    fun get_int_method    (self: Self(X))
        =
        {   my (recreate, (STATE { methods, fields }, substate)) = super::unpack self;
            fields.int_field;
        }

    also
    fun methods_vector ()
        =
        { get_string => get_string_method,
          get_int    => get_int_method
        }

    also
    fun get_string (self: Self(X))
        =
        {   my (_ /*recreate*/, (STATE { methods, fields => _ }, _ /*substate*/)) = super::unpack self;
            methods.get_string  self;
        }

    also
    fun get_int (self: Self(X))
        =
        {   my (recreate, (STATE { methods, fields }, substate)) = super::unpack self;
            methods.get_int     self;
        }

    also
    fun unpack me
        =
        oop::unpack' (super::unpack me)

    also
    fun repack_methods  update_methods  me
        =
        oop::repack'
            (fn (STATE { methods, fields }) =  STATE { methods => (update_methods methods),   fields })
            (super::unpack me)

    also
    fun override_method_get_int  new_method  me
        =
        oop::repack'
            (fn (STATE { methods, fields }) =  STATE { methods => { get_string => methods.get_string, get_int => new_method },  fields })
            (super::unpack me)

    also
    fun repack_fields  update_fields  me
        =
        oop::repack'
            (fn (STATE { methods, fields }) =  STATE { fields  => (update_fields  fields ),   methods })
            (super::unpack me)

    also
    fun peq _ p q				# Ignored arg is super::equal.
        =
        (get_int    p) == (get_int    q)    and
        (get_string p) == (get_string q)

    also
    fun pack (fields_1, fields_0) substate
        =
        {   result = super::pack fields_0 (STATE { methods => methods_vector (), fields => fields_1 }, substate);
            result = super::override_method_equal  peq  result;
	    result;
	};

    fun new fields_tuple
        =
        pack fields_tuple oop::OOP_NULL;

    fun pack' (fields_1, fields_0) substate
        =
        (super::pack fields_0 (STATE { methods => methods_vector (), fields => fields_1 }, substate) );

};


api Test_Subclass {
 
    Full_State(X);
    Self(X)  = test_class::Self( Full_State( X ) );
    Myself   = Self( oop::Oop_Null );			# Used only for the return type of 'new', everywhere else is Self(X).

    Fields(X) = { int2_field:  Int
                };

    Methods(X) = { get_int2: Self(X) -> Int
	         };

    get_int2:   Self(X)  -> Int;

    repack_methods:  (Methods(X) -> Methods(X)) -> Self(X) -> Self(X);
#   repack_fields:   (Fields(X)  -> Fields(X) ) -> Self(X) -> Self(X);	# We don't actually export this.


    pack:        (Fields(X), test_class::Fields(X), Void)  ->  X -> Self(X);
    unpack:      Self(X)            -> (X -> Self(X), X);
    new:         (Fields(X), test_class::Fields(X), Void)  -> Myself;

};

package test_subclass: Test_Subclass {


    package super = test_class;

    State(X) = STATE { methods: Methods(X),
                       fields:  Fields(X)
                     }
    withtype
        Full_State(X) = (State(X), X)			# Our state record plus those of our subclass chain, if any.
    also
        Self(X) = super::Self( Full_State(X) )
    also
        Methods(X) = { get_int2: Self(X) -> Int
		     }
    also
	Fields(X)  = { int2_field:  Int
		     }
    ;

    Myself = Self( oop::Oop_Null );

    fun get_int2_method (self: Self(X))
        =
        {   my (recreate, (STATE { methods, fields }, substate)) = super::unpack self;
            fields.int2_field;
        }

    also
    fun methods_vector ()
        =
        { get_int2 => get_int2_method
        }

    also
    fun get_int2 (self: Self(X))
        =
        {   my (_ /*recreate*/, (STATE { methods, fields => _ }, _ /*substate*/)) = super::unpack self;
            methods.get_int2  self;
        }

    also
    fun unpack me
        =
        oop::unpack' (super::unpack me)

    also
    fun repack_methods  update_methods  me
        =
        oop::repack'
            (fn (STATE { methods, fields }) =  STATE { methods => (update_methods methods),   fields })
            (super::unpack me)

    also
    fun override_method_get_int2  new_method  me
        =
        oop::repack'
            (fn (STATE { methods, fields }) =  STATE { methods => { get_int2 => new_method },  fields })
            (super::unpack me)

    also
    fun repack_fields  update_fields  me
        =
        oop::repack'
            (fn (STATE { methods, fields }) =  STATE { fields  => (update_fields  fields ),   methods })
            (super::unpack me)

#    also
#    fun peq super_eq p q
#        =
#        super_eq (p, q)
#        and
#        (get_int2 p) == (get_int2 q)

    also
    fun pack (fields_2, fields_1, fields_0) substate
        =
        {   result = super::pack (fields_1, fields_0) (STATE { methods => methods_vector (), fields => fields_2 }, substate);
#            result = object::override_method_equal  peq  result;
	    result;
	};

    fun new fields_tuple
        =
        pack fields_tuple oop::OOP_NULL;

    fun pack' (fields_2, fields_1, fields_0) substate
        =
        (super::pack (fields_1, fields_0) (STATE { methods => methods_vector (), fields => fields_2 }, substate) );

};


api Test_Subsubclass {
 
    Full_State(X);
    Self(X)  = test_subclass::Self( Full_State( X ) );
    Myself   = Self( oop::Oop_Null );			# Used only for the return type of 'new', everywhere else is Self(X).

    Fields(X) = { int3_field:  Int
                };

    Methods(X) = { get_int3: Self(X) -> Int
	         };

    get_int3:   Self(X)  -> Int;

    repack_methods:  (Methods(X) -> Methods(X)) -> Self(X) -> Self(X);
#   repack_fields:   (Fields(X)  -> Fields(X) ) -> Self(X) -> Self(X);	# We don't actually export this.


    pack:        (Fields(X), test_subclass::Fields(X), test_class::Fields(X), Void)  ->  X -> Self(X);
    unpack:      Self(X)            -> (X -> Self(X), X);
    new:         (Fields(X), test_subclass::Fields(X), test_class::Fields(X), Void)  -> Myself;

};

package test_subsubclass: Test_Subsubclass {


    package super = test_subclass;

    State(X) = STATE { methods: Methods(X),
                       fields:  Fields(X)
                     }
    withtype
        Full_State(X) = (State(X), X)			# Our state record plus those of our subclass chain, if any.
    also
        Self(X) = super::Self( Full_State(X) )
    also
        Methods(X) = { get_int3: Self(X) -> Int
		     }
    also
	Fields(X)  = { int3_field:  Int
		     }
    ;

    Myself = Self( oop::Oop_Null );

    fun get_int3_method (self: Self(X))
        =
        {   my (recreate, (STATE { methods, fields }, substate)) = super::unpack self;
            fields.int3_field;
        }

    also
    fun methods_vector ()
        =
        { get_int3 => get_int3_method
        }

    also
    fun get_int3 (self: Self(X))
        =
        {   my (_ /*recreate*/, (STATE { methods, fields => _ }, _ /*substate*/)) = super::unpack self;
            methods.get_int3  self;
        }

    also
    fun unpack me
        =
        oop::unpack' (super::unpack me)

    also
    fun repack_methods  update_methods  me
        =
        oop::repack'
            (fn (STATE { methods, fields }) =  STATE { methods => (update_methods methods),   fields })
            (super::unpack me)

    also
    fun override_method_get_int3  new_method  me
        =
        oop::repack'
            (fn (STATE { methods, fields }) =  STATE { methods => { get_int3 => new_method },  fields })
            (super::unpack me)

    also
    fun repack_fields  update_fields  me
        =
        oop::repack'
            (fn (STATE { methods, fields }) =  STATE { fields  => (update_fields  fields ),   methods })
            (super::unpack me)

#    also
#    fun peq super_eq p q
#        =
#        super_eq (p, q)
#        and
#        (get_int2 p) == (get_int2 q)

    also
    fun pack (fields_3, fields_2, fields_1, fields_0) substate
        =
        {   result = super::pack (fields_2, fields_1, fields_0) (STATE { methods => methods_vector (), fields => fields_3 }, substate);
#            result = object::override_method_equal  peq  result;
	    result;
	};

    fun new fields_tuple
        =
        pack fields_tuple oop::OOP_NULL;

    fun pack' (fields_3, fields_2, fields_1, fields_0) substate
        =
        (super::pack (fields_2, fields_1, fields_0) (STATE { methods => methods_vector (), fields => fields_3 }, substate) );

};


## Copyright (c) 2010 by Jeffrey S Prothero,
## released under Gnu Public Licence version 3.
