## old-threadkit.pkg


# This is essentially the 0.9.8 version of the core threadkit interface.  The only
# thing missing is poll and the low-level I/O synchronization.


package old_threadkit:  Old_Threadkit  {

    package new_threadkit = threadkit

    version = let
	  my (major, minor, reverse) = (case (threadkit::version.version_id)
		 of (a . b . c . _) => (a, b, c)
		  | [a, b] => (a, b, 0)
		  | [a] => (a, 0, 0)
		)		# end case
	  in
	    { major, minor, reverse, date = threadkit::version.date }
	  end
    versionName = threadkit::banner

  # * events *
    type event( X ) = threadkit::event( X )

    sync   = threadkit::sync
    select = threadkit::select

    choose = threadkit::choose

    guard = threadkit::guard

    wrap        = threadkit::wrap
    wrapHandler = threadkit::wrapHandler

    fun wrapAbort (event, abortAct) = threadkit::withNack (fn abortEvt => let
	    fun abortAct' () = (sync abortEvt; abortAct())
	    in
	      threadkit::spawn abortAct'; event
	    end

    always = threadkit::always
    always_x = always()

  # * threads *
    type thread_id = threadkit::thread_id

    make_thread = threadkit::make_thread

    yield = threadkit::yield
    exit = threadkit::exit

    getTid = threadkit::getTid
    sameThread = threadkit::sameTid
    my tidLessThan (tid1, tid2) = (case threadkit::compareTid (tid1, tid2)
	   of LESS => TRUE
	    | _ => FALSE
	  )		# end case
    tidToString = threadkit::tidToString

    threadWait = threadkit::joinEvt

  # * condition variables *
    type cond_var( X ) = maildrop::ivar( X )

    condVariable = maildrop::iVariable

    writeVariable = maildrop::iPut
    exception WriteTwice = maildrop::Put

    readVariable = maildrop::iGet
    readVarEvt = maildrop::iGetEvt

  # * channels *
    type chan( X ) = threadkit::chan( X )

    channel = threadkit::make_mailslot

    send   = threadkit::put_mail
    fun sendc ch msg = threadkit::put_mail (ch, msg)
    accept = threadkit::get_mail

    sameChannel = threadkit::sameChannel

    transmit  = threadkit::put_mail'
    fun transmitc ch msg = threadkit::put_mail' (ch, msg)
    receive   = threadkit::recvEvt

  # * real-time synchronization *
    waitUntil = threadkit::atTimeEvt
    timeout   = threadkit::timeOutEvt

}; #  package old_threadkit 


## COPYRIGHT (c) 1990 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
