## vector-slice.pkg
## Author: Matthias Blume (blume@tti-c.org)

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

###                  "The gods offer no rewards for intellect.
###                   There was never one yet that showed
###                   any interest in it..."
###
###                                 -- Mark Twain's Notebook



package vector_slice : Vector_Slice {		# Vector_Slice	is from   src/lib/std/src/vector-slice.api

    Slice X
        =
	SL  { base:  vector::Vector( X ), start:  Int, stop:  Int };

    # Fast add/subtract avoiding
    # the overflow test:
    #
    infix val --- +++;
    #
    fun x --- y = inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x - inline_t::unt31::copyf_int31 y);
    fun x +++ y = inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x + inline_t::unt31::copyf_int31 y);

    unsafe_get =   inline_t::poly_vector::get;

    vlength =   inline_t::poly_vector::length;

    fun length (SL { start, stop, ... } )
        =
        stop --- start;

    fun get (SL { base, start, stop }, i)
	=
	{   i' =  start + i;

	    if  (i' <  start
            or   i' >= stop
            )
                 raise exception SUBSCRIPT;
	    else
                 unsafe_get (base, i');
            fi;
	};

    fun make_full_slice vec
        =
        SL { base => vec, start => 0, stop => vlength vec };

    fun make_slice (vec, start, olen)
	=
	{   vl = vlength vec;

	    SL { base => vec,

		 start => if (start < 0 or vl < start)  raise exception SUBSCRIPT;
			 else                           start;
                         fi,

		 stop =>
		   case olen   
		       NULL => vl;
		      THE len => 
			 { stop = start +++ len;
			   if (stop < start or vl < stop)  raise exception SUBSCRIPT;
			   else                            stop;
                           fi;
			 };
                   esac
               };
	};

    fun make_subslice (SL { base, start, stop }, i, olen)
	=
	{   start' = if (i < 0 or stop < i )   raise exception SUBSCRIPT;
		     else                      start +++ i;
                     fi;

	    stop'  = case olen   

		     NULL => stop;

		     THE len => {   stop' = start' +++ len;

			            if (stop' < start' or stop < stop')  raise exception SUBSCRIPT;
			            else                                 stop';
                                    fi;
			        };
                     esac;

	    SL { base, start => start', stop => stop' };
	};

    fun base (SL { base, start, stop } )
        =
        (base, start, stop --- start);

    fun to_vector (SL { base, start, stop } )
        =
	vector::tabulate (
            stop --- start,
            fn i =  unsafe_get (base, start +++ i)
        );

    fun is_empty (SL { start, stop, ... } )
        =
        start == stop;

    fun get_item (SL { base, start, stop } )
        =
	if   (start >= stop)
            
             NULL;
	else
            THE (unsafe_get (base, start),
		   SL { base, start => start +++ 1, stop } );
        fi;

    fun keyed_apply f (SL { base, start, stop } )
	=
	apply start
	where
	    fun apply i
                =
		if   (i < stop)
                    
                     f (i --- start, unsafe_get (base, i));
                     apply (i +++ 1);
                fi;

	end;

    fun apply f (SL { base, start, stop } )
	=
	apply start
	where
	    fun apply i
                =
		if   (i < stop)
                    
                     f (unsafe_get (base, i));
                     apply (i +++ 1);
                fi;

	end;

    fun keyed_fold_left f init (SL { base, start, stop } )
	=
	fold (start, init)
	where
	    fun fold (i, a)
                =
		if   (i >= stop)
                    
                     a;
		else
                     fold (i +++ 1, f (i --- start, unsafe_get (base, i), a));
                fi;

	end;

    fun fold_left f init (SL { base, start, stop } )
	=
	fold (start, init)
	where
	   fun fold (i, a)
	       =
	       if   (i >= stop)
	           
		    a;
	       else
		    fold (i +++ 1, f (unsafe_get (base, i), a));
	       fi;
	end;

    fun keyed_fold_right f init (SL { base, start, stop } )
        =
	fold (stop --- 1, init)
	where
	    fun fold (i, a)
                =
		if   (i < start)
                    
                     a;
		else
                     fold (i --- 1, f (i --- start, unsafe_get (base, i), a));
                fi;
	end;

    fun fold_right f init (SL { base, start, stop } )
        =
	fold (stop --- 1, init)
        where
	    fun fold (i, a)
                =
		if   (i < start)
                    
                     a;
                else
                     fold (i --- 1,  f (unsafe_get (base, i), a));
                fi;
	end;

    fun cat sll
        =
	vector::from_list (
	    reverse (
                list::fold_left
                    (fn (sl, l) =  fold_left (!) l sl)
                    []
                    sll
            )
        );

    fun keyed_map f sl
        =
	vector::from_list (reverse (keyed_fold_left (fn (i, x, a) =  f (i, x) ! a) [] sl));

    fun map f sl
        =
	vector::from_list (reverse (fold_left (fn (x, a) =  f x ! a) [] sl));

    fun findi p (SL { base, start, stop } )
	=
	fnd start
	where
	    fun fnd i
                =
		if   (i >= stop)
                    
                     NULL;
		else
                     x = unsafe_get (base, i);

		     if   (p (i, x))
                         
                          THE (i --- start, x);
                     else
                          fnd (i +++ 1);
                     fi;
                fi;

	end;

    fun find p (SL { base, start, stop } )
	=
	fnd start
	where
	    fun fnd i
                =
		if   (i >= stop)
                    
                     NULL;
		else
                     x = unsafe_get (base, i);

		     if   (p x)
                         
                          THE x;
                     else
                          fnd (i +++ 1);
                     fi;
		fi;

	end;

    fun exists p (SL { base, start, stop } )
	=
	ex start
	where
	    fun ex i
		=
		i < stop   and
		(p (unsafe_get (base, i))  or  ex (i +++ 1));
	end;

    fun all p (SL { base, start, stop } )
    =
    al start
    where
	fun al i
            =
            i >= stop   or
            (p (unsafe_get (base, i))  and  al (i +++ 1));
    end;

    fun collate c (SL { base => b1, start => s1, stop => e1 },
		   SL { base => b2, start => s2, stop => e2 } )
        =
	col (s1, s2)
        where
	    fun col (i1, i2)
                =
		if   (i1 >= e1)
                    
		     if  (i2 >= e2  )  EQUAL;
		                   else  LESS;  fi;
		else
                     if  (i2 >= e2  )  GREATER;
		                   else
                                         case (c (unsafe_get (b1, i1), unsafe_get (b2, i2)))
                                           
			                      EQUAL   =>  col (i1 +++ 1, i2 +++ 1);
			                      unequal =>  unequal;
                                         esac;
                                   fi;
                fi;
	end;
};


## Copyright (c) 2003 by The Fellowship of SML/NJ
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
