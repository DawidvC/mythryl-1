#
# A set enum that uses hashing
#
# -- Allen Leung



###           "A plumber has around eight years training in the US.
###            That's to fix my goddamn toilet. Yet, how much training
###            do you have to do to be allowed to build software for
###            a plane carrying hundreds of people?"
###
###                                            -- James Coplien


package hash_set :> HASH_SET =
pkg

   package a = rw_vector

   enum set X = 
      SET of
      { table:  Ref( rw_vector::Rw_Vector( List( X ) ) ),
        size:   Ref( Int ),
        order:  X * X -> order,
        hash:   X -> Int
      }

   fun create { order, hash } N =
   let N = if N <= 10 then 10 else N
   in
      SET { table    = REF (rw_vector::rw_vector (N,[])),
            size     = REF 0,
            order    = order,
            hash     = hash
          }
   end

   fun size (SET { size, ... } ) = *size

   fun bucketSize (SET { table, ... } )
       =
       rw_vector::length *table

   fun is_empty (SET { size, ... } )
       =
       *size = 0

   fun clear (SET { size, table, ... } ) = 
       (table := a::rw_vector (a::length(*table),[]); size := 0)

   and insert (m as SET { size, table = REF T, order, hash, ... } ) x =
   let pos = hash x mod a::length T
       list = a::sub (T, pos)
       fun ins [] = (size := *size + 1; 
                     a::update (T, pos, x . list);
                     if *size > 6 * a::length T then grow m else ())
         | ins (x' . rest) =
           case order (x, x') of
              EQUAL => ()
           |  _     => ins rest
   in  
       ins list
   end

   and grow (SET { size, table = table as REF T, order, hash, ... } ) =
   let my m2 as 
           SET { table = REF T', ... } = create { order=order, hash=hash }
                   (*size * 2 + 10)
   in  a::apply (apply (insert m2)) T; table := T'
   end

   fun remove (SET { size, table = REF T, order, hash, ... } ) x =
   let pos = hash x mod a::length T
       list = a::sub (T, pos)
       fun del ([], list) = ()
         | del (x' . rest, list) =
           case order (x, x') of
              EQUAL   => (size := *size - 1;
                          a::update (T, pos, rest@list)
                         )
           |  _       => del (rest, x' . list)
 
   in  del (list,[])
   end

   fun contains (SET { table = REF T, order, hash, ... } ) x =
   let pos = hash x mod a::length T
       fun find [] = FALSE
         | find (x' . rest) =
            case order (x, x') of
               EQUAL => TRUE
            |  _     => find rest
   in  find (a::sub (T, pos))
   end

   fun fold f x =
      fn (SET { table = REF T, ... } ) =>
          a::fold_left (fn (t, l) => list::fold_left f l t) x T

   fun apply f = 
      fn (SET { table = REF T, ... } ) =>
          a::apply (list::apply f) T

   fun toList set = fold (op . ) [] set

   fun to_string f set
       =
       "{ " + fold (fn (x, "") => f x
                   | (x, l)  => f x + ", " + l
                 ) "" set + "}"  

end



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
