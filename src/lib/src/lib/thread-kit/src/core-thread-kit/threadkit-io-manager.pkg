## threadkit-io-manager.pkg

# Compiled by:
#     src/lib/std/stdlib.make6



# This is a generic I/O manager for threadkit.
# It uses the winix::IO polling mechanism.

# NOTE: It currently does not work if more than
# one thread blocks on the same descriptor.        XXX BUGGO FIXME



package threadkit_io_manager: (weak)  api {

     Io_Descriptor;
     Poll_Request;
     Poll_Result;

     io_mailop:  Poll_Request -> mailop::Mailop( Poll_Result );

     poll_io:      Void -> Void;

     any_waiting:  Void -> Bool;
}

{
    package r = internal_threadkit_types;	# internal_threadkit_types	is from   src/lib/thread-kit/src/core-thread-kit/internal-threadkit-types.pkg
    package s = thread_scheduler;		# thread_scheduler		is from   src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg

						# Poll_Request			def in    src/lib/thread-kit/src/winix/winix-io.api 
		# threadkit:			# winix::io			is from   src/lib/thread-kit/src/unix/winix-io.pkg
		# stock:			# winix::io			is from   src/lib/std/src/unix/winix-io.pkg

    Io_Descriptor = winix::io::Io_Descriptor;
    Poll_Request  = winix::io::Poll_Request;
    Poll_Result   = winix::io::Poll_Result;

    Io_Wait_Item
	=
        { poll_request:     Poll_Request,
	  transaction_id:   Ref( r::Transaction_Id ),
	  #
	  clean_up:         Void -> Void,
	  fate:     fate::Fate( Poll_Result )
	};

    waiting
	=
	REF ([] : List( Io_Wait_Item ));

    # In some OSs (e.g., Linux)
    # this may raise an EINTR error,
    # even though it is non-blocking.
    #
    fun poll l
        =
        winix::io::poll (l, THE time::zero_time)
        except
            _ = [];

    # NOTE:  As in the case of condition variables -- see 
    #     src/lib/thread-kit/src/core-thread-kit/mailop.pkg
    # -- we need to do the clean_up routine when we enable the
    # io_mailop (instead of in the wait_for fate).
    #
    fun io_mailop  poll_request
        =
	r::BASE_MAILOPS [is_ready]
        where
         
	    fun wait_for { transaction_id, clean_up, next }					# Reppy calls this fn blockFn
                =
		pi
                where
		    pi  =   fate::call_with_current_fate
                                (
				 fn fate
                                    =
                                    {   item = { poll_request, transaction_id, clean_up, fate };

					waiting := item ! *waiting;
					next ();
					raise exception FAIL "impossible: io_mailop";
				    }
                                );
		end;

	    fun is_ready ()									# Reppy calls this fn pollFn
                =
                case (poll [poll_request])
		    #
		    [pi] =>  r::MAILOP_ENABLED
                               { priority  =>  -1,
                                 do_it     =>  .{  s::reenable_thread_switching ();   pi;  }	# Reppy calls this field doFn
                               };

		    _    =>  r::MAILOP_BLOCKED wait_for;
                esac;
	end;


    fun same_descriptor (pi, poll_request)
        =
        pi == poll_request;


    # Take an I/O waiting queue and return
    # the cleaned queue along with the list
    # of poll_requests in it.
    #
    # 'Cleaning' consists of dropping cancelled
    # transactions from the wait queue:	
    #
    fun clean wait_queue
        =
	clean' (wait_queue, [], [])
        where
	    fun clean' ([] : List( Io_Wait_Item ), poll_requests, q)
                    =>
                    (poll_requests, q);		    				# Done.

		clean' ( { transaction_id => REF r::CANCELLED_TRANSACTION_ID, ... } ! rest, poll_requests, wait_queue)
                    =>
                    clean' (rest, poll_requests, wait_queue);			# Ignore cancelled transaction.

		clean' ((item as { poll_request, ... } ) ! rest, poll_requests, wait_queue)
                    =>
                    clean'							# Pass everything else through.
                      ( rest,
                        poll_request ! poll_requests,
                        item ! wait_queue
                      );
	    end;
	end;


    # Enqueue a thread that is polling on the ready queue.
    #
    # We have to do some fate hacking to pass the
    # poll info to the thread.
    #
    # We also must catch the case where the transaction
    # has been canceled, since a single thread might be
    # polling on multiple descriptors.
    #
    fun enqueue
            ( { transaction_id as REF (r::TRANSACTION_ID id),
                clean_up,
                fate,
                poll_request
              },
              pi
            )
	    =>
	    {   ufate = fate::call_with_current_fate
			    (
			     fn kfate
				=
				{   fate::call_with_current_fate
					(
					 fn ufate
					    =
					    fate::resume_fate  kfate  ufate
					);

				    fate::resume_fate  fate  pi;
				}
			    );

		transaction_id := r::CANCELLED_TRANSACTION_ID;

		clean_up ();

		s::enqueue_thread (id, ufate);
	    };

        enqueue ( { transaction_id => REF r::CANCELLED_TRANSACTION_ID, ... }, _)
            =>
            ();
    end;


    fun poll_io ()
        =
        case (clean *waiting)
	  
	    ([], _)
		=>
		waiting := [];

	    (poll_requests, wait_queue)
		=>
		case (poll poll_requests)

		    [] => waiting
			      :=
			      list::reverse wait_queue;

		    l  => filter (l, wait_queue, [])
			  where
			      fun filter ([], r, wait_queue)
				      =>
				      waiting
					  :=
					  list::reverse_and_prepend
					      (r, wait_queue);

				  filter
                                      ( pi ! pis,
                                        (item:  Io_Wait_Item) ! items,
                                        wait_queue
                                      )
				      =>
				      if (same_descriptor (pi, item.poll_request))
					  #
					  enqueue (item, pi);
					  filter (pis, items, wait_queue);
				      else
					  filter (pi ! pis,  items,  item ! wait_queue);
				      fi;
			      end;
			  end;
		esac;

        esac;


    fun any_waiting ()
        =
        case *waiting
	    [] => FALSE;
	     _ => TRUE;
        esac;

};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1989-1991 John H. Reppy
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
