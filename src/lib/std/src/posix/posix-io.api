## posix-io.api

# Compiled by:
#     src/lib/std/src/stdlib-core.make6




# Api for POSIX 1003.1 primitive I/O operations



###        "We tried to avoid, you know, records.
###         We were told over and over that was
###         probably the most serious mistake
###         and the reason was the system would never
###         catch on, because we didn't have records."
###
###                           -- Ken Thompson



###        "Where will wants not,
###           a way opens."
###
###                -- Eowyn
###
###                   [J.R.R. Tolkein, "Lord of the Rings"]



api Posix_Io {

    eqtype File_Descriptor;
    eqtype Process_Id;
    
    pipe:  Void -> { infd:  File_Descriptor, outfd:  File_Descriptor };
    dup:  File_Descriptor -> File_Descriptor;
    dup2:  { old:  File_Descriptor, new:  File_Descriptor } -> Void;
    close:  File_Descriptor -> Void;

    read_vector:      (File_Descriptor, Int) -> unt8_vector::Vector;
    read_rw_vector:   (File_Descriptor, rw_unt8_vector_slice::Slice) -> Int;
    write_vector:     (File_Descriptor,    unt8_vector_slice::Slice) -> Int;
    write_rw_vector:  (File_Descriptor, rw_unt8_vector_slice::Slice) -> Int;
    
    Whence = SEEK_SET | SEEK_CUR | SEEK_END;
    
    package fd:
    api {
        include Bit_Flags;		# Bit_Flags	is from   src/lib/std/src/bit-flags.api
        cloexec:  Flags;
    };

    package flags:
    api {
        include Bit_Flags;		# Bit_Flags	is from   src/lib/std/src/bit-flags.api

        append:    Flags;
        nonblock:  Flags;
        sync:      Flags;

	#  Lib7-isms(?): 
        rsync:     Flags;
        dsync:     Flags;
    };

#    include Posix_Common;
    
    dupfd:  { old:  File_Descriptor, base:  File_Descriptor } -> File_Descriptor;
    getfd:   File_Descriptor -> fd::Flags;
    setfd:  (File_Descriptor, fd::Flags) -> Void;
    getfl:   File_Descriptor -> (flags::Flags, posix_file::Open_Mode);
    setfl:  (File_Descriptor,    flags::Flags) -> Void;
    
    lseek:  ((File_Descriptor, file_position::Int, Whence)) -> file_position::Int;

    fsync:  File_Descriptor -> Void;

    Lock_Type = F_RDLCK | F_WRLCK | F_UNLCK;

    package flock :
      api {
          Flock;

          flock
              :
              { ltype:  Lock_Type,
		whence: Whence,
		start:  file_position::Int,
		len:    file_position::Int,
		pid:    Null_Or( Process_Id )
              }
              ->
              Flock;

          ltype:     Flock -> Lock_Type;
          whence:    Flock -> Whence;
          start:     Flock -> file_position::Int;
          len:       Flock -> file_position::Int;
          pid:       Flock -> Null_Or( Process_Id );
      };

     getlk:   (File_Descriptor, flock::Flock) -> flock::Flock;
     setlk:   (File_Descriptor, flock::Flock) -> flock::Flock;
     setlkw:  (File_Descriptor, flock::Flock) -> flock::Flock;
    

     make_binary_reader:  { fd:  File_Descriptor,
			name:  String,
			blocking_mode:  Bool } -> binary_primitive_io::Reader;

     make_text_reader:  { fd:  File_Descriptor,
			 name:  String,
			 blocking_mode:  Bool } -> text_primitive_io::Reader;

     make_binary_writer:  { fd:  File_Descriptor,
			name:  String,
			append_mode:  Bool,
			blocking_mode:  Bool,
			chunk_size:  Int } -> binary_primitive_io::Writer;

     make_text_writer:  { fd:  File_Descriptor,
			 name:  String,
			 append_mode:  Bool,
			 blocking_mode:  Bool,
			 chunk_size:  Int } -> text_primitive_io::Writer;

  }; #  Api Posix_IO 


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
