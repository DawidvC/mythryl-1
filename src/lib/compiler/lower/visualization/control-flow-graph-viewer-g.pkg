## control-flow-graph-viewer-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/visual.make6

# We get invoked from:
#
#     src/lib/compiler/codegen/main/codegen-g.pkg

generic package control_flow_graph_viewer_g (

    package control_flow_graph:  Control_Flow_Graph;		# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
    package graph_viewer:  Graph_Viewer;			# Graph_Viewer		is from   src/lib/compiler/lower/visualization/graph-viewer.api

    package asm
	:
	Instruction_Emitter					# Instruction_Emitter	is from   src/lib/compiler/lower/emit/instruction-emitter.api
        where instruction_set
              ==
              control_flow_graph::instruction_set;
)

: (weak)  api {

    view:  control_flow_graph::Control_Flow_Graph -> Void;
}

{
    package control_flow_graph
        =
        control_flow_graph;

    package l   =  graph_layout;				# graph_layout		is from   src/lib/compiler/lower/visualization/graph-layout.pkg
    package g   =  graph;					# graph			is from   src/lib/graph/graph.pkg
    package fmt =  format_instruction_g( asm );

    view_outline
        =
        low_code_control::get_bool
            "view_outline";

    fun view (control_flow_graph as g::GRAPH g)
	=
	{   my control_flow_graph::INFO { notes, ... }
		=
		g.graph_info;

	    to_string =   fmt::to_string *notes;

	    fun graph _ =   [];

	    color_scale
		= 
		rw_vector::from_list
		  ["#ccffff", "#99ffff", "#66ccff", "#54a9ff", "#ccff99", 
		   "#ffff99", "#ffcc66", "#ff9966", "#cc6666", "#d14949",
		   "#d14949"];

	    fun weight_range ([], min, max)
		    =>
		    (min, max-min);

		weight_range((_, _, control_flow_graph::EDGE { weight, ... } ) ! rest, min, max)
		    =>
		    {   wt = *weight;

			if   (wt > max)  weight_range (rest, min, wt);
			elif (wt < min)  weight_range (rest, wt, max);
			else             weight_range (rest, min, max);
                        fi;
		    };
	    end;

	    my (lo_wt, range)
		=
		weight_range( g.edges (), -1.0, -1.0);

	    fun color w
		=
		{   pos = if (range < 100.0) 
			       floor(((w-lo_wt) * 10.0) // range);
			  else floor (math::log10 (w-lo_wt) * 10.0 // math::log10 range);
			  fi;

		    rw_vector::get (color_scale, pos);
		};

	    entry = head (g.entries ());
	    exit  = head (g.exits   ());

	    red    = l::COLOR "#ff0000"; 
	    yellow = l::COLOR "yellow";
	    green  = l::COLOR "green";

	    fun edge (i, j, control_flow_graph::EDGE { weight, ... } )
		= 
		{   label = l::LABEL (float::to_string *weight);
		    [label, l::COLOR (color *weight)]; 
		};

	    fun title (blknum, REF freq)
		= 
		" " + int::to_string blknum + " freq=" + float::to_string freq;

	    fun ann  notes
		= 
		list::fold_left (fn (a, l) = "/* " + note::to_string a + " */\n" + l)
                                ""
				*notes;

	    fun node (_, control_flow_graph::BLOCK { kind, labels, id, freq, instructions, notes, ... } )
		= 
		case kind
		  
		     control_flow_graph::START
			 => 
			 [l::LABEL("entry" + title (id, freq) + "\n" + ann  notes)];

		     control_flow_graph::STOP
			 => 
			 [l::LABEL("exit" + title (id, freq))];

		     _ => 
			 [ l::LABEL
			     (   "BLK"
			     +   title (id, freq)
			     +   "\n"

			     +   case *labels
				      [] => "";
				     labs => 
				       string::join ":\n" (map label::to_string labs) + ":\n";
				 esac

                             +   ann notes

                             +   if *view_outline
				     "";
				 else
				     list::fold_left 
					(fn (i, t) =  {   text = to_string i;

							  text == ""   ??                t
							               ::  text + "\n" + t;
						      }
					) 
					"" 
					*instructions;
				 fi
                             )
			 ];
		esac;



	   graph_viewer::view
		(l::make_layout { graph, edge, node } control_flow_graph);
	};

};
