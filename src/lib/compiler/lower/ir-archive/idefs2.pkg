#
# This is Reif and Tarjan's algorithm (SIAM J Computing 1981) 
# for computing approximate birthpoints for expressions.   
# For each basic block B,
#   idef (x) = { defs (v_i) | i = 1 ... n in all paths 
#                           idom (x) v_1 v_2 ... v_n x where n >= 1 and
#                                   v_i != idom (x) for all 1 <= i <= n
#             }
# -- Allen Leung



package idefs:  IDEFS
{

   package g    = graph
   package sl   = sorted_list
   package a    = rw_vector
   package rev  = reversed_graph_view

   type Var = Int

   fun compute_idefs { def_use, cfg }
       =
       let my CFG as g::GRAPH cfg  = cfg
	   nnn                   = cfg.capacity ()
	   du                  = a::rw_vector (nnn, ([],[]))
	   cfg.forall_nodes 
		(fn (b, b') => let my (d, u) = def_use (b, b')
			      in  a::update (du, b, (sl::uniq d, sl::uniq u))
			      end)
	   fun dump (name, a) =
	      (print (name$"=");
	       a::keyed_apply (fn (i, v) => 
		   print (int::to_string i + "=" + int::to_string v + " "))
		      (a, 0, NULL);
	       print "\n")

	   fun tarjan_lengauer (g::GRAPH cfg) =
	   let my [ENTRY]    = cfg.entries ()
	       vertex     = a::rw_vector (nnn,-1)
	       parent     = a::rw_vector (nnn,-1)
	       semi       = a::rw_vector (nnn,-1)
	       bucket     = a::rw_vector (nnn,[])
	       dom        = a::rw_vector (nnn,-1)
	       sdefuse    = a::rw_vector (nnn, ([],[]))
	       idefuse    = a::rw_vector (nnn, ([],[]))
	       ancestor   = a::rw_vector (nnn,-1)
	       treeparent = a::rw_vector (nnn,-1)
	       label      = a::rw_vector (nnn,-1)
	       fun dfs (p, n, i) =
		   if a::sub (semi, i) != -1 then n 
		   else
		   (a::update (parent, i, p);
		    a::update (semi, i, n);
		    a::update (vertex, n, i);
		    a::update (label, i, i);
		    dfs'(i, n+1, cfg.next i)
		   ) 
	       and dfs'(p, n,[])    = n
		 | dfs'(p, n, i . is) = dfs'(p, dfs (p, n, i), is) 
	       n = dfs(-1, 0, ENTRY)

	       fun compress v =
		   if a::sub (ancestor, a::sub (ancestor, v)) != -1 then
		     (compress (a::sub (ancestor, v));
		      let label_ancestor_v = a::sub (label, a::sub (ancestor, v))
			  label_v          = a::sub (label, v)
		      in  if a::sub (semi, label_ancestor_v) <
			     a::sub (semi, label_v) then
			     a::update (label, v, label_ancestor_v)
			  else ()
		      end;
		      a::update (ancestor, v, a::sub (ancestor, a::sub (ancestor, v)))
		     )
		  else ()

	       fun link (v, w) = (a::update (ancestor, w, v);
				a::update (treeparent, w, v))
	       fun eval v =
		   if a::sub (ancestor, v) == -1 then v
		   else (compress v; a::sub (label, v))
	       fun evaldefuse v = 
		   let fun up (v, ddd, uuu) =
		       let p = a::sub (treeparent, v)
		       in  if p == -1 then (ddd, uuu)
			   else let my (d, u)   = a::sub (du, v)
				    my (d', u') = a::sub (sdefuse, v)
				in  up (p, sl::merge (d, sl::merge (d', ddd)),
					 sl::merge (u, sl::merge (u', uuu)))
				end
		       end
		   in
		       up (v,[],[])
		   end
	       fun step2_3 0 = ()
		 | step2_3 i = 
		   let w = a::sub (vertex, i)
		       parent_w = a::sub (parent, w)
		       fun step2 [] = ()
			 | step2 ((v, _, _) . vs) =
			   let u      = eval v
			       semi_u = a::sub (semi, u)
			   in  if semi_u < a::sub (semi, w) then 
				  a::update (semi, w, semi_u) 
			       
			       let my (d, u) = evaldefuse v
				   my (d', u') = a::sub (sdefuse, w)
			       in  a::update (sdefuse, w, (sl::merge (d, d'),
						       sl::merge (u, u')))
			       end;
			       step2 vs
			   end
		       step2 (cfg.in_edges w)
		       vertex_semi_w = a::sub (vertex, a::sub (semi, w))
		       a::update (bucket, vertex_semi_w,
				      w . a::sub (bucket, vertex_semi_w))
		       link (parent_w, w)
		       fun step3 [] = ()
			 | step3 (v . vs) =
			   let u = eval v
			   in  a::update (dom, v, if a::sub (semi, u) < a::sub (semi, v)
					      then u else parent_w);
			       let my (d, u) = a::sub (sdefuse, v)
				   my (d', u') = evaldefuse (a::sub (parent, v))
			       in  a::update (idefuse, v, (sl::merge (d, d'),
						       sl::merge (u, u')))
			       end;
			       step3 vs
			   end
		       step3 (a::sub (bucket, parent_w))
		       a::update (bucket, parent_w,[])
		   in  step2_3 (i - 1)
		   end
	       step2_3 (n - 1)
	      /*
	       print("n = " + int::to_string n + "\n")
	       dump("vertex", vertex)
	       dump("parent", parent)
	       dump("semi", semi)
	       dump("dom", dom)
	       dump("ancestor", ancestor)
	       dump("label", label)
	       */
	       fun step4 i = 
		   if i == n then ()
		   else let w = a::sub (vertex, i)
			in  if a::sub (dom, w) != a::sub (vertex, a::sub (semi, w)) then
			       let my (d, u) = a::sub (idefuse, a::sub (dom, w))
				   my (d', u') = a::sub (idefuse, w)
			       in  a::update (idefuse, w, (sl::merge (d, d'),
						       sl::merge (u, u')));
				   a::update (dom, w, a::sub (dom, a::sub (dom, w)))
			       end
			    
			    step4 (i+1)
			end
	       step4 1
	   in  idefuse
	   end
       in 
	   { idefuse     = fn _ => tarjan_lengauer (CFG),
	    ipostdefuse = fn _ => tarjan_lengauer (rev::rev_view CFG)
	   }
       end

}



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
