## prettyprint-device.api

# Compiled by:
#     src/lib/prettyprint/src/Prettyprinting.make6


#
# A pretty-printer device is an abstraction of an output stream.

api Prettyprint_Device {

    #  A device is an abstraction
    # of an output stream:

    Device;

    # A Style is an abstraction of font and color information.
    # A device keeps a stack of styles, with the
    # top of stack being the "current" style.
    #
    # Implementers of this api should extend it
    # with functions for creating style values:

    Style;


    same_style:  ((Style, Style)) -> Bool;	#  Are two styles the same? 



    # Push/pop a style from the devices style stack.
    # A pop on an empty style stack is a no-op.

    push_style:  ((Device, Style)) -> Void;
    pop_style:   Device -> Void;



    # The default style for the device (this is the current style,
    # if the style stack is empty).

    default_style:  Device -> Style;


    depth:       Device -> Null_Or( Int );	#  Maximum printing depth (in terms of boxes) 
    line_width:  Device -> Null_Or( Int );	#  The width of the device 
    text_width:  Device -> Null_Or( Int );	#  The suggested maximum width of text on a line 

    space:    ((Device, Int)   ) -> Void;	#  Write some number of spaces to the device 
    string:   ((Device, String)) -> Void;	#  Write a string in the current style to the device 
    char:     ((Device, Char)  ) -> Void;	#  Write a char   in the current style to the device 
    newline:   Device           -> Void;	#  Write a new-line to the device 
    flush:     Device           -> Void;	#  Flush any buffered output, if the device is buffered.

  };



## COPYRIGHT (c) 1997 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
