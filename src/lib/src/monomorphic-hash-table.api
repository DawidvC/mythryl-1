## monomorphic-hash-table.api
## AUTHOR:   John Reppy
##	    AT&T Bell Laboratories
##	    Murray Hill, NJ 07974
##	    jhr@research.att.com

# Compiled by:
#     src/lib/src/lib7.make6



# The result api of the hash table generic (see hash-table.pkg).


api Monomorphic_Hash_Table {

    package key:  Hash_Key;		# Hash_Key	is from   src/lib/src/hash-key.api

    Hash_Table(X);

    make_table:  (Int, Exception) -> Hash_Table(X);
	#
	# Create a new table; the int is a size hint
	# and the exception is to be raised by find.


    clear:  Hash_Table(X) -> Void;
	#
	# Remove all elements from the table.

    set:  Hash_Table(X) -> ((key::Hash_Key, X)) -> Void;
	#
	# Insert an item.  If the key already has an item
	# associated with it, then the old item is discarded.

    contains_key:  Hash_Table(X) -> key::Hash_Key -> Bool;
	#
	# Return TRUE iff the key is in the domain of the table.

    get:  Hash_Table(X) -> key::Hash_Key -> X;
	#
	# Find an item, the table's exception is raised
	# if the item doesn't exist.

    find:  Hash_Table(X) -> key::Hash_Key -> Null_Or(X);
	#
	# Look for an item, return NULL if the item doesn't exist.

    remove:  Hash_Table(X) -> key::Hash_Key -> X;
	#
	# Remove an item, returning the item.
	# The table's exception is raised if
	# the item doesn't exist.

    vals_count:  Hash_Table(X) ->  Int;
	#
	# Return the number of items in the table.

    vals_list:   Hash_Table(X) -> List(X);
    keyvals_list:  Hash_Table(X) -> List( (key::Hash_Key, X) );
	#
	# Return a list of the items (and their keys) in the table. 

    apply:   (X -> Void) -> Hash_Table(X) -> Void;
    keyed_apply:  (((key::Hash_Key, X)) -> Void) -> Hash_Table(X) -> Void;
	#
	# Apply a function to the entries of the table.

    map:   (X -> Y) -> Hash_Table(X) -> Hash_Table( Y );
    keyed_map:  (((key::Hash_Key, X)) -> Y) -> Hash_Table(X) -> Hash_Table( Y );
	#
	# Map a table to a new table that has the same keys.

    fold:   (((X, Y)) -> Y) -> Y -> Hash_Table(X) -> Y;
    foldi:  (((key::Hash_Key, X, Y)) -> Y) -> Y -> Hash_Table(X) -> Y;

    modify:   (X -> X) -> Hash_Table(X) -> Void;
    modifyi:  (((key::Hash_Key, X)) -> X) -> Hash_Table(X) -> Void;
	#
	# Modify the hash-table items in place. 

# * Also map_maybe_null_fn?? 
    filter:   (X -> Bool) -> Hash_Table(X) -> Void;
    keyed_filter:  (((key::Hash_Key, X)) -> Bool) -> Hash_Table(X) -> Void;
	#
	# Remove any hash table items that do
	# not satisfy the given predicate.

    copy:  Hash_Table(X) -> Hash_Table(X);
	#
	# Create a copy of a hash table 

    bucket_sizes:  Hash_Table(X) -> List( Int );
	#
	# Returns a list of the sizes of the various buckets.
	# This is to allow users to gauge the quality of their
	# hashing function.

  }; #  Monomorphic_Hash_Table 


## COPYRIGHT (c) 1992 by AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
