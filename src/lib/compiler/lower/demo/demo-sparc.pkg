/*---------------------------------------------------------------------------
 * Backend specific stuff.  You'll need one instance of these things 
 * for each architecture.  
 *---------------------------------------------------------------------------*/


# The Sparc instruction set, specialized with respect to the
# user constant and region types.  

package instruction_set_sparc_g
    =
    instruction_set_sparc_g (

        package label_expression = label_expression
        package region = user_region
   )


# How to serialize parallel copies

package sparc_shuffle = sparc_shuffle_g (sparc_instructionset)


# The assembler 

package sparc_asm = sparc_asm_emitter_g
   (package instruction = sparc_instructionset
    package stream = Stream
    package shuffle = sparc_shuffle
    V9 = FALSE  #  we'll generate V8 instructions for now 
   )


# The flowgraph (cluster) representation specialized to the sparc instruction 
# set.

package sparc_flow_graph = 
   FlowGraph (package i = sparc_instructionset 
             package p = user_pseudo_ops
            )

# Because of various Sparc related ugliness.  Pseudo instructions 
# related to integer multiplication/division are handled via callbacks.  
# Here we can decide what actual code to generate.  Here we only
# handle a subset of of the pseudo instructions.

package sparc_pseudo_instructions_g {

  package i = sparc_instructionset
  package c = sparc_instructionset::C

  type format1
      =
       { r: c::cell, i: i::operand, d: c::cell } *
       (i::operand -> i::C.cell) -> List( i::instruction )

  type format2 =
       { i: i::operand, d: c::cell } *
       (i::operand -> i::C.cell) -> List( i::instruction )

  fun error msg
      =
      lowcode_error_message::impossible ("sparc_pseudo_instructions_g." + msg)

  fun umul32 ( { r, i, d }, reduceOpnd) = [i::ARITH { a=i::UMUL, r=r, i=i, d=d } ]
  fun smul32 ( { r, i, d }, reduceOpnd) = [i::ARITH { a=i::SMUL, r=r, i=i, d=d } ]
  fun udiv32 ( { r, i, d }, reduceOpnd) = 
      [i::WRY { r=c::r0, i=i::REG (c::r0) }, i::ARITH { a=i::UDIV, r=r, i=i, d=d } ]

  fun sdiv32 ( { r, i, d }, reduceOpnd) =
  let t1 = c::new_reg()
  in  [i::SHIFT { s=i::RIGHTSHIFT, r=r, i=i::IMMED 31, d=t1 },
       i::WRY { r=t1, i=i::REG (c::r0) },
       i::ARITH { a=i::SDIV, r=r, i=i, d=d }
      ]
  end

  fun cvti2d ( { i, d }, reduceOpnd) = error "cvti2d"
    /* There is no data path between integer and floating point registers.
       So we actually have to use some memory location for temporary
       This is commented out for now.
     */
    /* 
      [i::STORE { s=i::ST, r=c::stackptrR, i=floatTmpOffset, d=reduceOpnd i, mem=stack },
       i::FLOAD { l=i::LDF, r=c::stackptrR, i=floatTmpOffset, d=d, mem=stack },
       i::FPop1 { a=i::FiTOd, r=d, d=d }
      ]
    */
  fun cvti2s _ = error "cvti2s"
  fun cvti2q _ = error "cvti2q"

  fun smul32trap _ = error "smul32trap"
  fun sdiv32trap _ = error "sdiv32trap"

  overflowtrap32 = [] #  not needed 
  overflowtrap64 = [] #  not needed 
};


# Instruction selection module for Sparc.  
#
package sparc_codetree_comp
    = 
    translate_codetree_to_sparc_g (
         package sparc_instructionset = sparc_instructionset
         package sparc_codetree = Codetree
         package pseudo_instrs = sparc_pseudo_instructions_g
         package extension_comp = UserCodetreeExtComp
           (package i = sparc_instructionset
            package t = sparc_codetree
           )
         #  Some sparc specific parameters 
         V9 = FALSE
         muluCost = REF 5
         multCost = REF 3
         divuCost = REF 5
         divtCost = REF 5
         registerwindow = REF FALSE
         useBR = REF FALSE
        )


/*---------------------------------------------------------------------------
 * Okay.  Finally, we can tie the front-end and back-end together.
 *---------------------------------------------------------------------------*/
package sparc_back_end = 
   backend
   (package flowgraph  = sparc_flow_graph
    package translate_codetree_to_target_machine = sparc_codetree_comp
    package instruction_properties  = sparc_instructionset_properties_g (sparc_instructionset)
    package asm        = sparc_asm

    package ra =
      risc_register_allocation 
      (package i         = sparc_instructionset
       package flowgraph = flowgraph
       package asm       = Asm
       package instruction_properties = instruction_properties
       package spill     = register_allocation_spilling_g (		# register_allocation_spilling_g	is from   src/lib/compiler/lower/reg-alloc/register-allocation-spilling-g.pkg
                               package asm = Asm
                                     package instruction_properties = instruction_properties)
       package rewrite   = sparc_instructions_rewrite_g (sparc_instructionset)
       package c         = i::C

       package spill_heuristic = chaitin_spill_heuristic
 
       sp = c::stackptrR
       spill = user_region::spill 

       package spill_table = spill_table_g (				# spill_table_g				is from   src/lib/compiler/codegen/main/spill-table-g.pkg
            initialSpillOffset = 0 #  This is probably wrong!!!!! 
            spillAreaSz = 4000
            architecture = "Sparc" 
           )
       use spill_table
   
       fun pure (i::NOTE { instruction, ... } ) = pure instruction
         | pure (i::LOAD _) = TRUE
         | pure (i::FLOAD _) = TRUE
         | pure (i::SETHI _) = TRUE
         | pure (i::SHIFT _) = TRUE
         | pure (i::FPop1 _) = TRUE
         | pure (i::FPop2 _) = TRUE
         | pure _ = FALSE
   
       #  I'm assuming only r0 and the stack pointer is dedicated 
       package int {

           dedicated  = [i::c::stackptrR, i::c::GPReg 0]
           avail = 
             c::SortedCells::return
              (c::SortedCells::difference(
                c::SortedCells::uniq(
                  c::Regs c::GP { from=0, to=31, step=1 } ),
                c::SortedCells::uniq dedicated)
              )

          fun copy ((rds as [_], rss as [_]), _) =
              i::COPY { dst=rds, src=rss, impl=REF NULL, tmp=NULL }
            | copy((rds, rss), i::COPY { tmp, ... } ) =
              i::COPY { dst=rds, src=rss, impl=REF NULL, tmp=tmp }

          #  spill copy temp 
          fun spillCopyTmp(_, i::COPY { dst, src, tmp, impl }, loc) =
              i::COPY { dst=dst, src=src, impl=impl,
                     tmp=THE (i::DISPLACE { base=sp, disp=get loc } ) }
       
          #  spill register 
           fun spillInstr { an, src, spilledCell, spillLoc } =
               [i::STORE { s=i::ST, r=sp, i=i::IMMED (get spillLoc), d=src, 
                      mem=spill } ]
           
          #  reload register 
           fun reloadInstr { an, dst, spilledCell, spillLoc } =
                [i::LOAD { l=i::LD, r=sp, i=i::IMMED (get spillLoc), d=dst, 
                      mem=spill } ]
       }

       package float {

          dedicated = []
          avail     = c::Regs c::FP { from=0, to=31, step=2 }
   
          fun copy ((fds as [_], fss as [_]), _) =
              i::FCOPY { dst=fds, src=fss, impl=REF NULL, tmp=NULL }
            | copy((fds, fss), i::FCOPY { tmp, ... } ) =
              i::FCOPY { dst=fds, src=fss, impl=REF NULL, tmp=tmp }
   
          fun spillCopyTmp(_, i::FCOPY { dst, src, tmp, impl }, loc) =
              i::FCOPY { dst=dst, src=src, impl=impl,
                      tmp=THE (i::DISPLACE { base=sp, disp=getF loc } ) }
   
          fun spillInstr(_, d, loc) =
              [i::FSTORE { s=i::STDF, r=sp, i=i::IMMED (getF loc), d=d, mem=spill } ]
   
          fun reloadInstr(_, d, loc) =
              [i::FLOAD { l=i::LDDF, r=sp, i=i::IMMED (getF loc), d=d, mem=spill } ]
       }
      )
   )


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
