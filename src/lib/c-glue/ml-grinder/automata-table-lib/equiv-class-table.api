
# This module is responsible for partitioning the character set into
# equivalence classes

api EQUIV_CLASS_TABLE =
api
   type equivclass
   type Symbol = Int

   #  Create a universe U from { min...max } 
   my new:      { min: Symbol, max: Symbol } -> equivclass

   #  Given c, partition on U - { c } and { c } 
   my single:   equivclass -> Symbol -> Void

   #  Given S, partition on U - S and S 
   my set:      equivclass -> List( Symbol ) -> Void

   #  Compute the partitions 
   my classes:  equivclass -> { numclasses:  Int,
                                partitions:   List (Int * List( Symbol ) )
                               }

   #  Compute partitions and create lookup table 
   my mapping:   equivclass -> 
                   { numclasses:  Int,
                    mapping:     rw_vector::Rw_Vector( Int ) #  Symbol to equivclass 
                   }

end
