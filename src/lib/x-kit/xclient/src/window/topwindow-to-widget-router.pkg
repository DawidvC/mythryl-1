## topwindow-to-widget-router.pkg
#
# At the root of each widget hierarchy we need
# a thread which accepts xevents from
#
#     src/lib/x-kit/xclient/src/window/xsocket-to-topwindow-router.pkg
#
# them on down the widgettree.  That's our job here.
#
# For the big picture see the diagram in
#     src/lib/x-kit/xclient/src/window/xsession.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6


stipulate
    include threadkit;					# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package dy  =  display;				# display			is from   src/lib/x-kit/xclient/src/wire/display.pkg
    package di  =  draw_imp;				# draw_imp			is from   src/lib/x-kit/xclient/src/window/draw-imp.pkg
    package dt  =  draw_types;				# draw_types			is from   src/lib/x-kit/xclient/src/window/draw-types.pkg
    package et  =  event_types;				# event_types			is from   src/lib/x-kit/xclient/src/wire/event-types.pkg
    package kb  =  keys_and_buttons;			# keys_and_buttons		is from   src/lib/x-kit/xclient/src/wire/keys-and-buttons.pkg
    package ki  =  keymap_imp;				# keymap_imp			is from   src/lib/x-kit/xclient/src/window/keymap-imp.pkg
    package sn  =  xsession;				# xsession			is from   src/lib/x-kit/xclient/src/window/xsession.pkg
    package s2t =  xsocket_to_topwindow_router;		# xsocket_to_topwindow_router	is from   src/lib/x-kit/xclient/src/window/xsocket-to-topwindow-router.pkg
    package wc  =  widget_cable;			# widget_cable			is from   src/lib/x-kit/xclient/src/window/widget-cable.pkg
herein

    package topwindow_to_widget_router: (weak)  Topwindow_To_Widget_Router {	# Topwindow_To_Widget_Router	is from   src/lib/x-kit/xclient/src/window/topwindow-to-widget-router.api

	# The top-level window (usually a shell widget)
	# should never pass on CO message 					# "CO" == "command out"
	#
	fun make_co_thread  co_event
	    =
	    make_thread "widget-cable root-end CO eater" .{

		do_mailop co_event;

		xgripe::impossible("[widgetcable-rootend: unexpected CO message]");
	    };

	fun make_router (sn::XSESSION { keymap_imp, ... }, xevent_in', dm_config_slot, top_window)
	    =
	    {   make_descendant_window
		    =
		    {   top_window ->  dt::WINDOW { screen, screen_depth, draw_fn, ... };

			fn window_id
			    =
                            dt::WINDOW { window_id, screen, screen_depth, draw_fn };
		    };

		my { kidplug, momplug }
		    =
		    widget_cable::make_widget_cable ();

		my (route_ci, route_k, route_m)
		    =
		    {   momplug ->  wc::MOMPLUG { other_sink, keyboard_sink, mouse_sink, from_kid' };

			make_co_thread from_kid';

			(other_sink, keyboard_sink, mouse_sink);
		    };

		lookup_key =  ki::look_up_keysym  keymap_imp;

		stipulate

		    seqn = REF 0;

		herein

		    fun wrap_mail (route, contents)
			=
			{   n = *seqn;

			    seqn := n+1;

			    wc::ENVELOPE { route, seqn=>n, contents };
			};
		end;

		# Create mailslot to pass client message
		# mailops to the application.
		#
		delete_slot =   make_mailslot ();


		fun do_key (make_msg, key_event)
		    =
		    route_k (make_msg (lookup_key key_event));


		fun do_button_press (path, info:  et::Button_Xevtinfo)
		    =
		    {   info ->  { button, event_point, root_point, timestamp, mousebuttons_state, ... };

			mail =  if (kb::no_mousebuttons_set  mousebuttons_state)
				    #
				    wc::MOUSE_FIRST_DOWN
				      {
					button,
					window_point => event_point,
					screen_point => root_point,
					timestamp
				      };
				else
				    wc::MOUSE_DOWN
				      {
					button,
					window_point => event_point,
					screen_point => root_point,
					  #  invert button so that the state is post-transition 
					state => kb::invert_button_in_mousebutton_state (mousebuttons_state, button),
					timestamp
				      };
				fi;

			  route_m (wrap_mail (path, mail));
		    };

		fun do_button_release (path, info:  et::Button_Xevtinfo)
		    =
		    route_m (wrap_mail (path, msg))
		    where 
			info ->   { button, event_point, root_point, timestamp, mousebuttons_state, ... };

			state =  kb::invert_button_in_mousebutton_state (mousebuttons_state, button);

			msg = if (kb::no_mousebuttons_set  state)
				  #
				  wc::MOUSE_LAST_UP
				      {
					button,
					window_point => event_point,
					screen_point => root_point,
					timestamp
				      };
			      else
				  wc::MOUSE_UP
				      {
					button,
					window_point => event_point,
					screen_point => root_point,
					state,
					timestamp
				      };
			      fi;
		    end;


		always_void
		    =
		    always_mailop ();


		fun do_config_sync (path, config_msg)
		    =
		    always_void
			==>
		       .{   do_mailop (route_m  (wrap_mail (path, wc::MOUSE_CONFIG_SYNC)));
			    do_mailop (route_k  (wrap_mail (path, wc::KEY_CONFIG_SYNC)));
			    do_mailop (route_ci (wrap_mail (path, config_msg)));
			};

		fun route_xevent (path, et::x::KEY_PRESS arg)
			=>
			do_key (fn x = wrap_mail (path, wc::KEY_PRESS x), arg);

		    route_xevent (path, et::x::KEY_RELEASE arg)
			=>
			do_key (fn x = wrap_mail (path, wc::KEY_RELEASE x), arg);

		    route_xevent (path, et::x::BUTTON_PRESS   arg) =>   do_button_press    (path, arg);
		    route_xevent (path, et::x::BUTTON_RELEASE arg) =>   do_button_release  (path, arg);

		    route_xevent (path, et::x::MOTION_NOTIFY { event_point, root_point, timestamp, ... } )
			=>
			route_m (wrap_mail (path, wc::MOUSE_MOTION { window_point=>event_point, screen_point=>root_point, timestamp } ));

		    route_xevent (path, et::x::ENTER_NOTIFY { event_point, root_point, timestamp, ... } )
			=>
			route_m (wrap_mail (path, wc::MOUSE_ENTER { window_point=>event_point, screen_point=>root_point, timestamp } ));

		    route_xevent (path, et::x::LEAVE_NOTIFY { event_point, root_point, timestamp, ... } )
			=>
			route_m (wrap_mail (path, wc::MOUSE_LEAVE { window_point=>event_point, screen_point=>root_point, timestamp } ));

	  /*******
		  | routeXEvt (_, et::x::FOCUS_IN {... } ) = ()
		  | routeXEvt (_, et::x::FOCUS_OUT {... } ) = ()
		  | routeXEvt (_, et::x::KEYMAP_NOTIFY {... } ) = ()
	  ******/

		   route_xevent (path, et::x::EXPOSE { boxes, ... } )
                       =>
		      route_ci (wrap_mail (path, wc::ETC_REDRAW boxes));

	  /*******
		  | routeXEvt (_, et::x::GRAPHICS_EXPOSE {... } ) = ()
		  | routeXEvt (_, et::x::NO_EXPOSE {... } ) = ()
		  | routeXEvt (_, et::x::VISIBILITY_NOTIFY _) = ()
	  ******/

		    route_xevent (path, et::x::CREATE_NOTIFY { parent_window_id, created_window_id, ... } )
			=>
			do_config_sync (path, wc::ETC_CHILD_BIRTH (make_descendant_window  created_window_id));

		    route_xevent (path, et::x::DESTROY_NOTIFY { destroyed_window_id, event_window_id, ... } )
			=>
			destroyed_window_id == event_window_id
			    ##
			    ??   route_ci (wrap_mail (path, wc::ETC_OWN_DEATH))
			    ::   do_config_sync (path, wc::ETC_CHILD_DEATH (make_descendant_window  destroyed_window_id));

		    route_xevent (s2t::ENVELOPE_ROUTE_END _, et::x::UNMAP_NOTIFY _)
			=>
			always_void
			    ==> 
			    .{  give (dm_config_slot, di::DM_UNMAP);  };

		    route_xevent (_, et::x::UNMAP_NOTIFY _)
			=>
			always_void;

		    route_xevent (s2t::ENVELOPE_ROUTE_END _, et::x::MAP_NOTIFY _)
			=>
			always_void
			    ==>
			    .{   give  (dm_config_slot,  di::DM_MAP);   };

		   route_xevent (_, et::x::MAP_NOTIFY _)
		       =>
		       always_void;

	  /*******
		  | routeXEvt (_, et::x::MAP_REQUEST {... } ) = ()
		  | routeXEvt (_, et::x::REPARENT_NOTIFY {... } ) = ()
	  ******/

		  route_xevent (path, et::x::CONFIGURE_NOTIFY { box, ... } )
		      =>
		      route_ci (wrap_mail (path, wc::ETC_RESIZE box));

	  /*******
		  | routeXEvt (_, et::x::ConfigureRequest {... } ) = ()
		  | routeXEvt (_, et::x::GravityNotify {... } ) = ()
		  | routeXEvt (_, et::x::ResizeRequest {... } ) = ()
		  | routeXEvt (_, et::x::CirculateNotify {... } ) = ()
		  | routeXEvt (_, et::x::CirculateRequest {... } ) = ()
		  | routeXEvt (_, et::x::PropertyNotify {... } ) = ()
		  | routeXEvt (_, et::x::SelectionClear {... } ) = ()
		  | routeXEvt (_, et::x::SelectionRequest {... } ) = ()
		  | routeXEvt (_, et::x::SelectionNotify {... } ) = ()
		  | routeXEvt (_, et::x::ColormapNotify {... } ) = ()
	  ******/
	  /****** modification, ddeboer, Jul 2004: route this event when delete. 
	  from ..protocol/event-types.pkg:
	  ... CLIENT_MESSAGE_XEVENT of {
		  window:  window_id,        
		  type:  atom,         the type of the message
		  value:  raw_data        the message value
		}
	  */

		   route_xevent (_, et::x::CLIENT_MESSAGE { window_id, type, ... } )
		       => 
		       always_void
			   ==>
			  .{   give (delete_slot, ());   };

	  # * end mod ***

		   route_xevent (_, event)
		       =>
		       always_void
			   ==>	
			  .{   xtracing::print_if xtracing::toplevel_tracing
				   .{ cat [ "[topwindow_to_widget_router::route_xevent: unexpected event ", xevent_to_string::xevent_name event, "]" ];  };
			   };

		end;			# fun route_xevent

	  #  +DEBUG 
		fun debug_router (result as (_, xevent))
		    = 
		    {   xtracing::print_if xtracing::toplevel_tracing
			    .{ cat [ "topwin2widget: get ", xevent_to_string::xevent_name xevent ];  };

			result;
		    };
	  #  -DEBUG 
		fun router ([], [])
			=>
			router ([debug_router (do_mailop xevent_in')], []);

		    router ([], l)
			=>
			router (reverse l, []);

		    router (front as (msg_out ! r), rear)
			=>
			select [
			    xevent_in'
				==>
				(fn result
				    =
				    router (front, (debug_router result) ! rear)),

			    route_xevent msg_out
				==>
			       .{  router (r, rear);  }
			];
		end;

		( kidplug,
		  (fn pending = router (pending, [])),
		  delete_slot
		);
	  };							# fun make_router 


	# Create the X-event-router imp and draw_imp
	# for a top-level window, returning the
	# input dictionary and top-level window.
	#
	fun make_topwindow_to_widget_router
	    (
              screen       as sn::SCREEN { xsession, ... },
	      screen_depth as sn::SCREEN_DEPTH_IMPS  { gcontext_imp, ... },
	      window_id
	    )
	    =
	    {   xsession ->  sn::XSESSION { xdisplay as dy::XDISPLAY { xsocket, ... }, xsocket_to_topwindow_router, ... };

		dm_config_slot
		    =
		    make_mailslot ();

		dm = di::make_draw_imp
			  (
			    take'  dm_config_slot,
			    gcontext_imp,
			    xsocket_to_topwindow_router,
			    xsocket
			  );

		xevent_in'				# We receive X events via this mailop.
		    =
		    s2t::note_new_toplevel_window
		      (
                        xsocket_to_topwindow_router,
			window_id
		      );

		top_window
		    =
		    dt::WINDOW { window_id, screen, screen_depth, draw_fn=>dm };

		my (kidplug, router, del_slot)
		    =
		    make_router (xsession, xevent_in', dm_config_slot, top_window);

		fun init_router ()
		    =
		    {
			fun loop buf
			    =
			    case (do_mailop xevent_in')
				#
				arg as (_, et::x::EXPOSE _)
				    =>
				    {
											    /* DEBUG */ xtracing::print_if xtracing::toplevel_tracing .{ "initRouter: ExposeEvt"; };
					give  (dm_config_slot,  di::DM_FIRST_EXPOSE);
											    /* DEBUG */ xtracing::print_if xtracing::toplevel_tracing .{ "initRouter: DM_FirstExpose sent"; };
					(arg ! buf);
				    };

				arg => loop (arg ! buf);
			    esac;

											    /* DEBUG */ xtracing::print_if xtracing::toplevel_tracing .{ cat ["initRouter: winId = ", xtype_to_string::xid_to_string window_id]; };
			  router (reverse (loop []));
											    /* DEBUG */ xtracing::print_if xtracing::toplevel_tracing .{ "initRouter: go"; };
		  };

		  xtracing::make_thread  "topwin2widget"  init_router;


		  (kidplug, top_window, del_slot);
	    };										# fun make_toplevel_window_dictionary 

    };											# package toplevel_window

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
