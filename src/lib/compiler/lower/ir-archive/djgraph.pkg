# 
# The algorithm for computing iterated dominance frontier.
# This is the algorithm by Sreedhar, Gao and Lee.   
# 
# --Allen


###            "We shall do a much better programming job,
###             provided we approach the task with a full
###             appreciation of its tremendous difficulty,
###             provided that we respect the intrinsic
###             limitations of the human mind and approach
###             the task as very humble programmers."
###
###                                   -- Alan Turing


generic package DJGraph (dom:  Dominator_Tree) : DJ_GRAPH
{

   package g       = graph
   package dom     = dom
   package a       = rw_vector

   type Dj_Graph (N,E,G) = dom::Dominator_Tree (N,E,G)

   fun error msg = lowcode_error_message::error("DJGraph", msg)

   stats          = FALSE #  Collect statistics? 
   visitCount     = LowCodeControl::getCounter "dj-visit-count"
   idfCount       = LowCodeControl::getCounter "dj-IDF-count"
   idfSize        = LowCodeControl::getCounter "dj-IDF-size"
   liveVisitCount = LowCodeControl::getCounter "dj-live-visit-count"
   maxBlockSize   = LowCodeControl::getCounter "dj-max-block-size"
   totalBlockSize = LowCodeControl::getCounter "dj-total-block-size"
   debug          = FALSE

   fun dj x = x 

   #  Compute dominance frontier 
   fun df (ddd as g::GRAPH dom) =
   let my g::GRAPH cfg = dom::cfg ddd
       lll           = dom::max_levels ddd
       nnn           = dom.capacity ()
       levels      = dom::levelsMap ddd
       in_phi      = a::rw_vector (nnn, 0)  #  has appeared in the df set? 
       stamp       = REF 0
       fun new_stamp () = let s = *stamp + 1 in stamp := s; s end

       fun unmarked (marked, i, stamp:  Int) =
           let s = a::sub (marked, i)
           in  if s == stamp then FALSE else (a::update (marked, i, stamp); TRUE)
           end

       /* 
        * Compute the dominance frontiers of a node
        * Dominance frontier of x: 
        *   The set of all nodes y such that x dominates a predecessor 
        *   of y but x doesn't strictly dominates y.
        */
       fun df x =
       let stamp = new_stamp()
           level_x = a::sub (levels, x)
           fun walk (z, S) = 
               let fun scan ((_, y, _) . es, S) =
                       if a::sub (levels, y) <= level_x and
                           unmarked (in_phi, y, stamp) then scan (es, y . S)
                       else scan (es, S)
                     | scan([], S) = S
                   S = scan (cfg.out_edges z, S)
                   fun walkList([], S) = S
                     | walkList((_, z, _) . es, S) = walkList (es, walk (z, S))
               in  walkList (dom.out_edges z, S)
               end
       in  walk (x,[])
       end

   in  df end

   #  Compute iterated dominance frontier 
   fun idfs (ddd as g::GRAPH dom) = 
   let my g::GRAPH cfg = dom::cfg ddd
       lll           = dom::max_levels ddd
       nnn           = dom.capacity ()
       levels      = dom::levelsMap ddd
       in_phi      = a::rw_vector (nnn, 0)  #  has appeared in the df set? 
       stamp       = REF 0
       fun new_stamp () = let s = *stamp + 1 in stamp := s; s end

       fun unmarked (marked, i, stamp:  Int) =
           let s = a::sub (marked, i)
           in  if s == stamp then FALSE else (a::update (marked, i, stamp); TRUE)
           end

       in_alpha  = a::rw_vector (nnn, 0)  #  has appeared in N_alpha? 
       visited   = a::rw_vector (nnn, 0)  #  has it been visited 
       piggybank = a::rw_vector (lll,[]) #  nodes in the piggy bank 

       n = REF 0
       /* 
        * This algorithm is described in POPL 95 
        */
       fun idfs xs
	   =
	   let stamp = new_stamp()
	       if stats then (idfCount := *idfCount + 1; n := *visitCount) 
		       else ()
	       fun init ([], l) = l
		 | init (x . xs, l) = 
		   let l_x = a::sub (levels, x)
		   in  a::update (in_alpha, x, stamp);
		       a::update (piggybank, l_x, x . a::sub (piggybank, l_x));
		       init (xs, if l < l_x then l_x else l)
		   end 
	       fun visit (y, level_x, S) =
	       let fun scan ([], S) = S
		     | scan((_, z, _) . es, S) =
		       let level_z = a::sub (levels, z)
		       in  if level_z <= level_x and unmarked (in_phi, z, stamp) 
			   then (if a::sub (in_alpha, z) != stamp 
				 then a::update (piggybank, level_z,
					       z . a::sub (piggybank, level_z)) 
				 
				 scan (es, z . S))
			   else scan (es, S)  
		       end
		   fun visitSucc([], S) = S
		     | visitSucc((_, z, _) . es, S) = 
		       visitSucc (es, if unmarked (visited, z, stamp)
				    then visit (z, level_x, S) else S)
		   S = scan (cfg.out_edges y, S)
	       in  if stats then visitCount := *visitCount + 1 
		   visitSucc (dom.out_edges y, S) 
	       end 

	       fun visitAll(-1, S) = S
		 | visitAll (l, S) =
		   case a::sub (piggybank, l) of
		     [] => visitAll (l - 1, S)
		   | x . xs => (a::update (visited, x, stamp);
			       a::update (piggybank, l, xs);
			       visitAll (l, visit (x, a::sub (levels, x), S)))

	       lll = init (xs,-1) 
	       idf = visitAll (lll,[])
	   in  if stats then
		   (idfSize := *idfSize + length idf;
		    maxBlockSize := int::max (*maxBlockSize, nnn);
		    totalBlockSize := *totalBlockSize + nnn
		   )
	       
	       if debug then print("N="$int::to_string nnn$" visits=" $
				   int::to_string(*visitCount - *n)$"\n") 
	       idf
	   end

   in  idfs
   end

   fun LiveIDFs (ddd as g::GRAPH dom) = 
   let my g::GRAPH cfg = dom::cfg ddd
       lll           = dom::max_levels ddd
       nnn           = dom.capacity ()
       levels      = dom::levelsMap ddd

       in_phi      = a::rw_vector (nnn, 0)  #  has appeared in the df set? 
       stamp       = REF 0
       fun new_stamp () = let s = *stamp + 2 in stamp := s; s end

       in_alpha   = a::rw_vector (nnn, 0)  #  has appeared in N_alpha? 
       piggybank  = a::rw_vector (lll,[]) #  nodes in the piggy bank 
       liveIn     = a::rw_vector (nnn, 0) #  is a variable live in 
       visited    = a::rw_vector (nnn, 0)

       fun unmarked (marked, i, stamp:  Int) =
           let s = a::sub (marked, i)
           in  if s == stamp then FALSE else (a::update (marked, i, stamp); TRUE)
           end

       fun LiveIDFs { defs, localLiveIn=[] } = [] #  special case 
         | LiveIDFs { defs=xs, localLiveIn } = 
       let stamp = new_stamp()
           if stats then idfCount := *idfCount + 1 else ()
           /* n = REF 0
           m = REF 0 */

           fun initDefs([], maxLvl) = maxLvl
             | initDefs (x . xs, maxLvl) =
               let lvl_x = a::sub (levels, x)
               in  a::update (in_alpha, x, stamp);
                   a::update (piggybank, lvl_x, x . a::sub (piggybank, lvl_x));
                   initDefs (xs, if maxLvl < lvl_x then lvl_x else maxLvl)
               end 

           fun markLiveIn (b) =
           let fun markPred [] = ()
                 | markPred((j, _, _) . es) = 
                    (if a::sub (liveIn, j) != stamp and
                        a::sub (in_alpha, j) != stamp then
                       markLiveIn j 
                      
                     markPred es
                    )
           in  #  m := *m + 1; 
               a::update (liveIn, b, stamp);
               if stats then liveVisitCount := *liveVisitCount + 1 
               markPred (cfg.in_edges b)
           end

           fun initLiveIn [] = ()
             | initLiveIn (x . xs) = (markLiveIn x; initLiveIn xs)

           fun isLive b = a::sub (liveIn, b) = stamp

           fun visit (y, level_x, S) =
           let fun scan ([], S) = S
                 | scan((_, z, _) . es, S) =
                   let level_z = a::sub (levels, z)
                   in  if level_z <= level_x and 
                          isLive z and
                          unmarked (in_phi, z, stamp) 
                       then (if a::sub (in_alpha, z) != stamp 
                             then a::update (piggybank, level_z,
                                           z . a::sub (piggybank, level_z)) 
                             
                             scan (es, z . S))
                       else scan (es, S)  
                   end
               fun visitSucc([], S) = S
                 | visitSucc((_, z, _) . es, S) = 
                   visitSucc (es, if isLive z and unmarked (visited, z, stamp)
                                then visit (z, level_x, S) else S)
               S = scan (cfg.out_edges y, S)
           in  visitSucc (dom.out_edges y, S) 
           end 

           fun visitAll(-1, S) = S
             | visitAll (l, S) =
               case a::sub (piggybank, l) of
                 [] => visitAll (l - 1, S)
               | x . xs => (a::update (visited, x, stamp);
                           a::update (piggybank, l, xs);
                           visitAll (l, visit (x, a::sub (levels, x), S)))

           lll = initDefs (xs, -1) 
       in  initLiveIn (localLiveIn);
           visitAll (lll, [])
       end

   in  LiveIDFs
   end

}

