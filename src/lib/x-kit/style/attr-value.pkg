## attribute-value.pkg


# Types to add: FontList, StdCursor, Atom, Ro_Pixmap


package attribute_value:  Attribute_Value {

    enum type
      = STRING
      | INT
      | FLOAT
      | BOOL
      | FONT
      | COLOR

    enum attribute_value
      = STRING_VAL of String
      | INT_VAL of Int
      | FLOAT_VAL of real
      | BOOL_VAL of Bool
      | FONT_VAL of xcore::font
      | COLOR_VAL of xcore::color
      | NO_VAL

    exception BAD_ATTRIBUTE_VALUE

    # Strip leading and trailing whitespace from a string. 

    fun strip s
        =
        {   fun front i =   if (c_type::is_space (s, i))       then front (i + 1)   else i;
	    fun back  i =   if (c_type::is_space (s, i - 1))   then back  (i - 1)   else i;

	    start =   front 0;
	    len =   back (size s) - start;

	    if     len < size s
	    then   substring (s, start, len)
	    else   s;
	}
	except
           _ => "";		#  All white space 

    fun cvtBool s
        =
        (case (strip s)
	   of ("true"|"yes"|"Yes"|"on"|"On") => TRUE
	    | ("false"|"no"|"No"|"off"|"Off") => FALSE
	    | _ => raise BAD_ATTRIBUTE_VALUE
	  )   #  end case 

    fun cvtInt s
        =
        {   s =   strip s;

	    start =   if     c_type::is_digit (s, 0))
                      then   0
                      else   1;

	    if   ordof (s, start) == ord "0"
	    then (case ordof (s, start+1)
		    of (  88     #  'X' 
                     | 120     #  'x' 
                    ) => string_conversion::xatoi s
		  | _ => string_conversion::oatoi s
		  )      #  end case 
	    else string_conversion::atoi s;
	}
	except
            _ => raise BAD_ATTRIBUTE_VALUE;

    fun cvtReal s = (#1 (string_conversion::strToReal (strip s, 0)))
	  except _ => raise BAD_ATTRIBUTE_VALUE


    # Convert a string to a color_spec 

    fun cvtColorSpec s
        =
        {   s =   strip s;

	    fun split n
                =
                {   shift =   (4-n)*4;

		    fun extract (s, i)
                        =
			Bits::lshift (string_conversion::xatoi (substring (s, i, n)), shift);

		    xcore::CMS_RGB {
			red = extract (s, 1),
			green = extract (s, 1+n),
			blue = extract (s, 1+n+n)
		      };
		}

	    if   ordof (s, 0) == 35 	#  '#' 
               
	    then (case (size s)
		 of 4 => split 1	#  "#RGB" 
		  | 7 => split 2	#  "#RRGGBB" 
		  | 10 => split 3	#  "#RRRGGGBBB" 
		  | 13 => split 4	#  "#RRRRGGGGBBBB" 
		  | _ => raise BAD_ATTRIBUTE_VALUE
		)   #  end case 
	    else xcore::CMS_Name s;
	}
	except
            _ => raise BAD_ATTRIBUTE_VALUE;

    # Convert a string to the specified kind of style attribute value;
    # this raises BAD_ATTRIBUTE_VALUE if the string has the wrong format.

    fun cvtAttrValue scr
        =
        {   openFont =   Font::openFont (xcore::displayOfScr scr);

	    fun cvtFont s
                =
                (openFont (strip s))
                except
                    _ => raise BAD_ATTRIBUTE_VALUE;

	    colorOfScr =   xcore::colorOfScr scr;

	    fun convert (value, AT_Str) = AV_Str value
	      | convert (value, AT_Int) = AV_Int (cvtInt value)
	      | convert (value, AT_Real) = AV_Real (cvtReal value)
	      | convert (value, AT_Bool) = AV_Bool (cvtBool value)
	      | convert (value, AT_Font) = AV_Font (cvtFont value)
	      | convert (value, AT_Color) = AV_Color (colorOfScr (cvtColorSpec value));

	    convert;
	}		 #  CvtAttrValue 

    fun getInt (AV_Int i) = i | getInt _ = raise BAD_ATTRIBUTE_VALUE
    fun getReal (AV_Real r) = r | getReal _ = raise BAD_ATTRIBUTE_VALUE
    fun getBool (AV_Bool b) = b | getBool _ = raise BAD_ATTRIBUTE_VALUE
    fun get_string (AV_Str s) = s | get_string _ = raise BAD_ATTRIBUTE_VALUE
    fun getColor (AV_Color c) = c | getColor _ = raise BAD_ATTRIBUTE_VALUE
    fun getFont (AV_Font f) = f | getFont _ = raise BAD_ATTRIBUTE_VALUE

    fun getIntOpt (AV_Int i) = THE i | getIntOpt _ = NULL
    fun getRealOpt (AV_Real r) = THE r | getRealOpt _ = NULL
    fun getBoolOpt (AV_Bool b) = THE b | getBoolOpt _ = NULL
    fun getStringOpt (AV_Str s) = THE s | getStringOpt _ = NULL
    fun getColorOpt (AV_Color c) = THE c | getColorOpt _ = NULL
    fun getFontOpt (AV_Font f) = THE f | getFontOpt _ = NULL

}; #  attribute_value 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
