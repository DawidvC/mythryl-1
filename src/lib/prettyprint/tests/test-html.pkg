## test.pkg


cm::make(); #  to compile and load the pp library 

package TextToken {

    type Token = String
    type Style = html_device::Style
    fun string t = t
    fun style t = html_device::styleTT
    fun size t = string::size t
  };

package pp
    =
    prettyprint_debug_g(
        prettyprint_stream_g(
            package token  = TextToken
            package device = html_device
        )
    );

fun kw stream s = (
      pp::push_style (stream, html_device::styleB);
      pp::string stream s;
      pp::pop_style stream)

fun withPP (name, wid) prettyprint_g = let
      saveStrm = *pp::debug_stream
      pp::debug_stream := file::open_for_append("out")
      prettyprintDev = html_device::open_device { wid=wid, textWid=NULL }
      prettyprint_stream = pp::open_stream prettyprintDev
      in
	pp::push_style (prettyprint_stream, html_device::styleTT);
	prettyprint_g prettyprint_stream;
        pp::pop_style prettyprint_stream;
	pp::close_stream prettyprint_stream;
	prettyprint_html_tree::prettyprint_html_tree {
	    putc = fn c => file::write_one (file::stdout, c),
	    puts = fn s => file::write (file::stdout, s)
	  } (html::HTML {
	    version = NULL,
	    head = [html::Head_TITLE name],
	    body = html::BODY {
		background = NULL, bgcolor = NULL, text = NULL,
		link = NULL, vlink = NULL, alink = NULL,
		content = html::Textablock (html_device::done prettyprintDev)
	      }
	  } );
	file::close *pp::debug_stream;
	pp::debug_stream := saveStrm
      end;

local
  fun repeat c n = number_string::padLeft c n ""
  fun simple1 (name, w, n, open_box) () =
	withPP (name, w) (fn stream => (
	  open_box stream (pp::Rel 0);
	    pp::string stream (repeat 'x' n);
	    pp::cut stream;
	    pp::string stream (repeat 'y' n);
	    pp::cut stream;
	    pp::string stream (repeat 'z' n);
	  pp::end_box stream))
  fun simple2 (name, w, n, openBox1, openBox2) () =
	withPP (name, w) (fn stream => (
	  openBox1 stream (pp::Rel 0);
	    pp::string stream (repeat 'v' n);
	    pp::cut stream;
	    openBox2 stream (pp::Abs 2);
	      pp::string stream (repeat 'w' n);
	      pp::cut stream;
	      pp::string stream (repeat 'x' n);
	      pp::cut stream;
	      pp::string stream (repeat 'y' n);
	    pp::end_box stream;
	    pp::cut stream;
	    pp::string stream (repeat 'z' n);
	  pp::end_box stream))
fun begin_horizontal_box stream _ = pp::begin_horizontal_box stream
in
t01a = simple1 ("Test 01a [hbox]", 10, 2, begin_horizontal_box)
t01b = simple1 ("Test 01b [hbox]", 10, 3, begin_horizontal_box)
t02a = simple1 ("Test 02a [vbox]", 10, 2, pp::openVBox)
t02b = simple1 ("Test 02b [vbox]", 10, 3, pp::openVBox)
t03a = simple1 ("Test 03a [hvbox]", 10, 2, pp::begin_horizontal_else_vertical_box)
t03b = simple1 ("Test 03b [hvbox]", 10, 4, pp::begin_horizontal_else_vertical_box)
t04a = simple1 ("Test 04a [wrapbox]", 10, 2, pp::begin_wrap_box)
t04b = simple1 ("Test 04b [wrapbox]", 10, 4, pp::begin_wrap_box)
t05a = simple1 ("Test 05a [box]", 10, 2, pp::open_box)
t05b = simple1 ("Test 05b [box]", 10, 4, pp::open_box)

t11a = simple2 ("Test 11a [hbox/hbox]", 10, 2, begin_horizontal_box, begin_horizontal_box)
t11b = simple2 ("Test 11b [hbox/hbox]", 10, 3, begin_horizontal_box, begin_horizontal_box)
t11c = simple2 ("Test 11c [hbox/hbox]", 10, 4, begin_horizontal_box, begin_horizontal_box)
t12a = simple2 ("Test 12a [hbox/vbox]", 10, 2, begin_horizontal_box, pp::openVBox)
t12b = simple2 ("Test 12b [hbox/vbox]", 10, 3, begin_horizontal_box, pp::openVBox)
t12c = simple2 ("Test 12c [hbox/vbox]", 10, 4, begin_horizontal_box, pp::openVBox)
t13a = simple2 ("Test 13a [hbox/hvbox]", 10, 2, begin_horizontal_box, pp::begin_horizontal_else_vertical_box)
t13b = simple2 ("Test 13b [hbox/hvbox]", 10, 3, begin_horizontal_box, pp::begin_horizontal_else_vertical_box)
t13c = simple2 ("Test 13c [hbox/hvbox]", 10, 4, begin_horizontal_box, pp::begin_horizontal_else_vertical_box)
t14a = simple2 ("Test 14a [hbox/wrapbox]", 10, 2, begin_horizontal_box, pp::begin_wrap_box)
t14b = simple2 ("Test 14b [hbox/wrapbox]", 10, 3, begin_horizontal_box, pp::begin_wrap_box)
t14c = simple2 ("Test 14c [hbox/wrapbox]", 10, 4, begin_horizontal_box, pp::begin_wrap_box)
t15a = simple2 ("Test 15a [hbox/box]", 10, 2, begin_horizontal_box, pp::open_box)
t15b = simple2 ("Test 15b [hbox/box]", 10, 3, begin_horizontal_box, pp::open_box)
t15c = simple2 ("Test 15c [hbox/box]", 10, 4, begin_horizontal_box, pp::open_box)
t16a = simple2 ("Test 16a [vbox/hbox]", 10, 2, pp::openVBox, begin_horizontal_box)
t16b = simple2 ("Test 16b [vbox/hbox]", 10, 3, pp::openVBox, begin_horizontal_box)
t16c = simple2 ("Test 16c [vbox/hbox]", 10, 4, pp::openVBox, begin_horizontal_box)
t17a = simple2 ("Test 17a [vbox/vbox]", 10, 2, pp::openVBox, pp::openVBox)
t17b = simple2 ("Test 17b [vbox/vbox]", 10, 3, pp::openVBox, pp::openVBox)
t17c = simple2 ("Test 17c [vbox/vbox]", 10, 4, pp::openVBox, pp::openVBox)
t18a = simple2 ("Test 18a [vbox/hvbox]", 10, 2, pp::openVBox, pp::begin_horizontal_else_vertical_box)
t18b = simple2 ("Test 18b [vbox/hvbox]", 10, 3, pp::openVBox, pp::begin_horizontal_else_vertical_box)
t18c = simple2 ("Test 18c [vbox/hvbox]", 10, 4, pp::openVBox, pp::begin_horizontal_else_vertical_box)
t19a = simple2 ("Test 19a [vbox/wrapbox]", 10, 2, pp::openVBox, pp::begin_wrap_box)
t19b = simple2 ("Test 19b [vbox/wrapbox]", 10, 3, pp::openVBox, pp::begin_wrap_box)
t19c = simple2 ("Test 19c [vbox/wrapbox]", 10, 4, pp::openVBox, pp::begin_wrap_box)
t20a = simple2 ("Test 20a [vbox/box]", 10, 2, pp::openVBox, pp::open_box)
t20b = simple2 ("Test 20b [vbox/box]", 10, 3, pp::openVBox, pp::open_box)
t20c = simple2 ("Test 20c [vbox/box]", 10, 4, pp::openVBox, pp::open_box)
t21a = simple2 ("Test 21a [hvbox/hbox]", 10, 2, pp::begin_horizontal_else_vertical_box, begin_horizontal_box)
t21b = simple2 ("Test 21b [hvbox/hbox]", 10, 3, pp::begin_horizontal_else_vertical_box, begin_horizontal_box)
t21c = simple2 ("Test 21c [hvbox/hbox]", 10, 4, pp::begin_horizontal_else_vertical_box, begin_horizontal_box)
t22a = simple2 ("Test 22a [hvbox/vbox]", 10, 2, pp::begin_horizontal_else_vertical_box, pp::openVBox)
t22b = simple2 ("Test 22b [hvbox/vbox]", 10, 3, pp::begin_horizontal_else_vertical_box, pp::openVBox)
t22c = simple2 ("Test 22c [hvbox/vbox]", 10, 4, pp::begin_horizontal_else_vertical_box, pp::openVBox)
t23a = simple2 ("Test 23a [hvbox/hvbox]", 10, 2, pp::begin_horizontal_else_vertical_box, pp::begin_horizontal_else_vertical_box)
t23b = simple2 ("Test 23b [hvbox/hvbox]", 10, 3, pp::begin_horizontal_else_vertical_box, pp::begin_horizontal_else_vertical_box)
t23c = simple2 ("Test 23c [hvbox/hvbox]", 10, 4, pp::begin_horizontal_else_vertical_box, pp::begin_horizontal_else_vertical_box)
t24a = simple2 ("Test 24a [hvbox/wrapbox]", 10, 2, pp::begin_horizontal_else_vertical_box, pp::begin_wrap_box)
t24b = simple2 ("Test 24b [hvbox/wrapbox]", 10, 3, pp::begin_horizontal_else_vertical_box, pp::begin_wrap_box)
t24c = simple2 ("Test 24c [hvbox/wrapbox]", 10, 4, pp::begin_horizontal_else_vertical_box, pp::begin_wrap_box)
t25a = simple2 ("Test 25a [hvbox/box]", 10, 2, pp::begin_horizontal_else_vertical_box, pp::open_box)
t25b = simple2 ("Test 25b [hvbox/box]", 10, 3, pp::begin_horizontal_else_vertical_box, pp::open_box)
t25c = simple2 ("Test 25c [hvbox/box]", 10, 4, pp::begin_horizontal_else_vertical_box, pp::open_box)
t26a = simple2 ("Test 26a [wrapbox/hbox]", 10, 2, pp::begin_wrap_box, begin_horizontal_box)
t26b = simple2 ("Test 26b [wrapbox/hbox]", 10, 3, pp::begin_wrap_box, begin_horizontal_box)
t26c = simple2 ("Test 26c [wrapbox/hbox]", 10, 4, pp::begin_wrap_box, begin_horizontal_box)
t27a = simple2 ("Test 27a [wrapbox/vbox]", 10, 2, pp::begin_wrap_box, pp::openVBox)
t27b = simple2 ("Test 27b [wrapbox/vbox]", 10, 3, pp::begin_wrap_box, pp::openVBox)
t27c = simple2 ("Test 27c [wrapbox/vbox]", 10, 4, pp::begin_wrap_box, pp::openVBox)
t28a = simple2 ("Test 28a [wrapbox/hvbox]", 10, 2, pp::begin_wrap_box, pp::begin_horizontal_else_vertical_box)
t28b = simple2 ("Test 28b [wrapbox/hvbox]", 10, 3, pp::begin_wrap_box, pp::begin_horizontal_else_vertical_box)
t28c = simple2 ("Test 28c [wrapbox/hvbox]", 10, 4, pp::begin_wrap_box, pp::begin_horizontal_else_vertical_box)
t29a = simple2 ("Test 29a [wrapbox/wrapbox]", 10, 2, pp::begin_wrap_box, pp::begin_wrap_box)
t29b = simple2 ("Test 29b [wrapbox/wrapbox]", 10, 3, pp::begin_wrap_box, pp::begin_wrap_box)
t29c = simple2 ("Test 29c [wrapbox/wrapbox]", 10, 4, pp::begin_wrap_box, pp::begin_wrap_box)
t30a = simple2 ("Test 30a [wrapbox/box]", 10, 2, pp::begin_wrap_box, pp::open_box)
t30b = simple2 ("Test 30b [wrapbox/box]", 10, 3, pp::begin_wrap_box, pp::open_box)
t30c = simple2 ("Test 30c [wrapbox/box]", 10, 4, pp::begin_wrap_box, pp::open_box)
t31a = simple2 ("Test 31a [box/hbox]", 10, 2, pp::open_box, begin_horizontal_box)
t31b = simple2 ("Test 31b [box/hbox]", 10, 3, pp::open_box, begin_horizontal_box)
t31c = simple2 ("Test 31c [box/hbox]", 10, 4, pp::open_box, begin_horizontal_box)
t32a = simple2 ("Test 32a [box/vbox]", 10, 2, pp::open_box, pp::openVBox)
t32b = simple2 ("Test 32b [box/vbox]", 10, 3, pp::open_box, pp::openVBox)
t32c = simple2 ("Test 32c [box/vbox]", 10, 4, pp::open_box, pp::openVBox)
t33a = simple2 ("Test 33a [box/hvbox]", 10, 2, pp::open_box, pp::begin_horizontal_else_vertical_box)
t33b = simple2 ("Test 33b [box/hvbox]", 10, 3, pp::open_box, pp::begin_horizontal_else_vertical_box)
t33c = simple2 ("Test 33c [box/hvbox]", 10, 4, pp::open_box, pp::begin_horizontal_else_vertical_box)
t34a = simple2 ("Test 34a [box/wrapbox]", 10, 2, pp::open_box, pp::begin_wrap_box)
t34b = simple2 ("Test 34b [box/wrapbox]", 10, 3, pp::open_box, pp::begin_wrap_box)
t34c = simple2 ("Test 34c [box/wrapbox]", 10, 4, pp::open_box, pp::begin_wrap_box)
t35a = simple2 ("Test 35a [box/box]", 10, 2, pp::open_box, pp::open_box)
t35b = simple2 ("Test 35b [box/box]", 10, 3, pp::open_box, pp::open_box)
t35c = simple2 ("Test 35c [box/box]", 10, 4, pp::open_box, pp::open_box)
end
 
fun t40 () = withPP ("Test 20 [C code]", 20) (fn stream => (
      pp::begin_horizontal_box stream;
	kw stream "if";
	pp::space stream 1;
	pp::string stream "(x < y)";
	pp::space stream 1;
	pp::string stream "{ ";
	pp::begin_horizontal_else_vertical_box stream (pp::Abs 4);
	  pp::space stream 1;
	  pp::string stream "stmt1;"; pp::space stream 1;
	  pp::begin_horizontal_box stream;
	    kw stream "if";
	    pp::space stream 1;
	    pp::string stream "(w < z)";
	    pp::space stream 1;
	    pp::string stream "{ ";
	    pp::begin_horizontal_else_vertical_box stream (pp::Abs 4);
	      pp::space stream 1; pp::string stream "stmt2;";
	      pp::space stream 1; pp::string stream "stmt3;";
	      pp::space stream 1; pp::string stream "stmt4;";
	    pp::end_box stream; pp::newline stream;
	    pp::string stream "}";
	  pp::end_box stream;
	  pp::space stream 1; pp::string stream "stmt5;";
	  pp::space stream 1; pp::string stream "stmt6;";
	pp::end_box stream; pp::newline stream;
	pp::string stream "}";
      pp::end_box stream));



## COPYRIGHT (c) 1997 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
