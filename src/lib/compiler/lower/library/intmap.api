## intmap.api



###              "Pessimists, we're told,
###               look at a glass containing
###               50% air and 50% water and
###               see it as half empty.
###
###               Optimists, in contrast,
###               see it as half full.
###
###               Engineers, of course,
###               understand the glass is twice
###               as big as it needs to be."
###
###                                -- Bob Lewis



api INTMAP =
  api
    type intmap( X )

    #  return a named intmap 
    my namednew:  String * Int * exn -> intmap( X )

    #  return an unnamed intmap 
    my new:       Int * exn -> intmap( X )

    #  return the number of elements 
    my elems:     intmap( X ) -> Int

    #  insert a new naming 
    my add:       intmap( X ) -> Int * X -> Void

    #  remove a key; no effect if the key does not exists 
    my rmv:  intmap( X ) -> Int -> Void

    #  Look up a key; raises exception if the key does not exists 
    my map:  intmap( X ) -> Int -> X

    #  Look up a key; return the key if no associated naming exists 
    my mapInt:  Int intmap -> Int -> Int

    #  Look up a key; return the default value if the key is missing 
    my mapWithDefault:  intmap( X ) * X -> Int -> X

    #  iterate over an intmap 
    my apply:  (Int * X -> Void) -> intmap( X ) -> Void

    #  Convert an intmap to a list 
    my intMapToList: intmap( X ) -> List (Int * X)

    #  return the keys in an intmap 
    my keys: intmap( X ) -> List( Int )

    #  return the values in an intmap 
    my values: intmap( X ) -> List( X )

    #  Clear an intmap 
    my clear:  intmap( X ) -> Void

    #  Copy an intmap 
    my copy:  intmap( X ) -> intmap( X ) 
  end



## Copyright 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
