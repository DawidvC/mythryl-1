## unix-syscall.pkg

# Compiled by:
#     src/lib/std/stdlib.make6



# Some system calls may take a long time
# to complete and may be interrupted by
# timer signals before they complete.
#
# This module implements mechanisms to
# protect against this problem.



package syscall: (weak)
api {

    is_intr:  winix::System_Error -> Bool;

    do_syscall:  (X -> Y) -> X -> Y;
	#
	# Do a system call, and restart if it is interrupted 

    do_atomic_syscall:  (X -> Y) -> X -> Y;
	#
	# Do a system call with timer signals masked 

}

{
    package s = thread_scheduler;		# thread_scheduler	is from   src/lib/thread-kit/src/core-thread-kit/thread-scheduler.pkg


    fun is_intr err
        =
        err == posix::error::intr;


    fun do_atomic_syscall f x
        =
        {   s::stop_timer();

	    y = (f x)
                except
                    x = {   s::restart_timer ();
			    raise exception x;
                        };
	
	    s::restart_timer();

	    y;
	};


    fun do_syscall f x
        =
        try 3
        where

	    fun try 0
		    =>
		    do_atomic_syscall f x;

		try n
		    =>
		    (f x)
		    except
			(ex as winix::SYSTEM_ERROR(_, THE err))
			    =
			    if (is_intr err)      try (n - 1);
			    else                  raise exception ex;
			    fi;

	    end;
	end;
};



## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
