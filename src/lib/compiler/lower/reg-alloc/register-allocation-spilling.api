## register-allocation-spilling.api

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# This module manages the spill/reload process. 
# 
# -- Allen Leung

api  Register_Allocation_Spilling {

    package instruction_set:  Instruction_Set;			# Instruction_Set	is from   src/lib/compiler/lower/instruction/instruction-set.api

    package g:  Register_Allocation_Graph			# Register_Allocation_Graph	is from   src/lib/compiler/lower/reg-alloc/ra-graph.api
             =  register_allocation_graph;

    package cells:  Cells; 					# Cells	is from   src/lib/compiler/lower/instruction/cells.api
      sharing instruction_set::cells == cells;

    package cb:  Cells_Basis					# Cells_Basis	is from   src/lib/compiler/lower/instruction/cells-basis.api
              =  cells_basis; 

    Copy_Instr
       =
       (( (List( cb::Cell ),  List( cb::Cell ))), instruction_set::Instruction)
       ->
       List( instruction_set::Instruction );


    # Spill the value associated with reg into spillLoc.
    # All definitions of instruction should be renamed to a new temporary new_reg. 
    #
    Spill
	=
        { instruction:   instruction_set::Instruction,	# Instruction where spill is to occur 
	  reg:           cb::Cell,					# Register to spill 
	  spill_loc:     g::Spill_Loc,					# Logical spill location 
	  kill:          Bool,						# Can we kill the current node? 
	  notes:         Ref( note::Notes )				# Annotations 
	}
        ->
	{ code:          List( instruction_set::Instruction ),    #  instruction + spill code 
	  prohibitions:  List( cb::Cell ),          #  prohibited from future spilling 
	  new_reg:       Null_Or( cb::Cell )        #  the spilled value is available here 
	};

   # Spill the register src into spillLoc.
   # The value is originally from register reg.

    Spill_Src
       =
       {   src:        cb::Cell,				# Register to spill from 
	   reg:        cb::Cell,				# The register 
	   spill_loc:  g::Spill_Loc,				# Logical spill location 
	   notes:      Ref( note::Notes )			# Annotations 
       }
       ->
       List( instruction_set::Instruction );			#  spill code 


    # Spill the temporary associated with a copy into spillLoc
    #
    Spill_Copy_Tmp
	=
	{ copy:       instruction_set::Instruction,		# Copy to spill 
	 reg:         cb::Cell,					# The register 
	 spill_loc:   g::Spill_Loc,				# Logical spill location 
	 notes:       Ref( note::Notes )			# Annotations 
	}
        ->
        instruction_set::Instruction;               		# Spill code 


    # Reload the value associated with reg from spillLoc.
    # All uses of instruction should be renamed to a new temporary new_reg.
    #
    Reload
	=
      { instruction:   instruction_set::Instruction,		# Instruction where spill is to occur 
        reg:           cb::Cell,				# Register to spill 
        spill_loc:     g::Spill_Loc,				# Logical spill location 
        notes:         Ref( note::Notes )			# Annotations 
      }
      ->
      { code:           List( instruction_set::Instruction ),	# Instruction + reload code 
        prohibitions:   List( cb::Cell ),			# Prohibited from future spilling 
        new_reg:        Null_Or( cb::Cell )			# The reloaded value is here 
      };

    # Rename all uses fromSrc to toSrc
    #
    Rename_Src
       =
       { instruction:     instruction_set::Instruction,		# Instruction where spill is to occur 
         from_src:   cb::Cell,					# Register to rename 
         to_src:     cb::Cell					# Register to rename to 
       }
       ->
       { code:         List( instruction_set::Instruction ),	# Renamed instruction 
         prohibitions: List( cb::Cell ),			# Prohibited from future spilling 
         new_reg:      Null_Or( cb::Cell )			# The renamed value is here 
       };

    # Reload the register dst from spillLoc. 
    # The value is originally from register reg.
    #
    Reload_Dst
       =
       { dst:        cb::Cell,					# Register to reload to 
         reg:        cb::Cell,					# The register 
         spill_loc:  g::Spill_Loc,          			# Logical spill location 
         notes:      Ref( note::Notes )				# Annotations 
       }
       ->
       List( instruction_set::Instruction );			# Reload code 

    # The following function rewrites an instruction and insert
    # spill and reload code around it.   The list of spill and reload
    # registers may have duplicates.
    #
    spill_rewrite
	:
        { graph:          g::Interference_Graph,

          spill:          Spill,
          spill_src:      Spill_Src,
          spill_copy_tmp: Spill_Copy_Tmp,

          reload:         Reload, 
          reload_dst:     Reload_Dst, 

          rename_src:     Rename_Src, 
          copy_instr:     Copy_Instr,

          cellkind:       cb::Cellkind,

          spill_set:      g::ppt_hash_table::Hash_Table(  List(  cb::Cell ) ),
          reload_set:     g::ppt_hash_table::Hash_Table(  List(  cb::Cell ) ),
          kill_set:       g::ppt_hash_table::Hash_Table(  List(  cb::Cell ) )
        }
        -> 
        { pt:             g::Program_Point,				# Starting program pt 
          notes:          Ref( note::Notes ),				# Annotations 
          instrs:         List( instruction_set::Instruction )		# Instructions to spill 
        }
        -> 
        List( instruction_set::Instruction );				# Instruction sequence after rewriting 
									# Note that instructions are in reverse order.

};
