## generic-socket.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6


stipulate
    package ps =  pre_socket;				# pre_socket		is from   src/lib/std/src/socket/pre-socket.pkg
herein

    package generic_socket: (weak)  Generic_Socket {	# Generic_Socket	is from   src/lib/std/src/socket/generic-socket.api

	fun socket_fn x
	    =
	    c_interface::c_function "Lib7-Sockets" x;	# Lib7-Sockets		is in     src/runtime/c-libs/lib7-socket/cfun-list.h


	my  c_socket:	 (Int, Int, Int) -> ps::Socket_Fd
	    =
	    socket_fn "socket";				# socket		is in     src/runtime/c-libs/lib7-socket/socket.c


	my c_socket_pair:	 (Int, Int, Int) -> (ps::Socket_Fd, ps::Socket_Fd)
	    =
	    socket_fn "socketPair";				# socketPair		is in     src/runtime/c-libs/lib7-socket/socketpair.c


	fun fd2sock file_descriptor
	    =
	    ps::SOCKET { file_descriptor, nonblocking => REF FALSE };

	#  Create sockets using default protocol 
	#
	fun socket (ps::af::ADDRESS_FAMILY (af, _), ps::socket::SOCKET_TYPE (ty, _))
	    =
	    fd2sock (c_socket (af, ty, 0));

	fun socket_pair (ps::af::ADDRESS_FAMILY (af, _), ps::socket::SOCKET_TYPE (ty, _))
	    =
	    {   my (s1, s2) = c_socket_pair (af, ty, 0);

		( fd2sock s1,
		  fd2sock s2
		);
	    };

	#  Create sockets using the specified protocol 
	#
	fun socket' (ps::af::ADDRESS_FAMILY (af, _), ps::socket::SOCKET_TYPE (ty, _), protocol)
	    =
	    fd2sock (c_socket (af, ty, protocol));

	fun socket_pair' (ps::af::ADDRESS_FAMILY (af, _), ps::socket::SOCKET_TYPE (ty, _), protocol)
	    =
	    {   my (s1, s2) = c_socket_pair (af, ty, protocol);

		( fd2sock s1,
		  fd2sock s2
		);
	    };
    };

end;

## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
