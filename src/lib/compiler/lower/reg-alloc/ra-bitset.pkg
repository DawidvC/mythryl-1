## ra-bitset.pkg



# Imperative bitsets.
#
# This has been written specially for the register allocator.
# The computation of n (n+1)/2 very quickly overflows in practice.

# This has been written specially for the register allocator.
# We use a hash table representation, because it performs better
# than a linear representation except for small numbers of live 
# ranges.


api BITMATRIX = api
    type bitMatrix
    my new:          Int -> bitMatrix
    my add:          bitMatrix -> (Int * Int) -> Bool
    my member:       bitMatrix -> (Int * Int) -> Bool
    my delete:       bitMatrix -> (Int * Int) -> Bool
/*  my clear: 	     bitMatrix * Int -> Void
*/
end


package TriangularBitMatrix :> BITMATRIX = 
pkg

  enum bucket = NIL | B of (Int * Int * bucket)

  enum bitMatrix = 
      INTPAIRMAP of { table:  REF(  rw_vector::Rw_Vector(  bucket ) ), 
		     elems:  Ref( Int ), 
		     size:  Ref( word ), 
		     shift:  word }
  itow = unt::from_int
  wtoi = unt::toInt
  fun roundsize size = let
      fun f (x, shift) = 
	if x >= size then (x, unt.>>(shift, 0w1)) 
	else f (x*2, unt.+(shift, 0w1))
    in f (64, 0w6)
    end

  fun new size = let 
      my (tableSize, shift) = roundsize size   
      table = rw_vector::rw_vector (tableSize, NIL)
    in 					#  note: size is offset by 1 
       INTPAIRMAP { table    = REF table,
		  elems    = REF 0, 
		  size     = REF (itow (tableSize - 1)),
		  shift	   = shift }
    end

  fun moduloSize (i, j, shift, size) = 
    unt::toIntX
      (unt::bitwise_and
         (unt.+(unt.<<(itow i, shift), itow j),
	  size))
			 
  fun member (INTPAIRMAP { table, elems, size, shift, ... } ) (i, j) = let
	fun find NIL = FALSE
	  | find (B(i', j', b)) = (i=i' and j=j') or find b
      in find (rw_vector::get (*table, moduloSize (i, j, shift, *size)))
      end

  fun add (t as INTPAIRMAP { table, elems, size, shift, ... } ) (v as (i, j)) = let
	my REF table = table
	my REF size = size
	isz = wtoi size
      in
	if *elems != isz then let
	    index = moduloSize (i, j, shift, size)
	    fun find NIL = FALSE
	      | find (B(i', j', r)) = (i=i' and j=j') or find r
	    b = rw_vector::get (table, index)
	  in 
	     if find b then FALSE
	     else (unsafe::rw_vector::update (table, index, B (i, j, b)); 
		   elems := *elems + 1;
		   TRUE)
	  end
	else let 
	     newsize=isz+isz+2
	     new = rw_vector::rw_vector (newsize, NIL)
	     newsize1 = itow (newsize - 1)
	     fun redo n = let
	       fun add'(a, b, B (i, j, r)) = 
		   if moduloSize (i, j, shift, newsize1) == n then
		     add'(B (i, j, a), b, r)
		   else add'(a, B (i, j, b), r)
		 | add'(a, b, NIL) = 
		     (rw_vector::set (new, n, a); 
		      rw_vector::set (new, n+isz+1, b);
		      redo (n+1))
	     in add'(NIL, NIL, rw_vector::get (table, n))
	     end
	  in 
	     table:=new;
	     size:=itow (newsize - 1);
	     redo 0 except _ => ();
	     add t v
	  end
      end

  fun delete (INTPAIRMAP { table=REF table, elems, size, shift, ... } ) (i, j) = let
    fun find NIL = NIL
      | find (B(i', j', b)) =
	  if i==i' and j==j' then (elems := *elems - 1; b) else B (i', j', find b)
    index = moduloSize (i, j, shift, *size)
    n = *elems
  in unsafe::rw_vector::update (table, index, find (rw_vector::get (table, index)));
     *elems != n #  Changed? 
  end

end



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
