# ***********************************************************************
#
# Project: sml/Tk: an Tk Toolkit for sml
# Author: Stefan Westmeier, University of Bremen
# $Date: 2001/03/30 13:39:14 $
# $Revision: 3.0 $
# Purpose of this file: Mark Module
#
# ***********************************************************************

# Compiled by:
#     src/lib/tk/src/tk.make6



###          "Make not small plans, they hold no magic to
###           stir men's souls, and they always fail."
###
###                             -- Edward F. Maeder



package mark: (weak)  Mark {		# Mark	is from   src/lib/tk/src/mark.api

	stipulate

            include basic_tk_types;
            include basic_utilities;
        herein
	    exception MARK_ERROR  String;

	    fun show (MARK (n, m))   =>  (int::to_string n) $ "." $ (int::to_string m);
	        show (MARK_TO_END n) =>  (int::to_string n) $ ".end";
	        show MARK_END        =>  "end";
            end;


	    fun show_l ml
                =
                string::join
                    " "
                    (map
                        (fn (m1, m2)
                            =
                            (show m1) $ " " $ (show m2)
                        )
                        ml
                    );

	    fun read m
                =
		{
		    my (x, y)   = string_util::break_at_dot m;
		
		    if (size y == 0   and   x== "end") 
			MARK_END;
		    elif ((not (size x == 0))  and  y == "end") 
			MARK_TO_END (string_util::to_int x);
		    else
			MARK (string_util::to_int x, string_util::to_int y);
                    fi;
		};

	    fun read_l ml
                =
		dezip (map read mls)
		where
		    mls = string_util::words ml;

		    fun dezip []        => [];
		        dezip (x . y . l) => (x, y) . (dezip l);
		        dezip _         => raise exception MARK_ERROR "MARK::readL: odd number of marks";
                    end;
		end;
	end; 
    };


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
