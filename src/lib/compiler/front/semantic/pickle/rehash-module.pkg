# rehash-module.pkg
#
#  (C) 2001 Lucent Technologies, Bell Labs
#
# Compute hash for a library that is the product of filtering
# a larger dictionary.  Since every dictionary (after unpickling)
# contains references to its own hash id, re-hashing requires
# the original hash id (to be able to recognize it).  The result
# of re-hashing will then be the same value that would have been
# produced had the smaller dictionary been pickled (and hashed) in
# the first place.

# Compiled by:
#     src/lib/compiler/core.make6

package rehash_module: (weak)
api {

    add_version
        :
        { picklehash: picklehash::Picklehash,
	  version: String
	}
	->
        picklehash::Picklehash;

    rehash
        :
        { symbol_table:         symbol_table::Symbol_Table,
          original_picklehash:  picklehash::Picklehash,
          version:              String
        }
	->
        picklehash::Picklehash;
}

{
    fun add_version { picklehash, version }
        =
        {   crc =
                crc::from_string
                    (byte::bytes_to_string
                        (picklehash::to_bytes picklehash));

									# crc		is from   src/lib/compiler/src/library/crc.pkg
									# byte		is from   src/lib/std/src/byte.pkg
									# picklehash	is from   src/lib/compiler/front/basics/mlcomp/picklehash.pkg
									# char_vector	is from   src/lib/std/char-vector.pkg

	    fun append (c, x)
                =
                crc::append (x, c);


	    crc' =
                char_vector::fold_left
                    append
                        crc
                        version;
	
	    picklehash::from_bytes
                (byte::string_to_bytes
                    (crc::to_string crc'));
	};


    fun rehash { symbol_table, original_picklehash, version }
        =
	add_version
            {
              picklehash =>  .picklehash (pickle_module::pickle_symbol_table (pickle_module::REHASH original_picklehash) symbol_table),
	      version
            };
};
