## sparc-fps-registers.pkg --- FPS registerS USED ON the Sparc

# Compiled by:
#     src/lib/compiler/backend-sparc.make6

package sparc_fps_regs: (weak)  Cpsregs {		# Cpsregs	is from   src/lib/compiler/codegen/compile-fps/fps-registers.api

    package codetree = sparc_codetree;			# sparc_codetree	is from   src/lib/compiler/codegen/sun/sparc-codetree.pkg
    package c= sparc_cells;				# sparc_cells	is from   src/lib/compiler/lower/sun/instruction/sparc-cells.pkg

    gp = c::gpreg;
    fp = c::fpreg;

    fun reg r = codetree::REG (32, gp r); 
    fun freg f = codetree::FREG (64, fp f);

    return_ptr		= gp 15;        

    stipulate

	stdarg0			= reg (24); #  %i0 
	stdcont0		= reg (25); #  %i1 
	stdclos0		= reg (26); #  %i2 
	stdlink0		= reg (1);  #  %g1 
	baseptr0		= reg (27); #  %i3 
	limitptr0		= reg (4);  #  %g4 
	current_thread_ptr0	= reg (29); #  %i5 
	storeptr0		= reg (5);  #  %g5 
	exnptr0			= reg (7);  #  %g7 
	gc_link0		= codetree::REG (32, return_ptr); 
	frameptr0       	= reg (30);

    herein

	virtual_frame_pointer	= sparc_cells::new_reg();
	vfptr			= codetree::REG (32, virtual_frame_pointer);

	fun stdarg _		= stdarg0;
	fun stdcont _		= stdcont0;
	fun stdclos _		= stdclos0;

	fun stdlink _		= stdlink0;
	fun baseptr _		= baseptr0;
	fun limitptr _		= limitptr0;

	fun current_thread_ptr _	= current_thread_ptr0;

	exhausted		= THE (codetree::CC (codetree::GTU, c::psr));  /* %psr */ 
	fun storeptr _		= storeptr0;
	allocptr		= reg (6);  #  %g6 
	fun exnptr _		= exnptr0;

	fun gc_link _		= gc_link0;

	fun frameptr _  	= frameptr0;

	# Warning %o2 is used as the asm_tmp
	#
	miscregs =
	    map reg
		[2, 3,				#  %g2-%g3 
		 8, 9,				#  %o0-%o1 
		 16, 17, 18, 19, 20, 21, 22, 23,  #  %l0-%l7 
		 28, 31,				#  %i4, %i6, %i7 
		 11, 12, 13];			#  %o3-%o5 
	calleesave = rw_vector::from_list miscregs;

	#  Note: We need at least one register for shuffling purposes. 
	#
	fun fromto (n, m, inc)
            =
            if (n>m)   [];
            else       n ! fromto (n+inc, m, inc);
            fi;

	floatregs   =  map freg (fromto (0, 31, 2));
	savedfpregs =  [];

	stipulate

	    fun un_reg (codetree::REG (_, r)) => r;
	        un_reg _ => raise exception FAIL "sparcCpsRegs: unREG";
            end;

	    package sc= cells_basis::sorted_cells;	# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg

	    --- =  sc::difference;

	    infix val  --- ;

	herein
	    avail_r =
		map un_reg ([stdlink0, stdclos0, stdarg0, stdcont0, gc_link0]
			   @ miscregs);

	    all_regs = map gp (fromto (0, 31, 1));
	    dedicated_r = sc::return (sc::uniq all_regs --- sc::uniq avail_r);

	    avail_f =  map fp (fromto (0, 30, 2));
	    dedicated_f = [];

	    signed_gctest = FALSE;
	    address_width = 32;

	    ccall_caller_save_r =
		map un_reg [limitptr0, storeptr0, exnptr0, allocptr];
	    ccall_caller_save_f = [];
	end; # local
    end; #  local 
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1998 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
