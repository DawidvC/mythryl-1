fun make file = if cm::make file then () else raise exception FAIL("Can't load "$file);
fun again () = run "make.pkg";

make "../ffi-packager/ffi-packager.cm";

/*---------------------------------------------------------------------------
 * 
 * This program drives the sml-OpenGL library packaging process
 *
 *---------------------------------------------------------------------------*/
package p =
gift_wrap_g
(   use ffi_packager
    use gift_wrap_defaults
    package a = Ast

    name     = "OpenGL"
    name'    = "OpenGL"
    version  = "0.1"
    enums    = [("OpenGL-enums.sml", "OpenGLEnums", "")]
    defines  = [("OpenGL-macros.sml", "OpenGLMacros", [("^GL_", FALSE)])
		   , ("OpenGLU-macros.sml", "OpenGLUMacros", [("^GLU_", FALSE)])
		   , ("OpenGLX-macros.sml", "OpenGLXMacros", [("^GLX_", FALSE)])
		   , ("OpenGLUT-macros.sml", "OpenGLUTMacros", [("^GLUT_", FALSE)])
		   ]
    file_regexp = "GL"

    fun remove_fptr _ = FALSE

    fun init info
	= 
	{   use ffi_transforms;
	    infix &&;

	    #  Type transformations applied to use GL code 

	    #  use GL boolean type 
	    Bool = BoolIfCtypeIs "GLBoolean";

	    #  Primitive conversions 
	    Prim = FastString o Bool;

	    /* Open GL has a lot of functions taking a pointer as an argument.
	     * The pointer is an array whose length is implicit.
	     * The following transformation make the array a tuple in ML.
	     */
	    fun doVec n re
                = 
		ForeachIn (If (LastArg 0 &&     #  only apply to last argument 
			      FunCnameP (re::matches re)) 
			     (FastFixedTupleArg None n));

	    fun doVec' n re
                = 
		ForeachIn (If (FunCnameP (re::matches re)) 
			     (FastFixedTupleArg None n));

	    vec4 =   doVec 4
	             "^gl (LightModel[dfis]v|Light[difs]v|Material[difs]v|Fog[fi]v|.*4u?[dfis]v)$";

	    vec3 = doVec 3 "^gl.*3u?[dfis]v$" o
		       doVec' 3 "^gluTessVertex$" ;

	    vec2 = doVec 2 "^gl.*2u?[dfis]v$" o
		       doVec' 2 "^glRect[dfis]v$" ;


	    /* An Open GL function glGetXXX takes a call-by-reference 
	     * pointer as argument.  The following transformations make it
	     * call-by-value.
	     */
	    fun doGet n convert re
                = 
		ForeachIn (If (LastArg 0 && #  only apply to last argument 
			      FunCnameP (re::matches re)
			     )
			     (FastFixedTupleRet convert n)
			 );

	    get = doGet 4 None 
	          "^glGet (Double|Float|Integer|ClipPlane|Light[fi]|.*Map[dif]|Mat.*)v$" o
		      doGet 4 BoolRet "^glGetBooleanv$";

	    /* Some functions like glSelectBuffer have the following
	     * prototype:
	     *    void glSelectBuffer (GLsizei size, GLuint * buffer);
	     * We'll convert it so that it takes a ML Rw_Vector as argument.
	     */

	    fun doLenArr re
                =
                ForeachIn2 (If (Cond2 (FunCnameP (re::matches re), Yes))
					    (ArrayArg' None));

	    lenArr =   doLenArr "^gl (SelectBuffer)$";


	    #  Combine all the conversions 

	    convert =   Prim o vec2 o vec3 o vec4 o get o lenArr;

	    tr::declare info "^f-" convert;			#  Apply it to all f-xxx files!
	}
)


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
