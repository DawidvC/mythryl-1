## optimize-mutually-recursive-functions.pkg
## monnier@cs.yale.edu 

# Compiled by:
#     src/lib/compiler/core.make6



# This is one of the A-Normal Form optimization passes --
# for context see the comments in
#
#     src/lib/compiler/upper/anormal/anormal.api
#



#    "Decide which functions are candidates for inlining,
#     rewrite curried functions like 'uncurry' did in the
#     old optimizer, and break up groups of apparently
#     mutually-recursive functions into smaller subgroups.
#
#    "Other than introducing loop pre-headers, done in
#     'loopify', and deciding which function calls to
#     inline and to perform the inlining itself, done in
#     'fcontract', this phase corresponds to the 'expand'
#     phase of the old optimizer."
#
#     [...]
#
#    "The reason to move the actual inlining out of
#    'optimize_mutually_recursive_functions' and
#     into 'fcontract' was so that cascading inlining
#     could take place.  It also simplified
#     'optimize_mutually_recursive_functions' slightly.
#     Another reason was that 'split' requires that the choice
#     of inlining candidates be separate from the inlining itself."
#
#          -- Principled Compilation and Scavenging
#             Stefan Monnier, 2003 [PhD Thesis, U Montreal]
#             http://www.iro.umontreal.ca/~monnier/master.ps.gz 



# This module does various MUTUALLY_RECURSIVE_FNS-related transformations:
# - MUTUALLY_RECURSIVE_FNSes are split into their strongly-connected components
# - small non-recursive functions are marked inlinable
# - curried functions are uncurried



###          "Good engineering doesn't consist
###           of random acts of heroism."
###
###                     -- Harry Robinson



api Optimimize_Mutually_Recursive_Functions {

    optimize_mutually_recursive_functions:  anormal::Program -> anormal::Program;
};

# Maybe later:
# - hoisting of inner functions out of their englobing function
#   so that the outer function becomes smaller, giving more opportunity
#   for inlining.
# - eta expand escaping functions
# - loop-preheader introduction


package optimimize_mutually_recursive_functions : Optimimize_Mutually_Recursive_Functions		# Optimimize_Mutually_Recursive_Functions	is from   src/lib/compiler/upper/optimize/optimize-mutually-recursive-functions.pkg
=
package {

    stipulate

	package f  = anormal;			# anormal		is from   src/lib/compiler/upper/anormal/anormal.pkg
	package s  = int_red_black_set;		# int_red_black_set	is from   src/lib/src/int-red-black-set.pkg
	package m  = int_red_black_map;		# int_red_black_map	is from   src/lib/src/int-red-black-map.pkg
	package pp = prettyprint_anormal;	# prettyprint_anormal	is from   src/lib/compiler/upper/anormal/prettyprint-anormal.pkg
	package lt = highcode;			# highcode		is from   src/lib/compiler/upper/highcode/highcode.pkg
	package lk = highcode_guts;		# highcode_guts		is from   src/lib/compiler/upper/highcode/highcode-guts.pkg
	package ou = opt_utils;			# opt_utils		is from   src/lib/compiler/upper/optimize/optutils.pkg
	package ctrl = highcode_control;	# highcode_control	is from   src/lib/compiler/upper/main/highcode-control.pkg

    herein

	say = control_print::say;

	fun bug msg
            =
            error_message::impossible ("optimize_mutually_recursive_functions: " + msg);

	fun buglexp (msg, le) = { say "\n"; pp::print_lexp le; say " "; bug msg;};
	fun bugval  (msg,  v) = { say "\n"; pp::print_sval  v; say " "; bug msg;};

	fun assert p
            =
            if (not p)
                bug ("assertion failed");
            fi;

	fun bugsay s
            =
            say ("!*!*! optimize_mutually_recursive_functions: " + s + " !*!*!\n");

	cplv = highcode_var::copy_highcode_variable;

	# To limit the amount of uncurrying:
	#
	maxargs = ctrl::maxargs;

	package scc_node
	    =
	    package {
	        Key = highcode_var::Highcode_Variable;
		compare = int::compare;
	    };

	package scc
	    =
	    digraph_strongly_connected_components_g(
                scc_node
            );

	Info = FUN  Ref( Int )
	     | ARG  (Int, Ref ((Int, Int)))
             ;

	# float_expression: Int REF intmapf -> Lambda_Expression) -> (Int * intset * Lambda_Expression)
	# The intmap contains refs to counters.  The meaning of the counters
	# is slightly overloaded:
	# - if the counter is negative, it means the Highcode_Variable
	#   is a locally known function and the counter's absolute value denotes
	#   the number of calls (off by one to make sure it's always negative).
	# - else, it indicates that the Highcode_Variable is a
	#   function argument and the absolute value is a (fuzzily defined) measure
	#   of the reduction in code size/speed that would result from knowing
	#   its value (might be used to decide whether or not duplicating code is
	#   desirable at a specific call site).
	# The three subparts returned are:
	# - the size of Lambda_Expression
	# - the set of freevariables of Lambda_Expression (plus the ones passed as arguments
	#   which are assumed to be the freevars of the fate of Lambda_Expression)
	# - a new Lambda_Expression with MUTUALLY_RECURSIVE_FNSes rewritten.
	#
	fun float_expression mf depth lambda_expression
	    =
	    {   loop =  float_expression mf depth;

		fun lookup (f::VAR lv) =>  m::get (mf, lv);
		    lookup _           =>  NULL;
		end;

		fun s_rmv (x, s)
		    =
		    s::delete (s, x)
		    except
			not_found = s;

		fun addv (s, f::VAR lv) => s::add (s, lv);
		    addv (s, _) => s;
		end;

		fun addvs (s, vs) =  fold_left  (fn (v, s) = addv  (s, v))  s  vs;
		fun rmvs (s, lvs) =  fold_left  (fn (l, s) = s_rmv (l, s))  s  lvs;


		# Look for free vars in the primitive_operation descriptor.
		# This is normally unnecessary since these are special vars anyway
		#
		fun fpo (fv, (NULL: Null_Or( f::Dictionary ), po, lambda_type, tycs))
			=>
			fv;

		    fpo (fv, (THE { default, table },   po, lambda_type, tycs))
			=>
			addvs (addv (fv, f::VAR default), map (f::VAR o #2) table);
		end;


		# Look for free vars in the
		# primitive_operation descriptor.
		#
		# This is normally unnecessary since
		# these are exception vars anyway:
		#
		fun fdcon (fv, (s, var_home::EXCEPTION (var_home::HIGHCODE_VARIABLE lv), lambda_type))
			=>
			addv (fv, f::VAR lv);

		    fdcon (fv, _)
			=>
			fv;
		end;


		# Recognize the curried essence of a function.
		# - hd: fkind Null_Or identifies the head of the curried function
		# - na: Int gives the number of args still allowed
		#
		fun curry (hd, na)
			  (le as (f::MUTUALLY_RECURSIVE_FNS([(fk as { inlining_hint=>f::INLINE_IF_SIZE_SAFE, ... }, f, args, body)],
					f::RET [f::VAR lv])))
			=>
			if   (lv == f and na >= length args)

			     case (hd, fk)

				 # Recursive functions are only accepted for uncurrying
				 # if they are the head of the function or if the head
				 # is already recursive

				 ( (THE { is_recursive=>NULL, ... },{ is_recursive=>THE _, ... } )
				 | (THE { calling_convention=>f::CALLING_CONVENTION_GENERIC, ... },{ calling_convention=>f::CALLING_CONVENTION_FUNCTION (lk::FNFLAG_VARIABLE _), ... } )
				 | (THE { calling_convention=>f::CALLING_CONVENTION_FUNCTION _, ... },{ calling_convention=>f::CALLING_CONVENTION_GENERIC, ... } ))
				     =>
				     ([], le);

				_    =>
				     {   my (funs, body)
					     =
					     curry ( case hd
                                                         NULL => THE fk;
							 _    => hd;
                                                     esac,

						     na - (length args)
                                                   )
                                                   body;

					 ((fk, f, args) ! funs, body);
				     };
			     esac;
			else
			     #  this "never" occurs, but dead-code removal is not bullet-proof 
			     ([], le);
			fi;

		    curry _ le => ([], le);
		end;

		exception UNCURRYABLE;

		# Do the actual uncurrying:
		#
		fun uncurry (args as (fk, f, fargs) ! _ ! _, body)
			=>
			{   f' = cplv f;	#  the new fun name 

			    # Find the rtys of
                            # the uncurried function:
			    #
			    fun getrtypes (( { is_recursive=>THE (rtys, _), ... }: f::Function_Kind, _, _), _)
                                    =>
                                    THE rtys;

			        getrtypes ((_, _, _), rtys)
                                    =>
				    null_or::map

                                        fn [lambda_type] =>  #2 (lt::ltd_fkfun lambda_type);
					   _             =>  bug "strange is_Recursive";
                                        end

                                        rtys;
                            end;

			    # Create the new fkinds:
			    #
			    ncconv
				=
				case (.calling_convention (#1 (head args)))


				    f::CALLING_CONVENTION_GENERIC
					=>
					f::CALLING_CONVENTION_GENERIC;

				    _   =>
					case (.calling_convention (#1 (list::last args)))


					    f::CALLING_CONVENTION_FUNCTION (lk::FNFLAG_VARIABLE(_, raw))
						=>
						f::CALLING_CONVENTION_FUNCTION (lk::FNFLAG_VARIABLE (TRUE, raw));

					    calling_convention
						=>
						calling_convention;
					esac;
				esac;

			    my (nfk, nfk')
                                =
                                ou::fk_wrap (fk, fold_left getrtypes NULL args);

			    nfk' = { inlining_hint        =>  nfk'.inlining_hint,
                                     is_recursive         =>  nfk'.is_recursive,
				     all_call_sites_known =>  nfk'.all_call_sites_known,

                                     calling_convention   =>  ncconv
                                   };

			    #  funarg renaming 
			    #
			    fun newargs fargs
				=
				map  (fn (a, t) =  (cplv a, t))
                                     fargs;

			    #  Create (curried) wrappers to be inlined 
			    #
			    fun recurry ([], args)
				    =>
				    f::APPLY (f::VAR f', map (f::VAR o #1) args);

				recurry (( { inlining_hint, is_recursive, all_call_sites_known, calling_convention }, f, fargs) ! rest, args)
				    =>
				    {   fk = { inlining_hint => f::INLINE_WHENEVER_POSSIBLE,
                                               is_recursive  => NULL,

					       all_call_sites_known,
                                               calling_convention
                                             };

					nfargs = newargs fargs;

					g = cplv f';

					f::MUTUALLY_RECURSIVE_FNS([(fk, g, nfargs, recurry (rest, args @ nfargs))],
					     f::RET [f::VAR g]);
				    };
			    end;

			    #  Build the new f fundec 
			    #
			    nfargs = newargs fargs;
			    nf = (nfk, f, nfargs, recurry (tail args, nfargs));

			    # Make up the body of the uncurried function (creating
			    # dummy wrappers for the intermediate functions that are now
			    # useless).
			    # Intermediate functions that were not marked as recursive
			    # cannot appear in the body, so we don't need to build them.
			    # Note that we can't just rely on dead-code elimination to remove
			    # them because we may not be able to create them correctly with
			    # the limited type information gleaned in this phase.
			    #
			    fun uncurry' ([], args)
				    =>
				    body;

				uncurry' ((fk, f, fargs) ! rest, args)
				    =>
				    {   le = uncurry'(rest, args @ fargs);

					case fk

					    { is_recursive => THE _,
                                              calling_convention,
                                              all_call_sites_known,
                                              inlining_hint
                                            }
						=>
						{   nfargs = newargs fargs;

						    fk = { is_recursive  => NULL,
                                                           inlining_hint => f::INLINE_WHENEVER_POSSIBLE,
							   all_call_sites_known,
                                                           calling_convention
                                                         };

						    f::MUTUALLY_RECURSIVE_FNS
                                                      ( [ ( fk, f, nfargs,
							    recurry (rest, args @ nfargs)
                                                          )
                                                        ],
							le
                                                      );
						};

					   _ => le;

                                        esac;
				    };
			    end;

			    #  the new f' fundec 
			    #
			    nfbody' = uncurry' (tail args, fargs);

			    nf' = (nfk', f', fold_right (@) [] (map #3 args), nfbody');

			    (nf, nf');
			};

		    uncurry (_, body)
			=>
			bug "uncurrying a non-curried function";
		end;

		case lambda_expression

		     f::RET vs
			 =>
			 (0, addvs (s::empty, vs), lambda_expression);

		     f::LET (lvs, body, le)
			 =>
			 {   my (s2, fvl, nle  ) =  loop le;
			     my (s1, fvb, nbody) =  loop body;

			     ( s1 + s2,
                               s::union (rmvs (fvl, lvs), fvb),
                               f::LET (lvs, nbody, nle)
                             );
			 };

		     f::MUTUALLY_RECURSIVE_FNS (fdecs, le)
			 =>
			 {   # Set of funs defined by
                             # the MUTUALLY_RECURSIVE_FNS 
			     #
			     funs =  s::add_list (s::empty, map #2 fdecs);


			     # Create call-counters for
                             # each fun and add them to fm 
			     #
			     my (fs, mf)
				 =
				 fold_left
				     (fn ((fk, f, args, body), (fs, mf))
					  =
					  {   c = REF 0;
					      ((fk, f, args, body, c) ! fs,
						 m::set (mf, f, FUN c));
					  }
				     )
				     ([], mf)
				     fdecs;



			     # Process each fun:
			     #
			     fun ffun (fdec as (fk as { is_recursive, ... }:f::Function_Kind, f, args, body, cf),
				       (s, fv, funs, m))
				 =
				 case (curry (NULL,*maxargs)
					     (f::MUTUALLY_RECURSIVE_FNS([(fk, f, args, body)], f::RET [f::VAR f]))
                                      )

				     (args as _ ! _ ! _, body)  #  Curried function 
					 =>
					 {   my ((fk, f, fargs, fbody), (fk', f', fargs', fbody'))
						 =
						 uncurry (args, body);

					     # Add the wrapper function:
					     #
					     cs =  map (fn _ = REF (0, 0))
                                                       fargs;

					     nm =  m::set (m, f,
							  ([f'], 1, fk, fargs, fbody, cf, cs));

					     # Now retry ffun with the uncurried function:
					     #
					     ffun((fk', f', fargs', fbody', REF 1),
					       (s+1, fv, s::add (funs, f'), nm));
					 };

				     _   =>	#  non-curried function 
					 {   newdepth
						 =
						 case is_recursive

						      THE (_, (f::TAIL_RECURSIVE_LOOP | f::PREHEADER_WRAPPED_LOOP))
							  =>
							  depth + 1;

						      _   =>
							  depth;
						 esac;

					     my (mf, cs)
						 =
						 fold_right
						     (fn ((v, t), (m, cs))
							 =
							 {   c = REF (0, 0);

							     (m::set (m, v, ARG (newdepth, c)),
									 c ! cs);
							 }
						     )
						     (mf,[])
						     args;

					     my (fs, ffv, body)
						 =
						 float_expression mf newdepth body;

					     ffv = rmvs (ffv, map #1 args);	# fun's freevars 

					     # Set of rec funs REF'ed
					     #
					     ifv = s::intersection (ffv, funs);

					     (fs + s, s::union (ffv, fv), funs,
						m::set (m, f,
						  (s::vals_list ifv, fs, fk, args, body, cf, cs)));
					 };
				 esac;

			     # Process the main lambda_expression and
                             # make it into a dummy function.
			     #
			     # The computation of the freevars
                             # is a little sloppy since `fv'
			     # includes freevars of the fate,
                             # but the uniqueness of varnames ensures
                             # that s::inter (fv, funs) gives the
			     # correct result nonetheless.
			     #
			     my (s, fv, le)
				 =
				 float_expression mf depth le;

			     lename
				 =
				 highcode_var::make_highcode_variable();

			     m =  m::set
                                    ( m::empty,
				      lename,
				      ( s::vals_list (s::intersection (fv, funs)),
                                        0,
				        { inlining_hint        =>  f::INLINE_IF_SIZE_SAFE,
                                          is_recursive         =>  NULL,
					  all_call_sites_known =>  TRUE,
                                          calling_convention   =>  f::CALLING_CONVENTION_GENERIC
                                        },
					[],
                                        le,
                                        REF 0,
                                        []
                                    ) );


			     # Process the functions,
                             # collecting them in map m:
			     #
			     my (s, fv, funs, m)
				 =
				 fold_left ffun (s, fv, funs, m) fs;

			     # Find strongly connected components: 
			     #
			     top
				 = 
				 scc::topological_order
                                   { root   => lename,
				     follow => (fn n =  #1 (null_or::the (m::get (m, n))))
                                   }
				 except
				     x = {   bug "top: follow";
                                             raise exception x;
                                         };


			     # Turn them back into highcode code: 
			     #
			     fun scc_simple f (_, s,{ is_recursive, calling_convention, all_call_sites_known, inlining_hint }, args, body, cf, cs)
				 =
				 {   # Small functions inlining heuristic:
				     # 
				     ilthreshold = *ctrl::inline_threshold + (length args);

				     ilh = if   (inlining_hint == f::INLINE_WHENEVER_POSSIBLE)

						inlining_hint;

						#  else if s < ilthreshold then f::INLINE_WHENEVER_POSSIBLE 
					   else
						cs = map
							 (fn REF (sp, ti) = sp + ti / 2)
							 cs;

						s' = fold_left (+) 0 cs;

						if   (s < 2*s' + ilthreshold)

						     # say((Collect::LVarString f)  + 
						     #  " { " + (int::to_string *cf)  + 
						     #  " } = f::INLINE_MAYBE "  + 
						     #   (int::to_string (s-ilthreshold))  + 
						     #   (fold_left (fn (i, s) => s + " "  + 
						     #      (int::to_string i))
						     #     "" cs) + "\n"); 

						     f::INLINE_MAYBE (s-ilthreshold, cs);
						else
						    inlining_hint;
						fi;
					   fi;

				     fk = { is_recursive=>NULL, inlining_hint=>ilh, all_call_sites_known, calling_convention };

				     (fk, f, args, body);
				 };

			     fun scc_rec f (_, s, fk as { is_recursive, calling_convention, all_call_sites_known, inlining_hint }, args, body, cf, cs)
				 =
				 {   fk' =
					 # Check for unroll opportunities.
					 # This heuristic is pretty bad since it doesn't
					 # take the number of rec-calls into account:         XXX BUGGO FIXME
					 #
					 case (is_recursive, inlining_hint)

					     (THE(_, (f::PREHEADER_WRAPPED_LOOP|f::TAIL_RECURSIVE_LOOP)), f::INLINE_IF_SIZE_SAFE)
						 =>
						 if (s < *ctrl::unroll_threshold)

						    { inlining_hint      => f::INLINE_ONCE_WITHIN_ITSELF,
						      is_recursive,
						      calling_convention,
						      all_call_sites_known
						    };
						else
						    fk;
						fi;

					     _ => fk;
					 esac;

				     (fk, f, args, body);
				 };

			     fun sccconvert (scc::SIMPLE f, le)
				     =>
				     f::MUTUALLY_RECURSIVE_FNS([scc_simple f (null_or::the (m::get (m, f)))], le);

				 sccconvert (scc::RECURSIVE fs, le)
				     =>
				     f::MUTUALLY_RECURSIVE_FNS (map (fn f => scc_rec f (null_or::the (m::get (m, f))); end ) fs, le);
			     end;

			     case top

				  (scc::SIMPLE f) ! sccs
				      =>
				      {   if (f != lename)   bugsay "f != lename";   fi;

					  (   s,
					      s::difference (fv, funs),
					      fold_left sccconvert le sccs
					  );
				      };

				  (scc::RECURSIVE _) ! _
				       =>
				       bug "recursive main body in SCC ?!?!?";

				  []   =>
				       bug "SCC going crazy";
			     esac;
			 };

		     f::APPLY (f::VAR f, args)
			 =>
			 # For known functions, increase
                         # the counter and make the call
                         # a bit cheaper:
			 #
			 {   scall = case (m::get (mf, f))

					 THE (FUN (fc as REF c))
					     =>
					     {   fc := c + 1;
						 1;
					     };

					 THE (ARG (d, ac as REF (sp, ti)))
					     =>
					     {   ac := (4 + sp, ou::pow2 (depth - d) * 30 + ti);
						 5;
					     };

					 NULL => 5;
				     esac;

			     (scall + (length args), addvs (s::singleton f, args), lambda_expression);
			 };

		     f::TYPE_FN ((tfk, f, args, body), le)
			 =>
			 {   my (se, fve, le)   =  loop le;
			     my (sb, fvb, body) =  loop body;

			     (sb + se, s::union (s_rmv (f, fve), fvb),
			       f::TYPE_FN((tfk, f, args, body), le));
			 };

		     f::TYPE_APPLY (f::VAR f, args)
			 =>
			 # The cost of TYPE_APPLY is kinda hard to estimate.
                         # It can be very cheap, and just return a function,
                         # or it might do all kinds of wrapping but we have
                         # almost no information on which to base our choice.
			 #
			 # We opted for cheap here, to try to inline them more
			 # (they might become cheaper once inlined):
			 #
			 (3, s::singleton f, lambda_expression);

		     f::SWITCH (v, ac, arms, def)
			 =>
			 {   fun farm (dcon as f::DATACON (dc, _, lv), le)
				     =>
				     # The naming might end up costly,
                                     # but we count it as 1 
				     #	
				     {   my (s, fv, le) = loop le;
				         (1+s, fdcon (s_rmv (lv, fv), dc), (dcon, le));
				     };

				 farm (dc, le)
				    =>
				    {   my (s, fv, le) = loop le;
                                        (s, fv, (dc, le));
                                    };
			     end;

			     narms = length arms;

			     my (s, smax, fv, arms)
				 =
				 fold_right
				     (fn ((s1, fv1, arm), (s2, smax, fv2, arms))
                                         =
					 (s1+s2, int::max (s1, smax), s::union (fv1, fv2), arm ! arms)
                                     )
				     (narms, 0, s::empty, [])
				     (map farm arms);

			    case (lookup v)

				  THE (ARG (d, ac as REF (sp, ti)))
				      =>
				      ac := (sp + s - smax + narms, ou::pow2 (depth - d) * 2 + ti);

				  _ => ();
			     esac;

			     case def

				  NULL =>
				      (s, fv, f::SWITCH (v, ac, arms, NULL));

				  THE le
				      =>
				      {   my (sd, fvd, le)
					      =
					      loop le;

					  ( s + sd,
					    s::union (fv, fvd),
					    f::SWITCH (v, ac, arms, THE le)
					  );
				      };
			     esac;
			 };

		     f::CONSTRUCTOR (dc, tycs, v, lv, le)
			 =>
			 {   my (s, fv, le) = loop le;

			     (2+s, fdcon (addv (s_rmv (lv, fv), v), dc), f::CONSTRUCTOR (dc, tycs, v, lv, le));
			 };

		     f::RECORD (rk, vs, lv, le)
			 =>
			 {   my (s, fv, le) = loop le;

			     ((length vs)+s, addvs (s_rmv (lv, fv), vs), f::RECORD (rk, vs, lv, le));
			 };

		     f::SELECT (v, i, lv, le)
			 =>
			 {   my (s, fv, le) = loop le;

			     case (lookup v)

				 THE (ARG (d, ac as REF (sp, ti)))
				     =>
				     ac := (sp + 1, ou::pow2 (depth - d) + ti);

				  _ => ();
			     esac;

			     (1+s, addv (s_rmv (lv, fv), v), f::SELECT (v, i, lv, le));
			 };

		     f::RAISE (f::VAR v, ltys)
			 =>
			 # Artificially high size estimate
                         # to discourage inlining:
			 #
			 (15, s::singleton v, lambda_expression);

		     f::EXCEPT (le, v)
			 =>
			 {   my (s, fv, le) = loop le;
			     (2+s, addv (fv, v), f::EXCEPT (le, v));
			 };

		     f::BRANCH (po, vs, le1, le2)
			 =>
			 {   my (s1, fv1, le1) = loop le1;
			     my (s2, fv2, le2) = loop le2;

			     (1+s1+s2, fpo (addvs (s::union (fv1, fv2), vs), po),

			     f::BRANCH (po, vs, le1, le2));
			 };

		     f::PRIMOP (po, vs, lv, le)
			 =>
			 {   my (s, fv, le) = loop le;
			     (1+s, fpo (addvs (s_rmv (lv, fv), vs), po), f::PRIMOP (po, vs, lv, le));
			 };

		     f::APPLY      _ => bug "bogus f::APPLY";
		     f::TYPE_APPLY _ => bug "bogus f::TYPE_APPLY";
		     f::RAISE      _ => bug "bogus f::RAISE";
		esac;
	    };


	fun optimize_mutually_recursive_functions ((fk, f, args, body):  f::Program)
	    =
	    {   my (s, fv, nbody)
		    =
		    float_expression m::empty 0 body;

		fv =   s::difference (fv, s::add_list (s::empty, map #1 args));

		#   prettyprint_anormal::printLexp (f::RET (map f::VAR (s::members fv))); 

		assert (s::is_empty fv);

		(fk, f, args, nbody);
	    };

    end;	# stipulate
};		# package optimimize_mutually_recursive_functions



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## copyright 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
