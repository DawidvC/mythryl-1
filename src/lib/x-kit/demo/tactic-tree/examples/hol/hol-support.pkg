package HOL_TTree_Support:  TTREE_SUPPORT =
pkg 

type goal = (List( Theory::Thm::Term::term ) * Theory::Thm::Term::term)
type event = Theory::Thm::thm
type validation = (List( event ) -> event)
type tactic = (goal -> List( goal ) * validation) 

fun achieves (g, e) = TRUE  /* this should be changed */ 

fun make_validation v = v
fun apply_validation (v, l) = (v l)
fun make_tactic t = t
fun apply_tactic (t, g) = (t g)

tactic_menu = [
	  ("CONJ_TAC", CONJ_TAC),
	  ("DISJ1_TAC", DISJ1_TAC),
	  ("DISJ2_TAC", DISJ2_TAC),
	  ("EQ_TAC", EQ_TAC),
	  ("GEN_TAC", GEN_TAC),
          ("STRIP_TAC", STRIP_TAC),
          ("REPEAT STRIP_TAC", REPEAT STRIP_TAC),
          ("DISCH_TAC", DISCH_TAC),
          ("COND_CASES_TAC", COND_CASES_TAC),
          ("REFL_TAC", REFL_TAC),
          ("AP_TERM_TAC", AP_TERM_TAC),
          ("AP_THM_TAC", AP_THM_TAC)
	  ] 

tactic_ref = ref ((fn g => ([g], fn [e] => e)) : tactic)

fun goal_to_string (hl, c) = 
    let pp  = pp::pp_to_string pp_term
    in fold (fn (s, r) => if r == "" then s else s ^ "\n" ^ r)
	    ((map pp hl) @ ["|- " ^ (pp c)] )
            ""
    end

indentation  = " " 
unrefined  = "by ?" 
refined = "by " 
elision = "..." 
then_text = "THEN"
thenl_text = "THENL"
id_tac_text = "ALL_TAC"

end 



