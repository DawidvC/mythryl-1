## filer_ex.pkg
## (C) 1999, Bremen Institute for Safe Systems, Universitaet Bremen
## Author: ludi

# Compiled by:
#     src/lib/tk/src/toolkit/tests+examples/sources.make6



# ***************************************************************************
# Complete example instantiation of class macro filer
# **************************************************************************


package filer_ex

: (weak)  api {
		 go:  Void -> Void;
          }
{
    package options {

	fun icons_path ()    = winix::path::cat (tk::get_lib_path(),
					     "icons/filer/example");
	icons_size      = (24, 24);
	fun root ()          = NULL; #  THE "/home/ludi" 
	default_pattern = NULL; #  THE ".*.sml" 
	package clipboard        = clipboard_g ( Part = String;);

	filetypes
            =
	    [{ ext     => [""],
	      display => THE { comment     => "Default filetype",
			      icon        => "default_Icon.gif",
			      preview     => NULL,
			      file_to_obj => THE winix::path::from_dir_file }},
				      #  example for a default filetype 

		 /* the empty string in the extensions list sets the     *
		  * default filetype;                                    *
		  * if there is no default filetype, unmatched files are *
		  * displayed as "Unknown filetype" with the system icon */

	     { ext     => ["sml"],
	      display => THE { comment     => "Standard ML file",
			      icon        => "sml_Icon.gif",
			      preview     => NULL,
			      file_to_obj => THE winix::path::from_dir_file }},
	     { ext     =>["gif"],
	      display => THE { comment     => "GIF - image",
			      icon        => "gif_Icon.gif",
			      preview     => NULL,
			      file_to_obj => THE winix::path::from_dir_file }},
	     { ext     => ["ps"],
	      display => THE { comment     => "PostScript file",
			      icon        => "ps_Icon.gif",
			      preview     =>
				 THE (fn { dir, file } =>
				      { winix::process::system
					 ("ghostview " $
					  winix::path::from_dir_file
					    { dir  => (if (not_null (root()) )
							 winix::path::cat
							   (the (root()),
							    dir);
						     else dir;fi),
					     file } + "&_"); ();}
				       except _ => (); end; end ),
			      file_to_obj => THE winix::path::from_dir_file }},
	     { ext     => ["html"],
	      display => THE { comment     => "HTML document",
			      icon        => "html_Icon.gif",
			      preview     =>
				THE (fn { dir, file } =>
				      { winix::process::system
					 ("netscape -raise -remote 'openFile(" +
					  winix::path::from_dir_file
					    { dir  => (if (not_null (root()) )
							 winix::path::cat
							   (the (root()),
							    dir);
						     else dir;fi),
					     file } + ")' &"); ();}
				       except _ => (); end; end),
			      file_to_obj => THE winix::path::from_dir_file } } ];

	package conf= filer_default_config;	# filer_default_config	is from   src/lib/tk/src/toolkit/filer_default_config.pkg

    };		 #  package options 

    include tk;

    package example = filer_g (package options = options;);

                                                                                my 
    txt_id = make_widget_id();

    fun dropped ev
        =
        if (options::clipboard::is_empty ev)
             ();
	else
              add_trait txt_id [ACTIVE TRUE];
	      insert_text_end txt_id
			    (options::clipboard::get ev + " dropped\n");
	      add_trait txt_id [ACTIVE FALSE];
        fi;

    fun fate sel
        =
	{   add_trait txt_id [ACTIVE TRUE];
	    case sel
	      
		 THE (THE f, THE d)
		     => 
		     insert_text_end  txt_id  ("Dir " + d + ", file " + f + " selected.\n");
		 _   =>
		     insert_text_end  txt_id  "Not a lot selected.\n";
	    esac;

	    add_trait txt_id [ACTIVE FALSE];
        };

    fun go ()
        = 
	{ add_trait txt_id [ACTIVE TRUE];
	 example::file_select fate;};
                                                                                my
    drop_window
        =
        make_window {
            window_id    => make_window_id (),
	    traits   => [WINDOW_TITLE "Drop field"],
	    event_callbacks => [],
	    init     => fn () => (); end ,
	    subwidgets  => PACKED [TEXT_WIDGET { widget_id      => txt_id,
					     scrollbars => AT_RIGHT,
					     live_text   => empty_livetext,
					     packing_hints   => [],
					     traits    => [HEIGHT 5,
							   ACTIVE FALSE],
					     event_callbacks   =>
					       [EVENT_CALLBACK (ENTER, dropped)] },
				    BUTTON { widget_id => make_widget_id(),
					    packing_hints => [],
					    traits  =>
					      [TEXT "Start Filer",
					       CALLBACK go],
					    event_callbacks => [] },
				    BUTTON { widget_id => make_widget_id(),
					    packing_hints => [],
					    traits  => [ TEXT "Quit",
							 CALLBACK (fn _ => exit_tcl(); end  ) ],
					    event_callbacks => [] }
				  ]
        };

    fun go ()
        =
        start_tcl [ drop_window ];

}; #  package FilerEx 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
