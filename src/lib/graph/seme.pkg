#
# Single-entry-multiple exit view.  Add a new exit node to graph view.
#
# All exit edges are now directed into the exit node.
# The unique node with entry edges becomes the new entry node.  
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

api Single_Entry_Multiple_Exit_View {

    exception NO_ENTRY; 
    exception MULTIPLE_ENTRIES  List( graph::Node_Id );

    seme:  { exit:  graph::Node( N ) }
                -> 
                graph::Graph( N, E, G )
                ->
                graph::Graph ( N, E, G );
};

package single_entry_multiple_exit: (weak)  Single_Entry_Multiple_Exit_View		# Single_Entry_Multiple_Exit_View	is from   src/lib/graph/seme.pkg
{
    package g= graph;	# graph	is from   src/lib/graph/graph.pkg

    exception NO_ENTRY; 
    exception MULTIPLE_ENTRIES  List( graph::Node_Id );

    fun seme { exit as (exit_i, ex) } (g::GRAPH graph)
	=
	{   fun readonly _  = raise exception g::READ_ONLY; 
	    fun get_nodes () = exit ! graph.nodes ();
	    fun order ()     = graph.order () + 1;
	    fun capacity ()  = int::max (exit_i+1, graph.capacity ());

	    fun find_entry ()
		=  
		case (graph.entries ())
		  
		     [entry] =>  entry;
		     []      =>  raise exception  NO_ENTRY; 
		     nodes   =>  raise exception  MULTIPLE_ENTRIES nodes;
		esac;

	    entry =   find_entry ();

	    fun exit_edges n
                =
                map
                    (fn (i, j, e) =  (i, exit_i, e))
                    (graph.exit_edges n);

	    fun out_edges n
                =
                exit_edges n @ graph.out_edges n; 

	    fun in_edges n
                =
               if   (n == exit_i   )   exit_edges n;
				  else   graph.in_edges n;   fi;
	    fun get_edges ()
                =
                list::cat (map (fn (n, _) =  out_edges n)
					      (get_nodes ()));

	    fun get_succ n =  map #2 (out_edges n);
	    fun get_pred n =  map #1 (in_edges n );

	    fun has_edge (i, j)
                =
                list::exists
                    (fn (_, k, _) =  j == k)
                    (out_edges i);

	    fun has_node n
                =
                n == exit_i   or   graph.has_node  n;

	    fun node_info n
                =
                if  (n == exit_i)
                     ex;
                else
                     graph.node_info n;
                fi; 

	    fun forall_nodes f
                =
                {   graph.forall_nodes f;
                    f exit;
                };

	    fun forall_edges f
                =
                apply f (get_edges());

	    fun entries () =  [entry];
	    fun exits   () =  [exit_i];

	    g::GRAPH
	    { name            => graph.name,
	      graph_info      => graph.graph_info,
	      new_id          => graph.new_id,
	      add_node        => readonly,
	      add_edge        => readonly,
	      remove_node     => readonly,
	      set_in_edges    => readonly,
	      set_out_edges   => readonly,
	      set_entries     => readonly,
	      set_exits       => readonly,
	      garbage_collect => graph.garbage_collect,
	      nodes           => get_nodes,
	      edges           => get_edges,
	      order,
	      size            => graph.size,
	      capacity,
	      out_edges,
	      in_edges,
	      next            => get_succ,
	      prior            => get_pred,
	      has_edge,
	      has_node,
	      node_info,
	      entries,
	      exits,
	      entry_edges     => graph.entry_edges,
	      exit_edges      => graph.exit_edges,
	      forall_nodes,
	      forall_edges
	    };
	};					# fun seme
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
