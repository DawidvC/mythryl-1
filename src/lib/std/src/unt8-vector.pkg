## unt8-vector.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

###               "Hhumor cannot do credit to itself without a
###                good background of gravity & of earnestness.
###
###               "Humor unsupported rather hurts its author
###                in the estimation of the reader."
###
###                                    -- Mark Twain,
###                                       Letter to Michael Simons,
###                                       January 1873



package unt8_vector: (weak)  Monomorphic_Vector		# Monomorphic_Vector	is from   src/lib/std/src/monomorphic-vector.api
=
package {

    package v= inline_t::unt8_vector;		# inline_t	is from   src/lib/core/init/built-in.pkg

    # Fast add/subtract avoiding
    # the overflow test:
    #
    infix val --- +++;
    #
    fun x --- y =  inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x - inline_t::unt31::copyf_int31 y);
    fun x +++ y =  inline_t::unt31::copyt_int31 (inline_t::unt31::copyf_int31 x + inline_t::unt31::copyf_int31 y);

    #  unchecked access operations 
    unsafe_get = v::get;
    unsafe_set = v::set;

    Vector  = v::Vector;
    Element = unt8::Unt;

    my vector0:  Vector = inline_t::cast "";
    my create_vec:  Int -> Vector = inline_t::cast assembly::a::create_s;

    max_len = core::max_length;

    my from_list:  List( Element ) -> Vector
	=
        inline_t::cast char_vector::from_list;

    my tabulate:  ((Int, (Int -> Element))) -> Vector
	=
        inline_t::cast char_vector::tabulate;

    length   = v::length;
    get      = v::check_sub;

    my cat:  List( Vector ) -> Vector
           = inline_t::cast char_vector::cat;

    my keyed_apply:  ((Int, Element) -> Void) -> Vector -> Void
          = inline_t::cast char_vector::keyed_apply;
    my apply:  (Element -> Void) -> Vector -> Void
          = inline_t::cast char_vector::apply;

    my set:  ((Vector, Int, Element) -> Vector)
          = inline_t::cast char_vector::set;

    my keyed_map:  ((Int, Element) -> Element) -> Vector -> Vector
          = inline_t::cast char_vector::keyed_map;

    my map:  (Element -> Element) -> Vector -> Vector
          = inline_t::cast char_vector::map;

    my v2cv:  Vector -> char_vector::Vector = inline_t::cast;

    fun keyed_fold_left f init vec = {
	len = length vec;
	fun fold (i, a) =
	    if (i >= len ) a; else fold (i +++ 1, f (i, unsafe_get (vec, i), a));fi;
    
	fold (0, init);
    };

    fun fold_left f init vec = {
	len = length vec;
	fun fold (i, a) =
	    if (i >= len ) a; else fold (i +++ 1, f (unsafe_get (vec, i), a));fi;
    
	fold (0, init);
    };

    fun keyed_fold_right f init vec = {
	fun fold (i, a) =
	    if (i < 0 ) a; else fold (i --- 1, f (i, unsafe_get (vec, i), a));fi;
    
	fold (length vec --- 1, init);
    };

    fun fold_right f init vec = {
	fun fold (i, a) =
	    if (i < 0 ) a; else fold (i --- 1, f (unsafe_get (vec, i), a));fi;
    
	fold (length vec --- 1, init);
    };

    my findi:  ((Int, Element) -> Bool) -> Vector -> Null_Or( (Int, Element) )
             = inline_t::cast char_vector::findi;

    my find:  (Element -> Bool) -> Vector -> Null_Or( Element )
          = inline_t::cast char_vector::find;

    my exists:  (Element -> Bool) -> Vector -> Bool
          = inline_t::cast char_vector::exists;

    my all:  (Element -> Bool) -> Vector -> Bool
          = inline_t::cast char_vector::all;

    my collate:  ((Element, Element) -> Order) -> (Vector, Vector) -> Order
          = inline_t::cast char_vector::collate;
  };




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
