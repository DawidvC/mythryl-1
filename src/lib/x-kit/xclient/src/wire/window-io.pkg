## window-io.pkg
#
# Creating windows,
#  mapping windows,
# changing window attributes.
#
# Used (only) in:
#
#     src/lib/x-kit/xclient/src/window/window.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.make6


stipulate
    package xok =  xsocket;				# xsocket		is from   src/lib/x-kit/xclient/src/wire/xsocket.pkg
    package xt  =  xtypes;				# xtypes		is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package g   =  geometry;				# geometry		is from   src/lib/x-kit/xclient/src/window/geometry.pkg
    package v2w =  value_to_wire;			# value_to_wire		is from   src/lib/x-kit/xclient/src/wire/value-to-wire.pkg
herein

    package window_io: (weak) Window_Io {		# Window_Io		is from   src/lib/x-kit/xclient/src/wire/window-io.pkg

	# Window configuration values:
	#
	Window_Attribute
	  #
	  = BACKGROUND_PIXMAP_NONE
	  | BACKGROUND_PIXMAP_PARENT_RELATIVE
	  | BACKGROUND_PIXMAP			xt::Pixmap_Id
	  | BACKGROUND_PIXEL			xt::Pixel
	  #
	  | BORDER_PIXMAP_COPY_FROM_PARENT
	  | BORDER_PIXMAP			xt::Pixmap_Id
	  | BORDER_PIXEL			xt::Pixel
	  #
	  | BIT_GRAVITY				xt::Gravity
	  | WINDOW_GRAVITY			xt::Gravity
	  #
	  | BACKING_STORE			xt::Backing_Store
	  | BACKING_PLANES			xt::Plane_Mask
	  | BACKING_PIXEL			xt::Pixel
	  #
	  | EVENT_MASK				xt::Event_Mask
	  | DO_NOT_PROPAGATE_MASK		xt::Event_Mask
	  #
	  | SAVE_UNDER  	   		Bool
	  | OVERRIDE_REDIRECT  			Bool
	  #
	  | COLOR_MAP_COPY_FROM_PARENT
	  | COLOR_MAP  				xt::Colormap_Id
	  | CURSOR_NONE
	  | CURSOR				xt::Cursor_Id
	  ;

	fun do_window_val arr
	    =
	    {
		fun update (i, x)
		    =
		    rw_vector::set (arr, i, THE x);

		fn BACKGROUND_PIXMAP_NONE			=> update (0, 0u0);
		   BACKGROUND_PIXMAP_PARENT_RELATIVE		=> update (0, 0u1);
		   BACKGROUND_PIXMAP (xt::XID p)		=> update (0, p);
		   
		   BACKGROUND_PIXEL (xt::PIXEL p)		=> update (1, unt::from_int p);

		   BORDER_PIXMAP_COPY_FROM_PARENT		=> update (2, 0u0);
		   BORDER_PIXMAP (xt::XID p)			=> update (2, p);
		   
		   BORDER_PIXEL (xt::PIXEL p)			=> update (3, unt::from_int p);
		   BIT_GRAVITY g				=> update (4, v2w::gravity_to_wire g);
		   WINDOW_GRAVITY g				=> update (5, v2w::gravity_to_wire g);
		   
		   BACKING_STORE xt::BS_NOT_USEFUL		=> update (6, 0u0);
		   BACKING_STORE xt::BS_WHEN_MAPPED		=> update (6, 0u1);
		   BACKING_STORE xt::BS_ALWAYS			=> update (6, 0u2);
		   
		   BACKING_PLANES (xt::PLANEMASK m)		=> update (7, m);
		   BACKING_PIXEL (xt::PIXEL p)			=> update (8, unt::from_int p);

		   OVERRIDE_REDIRECT b				=> update ( 9, v2w::bool_to_wire b);
		   SAVE_UNDER b					=> update (10, v2w::bool_to_wire b);

		   EVENT_MASK            (xt::EVENT_MASK m)	=> update (11, m);
		   DO_NOT_PROPAGATE_MASK (xt::EVENT_MASK m)	=> update (12, m);
		   
		   COLOR_MAP_COPY_FROM_PARENT			=> update (13, 0u0);
		   COLOR_MAP (xt::XID x) 			=> update (13, x);
		   
		   CURSOR_NONE					=> update (14, 0u0);
		   CURSOR (xt::XID x)				=> update (14, x);
		end;
	    };

	do_window_attribute_list
	    =
	    v2w::do_val_list 15 do_window_val;

	# Create a new X-window with the given xid 
	#
	fun create_window   (connection: xok::Xsocket)
            {
              id:           xt::Window_Id,
              parent:       xt::Window_Id,
	      #	
              io:           xt::Input_Output,
              depth:        Int,
              visual_id:    xt::Visual_Id_Choice,
              site:         g::Window_Site,
              attributes:   List( Window_Attribute )
            }
	    =
	    xok::request  connection  msg
	    where 
		msg =   value_to_wire::encode_create_window
			  {
			    window => id,
			    parent,
			    io,
			    depth,
			    visual_id,
			    site,
			    attributes =>  do_window_attribute_list  attributes
			  };

	    end;


	fun map_window  connection  w
	    =
	    xok::request connection (value_to_wire::encode_map_window { window=>w } );

	fun change_window_attributes  connection  (window, attributes)
	    =
	    {   xok::request  connection
		      #
		      (value_to_wire::encode_change_window_attributes
			{ window,
			  attributes =>  do_window_attribute_list  attributes
			}
		      );

		xok::flush connection;
	    };

    };			# package xwin 
end;			# stipulate


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
