# ast-util.api

# Compiled by:
#     src/lib/compiler/lower/tools/sml-ast.make6

api  Mdl_Ast_Util {

    package raw_syntax:  Mdl_Ast;		# Mdl_Ast	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast.api

    #  Abbreviations 
    id:       String -> raw_syntax::Expression;
    app:      (String, raw_syntax::Expression) -> raw_syntax::Expression;
    plus:     (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;
    minus:    (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;
    bitwise_and:     (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;
    bitwise_or:      (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;
    sll:      (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;
    slr:      (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;
    sar:      (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;
    false:    raw_syntax::Expression;
    true:     raw_syntax::Expression;
    and_fn:   (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;
    or_fn:    (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;
    void:     raw_syntax::Expression;
    nil_exp:  raw_syntax::Expression;

    integer_constant_in_expression:     Int -> raw_syntax::Expression;
    int32expression:   int32::Int -> raw_syntax::Expression;
    intinfexp:  integer::Int -> raw_syntax::Expression;
    string_constant_in_expression:  String -> raw_syntax::Expression;
    bool_exp:    Bool -> raw_syntax::Expression;
    word_constant_in_expression:    Unt -> raw_syntax::Expression;
    word32expression:  unt32::Unt -> raw_syntax::Expression;
    character_constant_in_expression:    Char -> raw_syntax::Expression;

    integer_constant_in_pattern:     Int -> raw_syntax::Pattern;
    int32pattern:   int32::Int -> raw_syntax::Pattern;
    intinfpat:  integer::Int -> raw_syntax::Pattern;
    string_constant_in_pattern:  String -> raw_syntax::Pattern;
    bool_pat:    Bool -> raw_syntax::Pattern;
    word_constant_in_pattern:    Unt -> raw_syntax::Pattern;
    word32pattern:  unt32::Unt -> raw_syntax::Pattern;
    character_constant_in_pattern:    Char -> raw_syntax::Pattern;

    void_type:      raw_syntax::Some_Type;
    bool_type:      raw_syntax::Some_Type;
    int_type:       raw_syntax::Some_Type;
    register_type:  raw_syntax::Some_Type;
    register_list_type:  raw_syntax::Some_Type;
    int_list_type:   raw_syntax::Some_Type;
    string_type:    raw_syntax::Some_Type;
    word32_type:    raw_syntax::Some_Type;
    word_type:      raw_syntax::Some_Type;
    label_type:     raw_syntax::Some_Type;
    label_expression_type:    raw_syntax::Some_Type;
    constant_type:     raw_syntax::Some_Type;
    cell_kind_type:  raw_syntax::Some_Type;
    cell_set_type:   raw_syntax::Some_Type;

    datatype_fn:  (raw_syntax::Id, List( raw_syntax::Typevar_Ref ), List( raw_syntax::Consbind ))
        -> raw_syntax::Datatypebind;
    cons:  (raw_syntax::Id, Null_Or( raw_syntax::Some_Type )) -> raw_syntax::Consbind;
    my_fn:  (raw_syntax::Id, raw_syntax::Expression) -> raw_syntax::Decl; 
    fun_fn:  (raw_syntax::Id, raw_syntax::Pattern, raw_syntax::Expression) -> raw_syntax::Decl;
    fun_fn': (raw_syntax::Id, raw_syntax::Pattern, raw_syntax::Expression) -> raw_syntax::Funbind;
    let_fn:  (List( raw_syntax::Decl ), raw_syntax::Expression) -> raw_syntax::Expression;

    error_fn:  String -> raw_syntax::Clause;
    error_fun_fn:  String -> raw_syntax::Decl;
    dummy_fun:  String -> raw_syntax::Decl;

    cons':  (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;
    append:  (raw_syntax::Expression, raw_syntax::Expression) -> raw_syntax::Expression;

   #  Generate an expression that computes a bitslice 
    bitslice:  (raw_syntax::Expression, List( raw_syntax::Range )) -> raw_syntax::Expression;

    compare_literal:  (raw_syntax::Literal, raw_syntax::Literal) -> Order;

};
