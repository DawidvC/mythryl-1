/*
 * This implements a priority queue for nodes in a graph
 * 
 * -- Allen Leung
 */

generic package node_priority_queue (A:  Rw_Vector) : Node_Priority_Queue
{
   package g = graph

   exception EMPTY_PRIORITY_QUEUE

   enum node_priority_queue = 
       Q of { less:  g::node_id * g::node_id -> Bool,
              heap:  a::Rw_Vector( g::node_id ), 
              pos:   a::Rw_Vector( Int ), 
              size:  Ref( Int )
            }
   fun create N less = Q { less = less, 
                           heap = a::rw_vector (N, 0),
                           pos  = a::rw_vector (N, 0),
                           size = REF 0
                         }
  
   fun is_empty (Q { size = REF 0, ... } ) = TRUE
     | is_empty _ = FALSE

   fun clear (Q { size, ... } ) = size := 0

   fun min (Q { size = REF 0, ... } ) = raise exception EMPTY_PRIORITY_QUEUE
     | min (Q { heap, ... } ) = a::sub (heap, 0)

   fun decreaseWeight (Q { size, heap, pos, less }, x) =
   let fun siftup 0 = 0
         | siftup i =
       let j = (i - 1) div 2
           y = a::sub (heap, j)
       in  if less (x, y) then (a::update (heap, i, y); a::update (pos, y, i); siftup j)
           else i
       end 
       x_pos = siftup (a::sub (pos, x))
   in  a::update (heap, x_pos, x); a::update (pos, x, x_pos)
   end

   fun insert (q as Q { size, heap, pos, ... }, x) =
   let N = *size
   in  a::update (heap, N, x); a::update (pos, x, N); size := N + 1;
       decreaseWeight (q, x)
   end

   fun deleteMin (Q { size = REF 0, ... } ) = raise exception EMPTY_PRIORITY_QUEUE
     | deleteMin (Q { size, heap, pos, less } ) =
   let N = *size - 1
       fun siftdown (i, x) = 
       let j = i + i + 1
           k = j + 1
       in  if j >= N then i
           else let y = a::sub (heap, j)
                in  if k >= N then
                       if less (y, x) then go (i, x, j, y) else i 
                    else 
                       let z = a::sub (heap, k)
                       in  if less (y, x) then
                              if less (z, y) then go (i, x, k, z) 
                              else go (i, x, j, y)
                           else if less (z, x) then go (i, x, k, z)
                           else i
                       end
                end
       end
       and go (i, x, j, y) = (a::update (heap, i, y); a::update (pos, y, i); siftdown (j, x))
       min   = a::sub (heap, 0)
       x     = a::sub (heap, N)
       x_pos = siftdown (0, x)
   in  a::update (heap, x_pos, x); a::update (pos, x, x_pos); 
       size := N;
       min
   end

   fun fromGraph less (g::GRAPH G) =
   let N    = G.order ()
       heap = a::rw_vector (N, 0) 
       pos  = a::rw_vector (G.capacity (), 0) 
       fun siftdown (i, x) = 
       let j = i*2 + 1
           k = j + 1
       in  if j >= N then a::update (heap, i, x)
           else if k >= N then
              let y = a::sub (heap, j)
              in  if less (y, x) then go (i, x, j, y) else a::update (heap, i, x)
              end
           else 
              let y = a::sub (heap, j)
                  z = a::sub (heap, k)
              in  if less (y, x) then
                     if less (z, y) then go (i, x, k, z) 
                     else go (i, x, j, y)
                  else if less (z, x) then go (i, x, k, z)
                  else a::update (heap, i, x)
              end
       end
       and go (i, x, j, y) = (a::update (heap, i, y); siftdown (j, x))
 
       fun make_heap -1 = ()
         | make_heap i = (siftdown (i, a::sub (heap, i)); make_heap (i - 1))

       i = REF 0 
       G.forall_nodes (fn (u, _) => 
                 let i' = *i in a::update (heap, i', u); i := i'+1 end)

       make_heap((N+1) div 2)

       a::keyed_apply (fn (i, x) => a::update (pos, x, i)) (heap, 0, NULL)

   in  Q { less = less, heap = heap, pos = pos, size = REF N } 
   end
}
