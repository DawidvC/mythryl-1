## lcontract.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



# This is one of the A-Normal Form optimization passes --
# for context see the comments in
#
#     src/lib/compiler/upper/anormal/anormal.api
#



#   "This is a simple cleanup phase that inlines called-once
#    functions to their sole calling location and flattens
#    the let bindings by apply the let-associativity rule
#        let x = let y = e1 = e2 in e3
#        =>
#        let y = e1 in let x = e2 in e3
#
#   "This phase does a subset of what fcontract does.
#    It does a much less thorough job, but is much faster
#    and was kept to do the first cleanup after translation
#    from [polylambda]."
#
#
#                   -- Stefan Monnier, "Principled Compilation and Scavanging"



###          "The mathematical sciences particularly exhibit
###           order, symmetry, and limitation; and these are
###           the greatest forms of the beautiful."
###
###                                     -- Aristotle



api Lcontract {

   lcontract:  anormal::Program -> anormal::Program;
}; 

package lcontract: (weak)  Lcontract		# Lcontract	is from   src/lib/compiler/upper/optimize/lcontract.pkg
=
package {

    stipulate

	package di = debruijn_index;
	package da= var_home;			# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package lt= highcode;			# highcode			is from   src/lib/compiler/upper/highcode/highcode.pkg
	package fu= anormal_stuff;		# anormal_stuff			is from   src/lib/compiler/upper/anormal/anormal-stuff.pkg
	package po= highcode_primitive_op;	# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg
	package m= int_hash_table;		# int_hash_table		is from   src/lib/src/int-hash-table.pkg

	include anormal;

    herein

	fun bug s
	    =
	    error_message::impossible ("LContract: " + s);

	say   = control_print::say;

	ident = fn x = x;

	fun all p (a ! r) =>  p a and all p r;
	    all p NIL     =>  TRUE;
	end;

	fun is_diffs (vs, us)
	    = 
	    list::all h us
            where
	        fun h (VAR x) =>  list::all (fn y = (y!=x)) vs;
		    h _       =>  TRUE;
		end;
	    end;

	fun is_eqs (vs, us)
	    = 
	    h (vs, us)
            where
	        fun h (v ! r, (VAR x) ! z) => if (v == x) h (r, z); else FALSE;fi;
		    h ([], []) => TRUE;
		    h _ => FALSE;
		end;
	    end;

	Info
	  = SIMP_VAL  Value
	  | LIST_EXPRESSION  List( Value )
	  | FUN_EXPRESSION   (List( Highcode_Variable ), Anormal_Expression)
	  | CON_EXPRESSION   (Dcon, List( Highcode_Type_Constructor ), Value)
	  | STD_EXPRESSION
          ;

	exception LCONTRACT_PASS1;

	fun pass1 fdec
	    = 
	    {   my zz:  m::Hash_Table( Null_Or( di::Depth ))
                    =
                    m::make_table (32, LCONTRACT_PASS1);

		add = m::set   zz;
		get = m::get  zz;

		fun rmv i
                    =
                    ignore (m::remove zz i) except _ = ();

		fun enter (x, d)
                    =
                    add (x, THE d);

		fun kill x
                    =
                    {   get x;
                        rmv x;
                    }
                    except _ = ();

		fun mark nd x
                    = 
		    {   s = get x;
		        rmv x;

		        case s
			    THE _ => add (x, NULL);  #  Depth no longer matters 
			    NULL  => ();

#			    THE d => if (d==nd)   add (x, NULL) fi;

		        esac;

		    } except _ = ();

		fun cand x
		    =
		    {   get x;
			TRUE;
		    }
		    except _ = FALSE;

		fun lpfd d ( { is_recursive=>THE _, ... }, v, vts, e)
                        =>
                        lple d e;

		    lpfd d (_, v, vts, e)
                        =>
                        {   enter (v, d);
                            lple d e;
                        };
		end 

		also
		fun lple d e
		    = 
		    pse e
		    where
			fun psv (VAR x) => kill x;
			    psv _ => ();
			end 

			also
			fun pst (tfk, v, vks, e)
                            =
                            lple (di::next d) e

			also
			fun pse (RET vs) => apply psv vs;
			    pse (LET (vs, e1, e2)) => { pse e1; pse e2;};          
			    pse (MUTUALLY_RECURSIVE_FNS (fdecs, e)) => { apply (lpfd d) fdecs; pse e;}; 
			    pse (APPLY (VAR x, vs)) => { mark d x; apply psv vs;};
			    pse (APPLY (v, vs)) => { psv v; apply psv vs;};
			    pse (TYPE_FN (tfdec, e)) => { pst tfdec; pse e;};
			    pse (TYPE_APPLY (v, _)) => psv v;
			    pse (RECORD(_, vs, _, e)) => { apply psv vs; pse e;};
			    pse (SELECT (u, _, _, e)) => { psv u; pse e;};
			    pse (CONSTRUCTOR(_, _, u, _, e)) => { psv u; pse e;};

			    pse (SWITCH (u, _, ces, oe))
                                =>
			        {   psv u;

                                    apply (fn (_, x) = pse x)  ces; 

				    case oe
                                        THE x => pse x;
                                        NULL => ();
                                    esac;
                                };

			    pse (RAISE _) => ();
			    pse (EXCEPT (e, v)) => { pse e; psv v;};
			    pse (BRANCH(_, vs, e1, e2)) => { apply psv vs; pse e1; pse e2;}; 
			    pse (PRIMOP(_, vs, _, e)) => { apply psv vs; pse e;};
		       end;
		    end;

	      lpfd di::top fdec; (cand, fn () = m::clear zz);

	    }; #  pass1 

	# **********************************************************************
	#                      THE MAIN FUNCTION                               *
	# **********************************************************************
	fun lcontract (fdec, init)
	    = 
	    { 
		# In pass1, we calculate the list of functions that are the candidates
		# for contraction. To be such a candidate, a function must be called 
		# only once, and furthermore, the call site must be at the same 
		# depth as the definition site. (ZHONG)
		#
		# Being at the same depth is not strictly necessary, we'll relax this
		# constraint in the future.		XXX BUGGO FIXME

		my  (is_cand, clean_up)
		    = 
		    if   (init)
			 (fn _ = FALSE, fn () = ());
		    else pass1 fdec;
                    fi;

		exception LCONTRACT;

		my m:  m::Hash_Table( (Ref( Int ), Info))
                    =  m::make_table (32, LCONTRACT);

		enter = m::set   m;
		get   = m::get  m;

		fun kill i
		    =
		    ignore (m::remove m i)
			   except
			       _ = ();

		fun check_in (v, info)
		    =
		    enter (v, (REF 0, info));

		# Is variable dead?
		#
		fun dead v
		    =
		    case (get v)
			(REF 0, _) => TRUE;
			_          => FALSE;
		    esac
		    except _ = FALSE;

		fun once v
		    =
		    case (get v)
			(REF 1, _) => TRUE;
			 _         => FALSE;
		    esac
		    except
			_ = FALSE;


		# Are all variables dead?
		#
		fun alldead [     ] => TRUE;
		    alldead (v ! r) => if (dead v)  alldead r;
				       else         FALSE;
				       fi;
		end; 

		# Rename a value:
		#
		fun rename (u as (VAR v))
			=> 
			case (get v)
			      (_, SIMP_VAL sv) => rename sv;
			      (x, _)           => { x := *x + 1; u;};
			esac
			except
			     _ = u;

		    rename u => u;
		end;


		# Selecting a field from a
                # potentially known record:
		#
		fun select_info (VAR v, i)
			=> 
			case (get v)

			    (_, SIMP_VAL u)
				=>
				select_info (u, i);

			    (_, LIST_EXPRESSION vs)
				=> 
				{   nv = list::nth (vs, i)
					 except
					     _ = bug "unexpected list::Nth in select_info";

				    THE nv;
				};

			   _ => NULL;
			esac
			except
                            _ = NULL;

		    select_info _
			=>
			NULL;
		end;

		# Apply a switch to a data constructor:
		#
		fun swi_info (VAR v, ces, oe)
			=> 
			case (get v)

			    (_, SIMP_VAL u)
				=>
				swi_info (u, ces, oe);

			    (_, CON_EXPRESSION (dc as (_, representation, _), ts, u))
				=>
				h ces
				where
				    fun h ((DATACON (dc as (_, nrep, _), ts, x), e) ! r)
                                            =>
					    if (representation==nrep ) THE (LET([x], RET [u], e)); else h r;fi;

					h (_ ! r)
                                            =>
                                            bug "unexpected case in swi_info";

					h [] => oe;
				    end;
				end;


			   _ => NULL;

			esac
			except _ = NULL;

		    swi_info _
			=>
			NULL;
		end;


		# Contract a function application 
		#
		fun apply_info (VAR v)
			=>
			case (get v)
			    (REF 0, FUN_EXPRESSION (vs, e)) => THE (vs, e);
			   _ => NULL;
			esac
			except _ = NULL;

		    apply_info _
			=>
			NULL;
		end;


		# A very ad-hoc implementation of
		# branch/switch eliminations   XXX BUGGO FIXME
		#
		stipulate

		    fun is_bool_lty lt
			= 
			case (lt::ltd_arrow lt)

			    (_, [at], [rt])
                                =>
			        lt::lambda_types_are_equivalent (at, lt::ltc_unit)
                                and
                                lt::lambda_types_are_equivalent (rt, lt::ltc_bool);

			  _ => FALSE;
			esac; 

		    fun is_bool
			    TRUE
			    ( RECORD (RK_TUPLE _, [], x, 
				      CONSTRUCTOR((_, da::CONSTANT 1, lt), [], VAR x', v, RET [VAR v']))
			    )
			    => 
			    (x == x') and (v == v') and (is_bool_lty lt);

			is_bool
			    FALSE
			    ( RECORD (RK_TUPLE _, [], x, 
				      CONSTRUCTOR((_, da::CONSTANT 0, lt), [], VAR x', v, RET [VAR v']))
			    )
			    => 
			    (x == x') and (v == v') and (is_bool_lty lt);

			is_bool _ _
			    =>
			    FALSE;
		    end;

		    # Functions that do the branch optimizations 
		    #
		    fun bool_dcon((DATACON((_, da::CONSTANT 1, lt1),[], v1), e1), 
				 (DATACON((_, da::CONSTANT 0, lt2),[], v2), e2))
			    => 
			    if (is_bool_lty lt1
			    and is_bool_lty lt2) 
				 THE (RECORD (fu::rk_tuple,[], v1, e1), RECORD (fu::rk_tuple,[], v2, e2));
			    else
				 NULL;
			    fi;

			bool_dcon
                            ( ce1 as (DATACON((_, da::CONSTANT 0, _),[], _), _), 
			      ce2 as (DATACON((_, da::CONSTANT 1, _),[], _), _)
                            )
			    =>
			    bool_dcon (ce2, ce1);

			bool_dcon _
			    =>
			    NULL;
		    end;

		    fun ssplit (LET (vs, e1, e2))
			    =>
			    ( fn x = LET (vs, x, e2),
			      e1
			    );

			ssplit e
			    =>
			    (ident, e);
		    end;

		herein

		    fun branchopt([v], e1 as (BRANCH (p, us, e11, e12)), e2)
			    => 
			    {   my (header, se2)
                                    =
                                    ssplit e2;

				case se2 

				    SWITCH (VAR nv, _, [ce1, ce2], NULL)
					=>
					if ((once v)
                                        and (nv == v)
                                        and (is_bool TRUE  e11) 
					and (is_bool FALSE e12)
					)
					     case (bool_dcon (ce1, ce2))

						   THE (e21, e22)
                                                       =>
                                                       THE (header (BRANCH (p, us, e21, e22)));

						   NULL => NULL;
					     esac;
					else
					     NULL;
					fi;

				   _ => NULL;
				esac;
			    };

		        branchopt _
                            =>
                            NULL;
		    end;

		end; #  Branchopt local 


		 # The main transformation function:
		 #	 
		 fun lpacc (da::HIGHCODE_VARIABLE v)
			 => 
			 case (lpsv (VAR v))
			     VAR w =>  da::HIGHCODE_VARIABLE w;
			     _     =>  bug "unexpected in lpacc";
			 esac;

		     lpacc _
			 =>
			 bug "unexpected path in lpacc";
		 end 

		 also
		 fun lpdc (s, da::EXCEPTION acc, t) =>  (s, da::EXCEPTION (lpacc acc), t);
		     lpdc (s, representation,    t) =>  (s, representation, t);
		 end 

		 also
		 fun lpcon (DATACON (dc, ts, v))
                         =>
                         DATACON (lpdc dc, ts, v);

		     lpcon c => c;
		 end 

		 also
		 fun lpdt { default=>v, table=>ws }
		     =
		     {   fun h x
			     = 
			     case (rename (VAR x))    VAR nv => nv;
						   _ => bug "unexpected acse in lpdt";
			     esac;

			 THE { default => h v,
			       table   => map  (fn (ts, w) = (ts, h w))  ws
			     };
		     }

		 also
		 fun lpsv x
		     =
		     case x
                         VAR v => rename x;
			 _     => x;
		     esac

		 also
		 fun lpfd ( { is_recursive, all_call_sites_known, inlining_hint, calling_convention }, v, vts, e)
		     = 
		     # The function body might have changed so we need to reset
		     # the inlining hint:
		     #
		     ( { is_recursive,
                         all_call_sites_known,
                         inlining_hint => INLINE_IF_SIZE_SAFE,
                         calling_convention
                       },
		       v,
                       vts,
                       #1 (loop e)
                     )

		 also
		 fun lplet (header: Anormal_Expression -> Anormal_Expression,
			    pure,
			    v: Highcode_Variable,
			    info: Info,
			    e
		     )
		     = 
		     {   check_in (v, info);

			 my (ne, b) = loop e;

			 if pure
			      (dead v   ??  (ne, b)  :: (header ne, b));
			 else (header ne, FALSE);
			 fi;
		     }

		 also
		 fun loop le
		     =
		     case le

			 RET vs => (RET (map lpsv vs), TRUE);


			 LET (vs, RET us, e)
                             =>
			     {   paired_lists::apply check_in (vs, map SIMP_VAL us);
                                 loop e;
                             };


			 LET (vs, LET (us, e1, e2), e3)
                             => 
			     loop (LET (us, e1, LET (vs, e2, e3)));


			 LET (vs, MUTUALLY_RECURSIVE_FNS (fdecs, e1), e2)
                             =>
			     loop (MUTUALLY_RECURSIVE_FNS (fdecs, LET (vs, e1, e2)));


			 LET (vs, TYPE_FN (tfd, e1), e2)
                             => 
			     loop (TYPE_FN (tfd, LET (vs, e1, e2)));


			 LET (vs, CONSTRUCTOR (dc, ts, u, v, e1), e2)
                             =>
			     loop (CONSTRUCTOR (dc, ts, u, v, LET (vs, e1, e2)));


			 LET (vs, RECORD (rk, us, v, e1), e2)
                             => 
			     loop (RECORD (rk, us, v, LET (vs, e1, e2)));


			 LET (vs, SELECT (u, i, v, e1), e2)
                             => 
			     loop (SELECT (u, i, v, LET (vs, e1, e2)));


			 LET (vs, PRIMOP (p, us, v, e1), e2)
                             =>
			     loop (PRIMOP (p, us, v, LET (vs, e1, e2)));


			 LET (vs, e1, e2 as (RET us))
                             =>
			     if (is_eqs (vs, us))  loop e1;
			     else   my (ne1, b1) = loop e1;
				    nus = map lpsv us;

				    if ((is_diffs (vs, nus)) and b1)  (RET nus, TRUE);
				    else                              (LET (vs, ne1, RET nus), b1);
				    fi;
			     fi;


			 LET (vs, e1, e2)
			     => 
			     {   apply  (fn v = check_in (v, STD_EXPRESSION))
                                        vs;

				 my (ne1, b1) = loop e1;
				 my (ne2, b2) = loop e2;

				 if ((alldead vs) and b1 )

                                      (ne2, b2);
				 else
				      case (branchopt (vs, ne1, ne2))

					  THE xx
                                              =>
                                              (xx, b1 and b2);

					  NULL
					      => 
					      case ne2 

						  RET us
						      => 
						      if (is_eqs (vs, us))  (ne1, b1);
						      else                  (LET (vs, ne1, ne2), b1);
						      fi;

						  _   =>
						      ( LET (vs, ne1, ne2),
							b1 and b2
						      );
					      esac;
				      esac;
				 fi;
			    };


			 MUTUALLY_RECURSIVE_FNS (fdecs, e)
			     =>
			     {   fun g ( { is_recursive=>THE _, ... } :Function_Kind, v, _, _)
					 =>
					 check_in (v, STD_EXPRESSION);

				     g ((_, v, vts, xe) : Function_Declaration)
					 => 
					 check_in (v, if (is_cand v ) FUN_EXPRESSION (map #1 vts, xe); 
						 else STD_EXPRESSION;fi);
				 end;

				 apply g fdecs;

				 my (ne, b) = loop e;

				 if   (alldead (map #2 fdecs))
				      (ne, b);
				 else (MUTUALLY_RECURSIVE_FNS (map lpfd fdecs, ne), b);
				 fi;
			     };


			 APPLY (u, us)
			     => 
			     case (apply_info u)

				 THE (vs, e)
				     => 
				     {   ne = LET (vs, RET us, e);
					 loop ne;
				     };

				 _ => (APPLY (lpsv u, map lpsv us), FALSE);
			     esac;


			 TYPE_FN (tfdec as (tfk, v, tvks, xe), e)
			     => 
			     lplet ((fn z = TYPE_FN((tfk, v, tvks, 
					    #1 (loop xe)), z)), 
				   TRUE, v, STD_EXPRESSION, e);


			 TYPE_APPLY (u, ts)
                             =>
                             (TYPE_APPLY (lpsv u, ts), TRUE);


			 CONSTRUCTOR (c, ts, u, v, e)    #  this could be made more finegrain XXX BUGGO FIXME
			     => 
			     lplet ((fn z = CONSTRUCTOR (lpdc c, ts, lpsv u, v, z)), 
				   TRUE, v, CON_EXPRESSION (c, ts, u), e);

			 SWITCH (v, cs, ces, oe)
			     => 
			     case (swi_info (v, ces, oe))

				 THE ne => loop ne;

				  _   =>
                                      {   nv = lpsv v;

					  fun h ((c, e), (es, b))
                                              = 
					      {   nc = lpcon c;
						  my (ne, nb) = loop e;
					          ((nc, ne) ! es, nb and b);
					      };

					  my (nces, ncb)
                                              =
                                              fold_right h ([], TRUE) ces; 

					  my (noe, nb)
                                              = 
					      case oe 
						  NULL  => (NULL, ncb);

					          THE e => {   my (ne, b) = loop e;
							       (THE ne, b and ncb);
							    };
                                              esac;

					  (SWITCH (nv, cs, nces, noe), nb);
				      };
			     esac;


			 RECORD (rk, us, v, e)
			     => 
			     lplet ((fn z = RECORD (rk, map lpsv us, v, z)), 
				   TRUE, v, LIST_EXPRESSION us, e);


			 SELECT (u, i, v, e)
			     => 
			     case (select_info (u, i))

				 THE nv => { check_in (v, SIMP_VAL nv); loop e;};

				 NULL => lplet ((fn z = SELECT (lpsv u, i, v, z)), 
						TRUE, v, STD_EXPRESSION, e);
			     esac;


			 RAISE (v, ts) => (RAISE (lpsv v, ts), FALSE);


			 EXCEPT (e, v)
                             => 
			     {   my (ne, b) = loop e;

			         if b  (ne, TRUE);
				 else (EXCEPT (ne, lpsv v), FALSE);
                                 fi;
			     };

			 BRANCH (px as (d, p, lt, ts), vs, e1, e2)
                             =>
			     {   my (ne1, b1) = loop e1;
				 my (ne2, b2) = loop e2;

			         ( BRANCH
                                     ( case d    NULL  => px; 
						 THE d => (lpdt d, p, lt, ts);
                                       esac, 

				       map lpsv vs,
                                       ne1,
                                       ne2
                                     ),

                                   FALSE
                                 );
			    };

			 PRIMOP (px as (dt, p, lt, ts), vs, v, e)
			     => 
			     lplet
                               ( (fn z = PRIMOP
                                           ( case dt 
						 NULL  =>  px; 
						 THE d =>  (lpdt d, p, lt, ts);
                                             esac, 

					     map lpsv vs,
                                             v,
                                             z
                                           )
                                 ), 
				 FALSE,  # po::purePrimop p
                                 v,
                                 STD_EXPRESSION,
                                 e
                               );
		      esac;

		d = di::top;

		fdec -> (fk, f, vts, e);

		(fk, f, vts, #1 (loop e))
		before
                    {   m::clear m;
                        clean_up();
                    };
	    };						# fun lcontract 

	# Run the lambda contraction twice:
	# 
	lcontract
            =
            fn fdec
                =
                lcontract (lcontract (fdec, TRUE), FALSE);

    end;						# toplevel stipulate
};							# package lcontract 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
