<!-- ../doc/mldoc/run-threadkit.mldoc -->

<!DOCTYPE ML-DOC SYSTEM>

<COPYRIGHT OWNER="John H. Reppy" YEAR=2003>
<VERSION VERID="1.0" YEAR=2003 MONTH=5 DAY=12>

<TITLE>The RunTHREADKIT package</TITLE>

<INTERFACE>
<HEAD>The <CD>RunTHREADKIT</CD> package</HEAD>
<SEEALSO>
  <STRREF>threadkit</STRREF>
  <STRREF DOCUMENT=SML-BASIS-DOC TOPID>Time</STRREF>
</SEEALSO>


<PP>
The <STRREF NOLINK>RunTHREADKIT</STRREF> package provides
support for running &threadkit; programs.

<PACKAGE STRID="threadkit">
  <SIGBODY SIGID="threadkit" FILE=threadkit-SIG>
    <SPEC>
      <VAL>do_it<TY>((unit -> unit) * Time.time option) -> winix::process::status
    <SPEC>
      <VAL>isRunning<TY>unit -> bool
    <SPEC>
      <VAL>shutdown<TY>winix::process::status -> 'a
    <SPEC>
      <VAL>spawn_to_disk<TY>(string * (string * string list -> winix::process::status) * Time.time option) -> unit
<!--
    enum when = STARTUP | APP_STARTUP | THREADKIT_SHUTDOWN | SHUTDOWN
	/* The threadkit clean-up times are somewhat different than the vanilla
	 * times.
	 *
	 *	STARTUP		initialization of a program that is being run
	 *			under RunTHREADKIT.do_it.
	 *	APP_STARTUP	initialization of a stand-alone program that was
	 *			generated by spawn_to_disk.
	 *	THREADKIT_SHUTDOWN	normal program exit of a threadkit program running
	 *			under RunTHREADKIT.do_it.
	 *	SHUTDOWN		normal program exit of a stand-alone threadkit program.
	 *
	 * Note that the clean-up routines run while threadkit is still active.  It
	 * may also be useful for an application to register clean-up routines
	 * (SPAWN_TO_DISK actions are the most useful).
	 */

    val atAll : when list
	#  At all times 

    val addCleaner    : (string * when list * (when -> unit))
	  -> (when list * (when -> unit)) option
	#  Add the named cleaner.  This returns the previous definition, or NONE. 

    val removeCleaner : string -> (when list * (when -> unit)) option
	#  remove and return the named cleaner; return NONE if it is not found 

    exception UNLOG

    val logMailbox	: (string * 'a Mailbox.mbox) -> unit
    val unlogMailbox	: string -> unit

    val logChannel	: (string * 'a threadkit.chan) -> unit
    val unlogChannel	: string -> unit

    val logServer	: (string * (unit -> unit) * (unit -> unit)) -> unit
    val unlogServer	: string -> unit

    val unlogAll	: unit -> unit
-->
  </SIGBODY>
</PACKAGE>
</INTERFACE>
