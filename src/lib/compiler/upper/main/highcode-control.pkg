## highcode-control.pkg

# Compiled by:
#     src/lib/compiler/core.make6


package highcode_control #  : Highcode_Controls 

{
    stipulate

	priority = [10, 11, 1];
	obscurity = 5;
	prefix = "highcode";

	registry = control_index::make
			   { help => "optimizer (highcode) settings" };
										my _ = 
        basic_control::note_subindex (prefix, registry, priority);

	bool_cvt =  control_utilities::convert::bool;
	int_cvt  =  control_utilities::convert::int;
	sl_cvt   =  control_utilities::convert::string_list;

	nextpri = REF 0;

	fun make (c, n, h, d)
	    =
	    {   r = REF d;
		p = *nextpri;

		control
		    =
		    control::control {
			name => n,
			pri => [p],
			obscurity,
			help => h,
			control => r
		    };
	    
		nextpri := p + 1;

		control_index::note_control
		    registry
		    { control => control::string_control c control,
		      dictionary_name => THE (control_utilities::dictionary_name::to_upper "HIGHCODE_" n)
                    };
		r;
	    };
    herein

	print	             =  make (bool_cvt, "print", "show IR", FALSE);
	print_phases	     =  make (bool_cvt, "print_phases", "show phases", FALSE);
	print_function_types =  make (bool_cvt, "print_function_types", "show function types", FALSE);

	# `split' should probably be called just after
        # `optimize_mutually_recursive_functions' since
	# fcontract might eliminate some uncurry wrappers which are
	# locally unused but could be cross-module inlined.
	#
	phases
	    =
	    make (
		sl_cvt,
		"phases",
		"highcode phases",
		[   "lcontract", #  Cruder but quicker than fcontract 
		    "optimize_mutually_recursive_functions",
		    "fcontract",
		    "specialize",
		    "loopify",
		    "optimize_mutually_recursive_functions",
		    "split",
		    "fcontract",
		    "wrap",
		    "fcontract",
		    "reify",
		  # "abcopt",
		    "fcontract",
		    "optimize_mutually_recursive_functions",
		    "fcontract+eta"
		]
	    );

	inline_threshold = make (int_cvt, "inline_threshold",
				   "inline threshold", 16);
	#  split_threshold  = REF 0 

	unroll_threshold = make (int_cvt, "unroll_threshold",
				   "unroll threshold", 20);
	maxargs = make (int_cvt, "maxargs", "max number of arguments", 6);
	dropinvariant = make (bool_cvt, "dropinvariant", "dropinvariant", TRUE);

	specialize = make (bool_cvt, "specialize",
			      "whether to specialize", TRUE);

        #  lift_literals	= REF FALSE 

	sharewrap = make (bool_cvt, "sharewrap",
			     "whether to share wrappers", TRUE);

	saytappinfo = make (bool_cvt, "saytappinfo",
			       "whether to show typelifting stats", FALSE);

	#  only for temporary debugging 
        #
	misc = REF 0;

	#  highcode internal type-checking controls 
        #
	check = make (bool_cvt, "check", "whether to typecheck the IR", FALSE);

	#  fails on lowcode / * / *RegAlloc.sml
        # 
	check_datatypes = make (bool_cvt, "check_datatypes",
				  "typecheck datatypes", FALSE);

	#  loops on the make cm.sml
        # 
	check_kinds = make (bool_cvt, "check_kinds",
			      "check kinding information", TRUE);

	# Non-exported stuff:
        #
	my recover:  Ref (Int -> Void)
                  =  REF (fn x =  ());
    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## copyright 1999 YALE FLINT project 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
