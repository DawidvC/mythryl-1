/*
 * This module performs branches chaining 
 *
 * -- Allen Leung
 */

generic package branch_chaining (

     package ir:         LOWCODE_IR

     package instruction_properties:  Instruction_Properties
        sharing ir::I = instruction_properties::I
)

: LOWCODE_IR_OPTIMIZATION

{

   package ir   = IR
   package control_flow_graph  = ir::control_flow_graph
   package g    = graph
   package util = ir::Util
   package a    = rw_vector
   package c    = ir::I.C

   type flowgraph = ir::IR
 
   name = "branch_chaining"

   fun error msg = lowcode_error_message::error("branch_chaining", msg)
   
   branchChainingCount = LowCodeControl::getCounter "branch-chaining-count"

   fun run (IR as g::GRAPH cfg:  ir::IR) = 
   let exception NoTarget
       N = cfg.capacity ()

       /* Performs branch chaining */  
       branchMap = int_hash_table::make_table (13, NoTarget)
       addBranch = int_hash_table::set branchMap 
       lookupBranch = int_hash_table::lookup branchMap

       visited = a::rw_vector (N, -1)
       stamp   = REF 0

       changed = REF FALSE

       fun isTrivialCopy (instruction) =  
           let fun isTrivial([], []) = TRUE
                 | isTrivial (d . ds, s . ss) =
                   c::sameColor (d, s) and isTrivial (ds, ss)
                 | isTrivial _ = error "isTrivialCopy"
               my (dst, src) = instruction_properties::moveDstSrc instruction
           in  isTrivial (dst, src) 
           end

       fun isNop (instruction) = 
           case instruction_properties::instrKind instruction of
             instruction_properties::IK_NOP => TRUE 
           | instruction_properties::IK_COPY => isTrivialCopy (instruction) 
           | _ => FALSE

       fun isAllNop [] = TRUE
         | isAllNop (i . is) = isNop i and isAllNop is

       /* Given a blockId, finds out which block it really branches to
        * eventually.  The visited rw_vector is to prevent looping in programs
        * with self-loops.   If NO_BRANCH_CHAINING is set on a jump, we also
        * terminate there. 
        */ 
       fun chase blockId = 
       let st = *stamp
           stamp := *stamp + 1;
           fun follow blockId =
               lookupBranch blockId 
               except NoTarget =>
               if a::sub (visited, blockId) == st then blockId
               else
                 (a::update (visited, blockId, st);
                  case cfg.node_info blockId of
                    control_flow_graph::BLOCK { instructions=REF [], ... } =>
                       #  falls thru to next 
                       (case cfg.out_edges blockId of 
                          [(_, next, control_flow_graph::EDGE { k=control_flow_graph::FALLSTHRU, ... } )] => 
                             follow next 
                        | _ => blockId /* terminates here */ 
                       )
                  | control_flow_graph::BLOCK { instructions=REF (instructions as jmp . rest), ... } =>
                          #  may be a jump 
                    let my (_, a) = instruction_properties::get_notes jmp
                    in  if lowcode_notes::NO_BRANCH_CHAINING.contains a then
                            blockId #  no branch chaining! 
                        else 
                        (case cfg.out_edges blockId of
                           [(_, next, control_flow_graph::EDGE { k=control_flow_graph::JUMP, ... } )] => 
                              if isAllNop rest then follow next 
                              else blockId #  terminates here 
                         | [(_, next, control_flow_graph::EDGE { k=control_flow_graph::FALLSTHRU, ... } )] => 
                              if isAllNop instructions then follow next
                              else blockId #  terminates here 
                         | _ => blockId #  terminates here 
                        )
                    end
                 )
           targetablockId = follow blockId
       in  addBranch (blockId, targetablockId);
           if blockId != targetablockId then 
              (#  print "BRANCHING CHAINING\n"; 
               branchChainingCount := *branchChainingCount + 1;
               changed := TRUE) 
           
           targetablockId 
       end

       fun branchChaining (i, control_flow_graph::BLOCK { instructions=REF [], ... } ) = ()
         | branchChaining (i, control_flow_graph::BLOCK { instructions=REF (jmp . _), ... } ) = 
           if instruction_properties::instrKind jmp == instruction_properties::IK_JUMP then
           let fun get (i, j, e as control_flow_graph::EDGE { k=control_flow_graph::JUMP, ... } ) = (i, chase j, e)
                 | get (i, j, e as control_flow_graph::EDGE { k=control_flow_graph::BRANCH TRUE, ... } ) = (i, chase j, e)
                 | get (i, j, e as control_flow_graph::EDGE { k=control_flow_graph::SWITCH _, ... } ) = (i, chase j, e) 
                 | get e = e
               out_edges = cfg.out_edges i
           in  case out_edges of
                 ([_] | [_, _]) =>
                  let edges = map get out_edges
                  in  cfg.set_out_edges (i, edges);
                      Util::updateJumpLabel IR i
                  end
               | _ => () #  Can't do branch chaining on multiway jumps yet! 
           end
           else ()

   in  cfg.forall_nodes branchChaining;
       if *changed then (Util::removeUnreachableCode IR; ir::changed IR) 
       IR
   end

};

