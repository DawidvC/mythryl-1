#
# Yet another dfa based pattern matching engine.
# 
# Features: 
#  1. LexerEngine is a bit faster than dfa_engine in dfa construction.
#  2. The full match tree is returned upon a successful match.
#  3. The metacharacter ^ and $ are supported.
#     However, backreferences and other zero-length assertions like \b 
#     are unsupported.
#
# This version is specialized to the usual 8-bit characters.
# Note: if you don't need the full match tree, use FastLexerEngine.
#
# IMPORTANT NOTE:
# 
#  The semantics of matchtrees is different than the other backtrack
#  based engines.  In particular, if multiple alteratives match then *all*
#  results are returned.  For example, if the pattern
#
#    /a(.*(cd)|(.+)d)e/
#
#  is applied on the text abcde,
#  then the resulting match tree will look like this:
#
#  Match (THE { pos=1, len=3 },           -- the string bcd 
#     [Match (THE { pos=2, len=2 },[]),   -- the string cd 
#      Match (THE { pos=1, len=2 },[])])  -- the string bc 
#
#  Note the namings are produced for both alternatives .*(cd) and (.+)d, 
#  because the substring bcd matches both.  
#
#  -- Allen Leung



###                    THAT WEARY FEELING
###
###		Do you know that weary feeling
###		 when your mind is strangely strangled
###		and your head is like a ball of wool
###		 that's very, very tangled;
###		and the tempo of your thinking
###		 must be lenient and mild,
###		as though you were explaining
###		 to a very little child.
###
###                            -- Piet Hein



local

   DEBUG = FALSE

in

package LexerEngine:  Regular_Expression_Engine {

   package r     = abstract_regular_expression 
   package char  = r::char
   package gen   = lexer_generator_g (R)
   package lexer = LexerTables
   package m     = match_tree
   package a     = rw_vector
   package im    = int_red_black_map

   type regexp = Gen::Lexer::lexer

   fun compile re = Gen::compile [re]

   error = 0 #  the error state is always 0 

   i2s = int::to_string

   /* Create a new scanner */ 
   fun scanner (lexer as 
                  Lexer::LEXER { equiv, base, check, next, skels, numGroups, 
                              default, accept, groups, eof, 
                              start, start', ... },
               prefixOnly
              ) =
   let #  Mark the beginning/end of groups for a state 
       fun mark (state, pos, s, starts, stops) =
       let fun openGroup (g, starts, stops) = 
               (if DEBUG then 
                    print("OPEN "$i2s g$" state "$i2s state $
                          " pos="$i2s pos$"\n")
                
                (im::set (starts, g, (pos, s)), stops)
               )
           fun closeGroup (g, starts, stops) =
           let my THE (pos', s) = im::find (starts, g)
           in  if DEBUG then 
                  print("CLOSE " + i2s g + " state " + i2s state  + 
                        " pos=" + i2s pos' + "-" + i2s pos + "\n") 
               (starts, im::set (stops, g, (pos', pos, s)))
           end
           fun interp (actions, starts, stops) =
               case actions of
                 [] => (starts, stops)
               | Lexer::OPEN g . rest => 
                 let my (starts, stops) = openGroup (g, starts, stops)
                 in  interp (rest, starts, stops)
                 end
               | Lexer::CLOSE g . rest =>
                 let my (starts, stops) = closeGroup (g, starts, stops)
                 in  interp (rest, starts, stops)
                 end
               | Lexer::OPENCLOSE g . rest =>
                 case (im::find (starts, g), im::find (stops, g)) of
                   (NULL, NULL) => openCloseGroup (g, rest, starts, stops)
                 | (THE _, NULL) => closeOpenGroup (g, rest, starts, stops)
                 | (NULL, THE _) => openCloseGroup (g, rest, starts, stops)
                 | (THE (p1, _), THE (p2, _, _)) =>
                   if p1 == p2 then openCloseGroup (g, rest, starts, stops)
                   else closeOpenGroup (g, rest, starts, stops)
           and openCloseGroup (g, rest, starts, stops) =
               let my (starts, stops) = openGroup (g, starts, stops)
                   my (starts, stops) = closeGroup (g, starts, stops)
               in  interp (rest, starts, stops)
               end
           and closeOpenGroup (g, rest, starts, stops) = 
               let my (starts, stops) = closeGroup (g, starts, stops)
                   my (starts, stops) = openGroup (g, starts, stops)
               in  interp (rest, starts, stops)
               end
       in  interp (a::sub (groups, state), starts, stops)
       end
     

       /* Generate the match tree from a successful match */ 
       fun results (endGroups, rule, stream, endPos) = 
       let fun empty (Lexer::SKEL (g, sks)) = m::Match (NULL, map empty sks)
           fun walk (Lexer::SKEL (g, sks)) = 
               case im::find (endGroups, g) of 
                 NULL => m::Match (NULL, map empty sks)
               | THE (start, stop, s) => 
                  m::Match (THE { pos=s, len=stop-start }, map walk sks)
       in  m::Match (THE { pos=stream, len=endPos }, map walk (a::sub (skels, rule)))
       end

       #  This function decodes the transition tables 
       fun go (s, c) =
       let offset = a::sub (base, s) + c
       in  if a::sub (check, offset) == s 
           then a::sub (next, offset)
           else let s' = a::sub (default, s) 
                in  if s' == error then error else go (s', c)
                end
       end

       state0 = a::sub (start, 0)
       state0' = a::sub (start', 0)
       rule0 = a::sub (accept, state0)
       rule0' = a::sub (accept, state0')

       fun doScan getc stream = 
       let fun scan (s0, r0, pos, stream) = 
           let 
               fun goto (state, pos, s, starts, stops,
                        rule_ok, pos_ok, s_ok, starts_ok, stops_ok) =
               let my (starts, stops) = mark (state, pos, s, starts, stops)
                   rule = a::sub (accept, state)
                   my (rule_ok, pos_ok, s_ok, starts_ok, stops_ok) =
                       if rule >= 0 then
                          (if DEBUG then print("ACCEPT state " + i2s state + "\n") 
                           
                           (rule, pos, s, starts, stops)
                          )
                       else
                          (rule_ok, pos_ok, s_ok, starts_ok, stops_ok) 
               in  case getc s of
                     NULL => 
                        end_of_stream (state, pos, s, starts, stops,
                                    rule_ok, pos_ok, s_ok, stops_ok)
                   | THE (c, s) =>
                     let state = go (state, a::sub (equiv, char::to_int c))
                     in  if state == error 
                         then finish (rule_ok, pos_ok, s_ok, stops_ok) 
                         else  goto (state, pos+1, s, starts, stops,
                                    rule_ok, pos_ok, s_ok, starts_ok, stops_ok)
                         /*
                         let rule = a::sub (accept, state)
                             pos = pos+1
                         in  if rule >= 0 then
                               (if DEBUG then print "ACCEPT\n" 
                                goto (state, pos, s, starts, stops, 
                                     rule, pos, s, starts, stops)
                               )
                             else
                               goto (state, pos, s, starts, stops, 
                                    rule_ok, pos_ok, s_ok, starts_ok, stops_ok)
                         end
                         */
                     end
               end
               and finish(-1, pos, s, endGroups) = 
                    if prefixOnly then NULL 
                    else if state0 == error then fastcontinue (pos, stream)
                         else continue (pos, stream)
                 | finish (rule, pos, s, endGroups) = 
                    THE((results (endGroups, rule, stream, pos), rule), s)
    
               and end_of_stream (state, pos, s, starts, stops, 
                               rule_ok, pos_ok, s_ok, stops_ok) =
                   let /* my (starts, stops) = mark (state, pos, s, starts, stops)
                       rule = a::sub (accept, state)
                       my (rule_ok, pos_ok, s_ok, stops_ok) =
                           if rule >= 0 then
                              (rule, pos, s, stops)
                           else
                              (rule_ok, pos_ok, s_ok, stops_ok)  */
                       state = go (state, eof)
                   in  if state == error 
                       then finish (rule_ok, pos_ok, s_ok, stops_ok)
                       else 
                       let rule = a::sub (accept, state)
                       in  if rule >= 0 then #  An accept state 
                           let my (_, stops) = 
                               mark (state, pos, s, starts, stops)
                           in  if DEBUG then print "EOF ACCEPT\n" 
                               finish (rule, pos, s, stops)
                           end
                           else finish (rule_ok, pos_ok, s_ok, stops_ok)
                       end
                  end
    
               and continue (pos, s) = 
                   case getc s of 
                     NULL => NULL
                   | THE('\n', s) => scan (state0', rule0', pos+1, s)
                   | THE(_, s) => scan (state0, rule0, pos+1, s) 

               and fastcontinue (pos, s) = 
                   case getc s of 
                     NULL => NULL
                   | THE('\n', s) => scan (state0', rule0', pos+1, s)
                   | THE(_, s) => fastcontinue (pos+1, s) 
         
               /* 
               my (starts, stops) = mark (s0, pos, stream, im::empty, im::empty)
               my (starts_ok, stops_ok, pos_ok) =  
                    if r0 >= 0 then (starts, stops, pos)
                    else (im::empty, im::empty, -1)
               */
               my (starts, stops) = (im::empty, im::empty)
               my (starts_ok, stops_ok, pos_ok) = (im::empty, im::empty, -1)
           in  goto (s0, pos, stream, starts, stops, 
                    r0, pos_ok, stream, starts_ok, stops_ok)
           end
       in  scan (state0', rule0', 0, stream)
       end
    
   in  doScan 
   end

   fun prefixOrFind (lexer, prefixOnly) = 
   let scanner = scanner (lexer, prefixOnly)
       fun scan getc stream =
           case scanner getc stream of
             THE((m, _), s) => THE (m, s)
           | NULL => NULL
   in  scan
   end

   fun prefix lexer = prefixOrFind (lexer, TRUE)
   fun find   lexer = prefixOrFind (lexer, FALSE)

   fun match rules =
   let lexer = Gen::compile (map (fn (re, _) => re) rules)
       actions = vector::from_list (map #2 rules)
       scanner = scanner (lexer, TRUE)
       fun matcher getc stream =
           case scanner getc stream of
              THE((m, ruleno), s) => THE((vector::get (actions, ruleno)) m, s)
           |  NULL                 => NULL
   in  matcher
   end

}   #  LexerEngine 
end #  local 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
