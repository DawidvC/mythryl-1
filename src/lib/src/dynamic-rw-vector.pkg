## dynamic-rw-vector.pkg
#
# Dynamic (dense) rw_vector.
#
# -- Allen Leung

# Compiled by:
#     src/lib/src/lib7.make6

### Compiled by:
###     src/lib/compiler/lower/make7/lib.make6

# See also:
#     src/lib/src/expanding-rw-vector.pkg
#     src/lib/src/monomorphic-expanding-rw-vector.api
#     ...
# Can we combine some of these, or do we really
# need all of them?  XXX BUGGO FIXME


package dynamic_rw_vector
: (weak)  
api {
    include Rw_Vector;			# Rw_Vector		is from   src/lib/std/src/rw-vector.api
    from_array:  (rw_vector::Rw_Vector( X ), X, Int) -> Rw_Vector( X );
    base_array:   Rw_Vector( X ) -> rw_vector::Rw_Vector( X );
    check_array: (Rw_Vector( X ), rw_vector::Rw_Vector( X )) -> Void;
    clear:       (Rw_Vector( X ), Int) -> Void;
    expand_to:   (Rw_Vector( X ), Int) -> Void;
}
{
    package a  =  rw_vector;		# rw_vector		is from   src/lib/std/src/rw-vector.pkg
    package rs =  rw_vector_slice;	# rw_vector_slice	is from   src/lib/std/src/rw-vector-slice.pkg

    Vector( X ) = a::Vector( X );

    Rw_Vector X = ARRAY    (Ref( a::Rw_Vector( X ) ), X, Ref( Int ));

    exception SUBSCRIPT           = exceptions::SUBSCRIPT;
    exception INDEX_OUT_OF_BOUNDS = exceptions::INDEX_OUT_OF_BOUNDS;
    exception SIZE                = exceptions::SIZE;
    exception UNIMPLEMENTED;

    infix val 9   get ;

    max_len = a::max_len;

    fun make_rw_vector (n, d)          =  ARRAY (REF (a::make_rw_vector (n, d)), d, REF 0); 
    fun clear (ARRAY (a, def, count), n) =  { a := a::make_rw_vector (n, def); count := n;};
    fun from_array (a, d, n)           =  ARRAY (REF a, d, REF n);

    fun base_array (ARRAY (REF a, _, _)) = a;

    fun check_array (ARRAY (REF a, _, _), a')
        =
        if   (a != a' )   raise exception MATCH;   fi;

    fun length (ARRAY (REF a, _, REF n))
        =
        n;

    fun (ARRAY (REF a, d, _)) get i
        =
        a::get (a, i)
        except
            _ = d;
    
    # Note:  The (_[])   enables   'vec[index]'           notation;
    #        The (_[]:=) enables   'vec[index] := value'  notation;

    (_[]) = (get);

    fun set (ARRAY (r as REF a, d, n), i, e)
	=
	{   a::set (a, i, e);
            n := int::max (*n, i+1);
        }
        except
            _ =
	    {   new_size  = int::max (i+1,*n*2);
	        new_size  = if (new_size < 10 ) 10; else new_size;fi;
	        new_array = a::make_rw_vector (new_size, d);
	        a::copy { from => a, to => new_array, di => 0 };
	        r := new_array;
	        n := i+1;
	        a::set (new_array, i, e);
	    };


    (_[]:=) = set;

    fun expand_to (arr as ARRAY(_, d, _), n)
        =
        set (arr, n - 1, d);


    fun tabulate (n, f)
	= 
	{   rw_vector = a::tabulate (n, f);
	    default   = a::get (rw_vector, 0);

	    ARRAY (REF rw_vector, default, REF n);
	}
	except
	    _ =  raise exception SIZE;


    fun from_list l
	=
	{   rw_vector = a::from_list l;
	    default   = a::get (rw_vector, 0);

	    ARRAY (REF rw_vector, default, REF (list::length l));
	}
	except
	    _ => raise exception SIZE; end ;


    fun make_slice (ARRAY (REF a, _, REF n))
	=
	rs::make_slice (a, 0, THE n);


    fun keyed_apply f arr
	=
	rs::keyed_apply f (make_slice arr);


    fun apply f arr
	=
	rs::apply f (make_slice arr);


    fun copy { from, to, di }
	=
	keyed_apply (fn (i, x) =  set (to, i + di, x)) from;


    fun copy_vec { from, to, di }
	=
	vector::keyed_apply (fn (i, x) =  set (to, i + di, x)) from;

    fun keyed_fold_left  f init arr =  rs::keyed_fold_left  f init (make_slice arr);
    fun keyed_fold_right f init arr =  rs::keyed_fold_right f init (make_slice arr);

    fun fold_left  f init arr =  rs::fold_left  f init (make_slice arr);
    fun fold_right f init arr =  rs::fold_right f init (make_slice arr);

    fun modifyi f arr =  rs::modifyi f (make_slice arr);
    fun modify  f arr =  rs::modify  f (make_slice arr);

    fun findi p arr =  rs::findi p (make_slice arr);
    fun find  p arr =  rs::find  p (make_slice arr);

    fun exists p arr = rs::exists p (make_slice arr);
    fun all p arr    = rs::all    p (make_slice arr);

    fun collate c (a1, a2) = rs::collate c (make_slice a1, make_slice a2);
    fun to_vector arr      = rs::to_vector (make_slice arr);
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
