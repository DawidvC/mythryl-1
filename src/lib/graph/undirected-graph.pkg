# undirected-graph.pkg
#  Undirected graph in adjacency list format.
#
#  -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

generic package undirected_graph (a:  Rw_Vector)		# Rw_Vector		is from   src/lib/std/src/rw-vector.api
: (weak)
Graph_Guts						# Graph_Guts	is from   src/lib/graph/graph-guts.api
{

    package g= graph;		# graph	is from   src/lib/graph/graph.pkg
    package a = a;

    fun graph (name, graph_info, n)
	=
	{   adj           = a::make_rw_vector (n,[]);
	    nodes         = a::make_rw_vector (n, NULL);

	    node_count    = REF 0;
	    edge_count    = REF 0;

	    entries       = REF [];
	    exits         = REF [];
	    new_nodes     = REF [];
	    garbage_nodes = REF [];

	    fun new_id ()
		=
		case *new_nodes
		     []    =>   a::length nodes;
		     h ! t =>   { new_nodes := t;   h; };
		esac;

	    fun garbage_collect ()
		=
		{   new_nodes :=  *new_nodes  @  *garbage_nodes;
		    garbage_nodes := [];
		};

	    fun get_nodes ()
		=
		a::keyed_fold_right
		    (fn (i, THE n, l) =>  (i, n) ! l;
                        (_,     _, l) =>  l;
                     end)
		    []
		    nodes;


	    fun get_edges ()
		= 
		a::keyed_fold_right
		    (    fn (i, es, l)
                             =
                             fold_right
                                 (fn ((j, e), l)
			             =
			             if   (i <= j   )   (i, j, e) ! l;
                                                   else               l;  fi)
                                 l
                                 es
		    )
		    []
		    adj;

	    fun order () =   *node_count;
	    fun size ()  =   *edge_count;

	    fun capacity () =  a::length nodes;

	    fun add_node (i, n)
		=
		{   case (a::get (nodes, i))
		      
			 NULL =>  node_count :=  1 + *node_count;
			 _    =>  ();
		    esac; 

		    a::set (nodes, i, THE n);
		};

	    fun add_edge (i, j, e)
		= 
		{   a::set (adj, i, (j, e) ! a::get (adj, i));

		    if   (i != j)
			 a::set (adj, j, (i, e) ! a::get (adj, j));
		    fi;

		    edge_count := 1 + *edge_count;
		};

	    fun set_edges (i, edges)
		=
		{   fun rmv ([], l) => l;
			rmv((e as (k, _)) ! es, l) => rmv (es, if (k == i ) l; else e ! l;fi);
		    end;

		    fun add (i, j, e)
			=
			if   (i != j)
			     a::set (adj, j, (i, e) ! a::get (adj, j));
			fi;

		    old_edges = a::get (adj, i);

		    apply
			(fn (j, _) =  a::set (adj, j, rmv (a::get (adj, j),[])))
			old_edges;

		    apply add edges;

		    a::set   (adj,   i,   map  (fn (_, j, e) =  (j, e))  edges);

		    edge_count :=  *edge_count + length edges - length old_edges;
		};

	    fun remove_node i
		=
		case (a::get (nodes, i))
		  
		     NULL => ();

		     THE _ => {   set_edges (i,[]);
				  a::set (nodes, i, NULL);
				  node_count    := *node_count - 1;
				  garbage_nodes := i ! *garbage_nodes;
			      };
		esac;

	    fun remove_nodes ns
		=
		apply remove_node ns;

	    fun set_entries ns
		=
		entries := ns;

	    fun set_exits ns
		=
		exits := ns;

	    fun get_entries ()
		=
		*entries;

	    fun get_exits ()
		=
		*exits;

	    fun adj_edges i
		=
		map
		    (fn (j, e) =  (i, j, e))
		    (a::get (adj, i));

	    fun neighbors i
		=
		map #1 (a::get (adj, i));

	    fun has_edge (i, j)
		=
		list::exists
		    (fn (k, _) =  j == k)
		    (a::get (adj, i));

	    fun has_node n
		=
		case (a::get (nodes, n))
		  
		     THE _ =>  TRUE;
		     NULL  =>  FALSE;
		esac;


	    fun node_info n
		=
		case (a::get (nodes, n))
		  
		     THE x =>  x; 
		     NULL  =>  raise exception g::NOT_FOUND;
		esac;

	    fun forall_nodes f
		= 
		a::keyed_apply

		    (fn (i, THE x) =>  f (i, x);
			_          =>  ();
		     end)

		    nodes;

	    fun forall_edges f
		=
		a::keyed_apply
		    (fn (i, es)
			=
			apply
			(fn (j, e)
			    =
			    if (i <= j   )   f (i, j, e);   fi)
			es )
		    adj;

	    fun none _ =  [];

	    g::GRAPH {
	      name,
	      graph_info,
	      new_id,
	      add_node,
	      add_edge,
	      remove_node,
	      set_in_edges    => set_edges,
	      set_out_edges   => set_edges,
	      set_entries,
	      set_exits,
	      garbage_collect,
	      nodes           => get_nodes,
	      edges           => get_edges,
	      order,
	      size,
	      capacity,
	      out_edges       => adj_edges,
	      in_edges        => adj_edges,
	      next            => neighbors,
	      prior            => neighbors,
	      has_edge,
	      has_node,
	      node_info,
	      entries         => get_entries,
	      exits           => get_exits,
	      entry_edges     => none,
	      exit_edges      => none,
	      forall_nodes,
	      forall_edges
	    };
	}; 						# fun graph
};
