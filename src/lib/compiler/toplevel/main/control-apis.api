## control-apis.api 

# Compiled by:
#     src/lib/compiler/core.make6



###       "All truths are easy to understand
###        once they are discovered; the
###        point is to discover them."
###
###                  -- Galileo Galilei



api Matchcompiler_Controls {

    print_args:                   Ref(  Bool );
    print_ret:                    Ref(  Bool );
    bind_no_variable_warn:        Ref(  Bool );
    warn_on_nonexhaustive_bind:   Ref(  Bool );
    error_on_nonexhaustive_bind:  Ref(  Bool );
    warn_on_nonexhaustive_match:  Ref(  Bool );
    error_on_nonexhaustive_match: Ref(  Bool );
    warn_on_redundant_match:      Ref(  Bool );
    error_on_redundant_match:     Ref(  Bool );

#   my expand_result:              Ref( Bool )

};

api Highcode_Controls {

    print:		    Ref( Bool );
    print_phases:	    Ref( Bool );
    print_function_types:  Ref( Bool );
    phases:		    Ref( List(  String ) );

    inline_threshold:	    Ref( Int );
 #  split_threshold:       Ref( Int ) 
    unroll_threshold:	    Ref( Int );
    maxargs:		    Ref( Int );	#  to put a cap on arity raising 
    dropinvariant:	    Ref( Bool );

    specialize:	    Ref( Bool );
 #  lift_literals:	    Ref( Bool ) 
    sharewrap:	            Ref( Bool );
    saytappinfo:	    Ref( Bool );	#  for verbose typelifting 

   #  Only for temporary debugging: 
    misc:		 Ref( Int );

   #  Highcode internal type-checking controls 
    check:		 Ref(  Bool );
    check_datatypes:	 Ref(  Bool );
    check_kinds:	 Ref(  Bool );
};

api Codegenerator_Controls {

    allocprof:          Ref(  Bool );
    alphac:             Ref(  Bool );
    argrep:             Ref(  Bool );
    arithopt:           Ref(  Bool );
    beta_contract:      Ref(  Bool );
    beta_expand:        Ref(  Bool );
    bodysize:           Ref(  Int  );
    boxedconstconreps:  Ref(  Bool );
    branchfold:         Ref(  Bool );
    callee_function:    Ref(  Int  );
    checkcps1:          Ref(  Bool );
    checkcps2:          Ref(  Bool );
    checkcps3:          Ref(  Bool );
    checkcps:           Ref(  Bool );
    checklty1:          Ref(  Bool );
    checklty2:          Ref(  Bool );
    checklty3:          Ref(  Bool );
    closure_strategy:   Ref(  Int  );
    closureprint:       Ref(  Bool );
    comment:            Ref(  Bool );
    comparefold:        Ref(  Bool );
    fps_optional_optimizations:     Ref(  List(  String ) );		#  list of fps_optional_optimizations phases 
    cse:                Ref(  Bool );
    csehoist:           Ref(  Bool );
    deadup:             Ref(  Bool );
    deadvars:           Ref(  Bool );
    debugcps:           Ref(  Bool );
    dropargs:           Ref(  Bool );
    escape_function:    Ref(  Int  );
    eta:                Ref(  Bool );
    extraflatten:       Ref(  Bool );
    flatfblock:         Ref(  Bool );
    flattenargs:        Ref(  Bool );
    foldconst:          Ref(  Bool );
    handlerfold:        Ref(  Bool );
    hoistdown:          Ref(  Bool );
    hoistup:            Ref(  Bool );
    icount:             Ref(  Bool );
    if_idiom:           Ref(  Bool );
    invariant:          Ref(  Bool );
    known_cl_function:  Ref(  Int  );
    known_function:     Ref(  Int  );
    knownfiddle:        Ref(  Bool );
    lambdaopt:          Ref(  Bool );
    lambdaprop:         Ref(  Bool );
    misc4:              Ref(  Int  );
    newconreps:         Ref(  Bool );
    path:               Ref(  Bool );
    poll_checks:        Ref(  Bool );
    poll_ratio_a_to_i:  Ref(  Float);
    printit:            Ref(  Bool );
    printsize:          Ref(  Bool );
    rangeopt:           Ref(  Bool );
    recordcopy:         Ref(  Bool );
    recordopt:          Ref(  Bool );
    recordpath:         Ref(  Bool );
    reducemore:         Ref(  Int  );
    rounds:             Ref(  Int  );
    scheduling:         Ref(  Bool );
    selectopt:          Ref(  Bool );
    sharepath:          Ref(  Bool );
    spill_function:     Ref(  Int  );
    staticprof:         Ref(  Bool );
    switchopt:          Ref(  Bool );
    tail:               Ref(  Bool );
    tailrecur:          Ref(  Bool );
    targeting:          Ref(  Int  );
    uncurry:            Ref(  Bool );
    unroll:             Ref(  Bool );
    unroll_recursion:   Ref(  Bool );

    split_known_escaping_functions:          Ref(  Bool );
    optimize_after_closure:                  Ref(  Bool );
    debug_representation:                    Ref(  Bool );  

    print_flowgraph_stream:                  Ref(  file::Output_Stream );
    disambiguate_memory:                     Ref(  Bool );
    control_dependence:                      Ref(  Bool );

    comp_debugging:                          Ref(  Bool );
    module_stuff_debugging:                  Ref(  Bool );
    translate_to_anormal_debugging:          Ref(  Bool );
    type_stuff_debugging:                    Ref(  Bool );
    types_debugging:                         Ref(  Bool );
    expand_generics_g_debugging:             Ref(  Bool );
    typechecker_dictionary_debugging:        Ref(  Bool );
    generics_expansion_stuff_debugging:      Ref(  Bool );
    api_match_debugging:                     Ref(  Bool );
    typecheck_package_language_debugging:    Ref(  Bool );
    typecheck_stuff_debugging:               Ref(  Bool );
    typecheck_api_debugging:                 Ref(  Bool );
    typecheck_type_debugging:                Ref(  Bool );
    unify_types_debugging:                   Ref(  Bool );
    translate_types_debugging:               Ref(  Bool );
    expand_oop_syntax_debugging:             Ref(  Bool );
};


## COPYRIGHT (c) 1995 AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
