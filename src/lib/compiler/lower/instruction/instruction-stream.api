# instruction-stream.api
#
# Generic instruction streams.
# Components such as assemblers, machine code emitters, instruction
# selection modules communicate with each via this interface.
#
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

api Instruction_Stream {

    package pseudo_op:  Pseudo_Ops;					# Pseudo_Ops	is from   src/lib/compiler/lower/flowgraph/pseudo-op.api

    Stream (X,Y,Z,W)
        =
        STREAM 
	  { begin_cluster:       Int -> Void,				# Start new compilation unit 
	    end_cluster:         Y -> W,				# End compilation unit 
	    emit:                X -> Void,				# Emit instruction 
	    emit_pseudo_op:      pseudo_op::Pseudo_Op -> Void,		# Emit a pseudo op 
	    define_local_label:  label::Label -> Void,			# Define a local label 
	    define_global_label: label::Label -> Void,			# Define an external label 
	    emit_comment:        String -> Void,			# Emit comment 
	    add_note:            note::Note -> Void,			# Add annotation 
	    get_notes:           Void -> Ref( note::Notes ),		# Get annotations
	    end_procedure:       Z -> Void				# Mark the end of a procedure 
	  };

   # Note:
   #	o  Each compilation unit should be wrapped between begin_cluster/end_cluster.
   #
   #	o  The method annotation adds an annotation to the current basic block,
   #	   not to the current instruction. 
   #
   #	o  The method comment add a comment to the current basic block.
   #	   Usually comment (msg) is the same as 
   #	      annotation (BasicAnnotations::COMMENT msg).


};
