## paired-lists.api

# Compiled by:
#     src/lib/std/src/stdlib-core.make6


# Various analogs of the regular
# list 'foldr' 'foldl' &tc functions
# which operate in parallel upon two
# lists instead of on a single list.
#
# If lists are of unequal length, the excess elements from the
# tail of the longer one are ignored. No exception is raised.



###            "There are two types of people:
###             those who come into a room and say, "Well, here I am!"
###             and those who come in and say, "Ah, there you are."
###
###                          -- Frederick L. Collins





api Paired_Lists {


    exception UNEQUAL_LENGTHS;

    zip:     ((List( X ), List( Y ))) -> List( (X, Y) );
    zip_eq:   ((List( X ), List( Y ))) -> List( (X, Y) );
    unzip:   List( (X, Y) ) -> ((List( X ), List( Y )));
    map:     ((X, Y) -> Z) -> ((List( X ), List( Y ))) -> List( Z );
    map_eq:   ((X, Y) -> Z) -> ((List( X ), List( Y ))) -> List( Z );
    apply:     ((X, Y) -> Void) -> ((List( X ), List( Y ))) -> Void;
    apply_eq:   ((X, Y) -> Void) -> ((List( X ), List( Y ))) -> Void;
    fold_left:   (((X, Y, Z)) -> Z) -> Z -> ((List( X ), List( Y ))) -> Z;
    fold_right:   (((X, Y, Z)) -> Z) -> Z -> ((List( X ), List( Y ))) -> Z;
    foldl_eq: (((X, Y, Z)) -> Z) -> Z -> ((List( X ), List( Y ))) -> Z;
    foldr_eq: (((X, Y, Z)) -> Z) -> Z -> ((List( X ), List( Y ))) -> Z;
    all:     ((X, Y) -> Bool) -> ((List( X ), List( Y ))) -> Bool;
    all_eq:   ((X, Y) -> Bool) -> ((List( X ), List( Y ))) -> Bool;
    exists:  ((X, Y) -> Bool) -> ((List( X ), List( Y ))) -> Bool;

}; #  Api Paired_Lists 


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
