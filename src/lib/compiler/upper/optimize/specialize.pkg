## specialize.pkg 

# Compiled by:
#     src/lib/compiler/core.make6

# This is one of the A-Normal Form optimization passes --
# for context see the comments in
#
#     src/lib/compiler/upper/anormal/anormal.api
#

# minimal type derivation, type specialization,  and lifting of
# package access (not supported yet) and type application

#   "The type inference algorithm is designed to find the most
#    general types for expressions.  This is good for programming,
#    but regarding efficiency this often introduced unnecessary
#    generality, so this phase instead specializes expressions
#    to their least general type."
#
#                   -- Stefan Monnier, "Principled Compilation and Scavanging"


###        "Quality isn't something you lay
###         on top of subjects and objects
###         like tinsel on a Christmas tree."
###
###                     -- Robert Pirsig


api Specialize {

   specialize:  anormal::Program -> anormal::Program;
};

package specialize: (weak)  Specialize {		# Specialize	is from   src/lib/compiler/upper/optimize/specialize.pkg

    stipulate package ld = highcode_type;

	package lt= highcode;				# highcode			is from   src/lib/compiler/upper/highcode/highcode.pkg
	package lk= highcode_guts;			# highcode_guts			is from   src/lib/compiler/upper/highcode/highcode-guts.pkg
	package di= debruijn_index;			# debruijn_index		is from   src/lib/compiler/front/typechecker/basics/de-bruijn-index.pkg
	package pt= highcode_data_representation;	# highcode_data_representation	is from   src/lib/compiler/upper/highcode/highcode-data-representation.pkg
	package pf= pflatten;				# pflatten			is from   src/lib/compiler/upper/polylambda/pflatten.pkg

	include anormal;

    herein

	say = control_print::say;

	fun bug s
            =
            error_message::impossible ("SpecializeNvar: " + s);

	fun make_var _
            =
            highcode_var::make_highcode_variable();

	ident = fn le:  anormal::Anormal_Expression
                     =  le;

	tk_tbx = lt::tkc_box;		# The special boxed Highcode_Kind 
	tk_tmn = lt::tkc_mono;

	type_kinds_are_equivalent
            =
            lt::type_kinds_are_equivalent;


	# Checking the equivalence of two Type sequences 
	#
	type_constructors_are_equivalent
            =
            lt::type_constructors_are_equivalent;

	fun tcs_eqv (xs, ys)
	    = 
	    teq (xs, ys)
	    where 
		fun teq ([],[])
                        =>
                        TRUE;

		    teq (a ! r, b ! s)
                        =>
                        type_constructors_are_equivalent (a, b)
                            ??   teq (r, s)
                            ::   FALSE;

		    teq _ => bug "unexpected cases in tcs_eqv";
		end;
	    end;

	# Accounting functions; how many functions have been specialized 
	#
	fun make_click ()
	    = 
	    (click, num_click)
            where
	        x = REF 0;

		fun click     () =  (x := *x + 1);
		fun num_click () =  *x;
	    end;

	# ***************************************************************************
	#                   UTILITY FUNCTIONS FOR KIND AND TYPE BOUNDS              *
	# ***************************************************************************


	# Bnd is a lattice on the type hierarchy,
        # used to infer minimum type bounds.
	# Right now, we only deal with first-order kinds.
	# All higher-order kinds will be assigned KTOP.
	#
	Bound 
	  = KBOX
	  | KTOP
	  | TBND  Highcode_Type_Constructor
          ;

	Bounds
            =
            List( Bound );

	# * THE FOLLOWING FUNCTION IS NOT FULLY DEFINED 	XXX BUGGO FIXME
	#
	fun k_bnd kenv tc
	    = 
	    if (lt::tcp_var tc )

		my (i, j)  = lt::tcd_var tc;

		my (_, ks) = list::nth (kenv, i - 1) 
			     except _ =  bug "unexpected case A in kBnd";

		my (_, k)  = list::nth (ks, j)
			     except _ =  bug "unexpected case B in kBnd";

		if (type_kinds_are_equivalent (tk_tbx, k))   KBOX;
		else                                         KTOP;
		fi;

	    elif (lt::tcp_nvar tc)  KTOP;	#  FIXME: check the kenv for KBOX 
	    elif (lt::tcp_prim tc) 

		 p = lt::tcd_prim tc;

		 if (pt::unboxed p)   KTOP;
		 else                 KBOX;
		 fi;
	    else
		 KBOX;
	    fi;

	fun km_bnd kenv (tc, KTOP  ) => KTOP;
	    km_bnd kenv (tc, KBOX  ) => k_bnd kenv tc;
	    km_bnd kenv (tc, TBND _) => bug "unexpected cases in kmBnd";
	end;

	fun t_bnd kenv tc
            =
            TBND tc;

	fun tm_bnd kenv (tc, KTOP) => KTOP;
	    tm_bnd kenv (tc, KBOX) => k_bnd kenv tc;

	    tm_bnd kenv (tc, x as TBND t)
                => 
	        type_constructors_are_equivalent (tc, t)
                    ??   x
                    ::   km_bnd kenv (tc, k_bnd kenv t);
        end;


	Spkind 
	  = FULL 
	  | PART  List( Bool )		#  filter indicator; which one is gone 
	  ;

	Spinfo
	  = NOSP
	  | NARROW  List ((Highcode_Variable, Highcode_Kind))
	  | PARTSP  { ntvks: List( (Highcode_Variable, Highcode_Kind) ), nts: List( Highcode_Type_Constructor ),
		       masks: List( Bool ) }
	  | FULLSP  (List( Highcode_Type_Constructor ), List( Highcode_Variable ))
          ;


	# Given a list of default kinds, and a list
        # of bound information, a depth,  and the
        #  ( List (Highcode_Type_Constructor),  List (Highcode_Variable) ) list info
	# in the itable, returns the the spinfo.
	#
	fun bound_fn (oks, bounds, d, info)
	  = 
	  h (oks, bounds, 0, [], [], TRUE)
	  where

	      # Pass 1.

	      fun g ((TBND _) ! bs, r, z) =>  g (bs, FALSE ! r, z);
		  g (_ ! bs, r, _)        =>  g (bs, TRUE ! r, FALSE);
		  g ([], r, z)            =>  if z  FULL; else PART (reverse r);fi;
	      end;

	      spk = g (bounds, [], TRUE);

	      adj = case spk
                        FULL => (fn tc = tc);
			_    => (fn tc = lt::tc_adj (tc, d, di::next d));
                    esac;
		    #  if not full-specializations, we push depth one-level down 


	      # Pass 2.

	      n = length oks;

	      # Invariants: n = length bounds = length (the-resulting-ts) 
	      #
	      fun h ([], [], i, [], ts, _)
		      => 
		      case info
                          [(_, xs)] =>  FULLSP (reverse ts, xs);
			  _         =>  bug "unexpected case in bndGen 3";
		      esac;

		  h([], [], i, ks, ts, b)
		      => 
		      if b           NOSP;
		      elif (i == n ) NARROW (reverse ks); 
		      else           case spk
					 PART masks =>  PARTSP { ntvks=>reverse ks, nts=>reverse ts, masks };
					 _          =>  bug "unexpected case 1 in bndGen";
				     esac;
		      fi;

		  h (ok ! oks, (TBND tc) ! bs, i, ks, ts, b)
		      => 
		      h (oks, bs, i, ks, (adj tc) ! ts, FALSE);

		  h((ok as (tv, _)) ! oks, KTOP ! bs, i, ks, ts, b)
		      => 
		      h (oks, bs, i+1, ok ! ks, (lt::tcc_nvar tv) ! ts, b);

		  h((tv, ok) ! oks, KBOX ! bs, i, ks, ts, b)
		      => 
		      {   #  nk = if type_kinds_are_equivalent (tk_tbx, ok) then ok else tk_tbx 

			  my (nk, b)
                              = 
			      type_kinds_are_equivalent (tk_tmn, ok)
                                  ??  (tk_tbx, FALSE)
                                  ::  (ok, b);

		         h (oks, bs, i+1, (tv, nk) ! ks, (lt::tcc_nvar tv) ! ts, b);
		     };

		  h _ => bug "unexpected cases 2 in bndGen";
	      end;
	  end;


	# **************************************************************************
	#                  UTILITY FUNCTIONS FOR INFO DICTIONARIES                 *
	# **************************************************************************


	# We maintain a table mapping each
        # Highcode_Variable to its definition depth,
	# its type, and a list of its uses,
        # indexed by its specific type instances. 

	exception ITABLE;
	exception DTABLE;

	Dinfo 
	  = ESCAPE
	  | NOCSTR
	  | CSTR  Bounds
          ;

	Depth  = di::Depth;
	Info   = List ( (List( Highcode_Type_Constructor ),  List( Highcode_Variable)) );
	Itable = int_hash_table::Hash_Table( Info );   #  Highcode_Variable -> (Highcode_Type_Constructor List * Highcode_Variable) 
	Dtable = int_hash_table::Hash_Table ((Depth, Dinfo)); 

	Info_Dictionary = IENV   (List ((Itable, List ((Highcode_Variable, Highcode_Kind)))), Dtable); 

	# **************************************************************************
	#              UTILITY FUNCTIONS FOR TYPE SPECIALIZATIONS                  *
	# **************************************************************************
	# * initializing a new info dictionary:  Void -> infoDict 
	#
	fun init_info_dictionary ()
            = 
	    {   my itable:  Itable = int_hash_table::make_table (32, ITABLE);  
	        my dtable:  Dtable = int_hash_table::make_table (32, DTABLE);
	        IENV ([(itable,[])], dtable);
	    };

	# Register a definition of sth
        # interesting into the info dictionary 
	#
	fun typechecked_package_dtable (IENV(_, dtable), v, ddinfo)
            =
	    int_hash_table::set dtable (v, ddinfo);

	# Mark an Highcode_Variable
        # in the dtable as escape:
	#
	fun esc_dtable (IENV(_, dtable), v)
            = 
	    case (int_hash_table::find dtable v)
		THE (_, ESCAPE) => ();
		THE (d, _)      => int_hash_table::set dtable (v, (d, ESCAPE));
		NULL            => ();
	    esac;


	# Register a dtable entry; modify the
        # least upper bound of a particular
	# type naming; notice I am only moving
        # kind info upwards, not type info,
	# I could move type info upwards though.
	#
	fun reg_dtable (IENV (kenv, dtable), v, infos)
            = 
	    {   my (dd, dinfo)
                    = 
		    (int_hash_table::get  dtable  v)
		    except
		        _ = bug "unexpected cases in regDtable";

	        case dinfo 
		     ESCAPE => ();
		     _ => 
		       {  fun h ((ts, _), ESCAPE) => ESCAPE;
			      h ((ts, _), NOCSTR) => CSTR (map (k_bnd kenv) ts);

			      h ((ts, _), CSTR bnds)
                                  => 
				  {   nbnds = paired_lists::map (km_bnd kenv) (ts, bnds);
				      CSTR nbnds;
				  };
                          end;

			  ndinfo = fold_right h dinfo infos;

			  int_hash_table::set dtable (v, (dd, ndinfo));
		       };
		esac;
	    };			# fun reg_dtable 


	# Calculate the least upper bound of all type instances;
	# this should take v out of the current dtable ! 
        #
	fun sum_dtable (IENV (kenv, dtable), v, infos)
            = 
	    {   my (dd, dinfo)
		    = 
		    (int_hash_table::get  dtable  v)
		    except
			_ = bug "unexpected cases in sum_dtable";

	       case dinfo

		   ESCAPE
                       =>
                       (dd, ESCAPE);

		   _   => 
			 {   fun h ((ts, _), ESCAPE) => ESCAPE;
				 h ((ts, _), NOCSTR) => CSTR (map (t_bnd kenv) ts);

				 h ((ts, _), CSTR bnds)
                                     => 
				     {   nbnds = paired_lists::map (tm_bnd kenv) (ts, bnds);
				         CSTR nbnds;
				     };
                             end;

			     ndinfo = fold_right h dinfo infos;

			     (dd, ndinfo);
			 };
		 esac;
	     };

	# Find out the set of nvars
        # in a list of tycs:
	# 
	fun tcs_nvars tcs
            =
            sorted_list::foldmerge (map lk::free_named_variables_in_type_constructor tcs);

	# Get and add a new type
        # instance into the itable:
        #
	fun get_itable (IENV (itabs, dtab), d, v, ts, getlty, nv_depth)
            = 
	    {   my (dd, _)
                    = 
		    (int_hash_table::get  dtab  v)
		    except _ =  bug "unexpected cases in get_itable";

		nd = list::fold_right int::max dd (map nv_depth (tcs_nvars ts));

		my (itab, _) = ((list::nth (itabs, d-nd))
			       except
				   _ = bug "unexpected itables in lookUpItable");

		nts = map (fn t = lt::tc_adj (t, d, nd))
                          ts;

		xi  = the_else (int_hash_table::find itab v, []);

		fun h ((ots, xs) ! r)
			=>
			if (tcs_eqv (ots, nts))  (map VAR xs);
			else                     h r;
			fi;

		    h [] =>
			{   oldt = getlty (VAR v);     # ** old type is ok **
			    bb = lt::instantiate_polymorphic_lambda_or_higher_order_constructor_type (oldt, ts);
			    nvs =  map make_var  bb;
			    int_hash_table::set itab (v, (nts, nvs) ! xi);
			    map VAR nvs;
			};
		end;

		h xi;
	    };

	# Push a new layer of type abstraction:  infoDict -> infoDict 
	#
	fun push_itable (IENV (itables, dtable), tvks)
            = 
	    {   my nt:  Itable
                    =
                    int_hash_table::make_table (32, ITABLE);

	        (IENV((nt, tvks) ! itables, dtable));
	    };

	# Pop off a layer when exiting a
        # type abstaction, adjust the
        # dtable properly, and generate the
        # proper headers: infoDict -> (Anormal_Expression -> Anormal_Expression)
	#
	fun pop_itable (IENV([], _))
                =>
	        bug "unexpected empty information dictionary in popItable";

	    pop_itable (ienv as IENV((nt, _) ! _, _))
                => 
	        {   infos = int_hash_table::keyvals_list nt;

		    fun h ((v, info), header)
			= 
			{   reg_dtable (ienv, v, info);

			    fun g ((ts, xs), e)
                                =
                                LET (xs, TYPE_APPLY (VAR v, ts), e);

			    fn e =  fold_right g (header e) info;
			};

		    fold_right h ident infos; 
	      };
        end;

	# Check out a escaped variable from the info dictionary, build the header properly 
	#
	fun check_out_esc (IENV([], _), v)
                =>
	        bug "unexpected empty information dictionary in chkOut";

	    check_out_esc (ienv as IENV((nt, _) ! _, _), v)
                => 
	        {   info = the_else (int_hash_table::find nt v, []);

		    fun g ((ts, xs), e)
                        =
                        LET (xs, TYPE_APPLY (VAR v, ts), e);

		    header =  fn e = fold_right g e info;

		    # Remove this v so it won't
                    # be considered again 
		    #
		    ignore (int_hash_table::remove nt v)
                           except _ = ();

		    header;
	        };
        end;

	fun check_out_escs (ienv, vs)
            = 
	    fold_right
                (fn (v, h) =  (check_out_esc (ienv, v)) o h)
                ident
                vs;

	# Check out a regular variable from the info dictionary, build the header
	# properly, of course, adjust the corresponding dtable entry.
	#
	fun check_out_norm (IENV([], _), v, oks, d)
                =>
	        bug "unexpected empty information dictionary in chkOut";

	    check_out_norm (ienv as IENV((nt, _) ! _, dtable), v, oks, d)
                => 
		{   info = the_else (int_hash_table::find nt v, []);

		    my (_, dinfo) = sum_dtable (ienv, v, info);

		    spinfo = 
		      case dinfo

			  ESCAPE => NOSP;

			  NOCSTR => # Must be a dead function, let's double check.
			      case info
                                  [] => NOSP;
				  _  => bug "unexpected cases in chkOutNorm";
			      esac;

			  CSTR bounds => bound_fn (oks, bounds, d, info);
                      esac;

		    fun make_header ((ts, xs), e)
                        = 
			case spinfo

			    FULLSP _ => e;

			    PARTSP { masks, ... }
				=> 
				{   fun h ([], [], z)
					    =>
					    reverse z;

					h (a ! r, b ! s, z)
					    =>
					    if b  h (r, s, a ! z); else h (r, s, z);fi;

					h _ => bug "unexpected cases in tapp";
				    end;

				    LET (xs, TYPE_APPLY (VAR v, h (ts, masks, [])), e);
				};

			     _ => LET (xs, TYPE_APPLY (VAR v, ts), e);
			esac;

		    header =  fn e = fold_right make_header e info;

		    # Don't consider it again... 
		    #
		    int_hash_table::remove nt v
                    except
                        _ = [];

		    (header, spinfo);
		};
	end;

	/****************************************************************************
	 *                         MAIN FUNCTION                                    *
	 ****************************************************************************/

	# The substitution intmapf: named variable -> Highcode_Type_Constructor
	#
	Smap = List ((Highcode_Variable, Highcode_Type_Constructor));

	initsmap = [];

	fun mergesmaps (s1: Smap as h1 ! t1, s2: Smap as h2 ! t2)
                =>
	        case (int::compare (#1 h1, #1 h2))   
		    LESS => h1 ! (mergesmaps (t1, s2));
		    GREATER => h2 ! (mergesmaps (s1, t2));
		    EQUAL => h1 ! (mergesmaps (t1, t2));  #  Drop h2 
		esac;

	    mergesmaps (s1, []) => s1;
	    mergesmaps ([], s2) => s2;
        end;

	fun addsmap (tvks, ts, smap)
            = 
	    {   fun select ((tvar, type_kind), type_constructor)
                    =
                    (tvar, type_constructor);

		tvtcs = paired_lists::map select (tvks, ts);

		fun cmp ((tvar1, _), (tvar2, _))
                    =
                    tvar1 > tvar2;

		tvtcs = list_mergesort::sort cmp tvtcs;

		mergesmaps (tvtcs, smap);
	    };

	# **** end of the substitution intmapf hack ********************

	# **** the nvar-depth intmapf: named variable -> di::depth ********

	Nmap = int_binary_map::Map( di::Depth );

	initnmap = int_binary_map::empty;

	fun addnmap (tvks, d, nmap)
            = 
	    h (tvks, nmap)
            where
	        fun h ((tv, _) ! xs, nmap)
                        => 
		        h (xs, int_binary_map::set (nmap, tv, d));

		    h ([], nmap)
                        =>
                        nmap;
                end;
	    end; 

	fun looknmap nmap nvar
	    = 
	    case (int_binary_map::get (nmap, nvar))
		THE d => d;
		NULL  => di::top;
	    esac;
	    #   Bug "unexpected case in looknmap") 

	# **** end of the substitution intmapf hack ********************

	fun phase x = compile_statistics::do_phase (compile_statistics::make_phase x);
	recover = /* phase "Compiler 053 recover" */ recover_type_info::recover_type_info;

	fun specialize fdec
            = 
	    {   my (click, num_click)
                    =
                    make_click ();

		# In pass1, we calculate the old type of each variables in the highcode
		# expression. The reason we can't merge this with the main pass is
		# that the main pass traverse the code in different order.
		# There must be a simpler way, but I didn't find one yet (ZHONG).
		#
		my { get_lty=>getlty, clean_up, ... }
                    =
                    recover (fdec, FALSE);

		# transform: infoDict * di::depth * convert( Highcode_Type ) * convert( Highcode_Type_Constructor )
		#            * smap * Bool -> (Anormal_Expression -> Anormal_Expression)
		#            where type convert X = di::depth -> X -> X
		# The 2nd argument is the depth of the resulting expression.
		# The 3rd and 4th arguments are used to encode the type translations. 
		# The 5th argument is the substitution map.
		# The 6th argument is a flag that indicates whether we need to 
		# flatten the return results of the current function.

		tc_nvar_subst = lt::tc_nvar_subst_fn();
		lt_nvar_subst = lt::lt_nvar_subst_fn();

		fun transform (ienv, d, nmap, smap, did_flat)
		    = 
		    {   tcf = tc_nvar_subst smap;
			ltf = lt_nvar_subst smap;
			nv_depth = looknmap nmap;

			# We chkin and chkout polymorphic values only 
			#
			fun chkin   v  = typechecked_package_dtable (ienv, v, (d, ESCAPE));
			fun chkout  v  = check_out_esc (ienv, v);

			fun chkins  vs = apply chkin vs;
			fun chkouts vs = check_out_escs (ienv, vs);

			# lpvar:  value -> value 
			#
			fun lpvar (u as (VAR v))
                                =>
                                {   esc_dtable (ienv, v);
                                    u;
                                };

			    lpvar u
                                =>
                                u;
                        end;

			# lpvars:  List( value ) -> List( value )
			#
			fun lpvars vs
                            =
                            map lpvar vs;

			# lpprim:  primitive_operation -> primitive_operation 
			#
			fun lpprim (d, po, lt, ts)
                            =
                            (d, po, ltf lt, map tcf ts);

			# lpdc:  dcon -> dcon 
			#
			fun lpdc (s, representation, lt)
                            =
                            (s, representation, ltf lt);

			# lplet:  Highcode_Variable * Anormal_Expression -> (Anormal_Expression -> Anormal_Expression) 
			#
			fun lplet (v, e, fate)
			    = 
			    {   chkin v;
				ne = loop e;
				fate ((chkout v) ne);
			    }

			# lplets:  List( Highcode_Variable ) * Anormal_Expression -> (Anormal_Expression -> Anormal_Expression) 
			#
			also
			fun lplets (vs, e, fate)
			    = 
			    {   chkins vs;
				ne = loop e;
				fate ((chkouts vs) ne);
			    }

			# lpcon:  con * Anormal_Expression -> con * Anormal_Expression 
			#
			also
			fun lpcon (DATACON (dc, ts, v), e)
				=> 
				(DATACON (lpdc dc, map tcf ts, v), lplet (v, e, fn x => x; end ));

			    lpcon (c, e)
				=>
				(c, loop e);
			end 

			# lpfd:  fundec -> fundec *** requires REWORK *** 
			#
			also
			fun lpfd (fk as { calling_convention=>CALLING_CONVENTION_GENERIC, ... }, f, vts, be)
				=> 
				( fk,
                                  f,
                                  map (fn (v, t) = (v, ltf t)) vts, 
				  lplets (map #1 vts, be, fn e = e)
                                );

			    lpfd (fk as { calling_convention=>CALLING_CONVENTION_FUNCTION fn_flag, is_recursive, all_call_sites_known, inlining_hint }, f, vts, be)
				 => 
				 {   # First, get the original arg and result types of f:
				     #
				     my (fn_flag', atys, rtys)
					 =
					 lt::ltd_arrow (getlty (VAR f));

				     # Sanity check: (Sld turn this off later):
				     #
				     my (b1, b2)
                                         = 
				         if (lt::function_flags_are_equivalent (fn_flag, fn_flag'))

                                             lt::ffd_fspec fn_flag;
				         else
                                             bug "unexpected code in lpfd";
                                         fi;

				     # Get the newly specialized types:
				     #
				     my (natys, nrtys)
                                         =
                                         (map ltf atys, map ltf rtys);

				     # Do we need flatten the arguments and the results?
				     # 
				     my ((arg_raw, arg_ltys, _), unflatten)
                                         = 
				         pf::v_unflatten (natys, b1);

				     my (body_raw, body_ltys, ndid_flat)
                                         =
                                         pf::t_flatten (nrtys, b2);

				     # Process the function body:
				     #
				     nbe = if (ndid_flat == did_flat)  loop be;
				           else                        transform (ienv, d, nmap, smap, ndid_flat) be;
                                           fi;

				     my (arg_lvs, nnbe)
                                         =
                                         unflatten (map #1 vts, nbe);

				     # Fix the is_recursive information:
				     #
				     nisrec = case is_recursive
						  THE _ => THE (body_ltys, OTHER_LOOP);
                                                  NULL  => NULL;
                                              esac;

				     nfixed = lt::ffc_fspec (fn_flag, (arg_raw, body_raw));

				     nfk = { is_recursive => nisrec,
                                             calling_convention => CALLING_CONVENTION_FUNCTION nfixed,
					     all_call_sites_known,
                                             inlining_hint
                                           };

				     (nfk, f, paired_lists::zip (arg_lvs, arg_ltys), nnbe);
				 };
			end 

			# lptf:  tfundec * Anormal_Expression -> Anormal_Expression *** Invariant: ne2 has been processed 
			#
			also
			fun lptf ((tfk, v, tvks, e1), ne2)
			    = 
			    {   nienv = push_itable (ienv, tvks);
				nd = di::next d;
				nnmap = addnmap (tvks, nd, nmap);
				ne1 = transform (nienv, nd, nnmap, smap, FALSE) e1;
				header = pop_itable nienv;

				TYPE_FN((tfk, v, tvks, header ne1), ne2);
			    }

			# loop:  Anormal_Expression -> Anormal_Expression 
			also
			fun loop le
			  = 
			  case le

			      RET vs
				  =>
				  if did_flat  

				      vts = map (ltf o getlty) vs;

				      my ((_, _, ndid_flat), flatten)
                                          =
                                          pf::v_flatten (vts, FALSE);

				      if ndid_flat 
					  my (nvs, header) = flatten vs;
					  header (RET nvs);
				      else
					  RET (lpvars vs);
				      fi;

				  else
                                      RET (lpvars vs);
				  fi;

			      LET (vs, e1, e2)
				  => 
				  {   # First, get the original types:
				      #
				      vtys = map (ltf o getlty o VAR) vs;

				      # Second, get the newly specialized types:
				      # 
				      my ((_, _, ndid_flat), unflatten)
					  = 
					  pf::v_unflatten (vtys, FALSE);
					    #  treat the let type as always "cooked" 

				     chkins vs;

				     ne2 = loop e2;
				     ne2 = (chkouts vs) ne2;

				     my (nvs, ne2)
                                         =
                                         unflatten (vs, ne2);

				     ne1 = if (ndid_flat == did_flat)  loop e1;
					   else                        transform (ienv, d, nmap, smap, ndid_flat) e1;
					   fi; 

				     LET (nvs, ne1, ne2);
				 };

			      MUTUALLY_RECURSIVE_FNS (fdecs, e)
				  =>
				  MUTUALLY_RECURSIVE_FNS (map lpfd fdecs, loop e);

			      APPLY (v, vs)
				  => 
				  {   vty = getlty v;

				      if (lt::ltp_fct vty)
					   APPLY (lpvar v, lpvars vs);
				      else 
					   # First get the original arg and result types of v 

					   my (fn_flag, atys, rtys)
                                               =
                                               lt::ltd_arrow vty;

					   my (b1, b2)
                                               =
                                               lt::ffd_fspec fn_flag;


					   # Get the newly specialized types:

					   my (natys, nrtys)
                                               =
                                               (map ltf atys, map ltf rtys);

					   my (nvs, hdr1)
                                               =
                                               (#2 (pf::v_flatten (natys, b1))) vs;

					   hdr2 = 
					       if did_flat
						    ident;
					       else
						    my ((_, _, ndid_flat), unflatten)
                                                        = 
							pf::v_unflatten (nrtys, b2);

						    fvs = map make_var nrtys;

						    if ndid_flat 

							my (nvs, xe)
                                                            = 
							    unflatten (fvs, RET (map VAR fvs));

							fn le =  LET (nvs, le, xe);
						    else
                                                        ident;
                                                    fi;

					       fi;

					   hdr1 (APPLY (lpvar v, lpvars nvs));
				      fi;
				 };

			      TYPE_FN((tfk, v, tvks, e1), e2)
				  => 
				  {   typechecked_package_dtable (ienv, v, (d, NOCSTR));
				      ne2 = loop e2; 
				      ks = map #2 tvks;
				      my (hdr2, spinfo) = check_out_norm (ienv, v, tvks, d);  
				      ne2 = hdr2 ne2;

				      case spinfo

					  NOSP =>
                                              lptf((tfk, v, tvks, e1), ne2);

					  NARROW ntvks
                                              =>
                                              lptf((tfk, v, ntvks, e1), ne2);

					  PARTSP { ntvks, nts, ... }
					      =>
					      #  Assume nts is already shifted one level down 
					      { nienv = push_itable (ienv, ntvks);
						  xd = di::next d;
						  nnmap = addnmap (ntvks, xd, nmap);
						  nsmap = addsmap (tvks, nts, smap);
						  ne1 = 
						    transform (nienv, xd, nnmap, nsmap, FALSE) e1;
						  hdr0 = pop_itable nienv;
						TYPE_FN((tfk, v, ntvks, hdr0 ne1), ne2);
					      };

					  FULLSP (nts, xs)
					      => 
					      { 
						  nnmap = addnmap (tvks, d, nmap);
						  nsmap = addsmap (tvks, nts, smap);
						  ne1 = transform (ienv, d, nnmap, nsmap, FALSE) e1;
						click(); LET (xs, ne1, ne2);
					      };
				      esac;
				 };

			      TYPE_APPLY (u as VAR v, ts)
				  => 
				  {   nts = map tcf ts;
				      vs = get_itable (ienv, d, v, nts, getlty, nv_depth);

				      if did_flat  

					  vts = lt::instantiate_polymorphic_lambda_or_higher_order_constructor_type (ltf (getlty u), nts);

					  my ((_, _, ndid_flat), flatten)
                                              = 
					      pf::v_flatten (vts, FALSE);

					  if ndid_flat 
					      my (nvs, header) = flatten vs;
					      header (RET nvs);
					  else
					      RET vs;
					  fi;
				      else
					   RET vs;
				      fi;
				 };

			      SWITCH (v, csig, cases, opp)
				  => 
				  SWITCH
                                    ( lpvar v,
                                      csig,
                                      map lpcon cases, 
				      case opp
                                          THE e => THE (loop e);
                                          NULL => NULL;
                                      esac
                                    );

			      CONSTRUCTOR (dc, ts, u, v, e)
				  => 
				  lplet (v, e,  fn ne = CONSTRUCTOR (lpdc dc, map tcf ts, lpvar u, v, ne));

			      RECORD (rk as RK_VECTOR t, vs, v, e)
				  => 
				  lplet (v, e, fn ne = RECORD (RK_VECTOR (tcf t), 
							      lpvars vs, v, ne));
			      RECORD (rk, vs, v, e)
				  =>
				  lplet (v, e, fn ne = RECORD (rk, lpvars vs, v, ne));

			      SELECT (u, i, v, e)
				  => 
				  lplet (v, e, fn ne = SELECT (lpvar u, i, v, ne));

			      RAISE (sv, ts)
				  => 
				  {   nts = map ltf ts;
				      nsv = lpvar sv;

				      if did_flat 
					  nnts = #2 (pf::t_flatten (nts, FALSE));
					  RAISE (nsv, nnts);
				      else 
					  RAISE (nsv, nts);
				      fi;
				 };

			      EXCEPT (e, v)
				  =>
				  EXCEPT (loop e, lpvar v);

			      BRANCH (p, vs, e1, e2)
				  => 
				  BRANCH (lpprim p, lpvars vs, loop e1, loop e2);

			      PRIMOP (p, vs, v, e)
				  => 
				  lplet (v, e, fn ne = PRIMOP (lpprim p, lpvars vs, v, ne));

			      _ => bug "unexpected lexps in loop";
			  esac;
		      loop; 
		  };			# fun transform 


		case fdec

		     (fk as { calling_convention=>CALLING_CONVENTION_GENERIC, ... }, f, vts, e)
			 => 
			 {   ienv = init_info_dictionary();

			     d = di::top;

			     apply (fn (x, _) = typechecked_package_dtable (ienv, x, (d, ESCAPE)))
                                   vts;

			     ne = transform (ienv, d, initnmap, initsmap, FALSE) e;

			     header = check_out_escs (ienv, map #1 vts);

			     nfdec = (fk, f, vts, header ne) before (clean_up());

			     if (num_click () > 0)
                                 #  LContract::lcontract
                                 nfdec;
			         #  if we did specialize, we run a round of lcontract on the result 
			     else
                                 nfdec;
                             fi;
			 };

		    _ => bug "non generic package program in specialize";
	    esac;
	    };				# fun specialize 

    end;				# toplevel stipulate 
};					# package specialize 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
