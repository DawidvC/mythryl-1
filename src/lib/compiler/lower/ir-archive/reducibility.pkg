/*
 * This module tests for reducibility of a loop
 *
 * -- Allen Leung
 */
generic package Reducibility (Loop:  Loop_Structure) : REDUCIBILITY {

   package loop = Loop
   package dom  = Loop::Dom
   package g    = graph

   package derived = derived_graph (Dom)

   fun is_reducible (Loop) =
   let Dom = Loop::dom Loop
       headers = Loop::header Loop
       my Derived as g::GRAPH derived = Derived::derived_graph Dom   
       N = derived.capacity ()
       irreducible = bit_set::create N
       fun markIrreducible([_], _) = () #  simple cycles are reducible 
         | markIrreducible (cycle, _) = 
           apply (fn n => bit_set::set (irreducible, n)) cycle
       graph_strongly_connected_components::scc Derived markIrreducible ()
       fun isReducible n =
       let h = rw_vector::get (headers, n)
       in  not (bit_set::contains (irreducible, n)) end 
   in  isReducible 
   end
}
