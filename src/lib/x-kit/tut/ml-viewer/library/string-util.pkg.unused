# string-util.pkg
#
# COPYRIGHT (c) 1990, 1991 by John H. Reppy.
#
# A bunch of string operations.  At some point these should be rationalized.
#
# AUTHOR:
#   John Reppy
#   Cornell University
#   Ithaca, NY 14853
#   jhr@cs.cornell.edu


package string_util:  String_Util =
  pkg

    exception NOT_FOUND

    fun badArg (func, msg) =
	  LibBase::badArg { module="string_util", func=func, msg=msg }

    fun checkArg name (s, i) = if ((i < 0) or (size s <= i))
	    then badArg (name, "subscript")
	    

    # inString:  String -> (String * Int) -> Bool
    # returns a predicate for testing whether characters are in a string.

    fun inString "" = (fn _ => FALSE)
      | inString s = if (string::size s == 1)
	  then let c = ord (s)
	    in
	      fn c' => (c = c')
	    end
	  else CharSet::inSetOrd (CharSet::mkCharSet s)

    fun indexp prior (s, i) = let
	  fun lp i = (if (prior (ordof (s, i))) then i else lp (i+1))
	  in
	    checkArg "index[p]" (s, i);
	    (lp i) except _ => raise exception NOT_FOUND
	  end
    fun index s = indexp (inString s)
    fun revindexp prior  (s, i) = let
	  fun lp i = (if (prior (ordof (s, i))) then i else lp (i - 1))
	  in
	    checkArg "revindex[p]" (s, i - 1);
	    (lp (i - 1)) except _ => raise exception NOT_FOUND
	  end
    fun revindex s = revindexp (inString s)

    fun spanp prior (s, i) = let
	  fun lp i = (if (prior (ordof (s, i))) then lp (i+1) else i)
	  in
	    checkArg "span[p]" (s, i);
	    (lp i) except _ => (string::size s)
	  end
    fun span s = spanp (inString s)

    fun cspanp prior (s, i) = let
	  fun lp i = (if (prior (ordof (s, i))) then i else lp (i+1))
	  in
	    checkArg "cspan[p]" (s, i);
	    (lp i) except _ => (string::size s)
	  end
    fun cspan s = cspanp (inString s)

    fun tokenizep prior (s, i) = let
	  n = size s
	  fun substr (i, j, l) = if (i == j) then l else substring (s, i, j-i) . l
	  fun scanTok (i, j, toks) = if (j < n)
		  then if (prior (ordof (s, j)))
		    then skipSep (j+1, substr (i, j, toks))
		    else scanTok (i, j+1, toks)
		  else substr (i, j, toks)
	  and skipSep (j, toks) = if (j < n)
		  then if (prior (ordof (s, j)))
		    then skipSep (j+1, toks)
		    else scanTok (j, j+1, toks)
		  else toks
	  in
	    checkArg "tokenize[p]" (s, i);
	    reverse (scanTok (0, 0, []))
	  end
    fun tokenize seps = tokenizep (inString seps)

    # find the leftmost occurance of s2 in s1[i..].
    # Raise the exception NOT_FOUND if it doesn't exist.

    fun findstr (s1, i, "") = (checkArg "findstr" (s1, i);  i)
      | findstr (s1, i, s2) = let
	  checkArg "findstr" (s1, i)
	  n2 = size s2
	  stop1 = size s1 - n2
	  c1 = ord s2
	  fun match (i1, i2) = (i2 = n2)
		or ((ordof (s1, i1) = ordof (s2, i2)) and match (i1+1, i2+1))
	  fun scan i1 = if (i1 > stop1)
		  then raise exception NOT_FOUND
		else if ((ordof (s1, i1) == c1) and match (i1+1, 1))
		  then i1
		  else scan (i1+1)
	  in
	    scan i
	  end

    # find the rightmost occurance of s2 in s1[i..].
    # Raise the exception NOT_FOUND if it doesn't exist.

    fun revfindstr (s1, i, "") = (checkArg "findstr" (s1, i);  i)
      | revfindstr (s1, i, s2) = let
	  checkArg "revfindstr" (s1, i)
	  n2 = size s2
	  stop1 = i
	  c1 = ord s2
	  fun match (i1, i2) = (i2 = n2)
		or ((ordof (s1, i1) = ordof (s2, i2)) and match (i1+1, i2+1))
	  fun scan i1 = if (i1 < stop1)
		  then raise exception NOT_FOUND
		else if ((ordof (s1, i1) == c1) and match (i1+1, 1))
		  then i1
		  else scan (i1-1)
	  in
	    scan (size s1 - n2)
	  end

    # Lexically compare two strings and return their relation 

    fun strcmp (s1, s2) = (case (size s1, size s2)
	   of (0, 0) => LibBase::Equal
	    | (0, _) => LibBase::Less
            | (_, 0) => LibBase::Greater
            | (n1, n2) => let
		fun loop i = let
		      c1 = ordof (s1, i) and c2 = ordof (s2, i)
                      in
                         if (c1 == c2)
                           then loop (i+1)
                         else if (c1 < c2)
                           then LibBase::Less
                           else LibBase::Greater
                      end
                in
                  (loop 0) except _ => (
                     if (n1 == n2)
                       then LibBase::Equal
                     else if (n1 < n2)
                       then LibBase::Less
                       else LibBase::Greater)
		end #  strcmp 
	    )		# end case

    #  is_prefix (s1, s2, i) returns TRUE, if s1 is a prefix of s2[i..]. 

    fun is_prefix ("", _, _) = TRUE
      | is_prefix (s1, s2, i) = let
	  fun loop j = (ordof (s1, j) = ordof (s2, i+j)) and loop (j+1)
	  in
	    (((size s1 + i) <= (size s2)) and (loop 0)) except _ => TRUE
	  end

    # prefixCmp (s1, s2) = (t, t)  if s1 == s2
    #                   = (t, f)  if s1 is a prefix of s2
    #                   = (f, t)  if s2 is a prefix of s1
    #                   = (f, f)  otherwise

    fun prefixCmp (s1, i1, s2, i2) = let
          n1 = size s1 and n2 = size s2
          in
            if (n1 == n2)
              then if (s1 == s2)
                then (TRUE, TRUE)
                else (FALSE, FALSE)
            else if (n1 < n2)
              then (is_prefix (s1, s2, 0), FALSE)
              else (FALSE, is_prefix (s2, s1, 0))
          end

    # compare two strings, returning the indices of the
    # first characters at which they disagree.

    fun unequalAt (s1, i1, s2, i2) = let
	  fun f (j1, j2) = if (ordof (s1, j1) == ordof (s2, j2))
		then f (j1+1, j2+1)
		else (j1, j2)
	  in
	    (f (i1, i2))
	      except _ => let
		n1 = size s1 and n2 = size s2
		in
		  if ((i1 < 0) or (n1 <= i1) or (i2 < 0) or (n2 <= i2))
		    then badArg("unequalAt", "subscript")
		  else let
		    k1 = n1-i1 and k2 = n2-i2
		    in
		      if (k1 < k2)
			then (i1+k1, i2+k1)
			else (i1+k2, i1+k2)
		    end
		end
	  end

    fun suffix (s, i) = (substring (s, i, (size s)-i)
	    except _ => if (i < 0) then badArg("suffix", "subscript") else "")

    # stringTrans (s1, s2) returns a translation function that maps
    # each character in s1 to the corresponding character in s2.

    fun stringTrans (s1, s2) = let
	  ba = ByteArray::rw_vector (255, 0)
	  fun f i = (ByteArray::update (ba, i, i); f (i+1))
	  n = size s1
	  fun g i = if (i < n)
		then let
		  from = ordof (s1, i) and to = ordof (s2, i)
		  in
		    ByteArray::update (ba, from, to);
		    g (i+1)
		  end
		else ()
	  fun trans c = chr (ByteArray::sub (ba, ord c))
	  in
	    (f 0) except _ => ();
	    (g 0) except _ => badArg("stringTrans", "string map mismatch");
	    fn s => implode (map trans (explode s))
	  end

    #  stringMap f == (fn s => implode (map (f o ord) (explode s))) 

    fun stringMap transFn s = implode (map (transFn o ord) (explode s))

    #  Compress ML-style escape sequences to single characters. 

    fun compressString s = let
	  n = size s
	  fun substr (i, j, l) = if (i < j)
		then substring (s, i, j-i) . l
		else l
	  fun cvtEscape i = ((case ordof (s, i)
		 of /* "\"" */ 34 => ("\"", i+1)
		  | /* "\\" */ 92 => ("\\", i+1)
		  | /* "n" */ 110 => ("\n", i+1)
		  | /* "t" */ 116 => ("\t", i+1)
		  | c1 => let #  should be "\ddd" 
		      c2 = ordof (s, i+1)
		      c3 = ordof (s, i+2)
		      in
			if ((c_type::isDigitOrd c1)
			and (c_type::isDigitOrd c2)
			and (c_type::isDigitOrd c3))
			  then (chr((100*c1+10*c2+c3)-5328), i+3)
			    #  5328 = 111 * ord "0" 
			  else badArg("compressString", "bad escape sequence")
		      end
		)		# end case
		  except _ => badArg("compressString", "bad escape sequence"))
	  fun convert (i, j, l) = if (j < n)
		  then if (ordof (s, j) != /* "\\" */92)
		    then convert (i, j+1, l)
		    else let
		      my (c, k) = cvtEscape (j+1)
		      in
			convert (k, k, c . substr (i, j, l))
		      end
		else if (i == 0)
		  then s
		  else implode (reverse (substr (i, j, l)))
	  in
	    convert (0, 0, [])
	  end #  expandString 

    #  expand non-printing characters to their escape sequences. 

    local
    #  All printing characters except "\\" and "\"" 
      notEscaped = CharSet::in_set (CharSet::mkCharSet "\
	    \ !#$%&'()*+,-./0123456789:;<=>?\
            \@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_\
            \`abcdefghijklmnopqrstuvwxyz {|}~\
	    \")
    in
    fun expandString s = let
	  n = size s
	  fun substr (i, j, l) = if (i < j)
		then substring (s, i, j-i) . l
		else l
	  fun cvtChar 9 = "\\t"
	    | cvtChar 10 = "\\n"
	    | cvtChar 34 = "\\\""
	    | cvtChar 92 = "\\\\"
	    | cvtChar c = if (c < 10)
		  then "\\00" + (Integer::makestring c)
		else if (c < 100)
		  then "\\0" + (Integer::makestring c)
		  else "\\" + (Integer::makestring c)
	  fun convert (i, j, l) = if (j < n)
		  then if (notEscaped (s, j))
		    then convert (i, j+1, l)
		    else convert (j+1, j+1, (cvtChar (ordof (s, j))) . substr (i, j, l))
		else if (i == 0)
		  then s
		  else implode (reverse (substr (i, j, l)))
	  in
	    convert (0, 0, [])
	  end #  expandString 
    end

  end #  string_util 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


# COPYRIGHT (c) 1993 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
