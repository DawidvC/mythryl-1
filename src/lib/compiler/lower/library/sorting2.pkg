#
# Newer merge sort.  Stolen from a NJPLS meeting.
#
# -- Allen Leung



api SORTING =
api

   my sort:         (X * X -> Bool) ->  List( X ) -> List( X )
   my uniq:         (X * X -> Bool) ->  List( X ) -> List( X )
   my sort_uniq:    (X * X -> Bool) -> 
                     (X * X -> Bool) -> List( X ) ->  List( X )

end 

package Sorting:  SORTING =
pkg

   infix ====
 
   my THE max_int = int::max_int

   fun sort op< =
   let fun getRun [] = (0,[])
         | getRun (h . t) = 
           let fun loop (last, n,[])   = (n,[])
                 | loop (last, n, l as h . t) = 
                   if h < last then (n, l) else loop (h, n+1, t) 
           in  loop (h, 1, t) end
       fun head ([], _) = []
         | head(_, 0)  = []
         | head (h . t, n) = h . head (t, n - 1)
       fun merge (a, alen, b, blen) =
       let fun loop ([], _, b, blen) = head (b, blen)
             | loop(_, 0, b, blen)  = head (b, blen)
             | loop (a, alen,[], _) = head (a, alen)
             | loop (a, alen, _, 0) = head (a, alen)
             | loop (a as ah . at, alen, b as bh . bt, blen) =
               if ah < bh then ah . loop (at, alen - 1, b, blen)
               else bh . loop (a, alen, bt, blen - 1)
       in  loop (a, alen, b, blen) end
       fun iter (sorted, slen,[], want) = (sorted, slen,[])
         | iter (sorted, slen, unsorted, want) = 
           if slen >= want then (sorted, slen, unsorted) 
           else
           let my (runlen, runtail) = getRun unsorted
               my (sorted', slen', unsorted) =
                  if runlen >= slen then
                      (unsorted, runlen, runtail)
                  else 
                      iter (unsorted, runlen, runtail, runlen)
           in  iter (merge (sorted, slen, sorted', slen'),
                    slen+slen', unsorted, want)
           end
       fun main list = 
       let my (sorted, _, _) = iter([], 0, list, max_int) 
       in  sorted end
   in  main end

   fun uniq op==== =
   let fun f []                 = []
         | f (l as [x])         = l
         | f (x . (l as (y . z))) = if x ==== y then f l else x . f l
   in  f
   end

   fun sort_uniq op< op==== l
       =
       uniq op==== (sort op< l)

end
