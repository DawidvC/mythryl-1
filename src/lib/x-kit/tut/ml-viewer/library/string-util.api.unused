# string-util.api
#
# COPYRIGHT (c) 1990, 1991 by John H. Reppy.
#
# A bunch of string operations.  These roughly correspond to a merging of
# the BSD strings.h and System V string.h interfaces.  Many of these functions
# take either a "String" or "Int -> Bool" value as a specifier of a set of
# characters.
#
# AUTHOR:
#   John Reppy
#   Cornell University
#   Ithaca, NY 14853
#   jhr@cs.cornell.edu

# 2009-12-13 CrT note:
#     There appears to be nothing in stdlib directly
#     corresponding to this package.  Much of this
#     package's functionality appears to duplicate
#     existing stdlib functionality (e.g., strcmp is
#     just string::compare) but much of it appears to
#     be new (e.g., stringTrans, which appears to
#     be modelled on Perl's tr// operator).
#
#     I don't want to move this package into stdlib
#     with all the redundancies in place, nor do I
#     wish to discard the novel functionality, so
#     I'm leaving the package here until I get enough
#     time to sort through carefully function-by-function.

api STRING_UTIL =
  api

    exception NOT_FOUND

    # scan a string from left to right for the first occurance of a character
    # in the set to the right of the starting index.  If no such character is
    # found, raise the NOT_FOUND exception.

    my index:  String -> (String * Int) -> Int
    my indexp:  (Int -> Bool) -> (String * Int) -> Int		# Evidently the 'p' suffix is for 'predicate', ala lisp.

    # scan a string from right to left for the first occurance of a character
    # in the set to the left of the starting index.  If no such character is
    # found, raise the NOT_FOUND exception.

    my revindex:  String -> (String * Int) -> Int
    my revindexp:  (Int -> Bool) -> (String * Int) -> Int

    # "spanp prior s" returns the length of the initial segment of s satisfying the
    # predicate p.
    my spanp:  (Int -> Bool) -> (String * Int) -> Int
    my span:  String -> (String * Int) -> Int

    # "cspanp prior s" returns the length of the initial segment of s that doesn't
    # satisfy the predicate p.
    my cspanp:  (Int -> Bool) -> (String * Int) -> Int
    my cspan:  String -> (String * Int) -> Int

    #  tokenize a string 
    my tokenizep:  (Int -> Bool) -> (String * Int) -> List( String )
    my tokenize:  String -> (String * Int) -> List( String )

    # find the leftmost (rightmost) occurance of a substring in a string.
    # Raise the exception NOT_FOUND if it doesn't exist.
    my findstr:  (String * Int * String) -> Int
    my revfindstr:  (String * Int * String) -> Int

    my strcmp:  (String * String) -> LibBase::relation
	#  lexically compare two strings and return their relation 

    my is_prefix:  (String * String * Int) -> Bool
	#  is_prefix (s1, s2, i) returns TRUE, if s1 is a prefix of s2[i..]. 

    my prefixCmp:  (String * Int * String * Int) -> (Bool * Bool)
	# prefixCmp (s1, i1, s2, i2) tests whether s1[i1..] is a
	# prefix of s2[i2..], and vice versa.

    my unequalAt:  (String * Int * String * Int) -> (Int * Int)
	# compare two strings, returning the indecies of the
	# first characters at which they disagree.

    my suffix:  (String * Int) -> String
	# suffix (s, i) returns s[i..].  If i is greater or equal to
	# the length of s, then "" is returned.  If i is less than 0,
	# then LibBase::BadArg is raised.

    my stringTrans:  (String * String) -> String -> String
	# stringTrans (s1, s2) returns a translation function that maps
	# each character in s1 to the corresponding character in s2.

    my stringMap:  (Int -> String) -> String -> String
	#  stringMap f == (fn s => implode (map f (explode s))) 

    my compressString:  String -> String
	#  Compress ML-style escape sequences to single characters. 

    my expandString:  String -> String
	#  expand non-printing characters to their escape sequences. 

  end #  STRING_UTIL 


# COPYRIGHT (c) 1993 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
