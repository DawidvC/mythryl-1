
# Process rtl descriptions



###               "It is the business of the future to be dangerous;
###                and it is among the merits of science that
###                it equips the future for its duties."
###
###                                 -- Alfred North Whitehead 



generic package mdl_rtl_comp
   (package Typing:       Mdl_Typing
    package RTLTools:     Mdl_Rtl_Tools
    package lowcode_types:  Lowcode_Types
      sharing Typing::raw_syntax = RTLTools::raw_syntax = lowcode_types::raw_syntax 
      sharing lowcode_types::RTL = RTLTools::RTL
   )

: Mdl_Rtl_Comp

{
    package Comp        = Typing::Comp
    package raw_syntax         = Comp::raw_syntax
    package RawSyntaxTreePP       = Comp::RawSyntaxTreePP
    package Dictionary         = Comp::Dictionary
    package Consts      = Comp::Consts
    package tr          = Comp::Trans
    package r           = Comp::Rewriter
    package h           = hash_table
    package TypeUtil    = Typing::TypeUtil
    package lowcode_types = lowcode_types
    package rtl         = RTLTools::RTL
    package t           = RTL::T
    package c           = cells_basis

    use raw_syntax Comp::Util Comp::error

    t2s = pp::text o RawSyntaxTreePP::type 
    e2s = pp::text o RawSyntaxTreePP::expression 
    p2s = pp::text o RawSyntaxTreePP::pattern 
    d2s = pp::text o RawSyntaxTreePP::decl
    re2s = RTL::Util::rexpToString 

    rw  = r::rewrite
    NIL = r::noRewrite       
    i2s = int::to_string

    fun tuplepat [p] = p
      | tuplepat ps  = TUPLEpat ps
    fun tupleexp [e] = e
      | tupleexp es  = TUPLEexp es


    exception NoRTL

    enum rtl_def = 
       RTLDEF of { id:    raw_syntax::id, 
		  args:  List( raw_syntax::id ), 
		  rtl:   RTL::rtl
		 }


    enum compiled_rtls = COMPILED_RTLs of 
      { md:        Comp::md,
	dictionary:       Dictionary::dictionary,
	rtls:      List( rtl_def ),
	newOps:    List( t::Basis::misc_op ),
	rtlTable:  h::Hash_Table( String, rtl_def )
      }

    current_rtls = REF [] : REF(  List(  rtl_def ) )

    makeRTLDEF = IDexp (IDENT(["mdl_rtl_comp"], "RTLDEF"))
    fun md (COMPILED_RTLs { md, ... } ) = md
    fun rtls (COMPILED_RTLs { rtls, ... } ) = rtls

    fun noError()
	=
	!errorCount = 0

    # ------------------------------------------------------------------------  
    #
    # Perform type interference and arity raising
    #
    # ------------------------------------------------------------------------
    fun typeInference (md, rtlDecls)
	= 
	let #  Perform typechecking + arity raising 
	    my (semantics, dictionary) = 
		(print "Typechecking...\n";
		 Typing::typeCheck md rtlDecls)

	    # Make sure that there are 
	    # no unresolved type applications after
	    # arity raising.

	    fun checkSemantics semantics =
	    let fun checkUnresolvedTypeApplications (d, loc) = 
		let poly = REF FALSE
		    fun expression ===> (e as TYPEexp t) =
			(if Typing::isPolymorphic t then poly := TRUE  e)
		      | expression ===> e = e
		in  .decl (rw { expression=exp, type=NIL, decl=NIL, sexp=NIL, pattern=NIL } ) d;
		    if *poly then
		      errorPos (loc, "unresolved polytype application in:\n"$d2s d)
		    else ()
		end

		 fun decl ===> d =
		 (case d of 
		   MARKdecl (l, d as VALdecl _) => 
		      checkUnresolvedTypeApplications (d, l)
		 | RTLdecl(_, _, loc) => checkUnresolvedTypeApplications (d, loc)
		 | _ => ();
		 d 
		 )
	    in  .decl (rw { expression=NIL, type=NIL, decl=decl, sexp=NIL, pattern=NIL } ) semantics;
		()
	    end

	in  if noError() then checkSemantics semantics 
	    (semantics, dictionary) 
	end

    # ------------------------------------------------------------------------
    # Translate the rtl declarations into an executable form.
    # ------------------------------------------------------------------------
    fun codeGen (md, dictionary, rtlDecls)
	= 
	let fun cellOf k = 
		let my CELLdecl { id, bits, ... } = Comp::lookupCellKind md k
		in  TUPLEexp[IDexp (IDENT(["C"], id)), INT_CONSTANT_IN_EXPRESSION bits] 
		end

	    fun expression ===> (LOCexp (m, e, NULL)) = APPLY_EXPRESSION (APPLY("@@@", cellOf m), e)
	      | expression ===> (LOCexp (m, e, THE r)) = 
		   APPLY_EXPRESSION (APPLY("Mem", cellOf m), TUPLEexp[e, ID r])
	      | expression ===> (IF_EXPRESSION (a, b, c))   = APPLY("If", TUPLEexp[a, b, c])
	      | expression ===> (TUPLEexp [])    = ID "Nop"
	      | expression ===> (IDexp (IDENT([], "="))) = ID "=="
	      | expression ===> (TYPEDexp (e, _)) = e
	      | expression ===> (APPLY_EXPRESSION (BITSLICEexp (e, r), t)) = 
		   APPLY_EXPRESSION (APPexp (APPLY("BitSlice", t),
		      LISTexp (map (fn (a, b) => TUPLEexp[INT_CONSTANT_IN_EXPRESSION a, INT_CONSTANT_IN_EXPRESSION b]) r,
			      NULL)), e)
	      | expression ===> (LITexp (BOOLlit FALSE)) = ID "False"
	      | expression ===> (LITexp (BOOLlit TRUE)) = ID "True"
	      | expression ===> (IDexp (IDENT([], "not"))) = ID "Not"
	      | expression ===> (IDexp (IDENT([], "and"))) = ID "And"
	      | expression ===> (IDexp (IDENT([], "cond"))) = ID "Cond"
	      | expression ===> (IDexp (IDENT([], "or"))) = ID "Or"
	      | expression ===> (IDexp (IDENT([], "||"))) = ID "Par"
	      | expression ===> e = e

	    #  All rtl definitions 
	    allRtls = REF []

	    fun addRtls (p, loc) = 
	    let fun processNaming x =
		let my (_, t) = Dictionary::lookupVal dictionary (IDENT([], x))
		    t = .type (rw { expression=NIL, pattern=NIL, decl=NIL, sexp=NIL, type=NIL } ) t
		in  if Typing::isPolymorphic t then
			 errorPos (loc, "rtl "$x$" has polymorphic type "$
				  t2s t) 
		    else 
		    case t of 
		       FUNty (RECORDty lts, _) => (allRtls := (x, lts, loc) . *allRtls)
		     | t => errorPos (loc, 
			       "rtl "$x$" has a non-function type "$t2s t) 
		end
		fun pattern ===> (p as IDpat x) = (processNaming x; p)
		  | pattern ===> p = p
	    in .pattern (rw { expression=NIL, type=NIL, decl=NIL, sexp=NIL, pattern=pattern } ) p end

	    fun decl ===> (DATATYPEdecl _) = SEQdecl[]
	      | decl ===> (TYPESIGdecl _) = SEQdecl[]
	      | decl ===> (VALSIGdecl _) = SEQdecl[]
	      | decl ===> (VALdecl[NAMED_VARIABLE (LISTpat (pats, NULL),
			    APPLY_EXPRESSION(
			       APPLY_EXPRESSION (APPexp (IDexp (IDENT([], "map")), _), f),
				   LISTexp (es, NULL)))]) =
		   VALdecl (paired_lists::map (fn (p, e) => NAMED_VARIABLE (p, APPLY_EXPRESSION (f, e)))
			      (pats, es))
	      | decl ===> (VALdecl[NAMED_VARIABLE (LISTpat (pats, NULL), LISTexp (es, NULL))]) =
		   VALdecl (paired_lists::map NAMED_VARIABLE (pats, es))
	      | decl ===> (RTLdecl (pattern, expression, loc)) = 
		   (addRtls (pattern, loc); ===>(VALdecl[NAMED_VARIABLE (pattern, expression)]))
	      | decl ===> (MARKdecl(_, SEQdecl [])) = SEQdecl[]
	      | decl ===> d = d

	   #  Define the cellkinds in a substructure C 
	   cellKindDecls =
		VALdecl (map (fn CELLdecl { id, nickname, ... } =>
			  NAMED_VARIABLE (IDpat id, 
			     APPLY_EXPRESSION(
				IDexp (IDENT(["C"], "newCellKind")),
				RECORD_EXPRESSION[("name", STRING_CONSTANT_IN_EXPRESSION id),
					  ("nickname", STRING_CONSTANT_IN_EXPRESSION nickname)
					 ])))
			     (Comp::cells md))

	   userRtlDecls = 
		  .decl (rw { expression=exp, pattern=NIL, sexp=NIL, decl=decl, type=NIL } ) rtlDecls
	   allDecls = SEQdecl[PACKAGE_DECL("C",[], NULL,
				      DECLsexp[cellKindDecls]), 
				  userRtlDecls]
	in (allDecls, reverse (*allRtls)) 
	end

    # ------------------------------------------------------------------------
    # Rewrite the program to fill in all syntactic shorthands
    # ------------------------------------------------------------------------
    fun expandSyntacticSugar (md, rtlDecls)
	=
	let #  Function to define a new operator 
	    fun newRtlOp argType f =
		let fun newVars (i, n) =
		    if i < n then ("x"$i2s i) . newVars (i+1, n)
		    else []
		    fun arity (TUPLEty x) = length x
		      | arity _ = 1
		    names = newVars (0, arity argType)
		    formals = TUPLEpat (map IDpat names)
		    actuals = LISTexp (map ID names, NULL)
		in  LOCALdecl([MY("newOper", APPLY("newOp", STRING_CONSTANT_IN_EXPRESSION f))],
			      [FUN (f, formals, APPLY("newOper", actuals))])
		end

	    #  Rewrite the program first to fill in all syntactic shorthands 
	    fun expression ===> (e as LITexp (INTlit _))  = APPLY("intConst", e)
	      | expression ===> (e as LITexp (WORD32lit _)) = APPLY("wordConst", e)
	      | expression ===> (e as LITexp (WORDlit _)) = APPLY("wordConst", e)
	      | expression ===> e = e
	    fun decl ===> (RTLSIGdecl (fs, FUNty (argType, _))) =
		  SEQdecl (map (newRtlOp argType) fs)
	      | decl ===> (d as RTLSIGdecl (fs, type)) = (error("bad type in "$d2s d); d)
	      | decl ===> d = d

	    rtlDecls = 
		 .decl (rw { expression=exp, pattern=NIL, decl=decl, sexp=NIL, type=NIL } ) rtlDecls

	in  rtlDecls 
	end

    # ------------------------------------------------------------------------
    # Compile a file.
    # Turn off pattern matching warnings
    # ------------------------------------------------------------------------
    fun compileFile filename
	=
	let warn     = controls::mc::warn_on_nonexhaustive_bind 
	    previous = *warn
	    fun reset () = warn := previous 
	in
	    warn := FALSE;
	    (backend::interact::read_eval_print_from_file filename; reset()) 
	      except e => (reset(); raise exception e)
	end

    # ------------------------------------------------------------------------
    # Process the rtl description 
    # -----------------------------------------------------------------------
    fun compile md
	=
	let #  The semantics dictionary 
	    semantics = Comp::declOf md "RTL"

	    #  Expand Syntactic sugar 
	    semantics = expandSyntacticSugar (md, semantics)

	    #  Perform typechecking 
	    my (semantics, dictionary) = typeInference (md, semantics)

	    #  Generate the rtl functions defined by the user 
	    my (userRtlDecls, allRtls) = codeGen (md, dictionary, semantics)

	    #  Generate the rtl table 
	    rtlTable = 
	    if *errorCount == 0 then
	    let fun mkEntry (name, args, loc) =
		let fun mkArg (arg, type) =
		    let my (size, kind) =
			    lowcode_types::representationOf (name, arg, loc, type)
		    in  (arg, APPLY("Arg",
			       TUPLEexp[INT_CONSTANT_IN_EXPRESSION size, STRING_CONSTANT_IN_EXPRESSION kind, STRING_CONSTANT_IN_EXPRESSION arg])
			)
		    end

		in  APPLY_EXPRESSION (makeRTLDEF,
		       RECORD_EXPRESSION
		       [("id", STRING_CONSTANT_IN_EXPRESSION name),
			("args",
			  LISTexp (map (fn (x, _) => STRING_CONSTANT_IN_EXPRESSION x) args, NULL)),
			("rtl", APPLY (name, RECORD_EXPRESSION (map mkArg args)))
		       ]
		    )
		end
	    in  VALdecl[NAMED_VARIABLE (IDpat "rtls", LISTexp (map mkEntry allRtls, NULL))]
	    end else @@@[]

	    strname = Comp::strname md "RTL"

	    #  Now generate the code that MDGen uses 
	    code =
	      LOCALdecl(
		  [PACKAGE_DECL (strname,[@@@["Build:  Rtl_Build"]], NULL,
		      DECLsexp
			[LOCALdecl([OPENdecl [IDENT([], "Build")],
				    @@@["package c = cells_basis"]
				   ],
				   [userRtlDecls])]),
		   PACKAGE_DECL (strname,[], NULL,
				 APPsexp (IDsexp (IDENT([], strname)),
					 IDsexp (IDENT([], "mdl_rtl_builder")))),
		   LOCALdecl([OPENdecl [IDENT([], "mdl_rtl_builder"),
					IDENT([], strname)]],
			     [rtlTable])
		  ],
		  [ 
		    @@@["mdl_rtl_comp::current_rtls := rtls;"]
		  ]
	      )

	    #  Compile RTL into internal form 
	    fun typecheckRTL (code) = 
	    if *errorCount == 0 then 
	    let current_rtls := [] 
		name = "CompileRTL"
		print "Generating ML code for computing RTLs...\n";
		Comp::codegen md name [RawSyntaxTreePP::decl code]
		filename = Comp::pathName md name ".sml"
	    in  print "Calling the ML compiler to build the rtls ...\n";
		print "This may take a while...\n";
		compileFile filename
	    end
	    else ()


	    #  Execute the code 
	    typecheckRTL (code)
	    newOps = mdl_rtl_builder::getNewOps()
	    mdl_rtl_builder::clearNewOps()

	    #  Build a table of rtls 
	    rtlTable = h::make_table (hash_string::hash_string, op=) (32, NoRTL)
	    allRtls  = *current_rtls
	    
		apply (fn def as RTLDEF { id, ... } => h::set rtlTable (id, def)) allRtls

	in  COMPILED_RTLs { md       = md,
			  dictionary      = dictionary,
			  rtls     = allRtls,
			  newOps   = newOps,
			  rtlTable = rtlTable
			 }
	end

    # ------------------------------------------------------------------------
    # Pretty print RTL code 
    # ------------------------------------------------------------------------
    fun dumpLog (COMPILED_RTLs { md, rtls, newOps, ... } )
	= 
	let fun prNewOp { name, hash, attributes }
		= 
		"New abstract operator "$name$"\n" 

	    fun prRTL (def as RTLDEF { id=f, args, rtl, ... } ) =
	    let fun listify es = fold_right (fn (x, "") => x | (x, y) => x$", "$y) "" es
		fun prs es = listify (map RTL::expToString es)
		fun prs' es = 
		    listify (map (fn (e, r) => RTL::expToString e$"="$i2s r) es)
		pretty = string::translate (fn '\n' => "\n\t" 
						| ';'  => " ||"
						| c => char::to_string c)
		my (d, u) = RTL::defUse rtl
		my { fixedDefs, fixedUses, twoAddress } = RTL::namingConstraints (d, u)
		rtlText = pretty (RTL::rtlToString rtl)
		rtl = RTLTools::simplify rtl

		fun line (title, "") = ""
		  | line (title, text) = "\t"$title$":\t"$text$"\n"   
	    in  "rtl "$f$
		     "{ "$list::fold_right (fn (x, "") => x | (x, y) => x$", "$y) "" args$
		      " } =\n\t"$rtlText$"\n"$
		line("Define", prs d)$
		line("Use", prs u)$
		line("Pinned definitions", prs' fixedDefs)$
		line("Pinned uses", prs' fixedUses)$
		line("Two address operand", prs twoAddress)$
		line("Constructor",
		     pp::text (RawSyntaxTreePP::decl (RTLTools::rtlToFun (f, args, rtl))))$
		line("Destructor",
		     pp::text (RawSyntaxTreePP::pattern (RTLTools::rtlToPattern (rtl))))$
		"\n"
	    end

	    #  Sort them alphabetically 
	    rtls = 
		list_mergesort::sort 
		(fn (RTLDEF { id=f, ... }, RTLDEF { id=g, ... } ) => string.>(f, g)) rtls

	    nRTLs = length rtls
	    nNewOps = length newOps

	    text = 
		"There are a total of " . i2s nRTLs ::" rtl templates defined.\n" .
		"There are a total of " . i2s nNewOps ::" new abstract operators.\n" .
		"RTL information follows:\n\n" .
		map prNewOp newOps @ 
		["\n\n"] @
		map prRTL rtls

	in  Comp::error::printToLog (string::cat text)
	end

    # ------------------------------------------------------------------------
    # Gnerate code the ArchRTL generic 
    # ------------------------------------------------------------------------
    fun genArchGeneric (COMPILED_RTLs { md, rtls, newOps, ... } )
	= 
	let #  The ArchRTL generic 
	    strname = Comp::strname md "RTL"

	    #  The main body are just the RTL constructor functions 
	    decls = 
		 @@@["package t = RTL::T"
		  ] .
		  PACKAGE_DECL("P",[], NULL,
		    DECLsexp (map RTLTools::createNewOp newOps)) .
		  map (fn RTLDEF { id, args, rtl } => RTLTools::rtlToFun (id, args, rtl)) 
		      rtls

	    archRTL = 
		  PACKAGE_DECL(
		     strname,
		     [@@@["package rtl:  Codetree_Rtl",
			"package c:    "$Comp::signame md "_Cells"
		       ]
		     ],
		     NULL,
		     DECLsexp decls
		  )

	    #  Write the generic to a file 
	    Comp::codegen md "codetree/RTL" [RawSyntaxTreePP::decl archRTL]
	in  ()
	end


    # ------------------------------------------------------------------------
    #
    # Generic routine for generating query functions from rtl definitions.
    #
    # ------------------------------------------------------------------------
     fun makeQuery warning (COMPILED_RTLs { rtls, md, rtlTable, ... } )
	 =
	 let #  The instructions 
	     instructions = Comp::instructions md

	     enum rtlpat = LIT of String 
			     | TYP of String * datatypebind

	     #  Look up rtl 
	     fun lookupRTL name =
		  h::lookup rtlTable name except e =>
		    (warning("Can't find definition for rtl "$name); raise exception e)

	      #  error handler 
	     errorHandler = APPLY("undefined", TUPLEexp []) 
	     errorHandlingClause = CLAUSE([WILDCARD_PATTERN], NULL, errorHandler)

	     fun mkQueryFun { namedArguments, name, args, body, caseArgs, decls } =
	     let 
		 extraCaseArgs = map ID caseArgs

		 #  Generate constants 
		 constTable = Consts::newConstTable()
		 mkConst  = Consts::const constTable  

		 /* Enumerate all rtl patterns and generate a case expression
		  * that branch to different cases.
		  */
		 fun foreachRtlPattern genCode rtlpats =
		     let fun an_enum ([], pats, name) = [(pats, name)]
			   | an_enum (LIT s . rest, pats, name) = an_enum (rest, pats, s$name)
			   | an_enum (TYP(_, DATATYPEbind { cbs, ... } ) . rest, pats, name) =
			     let names =
				 map (fn cb as CONSbind { id, ... } => 
				      let pattern = 
					  tr::mapConsToPattern
					     { prefix=["I"],
					      id=fn { newName, ... } =>IDpat newName
					     } cb
				      in  an_enum (rest, pattern . pats, id$name)
				      end) cbs
			     in  list::cat names end
			 fun caseExps [] = []
			   | caseExps (LIT _ . rest) = caseExps rest
			   | caseExps (TYP (x, _) . rest) = ID x . caseExps rest
			 exps  = caseExps rtlpats
			 cases = an_enum (reverse rtlpats, [], "")
			 clauses = map genCode cases
		     in  CASE_EXPRESSION (tupleexp (exps @ extraCaseArgs), clauses)
		     end

		 #  Enumerate each instruction 
		 and doInstr (CONSbind { rtl=NULL, ... } ) = raise exception NoRTL
		   | doInstr (instruction as CONSbind { rtl=THE rtlDef, id, loc, ... } )=
		     let setLoc loc
			 E = tr::consNamings instruction #  Namings for the instruction 

			 #  Translate rtl definition 
			 fun trans (TEXTasm s) = LIT s
			   | trans (EXPasm (IDexp (IDENT([], x)))) = 
			     let my (_, type) = E x except _ =>
				       fail("unknown identifier "$x$
					    " in rtl expression: "$e2s rtlDef)
				 db = 
				     case type of   
				       IDty (IDENT([], t)) => Comp::lookupDatatype md t
				     | t => fail("illegal type "$t2s t)
			     in  TYP (x, db) end
			   | trans (EXPasm e) = fail("illegal rtl expression "$e2s e)

			 fun expression _ (e as RTLexp [COMPOSITErtl _]) = e
			   | expression _ (ASMexp (ASMasm rtl)) = 
			       foreachRtlPattern (genCode (instruction, E)) (map trans rtl)
			 rw = rw { expression=exp, decl=NIL, pattern=NIL, type=NIL, sexp=NIL }
		     in  rw.expression rtlDef 
		     end  

		     #  Call the user defined callback and generate code 
		 and genCode (instruction, E) (pats, rtlName) =
		     let my rtl as RTLDEF { args, ... } = lookupRTL rtlName
			 my { casePats, expression } = 
			      body { const=mkConst, rtl=rtl, instruction=instr }
			 fun simpList (ps) = 
			 let fun loop [] = []
			       | loop (WILDCARD_PATTERN . ps) =
				   (case loop ps of
				     [] => []
				   | ps => WILDCARD_PATTERN . ps
				   )
			       | loop (p . ps) = p . loop ps
			 in  case loop ps of
			       [] => WILDCARD_PATTERN
			     | ps => LISTpat (ps, THE WILDCARD_PATTERN)
			 end
			 fun simplify_pattern (LISTpat (ps, NULL)) = simpList ps
			   | simplify_pattern (LISTpat (ps, THE WILDCARD_PATTERN)) = simpList ps
			   | simplify_pattern (TUPLEpat[p]) = simplify_pattern p
			   | simplify_pattern pattern = pattern
			 casePats = map simplify_pattern casePats
		     in  CLAUSE([tuplepat (pats@casePats)], NULL, expression)
		     end except _ => errorHandlingClause


		 enum err = OK | BAD

		 #  process all instructions 
		 fun foreachInstr([], OK) = []
		   | foreachInstr([], BAD) = [errorHandlingClause]
		   | foreachInstr (instruction . instrs, err) =
		     tr::mapConsToClause { prefix=["I"],
					pattern=fn pattern => pattern,
					expression=doInstr instruction
				       } instruction .
			      foreachInstr (instrs, err)      
		     except _ => foreachInstr (instrs, BAD) 

		 clauses = foreachInstr (instructions, OK) 

		 queryFun = FUNdecl[FUNbind("query", clauses)] 

		# How to make an argument:
		# If the argument has more than one
		# name we'll first pack them into a record pattern. 
		
		fun mkArg [x] = IDpat x
		  | mkArg xs  = 
		     if namedArguments then
			RECORD_PATTERN (map (fn x => (x, IDpat x)) xs, FALSE)
		     else
			TUPLEpat (map IDpat xs)

		 wrapper = 
		     [FUNdecl[FUNbind (name, 
			  [CLAUSE (map mkArg args,  
				  NULL,
				  LET_EXPRESSION (decls @ [queryFun], 
					 [APPLY("query", ID "instruction")]))
			  ])
		       ]
		     ]

		 constants = Consts::genConsts constTable 
	     in  tr::simplify_declaration
		 (case constants of
		    [] => SEQdecl wrapper
		 |  _  => LOCALdecl (constants, wrapper)
		 )
	     end

	in   mkQueryFun
	end

    mkQuery = makeQuery (fn _ => ())

    # ------------------------------------------------------------------------
    #
    # Generic routine that enumerates all arguments in an 
    # instruction constructor.
    #
    # ------------------------------------------------------------------------
    fun forallArgs { instruction, rtl=RTLDEF { rtl, ... }, rtlArg, nonRtlArg } Void
	=
	let lookupArg = RTL::argOf rtl
	    fun every ( { origName, newName, type }, x) =  
		let my (expression, pos) = lookupArg newName 
		in  rtlArg (newName, type, expression, pos, x)
		end except RTL::NotAnArgument => nonRtlArg (newName, type, x)
	in  tr::foldCons every unit instruction
	end

    # ------------------------------------------------------------------------
    #
    # Generic routine for generating a query function on the operand type 
    #
    # ------------------------------------------------------------------------
    fun mkOperandQuery compiled_rtls
	= 
	let md = md compiled_rtls
	in  ()
	end


    # ------------------------------------------------------------------------
    #
    # Generic routine that maps an instruction
    #
    # ------------------------------------------------------------------------
    fun mapInstr { instruction, rtl=RTLDEF { rtl, ... }, rtlArg, nonRtlArg }
	=
	let lookupArg = RTL::argOf rtl
	    changed = REF FALSE
	    fun mapArg { origName, newName, type } =  
		let my (expression, pos) = lookupArg newName 
		in  case rtlArg (newName, type, expression, pos) of
		      THE e => (changed := TRUE; e)
		    | NULL   => ID newName
		end except RTL::NotAnArgument => 
		    (case nonRtlArg (newName, type) of
		      THE e => (changed := TRUE; e)
		    | NULL   => ID newName
		    )
	    expression = tr::mapConsToExpression { prefix=["I"], id=mapArg } instruction
	in  if *changed then expression else ID "instruction"
	end

    # ------------------------------------------------------------------------
    #
    # Generate RTL code for def/use like queries
    #
    # ------------------------------------------------------------------------
    fun mkDefUseQuery compiled_rtls 
	 { name, decls, def, use, namedArguments, args }
	= 
	let md = md compiled_rtls
	    trivial = REF TRUE
	    Nil = LISTexp([], NULL)

	    fun defUseBody { instruction, rtl=RTLDEF { rtl, ... }, const } = 
	    let namings =
		    tr::foldCons (fn( { newName, type, ... }, L) => (newName, type) . L) [] instruction
		fun lookup id = list::find (fn (x, _) => x=id) namings
		fun add (f, x, e, y) =     
		     case f (x, e, y) of
		       THE e => e
		     | NULL => y

		fun fold f (e as t::ARG(_, _, x), expression) = add (f, ID x, e, expression)
		  | fold f (e as T.@@@(_, _, t::ARG(_, _, x)), expression) = add (f, ID x, e, expression)
		  | fold f (e as T.@@@(_, k, t::LITERAL i), expression) =
		    let my CELLdecl { id, ... } = 
			      Comp::lookupCellKind md (c::cellkindToString k)
			cell = 
			       APPLY_EXPRESSION (APPexp (IDexp (IDENT(["C"], "Reg")),
					     IDexp (IDENT(["C"], id))),
					   INT_CONSTANT_IN_EXPRESSION (integer::toInt i))
		    in  add (f, const cell, e, expression)
		    end
		  | fold f (_, expression) = expression

		my (d, u) = RTL::defUse rtl
		d = list::fold_right (fold def) Nil d
		u = list::fold_right (fold use) Nil u
	    in  case (d, u) of
		  (LISTexp([], NULL), LISTexp([], NULL)) => ()
		| _ => trivial := FALSE;
		{ expression=TUPLEexp[d, u],
		 casePats=[]
		}
	    end
	    decl = 
	      mkQuery compiled_rtls
	       { name=name, namedArguments=namedArguments, args=args, decls=decls,
		caseArgs=[], body=defUseBody
	       } 
	in  if *trivial then FUN (name, WILDCARD_PATTERN, TUPLEexp[Nil, Nil])
	    else decl
	end

    # ------------------------------------------------------------------------
    #
    # Make a simple error handler
    #
    # ------------------------------------------------------------------------
    fun simpleErrorHandler name
	=
	@@@["fun undefined () = error \""$name$"\""]

    # ------------------------------------------------------------------------
    #
    # Make a complex error handler
    #
    # ------------------------------------------------------------------------
    fun complexErrorHandler name
	=
	@@@["fun undefined () = bug(\""$name$"\", instruction)"]

    # ------------------------------------------------------------------------
    #
    # Make a complex error handler
    #
    # ------------------------------------------------------------------------
    fun complexErrorHandlerDef()
	=
	@@@["fun bug (msg, instruction) =",
	  "stipulate my Asm::S.STREAM { emit, ... } = Asm::make_stream []",
	  "herein  emit instruction; error msg end"
	 ]

    # ------------------------------------------------------------------------
    #
    # Do consistency checking on the RTL and instruction representation.
    # Call mkQuery to test the entire process.  
    #
    # ------------------------------------------------------------------------
    fun consistencyCheck compiled_rtls
	=
	let md = md compiled_rtls

	    #  Check one instruction 
	    fun check { instruction as CONSbind { id=instrName, ... },
		      rtl=RTLDEF { id=f, args, rtl, ... }, const } = 
	    let #  Find all arguments in the instruction constructor 
		namings =
		    tr::foldCons 
		       (fn( { newName, type, ... }, L) => 
			  (newName, REF FALSE, type) . L) [] instruction

		fun lookup id = list::find (fn (x, _, _) => x=id) namings
		lookupRTLArg = RTL::argOf rtl

		fun checkIt (x, expression, pos, type) =
		let fun err (why) =
		     (error("in instruction "$instrName$" (rtl "$f$"):");     
		      if why == "" then () else log (why);
		      log("rtl argument "$re2s expression$
			  " cannot be represented as "$t2s type)
		     )
		in  lowcode_types::setRepCoercion (expression, type);
		    case (expression, type) of
		      (T.@@@(_, k, t::ARG _), CELLty cellkind) => 
		      let my CELLdecl { id, ... } = 
			   Comp::lookupCellKind md cellkind 
		      in  if c::cellkindToString k == id then ()
			  else err("cellkind mismatched")
		      end
		    | (expression, CELLty _) => err("rtl is not a register reference")
		    | (T.@@@(_, _, t::ARG _), type) => err ""
		    | (t::ARG (type, REF (t::REP k), _), IDty (IDENT(_, typeName))) => 
			if k == typeName then ()
			else err("representation mismatch") 
		    | (_, _) => err("")
		end except _ => ()

	       #  Check one argument in rtl 
		fun checkRTLArg x =
		let my (expression, pos) = lookupRTLArg x
		in  case lookup x of
		      THE(_, found, type) => (found := TRUE; checkIt (x, expression, pos, type))
		    | NULL => error("'"$x$"' of rtl "$f$
				    " is missing from instruction "$instrName)
		end

	       #  Check one argument in instruction 
		fun checkInstrArg (name, REF TRUE, type) = ()
		  | checkInstrArg (name, REF FALSE, type) =
		    if lowcode_types::isSpecialRepType type then
		       warning("In instruction "$instrName$" (rtl "$f$"): '"$
			       name$"' has type "$
			       t2s type$" but its meaning is unspecified in the rtl"
			      )
		    else ()

	    in  apply checkRTLArg args;
		apply checkInstrArg namings;
		{ casePats=[], expression=TUPLEexp [] } 
	    end
	    print "Consistency checking...\n"
	    makeQuery warning compiled_rtls 
		       { name="check", namedArguments=FALSE,
			args=[], decls=[], caseArgs=[], body=check }
	in  ()
	end

    # ------------------------------------------------------------------------
    #
    # Generate RTL code and write the log
    #
    # ------------------------------------------------------------------------
    fun gen compiled_rtls
	=
       (genArchGeneric compiled_rtls;
	consistencyCheck compiled_rtls
       )
};
