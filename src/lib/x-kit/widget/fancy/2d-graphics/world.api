## world.api



# This is the internal representation of
# the structured graphics canvas.


api WORLD
=
api
    type world( X )

    # specification of a width; either in absolute pixels or in universal
    # coordinates.

    enum width_spec
      = WID_Pixel of Int

    # Specification of an arrow head 
    enum arrow_spec
      = NoArrow
      | Arrow of { len:  real, wid:  real }

    # the different ways to specify a border; either an absolute number of
    # pixels, or proportional border specified in universal coordinate units.

    enum border_spec
      = BORDER_None
      | BORDER_Pixel2D of (xcore:Ccolor, Int)

    enum chunk_desc
      = CHUNK_LINE of {
	    pts:   List { x:  real, y:  real },
	    head:  arrow_desc { x:  real, y:  real },
	    tail:  arrow_desc { x:  real, y:  real },
	    color:  xkit_ase::Color,
	    width:  width_spec
	  }
      | CHUNK_BOX of {
	    x:  real, y:  real,
	    wid:  real, ht:  real,
	    fill:  Null_Or( xcore::Color ),
	    border:  border_spec
	  }
      | CHUNK_ELLIPSE of {
	    x:  real, y:  real,
	    wid:  real, ht:  real,
	    fill:  Null_Or( xcore::Color ),
	    border:  border_spec
	  }
      | CHUNK_DIAMOND of {
	    x:  real, y:  real,
	    wid:  real, ht:  real,
	    fill:  Null_Or( xcore::Color ),
	    border:  border_spec
	  }
      | CHUNK_TEXT of {
	    x:  real, y:  real,
	    wid:  real, ht:  real,	#  the size of the text when drawn in it 
					#  natural size and transformed to 
					#  unscaled world coordinates (i.e., 
					#  inches). 
	    text:  String,
	    color:  xcore::Color,
	    ptSz:  Int,
	    fontStyle:  ScalableFont::font_style
	  }

    and X arrow_desc
      = NO_ARROW
      | ARROW of {
	    p0:  X,
	    p1:  X,	#  this is the tip of the arrow 
	    p2:  X
	  }

    type chunk_id

    type box = { maxX: real, maxY: real, minX: real, minY: real }

    my makeWorld:  (
	    widget::root * canvass::canvas * ScalableFont::Font_Imp,
	     xcore::Color, Geometry::size, Null_Or( Box )
	  ) -> world( X )

    my canvasOfWorld:  world( X ) -> canvass::canvas

    my viewOfWorld:  world( X ) -> WorldView::view

    my pickChunk:  (world( X ) * Geometry::point) ->  List( chunk_id * X )

    my addChunk:  (world( X ) * chunk_desc * Null_Or( X ) * Int) -> chunk_id

    my delChunk:  (world( X ) * chunk_id) -> Void

    my updateCanvas:  world( X ) -> Void
	# ensure that the view of the canvas reflects any chunk additions
	# and deletions.


    my vScroll:  (world( X ) * scrollbar::scroll_event) -> Void
    my hScroll:  (world( X ) * scrollbar::scroll_event) -> Void

    my zoom:  (world( X ) * real) -> Void

    my redrawCanvas:  (world( X ) *  List( Geometry::box ) ) -> Void

    my resizeCanvas:  (world( X ) * Geometry::size) -> Void

    my infoOfChunk:  (world( X ) * chunk_id) -> Null_Or( X )
	# get the associated info (if any) of an chunk; this raises the NOT_FOUND
	# exception, if the ID is bogus.

  end;



## COPYRIGHT (c) 1994 AT&T Bell Laboratories.
## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
