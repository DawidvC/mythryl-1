/*
 * Yet another lexer generator.  It supports the following features:
 *
 * 1. The meta characters ^ and $
 * 2. contexts
 * 3. wider characters than 8 bit (for future unicode support)
 * 4. perl style grouping constructs 
 *
 * IMPLEMENTATION NOTE: 
 *  1. Contexts and ^ patterns are handled by creating multiple start states.
 *  2. $ is handled by explicitly matching against an eof character in the
 *     lexer driver.
 *  3. Groupings are handled by creating begin group and end group states
 *     in the nfa.  These are compiled into a grouping table, which is
 *     a mapping from a dfa state to its sets of begin group and end group 
 *     actions.  The driver then takes care of keeping track of the groups.
 *
 * -- Allen Leung Leung
 */

local

   DEBUG = FALSE         #  for debugging messages only 
   VERBOSE = FALSE       #  verbose debugging messages 

   MATCHTREES = TRUE     /* should we enable the matchtrees recording
                              * feature in the generated lexer
                              */

in

generic package lexer_generator_g (R:  Abstract_Regular_Expression) : LEXER_GENERATOR {

   package r        = R                     #  The regexp syntax 
   package char     = r::char                #  Character representation 
   package eqv      = EquivCharClassFn (R)   #  Equivalence class of chars 
   package automata = DenseAutomataTable    #  How to encode automata 
   package lexer    = LexerTables
   package da       = Automata::DynArray
   package a        = rw_vector               
   package is       = FSA::int_set
   package m        = red_black_map_g (type Key = FSA::int_set::set
                                      compare = FSA::int_set::compare)

   type context = Int
   enum rule = 
      RULE of
        { contexts:   List( context ),
          regexp:     r::syntax,
          lookahead:  Null_Or( r::syntax )
        }

   type state = Int
   type Symbol = Int

   i2s = int::to_string
   fun s2s s = "{ "$is::fold_right (fn (i, "") => i2s i | (i, s) => i2s i$", "$s) "" s$"}"

   new = FSA::newNode 

   #  Strip away the groups 
   fun strip (r::Group e) = strip e
     | strip (e as r::Char _) = e
     | strip (e as r::MatchSet _) = e
     | strip (e as r::NonmatchSet _) = e
     | strip (e as r::Begin) = e
     | strip (e as r::End) = e
     | strip (r::Interval (e, min, max)) = r::Interval (strip e, min, max)
     | strip (r::Star e) = r::Star (strip e)
     | strip (r::Plus e) = r::Plus (strip e)
     | strip (r::Option e) = r::Option (strip e)
     | strip (r::Alt es) = r::Alt (map strip es)
     | strip (r::Concat es) = r::Concat (map strip es)
     | strip (r::Guard (g, e)) = r::Guard (g, strip e)
     | strip (e as r::Ref _) = e
     | strip (r::Assign (x, f, e)) = r::Assign (x, f, strip e)
     | strip (e as r::Boundary _) = e

   #  Translate regexp into nfa 
   fun buildRule { nfa, equiv, allClasses, matchtrees,
                  ruleno, rule=RULE { regexp, lookahead, contexts, ... },
                  startStates, startStates', groupIndex, eofOrd
                 } =
   let 
       #  The equivalence class of a character 
       fun classOf c = a::sub (equiv, char::to_int c)

       #  The equivalence classes of a matchset 
       classOfSet = 
           r::CharSet::fold_right (fn (c, S) => is::add (S, classOf c)) is::empty

       #  The equivalence classes of a non matchset 
       fun classOfNonSet S = is::difference (allClasses, classOfSet S)

       # Build a nfa given 
       #    1. the preorder group index 
       #    2. the regexp
       #    3. the nfa node that terminates the current nfa
       # Returns:
       #    1. the final preorder group index
       #    2. the start node of the nfa
       #    3. a match tree skeleton
       #
       # Note that the preorder group index is ordered from right to left.
       # However, since it is only for internal use it is unimportant.
       # The only important thing is that the generated skeleton matches  
       # the package of the package properly and refers to the appropriate
       # group index.


       fun build (i, r::Group e, n) = 
           if MATCHTREES and matchtrees then
              let my (j, n, sk) = build (i+1, e, FSA::setEndGroup (new nfa, i, n))
              in  (j, FSA::setBeginGroup (new nfa, i, n), [Lexer::SKEL (i, sk)])
              end
           else build (i, e, n)
         | build (i, r::Char c, n) = (i, FSA::setDelta (new nfa, classOf c, n), [])
         | build (i, r::MatchSet s, n) = buildSet (i, classOfSet s, n)
         | build (i, r::NonmatchSet s, n) = buildSet (i, classOfNonSet s, n)
         | build (i, r::Concat es, n) = buildList (i, es, n)
         | build (i, r::Plus e, n) = 
           let n1 = new nfa
               my (i, n2, sk) = build (i, e, n1)
           in  FSA::setOr (n1, [n, n2]);
               (i, n2, sk)
           end
         | build (i, r::Star e, n) = 
           let n1 = new nfa
               my (i, n2, sk) = build (i, e, n1)
           in  (i, FSA::setOr (n1, [n, n2]), sk)
           end
         | build (i, r::Option e, n) = 
           let my (i, n', sk) = build (i, e, n)
           in  (i, FSA::setOr (new nfa,[n, n']), sk)
           end
         | build (i, r::Alt [e], n) = build (i, e, n)
         | build (i, r::Alt es, n) = 
           let fun iter (i, [], ns, sks) = (i, ns, list::cat (reverse sks))
                 | iter (i, e . es, ns, sks) = 
                   let my (i, n', sk) = build (i, e, n)
                   in  iter (i, es, n' . ns, sk . sks)
                   end
               my (i, ns, sk) = iter (i, es, [], [])
           in  (i, FSA::setOr (new nfa, ns), sk)
           end

           #  Translate intervals to the appropriate things 
         | build (i, r::Interval (e, 0, NULL), n) = build (i, r::Star e, n)
         | build (i, r::Interval (e, 1, NULL), n) = build (i, r::Plus e, n)
         | build (i, r::Interval (e, 0, THE 1), n) = build (i, r::Option e, n)
         | build (i, r::Interval (e, 1, THE 1), n) = build (i, e, n)
         | build (i, r::Interval (e, min, NULL), n) = 
              build (i, r::Concat[strip e, r::Interval (e, min - 1, NULL)], n)
         | build (i, r::Interval (e, 0, THE max), n) = #  XXX 
              build (i, r::Option (r::Concat[strip e, 
                                         r::Interval (e, 0, THE (max - 1))]), n)
         | build (i, r::Interval (e, min, THE max), n) = 
              if min > max then 
                  /* can never match; but we'll still have to generate
                   * the match skeletons
                   */
                 let my (i, _, sk) = build (i, e, n)
                 in  (i, n, sk)
                 end
              else build (i, r::Concat[strip e, 
                                     r::Interval (e, min - 1, THE (max - 1))], n)

         | build (i, r::End, n) = 
              if FALSE then (i, n, [])
              else (i, FSA::setDelta (new nfa, eofOrd, n), []) 
         | build _ = raise exception r::CANNOT_COMPILE

           /*
            * Concatenate the nfas
            */
       and buildList (i, [], n) = (i, n, [])
         | buildList (i, [e], n) = build (i, e, n)
         | buildList (i, es, n) = 
           let fun iter (i, [], n) = (i, n, [])
                 | iter (i, e . es, n) = 
                   let my (i, n, sks) = iter (i, es, n)
                       my (i, n, sk)  = build (i, e, n)
                   in  (i, n, sk@sks)
                   end
           in  iter (i, es, n)
           end

       and buildSet (i, set, n) =
           let ns = is::fold_right (fn (c, ns) =>
                           FSA::setDelta (new nfa, c, n) . ns) [] set 
           in  (i, FSA::setOr (new nfa, ns), [])
           end


       fun preprocess (r::Concat[x]) = preprocess x
         | preprocess (r::Alt[x]) = preprocess x
         | preprocess (r::Begin) = (TRUE, r::Concat[])
         | preprocess (r::Concat (r::Begin . es)) = (TRUE, r::Concat es)
         | preprocess e = (FALSE, e)
 
       my (isBeginLine, regexp) = preprocess regexp
       final = FSA::setAccept (new nfa, ruleno)
       my (i, node, skel) = build (groupIndex, regexp, final)

       #  Determine which start states can branch to this nfa 
       fun addToContexts tbl c = 
           a::update (tbl, c, FSA::setOr (new nfa,[node, a::sub (tbl, c)]))
       contexts = case contexts of [] => [0] | _ => contexts
   in  if isBeginLine then () else apply (addToContexts startStates) contexts;
       apply (addToContexts startStates') contexts;
       (i, skel)
   end

   /*
    * Main entry point of the lexer generator
    */
   fun compile' { matchtrees, numContexts } rules = 
   let 

       /* Compute the equivalence classes from all the regexps
        * This is NOT the most general partitioning, but rather
        * a quick and easy approximation.  For most purposes this
        * works very well.
        */ 
       eofChar    = char::max_ord + 1 
       equivclass = Eqv::Eqv::new { min=0, max=eofChar }
       my () = apply (fn RULE { regexp, lookahead, ... } =>
                          (Eqv::partition equivclass regexp;
                           case lookahead of
                             THE re => Eqv::partition equivclass re
                           | NULL => ())) rules
       my ()                    = Eqv::Eqv::single equivclass eofChar
       my { mapping, numclasses } = Eqv::Eqv::mapping equivclass
       eofOrd                = a::sub (mapping, eofChar)
       allClasses = 
           let fun iter (-1, S) = S
                 | iter (i, S) = iter (i - 1, if i == eofOrd then S else is::add (S, i))
           in  iter (numclasses, is::empty) end

       #  Allocate the nfa 
       nfa = FSA::nfa { min=0, max=eofChar }

       #  Allocate the start state tables 
       numStartStates = numContexts +1
       start        = a::rw_vector (numStartStates, Automata::error)
       start'       = a::rw_vector (numStartStates, Automata::error)
       fail         = FSA::setError (new nfa)
       startStates  = a::rw_vector (numStartStates, fail)
       startStates' = a::rw_vector (numStartStates, fail)

       #  Translate the rules into an nfa 
       fun buildRules (i, ruleno, [], skels) = (i, reverse skels)
         | buildRules (i, ruleno, rule . rules, skels) = 
           let my (i, skel) = 
                   buildRule { nfa=nfa, equiv=mapping, 
                             allClasses=allClasses, ruleno=ruleno,
                             rule=rule, matchtrees=matchtrees,
                             startStates=startStates, 
                             startStates'=startStates', groupIndex=i,
                             eofOrd=eofOrd
                            }
           in  buildRules (i, ruleno+1, rules, skel . skels)
           end

       my (numberOfGroups, skels) = buildRules (0, 0, rules, [])

       #  Compute the closure 
       my ()   = FSA::computeClosure nfa
       
       #  Create the dfa 
       automata      = Automata::new { min=0, max=numclasses - 1 }
       addState      = Automata::addState automata
       move          = FSA::move nfa
       accepting     = FSA::accepting nfa 
       groupings     = FSA::groupings nfa 
       groups        = da::rw_vector (0,[])
       accept        = da::rw_vector (10,-1)
       numberOfRules = length rules
       skels = if MATCHTREES and matchtrees then a::from_list skels 
                   else a::rw_vector (0,[])

       fun compileGroups (openings, closings) =
       let fun rearrange ([], []) = []
             | rearrange (a, []) = map Lexer::OPEN a
             | rearrange([], b) = map Lexer::CLOSE b
             | rearrange (a as x . xs, b as y . ys) = 
               if x == y then Lexer::OPENCLOSE x . rearrange (xs, ys)
               else if x < y then Lexer::OPEN x . rearrange (xs, b)
               else Lexer::CLOSE y . rearrange (a, ys)
       in  rearrange (openings, closings)
       end 

       #  Create a new state numbered n 
       fun newState (n, S, stateMap) = 
       let stateMap = m::set (stateMap, S, n)
       in  case accepting S of
             NULL => ()
           | THE r => da::update (accept, n, r);
           if MATCHTREES and matchtrees 
           then da::update (groups, n, compileGroups (groupings S)) 
           if DEBUG and VERBOSE then
              print("New dfa state "$i2s n$"="$s2s S$"\n")
           
           stateMap
       end

       #  nfa -> dfa conversion 
       fun nfa2dfa (n, [], stateMap) = ()
         | nfa2dfa (n, (s, S) . pending, stateMap) = 
           let fun trans ([], n, stateMap, pending, tr) =
                     (n, stateMap, pending, tr)
                 | trans((c, S') . deltas, n, stateMap, pending, tr) = 
                   let my (n, s', stateMap, pending) = 
                           case m::find (stateMap, S') of
                             THE s' => (n, s', stateMap, pending)
                           | NULL => (n+1, n, newState (n, S', stateMap),
                                      (n, S') . pending)
                   in  trans (deltas, n, stateMap, pending, (c, s') . tr)
                   end
               my (n, stateMap, pending, transitions) = 
                    trans (move S, n, stateMap, pending, [])
           in  addState (s, transitions);
               nfa2dfa (n, pending, stateMap)
           end
  
        my () = if DEBUG and VERBOSE then 
                    print "Creating start states\n" else ()

        fun makeStartStates (tbl, tbl', n, -1, stateMap, WL) = (n, stateMap, WL)
          | makeStartStates (tbl, tbl', n, c, stateMap, WL) = 
            let startNode = a::sub (tbl, c)
                S         = FSA::closure nfa startNode
                my (s, n, stateMap, WL) = 
                       case m::find (stateMap, S) of
                         THE s => (s, n, stateMap, WL)
                       | NULL   => (n, n+1, newState (n, S, stateMap), (n, S) . WL)
            in  a::update (tbl', c, s);
                makeStartStates (tbl, tbl', n, c - 1, stateMap, WL)
            end
         
        # Create error state
        stateMap = newState (0, is::empty, m::empty)
        my (n, stateMap, WL) =
               makeStartStates (startStates, start, 1, numContexts, stateMap,[])
        my (n, stateMap, WL) =
               makeStartStates (startStates', start', n, numContexts, stateMap, WL)
        my () = if DEBUG and VERBOSE then print "NFA->DFA start\n" else ()
        my () = nfa2dfa (n, WL, stateMap)
        my () = if DEBUG and VERBOSE then print "NFA->DFA end\n" else ()
       
       /* Finish compression */    
       my () = Automata::compress automata

       /* The tables */    
       base    = Automata::getarr automata "base"
       check   = Automata::getarr automata "check"
       next    = Automata::getarr automata "next"
       default = Automata::getarr automata "default"
       state_count = Automata::stateCount automata
       my ()      = da::setBound (accept, state_count)
       my ()      = da::setBound (groups, state_count)
       accept  = da::toArray accept
       groups  = da::toArray groups

       my () =
           if DEBUG then
              (
               print ("equivclasses = "$i2s numclasses$"\n");
               print ("states = "$i2s state_count$"\n");
               print ("numberOfGroups = "$i2s numberOfGroups$"\n");
               print ("|base|    = "$i2s (a::length base)$"\n");
               print ("|check|   = "$i2s (a::length check)$"\n");
               print ("|next|    = "$i2s (a::length next)$"\n");
               print ("|default| = "$i2s (a::length default)$"\n");
               print ("|equiv|   = "$i2s (a::length mapping)$"\n");
               print ("|skels|   = "$i2s (a::length skels)$"\n");
               print ("|accept|  = "$i2s (a::length accept)$"\n");
               print ("|groups|  = "$i2s (a::length groups)$"\n");
               print ("|start|   = "$i2s (a::length start)$"\n");
               print ("|start'|  = "$i2s (a::length start')$"\n");
               ()
              )
           else ()

   in  Lexer::LEXER
       { base        = base,
         check       = check,
         next        = next,
         default     = default,
         equiv       = mapping,
         accept      = accept,
         groups      = groups, 
         skels       = skels,
         start       = start,
         start'      = start',
         numGroups   = numberOfGroups,
         state_count   = state_count,
         eof         = eofOrd
       }
   end

   fun compile'' matchtrees re = 
       compile'{ matchtrees=matchtrees, numContexts=0 } 
               (map (fn re => RULE { regexp=re, lookahead=NULL, contexts=[] } ) re) 

   compile  = compile'' TRUE
   compileWithoutMatchtrees = compile'' FALSE
}

end #  local 
