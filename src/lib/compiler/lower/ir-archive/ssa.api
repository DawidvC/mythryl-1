#
# This generic module is used for computing static single assignment form.
# Actually only the renaming and iterated dominance frontiers computation
# is implemented here.  
#
# -- Allen Leung



###             "The programmer, like the poet, works only
###              slightly removed from pure thought-stuff.
###
###              He builds his castles in the air, from air,
###              creating by exertion of the imagination.
###
###              Few media of creation are so flexible, so
###              easy to polish and rework, so readily capable
###              of realizing grand conceptual structures."
###
###                               -- Frederick P Brooks Jr



api STATIC_SINGLE_ASSIGNMENT_FORM =
api

   package dom:  Dominator_Tree

   type var     = Int 
   type phi  = var * var * List( var )		#  orig def/def/uses 

   type renamer = { defs:  List( var ), uses: List( var ) } ->
                  { defs:  List( var ), uses: List( var ) }

   type copy    = { dst:  List( var ), src: List( var ) } -> Void


         # Given a set of definitions for each block,
         # Compute the set of phi nodes.

   my compute_ssa:  
       Dom::dominator_tree (N,E,G) ->
       { max_var:       var,  
         defs:          graph::node( N ) -> List( var ),
         is_live:       var * Int -> Bool,
         rename_var:    var -> var,
         rename_statement:   { rename: renamer, copy: copy } -> graph::node( N ) -> Void,
         insert_phi:    { block:     graph::node( N ),
                         in_edges:  List(  graph::edge(  E ) ),
                         phis:      List( phi ) 
                        } -> Void
       } -> Void
end

