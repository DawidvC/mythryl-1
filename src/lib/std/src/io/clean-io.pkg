## clean-io.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6


# This module keeps track of open I/O streams,
# and closes themc cleanly at process exit.
#
# NOTE: there is currently a problem with removing
# the at-functions for streams that get dropped
# by the application, but the system limit on
# open files will limit this.				XXX BUGGO FIXME

package clean_io
:
api {

     Tag;

     os_init_hook:  Ref (Void -> Void);
	#
	# This function gets invoked as the first
	# action during IO initialization.
        #
        # It is meant to support any OS-specific
	# initialization that might be necessary.


     std_strm_hook:  Ref (Void -> Void);
	#
	# This function is defined in text_io_g,
        # and is called after the os hook,
	# but before the per-stream init functions.
	#
        # It is used to rebuild the standard streams.


     add_cleaner:  {
	    init:  Void -> Void,	#  Called at STARTUP and APP_STARTUP 
	    flush:  Void -> Void,	#  Called at FORK_TO_DISK 
	    close:  Void -> Void	#  Called at SHUTDOWN and SPAWN_TO_DISK 
	  } -> Tag;

     rebind_cleaner:  ((Tag, {
	    init:  Void -> Void,	#  Called at STARTUP and APP_STARTUP 
	    flush:  Void -> Void,	#  Called at FORK_TO_DISK 
	    close:  Void -> Void	#  Called at SHUTDOWN and SPAWN_TO_DISK 
	  }) ) -> Void;

     remove_cleaner:  Tag -> Void;

}
{

    Tag = Ref( Void );

    Cleaner = {
	tag:    Tag,		#  unique ID for this cleaner 
	init:   Void -> Void,	#  Called STARTUP and APP_STARTUP 
	flush:  Void -> Void,	#  Called FORK_TO_DISK 
	close:  Void -> Void	#  Called SHUTDOWN and SPAWN_TO_DISK 
      };

    os_init_hook  = REF (fn () = ());
    std_strm_hook = REF (fn () = ());

    cleaners = REF ([]:  List( Cleaner ));

    fun add_cleaner { init, flush, close }
        =
        {   tag = REF ();

	    cleaner_rec
                =
                { tag, init, flush, close };

	    cleaners :=   cleaner_rec ! *cleaners;

	    tag;
	};

    fun get_tag ( { tag, ... } : Cleaner)
        =
        tag;

    fun rebind_cleaner (t, { init, flush, close } )
        =
	cleaners := f *cleaners
        where
            fun f [] => raise exception FAIL "rebind_cleaner: tag not found";

	       f (x ! r)
		  =>
		  {   t' = get_tag x;

		      if (t' == t)
		           { tag=>t, init, flush, close } ! r;
		      else x ! f r;  fi;
		  };
            end;
	end;

    fun remove_cleaner t
        =
	cleaners := f *cleaners
        where

	    fun f [] => [];		#  should we raise an exception here? 
	        f (x ! r) => if (get_tag x == t)  r; else x ! f r;fi;
            end;

	end;

    fun run_selected_functions  sel_g
        =
	loop *cleaners
        where
            fun loop [] => ();
	        loop (x ! r)
		    =>
		    {   ((sel_g x) ())
			except
			    _ = ();

			loop r;
		    };
            end;
	end;

    					# at		is from   src/lib/std/src/nj/at.pkg

    fun run (at::FORK_TO_DISK)
            =>
            run_selected_functions .flush;

	run (at::SPAWN_TO_DISK | at::SHUTDOWN)
            =>
            run_selected_functions .close;

	run (at::STARTUP   | at::APP_STARTUP)
            =>
            {   *os_init_hook   ();
		*std_strm_hook  ();
		run_selected_functions .init;
            };
    end;
                                                             my _ = 
    at::schedule ("IO", at::all, run);

}; #  Clean_io 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
