## big-endian-pseudo-ops-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# Subset of pseudo-ops functions that are little endian sensitive

# We get invoked from:
#
#     src/lib/compiler/lower/ppc/flowgraph/ppc-darwin-pseudo-ops.pkg
#     src/lib/compiler/lower/ppc/flowgraph/ppc-gas-pseudo-ops.pkg
#     src/lib/compiler/lower/sun/flowgraph/sparc-gas-pseudo-ops.pkg

generic package big_endian_pseudo_op_g (

    package codetree:  Codetree;			# Codetree		is from   src/lib/compiler/lower/codetree/codetree.api

    package codetree_eval
	:
	Codetree_Eval					# Codetree_Eval		is from   src/lib/compiler/lower/codetree/codetree-eval.api
	where codetree == codetree;

     icache_alignment:  Int;				# Cache line size 
     max_alignment:     Null_Or( Int );			# Maximum alignment for internal labels 

     nop: { size: Int, en: unt32::Unt };		# Encoding for noop 
)

: (weak) Endian_Pseudo_Ops				# Endian_Pseudo_Ops	is from   src/lib/compiler/lower/flowgraph/pseudo-op-endian.api

{
    package w  = unt;					# unt			is from   src/lib/std/unt.pkg
    package t  = codetree;
    package pb = pseudo_op_basis_type;			# pseudo_op_basis_type	is from   src/lib/compiler/lower/flowgraph/pseudo-op-basis-type.pkg

    Pseudo_Op( X )
        =
        pb::Pseudo_Op( t::Labexp, X ); 

    fun error msg = lowcode_error_message::error ("big_endian_pseudo_ops.", msg);

    my (>>)  =  unt::(>>);
    my (>>>) =  unt::(>>>);
    my (&)   =  unt::bitwise_and;

    infix val  >>  >>>  & ;

    # Return loc aligned at boundary:
    # 
    fun align (loc, boundary)
	=
	{
	    mask = w::from_int boundary - 0u1;
	    w::to_int_x (w::bitwise_and (w::from_int loc + mask, w::bitwise_not mask));
	};

    # Bytes of padding required:
    #
    fun padding (loc, boundary)
        =
        align (loc, boundary) - loc;

    fun pow2 (x, 0) => x;
        pow2 (x, n) => pow2 (x * 2, n - 1);
    end;

    fun bytes_in size
        =
        int::quot (size, 8);

    fun size_of (p_op, loc)
        = 
        case p_op
          
	     pb::ALIGN_SIZE n => padding (loc, pow2 (1, n));
	     pb::ALIGN_ENTRY => padding (loc, icache_alignment);

	     pb::ALIGN_LABEL
                 =>
                 {
		     pad = padding (loc, icache_alignment);

		     case max_alignment 
			 NULL  =>   pad;
			 THE m =>   pad <= m  ??  pad
                                              ::   0;
                     esac;
	      };

	     pb::INT { size, i }
                 =>
                 length i  *  bytes_in size;

	     pb::ASCII s  => string::length s; 
	     pb::ASCIIZ s => string::length s + 1;

	     pb::SPACE (size)  => size;

	     pb::FLOAT { size, f } => length (f) * bytes_in size;

	     pb::EXT _ => error "sizeOf: EXT";
	     _ => 0;
       esac;



    fun emit_value { p_op, loc, emit }
	=
	{
	    itow  = w::from_int;
	    toword8 = unt8::from_large_unt o unt::to_large_unt o itow;

	    fun emit_byte n
                =
                emit (unt8::from_large_unt (unt::to_large_unt n));

	    fun emit_word w
                =
                {   emit_byte((w >> 0u8) & 0u255);
                    emit_byte (w & 0u255);
                };

	    fun emit_long_x n
		=
		{   w = itow n;
		    emit_word (w >>> 0u16);
                    emit_word (w & 0u65535);
		};

	    stipulate 

		my { size, en } = nop;
		to_word = w::from_large_int o unt32::to_large_int_x; 

	    herein
		fun emit_nop ()
		  = 
		  case size
		      1 => emit_byte (to_word en);
		      2 => emit_word (to_word en);
		      4 => {   emit_word (to_word (unt32::bitwise_and (en, 0u65535))); 
			       emit_word (to_word (unt32::(>>) (en, 0u16)));
                           };
		      n => error ("emitNop:  size = " + int::to_string n);
		  esac;

		fun insert_nops 0
                        =>
                        ();

		    insert_nops n
                        => 
			if (n >= size)
                            emit_nop();
                            insert_nops (n-size);
			else
                            error "insertNops";
                        fi;
                end;
	    end;

	    fun align (loc, boundary)
		=
		{
		    boundary =  unt::from_int boundary;
		    mask     =  boundary - 0u1;

		    case (w::bitwise_and (itow (loc), mask))
		      
			 0u0 => ();

			 w   => {   pad_size = (boundary - w);
				    insert_nops (unt::to_int pad_size);
				};
		    esac;
		};

	    my { bool_expression, int_expression }
		= 
		codetree_eval::evaluate 
		    {
		      const =>  integer::from_int o t::constant::value_of, 
		      label =>  label::addr_of
		    };

	    case p_op
	      
		 pb::ALIGN_SIZE n  =>  insert_nops (size_of (p_op, loc));
		 pb::ALIGN_ENTRY =>  insert_nops (size_of (p_op, loc));
		 pb::ALIGN_LABEL =>  insert_nops (size_of (p_op, loc));

		 pb::INT { size, i } => {

		     ints = map (integer::to_int o int_expression) i;

		     case size
		       
			 8 =>  apply (emit_byte o itow)  ints;
			16 =>  apply (emit_word o itow) ints;
			32 =>  apply emit_long_x ints;
			 _ =>  error "emitValue: INT 64";
		     esac;
		 };

		 pb::ASCII  s
                     =>
                     apply
                         (emit o unt8::from_int o char::to_int)
                         (string::explode s);

		 pb::ASCIIZ s
                     =>
                     {   emit_value { p_op=>pb::ASCII s, loc, emit };
                         emit 0u0;
                     };

		 pb::FLOAT { size, f } =>  error "emitValue: FLOAT - not implemented";
		 pb::EXT _             =>  error "emitValue: EXT";
		 pb::SPACE _           =>  error "emitValue: SPACE";

		 _ => ();

	    esac;
	};				# fun emit_value
};					# generic package big_endian_pseudo_op_g


## COPYRIGHT (c) 2001 Lucent Technologies, Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
