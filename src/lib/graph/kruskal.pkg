
# Compiled by:
#     src/lib/graph/graphs.make6

# This module implements Kruskal's algorithm for minimal cost
# spanning tree.
#
# -- Allen Leung



#                "Hacking, like love, like music,
#                 has the power to make men happy."



package kruskals_minimum_cost_spanning_tree: (weak)  Minimal_Cost_Spanning_Tree		# Minimal_Cost_Spanning_Tree	is from   src/lib/graph/spanning-tree.api
{
    package p= node_partition;			# node_partition		is from   src/lib/graph/node-partition.pkg
    package q= leftist_tree_priority_queue;	# leftist_tree_priority_queue	is from   src/lib/src/leftist-tree-priority-queue.pkg
    package g= graph;				# graph				is from   src/lib/graph/graph.pkg

    exception UNCONNECTED;

    fun spanning_tree { weight, lt } (ggg as g::GRAPH ggg') add_edge u
	=
	{   fun less (e1, e2)
		=
		lt (weight e1, weight e2);

	    qqq =   q::create less; 

	    ggg'.forall_edges (q::set qqq); 

	    ppp =   p::node_partition ggg;

	    fun make_tree (1, u)
		    =>
		    u;

		make_tree (mmm, u)
		    =>
		    {   my e as (i, j, _)
			    =
			    q::delete_min qqq;

			if  (p::(====) ppp (i, j))
			     make_tree (mmm, u);
			else
			     p::union' ppp (i, j);
			     make_tree (mmm - 1, add_edge (e, u));
			fi;
		    };
	    end;

	    make_tree (ggg'.order (), u);
	}
	except
	    q::EMPTY_PRIORITY_QUEUE =  raise exception UNCONNECTED;
};
