## codetree-basis.api

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



###             "Mathematics is not the rigid and rigidity-producing
###              schema that the layman thinks it is; rather, in it
###              we find ourselves at that meeting point of constraint
###              and freedom that is the very essence of human nature."
###
###                                        -- Hermann Weyl



api Codetree_Basis {

    Attributes = Unt;

    Misc_Op = { name: String, hash: Unt, attributes: Ref( Attributes ) };

    Cond = LT | LTU | LE | LEU | EQ | NE | GE | GEU | GT | GTU 
		 | SETCC 
		 | MISC_COND  { name: String, hash: Unt, attributes: Ref( Unt ) };

    # Floating-point conditions; the semantics follow the IEEE specification and
    # are determined by four properties:
    #     GT -- greater than,
    #     EQ -- equal,
    #     LT -- less than,
    #     UO -- unordered.
    # In the table below, we have a column
    # for each of these properties and one for the negation of the operator.
    #
    Fcond # Was      #  GT   EQ   LT   UO   negation 
		     #  ---  ---  ---  ---  -------- 
     = FEQ    # ====	#   F    T    F    F      ?<>   
     | FNEU   # ?<>	#   T    F    T    T      ==    
     | FGT    # >	#   T    F    F    F      ?<=   
     | FGE    # >=	#   T    T    F    F      ?<    
     | FLT    # <	#   F    F    T    F      ?>=   
     | FLE    # <=	#   F    T    T    F      ?>    
     | FUO    # ?	#   F    F    F    T      <=>   
     | FNE    # <>	#   T    F    T    F      ?=    
     | FGLE   # <=>	#   T    T    T    F      ?     
     | FGTU   # ?>	#   T    F    F    T      <=    
     | FGEU   # ?>=	#   T    T    F    T      <     
     | FLTU   # ?<	#   F    F    T    T      >=    
     | FLEU   # ?<=	#   F    T    T    T      >     
     | FEQU   # ?=	#   F    T    F    T      <>    
     | SETFCC
     | MISC_FCOND  { name: String, hash: Unt, attributes: Ref( Unt ) };

    Rounding_Mode = TO_NEAREST | TO_NEGINF | TO_POSINF | TO_ZERO;

    Div_Rounding_Mode = DIV_TO_NEGINF | DIV_TO_ZERO;

    Ext = SIGN_EXTEND | ZERO_EXTEND;

    # Should be datatypes, but highcode does not optimize them well 
    Some_Type = Int;
    Fty = Int;

    # Invert the conditional when swapping the two arguments
    # of the comparision.
    # IMPORTANT: these are not negation!
    #
    swap_cond:    Cond ->  Cond;
    swap_fcond:  Fcond -> Fcond;

    # These are the negations! 
    #
    negate_cond:    Cond ->  Cond;
    negate_fcond:  Fcond -> Fcond;

    # Hashing functions:
    #
    hash_cond:          Cond -> Unt;
    hash_fcond:         Fcond -> Unt;
    hash_rounding_mode:  Rounding_Mode -> Unt;

    # Prettyprinting:
    #
    cond_to_string:          Cond -> String;
    fcond_to_string:         Fcond -> String;
    rounding_mode_to_string:  Rounding_Mode -> String;

};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
