## test-class.pkg

# I test this by doing
#
#     linux% my
#     eval: make "oop-test.make6";
#     eval: counter = counter::new ();
#     eval: counter::get counter;
#     eval: counter::increment counter;
#     eval: counter::get counter;
#     eval: counter::reset counter;
#     eval: xocounter::get counter;counter::get counter;
#   
# When I want gross verbose debug output I also do:
#     set_control "typechecker::expand_oop_syntax_debugging" "TRUE";
#     set_control "typechecker::typecheck_api_debugging" "TRUE";
#     set_control "typechecker::typecheck_type_debugging" "TRUE";
#     or even 
#     set_control "typechecker::expand_oop_syntax_debugging" "TRUE";set_control "typechecker::typecheck_package_language_debugging" "TRUE";set_control "typechecker::api_match_debugging" "TRUE";set_control "ed::module_stuff_debugging" "TRUE";set_control "ed::typechecker_dictionary_debugging" "TRUE";make "oop-test.make6";

class2 counter {

    # Declare our object's state field,
    # an integer counter:
    #
    field val  Ref(Int)  counter = REF 0;

    # Define a message which returns the
    # value of our object's counter:
    # 
    message fun    Self(X) -> Int
	get self
	    =
	    *(self->counter);

    # Define a message which increments the
    # value of our object's counter:
    #
    message fun    Self(X) -> Void
	increment self
	    =
	    self->counter := *(self->counter) + 1;

    # Define a message which resets the
    # value of our object's counter:
    #
    message fun    Self(X) -> Void
	reset self
	    =
	    self->counter := 0;


    # Define a nice function for creating instances
    # of this class.  The make__object() function
    # is autosynthesized by the compiler:
    #
    fun new ()
	=
	make__object ((), ());
};


## Copyright (c) 2010 by Jeffrey S Prothero,
## released under Gnu Public Licence version 3.
