## runtime-type.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



# Runtime type support for the A-Normal Form
# optimization passes -- for context see the
# comments in
#
#     src/lib/compiler/upper/anormal/anormal.api



###                 "Computers are useless.
###                  They can only give you answers."
###
###                              -- Pablo Picasso



api Runtime_Type {

    Tcode;

    Rtype;
    tcode_void:    Tcode;
    tcode_record:  Tcode;
    tcode_int32:   Tcode;
    tcode_pair:    Tcode;
    tcode_fpair:   Tcode;
    tcode_real:    Tcode;
    tcode_real_n:   Int -> Tcode;

    tovalue:       Tcode -> anormal::Value;
#   my rtLexp:        type_oper::kenv -> type_oper::Highcode_Type_Constructor -> rtype 
  
}; #  Api RUNTIME_TYPE 

package runtime_type /* :> Runtime_Type */ { 		# XXX BUGGO FIXME why isn't this API used at present?

    stipulate

	package di = debruijn_index;
	package lt= highcode;				# highcode			is from   src/lib/compiler/upper/highcode/highcode.pkg
	package po= highcode_primitive_op;		# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg
	package pt= highcode_data_representation;	# highcode_data_representation	is from   src/lib/compiler/upper/highcode/highcode-data-representation.pkg
	package lv= highcode_var;			# highcode_var			is from   src/lib/compiler/upper/highcode/highcode-var.pkg

	include highcode_guts;
	include anormal;

    herein

        Tcode = Int;
        Rtype = anormal::Anormal_Expression;

	fun bug s
	    =
	    error_message::impossible ("runtime_type: " + s);

	fun say (s:  String)
	    =
	    controls::print::say s;

	fun make_var _
	    =
	    lv::make_highcode_variable();

	ident =   fn le => le; end ;

	fkfun = { is_recursive=>NULL, all_call_sites_known=>FALSE, inlining_hint=>INLINE_WHENEVER_POSSIBLE, calling_convention=>CALLING_CONVENTION_FUNCTION lt::ffc_fixed };
	fkfct = { is_recursive=>NULL, all_call_sites_known=>FALSE, inlining_hint=>INLINE_IF_SIZE_SAFE,      calling_convention=>CALLING_CONVENTION_GENERIC };

#	fun mkarw (ts1, ts2)
#            =
#            lt::tcc_arrow (lt::ffc_fixed, ts1, ts2);

	lt_arw =   lt::ltc_tyc o lt::tcc_arrow;

	fun  wty tc =   (NULL, po::WRAP,   lt_arw (lt::ffc_fixed, [tc], [lt::tcc_void]), []);
	fun uwty tc =   (NULL, po::UNWRAP, lt_arw (lt::ffc_fixed, [lt::tcc_void], [tc]), []);

	fun fu_wrap   (tc, vs, v, e) =  PRIMOP (wty  tc, vs, v, e);
	fun fu_unwrap (tc, vs, v, e) =  PRIMOP (uwty tc, vs, v, e);

	fu_rk_tuple
            =
            anormal_stuff::rk_tuple;

	fun wrap_x (t, u)
            = 
	    {   v = make_var(); 
	        fu_wrap (t, [u], v, RET [VAR v]); 
	    };

	fun unwrap_x (t, u)
            = 
	    {   v = make_var(); 
	        fu_unwrap (t, [u], v, RET [VAR v]); 
	    };

	###############################################################################
	#                  UTILITY FUNCTIONS AND CONSTANTS
	###############################################################################
	fun split (RET [v])
                =>
                (v, ident);

	    split x
                =>
                {   v = make_var();
		    (VAR v, fn z = LET([v], x, z));
		};
	end;

	fun select_g (i, e)
            = 
	    {   my (v, header) = split e;
	        x = make_var();
	        header (SELECT (v, i, x, RET [VAR x]));
	    };

	fun fn_g (vts, e)
            = 
	    {   f = make_var();
	        MUTUALLY_RECURSIVE_FNS([(fkfun, f, vts, e)], RET [VAR f]);
	    };

	fun select_v (i, u)
            = 
	    {   x = make_var();
	        SELECT (u, i, x, RET [VAR x]);
	    };

	fun app_g (e1, e2)
            = 
	    {   my (v1, h1) = split e1;
	        my (v2, h2) = split e2;

	        h1 (h2 (APPLY (v1, [v2])));
	    };

	fun record_g es
            = 
	    f (es, [], ident)
            where
	        fun f ([], vs, header)
                        => 
		        {   x = make_var();
			    header (RECORD (fu_rk_tuple, reverse vs, x, RET [VAR x]));
		        };

		    f (e ! r, vs, header)
                        => 
		        {   my (v, h) = split e;
			    f (r, v ! vs, header o h);
		        };
                end;
	    end;

	fun srecord_g es
            = 
	    f (es, [], ident)
            where
	        fun f ([], vs, header)
                        => 
		        {   x = make_var();
			    header (RECORD (RK_STRUCT, reverse vs, x, RET [VAR x]));
		        };

		    f (e ! r, vs, header)
                        => 
		        {   my (v, h) = split e;
			    f (r, v ! vs, header o h);
		        };
                end;
	    end;

	fun wrap_g (z, b, e)
            = 
	    {   my (v, h) = split e;
	        h (wrap_x (z, v));
	    };

	fun unwrap_g (z, b, e)
            = 
	    {   my (v, h) = split e;
	        h (unwrap_x (z, v));
	    };

	fun wrap_cast (z, b, e)
            = 
	    {   my (v, h) = split e;
	        pt = lt::ltc_arrow (lt::ffc_fixed, [lt::ltc_tyc z], [lt::ltc_void]);
	        pv = (NULL, po::CAST, pt,[]);
	        x = make_var();
	        h (PRIMOP (pv, [v], x, RET [VAR x]));
	    };

	fun unwrap_cast (z, b, e)
            = 
	    {   my (v, h) = split e;
	        pt = lt::ltc_arrow (lt::ffc_fixed, [lt::ltc_void], [lt::ltc_tyc z]);
	        pv = (NULL, po::CAST, pt,[]);
	        x = make_var();
	        h (PRIMOP (pv, [v], x, RET [VAR x]));
	    };

	fun switch_g (e, s, ce, d)
            = 
	    {   my (v, h) = split e;
	        h (SWITCH (v, s, ce, d));
	    };

	fun cond (u, e1, e2)
            =
            u (e1, e2);

	fun wrap_x (t, u)
            = 
	    {   v = make_var(); 
	        fu_wrap (t, [u], v, RET [VAR v]); 
	    };

	fun unwrap_x (t, u)
            = 
	    {   v = make_var(); 
	        fu_unwrap (t, [u], v, RET [VAR v]); 
	    };


	intty    = lt::ltc_int;
	boolty   = /* lt::ltc_bool */ lt::ltc_void;
	inteqty  = lt::ltc_arrow (lt::ffc_fixed, [intty, intty], [boolty]);
	intopty  = lt::ltc_arrow (lt::ffc_fixed, [intty, intty], [intty]);
	ieqprim  = (NULL, po::ieql, inteqty, []);
	iaddprim = (NULL, po::iadd, intopty, []);

	fun ieq_lexp (e1, e2)
	    = 
	    {   my (v1, h1) = split e1;
		my (v2, h2) = split e2;

		fn (te, fe) => h1 (h2 (BRANCH (ieqprim, [v1, v2], te, fe))); end ;
	    };

	fun iadd_lexp (e1, e2)
	    = 
	    {   my (v1, h1) = split e1;
		my (v2, h2) = split e2;
		x = make_var (); 

		h1 (h2 (PRIMOP (iaddprim, [v1, v2], x, RET [VAR x])));
	    };


	tcode_void   = 0;
	tcode_record = 1;
	tcode_int32  = 2;
	tcode_pair   = 3;
	tcode_fpair  = 4;
	tcode_real   = 5;

	fun tcode_real_n n
	    =
	    n * 5;


	fun tovalue i
	    =
	    anormal::INT i;

	tolexp =  fn tcode =  RET [tovalue tcode];

	my tcode_void:     Anormal_Expression = tolexp tcode_void;
	my tcode_record:   Anormal_Expression = tolexp tcode_record;
	my tcode_int32:    Anormal_Expression = tolexp tcode_int32;
	my tcode_pair:     Anormal_Expression = tolexp tcode_pair;
	my tcode_fpair:    Anormal_Expression = tolexp tcode_fpair;
	my tcode_real:     Anormal_Expression = tolexp tcode_real;

	my tcode_real_n:   Int -> Anormal_Expression
            =
            fn i = tolexp (tcode_real_n i);

	Outcome 
	  = YES
	  | NO
	  | MAYBE  Anormal_Expression;  

	##############################################################################
	#                           KIND DICTIONARIES
	##############################################################################

	Kenv = List( ( List( lv::Highcode_Variable ),
                       List( Highcode_Kind )
                   ) ); 

	init_ke = [];

	fun add_ke (kenv, vs, ks)
            =
            (vs, ks) ! kenv;

	fun vlook_ke (kenv, i, j)
            = 
	    {   my (vs, _)
                    =
                    list::nth (kenv, i - 1) 
		    except
                        _ = bug "unexpected case1 in vlook_ke";

	        list::nth (vs, j)
                except
                    _ = bug "unexpected case2 in vlook_ke";
	    };

	fun klook_ke (kenv, i, j)
            = 
	    {   my (_, ks)
                    =
                    list::nth (kenv, i - 1) 
		    except
                        _ = bug "unexpected case1 in klook_ke";

	        list::nth (ks, j)
                except
                    _ = bug "unexpected case2 in klook_ke";
	    };


	# my tk_abs_gen:  kenv * List( Highcode_Variable ) * List( Highcode_Kind ) * Highcode_Variable * fkind 
	#		  -> kenv * ((Anormal_Expression * Anormal_Expression) -> Anormal_Expression)
        #
	fun tk_abs_fn (kenv, vs, ks, f, fk)
            = 
	    {   make_arg_type = case fk  { calling_convention => CALLING_CONVENTION_FUNCTION _, ... } => lt::ltc_tuple;
				         { calling_convention => CALLING_CONVENTION_GENERIC,    ... } => lt::ltc_str;
                                esac;

	      argt = make_arg_type (map lt::tk_lty ks);

	      w = make_var();

	      fun h([], i, base) => base;
		  h (v ! r, i, base) => h (r, i+1, SELECT (VAR w, i, v, base));
              end;

	      fun header (e1, e2)
                  =
                  MUTUALLY_RECURSIVE_FNS([(fk, f, [(w, argt)], h (vs, 0, e1))], e2);

	      (add_ke (kenv, vs, ks), header);
	  };

	# my tk_abs: kenv * List( tvar * Highcode_Kind ) -> kenv * (Anormal_Expression * Anormal_Expression -> Anormal_Expression) 
	#
	fun tk_abs (kenv, tvks, f)
            = 
	    {   my (vs, ks) = paired_lists::unzip tvks;
	        tk_abs_fn (kenv, vs, ks, f, fkfct);       
	    };

	# my tk_tfn: kenv * List( Highcode_Kind ) -> kenv * (Anormal_Expression -> Anormal_Expression) 
	#
	fun tk_tfn (kenv, ks)
            = 
	    {   vs =   map (fn _ = make_var ())   ks;
	        f = make_var();
	        my (nkenv, header) = tk_abs_fn (kenv, vs, ks, f, fkfun);
	        (nkenv, fn e = header (e, RET [VAR f]));
	    };


	#  rt_lexr lvars, TC_PRIM to proper constants 
	#  my rt_lexp:  kenv -> Highcode_Type_Constructor -> rtype 
	#
	fun rt_lexp
            (kenv:  Kenv)
            (tc:  Highcode_Type_Constructor)
	    = 
	    loop tc
	    where
		fun loop (x:  Highcode_Type_Constructor) 
		    = 
		    case (type_constructor_project x)

			 TC_FN (ks, tx)
                             => 
			     {   my (nenv, header) = tk_tfn (kenv, ks);
			         header (rt_lexp nenv tx);
			     };

			 TC_APPLY (tx, ts)
			     =>
			     case (type_constructor_project tx)
				  (TC_APPLY _ | TC_PROJ _ | TC_VAR _) => 
				     app_g (loop tx, tcs_lexp (kenv, ts));
				 _ => tcode_void;
			     esac;

			 TC_SEQ ts
                             =>
                             tcs_lexp (kenv, ts);

			 TC_PROJ (tx, i)
                             =>
                             select_g (i, loop tx);

			 TC_PRIM pt
			     => 
			     if   (pt == pt::prim_type_con_real)   tcode_real; 
			     elif (pt == pt::prim_type_con_int32)  tcode_int32;
			     else                                  tcode_void;
			     fi;

			 TC_VAR (i, j)
			     =>
			     RET [(VAR (vlook_ke (kenv, i, j)))];

			 TC_TUPLE (_, [t1, t2])
			     =>
			     case (is_float (kenv, t1), is_float (kenv, t2))

				  (YES, YES)
				      =>
				      tcode_fpair;

				  ((NO, _) | (_, NO))
				      =>
				      tcode_pair;

				  ((MAYBE e, YES) | (YES, MAYBE e))
				      =>
				      {   test = ieq_lexp (e, tcode_real);
					  cond (test, tcode_fpair, tcode_pair);
				      };

				 (MAYBE e1, MAYBE e2)
				     =>
				     {   e = iadd_lexp (e1, e2);
					 test = ieq_lexp (e, tcode_real_n 2);
					 cond (test, tcode_fpair, tcode_pair);
				     };
			     esac;

			 TC_TUPLE (_, [])       => tcode_void;
			 TC_TUPLE (_, ts)       => tcode_record;
			 TC_ARROW (_, tc1, tc2) => tcode_void;

			 TC_ABSTRACT             tx  =>  loop tx;
			 TC_EXTENSIBLE_TOKEN (_, tx) =>  loop tx;           

			 TC_RECURSIVE ((n, tx, ts), i)
			     => 
			     {   ntx = case ts 

					  [] => tx;

					   _ => 
					     case (type_constructor_project tx)
						  TC_FN(_, x) => x;
						 _ => bug "unexpected MUTUALLY_RECURSIVE_FNS 333 in rtLexp-loop";
					     esac;
				       esac;

				 tk = case (type_constructor_project ntx)
					   TC_FN (ks, _) => list::nth (ks, i);
					  _ => bug "unexpected MUTUALLY_RECURSIVE_FNS tycs in rtLexp-loop";
				      esac;

				 case (type_kind_project tk)

				     TYPEKIND_TYPE_CONSTRUCTOR_FUNCTION (ks, _)
					 => 
					 {   my (_, header) = tk_tfn (kenv, ks);

					     header (tcode_void);
					 };

				      _ => tcode_void;
				 esac;
			     };

			 TC_NAMED_VAR v    => RET [VAR v];

			 TC_SUM          _ => bug "unexpected TC_SUM Highcode_Type_Constructor in rtLexp-loop";
			 TC_CLOSURE      _ => bug "unexpected TC_CLOSURE Highcode_Type_Constructor in rtLexp-loop";
			 TC_FATE _ => bug "unexpected TC_FATE Highcode_Type_Constructor in rtLexp-loop";
			 TC_INDIRECT     _ => bug "unexpected TC_INDIRECT Highcode_Type_Constructor in rtLexp-loop";
			 _                 => bug "unexpected Highcode_Type_Constructor in rtLexp-loop";
		 esac;
	    end		#  fun rt_lexp 

	also
	fun tcs_lexp (kenv, ts)
            = 
	    {   fun h tc = rt_lexp kenv tc;
	        record_g (map h ts);
	     }

	also
        fun ts_lexp (kenv, ts)
            = 
	    {   fun h tc = rt_lexp kenv tc;
	        srecord_g (map h ts);
	    }

	also
        fun is_float (kenv, tc)
            = 
	    loop tc
	    where
	        fun loop x
                    = 
		    case (type_constructor_project x)

		        TC_PRIM pt
                            =>
                            pt == pt::prim_type_con_real
                                ??  YES
                                ::  NO;

			TC_TUPLE (_, ts)       => NO;
			TC_ARROW (_, tc1, tc2) => NO;
			TC_RECURSIVE(_, i)     => NO;

			TC_EXTENSIBLE_TOKEN(_, tx)
                            =>
                            loop tx;

			TC_APPLY (tx, _)
                            => 
			    case (type_constructor_project tx)

				(TC_APPLY _ | TC_PROJ _ | TC_VAR _)
                                    => 
				    MAYBE (rt_lexp kenv x);

				_   => NO;

                            esac;
		      #  | (TC_ABSTRACT tx) => loop tx  

			TC_VAR (i, j)
                            =>
			    {   k = klook_ke (kenv, i, j);

			        case (type_kind_project k)
				    TYPEKIND_BOXED_TYPE_CONSTRUCTOR =>  NO;
				    _                               =>  MAYBE (rt_lexp kenv x);
                                esac;
			    }; 

			_ => MAYBE (rt_lexp kenv x);

                    esac;
	    end;

	fun is_pair (kenv, tc)
            = 
	    loop tc
            where
	        fun loop x
                    = 
		    case (type_constructor_project x)

			TC_TUPLE (_, [_, _]) => YES;

			TC_TUPLE _         => NO;
		        TC_PRIM pt         => NO;
			TC_ARROW _         => NO;
			TC_RECURSIVE(_, i) => NO;

			TC_EXTENSIBLE_TOKEN(_, tx)
                            =>
                            loop tx;

			TC_APPLY (tx, _)
                            => 
			    case (type_constructor_project tx)
				 (TC_APPLY _ | TC_PROJ _ | TC_VAR _ | TC_NAMED_VAR _) =>  MAYBE (rt_lexp kenv x);
				 _                                                    =>  NO;
                            esac;
		   #     | (TC_ABSTRACT tx) =>  loop tx  
			_ => MAYBE (rt_lexp kenv x);
                    esac;
	    end;



    end;	# stipulate
};		# package runtime_type 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
