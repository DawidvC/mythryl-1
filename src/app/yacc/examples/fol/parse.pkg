/* Uses the generated lexer and parser to export parsing functions 
 */

api PARSE =
api

  package deep_syntax:  Deep_Syntax

#  parse a program from a string 

  my prog_parse:  String -> deep_syntax::deep_syntax_tree 

#  parse a query from a string 

  my query_parse:  String -> deep_syntax::deep_syntax_tree

#  parse a program in a file 

  my file_parse:  String -> deep_syntax::deep_syntax_tree
 
#  parse a query from the standard input 

  my top_parse:  Void -> deep_syntax::deep_syntax_tree

end  #  Api PARSE 


generic package Parse (package deep_syntax:  Deep_Syntax
	       package Interface:  INTERFACE
	       package Parser:  PARSER
	          sharing Parser::Arg = Interface::Arg
	          sharing Parser::Source_Position = Interface::Source_Position
		  sharing Parser::result = deep_syntax::deep_syntax_tree
	       package Tokens:  Fol_TOKENS
	          sharing Tokens::Token = Parser::token::Token
		  sharing Tokens::Semantic_Value = Parser::Semantic_Value
               ) : PARSE


package deep_syntax = deep_syntax

fun parse (dummyToken, lookahead, reader:  Int -> String) =
    let Interface::init_line()
	empty = *Interface::line
	dummy_eof = Tokens::EOF (empty, empty)
	dummyTOKEN = dummyToken (empty, empty)
	fun invoke lexer = 
	   let newLexer = Parser::Stream::cons (dummyTOKEN, lexer)
	   in Parser::parse (lookahead, newLexer, Interface::error,
				Interface::nothing)
	   end
        fun loop lexer =
	  let my (result, lexer) = invoke lexer
	      my (next_token, lexer) = Parser::Stream::get lexer
	  in if Parser::sameToken (next_token, dummy_eof) then result
	     else loop lexer
	  end
     in loop (Parser::make_lexer reader)
    end

fun string_reader s =
    let next = REF s
     in fn _ => *next before next := ""
    end
    
fun prog_parse s = parse (Tokens::PARSEPROG, 15, string_reader s)

fun query_parse s = parse (Tokens::PARSEQUERY, 15, string_reader s)

fun file_parse name =
    let dev = file::open_for_read name
     in (parse (Tokens::PARSEPROG, 15, fn i => file::read_n (dev, i)))
        before file::close_input dev
    end

fun top_parse () = 
    parse (Tokens::PARSEQUERY, 0, (fn i => file::read_line file::stdin))

};  #  generic package Parse 
