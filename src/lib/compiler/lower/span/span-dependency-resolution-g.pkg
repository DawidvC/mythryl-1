## span-dependency-resolution-g.pkg
# 
#     This version of the span dependency resolution also
#     fill delay slots using a few simple strategies. 
#     Assumption: Instructions are 32bits.
#     Allen
#
# See docs in src/lib/compiler/lower/doc/latex/span-dep.tex
#
# On x86 we instead use:
#
#     src/lib/compiler/lower/span/x86-span-dependency-resolution-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



###                  "Imagine if every Thursday your shoes exploded
###                   if you tied them the usual way. This happens
###                   to us all the time with computers, and nobody
###                   thinks of complaining."
###
###                                           -- Jeff Raskin


# We get invoked by:
#
#     src/lib/compiler/codegen/sun/sparc-codegen.pkg
#     src/lib/compiler/codegen/x86/x86-codegen-g.pkg


generic package span_dependency_resolution_g (

    package emitter:    Instruction_Emitter;			# Instruction_Emitter	is from   src/lib/compiler/lower/emit/instruction-emitter.api

    package control_flow_graph
	:
	Control_Flow_Graph					# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where instruction_set == emitter::instruction_set
	also  pseudo_op == emitter::instruction_stream::pseudo_op;

    package jumps
	:
	Span_Dependent_Jumps					# Span_Dependent_Jumps	is from   src/lib/compiler/lower/span/span-dependent-jumps.api
	where instruction_set
              ==
              control_flow_graph::instruction_set;

    package delay_slot
	:
	Delay_Slot_Properties					# Delay_Slot_Properties	is from   src/lib/compiler/lower/span/delay-slot-props.api
	where instruction_set
              ==
              control_flow_graph::instruction_set;

    package instruction_properties
	:
	Instruction_Properties					# Instruction_Properties	is from   src/lib/compiler/lower/instruction/instruction-properties.api
	where instruction_set
	      ==
              control_flow_graph::instruction_set;

    package asm
	:
	Instruction_Emitter					# Instruction_Emitter	is from   src/lib/compiler/lower/emit/instruction-emitter.api
	where instruction_set
              ==
              control_flow_graph::instruction_set
	also
              instruction_stream
              ==
              emitter::instruction_stream;
)

: (weak) Basic_Block_Scheduler					# Basic_Block_Scheduler	is from   src/lib/compiler/lower/span/basic-block-scheduler.api

{
    package control_flow_graph = control_flow_graph;
    package instruction_set    = control_flow_graph::instruction_set;
    package cells              = instruction_set::cells;

    package e =  emitter;
    package i =  control_flow_graph::instruction_set;
    package c =  cells;
    package j =  jumps;
    package p =  control_flow_graph::pseudo_op;
    package d =  delay_slot;
    package g =  graph;						# graph			is from   src/lib/graph/graph.pkg
    package a =  rw_vector;					# rw_vector		is from   src/lib/std/src/rw-vector.pkg

    fun error msg
        =
        lowcode_error_message::error("span_dependency_resolution", msg);

    Code
	= SDI  { size:  Ref( Int ),					# variable sized  "sdi" == "span dependent instruction" -- variable size branch/jump.
		  instruction:  i::Instruction }

	| FIXED  { size: Int,						# size of fixed instructions 
		    instructions: List( i::Instruction ) }

	| BRANCH  { instruction:  List( Code ),      #  instruction with delay slot
		     branch_size:  Int,
		     fill_slot:  Ref( Bool ) } 

	| DELAYSLOT  { instruction:  List( Code ),    #  instruction in delay slot 
			fill_slot:  Ref( Bool ) }

	| CANDIDATE  #  two alternatives 
	  { old_instructions:   List( Code ), #  without delay slot filling 
	    new_instructions:   List( Code ), #  when delay slot is filled 
	    fill_slot:   Ref( Bool )   #  should we fill the delay slot? 
	  };

    Compressed
	= PSEUDO  p::Pseudo_Op
	| LABEL   label::Label
	| CODE    (label::Label, List( Code ));

    Cluster
        =
        CLUSTER  { comp:  List( Compressed ) };

    my cluster_list:   Ref( List( Cluster      ) )   = REF [];		# XXX BUGGO FIXME.  More icky global variables.
    my data_list:      Ref( List( p::Pseudo_Op ) )   = REF [];		# XXX BUGGO FIXME.  More icky global variables.

    fun clean_up ()
	=
	{   cluster_list :=  [];
	    data_list    :=  [];
	};

    fun bbsched (g::GRAPH graph, blocks:  List( control_flow_graph::Node ))
	=
	{   blocks = map #2 blocks;

	    fun max_block_id (control_flow_graph::BLOCK { id, ... } ! rest, curr)
		    => 
		    if (id > curr ) max_block_id (rest, id); else max_block_id (rest, curr);fi;

		max_block_id([], curr)
                    =>
                    curr;
	    end;

	    nnn =   max_block_id   (blocks, graph.capacity ());


	    #  Order of blocks in code layout 

	    blk_order
                =
                rw_vector::make_rw_vector (nnn, 0);


	    # Maps blknum -> label at the position of the second instruction 
	    # This is incase the first instruction gets used to fill a delay slot 

	    dummy     =  label::make_anonymous_label  ();
	    label_map =  a::make_rw_vector  (nnn, dummy);



	    fun enter_labels (blocks)			# Enter labels into the label map:
              = 
	      list::apply 
		  (fn control_flow_graph::BLOCK { id, ... }
                      =
                      rw_vector::set (label_map, id, label::make_anonymous_label ()))
		  blocks;

	    fun block_order (blocks)			#  Create block order 
		=
		{   fun order (control_flow_graph::BLOCK { id, ... }, n)
			=
			{   rw_vector::set (blk_order, id, n);
			    n + 1;
			};

		    list::fold_left  order  0  blocks;
		};

	    fun is_fallthrough (blk1, blk2)			# "Fain would I climb, yet fear I to fall."   -- Sir Walter Raleigh
		= 
		rw_vector::get (blk_order, blk1) + 1
                ==
		rw_vector::get (blk_order, blk2);

	    fun is_backwards (blk1, blk2)
		= 
		rw_vector::get (blk_order, blk2)
                <=
		rw_vector::get (blk_order, blk1);



	    # Zero length copy instruction :

	    fun is_empty_copy instruction
		=
		instruction_properties::instruction_kind (instruction) == instruction_properties::IK_COPY
		and
		j::sdi_size (instruction, label::addr_of, 0) == 0; 


	    # Find the target of a block, and return the first instruction and 
	    # its associated label.

	    fun find_target (blknum, [ control_flow_graph::BLOCK { id=>id1, instructions=>instructions1, ... },
				       control_flow_graph::BLOCK { id=>id2, instructions=>instructions2, ... } ])
                    =>
                    {   fun extract (blknum, instructions)
			    =
			    {   # Skip over empty copies:

				fun find [] =>  NULL;

				    find (instrs as instruction ! rest)
                                        => 
				        if   (is_empty_copy  instruction   )   find  rest;
                                                                    else   find' rest;   fi;
                                end 


				# Okay, we are now guaranteed that the remaining 
				# instructions will not be used in the delay slot of
				# the current block.   Find the first instruction.

				also
                                fun find' [first]    =>  THE (first, a::get (label_map, blknum));
				    find' []         =>  NULL;
				    find' (_ ! rest) =>  find' rest;
                                end;

				case instructions 
				  
				     jmp ! rest
                                         => 
				         if   (instruction_properties::instruction_kind jmp == instruction_properties::IK_JUMP)
                                              find rest; 
				         else find instructions;  fi;

				     []  =>
                                         NULL;		# No first instruction.
                                esac;
			    };

			if        (is_fallthrough (blknum, id1)   )   extract (id2, *instructions2);
			else if   (is_fallthrough (blknum, id2)   )   extract (id1, *instructions1);
			else                                            NULL;                     fi;  fi;
		    };

	        find_target _
                    =>
                    NULL;
            end;



	    fun compress [] =>  [];

		compress (control_flow_graph::BLOCK { id, align, labels, instructions, ... } ! rest)
		    =>
		    {   next =  map  graph.node_info  (graph.next id);

			backward
			    = 
			    list::exists 
			        (fn control_flow_graph::BLOCK { id=>id1, ... } =   is_backwards (id, id1))
			        next;


			#  Build the code list 

			fun scan ([], non_sdi_instrs, non_sdi_size, code)
				=> 
				group (non_sdi_size, non_sdi_instrs, code);

			    scan (instruction ! instrs, non_sdi_instrs, non_sdi_size, code)
				=>
				{   my { n, n_on, n_off, nop }
					=
					d::delay_slot { instruction, backward };

				    case (n_off, instrs)
				      
					 (d::D_ALWAYS, delay_slot ! rest)
					     => 
					     if  (d::delay_slot_candidate { jmp=>instruction,
								delay_slot } and
						  not (d::conflict { src=>delay_slot, dst=>instruction } )
                                             )

						  scan (rest,[], 0,
						      make_candidate1 (instruction, delay_slot)
                                                      !
						      group (non_sdi_size, non_sdi_instrs, code));
					     else
						  scan_sdi (instruction, instrs, non_sdi_instrs, non_sdi_size, code);
					     fi;

					 _ =>  scan_sdi (instruction, instrs, non_sdi_instrs, non_sdi_size, code);
				    esac;
				};
			end 

			also
			fun scan_sdi (instruction, instrs, non_sdi_instrs, non_sdi_size, code)
			    =
			    {   s = j::min_size instruction;

				if   (j::is_sdi instruction)
				    
				     scan ( instrs,[], 0,
                                            SDI { size=>REF s, instruction=>instruction }
                                            !
					    group (non_sdi_size, non_sdi_instrs, code)
                                          );
				else
				     scan (instrs, instruction ! non_sdi_instrs, non_sdi_size+s, code);
				fi;
			    }

			also
			fun group (0,       [], code) =>   code;
			    group (size, instructions, code) =>   FIXED { size, instructions } ! code;
			end 

			also
			fun build_list instrs
			    =
			    scan'(instrs,[], 0,[])

			also
			fun scan'([], non_sdi_instrs, non_sdi_size, code)
				=> 
				group (non_sdi_size, non_sdi_instrs, code);

			    scan'(instruction ! instrs, non_sdi_instrs, non_sdi_size, code)
				=>
				{   s =  j::min_size instruction;

				    if   (j::is_sdi instruction)
				        
					 scan'(instrs,[], 0,
                                               SDI { size=>REF s, instruction=>instruction }
                                               !
					       group (non_sdi_size, non_sdi_instrs, code));
				    else
					 scan'(instrs, instruction ! non_sdi_instrs, non_sdi_size+s, code);
				    fi;
				};
			end 


			# Create a branch delay slot candidate sequence.
			# jmp is the normal jump instruction; jmp' is the
			# jump instruction when the delay slot is active.

			also
			fun make_candidate1 (jmp, delay_slot)
				= 
				{   fill_slot = REF TRUE;

				    jmp' = d::enable_delay_slot { n=>FALSE, nop=>FALSE, instruction=>jmp };

				    CANDIDATE { new_instructions=> 
						[BRANCH { branch_size=>j::min_size jmp',
							instruction=>build_list [jmp'],
							fill_slot },
						 DELAYSLOT { instruction=>build_list [delay_slot],
							   fill_slot } ],
					      old_instructions=>build_list [jmp, delay_slot],
					      fill_slot };
				} 


			# Create a branch delay slot candidate sequence.
			# jmp is the normal jump instruction; jmp' is the
			# jump instruction when the delay slot is active.

			also
			fun make_candidate2 (jmp, delay_slot, label)
			    = 
			    {   fill_slot = REF TRUE;

				jmp' = d::set_target(
					    d::enable_delay_slot { n=>TRUE, nop=>FALSE, instruction=>jmp },
					    label);

				CANDIDATE { new_instructions=> 
					    [BRANCH { branch_size=>j::min_size jmp',
						    instruction=>build_list [jmp'],
						    fill_slot },
					     DELAYSLOT { instruction=>build_list [delay_slot],
						       fill_slot } ],
					  old_instructions=>build_list [jmp],
					  fill_slot };
			    } 


			# Try different strategies for delay slot filling

			also
			fun fit_delay_slot (jmp, body)
			    =
			    case body		# Remove empty copies
			       
				 []  =>
                                     fit_delay_slot'(jmp, body);

				 prev ! rest
                                     =>
				     if   (is_empty_copy prev)
				          fit_delay_slot (jmp, rest);
				     else fit_delay_slot'(jmp, body);  fi;
			    esac


			also
			fun fit_delay_slot'(jmp, body)
			    =
			    {   my { n, n_on, n_off, nop }
                                    =
                                    d::delay_slot { instruction=>jmp, backward };

				# Use the previous instruction to fill the delay slot 

				fun strategy1 ()
				    =
				    case (n_off, body)
				      
					 (d::D_ALWAYS, delay_slot ! body)
					     => 
					     if  (not (d::delay_slot_candidate { jmp,
								   delay_slot } ) or
						     d::conflict { src=>delay_slot, dst=>jmp } 
					     )
						  strategy2 ();
					     else
						  scan (
                                                      body,
                                                      [],
                                                      0,
						      [make_candidate1 (eliminate_nop jmp, delay_slot)]
                                                  );
					     fi;

					 _   =>
                                             strategy2 ();
				    esac

				# Use the first instruction in the target block to fill
				# the delay slot.
				# BUG FIX: note this is unsafe if this first instruction
				# is also used to fill the delay slot in the target block!  

				also
				fun strategy2 ()
				    =
				    case (n_on, find_target (id, next))
				      
					 (d::D_TAKEN, THE (delay_slot, label))
					     => 
					     if (not (d::delay_slot_candidate { jmp,
								   delay_slot } ) or
					       d::conflict { src=>delay_slot, dst=>jmp } 
                                             )

					          strategy3();
					     else
                                                  scan (body,[], 0, [make_candidate2 (eliminate_nop jmp, delay_slot, label)]);
					     fi;

					 _   =>
                                             strategy3 ();
				    esac


				# If nop is on and if the delay slot is only active on
				# the fallsthru branch, then turn nullify on and eliminate
				# the delay slot

				also
				fun strategy3 ()
				    =
				    scan (eliminate_nop (jmp) ! body,[], 0,[]) 

				also
				fun eliminate_nop (jmp)
				    = 
				    case (nop, n_on)
				      
					 (TRUE, (d::D_FALLTHRU | d::D_NONE))
					     =>
					     d::enable_delay_slot { n=>TRUE, nop=>FALSE, instruction=>jmp };

					 _   =>
                                             jmp;
				    esac;

				strategy1();
			    }

			also
			fun process (instrs, others)
			    =
			    {   fun align_it (chunks)
				    = 
				    case *align
				      
					 NULL  =>  chunks;
					 THE p =>  PSEUDO (p) ! chunks;
				    esac;

				code
				    =
				    case instrs
				      
					  [] => [];

					  jmp ! body
					      => 
					      case (instruction_properties::instruction_kind  jmp)
					        
						   instruction_properties::IK_JUMP
						       =>
						       fit_delay_slot (jmp, body);

						   _   =>
                                                       scan (instrs, [], 0, []);
					      esac;
				    esac;

				align_it
				    (map LABEL *labels @
				       CODE (a::get (label_map, id), code) ! others);

			    };

			    process (*instructions, compress rest);
		     };
	    end;			# fun compress

	    my control_flow_graph::INFO { data, ... }
                =
                graph.graph_info;

	    block_order (blocks);
	    enter_labels (blocks);

	    cluster_list :=  CLUSTER { comp=>compress blocks } ! *cluster_list;
	    data_list    :=  *data @ *data_list;
	};							# fun bbsched 




    fun finish ()
	=
	{   fun labels (PSEUDO p_op ! rest, loc)
                    => 
		    {   p::adjust_labels (p_op, loc);
                        labels (rest, loc+p::size_of (p_op, loc));
                    };

	        labels (LABEL lab ! rest, loc)
                    => 
		    {   label::set_addr (lab, loc);
                        labels (rest, loc);
                    };

	        labels (CODE (lab, code) ! rest, loc)
                    =>
                    {   fun size (FIXED { size, ... } ) =>  size;
			    size (SDI   { size, ... } ) =>  *size;

			    size (BRANCH    { instruction, ... } ) =>  size_list (instruction, 0);
			    size (DELAYSLOT { instruction, ... } ) =>  size_list (instruction, 0);

			    size (CANDIDATE { old_instructions, new_instructions, fill_slot, ... } )
                                =>
			        size_list (if *fill_slot  new_instructions; else old_instructions;fi, 0);
			 end 

			 also
                         fun size_list ([], n)
                                 =>
                                 n;

			     size_list (code ! rest, n)
                                 =>
                                 size_list (rest, size code + n);
                         end;

			 label::set_addr (lab, loc+4);

		         labels (rest, size_list (code, loc));
		    };

	        labels ([], loc)
                    =>
                    loc;
            end;

	    fun init_labels clusters
                = 
	        list::fold_left 
		    (fn (CLUSTER { comp }, loc) =  labels (comp, loc))
                    0
                    clusters;


	    delay_slot_bytes
                =
                d::delay_slot_bytes;

	    /* 
	       Suppose we have:

		    u
		    jmp L1
		    nop
		...
		L1: i
		    j
		    k

		I insert a fake label L2:

		L1: i
		L2: j
		    k

		L2 is the label in CODE (label, code).

		If instruction u cannot be put into the delay slot of jmp L1 I try
		to put i into the delay slot of L1.  This creates code like this:

		     u 
		     jmp L2
		     i
		...
		L1:  i
		L2:  j
		     k
	     -- Allen Leung
	    */

	    fun adjust (CLUSTER { comp, ... }, pos, changed)
		= 
		{   fun scan (PSEUDO p_op ! rest, pos, changed)
                            =>
			    {   chgd =  p::adjust_labels (p_op, pos);

				scan (rest, pos+p::size_of (p_op, pos), changed or chgd);
			    };

			scan (LABEL lab ! rest, pos, changed)
                            => 
			    if   (label::addr_of (lab) == pos)
                                
                                 scan (rest, pos, changed);
			    else
                                 label::set_addr (lab, pos);
                                 scan (rest, pos, TRUE);
                            fi;

			scan (CODE (lab, code) ! rest, pos, changed)
                            =>
                            {   my (new_pos, changed)
                                    =
                                    do_code (code, pos, changed);

				if   (label::addr_of (lab) == pos+4)
                                    
				     scan (rest, new_pos, changed);
				else
                                     label::set_addr (lab, pos+4);
                                     scan (rest, new_pos, TRUE);
                                fi;
			    };

			scan([], pos, changed)
                            =>
                            (pos, changed);
		    end 

		    also
                    fun do_code ([], pos, changed)
                            =>
                            (pos, changed);

		        do_code (code ! rest, pos, changed)
			    =>
			    case code
                              
			         FIXED { size, ... }
                                     =>
                                     do_code (rest, pos+size, changed);

				 SDI { size, instruction }
				     =>
				     {   new_size = j::sdi_size (instruction, label::addr_of, pos);

				         if   (new_size <= *size)
                                              
					      do_code (rest,*size + pos, changed);
					 else
                                              size := new_size;
                                              do_code (rest, new_size+pos, TRUE);
                                         fi;
				     };

				 DELAYSLOT { instruction, fill_slot, ... }
                                     => 
				     {   my (new_pos, changed)
                                             =
                                             do_code (instruction, pos, changed);

				         do_code (
                                             rest,
                                             new_pos,

					     if   (new_pos - pos  !=  delay_slot_bytes)
                                                  
					          fill_slot := FALSE;
                                                  TRUE;
                                             else
                                                  changed;
                                             fi
                                         );
				     };

				 BRANCH { instruction, branch_size, fill_slot, ... }
                                     => 
				     {   my (new_pos, changed)
                                             =
                                             do_code (instruction, pos, changed);

				         do_code (
                                             rest,
                                             new_pos,

					     if   (new_pos - pos   !=   branch_size)
                                                 
					          fill_slot := FALSE;
                                                  TRUE;
                                             else
                                                  changed;
                                             fi
                                         );
				    };

				 CANDIDATE { old_instructions, new_instructions, fill_slot, ... }
                                     =>
				     do_code(
                                         if   *fill_slot      new_instructions;
                                                           else   old_instructions;  fi
                                         @ rest,

					 pos,
                                         changed
                                     );
                            esac;
                    end;

		    scan (comp, pos, changed);
		};					# fun adjust

	    fun adjust_labels clusters
		=
		list::fold_left  f  (0, FALSE)  clusters
                where
		    fun f (cl, (pos, chgd))
			=
			adjust (cl, pos, chgd);
		end;

	    fun fixpoint zl i
		=
		{   my (size, changed)
                        =
                        adjust_labels  zl;

		    changed  ??  fixpoint zl (i+1)
		             ::  size;
		};

	    dump_control_flow_graph_after_span_dependent_phase
                =
                low_code_control::make_bool (
                    "dump_control_flow_graph_after_span_dependent_phase",
		    "whether flow graph is shown after spandep phase"
                );

	    fun emit_all_clusters
		 (e::instruction_stream::STREAM { define_local_label, emit_pseudo_op, emit, begin_cluster, ... } ) 
		   size compressed
		=
		{   fun emit_cluster (CLUSTER { comp }, loc)
			= 
			{   emit_instrs = apply emit; 

			    fun nops 0 => ();

				nops n => if   (n < 0)
					      
					       error "nops";
					  else
					       emit (instruction_properties::nop());
					       nops (n - 4);
					  fi;
			    end;

			    fun process (PSEUDO p_op, loc)
				    =>
				    {   emit_pseudo_op  p_op;
					loc+p::size_of (p_op, loc);
				    };

				process (LABEL lab, loc)
				    => 
				    {   address = label::addr_of lab;

					if   (address == loc)  define_local_label lab; loc;
					elif (address >  loc)  nops (address-loc);  define_local_label lab;  address;
					else                   error "label";
                                        fi;
				    };

			       process (CODE (lab, code), loc)
				   => 
				   {   fun e (FIXED { instructions, size, ... }, loc)
                                               => 
					       {   emit_instrs  instructions;
                                                   loc + size;
                                               };

					   e (SDI { size, instruction }, loc)
                                               => 
					       {   emit_instrs (j::expand (instruction, *size, loc));
                                                   *size + loc;
                                               };

					   e (BRANCH    { instruction, ... }, loc) =>   fold_left  e  loc  instruction;
					   e (DELAYSLOT { instruction, ... }, loc) =>   fold_left  e  loc  instruction;

					   e (CANDIDATE { new_instructions, old_instructions, fill_slot, ... }, loc)
                                               =>
					       fold_left
                                                   e
                                                   loc

                                                   if   *fill_slot      new_instructions;
                                                                     else   old_instructions;   fi;
                                       end;

				       fold_left e loc code;
				   };
			    end;

			    fold_left process loc comp;
			};

		   begin_cluster size;

		   fold_left  emit_cluster  0  compressed;
	       };


	    #  The dataList is in reverse order and the clusters are in reverse 

	    fun data_cluster ([],     acc) =>  CLUSTER { comp=>acc };
		data_cluster (d ! dl, acc) =>  data_cluster (dl, PSEUDO d ! acc);
	    end;

	    compressed
                = 
	        reverse (data_cluster (*data_list, []) ! *cluster_list)
                before
                    clean_up ();

	    init_labels (compressed);
	    emit_all_clusters (e::make_stream []) (fixpoint compressed 0) compressed;

	    if   (*dump_control_flow_graph_after_span_dependent_phase)
                
		 emit_all_clusters (asm::make_stream []) 0 compressed;
                 ();
	    fi;

	    ();
	};			# fun finish
};				# generic package  span_dependency_resolution


