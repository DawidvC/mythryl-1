## fps-preoptimization-transform-g.pkg 

# Compiled by:
#     src/lib/compiler/core.make6


# In this file we handle the initial FPS
# transforms performed immediately after
# conversion from A-Normal to FPS form,
# as set-up our core FPS optimizations.
#
# I'm not sure specifically what is supposed to
# be happening here.  It seems to involve some
# type munging.
#
# We get invoked from the
#
#     src/lib/compiler/upper/main/backend-g.pkg
#
# function
#
#     translate_anormal_to_binary()
#
# which uses us in the transform sequence
#
#     translate_anormal_to_fps()
#     fps_preoptimization_transform()
#     fps_optional_optimizations()

# For context, see the comments in
#
#     src/lib/compiler/upper/highcode/highcode.api


# Our runtime invocation is from
#
#     src/lib/compiler/upper/main/backend-g.pkg


api Fps_Preoptimization_Transform {

   fps_preoptimization_transform:  fate_passing_style::Function
           -> fate_passing_style::Function;
};

# We are invoked from:
#
#     src/lib/compiler/upper/main/backend-g.pkg

		 								# Machine_Properties	is from   src/lib/compiler/codegen/main/machine-properties.api
generic package fps_preoptimization_transform_g (

    machine_properties:  Machine_Properties				# Typically 			  src/lib/compiler/codegen/x86/x86-machine-properties.pkg

)
: (weak) Fps_Preoptimization_Transform

{
    stipulate

        include fate_passing_style; 

	package lv = highcode_var;						# highcode_var		is from   src/lib/compiler/upper/highcode/highcode-var.pkg

    herein

	fun bug s = error_message::impossible ("Fps_Preoptimization_Transform: " + s);
	fun ident x = x;
	make_var = lv::make_highcode_variable;

	###########################################################################
	#                     TOP OF THE MAIN FUNCTION                            #
	###########################################################################

	# We get invoked from the
	#
        #     src/lib/compiler/upper/main/backend-g.pkg
	#
        # function
	#
        #     translate_anormal_to_binary()
	#
        # which uses us in the transform sequence
        #
        #     translate_anormal_to_fps()
        #     fps_preoptimization_transform()
        #     fps_optional_optimizations()
        #
	fun fps_preoptimization_transform fe
	    =
	    functrans fe
            where
	        unboxedfloat =  machine_properties::unboxed_floats;
		untaggedint  =  machine_properties::untagged_int;

		exception CPSSUBST;

		stipulate
		    my mmm:   int_hash_table::Hash_Table( Value ) = int_hash_table::make_table (32, CPSSUBST);
		herein
		    addvl = int_hash_table::set mmm; 
		    fun mapvl v = ((int_hash_table::get  mmm  v) except CPSSUBST = VAR v);
		end;

		exception CTYMAP;

		stipulate
		    my ct:   int_hash_table::Hash_Table( Fps_Type )
                         =   int_hash_table::make_table (32, CTYMAP);
		herein
		    addty = int_hash_table::set  ct;
		    getty = int_hash_table::get  ct;
		end;

		fun grabty (VAR   v) =>  ((getty v) except _ = bogt);
		    grabty (REAL  _) =>  FLTT;
		    grabty (INT   _) =>  INTT;
		    grabty (INT32 _) =>  INT32T;
		    grabty _         =>  bogt;
		end;


		fun select (i, u, x, ct, ce)
                    =
                    SELECT (i, u, x, ct, ce);

		fun record (k, ul, w, ce)
                    =
                    RECORD (k, ul, w, ce);


		# Wrappers around floats and ints are now dealt with in the convert phase 

#		fun unwrapfloat (u, x, ce) = PURE (p::funwrap,[u], x, FLTT, ce)
#		fun wrapfloat (u, x, ce) = PURE (p::fwrap,[u], x, bogt, ce)
#		fun unwrapint (u, x, ce) = PURE (p::iunwrap,[u], x, INTT, ce)
#		fun wrapint (u, x, ce) = PURE (p::iwrap,[u], x, bogt, ce)
#		fun unwrapint32 (u, x, ce) = PURE (p::i32unwrap,[u], x, INT32T, ce)
#		fun wrapint32 (u, x, ce) = PURE (p::i32wrap,[u], x, bogt, ce)
#
#		fun select (i, u, x, ct, ce) =
#		  case (ct, unboxedfloat, untaggedint)
#		   of (FLTT, TRUE, _) => let v = make_var()
#					in SELECT (i, u, v, bogt, unwrapfloat (VAR v, x, ce))
#				       end
#		    | (INTT, _, TRUE) => let v = make_var()
#					in SELECT (i, u, v, bogt, unwrapint (VAR v, x, ce))
#				       end
#		    | (INT32T, _, _)  => let v = make_var()
#					in SELECT (i, u, v, bogt, unwrapint32 (VAR v, x, ce))
#				       end
#		    | _ => SELECT (i, u, x, ct, ce)
#
#		fun record (k, ul, w, ce) =
#		  let fun h ((FLTT, u), (l, h)) = 
#			     if unboxedfloat then 
#			      (let v = make_var()
#				in ((VAR v, OFFp 0) ! l, fn ce => wrapfloat(#1 u, v, h (ce)))
#			       end)
#			     else (u ! l, h)
#			| h((INTT, u), (l, h)) = 
#			     if untaggedint then 
#			      (let v = make_var()
#				in ((VAR v, OFFp 0) ! l, fn ce => wrapint(#1 u, v, h (ce)))
#			       end)
#			     else (u ! l, h)
#			| h((INT32T, u), (l, h)) = 
#			     let v = make_var()
#			     in ((VAR v, OFFp 0) ! l, fn ce => wrapint32(#1 u, v, h (ce)))
#			     end
#			| h((_, u), (l, h)) = (u ! l, h)
#
#		      info = map (fn (u as (v, _)) => (grabty v, u)) ul
#		      my (nul, header) = fold h info ([], ident)
#		   in header (RECORD (k, nul, w, ce))
#		  end



		# ************************************************************************
		#          UTILITY FUNCTIONS THAT DO THE ARGUMENT SPILLING               *
		# ************************************************************************

		stipulate

		    # arg_spill(), spill_in() and spill_out()
		    # are private support functions for
		    # make_arg_in and make_arg_out:	

		    # The following figures must be consistent with the choices made
		    # in the closure or spilling phases:

		    stipulate

			fpnum = int::min (machine_properties::num_float_regs - 2, machine_properties::num_arg_regs);
			nregs = machine_properties::num_regs - machine_properties::num_callee_saves;
			gpnum = int::min (nregs - 3, machine_properties::num_arg_regs);

		    herein

			fun arg_spill (args, ctys)
			    = 
			    {   fun h ([], [], ngp, nfp, ovs, ots, [], [], [])    => NULL;
				    h([], [], ngp, nfp, ovs, ots, [x], [_], [])  => NULL;

				    h([], [], ngp, nfp, ovs, ots, gvs, gts, fvs)
					=> 
					THE (reverse ovs, reverse ots, reverse gvs, reverse gts, reverse fvs);

				    h (x ! xs, ct ! cts, ngp, nfp, ovs, ots, gvs, gts, fvs)
					=> 
					case ct 

					    FLTT => if (nfp > 0)   h (xs, cts, ngp, nfp - 1, x ! ovs, ct ! ots, gvs, gts,     fvs);
						    else           h (xs, cts, ngp, nfp,         ovs,      ots, gvs, gts, x ! fvs);
						    fi;

					    _    => if (ngp > 0)   h (xs, cts, ngp - 1, nfp, x ! ovs, ct ! ots,     gvs,      gts, fvs);
						    else           h (xs, cts, ngp,     nfp,     ovs,      ots, x ! gvs, ct ! gts, fvs);
						    fi;
					esac;

				    h _ =>
					bug "unexpected case in arg_spill";
				end;

				n = length args;

				if (n > fpnum
				or  n > gpnum) 
				    h (args, ctys, gpnum, fpnum, [], [], [], [], []);
				else NULL;
				fi;
			    };					# fun arg_spill 
		    end;						# stipulate

		    fun spill_in (origargs, origctys, spgvars, spgctys, spfvars)
			= 
			{   my (fhdr, spgvars, spgctys)
				= 
				case spfvars

				    [] => (ident, spgvars, spgctys);

				    _  => {   v = make_var();
					      vs = map (fn x =  (x, OFFP 0)) spfvars;
					      ct = PTRT (FPT (length vs));
					      fh = fn e =  RECORD (RK_FBLOCK, vs, v, e);
					      (fh, (VAR v) ! spgvars, ct ! spgctys);
					 };
				esac;

			    my (spgv, ghdr)
				= 
				case spgvars

				    [] => (NULL, fhdr);

				   [x] => (THE x, fhdr);

				    _  => {   v = make_var();

					      vs = map (fn x = (x, OFFP 0)) spgvars;

					      ( THE (VAR v),
						fn e = fhdr (RECORD (RK_RECORD, vs, v, e))
					      );
					 };
				esac;

			    case spgv
				 THE x =>  THE (origargs @ [x], ghdr);
				 NULL  =>  NULL;
			    esac;
			};

		    fun spill_out (origargs, origctys, spgvars, spgctys, spfvars)
			=
			{   my (spfv, fhdr, spgvars, spgctys)
				 = 
				 case spfvars

				    [] => (NULL, ident, spgvars, spgctys);

				   _ => {   v = make_var(); 
					    u = VAR v;

					    fun g (sv, (i, header))
						= 
						(i+1, fn e = header (SELECT (i, u, sv, FLTT, e)));

					     my (n, fh) = fold_left g (0, ident) spfvars;

					     ct = PTRT (FPT n);

					     (THE v, fh, v ! spgvars, ct ! spgctys);
					 };
				 esac;

			    my (spgv, ghdr)
				= 
			       case (spgvars, spgctys)

				    ([], _)      =>  (NULL, fhdr);
				    ([x], t ! _) =>  (THE (x, t), fhdr);

				     _ => {   v = make_var();
					      u = VAR v;

					      fun g (sv, st, (i, header))
						  = 
						  (i+1, fn e =>header (SELECT (i, u, sv, st, e)); end );

					      my (n, gh)
						  =
						  paired_lists::fold_left g (0, fhdr) (spgvars, spgctys);
					      ct = PTRT (RPT n);

					      (THE (v, ct), gh);
					   };
			       esac;

			    case spgv

				 THE (x, t) => THE (origargs @ [x], origctys @ [t], ghdr);
				 NULL       => NULL;
			    esac;
			};

		herein


		    #  make_arg_in:  List( value ) -> Null_Or( cexp -> cexp * List( value ) )
		    #
		    fun make_arg_in (args:  List( Value ))
			= 
			{   ctys = map grabty args;

			    case (arg_spill (args, ctys))

				 THE xx => spill_in xx;
				 NULL   => NULL;
			    esac;
			};

		    #  make_arg_out:  List( Highcode_Variable ) ->  Null_Or( List( Highcode_Variable ) * List( cty ) * cexp -> cexp )
		    #
		    fun make_arg_out args
			= 
			{   ctys = map getty args;

			    case (arg_spill (args, ctys))

				 THE xx => spill_out xx;
				 NULL   => NULL;
			    esac;
			};
		end;			# stipulate

		###########################################################################
		#               MAIN FUNCTIONS THAT TRANSLATE FPS CODE                    #
		###########################################################################

		fun cexptrans (ce)
		    = 
		    case ce 
		      
		       RECORD (k, vl, w, ce)
                           =>
                           record (k, map rectrans vl, w, cexptrans ce);

		       SELECT (i, v, w, t, ce)
                           => 
			   {   addty (w, t);
			       v' = vtrans v;
			       ce' = cexptrans ce;
			       select (i, v', w, getty w, ce');
			   };

		       OFFSET (i, v, w, ce)
                           =>
                           OFFSET (i, vtrans v, w, cexptrans ce);

		       APPLY (v, vl)
                           => 
			   case (make_arg_in vl)
			         THE (nvl, header) => cexptrans (header (APPLY (v, nvl)));
				 NULL =>  APPLY (vtrans v, map vtrans vl);
                           esac;

		       MUTUALLY_RECURSIVE_FNS (l, ce)
                           =>
                           MUTUALLY_RECURSIVE_FNS (map functrans l, cexptrans ce);

		       SWITCH (v, c, l)
                           =>
                           SWITCH (vtrans v, c, map cexptrans l);

		       LOOKER (p, vl, w, t, ce)
                           => 
			   {   addty (w, t);
			       vl' = map vtrans vl;
			       ce' = cexptrans ce;
			       LOOKER (p, vl', w, getty w, ce');
			   };

		       SETTER (p, vl, ce)
                           => 
			   SETTER (p, map vtrans vl, cexptrans ce);

		       ARITH (p, vl, w, t, ce)
                           => 
			   { addty (w, t); ARITH (p, map vtrans vl, w, t, cexptrans ce);};

		       RAW_C_CALL (k, l, p, vl, wtl, ce)
                           =>
			   {   apply addty wtl;
			       RAW_C_CALL (k, l, p, map vtrans vl, wtl, cexptrans ce);
                           };


		    /*** this special case is a temporary hack; ask ZHONG for details XXX BUGGO FIXME */ 
		  /*
		      | PURE (p::WRAP,[u], w, t as PTRT (FPT _), ce) => 
			    (addty (w, t); PURE (p::wrap, [vtrans u], w, t, cexptrans ce))
		      | PURE (p::UNWRAP,[u], w, t as PTRT (FPT _), ce) => 
			    (addty (w, t); PURE (p::unwrap, [vtrans u], w, t, cexptrans ce))
		  */

		       PURE (p::WRAP,[u], w, t, ce)
                           => 
			   { addvl (w, vtrans u); cexptrans ce;};

		       PURE (p::UNWRAP,[u], w, t, ce)
                           => 
			   {   case u    VAR z => addty (z, t);
				         _     => ();
                               esac;

			       addvl (w, vtrans u); cexptrans ce;
                           }; 

		       PURE (p::FWRAP,[u], w, t, ce)
                           => 
			   if unboxedfloat
			        addty (w, t); PURE (p::FWRAP,[vtrans u], w, t, cexptrans ce);
			   else addvl (w, vtrans u); cexptrans ce;
                           fi;

		       PURE (p::FUNWRAP,[u], w, t, ce)
                           => 
			   if unboxedfloat 
			         addty (w, t); PURE (p::FUNWRAP,[vtrans u], w, t, cexptrans ce);
			   else  addvl (w, vtrans u); cexptrans ce;
                           fi;

		       PURE (p::IWRAP,[u], w, t, ce)
                           => 
			   if untaggedint
			          addty (w, t); PURE (p::IWRAP,[vtrans u], w, t, cexptrans ce);
			   else   addvl (w, vtrans u); cexptrans ce;
                           fi;

		       PURE (p::IUNWRAP,[u], w, t, ce)
                           => 
			   if untaggedint
			         addty (w, t); PURE (p::IUNWRAP,[vtrans u], w, t, cexptrans ce);
			   else  addvl (w, vtrans u); cexptrans ce;
                           fi;

		       PURE (p::I32WRAP,[u], w, t, ce)
                           =>
			   { addty (w, t); PURE (p::I32WRAP,[vtrans u], w, t, cexptrans ce);};

		       PURE (p::I32UNWRAP,[u], w, t, ce)
                           =>
			   { addty (w, t); PURE (p::I32UNWRAP,[vtrans u], w, t, cexptrans ce);};

		  /*
		      | PURE (p::CAST,[u], w, _, ce) =>
			    (addvl (w, vtrans u); cexptrans ce)
		  */

		       PURE (p::GETCON,[u], w, t, ce)
                           =>
			   { addty (w, t); select (0, vtrans u, w, t, cexptrans ce);};

		       PURE (p::GETEXN,[u], w, t, ce)
                           =>
			   { addty (w, t); select (0, vtrans u, w, t, cexptrans ce);};

		       PURE (p, vl, w, t, ce)
                           => 
			   {   addty (w, t);
			       vl' = map vtrans vl;
			       ce' = cexptrans ce;
			       PURE (p, vl', w, getty w, ce');
			   };

		       BRANCH (p, vl, c, e1, e2)
                           => 
			   BRANCH (p, map vtrans vl, c, cexptrans e1, cexptrans e2);
                    esac

		also
                fun functrans (fk, v, args, cl, ce)
		    = 
		    {   paired_lists::apply addty (args, cl);
			ce' = cexptrans ce;

			case (make_arg_out args)
			  
			     THE (nargs, nctys, fhdr)
				 =>
				 (fk, v, nargs, nctys, fhdr ce');

			     NULL
				 =>
				 (fk, v, args, cl, ce');
			esac;
		    }

		also
		fun rectrans (v, acp)
		    =
		    (vtrans v, acp)

		also
		fun vtrans (VAR v) =>  mapvl v;
		    vtrans u => u;
		end;


	    end;		#  fun fps_preoptimization_transform
    end;			#  toplevel stipulate 
};				#  package fps_preoptimization_transform_g 



## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
