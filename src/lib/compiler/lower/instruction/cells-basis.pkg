## cells-basis.pkg
#

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# Description of cell and other updatable cells.
# 
# -- Allen Leung.


###             "At Group L, Stoffel oversees six first-rate programmers,
###              a managerial challenge roughly comparable to herding cats."
###
###                                -- Washington Post Magazine, 1985



# Basic utilities on cells

package cells_basis: (weak)  Cells_Basis {		# Cells_Basis	is from   src/lib/compiler/lower/instruction/cells-basis.api


    Cellkind_Info
        =
        INFO { name:      String,
               nickname:  String
             };

    Size_In_Bits = Int;		# width in bits 
    Cell_Id      = Int;		# unique cell identifier 
    Register_Id  = Int;		# encoding of phsyical registers 
    Register_Num = Int;

    # Cellkind denote the types of storage cells.
    # This definition is further augumented by architecture specific
    # cells descriptions.  Type cellkind is an equality type.
    #
    Cellkind
      = REGISTER		# General purpose register 
      | FLOAT_REGISTER		# Floating point register 
      | CONDITION_CODES		# Condition code register 

      | RAM_CELL		# Memory.
      | CONTROL_DEPENDENCY	# Control dependence 

      | MISC_KIND  Ref( Cellkind_Info )		#  Client defined 
      ;

    # This data package is automatically generated
    # by MDGen to describe a cellkind.
    #
    Cellkind_Desc
        =
        DESC 
        { kind:              Cellkind,
	  counter:           Ref( Int ),
	  dedicated:	   Ref( Int ),
	     # It is sometimes desirable to allocate dedicated 
	     # pseudo registers that will get rewritten to something else,
	     # e.g., the virtual frame pointer. 
	     # Since these registers are never assigned a register  by 
	     # the register allocator, a limited number of these kinds 
	     # of registers may be generated.

	  low:               Int,
	  high:              Int,
	  to_string:         Register_Id -> String,
	  to_string_with_size:  (Register_Id, Size_In_Bits) -> String,
	  default_values:     List ((Register_Id, Int)),
	  physical_regs:      Ref( rw_vector::Rw_Vector( Cell ) ),
	  zero_reg:           Null_Or( Register_Id )
        }

    also
    Cell
       =
       CELL { id:              Cell_Id,
	      ref_color:       Ref( Cell_Color ),
	      desc:            Cellkind_Desc,
	      ref_notes:  Ref( note::Notes )
	    }

    also
    Cell_Color
	= MACHINE  Register_Id
	| PSEUDO
	| ALIASED  Cell
	| SPILLED;

    array0
	=
	rw_vector::tabulate (0, fn _ => raise exception MATCH; end ) : rw_vector::Rw_Vector( Cell );

    fun error msg
	=
	lowcode_error_message::error ("CellBasis", msg);

    i2s =   int::to_string; 

    fun cellkind_to_string REGISTER        => "REGISTER";
	cellkind_to_string FLOAT_REGISTER  => "FLOAT_REGISTER";
	cellkind_to_string CONDITION_CODES => "CONDITION_CODES";
	cellkind_to_string RAM_CELL        => "RAM_CELL";
	cellkind_to_string CONTROL_DEPENDENCY => "CONTROL_DEPENDENCY";
	cellkind_to_string (MISC_KIND (REF (INFO { name, ... } ))) => name;
    end;

    fun cellkind_to_nickname REGISTER        => "r";
	cellkind_to_nickname FLOAT_REGISTER  => "f";
	cellkind_to_nickname CONDITION_CODES => "cc";
	cellkind_to_nickname RAM_CELL        => "m";
	cellkind_to_nickname CONTROL_DEPENDENCY            => "ctrl";
	cellkind_to_nickname (MISC_KIND (REF (INFO { nickname, ... } ))) => nickname;
    end;

    fun new_cell_kind { name=>"REGISTER",        ... } => REGISTER;
	new_cell_kind { name=>"FLOAT_REGISTER",  ... } => FLOAT_REGISTER;
	new_cell_kind { name=>"CONDITION_CODES", ... } => CONDITION_CODES;
	new_cell_kind { name=>"RAM_CELL",        ... } => RAM_CELL;
	new_cell_kind { name=>"CONTROL_DEPENDENCY",            ... } => CONTROL_DEPENDENCY;
	new_cell_kind { name, nickname } => 
	   MISC_KIND (REF (INFO { name, nickname } ));
    end;

    fun chase (CELL { ref_color => REF (ALIASED c), ... } ) => chase (c);
	chase c => c;
    end;

    fun register_id (CELL { ref_color =>REF (ALIASED c), ... } ) => register_id (c);
	register_id (CELL { ref_color=>REF (MACHINE r), ... } ) => r;
	register_id (CELL { ref_color=>REF (SPILLED), ... } ) => -1;
	register_id (CELL { ref_color=>REF (PSEUDO), id, ... } ) => id;
    end;  

    fun register_num (CELL { ref_color=>REF (ALIASED c), ... } ) => register_num (c);
	register_num (CELL { ref_color=>REF (MACHINE r), desc=>DESC { low, ... }, ... } ) => r-low;
	register_num (CELL { ref_color=>REF SPILLED, id, ... } ) => -1;
	register_num (CELL { ref_color=>REF PSEUDO, id, ... } ) => id;
    end;

    fun physical_register_num (CELL { ref_color=>REF (ALIASED c), ... } )
	    => 
	    physical_register_num (c);

	physical_register_num (CELL { ref_color=>REF (MACHINE r), 
			     desc=>DESC { low, ... }, ... } )
	    =>
	    r-low;

	physical_register_num (CELL { ref_color=>REF SPILLED, id, ... } )
	    => 
	    error("physicalRegisterNum: SPILLED: " + i2s id);

	physical_register_num (CELL { ref_color=>REF PSEUDO, id, ... } )
	    => 
	    error("physicalRegisterNum: PSEUDO: " + i2s id);
    end;


    fun cell_id (CELL { id, ... } ) = id;

    fun hash_cell (CELL { id, ... } ) =   unt::from_int id;
    fun hash_color c                 =   unt::from_int (register_id c);

    fun same_descriptor (DESC { counter=>x, ... }, DESC { counter=>y, ... } )
	=
	x == y;

    fun desc (CELL { desc, ... } )   =   desc; 
    fun same_cell (c1, c2)          =   cell_id (c1) == cell_id (c2);
    fun same_kind (c1, c2)          =   same_descriptor (desc c1, desc c2);

    fun same_aliased_cell (c1, c2)  =   same_cell (chase c1, chase c2);
    fun same_color (c1, c2)         =   register_id c1 == register_id c2;
    fun compare_color (c1, c2)      =   int::compare (register_id c1, register_id c2);

    fun cellkind (CELL { desc=>DESC { kind, ... }, ... } )
	=
	kind;

    fun annotations (CELL { ref_notes, ... } )
	=
	ref_notes;

    fun set_alias { from, to }
	= 
	{   my CELL { id, ref_color, desc=>DESC { kind, ... }, ... }
		=
		chase from;

	    my to as CELL { ref_color=>col_to, ... }
		=
	       chase to;

	    if (ref_color != col_to)
	    		#  prevent self-loops 
		 if   (id < 0)
		     
		      error "setAlias: constant";
		 else
		      case (*ref_color, kind) 
		        
			   (PSEUDO, _) =>  ref_color := ALIASED to;
			   _           =>  error "setAlias: non-pseudo";
		      esac;
	    fi;  fi;
	};

    fun is_const (CELL { id, ... } )
	=
	id < 0; 



    # Pretty printing of cells
 
    fun to_string (CELL { ref_color=>REF (ALIASED c), ... } )
	    =>
	    to_string (c);

	to_string (c as CELL { desc=>DESC { to_string, ... }, ... } )
	    =>
	    to_string (register_num c);
    end;

    fun to_string_with_size (c as CELL { desc=>DESC { to_string_with_size, ... }, ... }, size)
	= 
	to_string_with_size (register_num c, size); 

    fun cnv (r, low, high)
	=
	if   (low <= r and r <= high   )   r - low;
				      else   r;        fi;

    fun show (DESC { to_string, low, high, ... } ) r
	=
	to_string (cnv (r, low, high));

    fun show_with_size (DESC { to_string_with_size, low, high, ... } ) (r, size)
	= 
	to_string_with_size (cnv (r, low, high), size);

    package sorted_cells {

	Sorted_Cells = List( Cell );

	empty = [];

	size =   list::length; 

	fun enter (cell, l)
	    =
	    f l
	    where 
		c =   register_id cell;

		fun f [] => [cell];

		   f (l as (h ! t))
			=> 
			{   ch =   register_id h;

			    if   (c < ch)  cell ! l;
			    elif (c > ch)  h ! f t;
			    else l;
			    fi;
			};
		 end;
	    end;

	fun member (x, l)
	    = 
	    {   x =   register_id x;

		list::exists
		    (fn y =   register_id y == x)
		    l;
	    };

	fun rmv (cell, l)
	    =
	    f l
	    where
		c =   register_id cell;

		fun f [] => [];

		    f (l as (h ! t))
			=> 
			{   ch =   register_id h;

			    if   (c == ch)   t; 
			    elif (c < ch)    l;
			    else             h ! f l;
			    fi;
			};
		end;
	    end;


	fun uniq (cells)
	    =
	    list::fold_left enter [] (map chase cells);


	fun difference ([], _)  =>   [];
	    difference (l, []) =>   l;

	    difference (l1 as x ! xs, l2 as y ! ys)
		=> 
		{   cx =   register_id x;
		    cy =   register_id y;

		    if   (cx == cy)        difference (xs, ys);
		    elif (cx <  cy)    x ! difference (xs, l2);
		    else                   difference (l1, ys);
		    fi;
		};
	end;

	fun union (a, []) =>   a;
	    union([], a)  =>   a;

	    union (l1 as x ! xs, l2 as y ! ys)
		 => 
		 {   cx =   register_id x;
		     cy =   register_id y;

		     if   (cx == cy)

			  x ! union (xs, ys);
		     else
			  if   (cx < cy   )   x ! union (xs, l2);
					 else   y ! union (l1, ys);   fi;
		     fi;
		 };
	end;


	fun intersect (a, []) =>   [];
	    intersect([], a)  =>   [];

	    intersect (l1 as x ! xs, l2 as y ! ys)
		=> 
		{   cx =   register_id x;
		    cy =   register_id y;

		    if   (cx == cy)  x ! intersect (xs, ys);
		    elif (cx <  cy)      intersect (xs, l2);
		    else                 intersect (l1, ys);
		    fi;
		};
	end;


	fun not_eq ([], []) => FALSE;
	    not_eq([], l)  => TRUE;
	    not_eq(_, [])  => TRUE;

	    not_eq (x ! l1, y ! l2)
		 =>
		 register_id x  !=  register_id y
		 or
		 not_eq (l1, l2);
	end;

	fun eq ([], [])
		=>
		TRUE;

	    eq (x ! l1, y ! l2)
		=>
		register_id x == register_id y
		or
		eq (l1, l2);

	    eq(_, _)
		=>
		FALSE;
	end;

	fun return cs
	    =
	    cs;

	fun is_empty [] => TRUE;
	    is_empty _  => FALSE;
	end;

	fun empty_intersection (_, []) => TRUE;
	    empty_intersection([], _) => TRUE;

	    empty_intersection (l1 as x ! xs, l2 as y ! ys)
		=> 
		{   cx = register_id x;
		    cy = register_id y;

		    if   (cx == cy)

			 FALSE;
		    else
			 if (cx < cy)   empty_intersection (xs, l2);
			 else           empty_intersection (l1, ys);
			 fi;
		    fi;
		};
	end;

	fun non_empty_intersection (_, []) =>   FALSE;
	    non_empty_intersection([], _) =>   FALSE;

	    non_empty_intersection (l1 as x ! xs, l2 as y ! ys)
		=> 
		{   cx =   register_id x;
		    cy =   register_id y;

		    if   (cx == cy)

			 TRUE;
		    else
			 if (cx < cy)   non_empty_intersection (xs, l2);
			 else           non_empty_intersection (l1, ys);
			 fi;
		    fi;
		};
	end;
    };

									# monomorphic_hash_table_g	is from   src/lib/src/monomorphic-hash-table-g.pkg
    package hash_table
	= 
	monomorphic_hash_table_g (
            Hash_Key = Cell;
	    hash_value = hash_cell; 
	    same_key = same_cell;
        );

    package color_table
	= 
	monomorphic_hash_table_g (
            Hash_Key = Cell;
	    hash_value = hash_color; 
	    same_key = same_color;
        );

    package cell_set {

	Cellset
	    =
	    List( (Cellkind_Desc, List( Cell )) ); 

	empty =   [];


	fun same ( DESC { counter => c1, ... },
		   DESC { counter => c2, ... }
		 )
	    =
	    c1 == c2;


	fun desc_of (CELL { desc, ... } )
	    =
	    desc; 


	fun add (r, cellset: Cellset)
	    =
	    loop cellset
	    where
		k =   desc_of r;

		fun loop [] =>   [ (k, [r]) ];

		    loop ((x as (k', s)) ! cellset)
			=> 
			if   (same (k, k'))

			     (k', r ! s) ! cellset; 
			else
			      x ! loop cellset;
			fi;
		end;
	    end;


	fun rmv (r, cellset: Cellset)
	    =
	    loop cellset
	    where
		k =   desc_of r;
		c =   register_id r;

		fun filter []
			 =>
			 [];

		    filter (r ! rs)
			 =>
			 if   (register_id r == c)

			      filter rs; 
			 else
			      r ! filter rs;
			 fi;
		end;

		fun loop []
			=>
			[];

		    loop((x as (k', s)) ! cellset)
			=> 
			if   (same (k, k'))

			     (k', filter s) ! cellset;
			else
			     x ! loop cellset;
			fi;
		end;
	    end;


	fun get (k:  Cellkind_Desc)
	    =
	    loop
	    where
		fun loop ([] : Cellset)
			=>
			[];

		    loop ((x as (k', s)) ! cellset)
			=>
			if   (same (k, k'))

			     s;
			else
			     loop cellset;
			fi;
		end;
	    end;


	fun update (k:  Cellkind_Desc) (cellset: Cellset, s)
	    =
	    loop cellset
	    where
		fun loop []
			=>
			[ (k, s) ];

		    loop ((x as (k', _)) ! cellset)
			=>
			if   (same (k, k')   )   (k', s) ! cellset;
					    else   x !  loop cellset;   fi;
		end;
	    end;


	fun map { from, to } (cellset: Cellset)
	    =
	    loop cellset
	    where
		my CELL { desc=>k, ... }
		    =
		    from;

		cf =   register_id from;

		fun trans r
		    =
		    if   (register_id r == cf)
			 to;
		    else r;fi;

		fun loop [] => [];

		    loop((x as (k', s)) ! cellset)
			=> 
			if   (same (k, k'))

			     (k', list::map trans s) ! cellset; 
			else
			     x ! loop cellset;
			fi;
		end;
	    end;


	my to_cell_list:  Cellset -> List( Cell )
		       =  list::fold_right
			      (fn ((_, s), s') =  s @ s')
			      []; 


	# Prettyprint cellset:
	#
	fun print_set (f, set, s)
	    =
	    "{ "  !  loop (set, s)
	    where
		fun loop ([],  s) =>   "}" ! s;
		    loop ([x], s) =>   f (chase x) ! "}" ! s;

		    loop (x ! xs, s)
			 =>
			 f (chase x) ! " " ! loop (xs, s);
		end;
	    end;

	fun to_string' cellset
	    =
	    {   fun pr cellset
		    = 
		    {   fun loop ((DESC { kind, ... }, s) ! rest, sss)
				=>
				case s

				     [] => loop (rest, sss);

				     _  => cellkind_to_string kind
					   !
					   "="
					   !
					   print_set (
					       to_string, s, " "
					       !
					       loop (rest, sss)
					   );
				esac;


			    loop([], sss)
				=>
				sss;
			end;

			string::cat (loop (cellset, []));
		    };

		pr cellset;
	    };

	to_string =  to_string';

    }; #  package cell_set 


    # These annotations specify
    # definitions and uses for
    # a pseudo instruction:
    #
    exception DEF_USE  {   cellkind: Cellkind,
			     defs:     List( Cell ),
			     uses:     List( Cell )
			 };

    def_use
	=
	note::new' {

	    create    => DEF_USE,

	    get       => fn DEF_USE x =>  x;
                            other     =>  raise exception other;
                         end,

	    to_string => fn { cellkind, defs, uses }
                             =
			     "def_use" + cellkind_to_string cellkind
	};

    # Hack for generating memory aliasing cells 
    #
    mem_desc
	=  
	DESC {
	    kind                => RAM_CELL,
	    counter             => REF 0,
	    dedicated	        => REF 0,

	    low                 => 0,
	    high                => -1,

	    to_string           => fn m      =  "m" + i2s m,
	    to_string_with_size => fn (m, _) =  "m" + i2s m,

	    default_values      => [],
	    physical_regs       => REF array0,
	    zero_reg            => NULL
	};

    fun mem id
	=
	CELL {
	    id,
	    ref_notes => REF [],
	    desc           => mem_desc,
	    ref_color      => REF (MACHINE id)
	};

    array0
	=
	rw_vector::tabulate (0, fn _ = raise exception MATCH):   rw_vector::Rw_Vector( Cell );

};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
