# lib7-gctype.pkg

# Compiled by:
#     src/lib/compiler/core.make6

package smlgctype
: (weak)
Mythryl_Gc_Type					# Mythryl_Gc_Type		is from   src/lib/compiler/codegen/compile-fps/lib7-gctype.api
{
    package fps = fate_passing_style;		# fate_passing_style		is from   src/lib/compiler/upper/fps/fate-passing-style.pkg

    Some_Type = Int;
  
    Gctype
	= CONST   integer::Int                  # integer constant
	| NONREF  Ref( fps::Fps_Type )		# Non-reference value
	| GC_REF  Ref( fps::Fps_Type )		# A reference, pointer to a gc chunk
	| PLUS    (Some_Type, Gctype, Gctype)   # address arithmetic +
	| MINUS   (Some_Type, Gctype, Gctype)   # address arithmetic -
	| ALLOCPTR 
	| LIMITPTR 
	| BOT
	| TOP;

    const = CONST;
    bot   = BOT;
    top   = TOP;

    fun to_string BOT       => "bot";
	to_string TOP       => "top";
	to_string (CONST i) => integer::to_string i;

	to_string (NONREF (REF chunk))   => fps::cty_to_string chunk;
	to_string (GC_REF (REF chunk))   =>  fps::cty_to_string chunk;
	to_string (PLUS  (type, a, b)) => "(" + to_string a + "+" + to_string b + ")";
	to_string (MINUS (type, a, b)) => "(" + to_string a + "-" + to_string b + ")";

	to_string ALLOCPTR => "allocptr";
	to_string LIMITPTR => "limitptr";
    end;

    fun ==== (x: Gctype, y: Gctype)
	=
	x == y;

    fun join (BOT, x) => x;
	join (x, BOT) => x;
	join (TOP, x) => TOP;
	join (x, TOP) => TOP;
	join (x, y)   => x;
    end;  /* XXX */

    fun meet (BOT, x) => BOT; 
	meet (x, BOT) => BOT; 
	meet (TOP, x) => x; 
	meet (x, TOP) => x; 
	meet (x, y)   => x;
    end;  /* XXX */

    i31    = NONREF (REF fps::INTT);    /* tagged integers */
    i32    = NONREF (REF fps::INT32T);  /* untagged integers */
    real64 = NONREF (REF fps::FLTT);    /* untagged floats */

    ptr    = GC_REF (REF (fps::PTRT (fps::VPT))); /* boxed chunks (pointers) */
    int    = i32; /* untagged integer */
    real32 = TOP; /* unused in Lib7 */

    fun add (_, TOP, x) => TOP;
	add(_, x, TOP) => TOP;
	add (type, CONST i, CONST j) => (CONST (integer::(+) (i, j)) except OVERFLOW => int; end );
  #     add (type, CONST 0, b) = b
  #     add (type, b, CONST 0) = b
	add (type, CONST _, NONREF _) => int;
	add (type, NONREF _, CONST _) => int;
	add (type, x as NONREF a, y as NONREF b) => if (a == b ) x; else int; fi;
	add (type, x, y)  => PLUS (type, x, y);
    end;

    fun sub (_, TOP, x) => TOP;
	sub(_, x, TOP) => TOP;
	sub (type, CONST i, CONST j) => (CONST (integer::(+) (i, j)) except OVERFLOW => int; end );
    #   sub (type, a, CONST 0) = a;
	sub (type, CONST _, NONREF _) => int;
	sub (type, NONREF _, CONST _) => int;
	sub (type, x as NONREF a, y as NONREF b) => if (a == b ) x; else int;fi;
	sub (type, x, y)  => MINUS (type, x, y);
    end;

    fun is_recoverable TOP => FALSE;
	is_recoverable BOT => FALSE; /* XXX */
	is_recoverable _   => TRUE;
    end;

    exception GCTYPE  Gctype;

    garbage_collector_type = note::new'{ create=>GCTYPE,
				    get=>fn GCTYPE x => x;  e => raise exception e; end ,
				    to_string
				  };
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
