## cells.api

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# This updated api describes the abstractions on ``cells'', which
# denote storage cells in the machine architecture.
#
# Allen Leung (12/2/00)




# Things that are architecture specific.

api Cells {

    cellkinds:  List( cells_basis::Cellkind );		# List of all the cellkinds.

    first_pseudo:  cells_basis::Cell_Id;		# First pseudo register.
  
    cellkind_desc					# Find descriptor.
        :
	cells_basis::Cellkind
	->
	cells_basis::Cellkind_Desc; 

    cell_range						# Given a cellkind return its encoding range.
	:
	cells_basis::Cellkind
	->
	{ low:  Int,
          high: Int
        };

    # Return the nth physical register of the given kind.
    # Raises CELLS if there are no physical register of the given number.
    # Also raise CELLS if the given number if outside of the range.
    #
    # NOTE: This function returns the same cell for the 
    #       same argument every time.
    #       See also the function clone_cell below.
    #
    reg: cells_basis::Cellkind
         ->
         (cells_basis::Register_Num -> cells_basis::Cell);


    # Return a list of cells:
    #
    regs:   
       cells_basis::Cellkind 
       -> 
       { from:  cells_basis::Register_Num, 
	 to:    cells_basis::Register_Num, 
	 step:  Int
       }
       ->
       List( cells_basis::Cell );

    cell:   cells_basis::Cellkind -> (cells_basis::Register_Id -> cells_basis::Cell); 
	#
	# Same as Reg but we take the id instead.
	# So, registerNum (Reg k r) = r, and
	#     registerId (Cell k id) = id


    gpreg:  Int -> cells_basis::Cell; #  Abbreviation for Reg GP 
    fpreg:  Int -> cells_basis::Cell; #  Abbreviation for Reg FP 


    # Generate a new cell for a virtual register.  The new cell
    # is a pseudo register that is distinct from any other registers.
    # IMPORTANT: if you are using new_cell, it is important to 
    # partially apply it first to get a function.  Then uses this
    # function generate new cells.  The first application takes
    # time.
    #
    new_cell:    cells_basis::Cellkind -> (X -> cells_basis::Cell);
    new_reg:     X -> cells_basis::Cell;  #  Abbreviation for new_cell GP 
    new_freg:    X -> cells_basis::Cell;  #  Abbreviation for new_cell FP 

    new_dedicated_cell:  cells_basis::Cellkind -> (X -> cells_basis::Cell);

    # Look up the number of virtual registers
    # in a cells_basis::cellkind:
    #
    num_cell:    cells_basis::Cellkind -> (Void -> Int); 

       # the next virtual register name
    max_cell:    Void -> cells_basis::Cell_Id;
     
    # Given a cell c, create a new pseudo register that has the same 
    # cellkind as c, and a new property list initialized 
    # with the contents of c's properity list.
    # Note: the numCell kind is NOT updated!
    #
    new_variable:  cells_basis::Cell -> cells_basis::Cell;

    # This is the same as above, except that if the original
    # cell is colored, then the new cell has the same color.
    # Note that it is possible to have two cells (or more) with
    # the same physical color.  In these cases they can be used
    # to denote the same register, but they have different identities,   
    # and different property lists.  This may be useful for 
    # representing the same register used in different situations.  
    # See the function Reg above.
    #
    clone_cell:  cells_basis::Cell -> cells_basis::Cell;

    # Reset all counters.
    #
    reset:      Void -> Void; 

    # Abbreviations for cellsets 
    #
    Cellset = cells_basis::cell_set::Cellset; 

    empty:           Cellset;
    get_reg:          Cellset -> List( cells_basis::Cell );
    add_reg:          (cells_basis::Cell, Cellset) -> Cellset; 
    rmv_reg:          (cells_basis::Cell, Cellset) -> Cellset;
    get_freg:         Cellset -> List( cells_basis::Cell );
    add_freg:         (cells_basis::Cell, Cellset) -> Cellset;
    rmv_freg:         (cells_basis::Cell, Cellset) -> Cellset;

    get_cells_by_kind:     cells_basis::Cellkind -> Cellset -> List( cells_basis::Cell );
    update_cells_by_kind:  cells_basis::Cellkind
			    -> (Cellset, List( cells_basis::Cell ))
			      -> Cellset;

    # Return a register that is always zero on the architecture,
    # if one exists.  IMPORTANT: each call returns the same cell.
    # See also cloneCell above.
    #
    zero_reg:     cells_basis::Cellkind -> Null_Or( cells_basis::Cell );
                           
    default_values:  cells_basis::Cellkind ->  List( (cells_basis::Register_Id, Int) );

    stackptr_r:      cells_basis::Cell;		# Stack pointer register 
    asm_tmp_r:        cells_basis::Cell;	# Assembly temporary 
    fasm_tmp:        cells_basis::Cell;		# Floating point temporary 
};



## Changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
