#   This code was created by Jeff Molofee '99 
#   (ported to SDL by Sam Lantinga '2000) 
#   If you've found this code useful, please let me know. 
#   Visit me at www.demonews.com/hosted/nehe  

package Lesson05 :
api
   my main:  String * List( String ) -> winix::process::status
end
{

   use C SDL OpenGLMacros SDLMacros SDLEnums


   #  rotation angle for the triangle. 
   rtri = REF 0.0;
   
   #  rotation angle for the quadrilateral. 
   rquad = REF 0.0;
   
   #  A general OpenGL initialization function.  Sets all of the initial parameters. 
   fun InitGL (Width, Height) = 
              #   We call this right after our OpenGL window is created. 
   (
     glViewport::f (0, 0, Width, Height);
     glClearColor::f (0.0, 0.0, 0.0, 0.0); 
          #   This Will Clear The Background Color To Black 
     glClearDepth::f (1.0);          #   Enables Clearing Of The Depth Buffer 
     glDepthFunc::f (GL_LESS);       #   The Type Of Depth Test To Do 
     glEnable::f (GL_DEPTH_TEST);    #   Enables Depth Testing 
     glShadeModel::f (GL_SMOOTH);    #   Enables Smooth Color Shading 
   
     glMatrixMode::f (GL_PROJECTION);
     glLoadIdentity::f();           #   Reset The Projection Matrix 
   
     gluPerspective::f (45.0, signed::real Width/signed::real Height, 0.1, 100.0);  
      #   Calculate The Aspect Ratio Of The Window 
   
     glMatrixMode::f (GL_MODELVIEW)
   )
   
   #  The main drawing function. 
   fun DrawGLScene() =
   (
     glClear::f (GL_DEPTH_BUFFER_BIT + GL_COLOR_BUFFER_BIT);
                             #   Clear The Screen And The Depth Buffer 
     glLoadIdentity::f();               #   Reset The View 
  
     glTranslatef::f(-1.5, 0.0,-6.0);     #   Move Left 1.5 Units And Into The Screen 6.0 
           
     glRotatef::f(*rtri, 0.0, 1.0, 0.0);                #   Rotate The Pyramid On The Y axis  
   
     #   Draw a pyramid (in smooth coloring mode) 
     glBegin::f (GL_POLYGON);                                #   start drawing a pyramid 
   
     #   front face of pyramid 
     glColor3f::f (1.0, 0.0, 0.0);                #   Set The Color To Red 
     glVertex3f::f (0.0, 1.0, 0.0);             #   Top of triangle::f (front) 
     glColor3f::f (0.0, 1.0, 0.0);                #   Set The Color To Green 
     glVertex3f::f(-1.0,-1.0, 1.0);            #   left of triangle::f (front) 
     glColor3f::f (0.0, 0.0, 1.0);                #   Set The Color To Blue 
     glVertex3f::f (1.0,-1.0, 1.0);             #   right of traingle::f (front)         
   
     #   right face of pyramid 
     glColor3f::f (1.0, 0.0, 0.0);                #   Red 
     glVertex3f::f( 0.0, 1.0, 0.0);            #   Top Of Triangle::f (Right) 
     glColor3f::f (0.0, 0.0, 1.0);                #   Blue 
     glVertex3f::f( 1.0,-1.0, 1.0);            #   Left Of Triangle::f (Right) 
     glColor3f::f (0.0, 1.0, 0.0);                        #   Green 
     glVertex3f::f( 1.0,-1.0, -1.0);                #   Right Of Triangle::f (Right) 
   
     #   Back face of pyramid 
     glColor3f::f (1.0, 0.0, 0.0);                #   Red 
     glVertex3f::f( 0.0, 1.0, 0.0);            #   Top Of Triangle::f (Back) 
     glColor3f::f (0.0, 1.0, 0.0);                #   Green 
     glVertex3f::f( 1.0,-1.0, -1.0);           #   Left Of Triangle::f (Back) 
     glColor3f::f (0.0, 0.0, 1.0);                #   Blue 
     glVertex3f::f(-1.0,-1.0, -1.0);           #   Right Of Triangle::f (Back) 
   
     #   left face of pyramid. 
     glColor3f::f (1.0, 0.0, 0.0);                        #   Red 
     glVertex3f::f( 0.0, 1.0, 0.0);                #   Top Of Triangle::f (Left) 
     glColor3f::f (0.0, 0.0, 1.0);                        #   Blue 
     glVertex3f::f(-1.0,-1.0,-1.0);                #   Left Of Triangle::f (Left) 
     glColor3f::f (0.0, 1.0, 0.0);                        #   Green 
     glVertex3f::f(-1.0,-1.0, 1.0);                #   Right Of Triangle::f (Left) 
   
     glEnd::f();                                        #   Done Drawing The Pyramid 
   
     glLoadIdentity::f();                                #   make sure we're no longer rotated. 
     glTranslatef::f (1.5, 0.0,-7.0);                #   Move Right 3 Units, and back into the screen 7 
           
     glRotatef::f(*rquad, 1.0, 1.0, 1.0);                #   Rotate The Cube On X, Y, and Z 
   
     #   Draw a cube (6 quadrilaterals) 
     glBegin::f (GL_QUADS);                                #   start drawing the cube. 
     
     #   top of cube 
     glColor3f::f (0.0, 1.0, 0.0);                        #   Set The Color To Blue 
     glVertex3f::f( 1.0, 1.0,-1.0);                #   Top Right Of The Quad (Top) 
     glVertex3f::f(-1.0, 1.0,-1.0);                #   Top Left Of The Quad (Top) 
     glVertex3f::f(-1.0, 1.0, 1.0);                #   Bottom Left Of The Quad (Top) 
     glVertex3f::f( 1.0, 1.0, 1.0);                #   Bottom Right Of The Quad (Top) 
   
     #   Bottom of cube 
     glColor3f::f (1.0, 0.5, 0.0);                        #   Set The Color To Orange 
     glVertex3f::f( 1.0,-1.0, 1.0);                #   Top Right Of The Quad (Bottom) 
     glVertex3f::f(-1.0,-1.0, 1.0);                #   Top Left Of The Quad (Bottom) 
     glVertex3f::f(-1.0,-1.0,-1.0);                #   Bottom Left Of The Quad (Bottom) 
     glVertex3f::f( 1.0,-1.0,-1.0);                #   Bottom Right Of The Quad (Bottom) 
   
     #   front of cube 
     glColor3f::f (1.0, 0.0, 0.0);                        #   Set The Color To Red 
     glVertex3f::f( 1.0, 1.0, 1.0);                #   Top Right Of The Quad (Front) 
     glVertex3f::f(-1.0, 1.0, 1.0);                #   Top Left Of The Quad (Front) 
     glVertex3f::f(-1.0,-1.0, 1.0);                #   Bottom Left Of The Quad (Front) 
     glVertex3f::f( 1.0,-1.0, 1.0);                #   Bottom Right Of The Quad (Front) 
   
     #   Back of cube. 
     glColor3f::f (1.0, 1.0, 0.0);                        #   Set The Color To Yellow 
     glVertex3f::f( 1.0,-1.0,-1.0);                #   Top Right Of The Quad (Back) 
     glVertex3f::f(-1.0,-1.0,-1.0);                #   Top Left Of The Quad (Back) 
     glVertex3f::f(-1.0, 1.0,-1.0);                #   Bottom Left Of The Quad (Back) 
     glVertex3f::f( 1.0, 1.0,-1.0);                #   Bottom Right Of The Quad (Back) 
   
     #   left of cube 
     glColor3f::f (0.0, 0.0, 1.0);                        #   Blue 
     glVertex3f::f(-1.0, 1.0, 1.0);                #   Top Right Of The Quad (Left) 
     glVertex3f::f(-1.0, 1.0,-1.0);                #   Top Left Of The Quad (Left) 
     glVertex3f::f(-1.0,-1.0,-1.0);                #   Bottom Left Of The Quad (Left) 
     glVertex3f::f(-1.0,-1.0, 1.0);                #   Bottom Right Of The Quad (Left) 
   
     #   Right of cube 
     glColor3f::f (1.0, 0.0, 1.0);                        #   Set The Color To Violet 
     glVertex3f::f( 1.0, 1.0,-1.0);                #   Top Right Of The Quad (Right) 
     glVertex3f::f( 1.0, 1.0, 1.0);                #   Top Left Of The Quad (Right) 
     glVertex3f::f( 1.0,-1.0, 1.0);                #   Bottom Left Of The Quad (Right) 
     glVertex3f::f( 1.0,-1.0,-1.0);                #   Bottom Right Of The Quad (Right) 
     glEnd::f();                                        #   Done Drawing The Cube 
   
     rtri := *rtri + 15.0;            #   Increase The Rotation Variable For The Pyramid 
     rquad := *rquad + 15.0;         #   Decrease The Rotation Variable For The Cube 
   
     #   swap buffers to display, since we're double buffered. 
     SDL_GL_SwapBuffers::f()
   )

   exit = winix::process::exit
   
   fun main (prog, argv) = 
   let done = REF FALSE
       event = new' SDL_Event::size
   in
   
     #  Initialize SDL for video output 
     if SDL_Init::f (SDL_INIT_VIDEO) < 0 then
     (
       print("Unable to initialize SDL: "$SDL_GetError::f()$"\n");
       exit (1)
     ) 
   
     #  Create a 640x480 OpenGL screen 
     if Ptr::isNull'(SDL_SetVideoMode::f (640, 480, 0, SDL_OPENGL)) then
     ( print("Unable to create OpenGL screen: "$SDL_GetError::f()$"\n");
       SDL_Quit::f();
       exit (2)
     ) 
   
     #  Set the title bar in environments that support it 
     SDL_WM_SetCaption::f("Jeff Molofee's GL Code Tutorial ... NeHe '99", "");
   
     #  Loop, drawing and checking events 
     InitGL (640, 480);
     while not(*done) do
     (
       DrawGLScene();
       #  This could go in a separate function 
       while SDL_PollEvent::f(&event) != 0 do
       ( if SDL_event_type event == SDL_QUIT or
            ( SDL_event_type event == SDL_KEYDOWN and
              SDL_event_keysym event == SDLK_ESCAPE ) then
           done := TRUE
         else ()
       )
     );
     SDL_Quit::f();
     1
   end
}


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
