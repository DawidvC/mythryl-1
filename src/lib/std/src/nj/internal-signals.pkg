## internal-signals.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

# This is the internal view of the Signals package.

stipulate

    package string = string_guts;	# string_guts	is from   src/lib/std/src/string-guts.pkg
    package int    = int_guts;		# int_guts	is from   src/lib/std/src/bind-int-32.pkg

herein

    package internal_signals
    : (weak)
    api {
	include Signals;		# Signals	is from   src/lib/std/src/nj/signals.api

	initialize_signal_table:  X -> Void;
        clear_signal_table:       X -> Void;
        reset_signal_table:       X -> Void;
    }
    {

	package ci
            =
            c_interface;	# c_interface	is from   src/lib/std/src/unsafe/cinterface.pkg

					# Lib7-Signals		lives in   src/runtime/c-libs/lib7-signals/

	fun signal_fn x
            =
            ci::c_function "Lib7-Signals" x;

	Signal
            =
            SIGNAL  ci::System_Const;

	Signal_Action
	    = IGNORE
	    | DEFAULT
	    | HANDLER  (Signal, Int, primitive_types::Fate( Void ))
                       ->
                       primitive_types::Fate( Void )
            ;

	fun signal_to_constant (SIGNAL sc)
            =
            sc;

	fun constant_to_signal sc
            =
            SIGNAL sc;

        # The list of supported signals, its length, and the maximum signal code.
        #
        # We assume that the signal codes do not change, but that the number of
        # supported signals might vary between versions of the run-time system.

	Signal_Info
            =
            { act:     Signal_Action,
              mask:    Int,
              signal:  Signal
            };

	stipulate

	    my list_signals': Void -> List( ci::System_Const )
		=
		signal_fn "listSignals";


	    fun find_max signals
                =
		list::fold_left
		    (fn (SIGNAL (signal_id, _), id)
                        =
                        if   (id < signal_id   )   signal_id;
                                           else       id;   fi
                    )
		    -1
                    signals;

	herein

	    my signal_list:  Ref( List(Signal) )
		=
		REF [];

	    signal_count = REF 0;
	    max_signal   = REF -1;


	    my signal_table:   Ref( rw_vector::Rw_Vector( Null_Or( Signal_Info ) ) )
		=
		REF (rw_vector::from_list []);


	    my debug:  String -> Void
		    = c_interface::c_function "Lib7-Runtime" "debug";

	    fun get_info signal_id
		=
		case (rw_vector::get (*signal_table, signal_id))
		  
		     THE info
			 =>
			 info;

		     NULL
			 =>
			 {   debug (string::cat [ "\n*** Internal error: undefined sigTable entry for signal ",
						  int::to_string signal_id, " ***\n"
						]
				   );

			     raise exception null_or::NULL_OR;
			 };

		esac;

	    /****
		fun getInfo sigId = (case (rw_vector::get(*sigTable, sigId))
		       of NULL => raise exception null_or::NULL_OR
			| (THE info) => info
		      )		# end case
	    ****/

		fun set_info (signal_id, info)
                    =
                    rw_vector::set
                        ( *signal_table,
                          signal_id,
                          THE info
                        );

		fun reset_list ()
		    =
		    {
			signal_list := list::map constant_to_signal (list_signals' ());
			signal_count := list::length(*signal_list);
			max_signal := find_max(*signal_list);
			signal_table := rw_vector::make_rw_vector(*max_signal + 1, NULL);
		    };
	end;

        # List the signals (and their names)
        # supported by this version:
	#
	fun list_signals ()
            =
            *signal_list;


        # Return the name of a signal 
	#
	fun to_string (SIGNAL(_, name))
            =
            name;

        # Return the signal with the
        # corresponding name.
        # Return NULL if no such signal exists.
	#
	fun from_string name
            =
	    case (ci::find_sys_const (name, list::map signal_to_constant (*signal_list)))
	      
                 NULL   =>  NULL;
		 THE sc =>  THE (SIGNAL sc);
            esac;

        # These run-time functions deal with the state of a signal in the system. 
	my get_signal_state:  ci::System_Const -> Int		= signal_fn "getSigState";
	my set_signal_state:  ((ci::System_Const, Int)) -> Void	= signal_fn "setSigState";

        # The states are defined as: 
	ignore_sig_state = 0;
	default_sig_state = 1;
	enabled_sig_state = 2;

        #  Clear the signal table of handlers 
	fun clear_signal_table _
            =
            rw_vector::modify
                (fn _ =  NULL)
                *signal_table;

        # Initialize the signal table to the inherited process dictionary 
	fun initialize_signal_table _
            =
            {   fun initialize_signal (s as (SIGNAL signal_id))
                    =
                    {   state = get_signal_state signal_id;

			fun set_state st
                            =
                            set_info (#1 signal_id, { act=>st, mask=>0, signal=>s } );

			if   (state == ignore_sig_state)
			    
			     set_state IGNORE;
			else 
			     if   (state == default_sig_state)
			         
				  set_state DEFAULT;
			     else #  state = enabledSigState 
				  raise exception FAIL "unexpected signal handler";
			     fi;
			fi;
		    };

		    reset_list ();
		    list::apply initialize_signal  *signal_list;
	      };

        # Reset the signal dictionary to agree with the signal table 
	#
	fun reset_signal_table _
            =
            {   old_sig_table = *signal_table;
		old_list = *signal_list;

		fun copy (SIGNAL signal_id)
                    =
                    case (rw_vector::get (old_sig_table, #1 signal_id))
		      
			 THE info
                             =>
                             {   set_info (#1 signal_id, info);

				 case info.act
				   
				      IGNORE    =>  set_signal_state (signal_id, ignore_sig_state);
				      DEFAULT   =>  set_signal_state (signal_id, default_sig_state);
				      HANDLER _ =>  set_signal_state (signal_id, enabled_sig_state);
                                 esac;
			    };

		         NULL => ();
                    esac
		    except
                        _ = ();

		    # NOTE: we should probably notify the user that old signal handlers
		    # are being lost, but there is no good way to do this right now.

		reset_list ();
		list::apply  copy  old_list;
	    };

        #  signal masking. 

	 Signal_Mask
	  = MASKALL
	  | MASK  List( Signal );

	stipulate
	    # Run-time system API:
	    #   NULL   -- empty mask
	    #   THE[] -- mask all signals
	    #   THE l -- mask the signals in l

	    my set_sig_mask:  Null_Or( List( ci::System_Const ) ) -> Void = signal_fn "setSigMask";
	    my get_sig_mask:  Void -> Null_Or( List( ci::System_Const ) ) = signal_fn "getSigMask";



	    # Sort a list of signals, dropping duplicates:

	    fun sort_signals MASKALL
		    =>
		    *signal_list;

		sort_signals (MASK l)
		    =>
		    list::fold_left insert  []  l
		    where
			# A simple insertion sort to eliminate duplicates 

			fun insert (s as SIGNAL (id, _), [])
				=>
				[s];

			    insert (s as SIGNAL (id, _), (s' as SIGNAL (id', _)) ! r)
				=>
				if   (id < id')
				    
				     s ! s' ! r;
				else
				     if   (id == id')
				         
					  s' ! r;
				     else
					  s' ! insert (s, r);
				     fi;
				fi;
			end;
		    end;
	    end;

	    # Map a list of signals into the format
            # expected by the runtime system API:
            #
	    fun make_mask (masked, n_masked)
		=
		if   (n_masked == 0)
		     NULL;
		else if   (n_masked == *signal_count)
		          THE [];
		     else THE masked;  fi;
		fi;

	    # Is the signal masked? 
	    fun is_masked (SIGNAL (id, _)) = (.mask (get_info id) > 0);
	herein
	    fun mask_signals mask
                =
		compute_new_mask (sigs, *signal_list, [], 0, 0)
                where

                    sigs =   sort_signals mask;


		    # Function for incrementing a signal mask. 

		    fun inc_mask (SIGNAL (signal_id, _))
                        =
                        {   my { act, mask, signal }
                                =
                                get_info signal_id;

			    set_info (signal_id, { act, mask=>mask+1, signal } );
			};

		    # Scan over the sorted mask list and the list of all signals.
                    #
                    # Record which signals are masked
		    # and how many new signals are masked.

		    fun compute_new_mask ([], _, _, _, 0)
			    =>
			    #  no signals are masked, so we only update the local state 
			    list::apply inc_mask sigs;

		       compute_new_mask ([], [], masked, n_masked, _)
                           =>
                           {   # NOTE: we must update the OS's view of the mask before we change
			       # our own to avoid a race condition!

			       set_sig_mask (make_mask (masked, n_masked));
			       list::apply inc_mask sigs;
                           };

		       compute_new_mask ([], s2 ! r2, masked, n_masked, n_new)
                           =>
			   if (is_masked s2)
			        compute_new_mask ([], r2, (signal_to_constant s2) ! masked, n_masked+1, n_new);
			   else compute_new_mask ([], r2, masked, n_masked, n_new);fi;

		       compute_new_mask ((s1 as SIGNAL (id1, _)) ! r1, (s2 as SIGNAL (id2, _)) ! r2, masked, n_masked, n_new)
                           =>
			   if   (id1 == id2)
			       
			        n_new = if (is_masked s1)  n_new; else n_new+1;fi;

				compute_new_mask (r1, r2, (signal_to_constant s1) ! masked, n_masked+1, n_new);

			   else
                                if (is_masked s2)
			             compute_new_mask (s1 ! r1, r2, (signal_to_constant s2) ! masked, n_masked+1, n_new);
			        else compute_new_mask (s1 ! r1, r2, masked, n_masked, n_new);fi;
                           fi;

		       compute_new_mask (_ ! _, [], _, _, _)
                           =>
			   raise exception FAIL "computeNewMask: bogus mask (impossible)";
                    end;
		end;

	    fun unmask_signals mask
                =
		compute_new_mask (sigs, *signal_list, [], 0, 0)
                where
		    sigs = sort_signals mask;


		    # Function for decrementing a signal mask. 

		    fun dec_mask (SIGNAL (signal_id, _))
                        =
                        {   my { act, mask, signal } = get_info signal_id;

			    if   (mask > 0)
			        
                                 set_info (signal_id, { act, mask=>mask - 1, signal } );
			    fi;
			};


		    # Return TRUE if decrementing this
                    # signal's count will unmask it. 

		    fun is_unmasked (SIGNAL (id, _))
                        =
                        .mask (get_info id)  <=  1;

		    # Scan over the sorted mask list and the list of all signals.  Record which signals
		    # are masked and how many new signals are unmasked.

		    fun compute_new_mask ([], _, _, _, 0)
                            =>
			    # No signals are unmasked, so we only update the local state 
			    list::apply dec_mask sigs;

			compute_new_mask ([], [], masked, n_masked, _)
			    =>
			    {   # NOTE: we must update are local view of the mask before we change the OS's view
				# to avoid a race condition!

				list::apply dec_mask sigs;
				set_sig_mask (make_mask (masked, n_masked));
                            };

			compute_new_mask ([], s2 ! r2, masked, n_masked, n_new)
                            =>
			    if   (is_masked s2)
			         compute_new_mask ([], r2, (signal_to_constant s2) ! masked, n_masked+1, n_new);
			    else compute_new_mask ([], r2, masked, n_masked, n_new);fi;

			compute_new_mask ( (s1 as SIGNAL (id1, _)) ! r1,
                                           (s2 as SIGNAL (id2, _)) ! r2,
                                           masked,
                                           n_masked,
                                           n_new
                                         )
			    =>
			    if   (id1 == id2)
			        
                                 if   (is_unmasked s1)
				      compute_new_mask (r1, r2, masked, n_masked, n_new+1);
				 else compute_new_mask (r1, r2, (signal_to_constant s1) ! masked, n_masked+1, n_new);fi; #  still masked 
			    else
                                 if   (is_masked s2)
				      compute_new_mask (s1 ! r1, r2, (signal_to_constant s2) ! masked, n_masked+1, n_new);
				 else compute_new_mask (s1 ! r1, r2, masked, n_masked, n_new); fi;
                            fi;

			compute_new_mask (_ ! _, [], _, _, _)
                           =>
			   raise exception FAIL "unmaskSignals: bogus mask (impossible)";
		    end;
		end;

	    fun masked ()
		=
		case (get_sig_mask ())
		  
		     NULL   => MASK [];
		     THE [] => MASKALL;
		     THE l  => MASK (list::map constant_to_signal l);
                esac;

	end; #  local 


        # Set the handler for a signal,
        # returning the previous action:
	# 
	fun set_signal_handler
                (s as (SIGNAL signal_id), act)
            =
            {   mask_signals MASKALL;

		my  { act=>old_act, mask, ... }
                    =
                    get_info (#1 signal_id);

		case (act, old_act)
		  
		     (IGNORE, IGNORE)   =>   ();
		     (DEFAULT, DEFAULT) =>   ();

		     (HANDLER _, HANDLER _)
                         =>
			 set_info(#1 signal_id, { act, mask, signal=>s } );

		     (IGNORE, _)
			 =>
			 {   set_info(#1 signal_id, { act, mask, signal=>s } );
			     set_signal_state (signal_id, ignore_sig_state);
			 };

		     (DEFAULT, _)
			 =>
			 {   set_info(#1 signal_id, { act, mask, signal=>s } );
			     set_signal_state (signal_id, default_sig_state);
			 };

		     (HANDLER _, _)
			 =>
			 {   set_info(#1 signal_id, { act, mask, signal=>s } );
			     set_signal_state (signal_id, enabled_sig_state);
			 };
                esac;

		unmask_signals MASKALL;

		old_act;
	    };



	# If a signal is not being ignored, then set the handler.
        #
	# This returns the previous handler (if IGNORE, then
	# the current handler is still IGNORE).

	fun override_signal_handler (s as (SIGNAL signal_id), act)
            =
            {   mask_signals MASKALL;

	        my  { act=>old_act, mask, ... }
                    =
                    get_info (#1 signal_id);

		case (old_act, act)
		  
		     (IGNORE, _)        =>   ();
		     (DEFAULT, DEFAULT) =>   ();

		     (HANDLER _, HANDLER _)
			 =>
			 set_info(#1 signal_id, { act, mask, signal=>s } );

		     (_, IGNORE)
			 =>
			 {   set_info(#1 signal_id, { act, mask, signal=>s } );
			     set_signal_state (signal_id, ignore_sig_state);
			 };

		     (_, DEFAULT)
			 =>
			 {   set_info(#1 signal_id, { act, mask, signal=>s } );
			     set_signal_state (signal_id, default_sig_state);
			 };

		     (_, HANDLER _)
			 =>
			 {   set_info(#1 signal_id, { act, mask, signal=>s } );
			     set_signal_state (signal_id, enabled_sig_state);
			 };
                esac;

		unmask_signals MASKALL;

		old_act;
	    };

        # Get the current action for the given signal:
	#
	fun get_signal_handler (SIGNAL (signal_id, _))
            =
            .act (get_info signal_id);


        # Sleep until the next signal.
	#
	# If called when signals are masked,
        # then signals will still be masked
	# when pause returns.
	#
	my pause:  Void -> Void
	    =
	    signal_fn "pause";					# pause		def in   src/runtime/c-libs/lib7-signals/pause.c



        # Here is the Mythryl handler that gets
	# invoked by the run-time system.
	#
        # It is responsible for dispatching the
	# appropriate Mythryl handler.
	#
	fun signal_handler (code, count, resume_k)
            =
	    case (rw_vector::get (*signal_table, code))
	      
	         THE { act=>HANDLER handler, mask=>0, signal }
                     =>
		     handler (signal, count, resume_k);
# DEBUG
#		 _   => raise exception FAIL "inconsistent internal signal state";
# DEBUG
		 info
		     =>
		     {
			 act = case info
			         
				    NULL                      =>  "NULL";
				    THE { act=>IGNORE,  ... } =>  "IGNORE";
				    THE { act=>DEFAULT, ... } =>  "DEFAULT";

				    THE { act=>HANDLER _, mask, ... }
                                        => 
				        cat ["HANDLER (mask=", int::to_string mask, "!=0)"];
				esac;

			 msg = cat ["inconsistent state ", act,
					 " for signal ", int::to_string code];
			 raise exception FAIL msg;
		     };
             esac;


        # Install the root handler 
	#
								my _ =
	assembly::sighandler := signal_handler;

        #  Initialize the signal list and table:
								my _ =
	initialize_signal_table ();

        # These signals should be supported
	# even on non-UNIX platforms:
	#
	interrupt_signal          = null_or::the (from_string "INTERRUPT" );
	alarm_signal              = null_or::the (from_string "ALARM");
	terminal_signal           = null_or::the (from_string "TERMINAL");
	garbage_collection_signal = null_or::the (from_string "GARBAGE_COLLECTION"  );

    };				# package internal_signals 
end;				# stipulate


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
