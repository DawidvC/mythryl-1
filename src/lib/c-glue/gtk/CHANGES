VERSION 0.1.3
-------------
o Added the Gadget library, which is a more convenient layer on top of 
  the base Gtk library

o Improved FFI-Packager.  Now it is possible to automatically generate 

      a call by value Mythryl function

        val gtk_label_get.f : 'a GtkLabel -> string

      from the C function

       void gtk_label_get(GtkLabel *, char **)

    We generate the following code:

      # FFI-Packager generated code:
      fun f x1
          =
          let val vx2 = C.new' (C.S.ptr : (uchar, rw) ptr C.S.size)
              val x2 = c::ptr::enref' vx2
              val () = f' (x1, x2)
              val x2 = C.Get.ptr' vx2
              val () = C.discard' vx2
              val x2 = ZString.toML' x2
          in x2
          end

VERSION 0.1.2
-------------
o Updated to gtk+ 1.2.10
o Added gdk-pixbuf to the mix

VERSION 0.1.1
-------------
o Changed to c-glue-maker 0.7

VERSION 0.1
-----------

o Moved all portable library transformations to the ffi-packager library.

o Enums now become ML datatypes whenever possible.

o GtkObject and its subclasses are not partially abstract.
  Only the struct tags are kept abstract.  This way, all normal pointer
  operations defined in the structure C can be applied to these types.

o More intelligent ML type tricks used.  No more Unsafe.cast 
  in the generated code.

o Call by reference -> call by value transformation added. 

     See the function gtk_calendar_get_date for example.

o Bitfields of length 1 are treated as booleans.

o Two runtime systems are provided.  GtkRuntimeOld.cm is the old queue
  based implementation.   GtkRuntime.cm is the new (non-working) pthread
  based implementation.

