## de-bruijn-index.pkg 

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6



# From http://www-cse.ucsd.edu/ilks/wi06/cse230/hw/hw3.pdf:
#
#  "An alternative notation for the lambda-calculus is the
#   de Bruijn notation which elegantly sidesteps the confusion
#   arising from free and bound variables.
#
#  "The de Bruijn index of a variable occurrence is the number
#   of lambdas that separate the occurrence from its naming
#   lambda in the abstract syntax tree.
#
#  "In the de Bruijn notation, the names of variables are
#   replaced at each occurrence with the corresponding de Bruijn
#   index at that occurrence.
#
#  "Terms that are equivalent after renaming bound variables have
#   the same de Bruijn representation.
#
#          lambda term           |  de Bruijn term
#        ---------------------------------------------
#               \x::x             |   \.0
#               \x.\x::x          |   \.\.0
#               \x.\y::y          |   \.\.0
#               \x.((\x.\y::x)x)  |   \.((\.\.1)0)
#
#
#
# Tree notation may make this clearer.
# Stealing a leaf from 
# http://www.cs.cornell.edu/Info/Projects/NuPrl/cs611/fall94notes/cn14/section3_4.html
#
#     \f.\g.\x::fx (gx)
#
# has a syntax tree looking like
#
#           (f lambda)
#              |
#           (g lambda)
#              |
#           (x lambda)             
#              |
#           (apply)             
#            /   \
#       (apply) (apply)                         
#        /  \    /   \
#       f    x  g     x
#
# which in de Bruijn index representation becomes:
#
#           (lambda)
#              |
#           (lambda)
#              |
#           (lambda)             
#              |
#           (apply)             
#            /   \
#       (apply) (apply)                         
#        /  \    /   \
#       2    0  1     0
#
# Note that travelling up the tree by the number
# of lambdas given by any de Bruijn index brings
# you to the lambda naming that index.


# This file implements the abstraction of de Bruijn indices
# used by the highcode type and term language.
#
# The notion of depth refers to the type-naming depth
# relative to the top level of the current compilation unit.
#
# I can't make type depth and index abstract because
# certain clients wants to use the values of these
# types as table indices.


# I moved this into the typechecker library.  It may be moved
# back to highcode if the typechecker gets "cleaned up", i.e., if
# it is made to be unaware of such back-end internals.
# (08/2001 Blume)

package debruijn_index: (weak)  De_Bruijn_Index {		# De_Bruijn_Index	is from   src/lib/compiler/front/typechecker/basics/de-bruijn-index.api

    stipulate

        package em= error_message;	# error_message	is from   src/lib/compiler/front/basics/errormsg/error-message.pkg

    herein

	fun bug s = em::impossible ("debruijn_index: " + s);

	Depth = Int;
	Index = Int;

	top = 0;

	fun next i
            =
            i + 1;

	fun prev i
            =
            if (i > 0)      i - 1; 
            else   bug "negative depth in prev";fi;

	fun eq (i: Int, j)
            =
            i == j;

	fun dp_key (i:  Depth)
            =
            i;

	fun dp_print i
            =
            int::to_string i;

	fun dp_toint   (i:  Depth)   =   i;
	fun dp_fromint (i:  Int  )   =   i;

	fun subtract (cur: Int, def)
            = 
	    if  (def > cur)   bug "the definition is deeper than the use";
	    else              (cur - def);
            fi;

	cmp = int::compare;

	fun di_key i
            =
            i;

	fun di_print i
            =
            int::to_string i;

	fun di_toint   (i:  Index)   =   i;
	fun di_fromint (i:  Int  )   =   i;

	innermost = 1;
	innersnd  = 2;

	fun di_inner i
            =
            i+1;

    end; #  local 

}; #  package debruijn_index 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1997 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
