
api EXPRESSION_PARSE_STRING {

    package f:  EXPRESSION
    my read_expression:  string -> f::expression
}

package ExpressionParseString:  EXPRESSION_PARSE_STRING {


    package f = Expression

    fun parse_stream stm
    =
    let
	linenum = ref 1
	fun perror (s, a, b) = 
	    output (std_out, ((Integer::makestring (*linenum))
			    ^":"
			    ^(Integer::makestring a)
			    ^"-"
			    ^(Integer::makestring b)
			    ^".")^s); 
	lexer = expressionParser::make_lexer
	    (fn _ => read_line stm)
	    ( { comment_nesting_depth = ref 0,
	      lineNum = linenum,
	      linePos = ref [0],
	      stringtext = ref "", 
	      err = (fn (a, b, s) => perror (s, a, b)) } )
	my (res, _) = expressionParser::parse (0, lexer, perror, ())
    in 
	res 
    end

    fun read_expression str = parse_stream (open_string str) handle LEX_ERROR => (CIO::print "Error in input\n"; f::ERROR)

}

