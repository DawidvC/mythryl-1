## posix-etc.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6


# Access to info from /etc/passwd /etc/group &tc --
# POSIX 1003.1 system data-base operations
# This is a subpackage of the POSIX 1003.1 based
# 'Posix' package
#
#     src/lib/std/src/posix/posix.pkg


###                       "UNIX is basically a simple operating system, but you
###                        have to be a genius to understand the simplicity."
###
###                                                      -- Dennis Ritchie 



package posix_etc {

    package fs
        =
        posix_file;				# posix_file	is from   src/lib/std/src/posix/posix-file.pkg


    fun cfun x
        =
        c_interface::c_function "POSIX-SysDB" x;


    Unt      =  host_unt::Unt;
    User_Id  =  fs::User_Id;
    Group_Id =  fs::Group_Id;
    
    package passwd
      =
      package {
         Passwd
             =
             PWD {             #  extensible 
		   name:  String,
		   uid:  User_Id,
		   gid:  Group_Id,
		   home:  String,
		   shell:  String
		 };

        fun name (PWD { name, ... } ) = name;
        fun uid (PWD { uid, ... } ) = uid;
        fun gid (PWD { gid, ... } ) = gid;
        fun home (PWD { home, ... } ) = home;
        fun shell (PWD { shell, ... } ) = shell;

      };

    package group
      =
      package {
         Group = GROUP  {              #  extensible 
             name:  String,
             gid:  Group_Id,
             members:  List( String )
           };

        fun name (GROUP { name, ... } ) = name;
        fun gid (GROUP { gid, ... } ) = gid;
        fun members (GROUP { members, ... } ) = members;
    
      };
    
    my getgrgid' : Unt    -> (String, Unt, List( String )) =   cfun "getgrgid";
    my getgrnam' : String -> (String, Unt, List( String )) =   cfun "getgrnam";


    fun getgrgid  gid
        =
        {   my (name, gid, members)
                =
                getgrgid' gid;
          
            group::GROUP
		{
		  name,
		  gid,
		  members
		};
        };


    fun getgrnam gname
        =
        {   my (name, gid, members)
                =
                getgrnam' gname;
          
            group::GROUP { name, gid, members };
        };


    my getpwuid' : Unt   -> (String, Unt, Unt, String, String)   = cfun "getpwuid";
    my getpwnam' : String -> (String, Unt, Unt, String, String)   = cfun "getpwnam";


    fun getpwuid  uid
        =
        {   my (name, uid, gid, dir, shell)
                =
                getpwuid' uid;
          
            passwd::PWD { name, uid, gid, home => dir, shell };
        };

    fun getpwnam name
        =
        {   my (name, uid, gid, dir, shell)
                =
                getpwnam' name;
          
            passwd::PWD { name, uid, gid, home  =>  dir, shell };
        };

}; #  package posix_etc 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
