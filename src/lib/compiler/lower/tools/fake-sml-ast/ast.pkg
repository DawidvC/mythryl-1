
# Compiled by:
#     src/lib/compiler/lower/tools/sml-ast.make6



###                     "If I have seen further than others, it is
###                      by standing upon the shoulders of giants."
###
###                                           -- Isaac Newton 



package mdlast: (weak)  Mdl_Ast {		# Mdl_Ast	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast.api

    Loc  = source_mapping::Location;

    Decl = 
     DATATYPEDECL      (List( Datatypebind ), List( Typebind ))
   | EXCEPTIONDECL     List( Exceptionbind )
   | FUNDECL           List( Funbind )
   | RTLDECL           (Pattern, Expression, Loc)
   | RTLSIGDECL        (List( Id ), Some_Type)
   | VALDECL           List( Valbind )
   | VALUE_API_DECL        (List( Id ), Some_Type) 
   | TYPE_API_DECL       (Id, List( Typevar_Ref ))
   | LOCALDECL         (List( Decl ), List( Decl ))
   | SEQDECL           List( Decl )
   | PACKAGEDECL       (Id, List( Decl ), Null_Or( Package_Cast ), Package_Exp)
   | GENERICDECL       (Id, List( Decl ), Null_Or( Package_Cast ), Package_Exp)
   | PACKAGEAPIDECL    (Id, Api_Exp)
   | API_DECL          (Id, Api_Exp)
   | SHARINGDECL       List( Share )
   | OPENDECL          List( Ident )
   | GENERICARGDECL    (Id, Package_Cast)
   | INCLUDE_API_DECL    Api_Exp
   | INFIXDECL         (Int, List( Id ))
   | INFIXRDECL        (Int, List( Id ))
   | NONFIXDECL        List( Id )
   | MARKDECL          (Loc, Decl)

     #  MD extensions 
   | ARCHDECL          (Id, List( Decl ))     	#  Architecture spec 
   | VERBATIM_CODE     List( String )        	#  verbatim code 
   | BITSORDERINGDECL  Range           	#  Declare bits ordering 
   | FORMATDECL        (Null_Or( Int ), List( Formatbind ))
                                         	#  Declare instruction formats 
   | ARCHKINDDECL      Arch_Kind        	#  superscalar/vliw 
   | ENDIANESSDECL     Endianess       	#  little/big endian 
   | STORAGEDECL       List( Storagedecl)	#  cell declarations
   | LOCATIONSDECL     List( Locbind )        	#  location declarations 
   | NAMEDECL          String       		#  name of architecture 
   | VERSIONDECL       String              	#  version number 
   | ASSEMBLYCASEDECL  Assemblycase   	#  lower/uppercase 
   | INSTRUCTIONDECL   List( Consbind ) 	#  instruction definition 
   | DEBUGDECL         Id                    	#  turn on debugging 
   | RESOURCEDECL      List( Id )          	#  resource declaration 
   | CPUDECL           List( Cpubind )       	#  Cpu declaration 
   | PIPELINEDECL      List( Pipelinebind )	#  pipeline declaration 
   | LATENCYDECL       List( Latencybind )	#  latency declaration 

   also   Api_Exp  = IDSIG  Ident
                 | WHERESIG      (Api_Exp, Ident, Package_Exp)
                 | WHERETYPESIG  (Api_Exp, Ident, Some_Type)
		 | DECLSIG       List( Decl )

   also   Share   = TYPESHARE     List( Ident )
                 | STRUCTSHARE   List( Ident )

   also   Literal = UNT_LIT    Unt
                 | UNT32_LIT  unt32::Unt
                 | INT_LIT     Int
                 | INT32_LIT   int32::Int
                 | INTEGER_LIT  integer::Int
                 | STRING_LIT  String
                 | CHAR_LIT    Char
                 | BOOL_LIT    Bool
                 | FLOAT_LIT    String
   
   also      Expression  = LITEXP      Literal
                 | IDEXP              Ident
                 | CONSEXP            (Ident, Null_Or( Expression ))
                 | LISTEXP            (List( Expression ), Null_Or( Expression ))
                 | TUPLEEXP           List( Expression )
                 | VECTOR_EXPRESSION  List( Expression )
                 | RECORD_EXPRESSION  List ((Id, Expression))
                 | APPLY_EXPRESSION   (Expression, Expression)
                 | IF_EXPRESSION      (Expression, Expression, Expression)
                 | LET_EXPRESSION     (List( Decl ), List( Expression ))
                 | SEQUENTIAL_EXPRESSIONS  List( Expression )
                 | RAISE_EXPRESSION   Expression 
                 | EXCEPT_EXPRESSION  (Expression, List( Clause ))
                 | CASE_EXPRESSION    (Expression, List( Clause ))
                 | TYPEDEXP           (Expression, Some_Type)
                 | LAMBDAEXP          List( Clause )
                 | SOURCE_CODE_REGION_FOR_EXPRESSION  (Loc, Expression)

                   #  MDL extensions 
                 | BITSLICEEXP  (Expression, List( Range ))
                 | LOCEXP       (Id, Expression, Null_Or( Id ))
                 | ASMEXP       Assembly
                 | TYPEEXP      Some_Type
                 | RTLEXP       Rtl
                 | CONTEXP      (Expression, Id)

   also Ety       = INT8 | INT16 | INT32 | INT64 | FSINGLE | FDOUBLE

   also Assemblycase = LOWERCASE | UPPERCASE | VERBATIM

   also Package_Exp = IDSEXP           Ident
                 | APPSEXP          (Package_Exp, Package_Exp)
                 | DECLSEXP         List( Decl )
                 | CONSTRAINEDSEXP  (Package_Exp, Api_Exp)

   also  Some_Type    = IDTY       Ident
              | TYVARTY           Typevar_Ref
              | INTVARTY          Int
              | TYPE_VARIABLE_TYPE     (Tvkind, Int, Ref( Int ), Ref(  Null_Or( Some_Type ) ))
              | APPTY             (Ident, List( Some_Type ))
              | FUNTY             (Some_Type, Some_Type)
              | TUPLETY           List( Some_Type )
              | RECORDTY          List ((Id, Some_Type))
              | TYPE_SCHEME_TYPE (List( Some_Type ), Some_Type)
              | LAMBDATY         (List( Some_Type ), Some_Type)
              | CELLTY  Id

   also Tvkind = INTKIND | TYPEKIND

   also        Pattern   = IDPAT  Id
                    | WILDCARD_PATTERN
                    | CONSPAT         (Ident, Null_Or( Pattern ))
                    | ASPAT           (Id, Pattern)
                    | LITPAT          Literal
                    | LISTPAT         (List( Pattern ), Null_Or( Pattern ))
                    | TUPLEPAT        List( Pattern )
                    | VECTOR_PATTERN  List( Pattern )
                    | RECORD_PATTERN  (List ((Id, Pattern)), Bool)
                    | TYPEDPAT        (Pattern, Some_Type)
                    | NOTPAT          Pattern
                    | OR_PATTERN      List( Pattern )
                    | ANDPAT          List( Pattern )
                    | WHEREPAT        (Pattern, Expression) 
                    | NESTEDPAT       (Pattern, Expression, Pattern)

   also  Ident = IDENT  (List( Id ), Id) 

   also  Clause = CLAUSE  (List( Pattern ), Guard, Expression)
  
   also  Funbind = FUNBIND  (Id, List( Clause ))
   
   also  Storagedecl = 
          CELLDECL  { id: Id, nickname: Id,
                       from: Ref( Int ), to: Ref( Int ),
                       alias: Null_Or( Id ),
                       count: Null_Or( Int ), bits: Int, print: Expression,
                       aggregable: Bool,
                       defaults: List( ((Int,Expression)) ) }

   also  Locbind = LOCBIND  (Id, Null_Or( Pattern ) , Expression)
   
   also         Endianess = LITTLE | BIG
   
   also         Arch_Kind = VLIW | SUPERSCALAR
 
   also   Formatbind = FORMATBIND  (Id, List( Field ), Null_Or( Expression ))

   also   Field = FIELD  { id: Id, width: Width, sign: Signedness,
                           cnv: Cnv, value: Null_Or( unt32::Unt ) }

   also          Width = WIDTH  Int | RANGE  (Int, Int)

   also   Cnv = NOCNV
             | CELLCNV  Id
             | FUNCNV  Id

   also   Datatypebind = DATATYPEBIND  
             { id: Id, type_variables: List( Typevar_Ref ), mc:  Opcodeencoding, asm:  Bool,
              field': Null_Or( Id ), cbs: List( Consbind ) }
                      | DATATYPEEQBIND  { id: Id, type_variables: List( Typevar_Ref ), type: Some_Type }

   also   Exceptionbind = EXCEPTIONBIND    (Id, Null_Or( Some_Type ))
                       | EXCEPTIONEQBIND  (Id, Ident)

   also   Consbind     = 
         CONSBIND  { id:  Id, type: Null_Or( Some_Type ), mc:  Null_Or( Mc ),
                      asm:  Null_Or( Assembly ),
                      rtl:  Null_Or( Expression ),
                      nop:  Flag,
                      nullified:  Flag,
                      delayslot:  Null_Or( Expression ),
                      delaycand:  Null_Or( Expression ),
                      sdi:  Null_Or( Expression ),
                      latency:  Null_Or( Expression ),   
                      pipeline:  Null_Or( Expression ),   
                      loc:  Loc
                     }

   also   Flag      = FLAGON | FLAGOFF | FLAGID  (Id, Bool, Expression)

   also   Delayslot = DELAY_ERROR
                   | DELAY_NONE
                   | DELAY_ALWAYS
                   | DELAY_TAKEN
                   | DELAY_NONTAKEN
                   | DELAY_IF  (Branching, Delayslot, Delayslot)

   also   Branching = BRANCHFORWARDS
                   | BRANCHBACKWARDS

   also   Mc        = WORDMC  unt32::Unt
                   | EXPMC  Expression

   also   Assembly  = STRINGASM  String
                   | ASMASM     List( Asm )

   also   Asm       = TEXTASM  String
                   | EXPASM   Expression 

   also   Typebind  = TYPEBIND  (Id, List( Typevar_Ref ), Some_Type)

   also   Valbind   = NAMED_VARIABLE  (Pattern, Expression)

   also   Signedness   = SIGNED | UNSIGNED

   also   Typevar_Ref       = VARTV  Id
                     | INTTV  Id

   also   Rtlterm     = LITRTL  Id
                     | IDRTL   Id
                     | COMPOSITERTL  Id

   also   Cpubind    = CPUBIND  { name: Id, aliases: List( String ), max_issues: Int, 
                                  resources: List ((Int, Id)) }
   also   Pipelinebind = PIPELINEBIND  (Id, List ((Pattern, Pipelineexp)))

   also   Latencybind  = LATENCYBIND  (Id, List ((Pattern, Expression)))

   also   Pipelineexp  = PIPELINE  List( Cycle )

   also   Cycle        = ORCYCLE  (Cycle, Cycle)
                      | REPEATCYCLE  (Cycle, Int)
                      | IDCYCLE  Id 


   withtype Range = (Int, Int)
   also      Id    = String
   also      Guard = Null_Or( Expression )
   also      Opcodeencoding = Null_Or( List( Int ) )
   also      Cellset = Bool
   also      Rtl     = List( Rtlterm )
   also      Package_Cast = { abstract: Bool, api_expression: Api_Exp };

};  


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
