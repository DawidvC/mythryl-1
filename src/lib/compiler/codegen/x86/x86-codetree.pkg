# x86-codetree.pkg

# Compiled by:
#     src/lib/compiler/backend-x86.make6

#  Codetree specialization 

package x86codetree
    = 
    codetree_g (						# codetree_g					is from   src/lib/compiler/lower/codetree/codetree-g.pkg
        package constant  = lib7constant;			# lib7constant					is from   src/lib/compiler/codegen/compile-fps/lib7-const.pkg
        package region    = cpsregions;				# cpsregions					is from   src/lib/compiler/codegen/compile-fps/fps-regions.pkg
	package extension = x86_lib7codetree_ext;		# x86_lib7codetree_ext				is from   src/lib/compiler/codegen/x86/x86-codetreeext.pkg
    );


package x86codetree_eval
    =
    codetree_eval_g(						# codetree_eval_g				is from   src/lib/compiler/lower/codetree/codetree-eval-g.pkg
	package codetree = x86codetree;
	fun eq _ _ =  FALSE;
	eq_rext  = eq;
	eq_fext  = eq;
	eq_ccext = eq;
	eq_sext  = eq;
   );
					    
package x86codetree_hash
    = 
    codetree_hash_g (						# codetree_hash_g				is from   src/lib/compiler/lower/codetree/codetree-hash-g.pkg
        package codetree = x86codetree;
        fun h _ _ = 0u0;
        hash_rext = h;
	hash_fext = h;
        hash_ccext = h;
        hash_sext = h;
    );

package x86gas_pseudo_ops
    = 
    x86_gas_pseudo_op_g (					# x86_gas_pseudo_op_g				is from   src/lib/compiler/lower/x86/flowgraph/x86-gas-pseudo-op-g.pkg
	package codetree      = x86codetree;
	package codetree_eval = x86codetree_eval;		# x86codetree_eval				is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
    );

package x86client_pseudo_ops
    =
    lib7_pseudo_op_g (						# lib7_pseudo_op_g				is from   src/lib/compiler/codegen/compile-fps/lib7-pseudo-ops-g.pkg
        package asm = x86gas_pseudo_ops;
    );


package x86pseudo_ops
    =
    pseudo_op_g (
        package client = x86client_pseudo_ops;			# x86client_pseudo_ops					is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
    );	      

package x86_codetree_stream
    =
    instruction_stream_g (					# instruction_stream_g				is from   src/lib/compiler/lower/instruction/instruction-stream-g.pkg
	x86pseudo_ops
    );


package x86codetree_stream
    = 
    codetree_stream_g (						# codetree_stream_g				is from   src/lib/compiler/lower/codetree/codetree-stream-g.pkg
        package codetree           = x86codetree;
        package instruction_stream = x86_codetree_stream;
    );


# Specialized X86 instruction set 
#
package instruction_set_x86
    =
    instruction_set_x86_g (					# instruction_set_x86_g				is from   src/lib/compiler/lower/x86/instruction/instruction-set-x86-g.pkg
	x86codetree
    );


package x86mem_regs
    =
    x86_memory_registers_g (					# x86_memory_registers_g			is from   src/lib/compiler/codegen/x86/x86-memory-registers-g.pkg
        instruction_set_x86
    );


package x86_instruction_semantic_properties
    = 
    x86_instruction_semantic_properties_g (			# x86_instruction_semantic_properties_g		is from   src/lib/compiler/lower/x86/instruction/x86-instruction-semantic-properties-g.pkg
        package instruction_set     = instruction_set_x86;
	package codetree_hash       = x86codetree_hash;		# x86codetree_hash				is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
        package codetree_eval       = x86codetree_eval;
    );

package x86rewrite
    =
    x86_instruction_rewriter_g (				# x86_instruction_rewriter_g			is from   src/lib/compiler/lower/x86/reg-alloc/x86-instruction-rewriter-g.pkg
        instruction_set_x86
    );


package x86shuffle
    =
    x86_shuffle_g (						# x86_shuffle_g					is from   src/lib/compiler/lower/x86/instruction/x86-shuffle-g.pkg
        instruction_set_x86
    );


package x86asm_emitter						# Assembly code emitter 
    =
    x86_asm_emitter_g (						# x86_asm_emitter_g				is from   src/lib/compiler/lower/x86/emit/x86-asm-emitter-g.pkg
        package instruction_set = instruction_set_x86;		# instruction_set_x86				is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package shuffle= x86shuffle;				# x86shuffle					is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package mem_regs= x86mem_regs;				# x86mem_regs					is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package codetree_eval= x86codetree_eval;		# x86codetree_eval				is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package instruction_stream = x86_codetree_stream;	# x86_codetree_stream					is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	mem_reg_base=THE (instruction_set_x86::cells::esp);
    );


package x86_machine_code_emitter
    = 
    translate_x86_to_x86_machine_code_g (				# translate_x86_to_x86_machine_code_g			is from   src/lib/compiler/lower/x86/translate-x86-to-x86-machine-code-g.pkg
        package instruction_set = instruction_set_x86;		# instruction_set_x86				is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package shuffle= x86shuffle;				# x86shuffle					is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package asm_emitter= x86asm_emitter;			# x86asm_emitter				is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package mem_regs= x86mem_regs;				# x86mem_regs					is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package codetree_eval= x86codetree_eval;		# x86codetree_eval				is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	mem_reg_base = THE (instruction_set_x86::cells::esp););


package x86_control_flow_graph					#  Flowgraph data package specialized to X86 instructions 
    = 
    control_flow_graph_g (					# control_flow_graph_g				is from   src/lib/compiler/lower/flowgraph/control-flow-graph-g.pkg
	package instruction_set = instruction_set_x86;		# instruction_set_x86				is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package pseudo_op= x86pseudo_ops;			# x86pseudo_ops					is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package graph_guts= directed_graph;			# directed_graph				is from   src/lib/graph/directed-graph.pkg
	package instruction_properties
            =
            x86_instruction_semantic_properties;		# x86_instruction_semantic_properties		is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
	package asm= x86asm_emitter;				# x86asm_emitter				is from   src/lib/compiler/codegen/x86/x86-codetree.pkg
    );
  


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
