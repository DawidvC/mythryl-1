## eqtypes.pkg 

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6


# This file does not belong here.
# It relies on the module semantics and
# it should be moved to modules/ directory. (ZHONG)    XXX BUGGO FIXME


api Eq_Types {

    eq_analyze:  (module::Package,
		  (stamp::Stamp -> Bool),
		  error_message::Plaint_Sink)
		-> Void;

    define_eq_props:  (List( types::Type_Constructor ),
		       expand_type_constructor::Api_Context,
		       typechecker_dictionary::Typechecker_Dictionary)
		    -> Void;

    check_eq_ty_sig:  (types::Type,
		       types::Type_Scheme_Arg_Eq_Properties) 
		   -> Bool;

       # check whether type type is an equality type, given a Type_Scheme_Arg_Eq_Properties
       # indicating which TYPE_SCHEME_ARG_I elements are equality types.  
       # This isn't accurate on (relatized) types containing PATHtycs,
       # which are effectively treated as CHUNK


    is_equality_tycon:  types::Type_Constructor -> Bool;
    is_equality_type:  types::Type -> Bool;
    debugging:  Ref(  Bool );

};


package eq_types

: (weak)  Eq_Types		# Eq_Types	is from   src/lib/compiler/front/typechecker/types/eqtypes.pkg

{
    # Functions to determine and check equality types 
    #
    stipulate

        package em = error_message;	# error_message		is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
	package ip = inverse_path;	# inverse_path		is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package ts = type_stuff;	# type_stuff		is from   src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg
	package m  = module;		# module		is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
	package ms = module_stuff;	# module_stuff		is from   src/lib/compiler/front/typecheck-stuff/modules/module-stuff.pkg

	include types;
        include stamp;
        include type_stuff;

    herein 

	#  Debugging 
	fun bug msg = em::impossible("EqTypes: " + msg);
	say = control_print::say;
	debugging = REF FALSE;

	fun if_debugging_say (msg: String)
            =
	    if   *debugging 
                say msg;
                say "\n";
            fi;

	fun all (f: X -> Bool) [] =>   TRUE;
	    all f (x ! r)         =>   f x  and  all f r;
        end;

	#  join of eqprops 

	exception INCONSISTENT;

	fun join (UNDEF, YES) => YES;
	    join (YES, UNDEF) => YES;
	    join (UNDEF, NO) => NO;
	    join (NO, UNDEF) => NO;
	    join (UNDEF, INDETERMINATE) => INDETERMINATE;
	    join (INDETERMINATE, UNDEF) => INDETERMINATE;
	    join (UNDEF, DATA) => DATA;
	    join (DATA, UNDEF) => DATA;
	    join (UNDEF, UNDEF) => UNDEF;
	    join (DATA, YES) => YES;
	    join (YES, DATA) => YES;
	    join (DATA, NO) => NO;
	    join (NO, DATA) => NO;
	    join (DATA, INDETERMINATE) => INDETERMINATE;
	    join (INDETERMINATE, DATA) => INDETERMINATE;
	    join (DATA, DATA) => DATA;
	    join (INDETERMINATE, YES) => YES; #  ? 
	    join (YES, INDETERMINATE) => YES; #  ? 
	    join (INDETERMINATE, NO) => NO;
	    join (NO, INDETERMINATE) => NO;
	    join (INDETERMINATE, INDETERMINATE) => INDETERMINATE;
	    join (YES, YES) => YES;
	    join (NO, NO) => NO;
	    join (CHUNK, CHUNK) => CHUNK;
	    join (EQ_ABSTRACT, e) => join (NO, e);
	    join (e, EQ_ABSTRACT) => join (e, NO);
	    join (e1, e2)
                => 
	        {   say (string::cat [ts::equality_property_to_string e1, ", ", ts::equality_property_to_string e2, "\n"]);
	            raise exception INCONSISTENT;
                };
        end;

	fun chunk_type_constructor (PRIMITIVE_TYPE_CONSTRUCTOR { eq => REF CHUNK, ... } ) => TRUE;
	    chunk_type_constructor _ => FALSE;
        end;

	#  Calculating eqtypes in toplevel apis 

	exception NOT_EQ;
	exception UNBOUND_STAMP;

	# eqAnalyze is called in just one place,
        # in MacroExpand, to compute the actual
        # eqprops of types in a macro expanded api.
        #
        # It has to propagate equality properties to respect type equivalences
	# induced by sharing  constraints. 
	#
	fun eq_analyze (str, local_stamp:  stamp::Stamp -> Bool, err:  em::Plaint_Sink)
            =
	    {   tycons  =  REF stamp_map::empty;
		depend  =  REF stamp_map::empty;
		dependr =  REF stamp_map::empty;

		equality_property     =  REF stamp_map::empty;
		depends_indeterminate =  REF FALSE;

		my tyc_stamps_ref:  Ref( List( Stamp ) )
                    =
                    REF NIL;

		fun dfl_apply dfl (mr, k)
                    =
		    case (stamp_map::get (*mr, k))
			NULL => dfl;
			THE x => x;
                    esac;

		fun apply_map'  x   =   dfl_apply [] x;
		fun apply_map'' x   =   dfl_apply UNDEF x;

		fun update_map mr (k, v)
                    =
                    mr := stamp_map::set (*mr, k, v);

		err   =   fn s =  err em::ERROR s em::null_error_body;

		fun checkdcons ( datatyc_stamp: Stamp,
			         evalty: Type -> Type,
			         dcons: List( Constructor_Description ),
			         stamps,
                                 members,
                                 free_type_constructors
                               )
                               : ((Equality_Property, List( Stamp )) )
                    =
		    {   depend                =  REF([]: List( Stamp ));
			depends_indeterminate =  REF FALSE;

			fun member (stamp,[]) => FALSE;
			    member (st, st' ! rest) => stamp::eq (st, st') or member (st, rest);
                        end;

			fun eqtyc (type_constructor as PRIMITIVE_TYPE_CONSTRUCTOR { stamp, eq, ... } )
				=>
				case *eq
				     YES               =>  ();
				     CHUNK             =>  ();

				    (NO | EQ_ABSTRACT) =>  raise exception NOT_EQ;
				    INDETERMINATE      =>  depends_indeterminate := TRUE;

				    (DATA | UNDEF)
					 =>
					 if (not ( (member (stamp,*depend)) 
					           or
                                                   stamp::eq (stamp, datatyc_stamp)
                                            )    )

					     depend :=  stamp ! *depend;
                                         fi;
				esac;

			    eqtyc (RECORD_TYPE_CONSTRUCTOR _) => ();
			    eqtyc _ => bug "eqAnalyze::eqtyc";
                        end 

			also
			fun eqty (TYPE_VARIABLE_REF { id, ref_typevar => REF (RESOLVED_TYPE_VARIABLE type) } ) 
				=>
				eqty type;  #  shouldn't happen 

			    eqty (type as CONSTRUCTOR_TYPE (type_constructor, args))
				=>
				{   ntyc = case type_constructor

					       FREE_TYPE i
						 =>
						 (list::nth (free_type_constructors, i) except _ =
						    bug "unexpected free_type_constructors in eqty");

					       _ => type_constructor;
					   esac;

				    case ntyc

					PRIMITIVE_TYPE_CONSTRUCTOR _
					    =>
					    if (not (chunk_type_constructor ntyc)) 
						 eqtyc ntyc;
						 apply eqty args;
					    fi;

					DEFINED_TYPE_CONSTRUCTOR { type_scheme, ... }
					    =>
					    eqty (head_reduce_type type);

					RECURSIVE_TYPE i
					    =>
					    {  stamp = vector::get (stamps, i);

						my { type_constructor_name, constructor_list, ... }
						    :
						    Datatype_Member
						    =  
						    vector::get (members, i);


						if (   not (member (stamp,*depend))
						   and not (stamp::eq (stamp, datatyc_stamp))
						   )

						     depend := stamp ! *depend;
						fi;
					    };

				       _ => apply eqty args;
				  esac;
				};

			   eqty _ => (); end;

			fun eqdcon { domain => THE type',  name,  representation } => eqty type';
			    eqdcon _ => ();
                        end;

		    
                        apply eqdcon dcons;

			case (*depend, *depends_indeterminate)
			    ([], FALSE) => (YES,[]);
			    (d,  FALSE) => (DATA, d);
			    (_,  TRUE ) => (INDETERMINATE,[]);
                        esac;
		    }
		    except
                        NOT_EQ =  (NO,[]);

		fun addstr (str as m::A_PACKAGE { an_api, typechecked_package => { typechecker_dictionary, ... }, ... } )
			=>
			{   fun addtyc (type_constructor as (PRIMITIVE_TYPE_CONSTRUCTOR { stamp, eq, kind, path, ... } ))
				    =>
				    if (local_stamp stamp)	  #  local spec 

					 {   update_map tycons
						     (stamp, type_constructor ! apply_map'(tycons, stamp));
						     tyc_stamps_ref := stamp ! *tyc_stamps_ref;
					     case kind

						 DATATYPE { index, stamps, family=> { members, ... },
							     root, free_type_constructors }
						     =>
						     {   dcons = .constructor_list (vector::get (members, index));
							 eq_orig = *eq;

							 my (eqp_calc, deps)
							     =
							     case eq_orig

								 DATA
								     => 
								     checkdcons (stamp,
										ms::translate_type  typechecker_dictionary,
										dcons, stamps, members,
										free_type_constructors);

								 e => (e,[]);
							     esac;

							 #  ASSERT: e = YES or NO 
							 eq' =
							     join (join (eq_orig,
								       apply_map''(equality_property, stamp)),
								  eqp_calc);

							 eq := eq';

							 update_map equality_property (stamp, eq');

							 apply (fn s = update_map dependr (s, stamp ! apply_map'(dependr, s)))
							       deps;

							 update_map depend
							       (stamp, deps @ apply_map'(depend, stamp));
						     };

						 (FLEXIBLE_TYPE_CONSTRUCTOR _ | ABSTRACT _ | PRIMITIVE _)
						     =>
						     {   eq' = join (apply_map''(equality_property, stamp), *eq);

							 eq := eq';
							 update_map equality_property (stamp, eq');
						     };

						   _ => bug "eqAnalyze::scan::tscan";
					     esac;
					 }
					 except
					     INCONSISTENT
						 = 
						 err "inconsistent equality properties";

				    fi; #  external -- assume equality_property already defined 

				addtyc _ => ();
			    end;

			    if (local_stamp (ms::get_package_stamp str))
				list::apply (fn s => addstr s; end ) (ms::get_packages str);
				list::apply (fn t => addtyc t; end ) (ms::get_type_constructors str);
				#  BUG? - why can we get away with ignoring generic elements??? XXX BUGGO FIXME 
			    fi;
			};

		    addstr _ => ();   #  must be external or error package 
                end;

		fun propagate (eqp, depset, earlier)
                    =
                    prop
                    where
		        fun prop stamp'
                            =
			    apply (fn s
                                     =
				     {   eqpold = apply_map''(equality_property, s);
				         eqpnew = join (eqp, eqpold);

				         if (eqpold != eqpnew)
					       update_map equality_property (s, eqp);
					       if (earlier s) prop s; fi;
					 fi;
				      }
                                      except
                                          INCONSISTENT
                                              =
					      err "inconsistent equality properties B"
                                  )
				  (depset (stamp')); 
		    end;

		#  Propagate the NO equality_property forward and the YES equality_property backward 

		fun propagate_yes_no (stamp)
                    =
		    {   fun earlier s
                            =
                            stamp::compare (s, stamp) == LESS;
		    
                        case (apply_map''(equality_property, stamp))
			  
                             YES => propagate (YES, (fn s =  apply_map'(depend,  s)), earlier) stamp;
			     NO  => propagate (NO,  (fn s =  apply_map'(dependr, s)), earlier) stamp;
			     _   => ();
                        esac;
		    };


		#  Propagate the IND equality_property 

		fun propagate_ind (stamp)
                    =
		    {   fun depset s
                            =
                            apply_map'(dependr, s);

			fun earlier s
                            =
                            stamp::compare (s, stamp) == LESS;
		    
                        case (apply_map''(equality_property, stamp))
			  
			    UNDEF
				=>
				{   update_map equality_property (stamp, INDETERMINATE);
				      propagate (INDETERMINATE, depset, earlier) stamp;
				};

			    INDETERMINATE =>
				propagate (INDETERMINATE, depset, earlier) stamp;

			    _ => ();
                        esac;
		    };

		# Phase 0: scan api strenv, joining
                # eqprops of shared tycons 
		#
		addstr str;

		tyc_stamps
                    =
                    list_mergesort::sort
                        (fn xy =  stamp::compare xy == GREATER)
                        *tyc_stamps_ref;
	     
		#  Phase 1: propagate YES backwards and NO forward 
		#
		apply propagate_yes_no tyc_stamps;

		#  Phase 2: convert UNDEF to INDETERMINATE and propagate INDETERMINATEs 
		#
		apply propagate_ind tyc_stamps;

		#  Phase 3: convert DATA to YES; reset stored eqprops from equality_property map 
		#
		apply
                    (fn s = {   eqp = case (apply_map''(equality_property, s))
					  DATA => YES;
					  e => e;
                                      esac;

				fun set (PRIMITIVE_TYPE_CONSTRUCTOR { eq, ... } )
                                        =>
                                        eq := eqp;

				    set _ => ();
				end;

				apply set (apply_map'(tycons, s)); 
			    }
                    )
		    tyc_stamps;
	    };

	exception CHECKEQ;


	# WARNING - defineEqTycon uses eq field REF as a type_constructor identifier.  
	# Since defineEqTycon is called only within typecheck_datatype_declaration, this
	# should be ok.

	void_type = type_types::void_type;

	fun member (_,[])
                =>
                FALSE;

	    member (i: Int, j ! rest)
                =>
                i == j   or
                member (i, rest);
        end;

	fun names_to_string ([]: List( symbol::Symbol ))
                =>
                "[]";

	    names_to_string (x ! xs)
		=>
		string::cat ("["
                              ! (symbol::name x)
                              ! fold_left (fn (y, l) = ", " ! (symbol::name y) ! l)    ["]"]    xs
                            );
        end;

	fun define_eq_props (datatype_constructors, api_context, api_typechecker_dictionary)
            = 
	    {   names =   map ts::type_constructor_name datatype_constructors;

		if_debugging_say (">>defineEqProps: "  +  names_to_string  names);

		n = list::length datatype_constructors;

		my { family => { members, ... },   free_type_constructors, ... }
                    =
		    case (list::head  datatype_constructors)
                      
			PRIMITIVE_TYPE_CONSTRUCTOR { kind => DATATYPE x, ... }
                            =>
                            x;

			_ => bug "defineEqProps (list::head datatype_constructors)";
                    esac;

		eqs = map get datatype_constructors
                      where
		          fun get (PRIMITIVE_TYPE_CONSTRUCTOR { eq, ... } ) => eq;
			      get _ => bug "eqs: get";
			  end;
		      end;

		fun get_eq i
                    = 
		    *(list::nth (eqs, i))
		    except
                        (SUBSCRIPT | INDEX_OUT_OF_BOUNDS)
                            =
			    {   say "@@@getEq ";
                                say (int::to_string i);
                                say " from ";
				say (int::to_string (length eqs));
                                say "\n";
				raise exception SUBSCRIPT;
                            };


		fun set_eq (i, eqp)
                    =
		    {   if_debugging_say (string::cat ["setEq: ", int::to_string i, " ",
					 ts::equality_property_to_string eqp]);

		        (list::nth (eqs, i) := eqp)
		        except
                            (SUBSCRIPT | INDEX_OUT_OF_BOUNDS)
                                =
		                {   say (string::cat ["@@@setEq ", (int::to_string i), " from ",
			                (int::to_string (length eqs)), "\n"]);

		                    raise exception SUBSCRIPT;
                                };
                    };

		visited = REF ([]: List( Int ));

		fun check_type_constructor (type_constructor0 as PRIMITIVE_TYPE_CONSTRUCTOR { eq, kind, path, ... } )
                     =>
		     case (*eq, kind)

			 (DATA, DATATYPE { index, ... } )
			     =>
			     {   if_debugging_say (">>check_type_constructor: " +
						   symbol::name (ip::last path) + " " +
						   int::to_string index);

				 fun eqtyc (PRIMITIVE_TYPE_CONSTRUCTOR { eq => e', kind => k', path, ... } )
					 =>
					 case (*e', k')

					     (DATA, DATATYPE { index, ... } )
						 =>
						 {   if_debugging_say ("eqtyc[PRIMITIVE_TYPE_CONSTRUCTOR (DATA)]: " +
							    symbol::name (ip::last path) +
							    " " + int::to_string index);

						     #  ASSERT: argument type_constructor is a member of datatype_constructors 

						     check_domains index;
						 };

					     (UNDEF, _)
						 =>
						 {   if_debugging_say ("eqtyc[PRIMITIVE_TYPE_CONSTRUCTOR (UNDEF)]: " +
							    symbol::name (ip::last path));

						     INDETERMINATE;
						 };

					     (eqp, _)
						 =>
						 {   if_debugging_say ("eqtyc[PRIMITIVE_TYPE_CONSTRUCTOR(_)]: " +
							    symbol::name (ip::last path) +
							    " " + ts::equality_property_to_string eqp);

						     eqp;
						 };
					 esac;

				     eqtyc (RECURSIVE_TYPE i)
					 => 
					 {   if_debugging_say ("eqtyc[RECURSIVE_TYPE]: " + int::to_string i);

					     check_domains i;
					 };

				     eqtyc (RECORD_TYPE_CONSTRUCTOR _) => YES;
				     eqtyc (ERRONEOUS_TYPE_CONSTRUCTOR) => INDETERMINATE;
				     eqtyc (FREE_TYPE i) => bug "eqtyc - FREE_TYPE";
				     eqtyc (TYPE_CONSTRUCTOR_BY_MODULE_PATH _) => bug "eqtyc - TYPE_CONSTRUCTOR_BY_MODULE_PATH";
				     eqtyc (DEFINED_TYPE_CONSTRUCTOR _) => bug "eqtyc - DEFINED_TYPE_CONSTRUCTOR";
				 end 

				 also
				 fun check_domains i
				     =
				     if (member (i, *visited))

					 get_eq i;
				     else
					 visited := i ! *visited;

					 my { type_constructor_name, constructor_list, ... } : Datatype_Member
					     =
                                             vector::get (members, i)
					     except (SUBSCRIPT|INDEX_OUT_OF_BOUNDS)
						 =
						 {   say (string::cat
							   ["@@@getting member ",
							    int::to_string i,
							    " from ",
							    int::to_string (vector::length members), "\n"]);

						     raise exception SUBSCRIPT;
						 };

					 if_debugging_say (
						     "checkDomains: visiting "
						   + symbol::name type_constructor_name
						   + " "
						   + int::to_string i
						 );

					 domains
					     = 
					     map fn { domain=>THE type, name, representation } => type;
						    { domain=>NULL, name, representation } => void_type;
                                                 end
						 constructor_list;

					 eqp = eqtylist (domains);

					 set_eq (i, eqp);

					 if_debugging_say
					   (
					       "checkDomains: setting "
					     + int::to_string i
					     + " to "
					     + ts::equality_property_to_string eqp
					   );

					 eqp;
				     fi

				 also
				 fun eqty (TYPE_VARIABLE_REF { id, ref_typevar => REF (RESOLVED_TYPE_VARIABLE type) } )
					 =>
					 #  shouldn't happen 
					 eqty type;

				     eqty (CONSTRUCTOR_TYPE (type_constructor, args))
					 =>
					 case (expand_type_constructor::expand_type_constructor ( type_constructor, api_context, api_typechecker_dictionary))

					     FREE_TYPE i
						 =>
						 {   if_debugging_say ("eqtyc[FREE_TYPE]: " + int::to_string i);

						     tc = (list::nth (free_type_constructors, i)
							       except _ =
								      bug "unexpected free_type_constructors 343");

						     eqty (CONSTRUCTOR_TYPE (tc, args));
						 };

					     DEFINED_TYPE_CONSTRUCTOR { type_scheme, ... }
						 =>
						 # shouldn't happen - type abbrevs in domains
						 # should have been expanded
						 eqty (apply_type_scheme (type_scheme, args));

					     type_constructor
						 => 
						 case (eqtyc type_constructor)

						     ( NO
						     | EQ_ABSTRACT
						     )          =>  NO;

						     CHUNK     =>  YES;
						     YES       =>  eqtylist args;

						     DATA => case (eqtylist args)
								 YES => DATA;
								 e   => e;
							     esac;

						     INDETERMINATE => INDETERMINATE;

						     UNDEF => 
						      bug ("defineEqTycon::eqty: UNDEF - " +
							   symbol::name (ts::type_constructor_name type_constructor));
						 esac;
					 esac;

				     eqty _ => YES;
				 end 

				 also
				 fun eqtylist tys
				     =
				     loop (tys, YES)
				     where
					 fun loop ([], eqp)
						 =>
						 eqp;

					     loop (type ! rest, eqp)
						 =>
						 case (eqty type)

						     ( NO
						     | EQ_ABSTRACT
						     )    => NO;			# Return NO immediately; no further checking.

						     YES           => loop (rest, eqp);
						     INDETERMINATE => loop (rest, INDETERMINATE);

						     DATA => case eqp
							       INDETERMINATE => loop (rest, INDETERMINATE);
							       _             => loop (rest, DATA         );
							     esac;

						     _ => bug "defineEqTycon::eqtylist";
						 esac;
					 end;
				     end;


				 case (eqtyc type_constructor0)

				     YES => apply (fn i = case (get_eq i)
							      DATA => set_eq (i, YES);
							      _    => ();
							  esac
						  )

						  *visited;

				     DATA => apply (fn i = case (get_eq i)
							      DATA => set_eq (i, YES);
							     _ => ();
							   esac
						   )

						   *visited;

				     NO => apply (fn i = if (i > index)
							      case (get_eq i)
								  INDETERMINATE => set_eq (i, DATA);
								 _ => ();
							      esac;
							 fi
						 )

						*visited;

				     # Have to be reanalyzed, throwing away information ???  XXX BUGGO FIXME
				     #
				     INDETERMINATE =>  ();
				     _             =>  bug "defineEqTycon";

				 esac;

				 #  ASSERT: equality_property of typeconstructor0 is YES, NO, or INDETERMINATE 
				 #	
				 case *eq

				      (YES | NO | INDETERMINATE) => ();

				      DATA
					  =>
					  bug ("checkTypeConstructor[=>DATA]: " + symbol::name (ip::last path));

				      _ =>
					  bug ("checkTypeConstructor[=>other]: " + symbol::name (ip::last path));
				 esac;
			     };
			_ => ();
                    esac;

		    check_type_constructor _ => ();
                end;
	    
		list::apply check_type_constructor datatype_constructors;
	    };

	fun is_equality_type type
            =
	    {   fun eqty (TYPE_VARIABLE_REF { id, ref_typevar => REF (RESOLVED_TYPE_VARIABLE type) } )
                        =>
                        eqty type;

		    eqty (TYPE_VARIABLE_REF { id, ref_typevar => REF (META_TYPE_VARIABLE { eq, ... } ) } )
			=>
			if   eq      ();
			else   raise exception CHECKEQ;
                        fi;

		    eqty (TYPE_VARIABLE_REF { id, ref_typevar => REF (INCOMPLETE_RECORD_TYPE_VARIABLE { eq, ... } ) } )
			=>
			if   eq      ();
			else   raise exception CHECKEQ;
                        fi;

		    eqty (CONSTRUCTOR_TYPE (DEFINED_TYPE_CONSTRUCTOR { type_scheme, ... }, args))
			=>
			eqty (apply_type_scheme (type_scheme, args));

		    eqty (CONSTRUCTOR_TYPE (PRIMITIVE_TYPE_CONSTRUCTOR { eq, ... }, args))
			=>
			case *eq
			     CHUNK => ();
			     YES   => apply eqty args;
			     (NO | EQ_ABSTRACT | INDETERMINATE) => raise exception CHECKEQ;
			     _ => bug "isEqType";
                        esac;

		    eqty (CONSTRUCTOR_TYPE (RECORD_TYPE_CONSTRUCTOR _, args))
                        =>
                        apply eqty args;

		    eqty _ => ();
                end;
	    
                eqty type;
                TRUE;
	    }
	    except
                CHECKEQ = FALSE;

	fun check_eq_ty_sig (type, an_api: Type_Scheme_Arg_Eq_Properties)
            =
	    {   fun eqty (TYPE_VARIABLE_REF { id, ref_typevar => REF (RESOLVED_TYPE_VARIABLE type) } )
                        =>
                        eqty type;

		    eqty (CONSTRUCTOR_TYPE (DEFINED_TYPE_CONSTRUCTOR { type_scheme, ... }, args))
			=>
			eqty (apply_type_scheme (type_scheme, args));

		    eqty (CONSTRUCTOR_TYPE (PRIMITIVE_TYPE_CONSTRUCTOR { eq, ... }, args))
			=>
			case *eq
			      CHUNK => ();
			     YES => apply eqty args;
			     (NO | EQ_ABSTRACT | INDETERMINATE) => raise exception CHECKEQ;
			     _ => bug "checkEqTySig";
			esac;

		    eqty (TYPE_SCHEME_ARG_I n)
			=> 
			{   eq = list::nth (an_api, n);

			    if eq  ();
                            else   raise exception CHECKEQ;
                            fi;
			};

		    eqty _ => ();
                end;
	    
                eqty type;
		TRUE;
	    }
	    except
                CHECKEQ = FALSE;

	fun replicate (0, x)  =>  NIL;
            replicate (i, x)  =>  x ! replicate (i - 1, x);
        end;

	fun is_equality_tycon (PRIMITIVE_TYPE_CONSTRUCTOR { eq, ... } )
		=>
		case *eq
		    YES   => TRUE;
		    CHUNK => TRUE;
		    _     => FALSE;
                esac;

	    is_equality_tycon (DEFINED_TYPE_CONSTRUCTOR { type_scheme as TYPE_SCHEME { arity, ... }, ... } )
		=>
		is_equality_type (apply_type_scheme (type_scheme, replicate (arity, type_types::int_type)));

	    is_equality_tycon _
                =>
                bug "is_equality_tycon";
        end;

    end;	# stipulate
};		# package eq_types 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
