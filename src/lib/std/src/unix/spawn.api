## spawn.api	-- high-level api for spawning unix child processes.

# Compiled by:
#     src/lib/std/src/stdlib-core.make6



# An API for running subprocesses which is richer than
# the portable one provided by Winix_Process in
#
#     src/lib/std/src/winix/winix-process.api
#
# but simpler than the raw Posix api provided by Posix_Process in
#
#     src/lib/std/src/posix/posix-process.api 
#
# This API is only implemented for posix systems.

api Spawn {

    Process( X, Y );

    Signal;

    Exit_Status
        = W_EXITED
	| W_EXITSTATUS unt8::Unt
	| W_SIGNALED   Signal
	| W_STOPPED    Signal;

    from_status
	:
        winix_types::process::Status
        ->
        Exit_Status;

    # spawn_process_in_environment (path, args, env)
    #
    #   forks/execs new process given by path
    #   The new process will have environment env, and
    #   arguments args prepended by the last arc in path
    #   (following the Unix convention that the first argument
    #   is the command name).
    #   Returns an abstract type proc, which represents
    #   the child process plus streams attached to the
    #   the child process stdin/stdout.
    #
    #   Simple command searching can be obtained by using
    #     spawn_in_env ("/bin/sh", "-c" . args, env)
    #
    spawn_process_in_environment
	:
        (String, List( String ), List( String ))
        ->
        Process( X, Y );

    spawn_process
	:
	(String, List( String ))
        ->
        Process( X, Y );

    spawn
	:
	(String, List( String ))
        ->
	{ from_stream:     file::Input_Stream,
          to_stream:       file::Output_Stream,
          process:  Process (file::Input_Stream, file::Output_Stream)
        };

    bash: String -> String;

    # *{ In, Out } streams_of proc
    # returns an Input_Stream and Output_Stream used to read
    # from and write to the stdout and stdin of the 
    # spawned process.
    #
    # The underlying files are set to be close-on-exec.

    txt_instream_of:    Process(      file::Input_Stream, X ) ->      file::Input_Stream;
    bin_instream_of:    Process( binary_io::Input_Stream, X ) -> binary_io::Input_Stream;

    txt_outstream_of:   Process( X,      file::Output_Stream ) ->      file::Output_Stream;
    bin_outstream_of:   Process( X, binary_io::Output_Stream ) -> binary_io::Output_Stream;

    streams_of
        :  Process (file::Input_Stream, file::Output_Stream)
        ->         (file::Input_Stream, file::Output_Stream);

    # reap proc
    # This closes the associated streams and waits for the
    # child process to finish, returns its exit status.
    #
    # Note that even if the child process has already exited,
    # so that reap returns immediately,
    # the parent process should eventually reap it. Otherwise,
    # the process will remain a zombie and take a slot in the
    # process table.
    #
    reap:  Process( X, Y ) -> winix_types::process::Status;

    # kill (proc, signal)
    # sends the Posix signal to the associated process.

    kill:  (Process( X, Y ), Signal) -> Void;

    exit:  unt8::Unt -> X;

};


# SML/NJ calls this 'Unix'


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
