
# Compiled by:
#     src/lib/compiler/lower/tools/sml-ast.make6

# Various translation functions



###                   "Science is built up of facts,
###                    as a house is with stones.
###                    But a collection of facts
###                    is no more a science than
###                    a heap of stones is a house."
###
###                              -- Henri Poincare



generic package mdl_raw_syntax_rewriter_g (raw_syntax:  Mdl_Ast)		# Mdl_Ast		is from   src/lib/compiler/lower/tools/fake-sml-ast/ast.api

: (weak) Mdl_Ast_Rewriter						# Mdl_Ast_Rewriter	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast-rewrite.api

{
   package raw_syntax = raw_syntax;
   package error= mdlerror;	# mdlerror	is from   src/lib/compiler/lower/tools/source-map/error.pkg

    Rewriter( X )   = (X -> X) -> (X -> X);

    Clients = { expression:   Rewriter( raw_syntax::Expression ),
                   decl:  Rewriter( raw_syntax::Decl ),
                   sexp:  Rewriter( raw_syntax::Package_Exp ),
                   pattern:   Rewriter( raw_syntax::Pattern ),
                   type: Rewriter( raw_syntax::Some_Type )
                  };
    Trans = { expression:   raw_syntax::Expression -> raw_syntax::Expression,
                 decl:  raw_syntax::Decl -> raw_syntax::Decl,
                 sexp:  raw_syntax::Package_Exp -> raw_syntax::Package_Exp,
                 pattern:   raw_syntax::Pattern -> raw_syntax::Pattern,
                 type: raw_syntax::Some_Type -> raw_syntax::Some_Type
                };

   include raw_syntax;

   fun no_rewrite f e =   e;

   fun opt f NULL => NULL;
       opt f (THE e) => THE (f e);
   end;

   fun rewrite { expression=>rw_expression, decl=>rw_decl, pattern=>rw_pattern, sexp=>rw_sexp, type=>rw_type }
       = 
       {   fun expression e
	       =
	       {   e = case e
                         
			    CONSEXP (id, THE e) => CONSEXP (id, THE (expression e));
			    LISTEXP (es, e) => LISTEXP (map expression es, opt expression e);
			    TUPLEEXP es => TUPLEEXP (map expression es);
			    VECTOR_EXPRESSION es => VECTOR_EXPRESSION (map expression es);
			    RECORD_EXPRESSION es => RECORD_EXPRESSION (map (fn (l, e) => (l, expression e); end ) es);
			    SEQUENTIAL_EXPRESSIONS es => SEQUENTIAL_EXPRESSIONS (map expression es);
			    APPLY_EXPRESSION (f, x) => APPLY_EXPRESSION (expression f, expression x); 
			    IF_EXPRESSION (x, y, z) => IF_EXPRESSION (expression x, expression y, expression z);
			    RAISE_EXPRESSION e => RAISE_EXPRESSION (expression e);
			    EXCEPT_EXPRESSION (e, c) => EXCEPT_EXPRESSION (expression e, map clause c);
			    CASE_EXPRESSION (e, c) => CASE_EXPRESSION (expression e, map clause c);
			    LAMBDAEXP c => LAMBDAEXP (map clause c);
			    LET_EXPRESSION (d, e) => LET_EXPRESSION (map decl d, map expression e);
			    TYPEDEXP (e, t) => TYPEDEXP (expression e, type t);
			    SOURCE_CODE_REGION_FOR_EXPRESSION (l, e) => { error::set_loc l; SOURCE_CODE_REGION_FOR_EXPRESSION (l, expression e);};
			    LOCEXP (id, e, region) => LOCEXP (id, expression e, region);
			    BITSLICEEXP (e, slices) => BITSLICEEXP (expression e, slices); 
			    TYPEEXP t => TYPEEXP (type t);
			    CONTEXP (e, x) => CONTEXP (expression e, x);
			    e => e;
                       esac;

		  rw_expression expression e;
               }

	    also
	    fun decl d
		=
		rw_decl decl d
                where
		    d =  case d
                           
			      DATATYPEDECL (dbs, tbs) => DATATYPEDECL (map dbind dbs, map tbind tbs);
			      FUNDECL (fbs) => FUNDECL (map fbind fbs);
			      RTLDECL (p, e, l) => RTLDECL (pattern p, expression e, l); 
			      RTLSIGDECL (id, t) => RTLSIGDECL (id, type t);
			      VALDECL (vbs) => VALDECL (map vbind vbs);
			      VALUE_API_DECL (id, t) => VALUE_API_DECL (id, type t);
			      TYPE_API_DECL (id, tvs) => TYPE_API_DECL (id, tvs);
			      LOCALDECL (d1, d2) => LOCALDECL (map decl d1, map decl d2);
			      SEQDECL ds => SEQDECL (map decl ds);
			      PACKAGEDECL (id, ds, s, se) => 
				  PACKAGEDECL (id, map decl ds, sigconopt s, sexp se);
			      GENERICDECL (id, ds, s, se) => 
				  GENERICDECL (id, map decl ds, sigconopt s, sexp se);
			      INCLUDE_API_DECL s => INCLUDE_API_DECL (api_expression s);
			      API_DECL (id, s) => API_DECL (id, api_expression s);
			      PACKAGEAPIDECL (id, s) => PACKAGEAPIDECL (id, api_expression s);
			      OPENDECL ids => OPENDECL ids; 
			      GENERICARGDECL (id, se) => GENERICARGDECL (id, sigcon se);
			      EXCEPTIONDECL ebs => EXCEPTIONDECL (map ebind ebs);
			      MARKDECL (l, d) => { error::set_loc l; MARKDECL (l, decl d);};
			      d => d;
                         esac;
                end

	    also
	    fun sigcon { abstract, api_expression => se }
                =
                { abstract,
                  api_expression => api_expression se
                }

	    also
	    fun sigconopt s = null_or::map sigcon s

	    also
	    fun ebind (b as EXCEPTIONBIND (id, NULL)) => b;
		 ebind (EXCEPTIONBIND (id, THE t)) => EXCEPTIONBIND (id, THE (type t));
		 ebind (b as EXCEPTIONEQBIND _) => b;
	    end 

	    also
	    fun api_expression se
		= 
		se
                where
		    se = case se
                           
			      IDSIG _ => se;

			      WHERESIG (se, ident, s)
				  => 
				  WHERESIG (api_expression se, ident, sexp s);

			      WHERETYPESIG (se, ident, t)
				  =>
				  WHERETYPESIG (api_expression se, ident, type t);

			      DECLSIG ds
				  =>
				  DECLSIG (map decl ds);
                         esac;
                end

	    also
	    fun sexp se
		=
		{   se =  case se
			    
			       APPSEXP (a, se)         =>   APPSEXP (sexp a, sexp se);
			       DECLSEXP ds             =>   DECLSEXP (map decl ds);
			       CONSTRAINEDSEXP (s, si) =>   CONSTRAINEDSEXP (sexp s, api_expression si);
			       IDSEXP _                =>   se;
		          esac;

		    rw_sexp sexp se;
		}

	    also
	    fun type t
		= 
		{  t = case t
                         
			    IDTY _ => t;
			    TYVARTY _ => t;
			    INTVARTY _ => t;
			    TYPE_VARIABLE_TYPE(_, _, _, REF (THE t)) => type t;
			    TYPE_VARIABLE_TYPE(_, _, _, REF NULL) => t;
			    APPTY (f, ts) => APPTY (f, map type ts);
			    FUNTY (a, b) => FUNTY (type a, type b); 
			    TUPLETY ts => TUPLETY (map type ts);
			    RECORDTY lts => RECORDTY (map (fn (l, t) => (l, type t); end ) lts);
			    TYPE_SCHEME_TYPE (ts, t) => TYPE_SCHEME_TYPE (map type ts, type t);
			    LAMBDATY (ts, t) => LAMBDATY (map type ts, type t);
			    CELLTY _ => t;
                       esac;

		  rw_type type t;
                }

	    also
	    fun pattern p
                =
		{ p = case p
                        
			  IDPAT id => p;
			  WILDCARD_PATTERN => p;
			  ASPAT (id, p) => ASPAT (id, pattern p);
			  LITPAT l => p;
			  LISTPAT (ps, p) => LISTPAT (map pattern ps, opt pattern p);
			  TUPLEPAT ps => TUPLEPAT (map pattern ps);
			  VECTOR_PATTERN ps => VECTOR_PATTERN (map pattern ps);
			  RECORD_PATTERN (lps, flex) => 
			      RECORD_PATTERN (map (fn (l, p) => (l, pattern p); end ) lps, flex);
			  TYPEDPAT (p, t) => TYPEDPAT (pattern p, type t);
			  CONSPAT (id, NULL) => p;
			  CONSPAT (id, THE p) => CONSPAT (id, THE (pattern p));
			  OR_PATTERN ps => OR_PATTERN (map pattern ps);
			  ANDPAT ps => ANDPAT (map pattern ps);
			  NOTPAT p => NOTPAT (pattern p);
			  WHEREPAT (p, e) => WHEREPAT (pattern p, expression e);
			  NESTEDPAT (p, e, p') => NESTEDPAT (pattern p, expression e, pattern p');
                      esac;

		 rw_pattern pattern p;
                }

	    also
	    fun fbind (FUNBIND (id, c)) = FUNBIND (id, map clause c)

	    also
	    fun clause (CLAUSE (ps, g, e)) = CLAUSE (map pattern ps, guard g, expression e)

	    also
	    fun guard NULL => NULL;
	       guard (THE e) => THE (expression e); end 

	    also
	    fun vbind (NAMED_VARIABLE (p, e)) = NAMED_VARIABLE (pattern p, expression e)

	    also
	    fun dbind db = db

	    also
	    fun tbind (TYPEBIND (x, tvs, t)) = TYPEBIND (x, tvs, type t);
	  { pattern,
	      expression,
	      decl,
	      sexp,
	      type
	    };
	};
};
