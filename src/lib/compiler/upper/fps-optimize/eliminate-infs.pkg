## eliminate-infs.pkg
## (C) 2003 The SML/NJ fellowship.
## Author: Matthias Blume (blume@tti-c.org)

# Compiled by:
#     src/lib/compiler/core.make6



# Expand out any remaining occurrences
# of test_inf, trunc_inf, extend_inf,
# and copy_inf.
#
# These primops carry a second argument
# which is a function that performs the
# operation for 32 bit precision.




###                                "John von Neumann was the only
###                                 student I was ever afraid of."
###
###                                              -- George Pólya,


package eliminate_infs
: (weak)
api {

    eliminate
        :
        { function:   fate_passing_style::Function,
	  mk_kvar:    Void -> highcode_var::Highcode_Variable,	#  new fate var. 
	  mk_i32var:  Void -> highcode_var::Highcode_Variable	#  new int32 var. 
        }
	->
        fate_passing_style::Function;

}

{
    package c = fate_passing_style;				# fate_passing_style	is from   src/lib/compiler/upper/fps/fate-passing-style.pkg

    fun eliminate { function => cfun,
                    mk_kvar,
                    mk_i32var
                  }
        =
        {
	    fun cexp (c::RECORD (rk, xl, v,  e))    =>   c::RECORD (rk, xl, v,  cexp e);
		cexp (c::SELECT (i, x, v, t, e))    =>	 c::SELECT (i, x, v, t, cexp e);
		cexp (c::OFFSET (i, v, x,    e))    =>	 c::OFFSET (i, v, x,    cexp e);

		cexp (c::APPLY    (x, xl))            =>	 c::APPLY    (x, xl);
		cexp (c::MUTUALLY_RECURSIVE_FNS    (fl, e))            =>	 c::MUTUALLY_RECURSIVE_FNS    (map function fl, cexp e);

		cexp (c::SWITCH (x, v, el))         =>	 c::SWITCH (x, v, map cexp el);
		cexp (c::BRANCH (b, xl, v, e1, e2)) =>	 c::BRANCH (b, xl, v, cexp e1, cexp e2);

		cexp (c::SETTER (s, xl, e))         =>	 c::SETTER (s, xl,       cexp e);
		cexp (c::LOOKER (l, xl, v, t, e))   =>	 c::LOOKER (l, xl, v, t, cexp e);

		cexp (c::PURE (c::p::COPY_INF 32, [x, f], v, t, e))
		    =>
		    {   k = mk_kvar ();
			e' = cexp e;

			c::MUTUALLY_RECURSIVE_FNS ([(c::FATE, k, [v], [t], e')],
			       c::APPLY (f, [c::VAR k, x, c::INT 0]));
		    };

		cexp (c::PURE (c::p::EXTEND_INF 32, [x, f], v, t, e))
		    =>
		    {   k = mk_kvar ();
			e' = cexp e;

			c::MUTUALLY_RECURSIVE_FNS ([(c::FATE, k, [v], [t], e')],
			       c::APPLY (f, [c::VAR k, x, c::INT 1]));
		    };

		cexp (   c::ARITH (c::p::TEST_INF  32, [x, f], v, t, e)
		     |   c::PURE  (c::p::TRUNC_INF 32, [x, f], v, t, e)
                     )
		    =>
		    {   k = mk_kvar ();
			e' = cexp e;

			c::MUTUALLY_RECURSIVE_FNS ([(c::FATE, k, [v], [t], e')], c::APPLY (f, [c::VAR k, x]));
		    };

		cexp (c::ARITH (c::p::TEST_INF i, [x, f], v, t, e))
		    =>
		    {   k  = mk_kvar ();
			v' = mk_i32var ();
			e' = cexp e;

			c::MUTUALLY_RECURSIVE_FNS ([(c::FATE, k, [v'], [c::INT32T],
				 c::ARITH (c::p::TEST (32, i), [c::VAR v'], v, t, e'))],
			       c::APPLY (f, [c::VAR k, x]));
		    };

		cexp (c::ARITH (a, xl, v, t, e))
                    =>
		   c::ARITH (a, xl, v, t, cexp e);

		cexp (c::PURE (c::p::TRUNC_INF i, [x, f], v, t, e))
		    =>
		    {   k = mk_kvar ();
			v' = mk_i32var ();
			e' = cexp e;

			c::MUTUALLY_RECURSIVE_FNS ([(c::FATE, k, [v'], [c::INT32T],
				 c::PURE (c::p::TRUNC (32, i), [c::VAR v'], v, t, e'))],
			       c::APPLY (f, [c::VAR k, x]));
		    };

		cexp (c::PURE (c::p::COPY_INF i, [x, f], v, t, e))
		    =>
		    {   k = mk_kvar ();
			v' = mk_i32var ();
			e' = cexp e;

			c::MUTUALLY_RECURSIVE_FNS ([(c::FATE, k, [v], [t], e')],
			       c::PURE (c::p::COPY (i, 32), [x], v', c::INT32T,
				       c::APPLY (f, [c::VAR k, c::VAR v', c::INT 0])));
		    };

		cexp (c::PURE (c::p::EXTEND_INF i, [x, f], v, t, e))
		    =>
		    {   k = mk_kvar ();
			v' = mk_i32var ();
			e' = cexp e;

			c::MUTUALLY_RECURSIVE_FNS ([(c::FATE, k, [v], [t], e')],
			       c::PURE (c::p::EXTEND (i, 32), [x], v', c::INT32T,
				       c::APPLY (f, [c::VAR k, c::VAR v', c::INT 1])));
		    };

		cexp (c::PURE (p, xl, v, t, e))
		    =>
		    c::PURE (p, xl, v, t, cexp e);

		cexp (c::RAW_C_CALL (k, s, p, xl, vtl, e))
                    =>
		    c::RAW_C_CALL (k, s, p, xl, vtl, cexp e);
            end 

	    also
	    fun function (fk, f, vl, tl, e)
                =
                (fk, f, vl, tl, cexp e);

	    function cfun;
	};
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
