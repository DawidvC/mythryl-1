## unparse-value.pkg 
## Copyright 2003 by The SML/NJ Fellowship 

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6


#  Modified to use Lib7 Lib pp. [dbm, 7/30/03]) 

api Unparse_Value {

     unparse_constructor_representation:  prettyprint::Stream
                                                    -> var_home::Constructor_Form
                                                    -> Void;

     unparse_var_home:     prettyprint::Stream -> var_home::Var_Home                                   -> Void;
     unparse_dcon:       prettyprint::Stream -> variables_and_constructors::Constructor -> Void;
     unparse_var:        prettyprint::Stream -> variables_and_constructors::Variable             -> Void;

     unparse_variable
         :
         prettyprint::Stream
	 ->
         (symbol_table::Symbol_Table, variables_and_constructors::Variable)
         ->
         Void;

     unparse_debug_dcon
         :
         prettyprint::Stream
	 ->
         symbol_table::Symbol_Table
         ->
         variables_and_constructors::Constructor -> Void;

     unparse_constructor
         :
         prettyprint::Stream
	 ->
         symbol_table::Symbol_Table
         ->
         variables_and_constructors::Constructor -> Void;

     unparse_debug_var
         :
         (inlining_information::Inlining_Information -> String)
	 -> prettyprint::Stream 
	 -> symbol_table::Symbol_Table
	 -> variables_and_constructors::Variable
	 -> Void;

}; #  Api Unparse_Value 

package unparse_value: (weak)  Unparse_Value {

    stipulate

        package pp =  prettyprint;			# prettyprint		is from   src/lib/prettyprint/src/prettyprint.pkg
	package tu =  type_stuff;			# type_stuff		is from   src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg
	package lu =  find_in_symbol_table;		# find_in_symbol_table	is from   src/lib/compiler/front/typecheck-stuff/symbol-table/find-in-symbol-table.pkg
	package a  =  var_home;				# var_home		is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
							# unparse_type		is from   src/lib/compiler/front/typechecker/print/unparse-type.pkg
	#  package ii = inlining_info 

	include prettyprint;
	include unparse_stuff;
	include variables_and_constructors;
	include types;

    herein 

	internals = typechecking_control::internals;

	fun by f x y
            =
            f y x;

	pps = pp::string;

	unparse_type             =  unparse_type::unparse_type;
	unparse_type_constructor =  unparse_type::unparse_type_constructor;
	unparse_type_scheme      =  unparse_type::unparse_type_scheme;

	fun unparse_var_home stream a
            =
            pps stream (   " ["
                       +   (a::print_var_home a)
                       +   "]"
                       );

	fun unparse_inlining_info inlining_info_to_string stream a
            =
            pps stream (" [" + (inlining_info_to_string a) + "]");

	fun unparse_constructor_representation stream representation
            =
            pp::string stream (a::print_representation representation);

	fun unparse_csig stream csig
            =
            pp::string stream (a::print_constructor_api csig);

	fun unparse_dcon stream
            =
	    { fun unparse_d ( ENUM_CONSTRUCTOR { symbol, representation => a::EXCEPTION acc, ... } )
                    =>
		    {   unparse_symbol  stream  symbol;

			if *internals
                             unparse_var_home  stream  acc; 
                        fi;
                    };

		    unparse_d (ENUM_CONSTRUCTOR { symbol, ... } )
			=>
			unparse_symbol  stream  symbol;
                end;
	    
                unparse_d;
	    };

	fun unparse_debug_dcon stream symbol_table (ENUM_CONSTRUCTOR { symbol, representation, const, constructor_type, signature, is_lazy } )
            =
	    {   my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... }
                    =
                    en_pp stream;

		unparse_symbol = unparse_symbol stream;
	    
                begin_horizontal_else_vertical_box 3;
		pps "ENUM_CONSTRUCTOR";
		break { spaces=>0, indent_on_wrap=>0 };
		pps "{ name = "; unparse_symbol symbol;                              unparse_comma_newline stream;
		pps "const = "; pps (bool::to_string const);                         unparse_comma_newline stream;
		pps "constructor_type = "; unparse_type  symbol_table  stream  constructor_type;    unparse_comma_newline stream;
		pps "is_lazy = "; pps (bool::to_string is_lazy);                     unparse_comma_newline stream;

		pps "datatype_constructor_representation =";
		unparse_constructor_representation
		    stream
		    representation;
                                                                                     unparse_comma_newline stream;
		pps "signature = [";  unparse_csig stream signature;  pps "] }";
		end_box ();
	    };

	fun unparse_constructor stream symbol_table (ENUM_CONSTRUCTOR { symbol, representation, const, constructor_type, signature, is_lazy } )
            =
	    {   my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... }
                    =
                    en_pp stream;

		unparse_symbol = unparse_symbol stream;
	    
                begin_horizontal_else_vertical_box 3;
		unparse_symbol symbol;
		pps " : ";
                unparse_type  symbol_table  stream  constructor_type;
		end_box ();
	    };

	fun unparse_datatype_constructor (   symbol_table: symbol_table::Symbol_Table,
                                               ENUM_CONSTRUCTOR { symbol, constructor_type, ... }
                                           )
                                           stream
            =
	    { my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... }
                    =
                    en_pp stream;
	    
                begin_wrap_box 0;
		unparse_symbol stream symbol;   pps " : ";
                unparse_type  symbol_table  stream  constructor_type;
		end_box ();
	    };

# Is this ever used?
	fun unparse_con_naming stream
            =
            unparse_constructor
            where

	        my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... }
                    =
                    en_pp stream;

		fun unparse_constructor (ENUM_CONSTRUCTOR { symbol, constructor_type, representation=>a::EXCEPTION _, ... }, symbol_table)
			=>
			{   begin_horizontal_else_vertical_box 0;
			    pps "exception ";
                            unparse_symbol  stream  symbol; 

			    if   (type_types::is_arrow_type  constructor_type)
			        
				 {   pps " "; 
				     unparse_type  symbol_table  stream  (type_types::domain  constructor_type);
				 };
			    fi;

			    pps ";"; 

			    end_box();
			};

		    unparse_constructor (con, symbol_table)
			=> 
			{   exception HIDDEN;

			    visible_dcon_type_constructor
				=
				{ type_constructor = tu::datatype_constructor_to_type_constructor con;

				    (   type_stuff::type_constructor_equality (
					    lu::find_type_constructor_via_symbol_path
					    (    symbol_table,
						 symbol_path::SYMBOL_PATH
						 [ inverse_path::last (type_stuff::type_constructor_path type_constructor) ],
						 fn _ = raise exception HIDDEN
					    ),
					    type_constructor
					)
					except
                                            HIDDEN = FALSE
				    );
				};

			    if (*internals
                                or
				not visible_dcon_type_constructor 
			    )
				begin_horizontal_else_vertical_box 0;
				pps "con ";
				unparse_datatype_constructor (symbol_table, con) stream;
				pps ";";
				end_box ();
                            fi;
			};
                end;
	    end;

	fun unparse_var stream (ORDINARY_VARIABLE { var_home, path, ... } )
		=>
		{   pps stream (symbol_path::to_string path);

		    if *internals
			 unparse_var_home stream var_home;
		    fi;
		};

	    unparse_var stream (OVERLOADED_IDENTIFIER { name, ... } )
		=>
		unparse_symbol stream (name);

	    unparse_var stream (errorvar)
		=>
		pp::string stream "<errorvar>";
        end;

	fun unparse_debug_var inlining_info_to_string stream symbol_table
            = 
	    {   my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... }
                    =
                    en_pp stream;

		unparse_var_home = unparse_var_home stream;
		unparse_inlining_info   = unparse_inlining_info inlining_info_to_string stream;

		fun unparsedebugvar (ORDINARY_VARIABLE { var_home, path, var_type, inlining_info } )
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps "ORDINARY_VARIABLE";
			    begin_horizontal_else_vertical_box 3;
			    pps "( { var_home=";   unparse_var_home var_home;                   unparse_comma_newline stream;
			    pps "inlining_info="; unparse_inlining_info inlining_info;        unparse_comma_newline stream;
			    pps "path=";       pps (symbol_path::to_string path);             unparse_comma_newline stream;
			    pps "var_type=REF "; unparse_type  symbol_table  stream  *var_type; 
			    pps "} )";
			    end_box();
			    end_box();
			};

		    unparsedebugvar (OVERLOADED_IDENTIFIER { name, alternatives, type_scheme } )
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps "OVERLOADED_IDENTIFIER";
			    begin_horizontal_else_vertical_box 3;
			    pps "( { name="; unparse_symbol stream (name); unparse_comma_newline stream;
			    pps "alternative=["; 
			    (ppvseq stream 0 ", "
			      (fn stream = fn { indicator, variant }
                                  =
				  {   pps "{ indicator=";  unparse_type  symbol_table  stream   indicator; 
				      unparse_comma_newline stream;
				      pps " variant =";
				      unparse_debug_var inlining_info_to_string stream symbol_table variant; pps "}";
				  }
                              )
			      *alternatives);
			    pps "]"; unparse_comma_newline stream;
			    pps "type_scheme=";   unparse_type_scheme  symbol_table  stream  type_scheme;   pps "} )";
			    end_box();
			    end_box();
			};

		    unparsedebugvar (errorvar) => pps "<ERRORvar>";
                end;
	    
                unparsedebugvar;
	    };

	fun unparse_variable stream
            =
            unparse_variable'
            where
	        (en_pp stream) ->   { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };

		fun unparse_variable'
                        (
                          symbol_table: symbol_table::Symbol_Table,
			  ORDINARY_VARIABLE { path, var_home, var_type, inlining_info }
			)
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps (symbol_path::to_string path);

			    if *internals
                                 unparse_var_home stream  var_home;
			    fi;

			    pps ": ";
                            unparse_type  symbol_table  stream  *var_type;
			    pps ";";
			    end_box ();
			};

		    unparse_variable'
                        (
                          symbol_table,
                          OVERLOADED_IDENTIFIER { name, alternatives=>REF alternatives, type_scheme=>TYPE_SCHEME { body, ... } }
                        )
			=>
			{   begin_horizontal_else_vertical_box 0;
			    unparse_symbol stream (name);
                            pps ": ";
                            unparse_type  symbol_table  stream  body; 
			    pps " as ";
			    unparse_sequence
                                stream
                                  { sep   => by pp::break { spaces=>1, indent_on_wrap=>0 },
				    pr    => (fn stream = fn { variant, ... } = unparse_variable' (symbol_table, variant)),
				    style => CONSISTENT
				  }
			        alternatives;
			    pps ";";
			    end_box();
		        };

		    unparse_variable' (_, errorvar)
                        =>
                        pps "<ERRORvar>;";
                end;
	    
	    end;

    end;		#  stipulate

};			#  package unparse_value 











##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
