## compiler-table-set.pkg

# Compiled by:
#     src/lib/compiler/core.make6


# Here we implement the second level of
# the datastructures used to track state
# during a Lib7 compile or interactive
# session.
#
# The top level, above us, is implemented in
#
#    src/lib/compiler/toplevel/interact/compiler-state.pkg
#
# in terms of the facilities we implement here.
#
# The state we track is composed of three principal parts:
#
#    A symbol table holding per-symbol type information &tc.
#    A linking table tracking exports from loaded libraries.
#    An inlining table tracking cross-module function inlining info.
# 
# The detailed implementations of each of these
# three components is done elsewhere:  Our task
# here is just to glue those parts together into
# a coherent whole.
# 
# In practice, our state is not a single tripartite record,
# but rather a stack of them which we push and pop as we
# enter and leave syntactic scopes such as packages and
# functions.



###    "If you have ten thousand regulations,
###     you destroy all respect for the law."
###
###                -- Winston Churchill



package compiler_table_set: (weak) Compiler_Table_Set {		# Compiler_Table_Set		is from   src/lib/compiler/toplevel/compiler-state/compiler-table-set.api

    stipulate
        package a  = var_home;				# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package s  = symbol;				# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package m  = module;				# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg

	package v  = variables_and_constructors;	# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
	package t  = types;				# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	package mu = module_stuff;			# module_stuff			is from   src/lib/compiler/front/typecheck-stuff/modules/module-stuff.pkg

	package b  = symbol_table_entry;		# symbol_table_entry		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg

	package st = symbol_table;			# symbol_table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
	package ld = linking_table;			# linking_table			is from   src/lib/compiler/execution/linking-table/linking-table.pkg
	package id = inlining_table;			# inlining_table		is from   src/lib/compiler/toplevel/compiler-state/inlining-table.pkg
    herein

	Symbol = s::Symbol;

	Symbol_Table   =  st::Symbol_Table;
	Linking_Table  =  ld::Dictionary;
	Inlining_Table =  id::Dictionary;

	Compiler_Table_Set
             =
             { symbol_table:   Symbol_Table,
               linking_table:  Linking_Table,
               inlining_table: Inlining_Table
             };

	fun bug msg
            =
            error_message::impossible("compiler_table_set: " + msg);

	fun symbol_table_part (e: Compiler_Table_Set) =  e.symbol_table; 
	fun linking_part      (e: Compiler_Table_Set) =  e.linking_table;     
	fun inlining_part     (e: Compiler_Table_Set) =  e.inlining_table;    

	fun make_compiler_table_set (e as { symbol_table, linking_table, inlining_table } )
            =
            e;

	null_compiler_table_set
            =
            { symbol_table   =>  st::empty,
	      linking_table  =>  ld::empty,
	      inlining_table =>  id::empty
            };

	fun layer_compiler_table_sets
            (   { symbol_table,                linking_table,                 inlining_table           },
		{ symbol_table=>symbol_table', linking_table=>linking_table', inlining_table=>inlining_table' }
	    )
	    =
	    {   symbol_table   =>  st::atop (symbol_table,   symbol_table'  ),
	        linking_table  =>  ld::atop (linking_table,  linking_table' ),
	        inlining_table =>  id::atop (inlining_table, inlining_table')
            };

	layer_symbol_table   =  st::atop;
	layer_inlining_table =  id::atop;

	fun consolidate_compiler_table_set ( { symbol_table, linking_table, inlining_table } )
	    =
	    { symbol_table   =>  st::consolidate symbol_table,
	      linking_table  =>  ld::consolidate linking_table,
	      inlining_table =>  id::consolidate inlining_table
            };

	consolidate_symbol_table   =  st::consolidate;
	consolidate_inlining_table =  id::consolidate;

	fun root (a::EXTERN pid)  =>  THE pid; 
	    root (a::PATH (p, i)) =>  root p;
	    root _                =>  NULL;
        end;

	#  Getting the stamp from a naming 
	fun stamp_of (b::NAMED_VARIABLE    (v::ORDINARY_VARIABLE { var_home,                   ... } )) =>  root var_home;
	    stamp_of (b::NAMED_CONSTRUCTOR (t::ENUM_CONSTRUCTOR  { representation=>a::EXCEPTION a, ... } )) =>  root a;
	    stamp_of (b::NAMED_PACKAGE     (m::A_PACKAGE         { var_home,                   ... } )) =>  root var_home;
	    stamp_of (b::NAMED_GENERIC     (m::GENERIC           { var_home,                   ... } )) =>  root var_home;
	    stamp_of _ => NULL;
        end;

	# Functions to collect stale linking pids
        # for unnaming in concatenate_compiler_table_sets


	# stalePids: Takes a new dictionary and a base dictionary to which
	#            it is to be added and returns a list of pids that are unreachable 
	#            when the new dictionary is added to the base dictionary
	#
	# What we do instead:
	#
	#  - Count the number of occurrences for each pid in base_dictionary namings
	#    that is going to be shadowed by symbol_table_additions
	#
	#  - Count the total number of total occurrences for each such
	#    pids in base_dictionary
	#
	#  - The ones where the counts coincide are stale
	#
	# This code is ok, because symbol_table_additions is the output of `export'.
	#  `export' calls consolidateSymbolTable, therefore we don't have
	#  duplicate namings of the same symbol.

	fun stale_pids (symbol_table_additions, base_dictionary)
	    = 
	    {   anyrebound = REF FALSE;		#  Any renamings? 

		my count_m			#  Counting map. 
                    =
                    REF (picklehash_map::empty: picklehash_map::Map(  Ref(  Int ) ));

						# picklehash_map		is from   src/lib/compiler/front/basics/mlcomp/pickle-hash-maps.pkg

		fun get s
                    =
                    picklehash_map::get (*count_m, s);

		# Initialize the counter map:
		# for each new naming with stamp
		# check if the same symbol was bound in the old dictionary
		# and enter the old stamp into the map:

		fun init_one s
                    =
                    case (get s )
		      
		         NULL  =>   count_m := picklehash_map::set (*count_m, s, REF (-1));
		         THE r =>   r := *r - 1;
                    esac;

		fun init_c (symbol, _)
                    =
                    case (stamp_of (st::get (base_dictionary, symbol)))
		      
			 NULL  => ();
			 THE s => { init_one s;   anyrebound := TRUE; };
		    esac
		    except
                        st::UNBOUND =  ();



		#  Increment counter for a given stamp 

		fun incr NULL    =>   ();

		    incr (THE s) =>   case (get s )
				        
				           NULL  =>  ();
					   THE r =>  r := *r + 1;
                                      esac;
                end;

		fun inc_c (_, b)
                    =
                    incr (stamp_of b);

		#  Select the 0s 
		fun sel_zero ((s, REF 0), zeros)   =>   s ! zeros;
		    sel_zero (_,          zeros)   =>   zeros;
                end;
	     
		st::apply  init_c  symbol_table_additions;		#  Init counter map 

		if   (not *anyrebound)
		    
                     [];		                                                            #  Shortcut if no renamings 
		else
		     # Count the pids:
		     st::apply inc_c base_dictionary;           

		     # Pick out the stale ones:

		     stalepids
			 =
			 fold_left sel_zero [] (picklehash_map::keyvals_list *count_m);

		     stalepids;
                fi;
	    };							# fun stale_pids 

	fun concatenate_compiler_table_sets (
                { symbol_table => newstat, linking_table => newdyn, inlining_table => newsym },
	        { symbol_table => oldstat, linking_table => olddyn, inlining_table => oldsym }
	    )
	    =
	    {   hidden_pids = stale_pids (newstat, oldstat);

	        slimdyn =  ld::remove (hidden_pids, olddyn);
	        slimsym =  id::remove (hidden_pids, oldsym);
	   
		{ symbol_table   =>  st::consolidate_lazy (st::atop (newstat, oldstat)),
		  linking_table  =>  ld::atop( newdyn, slimdyn ),
		  inlining_table =>  id::atop( newsym, slimsym )
		};
	    };

	fun getnamings (   symbol_table: Symbol_Table,
                          symbols:     List( s::Symbol )
                      )
                      :  List( (s::Symbol, b::Symbol_Table_Entry) )
	    =
	    {   fun loop ([], namings)
                        =>
                        namings;

		    loop (s ! rest, namings)
			=>
			{   namings'
                                =
                                (s, st::get (symbol_table, s)) ! namings
				except
                                    st::UNBOUND =  namings;

			    loop (rest, namings'); 
			};
                end;
	    
		loop( symbols, [] );
	    };

	fun copystat (        [], symbol_table) =>  symbol_table;
	    copystat ((s, b) ! l, symbol_table) =>  copystat (l, st::bind (s, b, symbol_table));
        end;


	#    fun filterSymbolTable (symbol_table: Symbol_Table, symbols: List( s::symbol ))
        #        :
        #        Symbol_Table
        #        =
	#        copystat (getnamings (symbol_table, symbols), st::empty)

	stipulate

	    fun copydynsym (namings, linking_table, inlining_table)
                =
		loop (namings, ld::empty, id::empty)
                where
                    fun loop ([], denv, syenv)
			    =>
			    (denv, syenv);

		       loop ((_, b) ! l, denv, syenv)
			   =>
			   case (stamp_of b)
			     
				NULL =>  loop (l, denv, syenv);

				THE pid
				    =>
				    {   dy     =  the (ld::get linking_table pid);
					denv   =  ld::bind (pid, dy, denv);
					symbol =  id::get  inlining_table  pid;

					syenv
					    =
					    case symbol
					      
						 NULL       =>  syenv;
						 THE symbol =>  id::bind (pid, symbol, syenv);
					    esac;

					loop (l, denv, syenv);
				    };
			   esac;
                    end;
		end;
	herein
	    fun filter_compiler_table_set (
                    { symbol_table, linking_table, inlining_table }: Compiler_Table_Set,
                    symbols
                )
                =
		{   snamings     =  getnamings (symbol_table, symbols);
		    symbol_table =  copystat (snamings, st::empty); 

		    my (denv, syenv)
                        =
                        copydynsym (snamings, linking_table, inlining_table);
		
                    { symbol_table, linking_table => denv, inlining_table => syenv };
		};

	    fun trim_compiler_table_set { symbol_table, linking_table, inlining_table }
                =
                {   symbols = browse_symbol_table::catalog symbol_table;

		    my (linking_table, inlining_table)
                        =
			copydynsym (getnamings (symbol_table, symbols), linking_table, inlining_table);
		
		    {   symbol_table,
                        linking_table,
                        inlining_table
                    };
		};
	end;

	fun describe symbol_table (s: Symbol) : Void
            =
	    {   include prettyprint;
	        include unparse_stuff;
	    
		with_prettyprint_device (error_message::default_plaint_sink())	# error_message	is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
		    (fn stream
                        =
		        {   begin_horizontal_else_vertical_box stream;

		            unparse_package_language::unparse_naming
                                stream
		                (s, st::get (symbol_table, s), symbol_table, *controls::print::print_depth);

						# unparse_package_language	is from   src/lib/compiler/front/typechecker/print/unparse-package-language.pkg
						# controls			is from   src/lib/compiler/toplevel/main/controls.pkg
		            newline stream;
		            end_box stream;
                        }
                    );
	    }
            except
                st::UNBOUND =  print (s::name s + " not found\n");

	primitives_symbol_table
            =
            primitives_symbol_table::primitives_symbol_table;

    end; #  local 

};	 #  package compiler_table_set 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1989 by AT&T Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
