2006-11-29 CrT: Tim Bourke has comments and patches at 
                    http://www.cse.unsw.edu.au/~tbourke/software/smlnj-reactive.html


This is an implementation of a low-level reactive engine (or toolkit),
which is mostly translated from SugarCubes (a Java toolkit).  The main
difference (aside from the implementation language) is that we support
preemption of actions (as in Berry's Communicating Reactive Processes
model).  This library is meant to be the target of higher-level reactive
models.

Information about SugarCubes can be found at

	http://www.inria.fr/meije/rc/SugarCubes/index.html


2008-04-19 CrT:

For motivation, see:
    Reactive Programming in Standard ML
    Riccardo Pucella   1998, 11p
    http://arxiv.org/abs/cs.PL/0405080

2007-06-16 CrT:

The above is the complete documentation provided.
There are no examples, demos or test suite.
This code appears to date to about 1997.

The idea appears to be to create a number of virtual
machines, each driven by a simple script centering on
detecting and emitting signals, providing sort of an
elementary interpreted Petri net style event-driven
functionality for GUI-driven programs.

As far as I can see, having call/cc and incremental
compilation removes the need for the interpreted part,
and for the remainder, the (much later)
"Adaptive Functional Programming" approach provides
a more sophisticated and promising framework.

For example, AFP provides no explicit tool to wait
on a combination of "modifiable" states, but a user
can easily write code to read several input
modifiables and summarize their state as desired
in a single output modifiable, which other code
nodes can then be driven by.

AFP doesn't have the discrete time steps notion
used by the reactive engine:  Perhaps that 
contributes someting valuable which I'm failing
to appreciate?

Preemption, as always, bears thought...

NB: According to the Reactive Programming webpage,
the algorithm has been made much more efficient since
SugarCubes, at the cost of dropping the requirement
for instantaneous notification of non-events (if I
recall correctly).  If this stuff does prove useful,
we should most likely update this code to incorporate
that idea.