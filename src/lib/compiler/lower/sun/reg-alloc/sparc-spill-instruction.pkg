## sparc-spill-instruction.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/sparc.make6



# Sparc instructions to emit when spilling an instruction.



###                     "Flight by machines heavier than air
###                      is unpractical and insignificant,
###                      if not utterly impossible."
###
###                                     -- Simon Newcom



###                     "The demonstration that no possible combination
###                      of known substances, known forms of machinery
###                      and known forms of force, can be united in a
###                      practical machine by which men shall fly along
###                      distances through the air, seems to the writer as
###                      complete as it is possible for the demonstration
###                      to be."
###
###                                     --Simon Newcomb



###                     "Quite likely the twentieth century
###                      is destined to see the natural forces
###                      which will enable us to fly from
###                      continent to continent with a speed
###                      far exceeding that of a bird."
###
###                                     -- Simon Newcomb 



# We are invoked from:
# 
#     src/lib/compiler/codegen/sun/sparc-codegen.pkg

generic package sparc_spill_instructions_g (

    instruction_set:  Instruction_Set_Sparc				# Instruction_Set_Sparc				is from   src/lib/compiler/lower/sun/instruction/instruction-set-sparc.api
)

: (weak)  Architecture_Specific_Spill_Instructions			# Architecture_Specific_Spill_Instructions	is from   src/lib/compiler/lower/reg-alloc/arch-spill-instruction.api

{
    package instruction_set =  instruction_set;
    package cells           =  instruction_set::cells;

    package rewrite
        =
        sparc_instructions_rewrite_g (					# sparc_instructions_rewrite_g			is from   src/lib/compiler/lower/sun/reg-alloc/sparc-rewrite.pkg
            instruction_set
        );

    package i = instruction_set;
    package c = cells;
    package cb= cells_basis;	# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    fun error msg
        =
        lowcode_error_message::error ("sparc_spill_instructions_g", msg);

    fun store_at_ea cb::REGISTER (reg, i::DISPLACE { base, disp, mem } )
            => 
	    i::store { s=>i::ST, r=>base, i=>i::LAB disp, d=>reg, mem };

        store_at_ea cb::FLOAT_REGISTER  (reg, i::DISPLACE { base, disp, mem } )
            => 
	    i::fstore { s=>i::STDF, r=>base, i=>i::LAB disp, d=>reg, mem };

        store_at_ea _ _
            =>
            error "storeAtEA";
    end;

    fun load_from_ea cb::REGISTER (reg, i::DISPLACE { base, disp, mem } )
            => 
	    i::load { l=>i::LD, d=>reg, r=>base, i=>i::LAB disp, mem };

        load_from_ea cb::FLOAT_REGISTER (reg, i::DISPLACE { base, disp, mem } )
            => 
	    i::fload { l=>i::LDDF, d=>reg, r=>base, i=>i::LAB disp, mem };

        load_from_ea _ _
            =>
            error "loadFromEA";
    end;


    fun spill_to_ea ck reg_ea
        = 
	{ code => [store_at_ea ck reg_ea], prohibitions => [], new_reg=>NULL };

    fun reload_from_ea ck reg_ea
        = 
	{ code => [load_from_ea ck reg_ea], prohibitions => [], new_reg=>NULL };

    # Spill a register to spillLoc 
    #
    fun spill_r (instruction, reg, spill_loc)
	=
	{
	    new_r = c::new_reg();
	    instruction' = rewrite::rewrite_def (instruction, reg, new_r);

	    { code => [instruction', store_at_ea cb::REGISTER (new_r, spill_loc)],
	      prohibitions => [new_r],
	      new_reg=>THE new_r
	    };
	};

    fun spill_f (instruction, reg, spill_loc)
	=
	{
	    new_r = c::new_freg();
	    instruction' = rewrite::frewrite_def (instruction, reg, new_r);

	    { code => [instruction', store_at_ea cb::FLOAT_REGISTER (new_r, spill_loc)],
	      prohibitions => [new_r],
	      new_reg=>THE new_r
            };
	};




    # Reload a register from spillLoc 
    #
    fun reload_r (instruction, reg, spill_loc)
	=
	{
	    new_r = c::new_reg();
	    instruction' = rewrite::rewrite_use (instruction, reg, new_r);

	    { code => [load_from_ea cb::REGISTER (new_r, spill_loc), instruction'],
	      prohibitions => [new_r],
	      new_reg=>THE new_r
            };
	};

    fun reload_f (instruction, reg, spill_loc)
	=
	{
	    new_r = c::new_freg();
	    instruction' = rewrite::frewrite_use (instruction, reg, new_r);

	    { code => [load_from_ea cb::FLOAT_REGISTER (new_r, spill_loc), instruction'],
	      prohibitions => [new_r],
	      new_reg=>THE new_r
	    };
	};



    fun spill cells_basis::REGISTER => spill_r;
        spill cells_basis::FLOAT_REGISTER => spill_f;
        spill _ => error "spill";
    end;

    fun reload cells_basis::REGISTER => reload_r;
        reload cells_basis::FLOAT_REGISTER => reload_f;
        reload _ => error "reload";
    end;
};



## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
