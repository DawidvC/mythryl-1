## typp.pkg


# A pretty-printer for ML type expressions.


run "base.pkg";

enum aType
  = TYPE_VARIABLE_TYPE of String
  | BaseType of (List( Some_Type ) * String)
  | FnType   of (Some_Type * Some_Type)
  | TUPLE_TYPE  of List( Some_Type )
  | RECORD_TYPE of List( String * Some_Type )

fun prettyprint_type (stream, type) = let
      fun prettyprintComma () = (pp::string stream ", "; pp::space stream 1)
      fun prettyprintStar () = (pp::space stream 1; pp::string stream "*"; pp::nonbreakable_spaces stream 1)
      fun prettyprint (TYPE_VARIABLE_TYPE s) = pp::string stream s
	| prettyprint (BaseType([], s) = pp::string stream s
	| prettyprint (BaseType([type], s) =
	| prettyprint (BaseType (l, s) =
	| prettyprint (FnType (type1, type2)) =
	| prettyprint (TUPLE_TYPE []) = pp::string stream "()"
	| prettyprint (TUPLE_TYPE [type]) = prettyprint type
	| prettyprint (TUPLE_TYPE l) =
	| prettyprint (RECORD_TYPE []) = pp::string stream "{}"
	| prettyprint (RECORD_TYPE l) = let
	    fun prettyprintElement (lab, type) = (
		  pp::begin_horizontal_else_vertical_box stream (pp::Abs 2);
		    pp::string lab;
		    pp::space stream 1;
		    pp::string stream ":";
		    pp::nonbreakable_spaces stream;
		    prettyprint type
		  pp::end_box())
	    in
	      pp::openHBox stream;
	        pp::string stream "{ ";
	        pp::begin_horizontal_else_vertical_box (stream, pp::Abs 4);
	          ppl (prettyprintElement, prettyprintComma) l;
		  pp::break stream { spaces=0, offset=2 };
		pp::end_box stream;
	        pp::string stream "}";
	      pp::end_box stream
	    end
      and prettyprintParenType type =
      and ppl (prettyprintElement, prettyprintSep) l = let
	    fun ppl' [] = ()
	      | ppl' [type] = prettyprintElement type
	      | ppl' (type . r) = (prettyprintElement type; prettyprintSep(); ppl' r)
	    in
	      ppl' l
	    end
      in
	pp::begin_wrap_box (stream, pp::Abs 2);
	prettyprint type;
	pp::end_box stream
      end;

local
  stringType = BaseType([], "string")
  intType = BaseType([], "Int")
  boolType = BaseType([], "bool")
  unitType = BaseType([], "unit")
  posType = BaseType([], "pos")
  fun optionType arg = BaseType([arg], "Null_Or")
  vecBufType = RECORD_TYPE [
	  ("buf", BaseType([], "Vector")),
	  ("i", intType),
	  ("size", optionType intType)
	]
  arrBufType = RECORD_TYPE [
	  ("buf", BaseType([], "array")),
	  ("i", intType),
	  ("size", optionType intType)
	]
in
wrType = RECORD_TYPE of [
	("name", stringType),
	("chunkSize", intType),
	("writeVec", optionType (FnType (vecBufType, intType))),
	("writeArr", optionType (FnType (arrBufType, intType))),
	("writeVecNB", optionType (FnType (vecBufType, optionType intType))),
	("writeArrNB", optionType (FnType (arrBufType, optionType intType))),
	("block", optionType (FnType (unitType, unitType)),
	("canOutput", optionType (FnType (unitType, boolType)),
	("getPos", optionType (FnType (unitType, posType))),
	("setPos", optionType (FnType (posType, unitType))),
	("endPos", optionType (FnType (unitType, posType))),
	("verifyPos", optionType (FnType (unitType, posType))),
	("close", optionType (FnType (unitType, unitType))),
	("ioDesc", optionType (BaseType([], "winix::io::Io_Descriptor")))
      ]
end;


## COPYRIGHT (c) 1997 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
