## codetree-evaluate.sml

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


# Utilites to evaluate and compare codetree expressions.


###             "It is a good morning exercise for
###              a research scientist to discard
###              a pet hypothesis every day before
###              breakfast. It keeps him young."
###
###                             -- Konrad Lorenz


# This generic gets invoked in
#
#     src/lib/compiler/codegen/x86/x86-codetree.pkg
#     src/lib/compiler/codegen/ppc/ppc-codetree.pkg
#     src/lib/compiler/codegen/sun/sparc-codetree.pkg

generic package codetree_eval_g (

    package codetree:  Codetree;		# Codetree	is from   src/lib/compiler/lower/codetree/codetree.api

    # Equality extensions 
    eq_sext:   codetree::Eq_Fns -> (codetree::Sext, codetree::Sext)   -> Bool;
    eq_rext:   codetree::Eq_Fns -> (codetree::Rext, codetree::Rext)   -> Bool;
    eq_fext:   codetree::Eq_Fns -> (codetree::Fext, codetree::Fext)   -> Bool;
    eq_ccext:  codetree::Eq_Fns -> (codetree::Ccext, codetree::Ccext) -> Bool;
)

: (weak) Codetree_Eval				# Codetree_Eval	is from   src/lib/compiler/lower/codetree/codetree-eval.api

{
    package codetree = codetree;

    package t = codetree;
    package i = codetree::machine_int;
    package c= cells_basis;			# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    package constant = codetree::constant;

    eq_label = label::same;

    fun eq_labels ([],[]) => TRUE;
        eq_labels (a ! b, c ! d) => eq_label (a, c) and eq_labels (b, d);
        eq_labels _ => FALSE;
    end 

    also
    fun eq_cell (c::CELL { id=>x, ... }, c::CELL { id=>y, ... } )
	=
	x == y

    also
    fun eq_cells ([], []) => TRUE;
	eq_cells (x ! xs, y ! ys) => eq_cell (x, y) and eq_cells (xs, ys);
	eq_cells _ => FALSE;
    end 

    also
    fun eq_copy ((t1, dst1, src1), (t2, dst2, src2))
        =
	t1==t2                  and
        eq_cells (dst1, dst2)   and
        eq_cells (src1, src2)

    also fun eq_ctrl  (c1, c2) =   eq_cell  (c1, c2)
    also fun eq_ctrls (c1, c2) =   eq_cells (c1, c2)

    # Statements:
    #
    also
    fun equality ()
        =
        { statement=>eq_statement, int_expression=>eq_int_expression, float_expression=>eq_float_expression, bool_expression=>eq_bool_expression }

    also
    fun eq_statement (t::MOVE_INT (a, b, c), t::MOVE_INT (d, e, f))
	     =>
	     a==d   and   eq_cell (b, e)   and   eq_int_expression (c, f);

	eq_statement (t::MOVE_BOOL (a, b), t::MOVE_BOOL (c, d))
	     =>
	     eq_cell (a, c) and eq_bool_expression (b, d);

	eq_statement (t::MOVE_FLOAT (a, b, c), t::MOVE_FLOAT (d, e, f))
	     => 
	     a==d and eq_cell (b, e) and eq_float_expression (c, f);

	eq_statement (t::COPY_INTS x, t::COPY_INTS y) => eq_copy (x, y);
	eq_statement (t::COPY_FLOATS x, t::COPY_FLOATS y) => eq_copy (x, y);
	eq_statement (t::JUMP (a, b), t::JUMP (a', b')) => eq_int_expression (a, a');
	eq_statement (t::CALL { funct=>a, defs=>b, uses=>c, ... },
	       t::CALL { funct=>d, defs=>e, uses=>f, ... } ) =>  
	    eq_int_expression (a, d) and eq_lowcodes (b, e) and eq_lowcodes (c, f);
	eq_statement (t::RET _, t::RET _) => TRUE;
	eq_statement (t::STORE (a, b, c, _), t::STORE (d, e, f, _)) => 
	    a==d and eq_int_expression (b, e) and eq_int_expression (c, f);
	eq_statement (t::FSTORE (a, b, c, _), t::FSTORE (d, e, f, _)) =>
	    a==d and eq_int_expression (b, e) and eq_float_expression (c, f);
	eq_statement (t::NOTE (s1, _), s2) => eq_statement (s1, s2);
	eq_statement (s1, t::NOTE (s2, _)) => eq_statement (s1, s2);
	eq_statement (t::PHI x, t::PHI y) => x==y;
	eq_statement (t::SOURCE, t::SOURCE) => TRUE;
	eq_statement (t::SINK, t::SINK) => TRUE;
	eq_statement (t::BCC (b, c), t::BCC (b', c')) => 
	   eq_bool_expression (b, b') and eq_label (c, c');
	eq_statement (t::IF (b, c, d), t::IF (b', c', d')) => 
	   eq_bool_expression (b, b') and eq_statement (c, c') and eq_statement (d, d');
	eq_statement (t::RTL { attributes=>x, ... }, t::RTL { attributes=>y, ... } ) => x==y;
	eq_statement (t::REGION (a, b), t::REGION (a', b')) => eq_ctrl (b, b') and eq_statement (a, a');
	eq_statement (t::EXT a, t::EXT a') => eq_sext (equality()) (a, a');
	eq_statement _ => FALSE;
    end 

    also
    fun eq_statements ([],[]) => TRUE;
        eq_statements (a ! b, c ! d) => eq_statement (a, c) and eq_statements (b, d);
        eq_statements _ => FALSE;
    end 

    also
    fun eq_lowcode (t::BOOL_EXPRESSION a, t::BOOL_EXPRESSION b) => eq_bool_expression (a, b);
	eq_lowcode (t::INT_EXPRESSION a, t::INT_EXPRESSION b) => eq_int_expression (a, b);
	eq_lowcode (t::FLOAT_EXPRESSION a, t::FLOAT_EXPRESSION b) => eq_float_expression (a, b);
	eq_lowcode _ => FALSE;
    end 

    also
    fun eq_lowcodes ([],[]) => TRUE;
        eq_lowcodes (a ! b, c ! d) => eq_lowcode (a, c) and eq_lowcodes (b, d);
        eq_lowcodes _ => FALSE;
    end 

    also
    fun eq2 ((a, b, c), (d, e, f))
        =
        a==d and eq_int_expression (b, e) and eq_int_expression (c, f)

    also
    fun eq3 ((m, a, b, c), (n, d, e, f))
        =
	m == n          and
        a == d          and
        eq_int_expression (b, e)  and
        eq_int_expression (c, f)

    also
    fun eq_int_expression (t::REG (a, b), t::REG (c, d)) => a==c and eq_cell (b, d);
	eq_int_expression (t::LITERAL a, t::LITERAL b)   =>   a == b;
	eq_int_expression (t::LABEL a, t::LABEL b) => eq_label (a, b);
	eq_int_expression (t::LABEXP a, t::LABEXP b) => eq_int_expression (a, b);
	eq_int_expression (t::CONST a, t::CONST b) => constant::(====) (a, b);
	eq_int_expression (t::NEG (t, x), t::NEG (t', x'))   =>   t == t' and eq_int_expression (x, x');
	eq_int_expression (t::ADD x, t::ADD y) => eq2 (x, y);
	eq_int_expression (t::SUB x, t::SUB y) => eq2 (x, y);
	eq_int_expression (t::MULS x, t::MULS y) => eq2 (x, y);
	eq_int_expression (t::DIVS x, t::DIVS y) => eq3 (x, y);
	eq_int_expression (t::REMS x, t::REMS y) => eq3 (x, y);
	eq_int_expression (t::MULU x, t::MULU y) => eq2 (x, y);
	eq_int_expression (t::DIVU x, t::DIVU y) => eq2 (x, y);
	eq_int_expression (t::REMU x, t::REMU y) => eq2 (x, y);
	eq_int_expression (t::NEGT (t, x), t::NEGT (t', x'))   =>   t == t' and eq_int_expression (x, x');
	eq_int_expression (t::ADDT x, t::ADDT y) => eq2 (x, y);
	eq_int_expression (t::SUBT x, t::SUBT y) => eq2 (x, y);
	eq_int_expression (t::MULT x, t::MULT y) => eq2 (x, y);
	eq_int_expression (t::DIVT x, t::DIVT y) => eq3 (x, y);
	eq_int_expression (t::BITWISEAND x, t::BITWISEAND y) => eq2 (x, y);
	eq_int_expression (t::BITWISEOR x, t::BITWISEOR y) => eq2 (x, y);
	eq_int_expression (t::BITWISEXOR x, t::BITWISEXOR y) => eq2 (x, y);
	eq_int_expression (t::BITWISEEQV x, t::BITWISEEQV y) => eq2 (x, y);
	eq_int_expression (t::BITWISENOT (a, b), t::BITWISENOT (c, d))   =>   a==c and eq_int_expression (b, d);
	eq_int_expression (t::RIGHTSHIFT x, t::RIGHTSHIFT y) => eq2 (x, y);
	eq_int_expression (t::RIGHTSHIFTU x, t::RIGHTSHIFTU y) => eq2 (x, y);
	eq_int_expression (t::LEFTSHIFT x, t::LEFTSHIFT y) => eq2 (x, y);

	eq_int_expression (t::COND (a, b, c, d), t::COND (e, f, g, h))
            => 
	    a==e and eq_bool_expression (b, f) and eq_int_expression (c, g) and eq_int_expression (d, h);

	eq_int_expression (t::SIGNEXTEND (a, b, c), t::SIGNEXTEND (a', b', c'))
            => 
	    a==a' and b==b' and eq_int_expression (c, c');

	eq_int_expression (t::ZEROEXTEND (a, b, c), t::ZEROEXTEND (a', b', c'))
            => 
	    a==a' and b==b' and eq_int_expression (c, c');

	eq_int_expression (t::CONVERTFLOATTOINT (a, b, c, d), t::CONVERTFLOATTOINT (e, f, g, h))
            => 
	    a==e and b==f and c==g and eq_float_expression (d, h);

	eq_int_expression (t::LOAD (a, b, _), t::LOAD (c, d, _)) => a==c and eq_int_expression (b, d);
	eq_int_expression (t::LET (a, b), t::LET (c, d)) => eq_statement (a, c) and eq_int_expression (b, d);
	eq_int_expression (t::ARG x, t::ARG y) => x == y;
	eq_int_expression (t::PARAM x, t::PARAM y) => x == y;
	eq_int_expression (t::QQQ, t::QQQ) => TRUE;
	eq_int_expression (t::ATATAT(t1, k1, e1), t::ATATAT(t2, k2, e2)) => 
	   t1==t2 and k1==k2 and eq_int_expression (e1, e2);
	eq_int_expression (t::BITSLICE (t1, s1, e1), t::BITSLICE (t2, s2, e2)) =>
	   t1==t2 and s1==s2 and eq_int_expression (e1, e2);
	eq_int_expression (t::MARK (a, _), b) => eq_int_expression (a, b);
	eq_int_expression (a, t::MARK (b, _)) => eq_int_expression (a, b);
	eq_int_expression (t::PRED (a, b), t::PRED (a', b')) => eq_ctrl (b, b') and eq_int_expression (a, a');
	eq_int_expression (t::REXT (a, b), t::REXT (a', b')) =>   
	     a==a' and eq_rext (equality()) (b, b'); 
	eq_int_expression _ => FALSE;
    end 

    also
    fun eq_rexps ([],[]) => TRUE;
        eq_rexps (a ! b, c ! d) => eq_int_expression (a, c) and eq_rexps (b, d);
        eq_rexps _ => FALSE;
    end 

    also
    fun eq2'((a, b, c), (d, e, f))
        =
        a==d and eq_float_expression (b, e) and eq_float_expression (c, f)

    also
    fun eq1'((a, b), (d, e))
        =
        a==d and eq_float_expression (b, e) 

    also
    fun eq_float_expression (t::FREG (t1, x), t::FREG (t2, y)) => t1==t2 and eq_cell (x, y);
	eq_float_expression (t::FLOAD (a, b, _), t::FLOAD (c, d, _)) => a==c and eq_int_expression (b, d);
	eq_float_expression (t::FADD x, t::FADD y) => eq2'(x, y); 
	eq_float_expression (t::FMUL x, t::FMUL y) => eq2'(x, y);
	eq_float_expression (t::FSUB x, t::FSUB y) => eq2'(x, y); 
	eq_float_expression (t::FDIV x, t::FDIV y) => eq2'(x, y);
	eq_float_expression (t::COPY_FLOAT_SIGN x, t::COPY_FLOAT_SIGN y) => eq2'(x, y);
	eq_float_expression (t::FCOND (t, x, y, z), t::FCOND (t', x', y', z')) => 
	   t==t' and eq_bool_expression (x, x') and eq_float_expression (y, y') and eq_float_expression (z, z');
	eq_float_expression (t::FABS x, t::FABS y) => eq1'(x, y);
	eq_float_expression (t::FNEG x, t::FNEG y) => eq1'(x, y);
	eq_float_expression (t::FSQRT x, t::FSQRT y) => eq1'(x, y);
	eq_float_expression (t::CVTI2F (a, b, c), t::CVTI2F (a', b', c')) => 
	    a==a' and b==b' and eq_int_expression (c, c');
	eq_float_expression (t::CVTF2F (a, b, c), t::CVTF2F (a', b', c')) => 
	    a==a' and b==b' and eq_float_expression (c, c');
	eq_float_expression (t::FEXT (a, f), t::FEXT (b, g)) => a==b and eq_fext (equality()) (f, g); 
	eq_float_expression (t::FMARK (a, _), b) => eq_float_expression (a, b);
	eq_float_expression (a, t::FMARK (b, _)) => eq_float_expression (a, b);
	eq_float_expression (t::FPRED (a, b), t::FPRED (a', b')) => eq_ctrl (b, b') and eq_float_expression (a, a');
	eq_float_expression _ => FALSE;
    end 

    also
    fun eq_fexps ([],[]) => TRUE;
	eq_fexps (a ! b, c ! d) => eq_float_expression (a, c) and eq_fexps (b, d);
	eq_fexps _ => FALSE;
    end 

    also
    fun eq_bool_expression (t::CC (c1, x), t::CC (c2, y)) => c1==c2 and eq_cell (x, y);
	eq_bool_expression (t::FCC (c1, x), t::FCC (c2, y)) => c1==c2 and eq_cell (x, y);
	eq_bool_expression (t::CMP (x, a, b, c), t::CMP (y, d, e, f)) => 
	   a==d and eq_int_expression (b, e) and eq_int_expression (c, f) and x == y;
	eq_bool_expression (t::FCMP (x, a, b, c), t::FCMP (y, d, e, f)) =>
	   a==d and eq_float_expression (b, e) and eq_float_expression (c, f) and x == y;
	eq_bool_expression (t::NOT x, t::NOT y) => eq_bool_expression (x, y);
	eq_bool_expression (t::AND x, t::AND y) => eq_bool_expression2 (x, y);
	eq_bool_expression (t::OR x,  t::OR y) => eq_bool_expression2 (x, y);
	eq_bool_expression (t::XOR x, t::XOR y) => eq_bool_expression2 (x, y);
	eq_bool_expression (t::EQV x, t::EQV y) => eq_bool_expression2 (x, y);
	eq_bool_expression (t::CCMARK (a, _), b) => eq_bool_expression (a, b);
	eq_bool_expression (a, t::CCMARK (b, _)) => eq_bool_expression (a, b);
	eq_bool_expression (t::CCEXT (t, a), t::CCEXT (t', b)) => 
	   t==t' and eq_ccext (equality()) (a, b);
	eq_bool_expression (t::TRUE, t::TRUE) => TRUE;
	eq_bool_expression (t::FALSE, t::FALSE) => TRUE;
	eq_bool_expression _ => FALSE;
    end 

    also
    fun eq_bool_expression2 ((x, y), (x', y'))
        =
        eq_bool_expression (x, x') and eq_bool_expression (y, y')

    also
    fun eq_bool_expressions ([],[]) => TRUE;
        eq_bool_expressions (a ! b, c ! d) => eq_bool_expression (a, c) and eq_bool_expressions (b, d);
        eq_bool_expressions _ => FALSE;
    end;

    exception NON_CONSTANT;

    fun evaluate { label, const }
	=
	{   fun drm t::DIV_TO_ZERO => i::DIV_TO_ZERO;
	        drm t::DIV_TO_NEGINF => i::DIV_TO_NEGINF;
            end;

	    fun int_expression (t::LITERAL i) => i;
		int_expression (t::CONST c) => const c;
		int_expression (t::LABEL l) => integer::from_int (label l);
		int_expression (t::LABEXP e) => int_expression e;

		int_expression (t::NEG (size, x)) => i::neg (size, int_expression x);
		int_expression (t::ADD (size, x, y)) => i::add (size, int_expression x, int_expression y);
		int_expression (t::SUB (size, x, y)) => i::sub (size, int_expression x, int_expression y);

		int_expression (t::MULS (size, x, y)) => i::muls (size, int_expression x, int_expression y);
		int_expression (t::DIVS (m, size, x, y)) => i::divs (drm m, size, int_expression x, int_expression y);
		int_expression (t::REMS (m, size, x, y)) => i::rems (drm m, size, int_expression x, int_expression y);

		int_expression (t::MULU (size, x, y)) => i::mulu (size, int_expression x, int_expression y);
		int_expression (t::DIVU (size, x, y)) => i::divu (size, int_expression x, int_expression y);
		int_expression (t::REMU (size, x, y)) => i::remu (size, int_expression x, int_expression y);

		int_expression (t::NEGT (size, x)) => i::negt (size, int_expression x);
		int_expression (t::ADDT (size, x, y)) => i::addt (size, int_expression x, int_expression y);
		int_expression (t::SUBT (size, x, y)) => i::subt (size, int_expression x, int_expression y);
		int_expression (t::MULT (size, x, y)) => i::mult (size, int_expression x, int_expression y);
		int_expression (t::DIVT (m, size, x, y)) => i::divt (drm m, size, int_expression x, int_expression y);

		int_expression (t::BITWISENOT (size, x)) => i::bitwise_not (size, int_expression x);
		int_expression (t::BITWISEAND (size, x, y)) => i::bitwise_and (size, int_expression x, int_expression y);
		int_expression (t::BITWISEOR (size, x, y)) => i::bitwise_or (size, int_expression x, int_expression y);
		int_expression (t::BITWISEXOR (size, x, y)) => i::bitwise_xor (size, int_expression x, int_expression y);
		int_expression (t::BITWISEEQV (size, x, y)) => i::eqvb (size, int_expression x, int_expression y);
		int_expression (t::LEFTSHIFT (size, x, y)) => i::sll_x (size, int_expression x, int_expression y);
		int_expression (t::RIGHTSHIFTU (size, x, y)) => i::srl_x (size, int_expression x, int_expression y);
		int_expression (t::RIGHTSHIFT (size, x, y)) => i::sra_x (size, int_expression x, int_expression y);
		int_expression (t::BITSLICE (size, x, y)) => i::bitslice (size, x, int_expression y);

		int_expression (t::COND (size, cc, x, y)) => if (bool_expression cc ) int_expression x; else int_expression y;fi;
		int_expression (t::SIGNEXTEND (a, b, x)) => i::sx (a, b, int_expression x);
		int_expression (t::ZEROEXTEND (a, b, x)) => i::zx (a, b, int_expression x);
		int_expression (t::MARK (e, _)) => int_expression e;

		int_expression _ => raise exception NON_CONSTANT;
            end 

	    also
	    fun bool_expression (t::TRUE) => TRUE;
		bool_expression (t::FALSE) => FALSE;
		bool_expression (t::CMP (size, t::EQ, x, y)) => i::eq (size, int_expression x, int_expression y);
		bool_expression (t::CMP (size, t::NE, x, y)) => i::ne (size, int_expression x, int_expression y);
		bool_expression (t::CMP (size, t::GT, x, y)) => i::gt (size, int_expression x, int_expression y);
		bool_expression (t::CMP (size, t::GE, x, y)) => i::ge (size, int_expression x, int_expression y);
		bool_expression (t::CMP (size, t::LT, x, y)) => i::lt (size, int_expression x, int_expression y);
		bool_expression (t::CMP (size, t::LE, x, y)) => i::le (size, int_expression x, int_expression y);
		bool_expression (t::CMP (size, t::GTU, x, y)) => i::gtu (size, int_expression x, int_expression y);
		bool_expression (t::CMP (size, t::LTU, x, y)) => i::ltu (size, int_expression x, int_expression y);
		bool_expression (t::CMP (size, t::GEU, x, y)) => i::geu (size, int_expression x, int_expression y);
		bool_expression (t::CMP (size, t::LEU, x, y)) => i::leu (size, int_expression x, int_expression y);
		bool_expression (t::NOT x) => not (bool_expression x);
		bool_expression (t::AND (x, y)) => bool_expression x and bool_expression y;
		bool_expression (t::OR (x, y)) => bool_expression x or bool_expression y;
		bool_expression (t::XOR (x, y)) => bool_expression x != bool_expression y;
		bool_expression (t::EQV (x, y)) => bool_expression x == bool_expression y;
		bool_expression (t::CCMARK (e, _)) => bool_expression e;
		bool_expression _ => raise exception NON_CONSTANT;
	    end;

	    {   int_expression, bool_expression }; 
	};

    fun value_of e
	= 
	integer::to_int
	     (.int_expression (evaluate { const=>  fn c =  integer::from_int (constant::value_of c),
			 label=>label::addr_of } ) e);

    my ====   =   eq_int_expression;
};


## COPYRIGHT (c) 2001 Lucent Technologies, Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
