## cfg-emit-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# This module takes a flowgraph and an assembly emitter module and 
# ties them together into one.  The output is sent to asm_stream.
#  --Allen
#
# TODO: Need to check for the REORDER/NOREORDER annotation on
# blocks and call P.Client.AsmPseudoOps.to_string function to
# print out the appropriate assembler directive. -- Lal.   XXX BUGGO FIXME
#
# 2009-05-21 CrT: This appears to be nowhere inoked.


###        "Your question doesn't make any sense.
###         You might as well ask whether it is
###         possible to grow vegetables from a
###         painting, without becoming Wednesday
###         first."
###
###            -- Abigail, comp.lang.perl.misc




generic package cfg_emit_g (

   package e:    Instruction_Emitter;				# Instruction_Emitter	is from   src/lib/compiler/lower/emit/instruction-emitter.api

   package control_flow_graph
	:
	Control_Flow_Graph					# Control_Flow_Graph	is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where
	    instruction_set
            ==
            e::instruction_set
	also
	    pseudo_op == e::instruction_stream::pseudo_op;
)

: (weak) Assembly_Emitter					# Assembly_Emitter	is from   src/lib/compiler/lower/emit/asm-emit.api

= 
package {

    package control_flow_graph
        =
        control_flow_graph;

    fun asm_emit (graph::GRAPH graph, blocks)
	=
	{   graph.graph_info
		->
		control_flow_graph::INFO { notes, data, decls, ... };

	    my e::instruction_stream::STREAM { emit_pseudo_op, define_local_label, emit, add_note, emit_comment, ... }
		 = 
		 e::make_stream *notes;

	    fun emit_it (id, control_flow_graph::BLOCK { labels, notes, align, instructions, ... } )
		=
		{   case *align
		         NULL  =>  ();
			 THE p =>  emit_pseudo_op  p;
		    esac;

		    list::apply  define_local_label  *labels; 
		    list::apply  emit_note       *notes;
		    list::apply  emit (reverse *instructions);
		}

	    also
	    fun emit_note  note
		=
		if   (note::to_string note != "")
                     
                     add_note  note;
                fi;

	    list::apply emit_note *notes;
	    list::apply emit_pseudo_op  (reverse *decls);

	    emit_pseudo_op  pseudo_op_basis_type::TEXT;

	    list::apply emit_it blocks;
	    list::apply emit_pseudo_op  (reverse *data);
	};
};












## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
