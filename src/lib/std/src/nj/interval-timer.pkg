## interval-timer.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

# An interface to system interval timers.

stipulate

    package int   = int_guts;					# int_guts		is from   src/lib/std/src/bind-int-32.pkg
    package int32 = int32_guts;					# int32_guts		is from   src/lib/std/src/int32.pkg
    #
    fun cfun x
	=
	c_interface::c_function "Lib7-Runtime" x;
herein

    package interval_timer: (weak)  Interval_Timer {		# Interval_Timer	is from   src/lib/std/src/nj/interval-timer.api

	fun tick ()
	    =
	    {   my (s, us)
		    =
		    tick' ();

		time_guts::from_microseconds
		    (int32::to_large s * 1000000 + int::to_large us);
	    }
	    where
		my tick' : Void -> ((int32::Int, Int))
		    =
		    cfun "intervalTick";				# Ultimately invokes   _lib7_runtime_itick   in   src/runtime/c-libs/lib7-runtime/itick.c
									# This is currently UNIMPLEMENTED.
	    end;


	fun from_time_opt (THE time)
		=>
		{   usec = time_guts::to_microseconds  time;

		    my (sec, usec)
			=
			integer_guts::div_mod (usec, 1000000);


		    THE ( int32::from_large  sec,
                            int::from_large  usec
                        );
		};

	    from_time_opt NULL
		=>
		NULL;
	end;


	fun set_interval_timer  tim_opt
	    =
	    set_interval_timer' (from_time_opt  tim_opt)
	    where
		my set_interval_timer':   Null_Or( (int32::Int, Int) ) -> Void
		    =
		    cfun "setIntervalTimer";				# Ultimately invokes   _lib7_runtime_setitimer   in   src/runtime/c-libs/lib7-runtime/setitimer.c
	    end;
    };
end;




## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
