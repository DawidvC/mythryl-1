## scene.pkg

# Compiled by:
#     src/lib/x-kit/tut/add/add.make6

stipulate
    include threadkit;				# threadkit	is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
#    include xinput;				# xinput	is from   src/lib/x-kit/xclient/xinput.pkg
    package xc = xcore;				# xcore		is from   src/lib/x-kit/xclient/xcore.pkg
    package xd = xdraw;				# xdraw		is from   src/lib/x-kit/xclient/xdraw.pkg
    package xg = xgeometry;			# xgeometry	is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xi = xinput;			# xinput	is from   src/lib/x-kit/xclient/xinput.pkg
    #
    package w  = widget;
    #
    package im = images;			# images	is from   src/lib/x-kit/tut/add/images.pkg
    package sp = splash;			# splash	is from   src/lib/x-kit/tut/add/splash.pkg
herein

    package scene:  Scene {			# Scene		is from   src/lib/x-kit/tut/add/scene.api


	Request = START | UP | WAVE | DIVE;

	Scene = SCENE { widget:     w::Widget,
			plea_slot:  Mailslot( Request )
		      };

	Position = GONE | TOP | STEP Int;

	top_margin    = 48;
	bottom_margin = 48;

	person_high   = 32;
	pole_wide     =  4;

	platform_width = 12;
	platform_depth =  2;

	climb_increment = 9;

	land_data =  ( 16,

		       [ [  "0x8888", "0x2222", "0x1111", "0x4444",
			    "0x8888", "0x2222", "0x1111", "0x4444",
			    "0x8888", "0x2222", "0x1111", "0x4444",
			    "0x8888", "0x2222", "0x1111", "0x4444"
		       ] ]
		     );


	water_data = ( 16,

		       [ [  "0x5555", "0xaaaa", "0x5555", "0xaaaa",
			    "0x5555", "0xaaaa", "0x5555", "0xaaaa",
			    "0x5555", "0xaaaa", "0x5555", "0xaaaa",
			    "0x5555", "0xaaaa", "0x5555", "0xaaaa"
		       ] ]
		      );


	fun make_scene  root_window  steps
	    =
	    {   screen =  w::screen_of  root_window;

		plea_slot   = make_mailslot ();
		plea' = take' plea_slot;

		realize_oneshot
		    =
		    make_oneshot_maildrop ();

		natural_height = top_margin + bottom_margin + platform_depth + (steps * person_high);

		size_preferences
		    =
		    { col_preference =>  w::INT_PREFERENCE { start_at=>0, step_by=>1, min_steps=>80,             ideal_steps=>180,            max_steps=>NULL },
		      row_preference =>  w::INT_PREFERENCE { start_at=>0, step_by=>1, min_steps=>natural_height, ideal_steps=>natural_height, max_steps=>NULL }
		    };

		widget
		    =
		    w::make_widget
		      { root_window,
			size_preference_thunk_of =>  fn () = size_preferences,
			realize   =>  fn arg = threadkit::set (realize_oneshot, arg),

			# I added the following line, cribbed randomly
			# from the other examples, to get this to
			# compile.  Apparently the 'args' element was
			# added after this example was written and it
			# was never updated (I checked the raw SML/NJ 110.58 source.)
			#     -- 2009-11-30 CrT
			#
			args         => fn () = { background => NULL }
		      };

		image_array  = rw_vector::from_list (map (im::make_image screen) im::images);

		dive_image   = rw_vector::get (image_array, im::dive_index);
		top_image    = rw_vector::get (image_array, im::top_index);
		top2_image   = rw_vector::get (image_array, im::top_index+1);
		top3_image   = rw_vector::get (image_array, im::top_index+2);
		top4_image   = rw_vector::get (image_array, im::top_index+3);

		wave_list = [top_image, top2_image, top3_image, top4_image, top3_image, top2_image];

		climb1 = rw_vector::get (image_array, im::climb_index);
		climb2 = rw_vector::get (image_array, im::climb_index+1);
		climb3 = rw_vector::get (image_array, im::climb_index+2);
		climb4 = rw_vector::get (image_array, im::climb_index+3);

		my  xg::SIZE { high => climb_height, ... }
		    =
		    xc::size_of_ro_pixmap  climb1.data;

		climb_bound =  top_margin + climb_increment + climb_height - 1;
		stand_image =  rw_vector::get (image_array, im::stand_index);

		land_ro_pixmap  =  xc::make_readonly_pixmap_from_ascii  screen   land_data;
		water_ro_pixmap =  xc::make_readonly_pixmap_from_ascii  screen  water_data;

		tower_pen
		    = 
		    xd::make_pen  [ xd::FOREGROUND xc::rgb8_black,
				    xd::BACKGROUND xc::rgb8_white
			          ];

		image_pen = tower_pen;

		water_pen = xd::clone_pen (tower_pen, [xd::FILL_STYLE_STIPPLED,  xd::STIPPLE water_ro_pixmap]);
		land_pen  = xd::clone_pen (tower_pen, [xd::FILL_STYLE_STIPPLED,  xd::STIPPLE  land_ro_pixmap]);

		splash_list
		    =
		    sp::make_splashes (root_window, water_ro_pixmap);


		timer_mailop
		    =
		    timeout_in' (time::from_milliseconds 40);


		fun pause ()
		    =
		    do_mailop  timer_mailop;


		fun realize { window, size, kidplug } pos
		    =
		    init (size, pos)
		    where
			my  xi::KIDPLUG { from_other', ... }
			    =
			    xi::ignore_mouse_and_keyboard  kidplug;

			drawwin =  xd::drawable_of_window  window;

			auto_drawwin
			    =
			    xd::make_unbuffered_drawable
				drawwin;

			fun init (xg::SIZE { wide, high }, pos)
			    =
			    {   midx = wide / 2;

				land = {    shape => xd::CONVEX_SHAPE,

					    verts => [ xg::POINT { col=>midx,               row=>high-bottom_margin },
						       xg::POINT { col=>wide - 1,           row=>high-bottom_margin },
						       xg::POINT { col=>wide - 1,           row=>high - 1 },
						       xg::POINT { col=>midx-bottom_margin, row=>high - 1 }
						     ]
					 };

				water = {   shape => xd::CONVEX_SHAPE,

					    verts => [ xg::POINT { col=>midx,               row=>high-bottom_margin },
						       xg::POINT { col=>0,                  row=>high-bottom_margin },
						       xg::POINT { col=>0,                  row=>high - 1 },
						       xg::POINT { col=>midx-bottom_margin, row=>high - 1 }
						     ]
					};

				pole_height = high-(bottom_margin+top_margin);

				platform
				    = 
				    xg::BOX
				      { col  => midx-((platform_width - pole_wide) / 2),
					row  => top_margin,
					high => platform_depth,
					wide => platform_width
				      };

				pole = xg::BOX
					 { col  => midx,
					   row  => top_margin,
					   wide => pole_wide,
					   high => pole_height
					 };

				top = xg::POINT
					{ col => midx,
					  row => top_margin - 1
					};

				fun draw_tower ()
				    = 
				    {   xd::fill_box  drawwin  tower_pen  pole;
					xd::fill_box  drawwin  tower_pen  platform;
				    };

				fun draw_landscape ()
				    =
				    {   xd::fill_polygon  drawwin  water_pen  water;
					xd::fill_polygon  drawwin  land_pen   land;
				    };

				stepx = midx+pole_wide;
				stepy = high-(bottom_margin+1);
				step  = pole_height / steps;

				fun step_pt i
				    =
				    xg::POINT { col =>  stepx,
					        row =>  stepy-(step*i)
					      };

				dive_pt
				    =
				    xg::POINT
				      { col =>  stepy+1,
					row =>  midx - 32
				      };

				splash_pt
				    =
				    xg::sub_pt (dive_pt, xg::POINT { col=>0, row=>1 } );


				fun put_top ()
				    = 
				    im::set_image
					(auto_drawwin, image_pen)
					(top_image, top);


				fun clear_top ()
				    =
				    im::clear_image
					auto_drawwin
					(top_image, top);


				fun put_step 0 =>  im::set_image  (auto_drawwin, image_pen)  (stand_image,  step_pt 0);
				    put_step i =>  im::set_image  (auto_drawwin, image_pen)  (climb1,       step_pt i);
				end; 


				fun clear_step 0 =>  im::clear_image  auto_drawwin  (stand_image,  step_pt 0);
				    clear_step i =>  im::clear_image  auto_drawwin  (climb1,       step_pt i);
				end;


				fun do_image (image, pt)
				    =
				    {   im::set_image (auto_drawwin, image_pen) (image, pt);

					pause();

					im::clear_image drawwin (image, pt);
				    };

				fun wave ()
				    =
				    repeat 4
				    where
					fun cycle _ = apply (fn i = do_image (i, top))
							    wave_list;

					fun repeat 0 =>  ();
					    repeat i =>  {  cycle();  repeat (i - 1);  };
					end;
				    end;

				fun splash ()
				    =
				    apply (fn i = do_image (i, splash_pt))
					  splash_list;

				fun make_dive i
				    =
				    {  dive_pt ->  xg::POINT { col=>dive_x, row=>dive_y };

				       init_x = midx - 2;
				       init_y = (stepy-(step*i)) + 16;

				       del_x = init_x - dive_x;
				       del_y = init_y - dive_y;

				       incr = 6;

				       fun x_of_y  y
					   =
					   (y*del_x  + init_x*del_y
						     - init_y*del_x
					   )
					   /
					   del_y;


				       fun dive (pt as xg::POINT { col=>x, row=>y } )
					   =
					   if (y < dive_y)

					       im::set_image  (auto_drawwin, image_pen)  (dive_image, pt);

					       pause ();

					       im::clear_image  auto_drawwin  (dive_image, pt);

					       dive (xg::POINT { col => x_of_y (y+incr),
							         row => y+incr
							       }
						    );
					   fi;

				       dive (xg::POINT { col=>init_x, row=>init_y } );
				    };


				fun climb i
				    =
				    loop pt0
				    where
					pt0 = step_pt i;

					my  xg::POINT { row=>y1, ... }
					    =
					    step_pt (i+1);

					ybound = max (y1, climb_bound);


					fun loop (pt as xg::POINT { col=>x, row=>y  } )
					    =
					    if (y > ybound)

						pt' = xg::POINT { col=>x, row=>y-climb_increment };

						do_image (climb1, pt);
						do_image (climb2, pt);
						do_image (climb3, pt');
						do_image (climb4, pt');

						loop pt';

					    fi;
				    end;


				fun redraw (_, pos)
				    =
				    {   xd::clear_drawable  drawwin;

					draw_tower ();

					draw_landscape ();

					case pos
					    #
					    GONE   =>  ();
					    TOP    =>  put_top ();
					    STEP i =>  put_step i;
					esac;
				    };


				fun do_mom (xi::ETC_REDRAW rlist, pos)
					=>
					redraw (rlist, pos);

				    do_mom (xi::ETC_RESIZE (xg::BOX { wide, high, ... } ), pos)
					=>
					init (xg::SIZE { wide, high }, pos);

				    do_mom _
					=>
					();
				end;


				fun do_gone ()
				    =
				    {   fun do_plea START =>  climbing 0;
					    do_plea _     =>  do_gone ();
					end;


					select [

					    from_other'
						==>
						(fn envelope = do_gone (do_mom (xi::envelope_contents  envelope,  GONE))),

					    plea'
						==>
						do_plea
					];
				    }

				also
				fun do_top ()
				    =
				    {   wave    ();
					put_top ();
					loop    ();
				    }
				    where
					fun loop ()
					    =
					    select [

						from_other'
						    ==>
						   (fn mailop = loop (do_mom (xi::envelope_contents  mailop,  TOP))),

						plea'
						    ==>
						    (fn req = loop (do_plea req))
					    ]
					    where
						fun do_plea START
							=>
							{   clear_top ();
							    climbing  0;
							};

						    do_plea _
							=>
							();
						end;
					    end;
				    end


				also
				fun climbing i
				    =
				    {   put_step i;
					loop ();
				    }
				    where
					fun loop ()
					    = 
					    select [
						from_other'        ==>  (fn mailop =  loop (do_mom (xi::envelope_contents  mailop,  STEP i))),
						plea'  ==>  loop o do_plea
					    ]
					    where
						fun to_top ()
						    =
						    {   clear_step i;
							climb i;
							do_top();
						    };

						fun do_climb s
						    =
						    {   clear_step i;
							climb i;
							climbing s;
						    };

						fun do_plea START =>  if (i != 0)   clear_step i;   climbing 0;  fi;
						    do_plea WAVE  =>  to_top ();
						    do_plea DIVE  => { clear_step i;     do_dive i; };
						    do_plea UP    =>  if (i+1 < steps)  do_climb (i+1);
									 else              to_top ();
									 fi;
						end;
					    end;
				    end

				also
				fun do_dive i
				    =
				    {   make_dive i;
					splash  ();
					do_gone ();
				    };


				case pos
				    #
				    GONE   => do_gone ();
				    TOP    => do_top  ();
				    STEP i => climbing i;
				esac;
			  };				# fun init


		  end;				# fun realize

		fun scene pos
		    =
		    {   fun do_plea (START,   _) =>  STEP 0;
			    do_plea (DIVE,    _) =>  GONE;
			    do_plea (WAVE,    _) =>  TOP;
			    do_plea (UP, STEP i) =>  i+1 < steps   ??  STEP (i+1)   ::   TOP;
			    do_plea (UP, p     ) =>  p;
			end; 


			select [

			    plea'
				==>
				(fn msg = scene (do_plea (msg, pos))),

			    get'  realize_oneshot
				==>
				(fn arg = realize arg pos)
			];
		    };

		  make_thread "scene" .{
		      #
		      scene (STEP 0);
		  };

		  SCENE { widget, plea_slot };

	    };							# fun make_scene

	fun as_widget (SCENE { widget, ... } )
	    =
	    widget;

	fun start (SCENE { plea_slot, ... } ) =  give (plea_slot, START);
	fun up    (SCENE { plea_slot, ... } ) =  give (plea_slot, UP   );
	fun dive  (SCENE { plea_slot, ... } ) =  give (plea_slot, DIVE );
	fun wave  (SCENE { plea_slot, ... } ) =  give (plea_slot, WAVE );

    };

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
