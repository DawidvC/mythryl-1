## symbol-table-to-modulemap.pkg
## (C) 2001 Lucent Technologies, Bell Labs (Matthias Blume)

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# Rapid module_map generation from module_trees.
#
# module_map instances are defined in
#
#     src/lib/compiler/front/typecheck-stuff/modules/module-map.pkg
#
# and created by 
#
#     src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-to-modulemap.pkg make_map
#
# based on the Module_Tree instances defined in
#
#     src/lib/compiler/front/typecheck-stuff/modules/module.api
#
# and placed in symbol tables during unpickling in
#
#     src/lib/compiler/front/semantic/pickle/unpickle-module.pkg 
#
# The idea is that Module_Tree instances are compact
# and self-sufficient, hence low-maintainance to
# keep around, whereas module_map instances are what
# we really want for module dependency analysis and
# such:  By storing Module_Tree instances in our
# symbol tables and then generating module_maps
# from them on the fly as needed (afterward promptly
# discarding them) we get the best of both worlds.
#
# NB: This module cannot deal with symbol tables
#     that did not come out of the unpickler.
#
#                 (March 2000, Matthias Blume)



package symbol_table_to_module_map

: (weak)
api {
    make_map:    symbol_table::Symbol_Table                          -> module_map::Module_Map;
    make_map' : (symbol_table::Symbol_Table, module_map::Module_Map) -> module_map::Module_Map;
}

{
    package m  =  module;	# module	is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
    package mi =  module_map;	# module_map	is from   src/lib/compiler/front/typecheck-stuff/modules/module-map.pkg


    fun make_map'  (  symbol_table: symbol_table::Symbol_Table,
                      initial_map
                   )
        =
        {   fun do_tree_node (tree_node, map)
                =
                {   fun do_record (record, stub_of, tree_of, part, id_of, insert, get)
                        =
                        {   id =  id_of  record;
			
			    case (get (map, id))
			      
			         THE _ => map;

			         NULL
				     =>
				     {   map' = insert (map, id, part);

					 case (stub_of part)
					   
					      THE stub_info
                                                  =>
                                                  do_tree_node  (tree_of stub_info, map');

					      NULL
					          =>
                                                  error_message::impossible  "ModIdSet: no Stub_Info";
                                         esac;
				     };
                            esac;
			};
		

		    case tree_node
		      
		         m::TYPE_CONSTRUCTOR_MODTREE_NODE record
			     =>
			     mi::bind_type_constructor_identifier (
				 map,
				 mi::type_identifier record,
				 record
			     );

		         m::API_MODTREE_NODE record
			     =>
			     do_record (
				 record,
				 .stub,
				 .module_tree,
				 record,
				 mi::api_identifier,
				 mi::bind_api_identifier,
				 mi::find_api_by_symbol
			     );

		         m::PACKAGE_MODTREE_NODE record
			     =>
			     do_record (
				 record,
				 .stub,
				 .module_tree,
				 record.typechecked_package,
				 mi::package_identifier,
				 mi::bind_package_identifier,
				 mi::find_package_via_symbol_path
			     );

		         m::GENERIC_MODTREE_NODE   record
			     =>
			     do_record (
				 record,
				 .stub,
				 .module_tree,
				 record.typechecked_generic,
				 mi::generic_identifier,
				 mi::bind_generic_identifier,
				 mi::find_generic_via_symbol_path
			     );

		         m::TYPECHECKER_DICTIONARY_MODTREE_NODE record
			     =>
			     do_record (
				 record,
				 .stub,
				 .module_tree,
				 record,
				 mi::dictionary_identifier,
				 mi::bind_dictionary_identifier,
				 mi::find_typechecked_package
			     );

		         m::MODTREE_BRANCH node_list
			     =>
			     fold_left
                                 do_tree_node
                                 map
                                 node_list;
                    esac;
		};

	    fun bind ((_, (_, THE tree_node)), map)   =>   do_tree_node (tree_node, map);
	        bind (_,                       map)   =>   map;
            end;
	
	    symbol_table::realfold bind initial_map symbol_table;
	};                                                       #  fun make_map' 

    make_map'
        =
        compile_statistics::do_phase (compile_statistics::make_phase "Compiler 923 genmap")
        make_map';

    fun make_map symbol_table
        =
        make_map' (symbol_table, mi::empty_module_map);
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
