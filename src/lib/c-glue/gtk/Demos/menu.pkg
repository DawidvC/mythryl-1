#  example-start menu menu.c 


local

   use C Gtk gtk_enums gdk_enums

   # Respond to a button-press by posting a menu passed in as widget.
   #
   # Note that the "widget" argument is the menu being posted, NOT
   # the button that was pressed.


   fun button_press menu (button, event) =
    if GdkEvent::get'type event == GDK_BUTTON_PRESS then
    let bevent = &(GdkEvent::get'button event); 
    in  gtk_menu_popup::f (menu, NULL, NULL, FNULL, NULL,
                          GdkEventButton::get'button bevent,
                          GdkEventButton::get'time bevent);
        /* Tell calling code that we have handled this event; the buck
         * stops here. */
        TRUE
    end
    else 
    #  Tell calling code that we have not handled this event; pass it on. 
        FALSE

#  Print a string when a menu item is selected 

fun menuitem_response text _ = print (text$"\n")

in

fun main (prog, argv) = 
let
    gtk_init::f (prog . argv)

    #  Create a new window 
    window = gtk_window_new::f (GTK_WINDOW_TOPLEVEL);
    gtk_widget_set_usize::f (window, 200, 100);
    gtk_window_set_title::f (window, "GTK Menu Test");
    gtk_event_connect::f (window, "delete_event",
                                     (fn _ => (gtk_main_quit::f(); FALSE)))

    /* Init the menu-widget, and remember -- never
     * gtk_show_widget::f() the menu widget!! 
     * This is the menu that holds the menu items, the one that
     * will pop up when you click on the "Root Menu" in the apply */
    menu = gtk_menu_new::f ();

    /* Next we make a little loop that makes three menu-entries for "test-menu".
     * Notice the call to gtk_menu_append::f.  Here we are adding a list of
     * menu items to our menu.  Normally, we'd also catch the "clicked"
     * signal on each of the menu items and setup a callback for it,
     * but it's omitted here to save space. */
 
    fun init i = 
    if i < 3 then
    let 
            #  Copy the names to the buf. 
        buf = "Test-undermenu - "$int::to_string i

            #  Create a new menu-item with a name... 
        menu_items = gtk_menu_item_new_with_label::f (buf);

            #  ...and add it to the menu. 
        gtk_menu_append::f (menu, menu_items);

	    #  Do something interesting when the menuitem is selected 
	gtk_signal_connect::f (menu_items, "activate", 
                                      menuitem_response buf)
            #  Show the widget 
        gtk_widget_show::f (menu_items);
    in init (i+1)
    end
    else ()

    my () = init 0

    /* This is the root menu, and will be the label
     * displayed on the menu bar.  There won't be a signal handler attached,
     * as it only pops up the rest of the menu when pressed. */
    root_menu = gtk_menu_item_new_with_label::f ("Root Menu");

    gtk_widget_show::f (root_menu);

    /* Now we specify that we want our newly created "menu" to be the menu
     * for the "root menu" */
    gtk_menu_item_set_submenu::f (root_menu, menu);

    #  A vbox to put a menu and a button in: 
    vbox = gtk_vbox_new::f (FALSE, 0);
    gtk_container_add::f (window, vbox);
    gtk_widget_show::f (vbox);

    #  Create a menu-bar to hold the menus and add it to our main window 
    menu_bar = gtk_menu_bar_new::f ();
    gtk_box_pack_start::f (vbox, menu_bar, FALSE, FALSE, 0w2);
    gtk_widget_show::f (menu_bar);

    #  Create a button to which to attach menu as a popup 
    button = gtk_button_new_with_label::f ("press me");
    gtk_event_connect::f (button, "event", button_press menu);
    gtk_box_pack_end::f (vbox, button, TRUE, TRUE, 0w2);
    gtk_widget_show::f (button);

    /* And finally we append the menu-item to the menu-bar -- this is the
     * "root" menu-item I have been raving about =) */
    gtk_menu_bar_append::f (menu_bar, root_menu);

    /* always display the window as the last step so it all splashes on
     * the screen at once. */
    gtk_widget_show::f (window);
in
    gtk_main::f ();
    0
end

end

#  example-end 

