## tree.api



# api for tree data package and manipulation functions 



api TREE_SUPPORT =
api 

type node_value

end 


api TREE =
api

package s:  TREE_SUPPORT 

exception EmptyTree

type tree
type node_id

enum tree_node =  
           Ground
         | TreeNode of { value: Ref( s::node_value ),
			current_subtree:  Ref( Bool ), 
			parent:  Ref( tree_node ),
                        left_sibling:  Ref( tree_node ),
                        right_sibling:  Ref( tree_node ),
			children:  REF( List  ( REF( tree_node ) ) )
	                }

# modification functions
my new_tree:  s::node_value -> tree 
my delete_children:  tree -> tree 
my change_node_value:  tree * s::node_value -> tree
my change_children:  tree -> ( List( s::node_value ) ) -> tree
my current_node_value:  tree -> s::node_value
my node_apply:  (s::node_value -> X) -> node_id -> X

# query functions
my at_top:  tree -> Bool
my at_ground:  tree -> Bool
my is_null_tree:  node_id -> Bool

# navigation functions
my move_to_top:  tree -> tree 
my move_to_parent:  tree -> tree 
my move_to_left_sibling:  tree -> tree 
my move_to_right_sibling:  tree -> tree 
my move_to_children:  tree -> tree 
my move_to_subtree:  tree -> node_id -> tree
my move_to_ancestor:  tree -> (s::node_value -> X) -> ((X * X) -> Bool) * X -> tree

#  traversal functions 
my bottom_up:  (tree * (s::node_value -> X) * ((s::node_value * (List( X ) )) ->X)) -> X 
my preorder:  tree -> (node_id -> Y) * D * (node_id -> List( node_id ) ) * (Y * D -> D) -> List( node_id ) -> D
my search_subtree:  node_id -> (node_id -> Bool) -> Null_Or( node_id )

#  Access functions 
my current_subtree:  tree -> node_id 
my get_value:  node_id -> s::node_value
my get_value_ref:  node_id -> Ref( s::node_value )
my get_parent:  node_id -> node_id
my get_left_sibling:  node_id -> node_id
my get_right_sibling:  node_id -> node_id
my get_children:  node_id -> Ref( List( node_id ) )
my get_children_list:  node_id -> List( node_id )
my get_subtree:  tree -> node_id 
my get_tree:  tree -> node_id
my get_ground:  Void -> node_id
my get_ancestor_right_sibling:  node_id -> node_id

end 





## COPYRIGHT (c) 1992 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
