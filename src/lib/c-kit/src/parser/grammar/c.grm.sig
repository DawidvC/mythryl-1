api Ckit_Tokens {
    Token (X,Y);
    Semantic_Value;
    type_name: ((String), X, X) -> Token (Semantic_Value,X);
    elipsis: (X, X) -> Token (Semantic_Value,X);
    unary: (X, X) -> Token (Semantic_Value,X);
    typedef: (X, X) -> Token (Semantic_Value,X);
    sizeof: (X, X) -> Token (Semantic_Value,X);
    void: (X, X) -> Token (Semantic_Value,X);
    signed: (X, X) -> Token (Semantic_Value,X);
    unsigned: (X, X) -> Token (Semantic_Value,X);
    union: (X, X) -> Token (Semantic_Value,X);
    struct: (X, X) -> Token (Semantic_Value,X);
    saturate: (X, X) -> Token (Semantic_Value,X);
    fractional: (X, X) -> Token (Semantic_Value,X);
    short: (X, X) -> Token (Semantic_Value,X);
    long: (X, X) -> Token (Semantic_Value,X);
    int: (X, X) -> Token (Semantic_Value,X);
    float: (X, X) -> Token (Semantic_Value,X);
    enum_t: (X, X) -> Token (Semantic_Value,X);
    double: (X, X) -> Token (Semantic_Value,X);
    char: (X, X) -> Token (Semantic_Value,X);
    goto: (X, X) -> Token (Semantic_Value,X);
    continue: (X, X) -> Token (Semantic_Value,X);
    break: (X, X) -> Token (Semantic_Value,X);
    return: (X, X) -> Token (Semantic_Value,X);
    while_t: (X, X) -> Token (Semantic_Value,X);
    default: (X, X) -> Token (Semantic_Value,X);
    case_t: (X, X) -> Token (Semantic_Value,X);
    switch: (X, X) -> Token (Semantic_Value,X);
    do_t: (X, X) -> Token (Semantic_Value,X);
    for_t: (X, X) -> Token (Semantic_Value,X);
    else_t: (X, X) -> Token (Semantic_Value,X);
    then_t: (X, X) -> Token (Semantic_Value,X);
    if_t: (X, X) -> Token (Semantic_Value,X);
    volatile: (X, X) -> Token (Semantic_Value,X);
    const: (X, X) -> Token (Semantic_Value,X);
    register: (X, X) -> Token (Semantic_Value,X);
    static: (X, X) -> Token (Semantic_Value,X);
    auto: (X, X) -> Token (Semantic_Value,X);
    extern: (X, X) -> Token (Semantic_Value,X);
    cconst: ((large_int::Int), X, X) -> Token (Semantic_Value,X);
    string_constant: ((String), X, X) -> Token (Semantic_Value,X);
    realnum: ((Float), X, X) -> Token (Semantic_Value,X);
    decnum: ((large_int::Int), X, X) -> Token (Semantic_Value,X);
    rshift: (X, X) -> Token (Semantic_Value,X);
    lshift: (X, X) -> Token (Semantic_Value,X);
    and_t: (X, X) -> Token (Semantic_Value,X);
    or_t: (X, X) -> Token (Semantic_Value,X);
    neq: (X, X) -> Token (Semantic_Value,X);
    eq: (X, X) -> Token (Semantic_Value,X);
    gt: (X, X) -> Token (Semantic_Value,X);
    lt: (X, X) -> Token (Semantic_Value,X);
    gte: (X, X) -> Token (Semantic_Value,X);
    lte: (X, X) -> Token (Semantic_Value,X);
    rshiftequals: (X, X) -> Token (Semantic_Value,X);
    lshiftequals: (X, X) -> Token (Semantic_Value,X);
    andequals: (X, X) -> Token (Semantic_Value,X);
    orequals: (X, X) -> Token (Semantic_Value,X);
    divequals: (X, X) -> Token (Semantic_Value,X);
    timesequals: (X, X) -> Token (Semantic_Value,X);
    modequals: (X, X) -> Token (Semantic_Value,X);
    xorequals: (X, X) -> Token (Semantic_Value,X);
    minusequals: (X, X) -> Token (Semantic_Value,X);
    plusequals: (X, X) -> Token (Semantic_Value,X);
    equals: (X, X) -> Token (Semantic_Value,X);
    identifier: ((String), X, X) -> Token (Semantic_Value,X);
    arrow: (X, X) -> Token (Semantic_Value,X);
    dec: (X, X) -> Token (Semantic_Value,X);
    inc: (X, X) -> Token (Semantic_Value,X);
    times: (X, X) -> Token (Semantic_Value,X);
    bang: (X, X) -> Token (Semantic_Value,X);
    hat: (X, X) -> Token (Semantic_Value,X);
    minus: (X, X) -> Token (Semantic_Value,X);
    plus: (X, X) -> Token (Semantic_Value,X);
    divide: (X, X) -> Token (Semantic_Value,X);
    tilde: (X, X) -> Token (Semantic_Value,X);
    bar: (X, X) -> Token (Semantic_Value,X);
    amp: (X, X) -> Token (Semantic_Value,X);
    percent: (X, X) -> Token (Semantic_Value,X);
    question: (X, X) -> Token (Semantic_Value,X);
    comma: (X, X) -> Token (Semantic_Value,X);
    dot: (X, X) -> Token (Semantic_Value,X);
    rbrace: (X, X) -> Token (Semantic_Value,X);
    lbrace: (X, X) -> Token (Semantic_Value,X);
    rcurly: (X, X) -> Token (Semantic_Value,X);
    lcurly: (X, X) -> Token (Semantic_Value,X);
    rparen: (X, X) -> Token (Semantic_Value,X);
    lparen: (X, X) -> Token (Semantic_Value,X);
    semicolon: (X, X) -> Token (Semantic_Value,X);
    colon: (X, X) -> Token (Semantic_Value,X);
    eof: (X, X) -> Token (Semantic_Value,X);
};
api Ckit_Lrvals{
    package tokens:  Ckit_Tokens;
    package parser_data: Parser_Data;
    sharing parser_data::token::Token == tokens::Token;
    sharing parser_data::Semantic_Value == tokens::Semantic_Value;
};
