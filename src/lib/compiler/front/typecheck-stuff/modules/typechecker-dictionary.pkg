## typechecker-dictionary.pkg 

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



package typechecker_dictionary: (weak)  Typechecker_Dictionary {	# Typechecker_Dictionary	is from   src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.api

    stipulate

	package mp = module_path;					# module_path			is from   src/lib/compiler/front/typecheck-stuff/modules/module-path.pkg
	package st = stamp;						# stamp				is from   src/lib/compiler/front/typecheck-stuff/basics/stamp.pkg
	package m  = module;						# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
	package t  = types;						# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg

	package ed = module_path::module_stamp_map;

    herein

	say       = control_print::say;
	debugging = typecheck_data_control::typechecker_dictionary_debugging;		# eval:   set_control "ed::typechecker_dictionary_debugging" "TRUE";

	fun if_debugging_say (msg: String)
            =
	    if *debugging
                 say msg;
                 say "\n";
            fi;

	fun bug msg
            =
            error_message::impossible("typechecker_dictionary: " + msg);

	Module_Stamp           = mp::Module_Stamp;
	Module_Path            = mp::Module_Path;
	Typechecker_Dictionary = m::Typechecker_Dictionary;

	exception UNBOUND;

	empty = m::NULL_TYPECHECKER_DICTIONARY;

	fun mark (_, e as m::MARKED_TYPECHECKER_DICTIONARY _)  =>  e;
	    mark (_, e as m::NULL_TYPECHECKER_DICTIONARY)      =>  e;
	    mark (_, e as m::ERRONEOUS_ENTRY_DICTIONARY) =>  e;

	    mark (make_stamp, typechecker_dictionary)
		=>
		m::MARKED_TYPECHECKER_DICTIONARY {
		    stamp => make_stamp(),
		    stub  => NULL,
		    typechecker_dictionary
		};
        end;

	fun set (m::NAMED_TYPECHECKER_DICTIONARY (d, dictionary), v, e) =>  m::NAMED_TYPECHECKER_DICTIONARY (ed::set (d,         v, e), dictionary);
	    set (dictionary, v, e)                                      =>  m::NAMED_TYPECHECKER_DICTIONARY (ed::set (ed::empty, v, e), dictionary);
        end;

	fun atop (_, m::ERRONEOUS_ENTRY_DICTIONARY) => m::ERRONEOUS_ENTRY_DICTIONARY;
	    atop (m::ERRONEOUS_ENTRY_DICTIONARY, _) => m::ERRONEOUS_ENTRY_DICTIONARY;
	    atop (e1, m::NULL_TYPECHECKER_DICTIONARY) => e1;
	    atop (m::MARKED_TYPECHECKER_DICTIONARY { typechecker_dictionary, ... }, e2) => atop (typechecker_dictionary, e2);
	    atop (m::NAMED_TYPECHECKER_DICTIONARY (d, e1), e2) => m::NAMED_TYPECHECKER_DICTIONARY (d, atop (e1, e2));
	    atop (m::NULL_TYPECHECKER_DICTIONARY, e2) => e2;
        end;

	fun atop_sp (_, m::ERRONEOUS_ENTRY_DICTIONARY) => m::ERRONEOUS_ENTRY_DICTIONARY;
	    atop_sp (m::ERRONEOUS_ENTRY_DICTIONARY, _) => m::ERRONEOUS_ENTRY_DICTIONARY;
	    atop_sp (e1, m::NULL_TYPECHECKER_DICTIONARY) => e1;
	    atop_sp (m::MARKED_TYPECHECKER_DICTIONARY { typechecker_dictionary, ... }, e2) => atop_sp (typechecker_dictionary, e2);
	    atop_sp (m::NAMED_TYPECHECKER_DICTIONARY (d, e1), e2) => atop_merge (d, atop (e1, e2));
	    atop_sp (m::NULL_TYPECHECKER_DICTIONARY, e2) => e2;
        end 

	also
	fun atop_merge (d, m::NULL_TYPECHECKER_DICTIONARY)                                    => m::NAMED_TYPECHECKER_DICTIONARY (d, m::NULL_TYPECHECKER_DICTIONARY);
	    atop_merge (d, m::NAMED_TYPECHECKER_DICTIONARY (d', e))                           => m::NAMED_TYPECHECKER_DICTIONARY (ed::union_with #1 (d, d'), e);
	    atop_merge (d, m::MARKED_TYPECHECKER_DICTIONARY { typechecker_dictionary, ... } ) => atop_merge (d, typechecker_dictionary);
	    atop_merge (d, m::ERRONEOUS_ENTRY_DICTIONARY)                                     => m::ERRONEOUS_ENTRY_DICTIONARY;
        end;

	fun to_list (m::MARKED_TYPECHECKER_DICTIONARY { typechecker_dictionary, ... } ) => to_list  typechecker_dictionary;

	    to_list (m::NAMED_TYPECHECKER_DICTIONARY (d, ee))		 # ed::fold((op . ), toList ee, d)
		=>
	        ed::keyed_fold_right
                    (fn (key, value, base) =  (key, value) ! base)
                    (to_list ee)
                    d;

	    to_list m::NULL_TYPECHECKER_DICTIONARY =>  NIL;
	    to_list m::ERRONEOUS_ENTRY_DICTIONARY  =>  NIL;
        end;

	fun find_entry_by_module_stamp (dictionary, module_stamp)
            =
            scan dictionary
            where
	        fun scan (m::MARKED_TYPECHECKER_DICTIONARY { typechecker_dictionary, ... } )
                        =>
                        scan  typechecker_dictionary;

		    scan (m::NAMED_TYPECHECKER_DICTIONARY (d, rest))
			=> 
			{
if_debugging_say ("find_entry_b_module_stamp/m::NAMED_TYPECHECKER_DICTIONARY (d, rest) calling     ed::get:       src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.pkg");  result =
			    case (ed::get (d, module_stamp))

				THE e =>  e;
				NULL  =>  scan rest;
			    esac;
if_debugging_say ("find_entry_b_module_stamp/m::NAMED_TYPECHECKER_DICTIONARY (d, rest) back from   ed::get:       src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.pkg");  result;
			};

		    scan m::ERRONEOUS_ENTRY_DICTIONARY
			=>
			m::ERRONEOUS_ENTRY;

		    scan m::NULL_TYPECHECKER_DICTIONARY
			=> 
			  {
if_debugging_say ("didn't find " + mp::module_stamp_to_string module_stamp + ": find_entry_by_module_stamp:  src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.pkg");
			      raise exception UNBOUND;
                          };
                end;
	    end;

	fun find_package_by_module_stamp (typechecker_dictionary, module_stamp)
            = 
	    case (find_entry_by_module_stamp (typechecker_dictionary, module_stamp))

		 m::PACKAGE_ENTRY ent => ent;
		 m::ERRONEOUS_ENTRY   => m::bogus_typechecked_package;
		 _                    => bug "find_package_by_module_stamp";
            esac;

	fun find_type_constructor_by_module_stamp (typechecker_dictionary, module_stamp)
            = 
	    case (find_entry_by_module_stamp (typechecker_dictionary, module_stamp))
	      
		 m::TYPE_CONSTRUCTOR_ENTRY ent => ent;
		 m::ERRONEOUS_ENTRY            => types::ERRONEOUS_TYPE_CONSTRUCTOR;
		 _                             => bug "find_type_constructor_by_module_stamp";
            esac;

	fun find_generic_by_module_stamp (typechecker_dictionary, module_stamp)
            = 
	    case (find_entry_by_module_stamp (typechecker_dictionary, module_stamp))
	      
	         m::GENERIC_ENTRY ent => ent;
		 m::ERRONEOUS_ENTRY   => m::bogus_typechecked_generic;
		 _                    => bug "find_generic_by_module_stamp";
            esac;

	fun find_entry_via_module_path (typechecker_dictionary, [])
                =>
                bug "find_entry_via_module_path.1";

	    find_entry_via_module_path (typechecker_dictionary, [v])
                =>
                {
if_debugging_say ("find_entry_via_module_path/[v] calling   find_entry_by_module_stamp:       src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.pkg");  result =
                    find_entry_by_module_stamp (typechecker_dictionary, v);
if_debugging_say ("find_entry_via_module_path/[v] BACK from find_entry_by_module_stamp:       src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.pkg");  result;
                };

	    find_entry_via_module_path (typechecker_dictionary, module_path as (v ! rest))
                =>
	        case (find_entry_by_module_stamp (typechecker_dictionary, v))
		  
		     m::PACKAGE_ENTRY { typechecker_dictionary, ... }
                         =>
                         find_entry_via_module_path (typechecker_dictionary, rest);

		     m::ERRONEOUS_ENTRY
                         =>
                         m::ERRONEOUS_ENTRY;

		     entity
			 =>
			 {   say "find_typechecked_package.1: expected PACKAGE_ENTRY\n";
			     say "found entity: ";

			     case entity

			         m::TYPE_CONSTRUCTOR_ENTRY _ => say "TYPE_CONSTRUCTOR_ENTRY\n";
				 m::GENERIC_ENTRY          _ => say "GENERIC_ENTRY\n";
				 _                           => say "ERRONEOUS_ENTRY\n";
                             esac;

			     say "module_path: "; say (mp::module_path_to_string (module_path)); say "\n";
			     bug "findMacroExpansionViaMacroExpansionPath.2";};
                esac;

        end;

	fun find_type_constructor_via_module_path (typechecker_dictionary, module_path)
            = 
{
if_debugging_say ("find_type_constructor_via_module_path calling    find_entry_via_module_path:       src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.pkg");  result =
	    case (find_entry_via_module_path (typechecker_dictionary, module_path))
	      
	         m::TYPE_CONSTRUCTOR_ENTRY type_constructor => type_constructor;
	         m::ERRONEOUS_ENTRY                         => t::ERRONEOUS_TYPE_CONSTRUCTOR;
	         _                                          => bug "find_type_constructor_via_module_path: wrong entity";
            esac;
if_debugging_say ("find_type_constructor_via_module_path back from  find_entry_via_module_path:       src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.pkg");  result;
};

	fun find_package_via_module_path (typechecker_dictionary, module_path)
            = 
	    case (find_entry_via_module_path (typechecker_dictionary, module_path))
	      
	         m::PACKAGE_ENTRY typechecked_package =>  typechecked_package;
	         m::ERRONEOUS_ENTRY                   =>  m::bogus_typechecked_package;
	         _                                    =>  bug "find_package_via_module_path: wrong entity";
            esac;

	fun find_generic_via_module_path (typechecker_dictionary, module_path)
            = 
	    case (find_entry_via_module_path (typechecker_dictionary, module_path))
	      
	         m::GENERIC_ENTRY typechecked_package => typechecked_package;
	         m::ERRONEOUS_ENTRY                   => m::bogus_typechecked_generic;
	         _                                    => bug "find_generic_via_moudle_path: wrong entity";
            esac;

    end;			#  stipulate ... in ...

}; #  package typechecker_dictionary 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
