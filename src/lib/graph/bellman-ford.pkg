#
# This module implements the Bellman Ford algorithm for single source
# shortest paths.
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

###                "There are three principal ways to lose money:  wine,
###                 women, and engineers. While the first two are more
###                 pleasant, the third is by far the more certain."
###
###                                -- Baron Rothschild, ca. 1800 



generic package bellman_fords_single_source_shortest_paths (num:  Abelian_Group_With_Infinity)		# Abelian_Group_With_Infinity	is from   src/lib/graph/group.api
: (weak) 
api { include Single_Source_Shortest_Paths; 		# Single_Source_Shortest_Paths	is from   src/lib/graph/shortest-paths.api
    exception NEGATIVE_CYCLE;
}
{

   package num = num;
   package g= graph;		# graph		is from   src/lib/graph/graph.pkg
   package a= rw_vector;	# rw_vector	is from   src/lib/std/src/rw-vector.pkg

   exception NEGATIVE_CYCLE;

   fun single_source_shortest_paths { graph => g::GRAPH graph,   s,   weight }
       =
       { dist, prior }
       where
           nnn    = graph.capacity ();

	   dist   = a::make_rw_vector (nnn, num::inf);
	   prior  = a::make_rw_vector (nnn, -1);
	   count  = a::make_rw_vector (nnn, 0);

	   fun driver ([],[])  => ();
	       driver([], b)   => driver (reverse b,[]);
	       driver (u ! a, b) => driver (iterate (u, a, b));
           end 

	   also fun iterate (u, a, b)
               =
	       {   n = int::(+) (a::get (count, u), 1);
		   a::set (count, u, n);

		   if   (n >= nnn   )   raise exception NEGATIVE_CYCLE;   fi;

		   du = a::get (dist, u);

		   fun relax ([], a, b) => (a, b);

		       relax((e as (_, v, _)) ! es, a, b)
			   =>
			   {   c = num::(+) (du, weight e);

			       if  (num::(<) (c, a::get (dist, v)))
				    a::set (dist, v, c); a::set (prior, v, u);
				    relax (es, a, v ! b);
			       else
                                    relax (es, a, b);
                               fi;
			   };
                   end;

	           relax (graph.out_edges u, a, b);
	      };

           a::set (dist, s, num::zero);

	   driver([s],[]);
       end;
};

