## codetree-hash-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# We get invoked from
#
#    src/lib/compiler/codegen/ppc/ppc-codetree.pkg
#    src/lib/compiler/codegen/sun/sparc-codetree.pkg
#    src/lib/compiler/codegen/x86/x86-codetree.pkg

generic package codetree_hash_g (

    package codetree
        :
        Codetree;			# Codetree	is from   src/lib/compiler/lower/codetree/codetree.api

    # Hashing extensions 
    #
    hash_sext:   codetree::Hash_Fns -> codetree::Sext -> Unt;
    hash_rext:   codetree::Hash_Fns -> codetree::Rext -> Unt;
    hash_fext:   codetree::Hash_Fns -> codetree::Fext -> Unt;
    hash_ccext:  codetree::Hash_Fns -> codetree::Ccext -> Unt;
)
: (weak) Codetree_Hash			# Codetree_Hash	is from   src/lib/compiler/lower/codetree/codetree-hash.api
{
    package codetree = codetree;
    package t	     = codetree;
    package i	     = codetree::machine_int;
    package constant = codetree::constant;
    package b        = codetree::basis;

    package c= cells_basis;		# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg
    package w= unt;			# unt		is from   src/lib/std/unt.pkg

    w =   w::from_int;
    i2s =   int::to_string;
    to_lower =   string::map char::to_lower;

    fun error msg
        =
        lowcode_error_message::error("label_expression", msg);

    fun wv (c::CELL { id, ... } )
        =
        w id;

    fun wvs is
	= 
	f (is, 0u0)
        where
	    fun f ([], h) => h;
	        f (i ! is, h) => f (is, wv i+h);
            end;
        end;


    # Hashing

    hash_label =   label::hash;

    fun hasher ()
        =
        { statement        => hash_statement,
          int_expression   => hash_int_expression,
          float_expression => hash_float_expression,
          bool_expression  => hash_bool_expression
        }

   also
   fun hash_ctrl ctrl
        =
        wv ctrl

   also
   fun hash_statement statement
        =
        case statement

	     t::MOVE_INT (t, dst, int_expression) => 0u123 + w t + wv dst + hash_int_expression int_expression;
	     t::MOVE_BOOL (dst, bool_expression) => 0u1234 + wv dst + hash_bool_expression bool_expression;
	     t::MOVE_FLOAT (fty, dst, float_expression) => 0u12345 + w fty + wv dst + hash_float_expression float_expression;
	     t::COPY_INTS (type, dst, src) => 0u234 + w type + wvs dst + wvs src;
	     t::COPY_FLOATS (fty, dst, src) => 0u456 + w fty + wvs dst + wvs src;
	     t::JUMP (ea, labels) => 0u45 + hash_int_expression ea;
	     t::CALL { funct, targets, defs, uses, region, pops } =>
		  hash_int_expression funct + hash_lowcodes defs + hash_lowcodes uses; 
	     t::RET _ => 0u567;
	     t::STORE (type, ea, data, mem) => 0u888 + w type + hash_int_expression ea + hash_int_expression data; 
	     t::FSTORE (fty, ea, data, mem) => 0u7890 + w fty + hash_int_expression ea + hash_float_expression data;
	     t::BCC (a, lab) => 0u233 + hash_bool_expression a + hash_label lab;
	     t::IF (a, b, c) => 0u233 + hash_bool_expression a + hash_statement b + hash_statement c;
	     t::NOTE (statement, a) => hash_statement statement; 
	     t::PHI { preds, block } => w block; 
	     t::SOURCE => 0u123; 
	     t::SINK => 0u423; 
	     t::REGION (statement, ctrl) => hash_statement statement + hash_ctrl ctrl;
	     t::RTL { hash, ... } => hash;
	     t::SEQ ss => hash_statements (ss, 0u23);
	     t::ASSIGN (type, lhs, rhs) => w type + hash_int_expression lhs + hash_int_expression rhs;
	     _ => error "hashStm";
        esac 

   also
   fun hash_statements ([], h)
            =>
            h;

       hash_statements (s ! ss, h)
            =>
            hash_statements (ss, hash_statement s + h);
   end 

   also
   fun hash_lowcode (t::BOOL_EXPRESSION bool_expression) =>   hash_bool_expression bool_expression;
       hash_lowcode (t::INT_EXPRESSION int_expression)  =>   hash_int_expression int_expression; 
       hash_lowcode (t::FLOAT_EXPRESSION float_expression)  =>   hash_float_expression float_expression;
    end 

    also
    fun hash_lowcodes [] => 0u123;
        hash_lowcodes (m ! ms) => hash_lowcode m + hash_lowcodes ms;
    end 

    also
    fun hash2 (type, x, y)
        =
        w type + hash_int_expression x + hash_int_expression y

    also
    fun hashm t::DIV_TO_ZERO => 0u158;
        hashm t::DIV_TO_NEGINF => 0u159;
    end 

    also
    fun hash3 (m, type, x, y)
        =
        hashm m + w type + hash_int_expression x + hash_int_expression y

    also
    fun hash_int_expression int_expression
        =  
	case int_expression
	     t::REG (type, src) => w type + wv src;
	     t::LITERAL i => i::hash i;
	     t::LABEL l => hash_label l;
	     t::LABEXP le => hash_int_expression int_expression;
	     t::CONST c => constant::hash c;
	     t::NEG (type, x) => w type + hash_int_expression x + 0u24;
	     t::ADD x => hash2 x + 0u234;
	     t::SUB x => hash2 x + 0u456;
	     t::MULS x => hash2 x + 0u2131;
	     t::DIVS x => hash3 x + 0u156;
	     t::REMS x => hash3 x + 0u231;
	     t::MULU x => hash2 x + 0u123;
	     t::DIVU x => hash2 x + 0u1234;
	     t::REMU x => hash2 x + 0u211;
	     t::NEGT (type, x) => w type + hash_int_expression x + 0u1224;
	     t::ADDT x => hash2 x + 0u1219;
	     t::SUBT x => hash2 x + 0u999;
	     t::MULT x => hash2 x + 0u7887;
	     t::DIVT x => hash3 x + 0u88884;
	     t::BITWISEAND x => hash2 x + 0u12312;
	     t::BITWISEOR x => hash2 x + 0u558;
	     t::BITWISEXOR x => hash2 x + 0u234;
	     t::BITWISEEQV x => hash2 x + 0u734;
	     t::BITWISENOT (type, x) => w type + hash_int_expression x;  
	     t::RIGHTSHIFT x => hash2 x + 0u874; 
	     t::RIGHTSHIFTU x => hash2 x + 0u223;
	     t::LEFTSHIFT x => hash2 x + 0u499;
	     t::COND (type, e, e1, e2) => w type + hash_bool_expression e + hash_int_expression e1 + hash_int_expression e2;
	     t::SIGNEXTEND (type, type', int_expression) => 0u232 + w type + w type' + hash_int_expression int_expression;
	     t::ZEROEXTEND (type, type', int_expression) => 0u737 + w type + w type' + hash_int_expression int_expression;
	     t::CONVERTFLOATTOINT (type, round, type', float_expression) => 
		w type + b::hash_rounding_mode round + w type' + hash_float_expression float_expression;
	     t::LOAD (type, ea, mem) => w type + hash_int_expression ea + 0u342;
	     t::LET (statement, int_expression) => hash_statement statement + hash_int_expression int_expression;
	     t::PRED (e, ctrl) => hash_int_expression e + hash_ctrl ctrl;
	     t::MARK (e, _) => hash_int_expression e;
	     t::REXT (type, rext) => w type + hash_rext (hasher()) rext;
	     t::QQQ => 0u485;
	     t::OP (type, oper, es) => hash_rexps (es, w type + hash_operator oper);
	     t::ARG _ => 0u23;
	     t::ATATAT(type, k, e) => w type + hash_int_expression e;
	     t::PARAM n => w n;
	     t::BITSLICE (type, sl, e) => w type + hash_int_expression e;
        esac

    also
    fun hash_operator (t::OPERATOR { hash, ... } )
        =
        hash

    also
    fun hash_rexps ([], h) => h; 
        hash_rexps (e ! es, h) => hash_rexps (es, hash_int_expression e + h);
    end 

    also
    fun hash2'(type, x, y)
        =
        w type + hash_float_expression x + hash_float_expression y

    also
    fun hash_float_expression float_expression
        =  
	case float_expression   
	    t::FREG (fty, src) => w fty + wv src;
	    t::FLOAD (fty, ea, mem) => w fty + hash_int_expression ea;
	    t::FADD x => hash2' x + 0u123;
	    t::FMUL x => hash2' x + 0u1234;
	    t::FSUB x => hash2' x + 0u12345;
	    t::FDIV x => hash2' x + 0u234;
	    t::COPY_FLOAT_SIGN x => hash2' x + 0u883;
	    t::FCOND (fty, c, x, y) => w fty + hash_bool_expression c + hash_float_expression x + hash_float_expression y;
	    t::FABS (fty, float_expression) => w fty + hash_float_expression float_expression + 0u2345;
	    t::FNEG (fty, float_expression) => w fty + hash_float_expression float_expression + 0u23456;
	    t::FSQRT (fty, float_expression) => w fty + hash_float_expression float_expression + 0u345;
	    t::CVTI2F (fty, type, int_expression) => w fty + w type + hash_int_expression int_expression;
	    t::CVTF2F (fty, fty', float_expression) => w fty + hash_float_expression float_expression + w fty'; 
	    t::FMARK (e, _) => hash_float_expression e;
	    t::FPRED (e, ctrl) => hash_float_expression e + hash_ctrl ctrl;
	    t::FEXT (fty, fext) => w fty + hash_fext (hasher()) fext;
        esac

    also
    fun hash_fexps ([], h) => h;
        hash_fexps (e ! es, h) => hash_fexps (es, hash_float_expression e + h);
    end 

    also
    fun hash_bool_expression bool_expression
        =
	case bool_expression   
	    t::CC (cc, src) => b::hash_cond cc + wv src;
	    t::FCC (fcc, src) => b::hash_fcond fcc + wv src;
	    t::CMP (type, cond, x, y) => 
	       w type + b::hash_cond cond + hash_int_expression x + hash_int_expression y;
	    t::FCMP (fty, fcond, x, y) => 
	       w fty + b::hash_fcond fcond + hash_float_expression x + hash_float_expression y;
	    t::NOT x => 0u2321 + hash_bool_expression x; 
	    t::AND (x, y) => 0u2321 + hash_bool_expression x + hash_bool_expression y;
	    t::OR (x, y) => 0u8721 + hash_bool_expression x + hash_bool_expression y;
	    t::XOR (x, y) => 0u6178 + hash_bool_expression x + hash_bool_expression y;
	    t::EQV (x, y) => 0u178 + hash_bool_expression x + hash_bool_expression y;
	    t::TRUE => 0u0;
	    t::FALSE => 0u1232;
	    t::CCMARK (e, _) => hash_bool_expression e;
	    t::CCEXT (type, ccext) => w type + hash_ccext (hasher()) ccext;
        esac

    also
    fun hash_bool_expressions ([], h) => h;
        hash_bool_expressions (e ! es, h) => hash_bool_expressions (es, hash_bool_expression e + h);
    end;


    hash = hash_int_expression;
};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
