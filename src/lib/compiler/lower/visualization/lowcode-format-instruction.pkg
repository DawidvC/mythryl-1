#
# This just provide a very simple pretty printing function.
# It is used for visualization.
#
# -- Allen Leung 

# Compiled by:
#     src/lib/compiler/lower/make7/visual.make6



api Format_Instruction {

    package instruction_set:   Instruction_Set;				# Instruction_Set	is from   src/lib/compiler/lower/instruction/instruction-set.api

    to_string
	:
	note::Notes
	->
	instruction_set::Instruction
        ->
        String;
};

generic package format_instruction_g (asm:  Instruction_Emitter)		# Instruction_Emitter	is from   src/lib/compiler/lower/emit/instruction-emitter.api

: (weak)  Format_Instruction						# Format_Instruction	is from   src/lib/compiler/lower/visualization/lowcode-format-instruction.pkg

{
   package instruction_set = asm::instruction_set;

   fun to_string an instruction
       =
       strip_nl text
       where

           buffer =   string_out_stream::make_stream_buf();
	   sss    =   string_out_stream::open_string_out buffer;

	   asm_stream::with_stream sss 
	      (fn instruction => 
	       { my asm::instruction_stream::STREAM { emit, ... } = asm::make_stream an;
	        emit instruction;
	   	  }; end ) instruction;

	   text   = string_out_stream::get_string buffer;

	   fun is_space ' '  =>   TRUE;
	       is_space '\t' =>   TRUE;
	       is_space _    =>   FALSE;
           end;

	   text = fold_right
                      fn (x, "") =>  x;
                         (x,  y) =>  x + " " + y;
                      end
                      ""
		      (string::tokens is_space text);

	   fun strip_nl ""
                   =>
                   "";

	       strip_nl s
		   =>
		   f (size s - 1)
                   where

		       fun f (0) => "";

			   f (i) => case (string::get (s, i))
                                      
			                 '\n' => f (i - 1);
			                 ' '  => f (i - 1);
			                 _    => string::extract (s, 0, THE (i+1));
                                    esac;
                       end;
                   end;
           end;  
        end;
};

