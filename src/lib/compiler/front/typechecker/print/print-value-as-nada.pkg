## yprint-value-as-nada.pkg 
## Copyright 2003 by The SML/NJ Fellowship 

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6


#  Modified to use Lib7 Lib pp. [dbm, 7/30/03]) 


api Print_Value_As_Lib7 {

     print_datatype_constructor_represetation_as_nada:  prettyprint::Stream
                                                    -> var_home::Constructor_Form
                                                    -> Void;

     print_var_home_as_nada:     prettyprint::Stream -> var_home::Var_Home                                   -> Void;
     print_dcon_as_nada:       prettyprint::Stream -> variables_and_constructors::Constructor -> Void;
     print_var_as_nada:        prettyprint::Stream -> variables_and_constructors::Variable             -> Void;

     print_debug_decon_as_nada:  prettyprint::Stream
		            -> symbol_table::Symbol_Table -> variables_and_constructors::Constructor -> Void;

     print_debug_var_as_nada:  (inlining_information::Inlining_Information -> String)
			   -> prettyprint::Stream 
			   -> symbol_table::Symbol_Table
			   -> variables_and_constructors::Variable
			   -> Void;

}; #  Api Print_Value_As_Lib7 

package print_value_as_nada: (weak)  Print_Value_As_Lib7 {		# Print_Value_As_Lib7	is from   src/lib/compiler/front/typechecker/print/print-value-as-nada.pkg

    stipulate

        package pp= prettyprint;		# prettyprint	is from   src/lib/prettyprint/src/prettyprint.pkg
	package tu= type_stuff;			# type_stuff	is from   src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg
	package lu = find_in_symbol_table; 
	package a= var_home;			# var_home	is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg

	#  package ii = inlining_info 

	include prettyprint;
        include print_as_nada_stuff;
        include variables_and_constructors;
        include types;
    herein 

	internals = typechecking_control::internals;

	fun by f x y
            =
            f y x;

	pps = pp::string;

	print_type_as_nada  = print_type_as_nada::print_type_as_nada;
	print_tycon_as_nada = print_type_as_nada::print_tycon_as_nada;
	print_tyfun_as_nada = print_type_as_nada::print_tyfun_as_nada;


	fun print_var_home_as_nada stream a
            =
            pps stream (" [" + (a::print_var_home a) + "]");


 	fun print_inlining_info_as_nada inlining_info_to_string stream a
            =
            pps stream (" [" + (inlining_info_to_string a) + "]");


	fun print_datatype_constructor_represetation_as_nada stream representation
            =
            pp::string stream (a::print_representation representation);


	fun print_csig_as_nada stream csig
            =
            pp::string stream (a::print_constructor_api csig);


	fun print_dcon_as_nada stream
            =
	    {   fun print_dcon_as_nada' ( ENUM_CONSTRUCTOR { symbol, representation => a::EXCEPTION acc, ... } )
			=>
			{   print_symbol_as_nada  stream  symbol;

			    if *internals
				 print_var_home_as_nada  stream  acc; 
			    fi;
			};

		    print_dcon_as_nada' (ENUM_CONSTRUCTOR { symbol, ... } )
			=>
			print_symbol_as_nada  stream  symbol;
                end;

                print_dcon_as_nada';
	    };

	fun print_debug_decon_as_nada stream dictionary (ENUM_CONSTRUCTOR { symbol, representation, const, constructor_type, signature, is_lazy } )
            =
	    {   my  { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, break, ... }
                    =
                    en_pp stream;

		print_symbol_as_nada
                    =
                    print_symbol_as_nada stream;

                begin_horizontal_else_vertical_box 3;
		pps "ENUM_CONSTRUCTOR";
		break { spaces=>0, indent_on_wrap=>0 };
		pps "{ name = "; print_symbol_as_nada symbol;            print_comma_newline_as_nada stream;
		pps "const = "; pps (bool::to_string const);                  print_comma_newline_as_nada stream;
		pps "constructor_type = "; print_type_as_nada dictionary stream  constructor_type;   print_comma_newline_as_nada stream;
		pps "is_lazy = "; pps (bool::to_string is_lazy); print_comma_newline_as_nada stream;
		pps "Constructor_Form =";
                    print_datatype_constructor_represetation_as_nada stream representation;
                    print_comma_newline_as_nada stream;
		pps "signature = [";   print_csig_as_nada stream signature;   pps "] }";
		end_box()
	    ;};

	fun print_datatype_constructor_as_nada
		(
		    dictionary: symbol_table::Symbol_Table,
		    ENUM_CONSTRUCTOR { symbol, constructor_type, ... }
		)
                stream
            =
	    {   my  { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... }
                    =
                    en_pp stream;

                begin_wrap_box 0;
		print_symbol_as_nada stream symbol;   pps " : ";   print_type_as_nada dictionary stream  constructor_type;
		end_box()
	    ;};

	fun print_con_naming_as_nada stream
            =
	    {   my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... }
                    =
                    en_pp stream;

		fun print_constructor_as_nada (ENUM_CONSTRUCTOR { symbol, constructor_type, representation=>a::EXCEPTION _, ... }, dictionary)
			=>
			{   begin_horizontal_else_vertical_box 0;
			    pps "exception "; print_symbol_as_nada  stream  symbol; 

			    if   (type_types::is_arrow_type  constructor_type)
			        
#    			     pps " of "; 
				 pps " "; 
				 print_type_as_nada dictionary stream (type_types::domain  constructor_type);
			    fi;

			    end_box();
			};

		    print_constructor_as_nada (con, dictionary)
			=> 
			{   exception HIDDEN;

			    visible_dcon_type_constructor
				=
				{   type_constructor = tu::datatype_constructor_to_type_constructor con;

				    (   type_stuff::type_constructor_equality (
					    lu::find_type_constructor_via_symbol_path
					    (    dictionary,
						 symbol_path::SYMBOL_PATH
						 [ inverse_path::last (type_stuff::type_constructor_path type_constructor) ],
						 fn _ = raise exception HIDDEN
					    ),
					    type_constructor
					)
					except HIDDEN = FALSE
				    );
				};


			    if (*internals
                                or
                                not visible_dcon_type_constructor
                            ) 
				begin_horizontal_else_vertical_box 0;
				pps "con ";
				print_datatype_constructor_as_nada (dictionary, con) stream;
				end_box ();
                            fi;
			};
                end;

                print_constructor_as_nada;
	    };

	fun print_var_as_nada stream (ORDINARY_VARIABLE { var_home, path, ... } )
            =>
	    {   pps stream (symbol_path::to_string path);

	        if   *internals      print_var_home_as_nada stream var_home;   fi;
            };

	    print_var_as_nada stream (OVERLOADED_IDENTIFIER { name, ... } )
		=>
		print_symbol_as_nada stream (name);

	    print_var_as_nada stream (errorvar)
		=>
		pp::string stream "<errorvar>";
        end;

	fun print_debug_var_as_nada inlining_info_to_string stream dictionary
            = 
	    {   (en_pp stream)
                    ->
                    { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... };

		print_var_home_as_nada        = print_var_home_as_nada stream;
		print_inlining_info_as_nada   = print_inlining_info_as_nada inlining_info_to_string stream;

		fun print_debug_var_as_nada' (ORDINARY_VARIABLE { var_home, path, var_type, inlining_info } )
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps "ORDINARY_VARIABLE";
			    begin_horizontal_else_vertical_box 3;
			    pps "( { var_home=";   print_var_home_as_nada var_home;          print_comma_newline_as_nada stream;
			    pps "inlining_info="; print_inlining_info_as_nada inlining_info;  print_comma_newline_as_nada stream;
			    pps "path=";       pps (symbol_path::to_string path);     print_comma_newline_as_nada stream;
			    pps "var_type=REF "; print_type_as_nada dictionary stream *var_type; 
			    pps "} )";
			    end_box();
			    end_box();
			};

		    print_debug_var_as_nada' (OVERLOADED_IDENTIFIER { name, alternatives, type_scheme } )
			=> 
			{   begin_horizontal_else_vertical_box 0;
			    pps "OVERLOADED_IDENTIFIER";
			    begin_horizontal_else_vertical_box 3;
			    pps "( { name="; print_symbol_as_nada stream (name); print_comma_newline_as_nada stream;
			    pps "alternatives=["; 
			    (ppvseq stream 0 ", "
			     (fn stream = fn { indicator, variant } =
				{ pps "{ indicator=";print_type_as_nada dictionary stream  indicator; 
				 print_comma_newline_as_nada stream;
				 pps " variant =";
				 print_debug_var_as_nada inlining_info_to_string stream dictionary variant; pps "}";}
                             )
			     *alternatives);
			    pps "]"; print_comma_newline_as_nada stream;
			    pps "type_scheme=";   print_tyfun_as_nada  dictionary  stream  type_scheme;   pps "} )";
			    end_box();
			    end_box();
			};

		    print_debug_var_as_nada'  errorvar
                        =>
                        pps "<ERRORvar>";
                end;

                print_debug_var_as_nada';
	    };

        # Is this ever called?
	fun print_variable_as_nada stream
            =
	    {   my { begin_horizontal_else_vertical_box, begin_wrap_box, end_box, pps, ... } = en_pp stream;

		fun print_variable_as_nada' (   dictionary: symbol_table::Symbol_Table,
					            ORDINARY_VARIABLE { path, var_home, var_type, inlining_info }
					        )
                    => 
			{   begin_horizontal_else_vertical_box 0;
			    pps (symbol_path::to_string path);

			    if   *internals      print_var_home_as_nada stream var_home;   fi;

			    pps " : "; print_type_as_nada dictionary stream (*var_type);
			    end_box ();
			};

		    print_variable_as_nada' (dictionary, OVERLOADED_IDENTIFIER { name, alternatives, type_scheme=>TYPE_SCHEME { body, ... } } )
			=>
			{   begin_horizontal_else_vertical_box 0;
			    print_symbol_as_nada stream (name); pps " : "; print_type_as_nada dictionary stream body; 
			    pps " as ";
			    print_sequence_as_nada
                                stream
                                { sep   => by pp::break { spaces=>1, indent_on_wrap=>0 },
				  pr    => (fn stream =  fn { variant, ... } =  print_variable_as_nada'(dictionary, variant)),
				  style => CONSISTENT
				}
			        *alternatives;
			    end_box();
                        };

		   print_variable_as_nada'(_, errorvar) => pps "<ERRORvar>";
             end;

                print_variable_as_nada';
	   };

    end; 	#  local 

};		#  package print_value_as_nada 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
