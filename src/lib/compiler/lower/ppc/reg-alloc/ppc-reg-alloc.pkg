generic PPCRegAlloc (package i:  Instruction_Set where C = PPCCells
		     package p:  Instruction_Properties where I = I
		     package f:  FLOWGRAPH where I = I and P = P
		     package asm:  Instruction_Emitter where I=I and P=P) :
  api
    generic package IntRa (package RaUser:  RA_USER_PARAMS
		     where I = I
		     where type b::name = f::B.name) : Register_Allocator
    generic package FloatRa (package RaUser:  RA_USER_PARAMS
		     where I = I
		     where type b::name = f::B.name) : Register_Allocator
   end=
pkg

  package c=i::C

  #  liveness analysis for general purpose registers 
  package RegLiveness = 
    liveness (package flowgraph=F
	     package Instruction=I
	     defUse = p::defUse c::GP
	     regSet = c::getCell c::GP 
	     cellset = c::updateCell c::GP)


  generic package IntRa =
    RegAllocator
       (package RaArch = pkg
	   package instruction_properties = P
	   package AsmEmitter = Asm
	   package i = I
	   package liveness=RegLiveness

	   defUse = p::defUse c::GP
	   firstPseudoR = 32
	   maxPseudoR = c::maxCell
	   numRegs = c::numCell c::GP
	   regSet = c::getCell c::GP 
	end)

  #  liveness analysis for floating point registers 
  package FregLiveness = 
    liveness (package flowgraph=F
	     package Instruction=I
	     defUse = p::defUse c::FP
	     regSet = c::getCell c::FP 
	     cellset = c::updateCell c::FP)

  generic package FloatRa =
    RegAllocator
       (package RaArch = pkg
	   package instruction_properties = P
	   package AsmEmitter = Asm
	   package i = I
	   package liveness=FregLiveness

 	   defUse = p::defUse c::FP
	   firstPseudoR = 64
	   maxPseudoR = c::maxCell 
	   numRegs = c::numCell c::FP
	   regSet = c::getCell c::FP 
	end)
end

