#
# This is Krishna Palem's and Barbara Simons' algorithm.
#
# -- Allen Leung


###           "If you're not failing every now and again, it's
###            a sign you're not doing anything very innovative."
###
###                                  -- Woody Allen


package PalemSimons :> PALEM_SIMONS =
pkg
   package g = graph
   package a = rw_vector

   fun rank { dag, l, d, m } =
   let my g::GRAPH ggg = dag
       N         = ggg.capacity ()
       d'        = a::rw_vector (N, 0) #  modified deadlines 
       order     = a::rw_vector (N, 0) #  node id -> rank order in swr 
       rank      = a::rw_vector (N, 0) #  rank order -> rank in swr 
       tree      = a::rw_vector (N, 0) #  rank order -> tree 
       content   = a::rw_vector (N, 0) #  rank order -> filled slots 
       capacity  = a::rw_vector (N, 0) #  rank order -> max slots 


       fun backSchedule i =
       let #  p is the current rank order within succs 
           fun initTrees([], _, _) = ()
             | initTrees((j, _, d_j) . succs, last_d_j, p) =
               if last_d_j == d_j then
                  (a::update (order, j, p); 
                   initTrees (succs, last_d_j, p))
               else
                  let p = p+1
                  in  a::update (tree, p, p);  #  new tree 
                      a::update (rank, p, d_j);
                      a::update (content, p, 0);
                      a::update (capacity, p, (d_j - last_d_j)*m);
                      a::update (order, j, p);  
                      initTrees (succs, d_j, p)
                  end

           fun find p = 
               let q = a::sub (tree, p)
               in  if q == p then p else
                   let r = find q
                   in  a::update (tree, p, r); r end
               end

           fun union (p, q) = a::update (tree, p, q)
 
           fun insert ([], d_i) = d_i
             | insert((j, l_j, d_j) . swr, d_i) = 
               let ord  = a::sub (order, j)
                   p    = find ord
                   c    = a::sub (content, p) 
                   a::update (content, p, c + 1)
                   D'   = a::sub (rank, p) - c div m
                   d_i  = int::min (D' - 1 - l_j, d_i)
               in  if c >= a::sub (capacity, p) then 
                      let q = find (a::sub (order, a::sub (tree, p - 1)))
                      in  union (p, q) 
                      end
                   
                   insert (swr, d_i)
               end

           succs = ggg.out_edges i
           list = map (fn e as (_, j, _) => (j, l e, a::sub (d', j))) succs
           fun byRank((_, _, d_i), (_, _, d_j)) = d_i > d_j
           initTrees (list_mergesort::sort byRank list,-123456789,-1) 
           fun byLatencyAndRank((_, l_i, d_i), (_, l_j, d_j)) =
               l_i < l_j or (l_i = l_j and d_i < d_j)
           d_i = insert (list_mergesort::sort byLatencyAndRank list,
                            d (i, ggg.node_info i))
       in  a::update (d', i, d_i)
       end

   in  #  Backward scheduling in reverse topological order 
       apply backSchedule
          (graph_topological_sort::topologicalSort (reversed_graph_view::rev_view dag) 
            (map #1 (ggg.nodes ())));
       { d'=d'}
   end

end
