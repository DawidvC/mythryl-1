#
#  This api describes DJ-graph and related algorithms.
#
#  -- Allen Leung



###           "Being a social outcast helps you stay
###            concentrated on the really important things,
###            like thinking and hacking."
###
###                              -- Eric S Raymond


api DJ_GRAPH =
api

    package dom:  Dominator_Tree

    type dj_graph( N, E, G ) #  Abstract type now! 

    my DJ:  Dom::dominator_tree( N,E,G ) -> dj_graph( N,E,G )

    my DF:  dj_graph( N,E,G ) -> graph::node_id -> List( graph::node_id )

    my IDFs:  dj_graph( N,E,G ) -> 
              List( graph::node_id ) -> List( graph::node_id ) #  DF^+(S) 

      # For constructing pruned SSA, we actually need to compute
      #   DF^+(defs (v)) \intersect LiveIn (v)
      # for each variable v, i.e. only places where v is live.
      # The following function computes this with liveness incrementally.

    my LiveIDFs:  dj_graph( N,E,G ) ->
          { defs:         List( graph::node_id ), # blocks with definitions
           localLiveIn:  List( graph::node_id )  # Blocks that are local live in 
          } -> List( graph::node_id )  

end
