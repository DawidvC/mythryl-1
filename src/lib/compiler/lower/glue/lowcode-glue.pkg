/*
 * Simple module for building the IR etc.  Doesn't do any real optimizations.
 *
 * -- Allen Leung
 */

###      "All programmers are optimists."
###         -- Frederick P Brooks, Jr
###

generic package LOWCODEGlue
   (package asm:        Instruction_Emitter
    package flowgraph:  FLOWGRAPH
    package instruction_properties:  Instruction_Properties
    package frequency_properties:  Frequency_Properties
       sharing instruction_properties::I = Asm::I = flowgraph::I = frequency_properties::I
       sharing flowgraph::P = Asm::P 
   ) : LOWCODE_GLUE 
{

   package f = flowgraph
   package i = f::I
 
   lowcode  = LowCodeControl::getFlag       "lowcode"
   phases  = LowCodeControl::getStringList "lowcode-phases"
   view_IR = LowCodeControl::getFlag       "view-IR"
   verbose = LowCodeControl::getFlag       "verbose"

   fun error msg = lowcode_error_message::error("LOWCODEGlue", msg)

   package graph_viewer = graph_viewer_g (AllDisplays)

   package format_instruction = format_instruction_g (Asm)

   package control_flow_graph = control_flow_graph
      (package i         = I
       package pseudo_op = f::P
       package graph_guts = directed_graph
       package instruction_properties = instruction_properties
       package asm = Asm
      )

   package util = CFGUtil
      (package control_flow_graph       = control_flow_graph
       package instruction_properties = instruction_properties
      )

   package cfg_to_cluster = CFG2Cluster
      (package control_flow_graph       = control_flow_graph
       package util      = Util
       package flowgraph = flowgraph
      )

   package cluster_to_cfg = Cluster2CFG
      (package control_flow_graph       = control_flow_graph
       package util      = Util
       package flowgraph = flowgraph
       package instruction_properties = instruction_properties
      )
       
   package dom
       =
       dominator_tree (directed_graph)

   package cdg = ControlDependenceGraph
      (package dom       = Dom
       package graph_guts = directed_graph
      )

   package loop = loop_structure
      (package dom       = Dom
       package graph_guts = directed_graph
      )

   package ir = LOWCODE_IR
      (package control_flow_graph         = control_flow_graph
       package cdg         = CDG
       package loop        = Loop
       package graph_viewer = graph_viewer
       package util        = Util
      )

   package guess = StaticBranchPrediction
      (package ir        = IR
       package instruction_properties = instruction_properties
       package frequency_properties = frequency_properties
       loopMultiplier=10
      )
      
   package liveness = LivenessAnalysis (control_flow_graph)

   package reshape = ReshapeBranches
     (package ir        = IR
      package instruction_properties = instruction_properties
     )

   package branch_chaining = branch_chaining
     (package ir        = IR
      package instruction_properties = instruction_properties
     )

   package cpr = CriticalPathReduction
     (package ir        = IR
      package instruction_properties = instruction_properties
     )

   package cluster_graph = cluster_graph_g (flowgraph)

   package cluster_viewer = cluster_viewer_g
     (package graph_viewer = graph_viewer
      package cluster_graph = cluster_graph
      package asm          = Asm
     )

   fun view phase ir = if *view_IR then ir::view phase ir else ()
   fun view' cluster = if *view_IR then 
      cluster_viewer::view (cluster_graph::clusterGraph cluster) else ()

   fun optimize cluster
       =
       {   enum rep = IR of ir::IR
			| CLUSTER of f::cluster;

	   fun do_phase "cluster->cfg" (CLUSTER c) = IR (Cluster2CFG::cluster2cfg c)
	     | do_phase "cfg->cluster" (IR cfg) = 
		CLUSTER (CFG2Cluster::cfg2cluster { cfg=cfg, relayout=FALSE } )
	     | do_phase "guess" (r as IR ir) = (Guess::run ir; r)
	     | do_phase "reshape"   (r as IR ir) = (Reshape::run ir; r)
	     | do_phase "branch-chaining" (r as IR ir) = (branch_chaining::run ir; r)
	     | do_phase "cpr"   (r as IR ir) = (cpr::run ir; r)
	     | do_phase "view-cfg"  (r as IR ir) = (view "cfg" ir; r)
	     | do_phase "view-dom"  (r as IR ir) = (view "dom" ir; r)
	     | do_phase "view-pdom" (r as IR ir) = (view "pdom" ir; r)
	     | do_phase "view-doms" (r as IR ir) = (view "doms" ir; r)
	     | do_phase "view-cdg"  (r as IR ir) = (view "cdg" ir; r)
	     | do_phase "view-loop" (r as IR ir) = (view "loop" ir; r)
	     | do_phase "view-cluster" (r as CLUSTER c) = (view' c; r)
	     | do_phase phase _ = error (phase);

	   fun do_phases [] (CLUSTER c) = c
	     | do_phases [] _ = error "cluster needed"
	     | do_phases (phase . phases) ir = 
		(if *verbose then print("["$phase$"]\n")  
		 do_phases phases (do_phase phase ir));

           do_phases *phases (CLUSTER cluster);
       }

   fun codegen cluster
       =
       if *lowcode   then optimize cluster
                     else cluster

}
