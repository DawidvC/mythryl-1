## ppc-spill-instructions-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/ppc.make6



# PPC instructions to emit when spilling an instruction.



###                 "In a few years, all great physical constants
###                  will have been approximately estimated, and
###                  that the only occupation which will be left
###                  to men of science will be to carry these
###                  measurements to another place of decimals."
###
###                                        -- James C. Maxwell


# We are invoked from:
#
#     src/lib/compiler/codegen/ppc/ppc-codegen.pkg

generic package ppc_spill_instructions_g (

    instruction_set:  Instruction_Set_Ppc					# Instruction_Set_Ppc				is from   src/lib/compiler/lower/ppc/instruction/instruction-set-ppc.api
)

: (weak)  Architecture_Specific_Spill_Instructions				# Architecture_Specific_Spill_Instructions	is from   src/lib/compiler/lower/reg-alloc/arch-spill-instruction.api

{
    package instruction_set =  instruction_set;
    package cells           =  instruction_set::cells;

    package rewrite
        =
        ppc_instructions_rewrite_g (						# ppc_instructions_rewrite_g			is from   src/lib/compiler/lower/ppc/reg-alloc/ppc-instructions-rewrite-g.pkg
            instruction_set
        );

    package i = instruction_set;
    package c = cells;
    package cb= cells_basis;	# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg


    fun error msg = lowcode_error_message::error ("ppc_spill_instructions_g", msg);

    fun store_to_ea cb::REGISTER (reg, i::DISPLACE { base, disp, mem } )
            => 
	    i::st { st=>i::STW, rs=>reg, ra=>base, d=>i::LABEL_OP disp, mem };

	store_to_ea cb::FLOAT_REGISTER (freg, i::DISPLACE { base, disp, mem } )
            => 
	    i::stf { st=>i::STFD, ra=>base, d=>i::LABEL_OP disp, fs=>freg, mem };

	store_to_ea _ _ => error "storeToEA";
    end;

    fun load_from_ea cb::REGISTER (reg, i::DISPLACE { base, disp, mem } )
	  => 
	  i::ll { ld=>i::LWZ, ra=>base, d=>i::LABEL_OP disp, rt=>reg, mem };

	load_from_ea cb::FLOAT_REGISTER (freg, i::DISPLACE { base, disp, mem } )
	   => 
	   i::lf { ld=>i::LFD, ra=>base, d=>i::LABEL_OP disp, ft=>freg, mem };

	load_from_ea _ _ => error "loadFromEA";
    end;

    fun spill_to_ea ck reg_ea
	= 
	{ code => [store_to_ea ck reg_ea], prohibitions => [], new_reg=>NULL };

    fun reload_from_ea ck reg_ea
	= 
	{ code => [load_from_ea ck reg_ea], prohibitions => [], new_reg=>NULL };

    #  spill a register to spillLoc 
    fun spill_r (instruction, reg, ea)
        =
        {
	    new_r = c::new_reg();
	    instruction' = rewrite::rewrite_def (instruction, reg, new_r);

	    { code => [instruction', store_to_ea cb::REGISTER (new_r, ea)], 
	      prohibitions => [new_r],
	      new_reg=>THE new_r 
            };
	};

    fun spill_f (instruction, reg, ea)
	=
	{
	    new_r = c::new_freg();
	    instruction' = rewrite::frewrite_def (instruction, reg, new_r);

	    { code => [instruction', store_to_ea cb::FLOAT_REGISTER (new_r, ea)],
	      prohibitions => [new_r],
	      new_reg=>THE new_r
            };
	};

   #  reload a register from spillLoc 
    fun reload_r (instruction, reg, ea) = {
      new_r = c::new_reg();
      instruction' = rewrite::rewrite_use (instruction, reg, new_r);

	{ code => [load_from_ea cb::REGISTER (new_r, ea), instruction'],
	 prohibitions => [new_r],
	 new_reg=>THE new_r };
    };

    fun reload_f (instruction, reg, ea)
	=
	{
	    new_r = c::new_freg();
	    instruction' = rewrite::frewrite_use (instruction, reg, new_r);

	    { code => [load_from_ea cb::FLOAT_REGISTER (new_r, ea), instruction'],
	       prohibitions => [new_r],
	       new_reg=>THE new_r
	    };
	};

    fun spill cells_basis::REGISTER => spill_r;
        spill cells_basis::FLOAT_REGISTER => spill_f;
        spill _ => error "spill";
    end;

    fun reload cells_basis::REGISTER => reload_r;
        reload cells_basis::FLOAT_REGISTER => reload_f;
        reload _ => error "reload";
    end;
};



## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
