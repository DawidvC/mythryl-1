# theorem.pkg
#
# COPYRIGHT (c) 1992 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
#
# defines theorem data type 

api FOLPROOFS =
api

package Logic:  FOL 

type theorem_t
type sequent_t
type hyp_list
type naming_t

    exception NamingNotFound
    exception Failure
    my add_formula:  Logic.form * List( naming_t )-> List( naming_t )
    my allelim:  Logic.term * theorem_t -> theorem_t
    my allintro:  string * theorem_t -> theorem_t
    my andelim:  theorem_t * theorem_t -> theorem_t
    my andintro:  theorem_t * theorem_t -> theorem_t
    my delete_naming:  '$a * List( '$a ) -> List( '$a )
    my dnelim:  theorem_t -> theorem_t
    my formula_in_hyp:  Logic.form * List( naming_t ) -> bool
    my formula_of_sequent:  sequent_t -> Logic.form
    my hyp:  sequent_t -> theorem_t
    my hyp_of_sequent:  sequent_t -> hyp_list
    my implieselim:  theorem_t * theorem_t -> theorem_t
    my impliesintro:  string * theorem_t -> theorem_t
    my induction_pr:  Logic.form * theorem_t * theorem_t -> theorem_t
    my lookup_formula_naming:  string * List( naming_t ) -> Logic.form
    my notelim:  Logic.form * theorem_t * theorem_t -> theorem_t
    my notintro:  string * theorem_t -> theorem_t
    my orelim:  theorem_t * theorem_t * theorem_t -> theorem_t
    my orintroleft:  Logic.form * theorem_t -> theorem_t
    my orintroright:  Logic.form * theorem_t -> theorem_t
    my peanofive:  sequent_t -> theorem_t
    my peanofour:  sequent_t -> theorem_t
    my peanoone:  sequent_t -> theorem_t
    my peanosix:  sequent_t -> theorem_t
    my peanothree:  sequent_t -> theorem_t
    my peanotwo:  theorem_t -> theorem_t
    my reflexivity:  hyp_list * Logic.term -> theorem_t
    my sequent_of_theorem_t:  theorem_t -> sequent_t
    my someelim:  theorem_t * theorem_t -> theorem_t
    my someintro:  Logic.term * Logic.form * theorem_t -> theorem_t
    my string_of_formula_naming:  Logic.form * List( naming_t ) -> string
    my substitution:  Logic.form * string * theorem_t * theorem_t -> theorem_t
    my symmetry:  theorem_t -> theorem_t
    my transitivity:  theorem_t * theorem_t -> theorem_t
    my weaken:  hyp_list * theorem_t -> theorem_t

end 

package FolProofs = 
pkg 

exception NamingNotFound
exception Failure

package Logic = Fol

use Logic

# namings and hypothesis lists

# namings are of the form   a: A  or  x: otype


enum naming = FormulaNaming of string * form
             | TypeNaming of string * otype 

type naming_t = naming 
type hyp_list = List( naming )

enum sequent = Sequent of hyp_list * form

enum theorem = 
        Hyp of sequent 
      | Weaken of sequent * theorem 
      | AndIntro of sequent * theorem * theorem
      | AndElim of sequent * theorem * theorem 
      | OrIntroLeft of sequent * theorem 
      | OrIntroRight of sequent * theorem 
      | OrElim of sequent * theorem * theorem * theorem 
      | ImpliesIntro of sequent * theorem 
      | ImpliesElim of sequent * theorem * theorem 
      | NotIntro of sequent * theorem 
      | NotElim of sequent * theorem * theorem 
      | DnElim of sequent * theorem
      | AllIntro of sequent * theorem 
      | AllElim of term * sequent * theorem 
      | SomeIntro of term * sequent * theorem 
      | SomeElim of sequent * theorem * theorem 
      | EqRefl of sequent
      | EqSym of sequent * theorem 
      | EqTrans of sequent * theorem * theorem 
      | PeanoOne of sequent 
      | PeanoTwo of sequent * theorem
      | PeanoThree of sequent 
      | PeanoFour of sequent 
      | PeanoFive of sequent 
      | PeanoSix of sequent 
      | Induction of sequent * theorem * theorem 
      | Substitution of  sequent * theorem * theorem 


type theorem_t = theorem
type sequent_t = sequent


fun formula_in_hyp (A,[] ) = FALSE
  | formula_in_hyp (A, (FormulaNaming(_, B) . l)) = (A = B) or formula_in_hyp (A, l)
  | formula_in_hyp (A, (_ . l)) = formula_in_hyp (A, l)
	       
fun lookup_formula_naming (s,[]) = raise NamingNotFound
  | lookup_formula_naming (s, FormulaNaming (x, A) . l) = 
                  if s == x then A else lookup_formula_naming (s, l)
  | lookup_formula_naming (s, _ . l) = lookup_formula_naming (s, l)

fun string_of_formula_naming (A,[]) = raise NamingNotFound
  | string_of_formula_naming (A, FormulaNaming (x, B) . l) = 
            if A == B then x else string_of_formula_naming (A, l)
  | string_of_formula_naming (A, _ . l) = string_of_formula_naming (A, l)
    
fun delete_naming (b,[]) = []
  | delete_naming (b, a . l) = if b == a then l else a . (delete_naming (b, l))
    
fun add_formula (A, l) = 
          reverse (FormulaNaming("h" ^ (Integer.makestring (length l)), A) . (reverse l))

fun hyp_of_sequent (Sequent (H, _)) = H

fun formula_of_sequent (Sequent(_, A)) = A


fun hyp (Sequent (l, A)) = if formula_in_hyp (A, l) then Hyp (Sequent (l, A)) 
                                else raise Failure


fun sequent_of_theorem (Hyp s) = s 
  | sequent_of_theorem (Weaken (s, _)) = s
  | sequent_of_theorem (AndIntro (s, _, _)) = s
  | sequent_of_theorem (AndElim (s, _, _)) = s 
  | sequent_of_theorem (OrIntroLeft (s, _)) = s
  | sequent_of_theorem (OrIntroRight (s, _)) = s
  | sequent_of_theorem (OrElim (s, _, _, _)) = s
  | sequent_of_theorem (ImpliesIntro (s, _)) = s
  | sequent_of_theorem (ImpliesElim (s, _, _)) = s  
  | sequent_of_theorem (NotIntro (s, _)) = s
  | sequent_of_theorem (NotElim (s, _, _)) = s
  | sequent_of_theorem (DnElim (s, _)) = s
  | sequent_of_theorem (AllIntro (s, _)) = s
  | sequent_of_theorem (AllElim(_, s, _)) = s  
  | sequent_of_theorem (SomeIntro(_, s, _)) = s
  | sequent_of_theorem (SomeElim (s, _, _)) = s
  | sequent_of_theorem (EqRefl (s)) = s
  | sequent_of_theorem (EqSym (s, _)) = s
  | sequent_of_theorem (EqTrans (s, _, _)) = s
  | sequent_of_theorem (PeanoOne s) = s 
  | sequent_of_theorem (PeanoTwo (s, _)) = s
  | sequent_of_theorem (PeanoThree s) = s 
  | sequent_of_theorem (PeanoFour s) = s 
  | sequent_of_theorem (PeanoFive s) = s 
  | sequent_of_theorem (PeanoSix s) = s 
  | sequent_of_theorem (Induction (s, _, _)) = s
  | sequent_of_theorem (Substitution (s, _, _)) = s
 
fun weaken (H1, t) = 
    let my Sequent (H2, A) = sequent_of_theorem t
    in if H2 == [] 
       then Weaken (Sequent (H1, A), t)
       else raise Failure
    end

fun andintro (t1, t2) = 
    let my (Sequent (l1, A), Sequent (l2, B)) = 
	      (sequent_of_theorem t1, sequent_of_theorem t2)
    in if l1 == l2 then AndIntro (Sequent (l1, And (A, B)), t1, t2) 
                  else raise Failure end

fun andelim (t1, t2) = 
    case (sequent_of_theorem t1, sequent_of_theorem t2) 
    of  (Sequent (l1, Connection("&",[A, B])), Sequent (l2, C)) => 
	let a = string_of_formula_naming (A, l2);
	    b = string_of_formula_naming (B, l2)
        in if l1 == (delete_naming (FormulaNaming (a, A),
                    delete_naming (FormulaNaming (b, B), l2)))
           then AndElim (Sequent (l1, C), t1, t2) 
           else raise Failure 
        end
        |  _ => raise Failure
	    
fun orintroleft (B, t) = 
    let my (Sequent (H, A)) = sequent_of_theorem t
    in  OrIntroLeft (Sequent (H, Or (A, B)), t) end

fun orintroright (A, t) = 
    let my (Sequent (H, B)) = sequent_of_theorem t
    in  OrIntroRight (Sequent (H, Or (A, B)), t) end

fun orelim (t1, t2, t3) = 
     case (sequent_of_theorem t1, sequent_of_theorem t2, sequent_of_theorem t3)
     of   (Sequent (H1, Connection("|",[A, B])), Sequent (H2, C), Sequent (H3, D)) => 
             if C == D 
             then let a = string_of_formula_naming (A, H2)
                      and b = string_of_formula_naming (B, H3)
		  in if (H1 == (delete_naming (FormulaNaming (a, A), H2))) and
                        (H1 == (delete_naming (FormulaNaming (b, B), H3)))
                     then OrElim (Sequent (H1, C), t1, t2, t3)
		     else raise Failure
                  end 
             else raise Failure 
	   | _ => raise Failure

fun impliesintro (st, t) =
    let my (Sequent (H, B)) = (sequent_of_theorem t);
        A = lookup_formula_naming (st, H) 
    in ImpliesIntro (Sequent (delete_naming (FormulaNaming (st, A), H), Implies (A, B)), t) end
	

fun implieselim (t1, t2) = 
    case (sequent_of_theorem t1, sequent_of_theorem t2) 
    of  (Sequent (H1, Connection("->",[A, B])), Sequent (H2, C)) => 
           if (H1 == H2) and (A == C) 
           then ImpliesElim (Sequent (H1, B), t1, t2) 
           else raise Failure 
         | _ => raise Failure
	    
fun notintro (st, t) =
    case (sequent_of_theorem t) of 
          (Sequent (H, Connection("False",[]))) => 
              let A = lookup_formula_naming (st, H) 
              in NotIntro (Sequent (delete_naming (FormulaNaming (st, A), H), Not (A)), t)
              end
          | _ => raise Failure
	

fun notelim (B, t1, t2) = 
    case (sequent_of_theorem t1, sequent_of_theorem t2) 
    of  (Sequent (H1, Connection("~",[A])), Sequent (H2, C)) => 
           if (H1 == H2) and (A == C) 
           then NotElim (Sequent (H1, B), t1, t2) 
           else raise Failure 
         | _ => raise Failure

fun dnelim t =
    case (sequent_of_theorem t) of 
          (Sequent (H, Connection("~",[Connection("~",[A])]))) => 
              DnElim (Sequent (H, A), t) 
          | _ => raise Failure
	
fun allintro (x, t) =          # *** NOTE: need to check vars  **
    let my (Sequent (H, A)) = (sequent_of_theorem t)
    in AllIntro (Sequent (delete_naming (TypeNaming (x, IntType), H),
                All([(x, IntType)], A)), t) end
	

fun allelim (t, th) =          # *** NOTE: need to check that t has type ty **
    case (sequent_of_theorem th)
    of  (Sequent (H, Quant("forall",[(x, ty)], A))) => 
           AllElim (t, Sequent (H, subst_in_formula (A,[(x, t)])), th)
         | _ => raise Failure

# *** NOTE: need to check that t has type ty **
fun someintro (t, Quant("exists",[(x, ty)], A), th) =     
    let my (Sequent (H, B)) = sequent_of_theorem th
    in if B == subst_in_formula (A,[(x, t)])
       then SomeIntro (t, Sequent (H, Some([(x, ty)], A)), th)
       else raise Failure 
    end
  | someintro (_, _, _) = raise Failure

fun someelim (t1, t2) = 
    case (sequent_of_theorem t1, sequent_of_theorem t2) 
    of  (Sequent (l1, Quant("exists",[(x, ty)], A)), Sequent (l2, C)) => 
	let a = string_of_formula_naming (A, l2)
        in if l1 == delete_naming (TypeNaming (x, ty),
				  delete_naming (FormulaNaming (a, A), l2))
           then SomeElim (Sequent (l1, C), t1, t2) 
           else raise Failure 
        end
        |  _ => raise Failure
	        


fun reflexivity (H, t) = EqRefl (Sequent (H, Equal (t, t)))

fun symmetry th = 
        case (sequent_of_theorem th) of
             (Sequent (H, Pred("=",[a, b]))) => 
		 EqSym (Sequent (H, Equal (b, a)), th)
	   | _ => raise Failure
		 

fun transitivity (t1, t2) = 
    case (sequent_of_theorem t1, sequent_of_theorem t2) 
    of  (Sequent (H1, Pred("=",[a, b])), Sequent (H2, Pred("=",[d, c]))) => 
           if (H1 == H2) and (b == d) 
           then EqTrans (Sequent (H1, Equal (a, c)), t1, t2)
           else raise Failure 
        |  _ => raise Failure

fun substitution (A, x, th1, th2) = 
      case (sequent_of_theorem th1, sequent_of_theorem th2) of 
             (Sequent (H1, Pred("=",[a, b])), Sequent (H2, C)) => 
              if H1 == H2 
              then if C == (subst_in_formula (A,[(x, a)]))
                   then Substitution (Sequent (H1, subst_in_formula (A,[(x, b)])), th1, th2)
                   else raise Failure
              else raise Failure
	   |  _ => raise Failure
    
	        
fun peanoone s = 
    case s 
      of (Sequent (H, Connection("~",[Pred("=",[IntTerm 0, Fun (Constant "+",[t, IntTerm 1])])]))) => 
          PeanoOne s
         | _ => raise Failure

fun peanotwo th = 
        case (sequent_of_theorem th) of
          (Sequent (H,
		   Pred("=",[Fun (Constant "+",[x, IntTerm 1]),
				   Fun (Constant "+",[y, IntTerm 1])]))) => 
                   PeanoTwo (Sequent (H, Equal (x, y)), th)
           | _ => raise Failure

fun peanothree s = 
      case s 
        of (Sequent (H, Pred("=",[Fun (Constant "+",[a, IntTerm 0]), b]))) =>
             if a == b then PeanoThree (s) else raise Failure
           | _ => raise Failure

fun peanofour s = 
      case s 
        of (Sequent (H, Pred("=",[Fun (Constant "+",[a, Fun (Constant "+",[b, IntTerm 1])]),
			   Fun (Constant "+",[Fun (Constant "+",[c, d]), IntTerm 1])]))) =>  
             if (a == c) and (b == d) then PeanoFour (s) else raise Failure
         | _ => raise Failure


fun peanofive s = 
     case s 
       of (Sequent (H, Pred("=",[Fun (Constant "*",[a, IntTerm 0]), IntTerm 0]))) => 
                   PeanoFive (s) 
        | _ => raise Failure

fun peanosix s = 
     case s 
       of (Sequent (H, Pred("=",[Fun (Constant "*",[a, Fun (Constant "+",[b, IntTerm 1])]),
			  Fun (Constant "+",[Fun (Constant "*",[c, d]), e])]))) =>
                if (a == c) and (b == d) and (a == e) 
                then PeanoFour (s) else raise Failure
          | _ => raise Failure

fun induction_pr (Quant("forall",[(x, IntType)], A), t1, t2) = 
    let my (Sequent (H1, B), Sequent (H2, C))
          =  (sequent_of_theorem t1, sequent_of_theorem t2) 
    in let f1 = subst_in_formula (A,[(x, IntTerm 0)])
       in if f1 == B 
              then let s = string_of_formula_naming (A, H2) 
                   in let H3 = delete_naming (TypeNaming (x, IntType),
						  delete_naming (FormulaNaming (s, A), H2))
                      in if H1 == H3 
                         then let f2 = subst_in_formula (A,[(x, Fun (Var"+",[Var x, IntTerm 1]))])
                              in if f2 == C 
                                 then Induction (Sequent (H1, All([(x, IntType)], A)), t1, t2)
				 else raise Failure 
			      end 
                         else raise Failure 
		      end
		   end 
              else raise Failure 
        end
    end 
  | induction_pr (_, _, _) = raise Failure

end 
