
# Generate the <architecture>SchedProps generic.
# This package extracts semantics and dependence 
# information about the instruction set needed for scheduling optimizations.



###                   "Familiar things happen, and mankind
###                    does not bother about them.
###                    It requires a very unusual mind
###                    to undertake the analysis of the obvious."
###
###                                 -- Alfred North Whitehead



generic package MDLGenSchedProps (RTLComp:  Mdl_Rtl_Comp) : Mdl_Gen_Module2 =
pkg

   package RTLComp = RTLComp
   package Comp    = RTLComp::Comp
   package raw_syntax     = Comp::raw_syntax
   package e       = Dictionary
   package Dictionary     = Comp::Dictionary
   package rtl     = RTLComp::RTL
   package t       = RTL::T

   use raw_syntax Comp::Util Comp::error

   exception Undefined
  
   #  Generate a call to the bug function 
   fun bug funName = APPLY("bug", TUPLEexp[STRING_CONSTANT_IN_EXPRESSION funName, ID "instruction"])

   #  Expressions building utilities 
   fun cons (x, LISTexp (a, b)) = LISTexp (x . a, b)
     | cons (x, y) = LISTexp([x], THE y)
   fun append (x, LISTexp([], NULL)) = x 
     | append (x, y) = APPLY("@", TUPLEexp[x, y])

   MAX_BIT = unt::wordSize - 1 #  Implementation specific!!!! 

   #  Function to compile the reservation tables! 

   fun genRT md = 
   let resources   = Comp::resources md
       cpus        = Comp::cpus md
       pipelines   = Comp::pipelines md
       latencies   = Comp::latencies md
       architecture        = Comp::name md
    
       type table( X ) = e::envir( X ) * String

       fun mkTable name = (e::envir name, name)

       fun enter (E, name) (x, y) = 
           (e::lookup E x; error (name$" "$x$" has been redefined\n"))
           except _ => e::update E (x, y)

       #  Create tables 
       resourceTable = mkTable "resource"
       cpuTable      = mkTable "cpu"
       pipelineTable = mkTable "pipeline"
       latencyTable  = mkTable "latency"

       #  Enter info into tables 
       apply (fn id => enter resourceTable (id, id) ) resources
       apply (fn x as CPUbind { name, ... } => enter cpuTable (name, x)) cpus
       apply (fn x as PIPELINEbind (id, _) => enter pipelineTable (id, x)) 
                pipelines
       apply (fn x as LATENCYbind (id, _) => enter latencyTable (id, x)) 
                latencies

       fun checkResource msg r = 
            (e::lookup (#1 resourceTable) r; ()) except _ =>
              error (msg$" has undefined resource "$r)
 
       #  Compile each CPU definition 
       fun compileCPU (CPUbind { name=cpuName, maxIssues, resources, ... } ) = 
       let 
           print ("[Generating reservation table for "$architecture$"."$cpuName$"]\n")

           /* Compute the number of bits necessary for a field that can count
            * from 0 to n, and compute the extra counts to overflow the field
            */
           fun getfield (n) =
           let fun bits (0w0, n) = n
                 | bits (w, n)   = bits (unt.>>(w, 0w1), n+0w1)
               bits = bits (unt::from_int n, 0w0)
               n'   = unt::toIntX (unt.<<(0w1, bits))
           in  { width=unt::toIntX bits, padding=n'-n - 1 }
           end

           checkResource = checkResource("cpu "$cpuName)

           fun genResources (resources) =
           let fun addMask { word, bits, mask=[] } = [{ word=word, bits=bits } ]
                 | addMask { word, bits, mask= { word=w, bits=b } . mask } =
                    if word=w then { word=word, bits=bits + b } . mask
                    else { word=word, bits=bits } . { word=w, bits=b } . mask
               fun loop ([], word, bit, result, mask, extra) =
                    { cpu=cpuName, maxIssues=maxIssues,
                     words=word+1, result=result, mask=reverse mask, extra=reverse extra }
                 | loop((n, r) . rs, word, bit, result, mask, extra) =
                   let checkResource r
                       my { width, padding } = getfield n
                       my (word, bit, mask, extra) =
                           if bit + width + 1 > MAX_BIT
                           then (word+1, 0, { word=word+1, bits=0w0 } . mask,
                                            { word=word+1, bits=0w0 } . extra)
                           else (word, bit, mask, extra)
                       newBit = bit + width + 1
                       mask   = addMask { word=word, bits=unt.<<(0w1,
                                                 unt::from_int (bit+width)),
                                            mask=mask }
                       extra = addMask { word=word, 
                                           bits=unt.<<(unt::from_int padding,
                                                unt::from_int bit),
                                           mask=extra }
               in  loop (rs, word, newBit,
                      { resource=r, count=n, word=word, bit=bit } . result, mask, extra)
               end
           in  loop (resources, 0, 0, [], [], [])
           end

       in  genResources resources
       end

       #  Compile all cpu information 
       cpuInfo = map compileCPU cpus

       /* number of words needed to represent the state in one cycle */ 
       W = fold_right (fn ( { words, ... }, w) => int::max (words, w)) 0 cpuInfo

       fun many f =
       let fun g n = if n >= W then [] else f n . g (n+1) 
       in  g 0 end  

       #  type of resource 
       result_type = DATATYPEdecl([], 
                 [TYPEbind("resource",[], TUPLEty (many (fn _ => WORDty)))])
       cpuType = 
             DATATYPEdecl(
              [DATATYPEbind
                  { id="cpu", type_variables=[], mc=NULL, asm=FALSE, field=NULL, 
                   cbs=map (fn CPUbind { name, ... } => CONS (name, NULL)) cpus
                  }
              ],
              [])

       getCPU =
           FUNdecl[FUNbind("cpu", 
             map (fn CPUbind { name, aliases, ... } => 
                 CLAUSE([OR_PATTERN (map STRING_CONSTANT_IN_PATTERN (name . aliases))],
                        NULL, ID name)) cpus
           @ [CLAUSE([IDpat "cpuName"], 
                NULL,
                APPLY("error",
                  APPLY("$",
                    TUPLEexp[STRING_CONSTANT_IN_EXPRESSION "unknown architecture ",
                             ID "cpuName"])))] 
                  )]

       i2s = int::to_string 
       fun w2s w = "0wx"$unt::to_string w

       fun get (w, []) = 0w0
         | get (w, { word, bits } . l) = 
             if w == word then unt32::from_int (unt::toIntX bits) 
             else get (w, l)
 
       /*
        * Function to merge two reservation table entries  
        */
       mergeRT = 
       let arg1 = TUPLEpat (many (fn n => IDpat("x"$i2s n)))
           arg2 = TUPLEpat (many (fn n => IDpat("y"$i2s n)))
           arg  = TUPLEpat[arg1, arg2]
           body = TUPLEexp (many (fn n =>
                          APPLY_EXPRESSION (IDexp (IDENT(["Unt"], "+")), 
                           TUPLEexp[ID("x"$i2s n), ID("y"$i2s n)])))
       in  FUN("mergeRT", arg, body) 
       end

       zeroRT = MY("zeroRT", TUPLEexp (many (fn n => WORD32expression 0w0)))

       #  Generate code for each cpu 
       fun genCode { cpu, words, result, mask, extra, maxIssues } = 
       let fun genRes { resource, count, word, bit } =   
               (resource, 
                  TUPLEexp (many (fn w => if w == word then 
                               WORD32expression (unt32.<<(0w1, unt::from_int bit)) else 
                               WORD32expression 0w0)))

           mergeableRT = 
           let arg1 = TUPLEpat (many (fn n => IDpat("x"$i2s n)))
               arg2 = TUPLEpat (many (fn n => IDpat("y"$i2s n)))
               arg  = TUPLEpat[arg1, arg2]
               body = many (fn n =>
                    let maskBits = get (n, mask)
                    in  APPLY("=", 
                          TUPLEexp[
                          APPLY("unt::bitwise_and", 
                            TUPLEexp[PLUS (ID("x"$i2s n), ID("y"$i2s n)),
                                     WORD32expression maskBits]),
                          WORD32expression 0w0])
                    end)
           in  FUN("mergeableRT"$cpu, arg, fold_right AND TRUE body)
           end
       
           emptyRT = MY("emptyRT"$cpu,
                           TUPLEexp (many (fn n => WORD32expression (get (n, extra)))))

           maxIssues = MY("maxIssues"$cpu, INT_CONSTANT_IN_EXPRESSION maxIssues)
           myResources = map genRes result
           fun getRes result =
           let fun loop ([]) = (result, ID "zeroRT")
                 | loop((r, e) . rs) = if r == result then (r, e) else loop rs
           in  loop myResources
           end
           resources = MY("resources"$cpu,
                                 RECORD_EXPRESSION (map getRes resources))

       in  SEQdecl[maxIssues, emptyRT, mergeableRT, resources]
       end

       resourcesPattern = RECORD_PATTERN (map (fn id => (id, IDpat id)) resources, FALSE)

       #  Generate a pipeline function 
       fun genPipelineFun (PIPELINEbind (name, clauses)) = 
       let check = checkResource("pipeline "$name)
           fun trans [] = []
             | trans (IDcycle result . ps) = 
                (check result; ID result . trans ps)
             | trans (ORcycle (a, b) . ps) =
                merge (trans[a], trans[b])@trans ps
             | trans (REPEATcycle (a, n) . ps) = repeat (trans[a], n)@trans ps

           and merge([a],[b]) = [APPLY("mergeRT", TUPLEexp[a, b])]
             | merge _ = (error("bad expression in pipeline "$name); [])

           and repeat (x, 0) = []
             | repeat (x, n) = x@repeat (x, n - 1)

           fun genClause (pattern, PIPELINE pe) = 
               CLAUSE([resourcesPattern, pattern], NULL, LISTexp (trans pe, NULL))

       in  FUNdecl[FUNbind("pipeline"$name, map genClause clauses)]
       end

       #  Generate a latency function 
       fun genLatencyFun (LATENCYbind (name, clauses)) = 
       let fun genClause (pattern, e) = CLAUSE([resourcesPattern, pattern], NULL, e)
       in  FUNdecl[FUNbind("latency"$name, map genClause clauses)]
       end

   in  SEQdecl (result_type . cpuType . getCPU . zeroRT . mergeRT .
               map genCode cpuInfo @ 
               map genPipelineFun pipelines @
               map genLatencyFun latencies
              )
   end
 
   fun gen compiled_rtls =
   let #  The machine description 
       md = RTLComp::md compiled_rtls

       #  name of the package/api 
       strName = Comp::strname md "SchedProps"  
       sigName = "SCHEDULING_PROPERTIES"

       cpus      = Comp::cpus md
       pipelines = Comp::pipelines md
       latencies = Comp::latencies md
       rtDecl = genRT md

       #  query function 
       queryFun = RTLComp::queryFun compiled_rtls

       #  Default way of handling composite instructions 
       fun composite { instruction, id, type } = APPLY("query", ID id)

       #  Arguments to the instruction generic 
       args =
           ["package instruction:  "$Comp::signame md "INSTR",
            "package region_props:  REGION_PROPERTIES", 
            "package asm:    Instruction_Emitter where I = Instr",
            "  sharing RegionProps::Region = Instr::Region"
           ]

       #  Definition of the reservation table type 
       resultTableDefinition = 
           @@@["package a = DynArray",
             "type pipeline = List( resource )",
             "type reservation_table = a::Rw_Vector( Int * resource )"
            ]

       #  Make the newTable (per cpu) 
       newTable = 
           @@@["fun newTable emptyRT n = ",
             "  a::rw_vector (n, (0, emptyRT)) : reservation_table"
            ]

       #  Make the defUse query function (shared by all cpu types) 
       defUse = 
       let defaultLat = INT_CONSTANT_IN_EXPRESSION 0
           fun queryDefUse { instruction, rtl, const } =
           let my CONSbind { latency, ... } = instruction
               lat = case latency of THE l => l | NULL => defaultLat
               fun pair (e, l) = TUPLEexp[e, l]

               my (defs, uses) = l::defUse rtl
               def = 
                    RTL::queryExpression rtlmd 
                    { name    = "defUse",
                     reg     = fn (r, _, l) => cons (pair (r, lat), l),
                     fixreg  = fn (r, _, l) => cons (pair (r, lat), l),
                     regs    = fn (rs, _, l) => append (APPLY("mkSet", rs), l),
                     operand    = fn (_, l) => l, 
                     lab     = fn (_, l) => l, 
                     imm     = fn (_, l) => l, 
                     cellset = fn (c, l) => append (APPLY("getCellSetDef", c), l),
                     region  = fn (r, l) => append (APPLY("getRegionDef", r), l)
                    } (defs, LISTexp([], NULL))
               use =
                    RTL::queryExpression rtlmd 
                    { name    = "defUse",
                     reg     = fn (r, _, l) => cons (r, l),
                     fixreg  = fn (r, _, l) => cons (r, l),
                     regs    = fn (rs, _, l) => append (rs, l),
                     operand    = fn (x, l) => APPLY("getOpnd", TUPLEexp[x, l]),
                     lab     = fn (_, l) => l, 
                     imm     = fn (_, l) => l, 
                     cellset = fn (c, l) => append (APPLY("getCellSetUse", c), l),
                     region  = fn (r, l) => append (APPLY("getRegionUse", r), l)
                    } (uses, LISTexp([], NULL))

           in  { expression=TUPLEexp[def, use], pattern=[] }
           end
           getOpnd = RTL::queryOpnd rtlmd
                         { name= "getOpnd",                   
                          extraArgs=["rest"],
                          reg = fn r => LISTexp([r], THE (ID "rest")),
                          imm = fn r => raise exception MATCH,
                          operand= fn r => raise exception MATCH,
                          default= ID "rest"
                         }
           predefined =
                  @@@["fun mkSet set = map (fn r => (r, 0)) set",
                    "fun getRegionDef r = ",
                    "stipulate my (d, u) = RegionProps::writeTo r",
                    "herein  map (fn r => (r,-1)) d end",
                    "fun getRegionUse r = RegionProps::readFrom r"
                   ]
           cellSets = Comp::cellSets md
           cellSetNames = map (fn CELLdecl { id, ... } => id) cellSets
           getCellSetDef =
               FUN("getCellSetDef", TUPLEpat (map IDpat cellSetNames),
                   fold_right (fn (x, LISTexp ([], NULL)) => APPLY("mkSet", ID x)
                           | (x, e) => APPLY("@", TUPLEexp[APPLY("mkSet", ID x), e]))
                         (LISTexp([], NULL)) cellSetNames)
           getCellSetUse =
               FUN("getCellSetUse", TUPLEpat (map IDpat cellSetNames),
                   fold_right (fn (x, LISTexp ([], NULL)) => ID x
                           | (x, e) => APPLY("@", TUPLEexp[ID x, e]))
                         (LISTexp([], NULL)) cellSetNames)

       herein  FUN("defUse", TUPLEpat[IDpat "cpu", IDpat "resources"],
           LET_EXPRESSION([
             SEQdecl (map (fn LATENCYbind (id, _) =>
                  MY (id, APPLY_EXPRESSION (APPLY("latency"$id, ID "resources"), 
                                  ID "cpu"))) latencies),
             queryFun { name="defUseQuery",
                    extraArgs=[],
                    args=["instruction"],
                    extraExps=[],
                    localDecls=[getOpnd, predefined, getCellSetDef, getCellSetUse],
                    body=queryDefUse, composite=composite } ],
              [ID "defUseQuery"]
            ))
       end

       #  Make the pipeline query function (shared by all cpu types) 
       pipelineOf = 
       stipulate defaultPipeline = LISTexp([], NULL)
           fun queryPipeline { instruction, rtl, const } =
           let my CONSbind { pipeline, ... } = instruction
               p = case pipeline of THE p => p | NULL => defaultPipeline
           in  { expression=p, pattern=[] }
           end
       herein  FUN("pipelineOf", TUPLEpat[IDpat "cpu", IDpat "resources"],
            LET_EXPRESSION([
               SEQdecl (map (fn PIPELINEbind (id, _) =>
                       MY (id, APPLY_EXPRESSION (APPLY("pipeline"$id, ID "resources"), 
                                      ID "cpu"))) pipelines),
               queryFun { name="pipelineQuery",
                        extraArgs=[],
                        args=["instruction"],
                        extraExps=[],
                        localDecls=[],
                        body=queryPipeline, 
                        composite=composite } ],
              [ID "pipelineQuery"]
            ))
       end


       findSlotBackward = 
           @@@["fun findSlotBackward (maxIssues, mergeable)",
             "                 (rt:  reservation_table, time, pipeline) = ",
             "stipulate fun search (t) = ",
             "    let fun fits ([], t) = TRUE",
             "          | fits (r . rs, t) =", 
             "        mergeable(#2 (a::sub (rt,-t)), r)",
             "        and fits (rs, t+1)", 
             "    in  if #1 (a::sub (rt,-t)) < maxIssues",
             "        and fits (pipeline, t) then t else search (t - 1)",
             "    end",
             "herein  search (time) end"
            ]

       findSlotForward =
           @@@["fun findSlotForward (maxIssues, mergeable)",
             "                 (rt:  reservation_table, time, pipeline) = ",
             "stipulate fun search (t) = ",
             "    stipulate fun fits ([], t) = TRUE",
             "          | fits (r . rs, t) =", 
             "        mergeable(#2 (a::sub (rt, t)), r)",
             "        and fits (rs, t+1)", 
             "    herein  if #1 (a::sub (rt, t)) < maxIssues",
             "        and fits (pipeline, t) then t else search (t+1)",
             "    end",
             "herein  search time end"
            ]

       insertBackward =
           @@@["fun insertBackward (rt, time, pipeline) =",
             "{   fun update ([], t) = ()",
             "      | update (r . rs, t) =",
             "        {   my (n, r') = a::sub (rt,-t);",
             "            a::update (rt,-t, (n, mergeRT (r, r')));",
             "            update (rs, t+1);",
             "        }",
             "    update (pipeline, time);",
             "    my (n, r) = a::sub (rt, -time);",
             "    a::update (rt, -time, (n+1, r)); }"
            ]

       insertForward = 
            @@@["fun insertForward (rt, time, pipeline) =",
             "stipulate fun update ([], t) = ()",
             "      | update (r . rs, t) =",
             "        let my (n, r') = a::sub (rt, t)",
             "        in  a::update (rt, t, (n, mergeRT (r, r')));",
             "            update (rs, t+1)",
             "        end",
             "    update (pipeline, time)",
             "    my (n, r) = a::sub (rt, time)",
             "herein  a::update (rt, time, (n+1, r)) end"
            ]
 
       #  Create the machine info for one architecture 
       fun genMachineInfo cpu =
       let cpuAndResources = TUPLEexp[ID cpu, ID("resources"$cpu)]
           newTable = APPLY("newTable", ID("emptyRT"$cpu))
           defUse   = APPLY("defUse", cpuAndResources)
           insertArgs = TUPLEexp[ID("maxIssues"$cpu),
                                     ID("mergeableRT"$cpu)]
           maxIssues   = ID("maxIssues"$cpu)
           pipeline    = ID "pipeline"
       in  LOCALdecl(
             [MY("findSlotForward", APPLY("findSlotForward", insertArgs)),
              MY("findSlotBackward",  APPLY("findSlotBackward", insertArgs)),
              MY("pipeline",     APPLY("pipelineOf", cpuAndResources))
             ],
             [MY("forwardinfo"$cpu,
                APPLY("CPU_INFO", 
                  RECORD_EXPRESSION[("maxIssues", maxIssues),
                            ("newTable", newTable),
                            ("pipeline", pipeline),
                            ("findSlot", ID "findSlotForward"),
                            ("insert", ID "insertForward"),
                            ("defUse", defUse)
                            ])),
              MY("backwardinfo"$cpu,
                APPLY("CPU_INFO", 
                  RECORD_EXPRESSION[("maxIssues", maxIssues),
                            ("newTable", newTable),
                            ("pipeline", pipeline),
                            ("findSlot", ID "findSlotBackward"),
                            ("insert", ID "insertBackward"),
                            ("defUse", defUse)
                            ]))
             ]
           )
       end

       allMachineInfos = 
           SEQdecl (map (fn CPUbind { name, ... } => genMachineInfo name) cpus)

       #  The info function 
       infoFun = 
          FUN("info", RECORD_PATTERN([("cpu", IDpat "cpu"),
                                ("backward", IDpat "backward")], FALSE),
             CASE_EXPRESSION (ID "cpu",
                map (fn CPUbind { name, ... } =>
                    CLAUSE([IDpat name],
                       NULL,
                       IF_EXPRESSION (ID "backward",
                          ID("backwardinfo"$name), ID("forwardinfo"$name))))
                cpus))
               
       /* The split copies function. 
        * This must work before RA or after RA 
        */
       impl = Comp::hasCopyImpl md
       implInit = if impl then ", impl=REF NULL" else ""
       splitCopies =
           @@@ ["package shuffle = shuffle (I)",
              "fun move { src=i::DIRECT rs, dst=i::DIRECT rd } =",
              "     [i::COPY { src=[rs], dst=[rd], tmp=NULL"$implInit$"} ]",
              "fun fmove { src=i::FDIRECT rs, dst=i::FDIRECT rd } =",
              "     [i::FCOPY { src=[rs], dst=[rd], tmp=NULL"$implInit$"} ]",
              "shuffle = shuffle::shuffle { mvInstr=move, ea=i::DIRECT }",
              "shufflefp = shuffle::shuffle { mvInstr=fmove, ea=i::FDIRECT }",
              "fun splitCopies (i::NOTE { instruction, ... } ) = splitCopies instruction",
              "  | splitCopies (i::COPY { src, dst, tmp, ... } ) =",
              "       shuffle { tmp=tmp, src=src, dst=dst }",
              "  | splitCopies (i::FCOPY { src, dst, tmp, ... } ) =",
              "       shufflefp { tmp=tmp, src=src, dst=dst }",
              "  | splitCopies i = [i]"
             ]

       #  The generic 
       strBody = 
           [@@@ ["package i = Instr",
               "package c = i::C",
               "",
               "type latency = Int",
               "type time = Int",
               "type architecture = String",
               ""
              ],
            Comp::errorHandler md "SchedProps",
            RTLComp::complexErrorHandlerDef compiled_rtl,
            @@@ ["",
               "source = i::SOURCE {}",
               "sink   = i::SINK {}",
               ""
              ],
            Comp::declOf md "Scheduling",
            rtDecl,
            resultTableDefinition,
            @@@[ "enum cpu_info =",
               "  CPU_INFO of", 
               "  { maxIssues:  Int, ",
               "    pipeline:  i::instruction -> pipeline, ",
               "    defUse:  i::instruction -> List (i::C.cell * latency) * List( i::C.cell ), ",
               "    newTable:  Int -> reservation_table, ",
               "    findSlot:  reservation_table * time * pipeline -> time, ",
               "    insert:    reservation_table * time * pipeline -> Void",

               "  }"
             ],
            newTable,
            defUse,
            pipelineOf,
            findSlotForward,
            findSlotBackward,
            insertForward,
            insertBackward,
            allMachineInfos,
            infoFun,
            splitCopies
           ]

   in  Comp::codegen md "scheduling/SchedProps"
         [Comp::make_generic md "SchedProps" args sigName (map Comp::simpDecl strBody)
         ]
   end
end
