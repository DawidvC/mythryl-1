## expand-generic-g.pkg 

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6



###       "Within C++, there is a much
###        smaller and cleaner language
###        struggling to get out."
###
###          -- Bjarne Stroustrup


# The center of the typechecker is
#
#     src/lib/compiler/front/typechecker/typecheck/typecheck-package-language-g.pkg
#
# -- see it for a higher-level overview.
# It calls us to do specialized generic
# expansion stuff.


api Expand_Generic {

    package generics_expansion_stuff:  Generics_Expansion_Stuff;		# Generics_Expansion_Stuff	is from   src/lib/compiler/front/typechecker/modules/generics-expansion-stuff.pkg

     expand_generic: ( module::Typechecked_Generic,
		       module::Typechecked_Package,
		       debruijn_index::Depth,
		       module_path_context::Context,
		       inverse_path::Inverse_Path,
		       typecheck_stuff::Compile_Info
                     )
		    -> module::Typechecked_Package; 

     debugging:  Ref(  Bool );

}; #  Api Expand_Generic 



#  Genericized to factor out dependencies on highcode: 

generic package expand_generic_g (package i:  Generics_Expansion_Stuff;)	# Generics_Expansion_Stuff	is from   src/lib/compiler/front/typechecker/modules/generics-expansion-stuff.pkg

: (weak)  Expand_Generic						# Expand_Generic		is from   src/lib/compiler/front/typechecker/modules/expand-generic-g.pkg

{
    stipulate #  package di = debruijn_index 

	package ep= module_path;			# module_path		is from   src/lib/compiler/front/typecheck-stuff/modules/module-path.pkg
	package ip= inverse_path;			# inverse_path		is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package s= source_map;				# source_map		is from   src/lib/compiler/front/basics/source/source-map.pkg

	package t= types;				# types			is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	package ee= typechecker_dictionary;		# typechecker_dictionary	is from   src/lib/compiler/front/typecheck-stuff/modules/typechecker-dictionary.pkg
	package epc= module_path_context;		# module_path_context	is from   src/lib/compiler/front/typecheck-stuff/modules/module-path-context.pkg

	package eu= typecheck_stuff;			# typecheck_stuff	is from   src/lib/compiler/front/typechecker/typecheck/typecheck-stuff.pkg
	package mm= module_map;				# module_map		is from   src/lib/compiler/front/typecheck-stuff/modules/module-map.pkg
	package mu= module_stuff;			# module_stuff		is from   src/lib/compiler/front/typecheck-stuff/modules/module-stuff.pkg

	include module; 

    herein 

	package generics_expansion_stuff = i;

	#  Debugging 
	say = control_print::say;
	debugging = typecheck_data_control::expand_generics_g_debugging;

	fun if_debugging_say (msg: String)
	    =
	    if *debugging   say msg;   say "\n";	fi;

	include typechecking_debugging;

	debug_print
            =
            (fn x => debug_print debugging x; end );     #  Value Restriction 

	fun bug msg
            =
            error_message::impossible ("expand_generic: " + msg);

	anon_generic_sym =   symbol::make_generic_symbol   "anonymous_g";
	param_sym        =   symbol::make_package_symbol "<generic_api_parameter_inst>";
	anon_package_sym =   symbol::make_package_symbol "<anonymous_package>";
	result_id        =   symbol::make_package_symbol "<result_package>";
	return_id        =   symbol::make_package_symbol "<return_package>";

	default_error
            =
            error_message::error_no_file
                (error_message::default_plaint_sink(), REF FALSE)
		(0, 0);

	fun evaluate_type_constructor (
                entv,
	        typechecked_type_constructor_expression,
		typechecker_dictionary,
		module_path_context,
		inverse_path, 
		compile_info as { make_stamp, ... }: eu::Compile_Info
	    )
	    =
	    case typechecked_type_constructor_expression

		CONSTANT_TYPE_CONSTRUCTOR type_constructor
		    =>
		    type_constructor;

		FORMAL_TYPE_CONSTRUCTOR (t::PRIMITIVE_TYPE_CONSTRUCTOR { kind, arity, eq, path, ... } )
		    =>
		    case kind

			t::DATATYPE { index=>0, stamps, free_type_constructors, family, root=>NULL }
			    =>
			    {   viztyc = mu::translate_type_constructor typechecker_dictionary;
				nstamps = vector::map  (fn _ = make_stamp())  stamps;
				nst = vector::get (nstamps, 0);
				nfreetycs = map viztyc free_type_constructors;
				epc::bind_type_constructor_path (module_path_context, nst, entv);

				t::PRIMITIVE_TYPE_CONSTRUCTOR {
				    stamp => nst,
				    arity,
				    eq,
				    path  => ip::append (inverse_path, path),
				    stub  => NULL,
				    kind  => t::DATATYPE { index    => 0,
							   stamps   => nstamps,
							   root     => NULL,
							   free_type_constructors => nfreetycs,
							   family
						         }
				};
			    };

			t::DATATYPE { index=>i, root=>THE rtev, ... }
			    =>
			    {   my (nstamps, nfreetycs, nfamily)
				    = 
				    case (ee::find_type_constructor_by_module_stamp (typechecker_dictionary, rtev))

					t::PRIMITIVE_TYPE_CONSTRUCTOR { kind => t::DATATYPE dt, ... }
					    =>
					    ( dt.stamps,
					      dt.free_type_constructors,
					      dt.family
					    );

					_ => bug "unexpected case in evaluate_type_constructor-FMGENtyc (2)";
                                    esac;

				nst = vector::get (nstamps, i);		#  "nst" = "new stamp"?

				epc::bind_type_constructor_path (module_path_context, nst, entv);

				t::PRIMITIVE_TYPE_CONSTRUCTOR
				  {
				    stamp => nst,
				    arity,
				    path  => ip::append (inverse_path, path),
				    eq,
				    stub  => NULL,
				    kind  => t::DATATYPE { index    => i,
							   stamps   => nstamps,
							   root     => NULL,
							   free_type_constructors => nfreetycs,
							   family   => nfamily
							 }
				  };
			    };

			_ => bug "unexpected PRIMITIVE_TYPE_CONSTRUCTOR in evaluate_type_constructor";
		    esac;


		FORMAL_TYPE_CONSTRUCTOR (
		     t::DEFINED_TYPE_CONSTRUCTOR {
			 stamp,
			 strict,
			 path,
			 type_scheme => t::TYPE_SCHEME { arity, body }
		     }
		 )
		    =>
		    {   nst = make_stamp();

			#  type_identifier=stamp (this should perhaps be more abstract some day) 

			epc::bind_type_constructor_path (module_path_context, nst, entv);

			t::DEFINED_TYPE_CONSTRUCTOR
                          {
			    stamp  => nst,
			    strict,
			    path   => ip::append (inverse_path, path),
			    type_scheme => t::TYPE_SCHEME { arity, 
							    body  => mu::translate_type  typechecker_dictionary  body
							  }
			  };
		    };

		TYPE_VARIABLE_TYPE_CONSTRUCTOR module_path
		    => 
		    {   if_debugging_say (">>evaluate_type_constructor[TYPE_VARIABLE_TYPE_CONSTRUCTOR]: " + ep::module_path_to_string module_path);

			ee::find_type_constructor_via_module_path (typechecker_dictionary, module_path);
		    };

		 _   => bug "unexpected typechecked_type_constructor_expression in evaluate_type_constructor";
             esac



	also
	fun evaluate_package_expression (
                package_expression,
                depth,
                module_path_context,
                module_stamp_v,
                typechecker_dictionary,
                inverse_path, 
		compile_info as { make_stamp, ... }: eu::Compile_Info
            )
            =
	    {   if_debugging_say ("[Inside evaluate_package_expression ......");

		case package_expression

		    VARIABLE_PACKAGE module_path
			=>
			{   if_debugging_say (">>evaluatePackageexpression[VARIABLE_PACKAGE]: " + ep::module_path_to_string module_path);

			    (   ee::find_package_via_module_path (typechecker_dictionary, module_path),
				typechecker_dictionary
			    );
			};

		    CONSTANT_PACKAGE typechecked_package
			=>
			(typechecked_package, typechecker_dictionary);

		    PACKAGE { stamp, module_declaration }
			=>
			{   module_path_context = epc::enter_open (module_path_context, module_stamp_v);

			    stp = evaluate_stamp_expression (stamp, depth, module_path_context, typechecker_dictionary, compile_info);

			    dictionary = evaluate_declaration( module_declaration, depth, module_path_context, typechecker_dictionary, inverse_path, compile_info);

			    ( { stamp                  =>  stp,
				typechecker_dictionary =>  dictionary,

				property_list          =>  property_list::make_property_list (),
				stub                   =>  NULL,
				inverse_path
			      },

			      typechecker_dictionary
			    );
			};

		    APPLY (generic_expression, package_expression)
			=>
			{   my (typechecked_generic, typechecker_dictionary1)
				= 
				evaluate_generic (generic_expression, depth, module_path_context, typechecker_dictionary, compile_info);

			    my (argument_typechecked_package, typechecker_dictionary2)
				= 
				evaluate_package_expression (
				  package_expression,
				  depth,
				  module_path_context,
				  module_stamp_v,
				  typechecker_dictionary1,
				  ip::empty,
				  compile_info
				);

			    module_path_context
				=
				epc::enter_open (module_path_context, module_stamp_v);

			    ( expand_generic (typechecked_generic, argument_typechecked_package, depth, module_path_context, inverse_path, compile_info),
			      typechecker_dictionary2
			    );
			};

		    PACKAGE_LET { declaration => module_declaration, expression => package_expression }
			=>
			{   typechecker_dictionary1
				=
				evaluate_declaration (
				  module_declaration,
				  depth,
				  module_path_context,
				  typechecker_dictionary,
				  inverse_path,
				  compile_info
				);

			    my (typechecked_package, typechecker_dictionary2)
				= 
				evaluate_package_expression (
				  package_expression,
				  depth,
				  module_path_context,
				  module_stamp_v,
				  typechecker_dictionary1, 
				  inverse_path,
				  compile_info
				);

			    (typechecked_package, typechecker_dictionary2);
			};

		    ABSTRACT_PACKAGE (an_api, package_expression)
			=> 
			{   my (source_typechecked_package, typechecker_dictionary1)
				= 
				evaluate_package_expression
				  (
				    package_expression,
				    depth,
				    module_path_context,
				    module_stamp_v,
				    typechecker_dictionary,
				    inverse_path,
				    compile_info
				  );

			    my {   typechecked_package,
				    abstract_type_constructors,
				    type_constructor_module_paths
				}
				= 
				i::instantiate_package_abstractions
                                  {
				    an_api,
				    typechecker_dictionary,
				    source_typechecked_package,
				    inverse_path, 
				    source_code_region  => s::null_region,
				    compile_info
				  };

			    # Because the abstraction creates a
			    # bunch of new stamps, we have to
			    # bind them to the typechecked_package path context:


			    module_path_context
                                =
                                epc::enter_open (module_path_context, module_stamp_v);

			    fun h (t::PRIMITIVE_TYPE_CONSTRUCTOR gt, ep)
				    =>
				    epc::bind_type_constructor_long_path (
					module_path_context,
					mm::type_identifier gt,
					ep
				    );

			        h _ => ();
                            end;

			    paired_lists::apply
                                h
                                ( abstract_type_constructors,
                                  type_constructor_module_paths
                                );

			    ( typechecked_package,
			      typechecker_dictionary1
			    );
			};

		    COERCED_PACKAGE { boundvar, raw, coercion }
			=>
			# Propagage the context inverse_path
			# into the raw uncoerced package:

			{   my (raw_typechecked_package, typechecker_dictionary1)
				= 
				evaluate_package_expression
                                  (
				    raw,
				    depth,
				    module_path_context,
				    THE boundvar,
				    typechecker_dictionary,
				    inverse_path,
				    compile_info
				  );

			    typechecker_dictionary2
                                =
                                ee::set (typechecker_dictionary1, boundvar, PACKAGE_ENTRY raw_typechecked_package);

			    my (typechecked_package, typechecker_dictionary3)
				= 
				evaluate_package_expression
                                  (
				    coercion,
				    depth,
				    module_path_context,
				    module_stamp_v, 
				    typechecker_dictionary2,
				    ip::empty,
				    compile_info
				  );

			    (typechecked_package, typechecker_dictionary3);
			};

		    FORMAL_PACKAGE _ => bug "unexpected FORMAL_PACKAGE in evaluatePackageexpression";
                esac;
            }


	also
	fun evaluate_generic (
                generic_expression,
                depth,
                module_path_context,
                typechecker_dictionary, 
		compile_info as { make_stamp, ... }: eu::Compile_Info
            )
            =
	    case generic_expression

	         VARIABLE_GENERIC module_path
		     =>
		     {   if_debugging_say (">>evaluateGeneric[VARIABLE_GENERIC]: " + ep::module_path_to_string module_path);

			 (   ee::find_generic_via_module_path (typechecker_dictionary, module_path),
			     typechecker_dictionary
			 );
		     };

	         CONSTANT_GENERIC typechecked_generic
		     =>
		    (typechecked_generic, typechecker_dictionary);

	         LAMBDA { parameter, body }
		     => 
		     {   clos = GENERIC_CLOSURE {   parameter_module_stamp    => parameter,
						    body_package_expression => body,
						    typechecker_dictionary
						};

			 ( { stamp           => make_stamp (),
			     generic_closure => clos,
			     property_list   => property_list::make_property_list (),

			     type_constructor_path => NULL,
			     inverse_path          => ip::INVERSE_PATH [anon_generic_sym],
			     stub                  => NULL
			   },

			   typechecker_dictionary
			 );
		     };

	         LAMBDA_TP {
                     parameter,
                     body,
                     an_api as GENERIC_API { parameter_api, body_api, ... }
                 }
		     =>
		     {   generic_closure
			     =
			     GENERIC_CLOSURE
                               { parameter_module_stamp =>  parameter,
				 body_package_expression         =>  body,
				 typechecker_dictionary
			       };

			 tps = { inverse_path' = ip::INVERSE_PATH [param_sym];

				 my { typechecked_package => param_typechecked_package,   type_constructor_paths => param_tps }
				     =
				     i::do_generic_parameter_api {
					 an_api      => parameter_api,
					 typechecker_dictionary, 
					 inverse_path       => inverse_path',
					 depth,
					 source_code_region  => s::null_region,
					 compile_info
				     };

				 typechecker_dictionary'
				     = 
				     ee::mark (
					 make_stamp,
					 ee::set (typechecker_dictionary,  parameter,  PACKAGE_ENTRY param_typechecked_package)
				     );

				 my (body_typechecked_package, _)
				     = 
				     evaluate_package_expression (
					 body,
					 debruijn_index::next depth,
					 module_path_context,
					 NULL,
					 typechecker_dictionary',
					 ip::empty,
					 compile_info
				     );

				 body_tps
				     = 
				     i::get_packages_type_constructor_paths {
					 an_api      => body_api,
					 typechecked_package       => body_typechecked_package, 
					 typechecker_dictionary => typechecker_dictionary',
					 compile_info
				     };

				 t::TYPCONPATH_GENERIC (param_tps, body_tps);
			       };


			 ( { stamp         => make_stamp(),
			     generic_closure,
			     property_list => property_list::make_property_list (),

			     type_constructor_path => THE tps,
			     inverse_path         => ip::INVERSE_PATH [anon_generic_sym],
			     stub                => NULL
			   },

			   typechecker_dictionary
			 );
		     };

	         LET_GENERIC (module_declaration, generic_expression)
		     =>
		     {   typechecker_dictionary1
			     =
			     evaluate_declaration
                               (
				 module_declaration,
				 depth,
				 module_path_context,
				 typechecker_dictionary,
				 ip::empty,
				 compile_info
			       );

			 my (typechecked_generic, typechecker_dictionary2)
			     = 
			     evaluate_generic
                               (
				 generic_expression,
				 depth,
				 module_path_context,
				 typechecker_dictionary1,
				 compile_info
			       );

			 (typechecked_generic, typechecker_dictionary2);
		     };

	        _ => bug "unexpected cases in evaluateGeneric";
            esac



	also
	fun expand_generic (
                typechecked_generic:  module::Typechecked_Generic,
		argument_typechecked_package,
		depth,
		module_path_context,
		inverse_path,
		compile_info as { make_stamp, ... } : eu::Compile_Info
	    )
	    = 
	    {   my { generic_closure => GENERIC_CLOSURE { parameter_module_stamp, body_package_expression, typechecker_dictionary },
		     type_constructor_path,
		     ...
		    }
		    = typechecked_generic;

		new_typechecker_dictionary
		    =
		    ee::mark(  make_stamp,

			       ee::set ( typechecker_dictionary,
                                         parameter_module_stamp,
					 PACKAGE_ENTRY argument_typechecked_package
				       )
			   );

		if_debugging_say ("[Inside EvalAPP] ......");


		case (body_package_expression, type_constructor_path)

		     (   FORMAL_PACKAGE
                             (GENERIC_API { parameter_api, body_api, ... } ),
                             THE tp
                     )
			 => 
			 {   arg_tps
				 =
				 i::get_packages_type_constructor_paths {

				     an_api                 => parameter_api,
				     typechecked_package    => argument_typechecked_package,
				     typechecker_dictionary,
				     compile_info
				 };

			     result_tp = t::TYPCONPATH_APPLY (tp, arg_tps);

			     # Failing to add the stamps into the
			     # typechecked_package path context is a
			     # potential bug here. Will fix this in the
			     # future.  XXX BUGGO FIXME ZHONG

###											"You can never plan the future by the past." -- Edmund Burke

			     my {   typechecked_package,
				     abstract_type_constructors,
				     type_constructor_module_paths
				 }
				 =
				 i::macro_expand_formal_generic_body_api {

				     an_api                 => body_api,
				     typechecker_dictionary => new_typechecker_dictionary,
				     type_constructor_path  => result_tp,

				     inverse_path,
				     source_code_region     => s::null_region,
				     compile_info
				 };

			     fun bind_type_constructor (t::PRIMITIVE_TYPE_CONSTRUCTOR highcode_data_representation, module_path)
				     => 
				     epc::bind_type_constructor_long_path (

					 module_path_context,
					 mm::type_identifier highcode_data_representation,
					 module_path
				     );

				 bind_type_constructor _
				     =>
				     ();
			     end;


			     paired_lists::apply
				 bind_type_constructor
				 (abstract_type_constructors, type_constructor_module_paths);

			     typechecked_package;
			 };

		    _
			=> 
			{   my (typechecked_package, typechecker_dictionary_additions)
				=
				evaluate_package_expression
                                  (
				    body_package_expression,
				    depth,
				    module_path_context,
				    NULL,
				    new_typechecker_dictionary,
				    inverse_path,
				    compile_info
				  );

			    # Invariant: macroExpansionDictionaryAdditions should always
			    # be same as newMacroExpansionDictionary if the body of
			    # an generic is always a BasePackage.
			    # Notice that the generic body is constructed
			    # either in the source programs (sml::grm) or in
			    # typecheck-package-language.pkg when dealing
			    # with curried generic applications.


			    typechecked_package;
			};
                esac;
	    }

	also
	fun evaluate_declaration (
                declaration,
                depth,
                module_path_context,
                typechecker_dictionary,
                inverse_path,
                compile_info as { make_stamp, ... }: eu::Compile_Info
            )
	    =
	    {   if_debugging_say ("[Inside EvalDeclaration ......");

		case declaration

		     TYPE_CONSTRUCTOR_DECLARATION (module_stamp, typechecked_type_constructor_expression)
			 => 
			 {   typechecked_type_constructor
				 = 
				 evaluate_type_constructor
                                   ( module_stamp,
				     typechecked_type_constructor_expression,
				     typechecker_dictionary,
				     module_path_context,
				     inverse_path,
				     compile_info
				   );

			     ee::set
                               ( typechecker_dictionary,
				 module_stamp,
				 TYPE_CONSTRUCTOR_ENTRY typechecked_type_constructor
			       );
			 };

		     PACKAGE_DECLARATION (module_stamp, package_expression, symbol)
			 => 
			 {   inverse_path'
				 = 
				 if (  symbol::eq (symbol, return_id)
				    or symbol::eq (symbol, result_id)
				    )

				      inverse_path;
				 else
				      ip::extend (inverse_path, symbol);
				 fi;

			     my (typechecked_package, typechecker_dictionary1)
				 =
				 evaluate_package_expression
                                   ( package_expression,
				     depth,
				     module_path_context,
				     THE module_stamp,
				     typechecker_dictionary,
				     inverse_path',
				     compile_info
				   );

			     ee::set (typechecker_dictionary1, module_stamp, PACKAGE_ENTRY typechecked_package);
			 };

		     GENERIC_DECLARATION (module_stamp, generic_expression)
			 => 
			 {   my (typechecked_generic, typechecker_dictionary1)
				 = 
				 evaluate_generic (generic_expression, depth, module_path_context, typechecker_dictionary, compile_info);

			     ee::set (typechecker_dictionary1, module_stamp, GENERIC_ENTRY typechecked_generic);
			 };

		     SEQUENTIAL_DECLARATIONS decs
			 =>
			 {   fun h (declaration, typechecker_dictionary0)
				 = 
				 evaluate_declaration (declaration, depth, module_path_context, typechecker_dictionary0, inverse_path, compile_info);

			     ee::mark (make_stamp, fold_left h typechecker_dictionary decs);
			 };

		     # The following may be wrong,
		     # but since ASSERTION! the
		     # bound symbols are all distinct,
		     # it would not appear to cause any harm.

		     LOCAL_DECLARATION (local_declaration, body_declaration)
			 => 
			 {   typechecker_dictionary1
				 =
				 evaluate_declaration
                                   ( local_declaration,
				     depth,
				     module_path_context,
				     typechecker_dictionary,
				     ip::empty,
				     compile_info
				   );

			     evaluate_declaration (body_declaration, depth, module_path_context, typechecker_dictionary1, inverse_path, compile_info);
			 };

		     _  => typechecker_dictionary;
                esac;
            }



	also
	fun evaluate_stamp_expression (
                stamp_expression,
                depth,
                module_path_context,
                typechecker_dictionary,
                compile_info as { make_stamp, ... }: eu::Compile_Info
            )
	    =
	    case stamp_expression

		MAKE_STAMP      => make_stamp();

	   #    CONST stamp     => stamp; 

		GET_STAMP package_expression
		    =>
		    .stamp (
			#1 (
			    evaluate_package_expression
                              (
				package_expression,
				depth,
				module_path_context,
				NULL,
				typechecker_dictionary,
				ip::empty,
				compile_info
			      )
			   )
		    );
            esac;


#	my expandGeneric
#            =
#            compile_statistics::do_phase
#                (compile_statistics::make_phase "Compiler 044 x-expandGeneric")
#                expandGeneric


    end;			# toplevel stipulate 

};				# package expand_generic 


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
