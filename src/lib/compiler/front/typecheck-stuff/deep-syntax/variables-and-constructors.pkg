## variables-and-constructors.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# Datastructures describing variable and
# constructor declarations.
#
# In particular, the datatypes
#
#     Variable
#     Constructor
#
# provide the value types bound by the symbol table
# for those two namespaces -- see OVERVIEW section in
#
#     compiler/typecheck-stuff/symbol-table/symboltable.sml



package variables_and_constructors

: (weak)  Variables_And_Constructors		# Variables_And_Constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.api

{
    stipulate

	package a  = var_home;			# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package t  = types;			# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	package s  = symbol;			# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package sp = symbol_path;		# symbol_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg

    herein

	Variable
            = ORDINARY_VARIABLE
                  {
                    path:          sp::Symbol_Path,
		    var_type:      Ref( t::Type ),
		    var_home:      a::Var_Home,
		    inlining_info: inlining_information::Inlining_Information
		  }

	    | OVERLOADED_IDENTIFIER
                  {
                    name:         s::Symbol,
	 	    type_scheme:  t::Type_Scheme,
		    alternatives: Ref( List { indicator: t::Type,
                                              variant: Variable
                                            }
                                     )
		  }

	    | ERRORVAR;

	Constructor
            =
            t::Constructor;                     

	Variable_Or_Constructor
            = VARIABLE     Variable
	    | CONSTRUCTOR  Constructor;

	fun make_ordinary_variable (id, var_home)
            =
	    ORDINARY_VARIABLE
                {
                  path          =>  sp::SYMBOL_PATH [id], 
		  var_type      =>  REF t::UNDEFINED_TYPE,
		  var_home,
		  inlining_info =>  inlining_information::NULL
	        };

	bogus_constructor
            =
            t::ENUM_CONSTRUCTOR
                {
                  symbol           =>  s::make_value_symbol "bogus",
		  constructor_type =>  t::WILDCARD_TYPE,
		  representation   =>  a::CONSTANT 0,
		  const            =>  TRUE,
		  is_lazy          =>  FALSE,
		  signature        =>  a::CONSTRUCTOR_SIGNATURE (0, 1)
	        };

	bogus_exception
            =
            t::ENUM_CONSTRUCTOR
                {
                  symbol           =>  s::make_value_symbol "bogus",
		  constructor_type =>  core_type_types::exception_type,
		  representation   =>  a::CONSTANT 0,
		  const            =>  TRUE,
		  is_lazy          =>  FALSE,
		  signature        =>  a::NULLARY_CONSTRUCTOR
	        };

    end; #  stipulate

}; #  package variables_and_constructors 
