/*
 * View a scheduler DDG constructed for basic block scheduling
 *
 * -- Allen Leung
 */

###           "If the world should blow itself up,
###            the last audible voice would be that
###            of an expert saying it can't be done."
###                          -- Peter Ustinov


generic package GlobalSchedulerDDGViewer
   (package graph_viewer:  Graph_Viewer
    package ir:           LOWCODE_IR
    package ddg:          SCHEDULER_DDG
    package format_instruction:   FORMAT_INSTRUCTION
      sharing ir::I = FormatInstruction::I = DDG::I 
   ) : GLOBAL_SCHEDULER_DDG_VIEWER =
pkg

   package ir  = IR
   package ddg = DDG
   package i   = DDG::I
   package l   = graph_layout

   edgeColor = l::COLOR "red"

   i2s = int::to_string


   fun view IR ddg =
   let regmap = ir::control_flow_graph::regmap IR
       to_string = FormatInstruction::to_string [] (i::c::lookup regmap)
   in  graph_viewer::view 
         (graph_layout::makeLayout
           { graph = fn _ => [],
            node  = fn (_, DDG::NODE { instruction, b, ... } ) => 
                         [l::LABEL("["$i2s b$"] "$to_string instruction)],
            edge  = fn (_, _, e) => [l::LABEL (DDG::edgeToString e), edgeColor]
           }
           ddg
         )
   end

end
