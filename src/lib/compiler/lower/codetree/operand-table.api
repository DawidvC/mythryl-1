
# A table for storing operands for a compilation unit.
# We give each distinct operand a unique (negative) value number.

api OPERAND_TABLE =
api

   package i:  Instruction_Set

   type operandTable
   type valueNumber = i::C.cell

   enum const =
     INT of Int                        #  small integer operand 
   | INTINF of machine_int::machine_int  #  large integer operand 
   | OPERAND of i::operand              #  other operand 

   enum valueNumberMethods =
      VALUE_NUMBERING of
      { int:      Int -> valueNumber,
        word:     word -> valueNumber,
        word32:   unt32::word -> valueNumber,
        int32:    int32::Int -> valueNumber,
        intinf:   integer::Int -> valueNumber,
        operand:  i::operand -> valueNumber
      }

   exception NoOperand
   exception NoInt
   exception NoIntInf
   exception NoConst

   #  Special values 
   my bot:       valueNumber
   my top:       valueNumber
   my volatile:  valueNumber

   #  Create a new table 
   my create:   Ref( Int ) -> operandTable 

   #  Lookup methods 

   #  Value number -> int/operand/label 
   my const:        valueNumber -> const
   my int:          operandTable -> Int -> valueNumber
   my word:         operandTable -> word -> valueNumber
   my int32:        operandTable -> int32::Int -> valueNumber
   my word32:       operandTable -> unt32::word -> valueNumber
   my intinf:       operandTable -> integer::Int -> valueNumber
   my operand:      operandTable -> i::operand -> valueNumber

   #  Create new value numbers 
   my makeNewValueNumbers:  operandTable -> valueNumberMethods

   #  Look up but don't create 
   my lookupValueNumbers:  operandTable -> valueNumberMethods


end
