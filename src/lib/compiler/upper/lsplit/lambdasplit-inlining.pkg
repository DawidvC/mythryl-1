## lambdasplit-inlining.pkg

# Compiled by:
#     src/lib/compiler/core.make6


api Lambdasplit_Inlining {

     Highcode_Prog = anormal::Program;
     Picklehash    = picklehash::Picklehash;

     Import_Tree = import_tree::Import_Tree;
     Import      = (Picklehash, Import_Tree);

     Inlining_Table = inlining_table::Dictionary;

     inline:  (Highcode_Prog,
               List( Import ),
               Inlining_Table)
           -> (Highcode_Prog,
               List( Import ));
};



###            "Young man, in mathematics
###             you don't understand things,
###             you just get used to them."
###
###                    -- Johnny von Neuman
###                       (1903-1957 Hungarian/US
###                        mathematician and scientist)



package lambdasplit_inlining: Lambdasplit_Inlining {		# Lambdasplit_Inlining	is from   src/lib/compiler/upper/lsplit/lambdasplit-inlining.pkg

    Highcode_Prog = anormal::Program;
    Picklehash    = picklehash::Picklehash;

    Import_Tree == import_tree::Import_Tree;

    Import         = (Picklehash, Import_Tree);
    Inlining_Table = inlining_table::Dictionary;

    package lk= highcode_guts;			# highcode_guts		is from   src/lib/compiler/upper/highcode/highcode-guts.pkg
    package lv= highcode_var;			# highcode_var		is from   src/lib/compiler/upper/highcode/highcode-var.pkg
    package f= anormal;				# anormal		is from   src/lib/compiler/upper/anormal/anormal.pkg
    package fu= anormal_stuff;			# anormal_stuff		is from   src/lib/compiler/upper/anormal/anormal-stuff.pkg

    fun bug s
        =
        error_message::impossible ("LSplitInline: " + s);

    fun inline0 (
           (    main_fkind,
                main_lvar,
                [   (main_arg_lvar, main_arg_lty)   ],
                main_body
           ),
	   old_imports,
           inlining_table
        )
        =>
	{   import_types  =  case (lk::lambda_type_project  main_arg_lty)
		                        lk::FNTYPE_PACKAGE it => it;
		                      _ => bug "non-package arg to comp-unit";
                             esac;

	    new_arg_lvar  =   lv::make_highcode_variable ();
	    symbol_lookup =   inlining_table::get inlining_table;


	    fun count (IMPORT_TREE_NODE [])
                    =>
                    1;

	        count (IMPORT_TREE_NODE l)  => fold_left (fn ((_, t), n)
		    =>
		    count t + n; end ) 0 l;
            end;


	    fun select_hdr (highcode_var, import_tree, rvarlist)
                =
		one_node (highcode_var, import_tree, fn e = e, rvarlist)
                where
                    fun one_node (highcode_var, IMPORT_TREE_NODE [], h, r)
			    =>
			    (   h,
				highcode_var ! r
			    );

		        one_node (highcode_var, IMPORT_TREE_NODE  l, h, r)
			    =>
			    {
				fun one_branch ((s, import_tree), (h, r))
				    =
				    { highcode_var'  = lv::make_highcode_variable ();

					my (h, r)      = one_node (highcode_var', import_tree, h, r);

					(   fn e => f::SELECT (   f::VAR highcode_var,
								 s,
								 highcode_var',
								 h e
							     ); end ,
					    r
					);
				    };

				fold_left one_branch (h, r) l;
			    };
                    end;
		end;

	    # build: ( imports,
            #          types,
            #          offset,
            #          vars
            #        )
            #        ->
            #        ( types,                      # new typelist   
            #          imports                     # new imports
            #          Lambda_Expression           # new body
	    #        )
	    #
	    fun build ([], [], _, rvarlist)
		    =>
		    ( [],
		      [],
		      f::RECORD ( f::RK_STRUCT,
				  reverse (map f::VAR rvarlist),
				  main_arg_lvar,
				  main_body
			         )
		    );

	        build ([], _, _, _)
                    =>
                    bug "build mismatch: too many types";

	        build ((an_import as (pid, tree)) ! more_imports, typelist, i, rvarlist)
		    =>
		    {
			leaf_count = count tree;

			case (null_or::map fu::copyfdec (symbol_lookup pid))

			     NULL
				 =>
				 {
				     fun h (0, typelist, i, rvarlist)
					     =>
					     build (more_imports, typelist, i, rvarlist);

					 h (n, type ! typelist, i, rvarlist)
					     =>
					     {
						 rv = lv::make_highcode_variable ();

						 my (typelist, imports, body)
						     =
						     h (n - 1, typelist, i + 1, rv ! rvarlist);

						 (   type ! typelist,
						     imports,
						     f::SELECT (f::VAR new_arg_lvar, i, rv, body)
						 );
					     };

					 h _ => bug "build mismatch: too few types";
				     end;

				     my (typelist, imports, body)
					 =
					 h (leaf_count, typelist, i, rvarlist);

				     (   typelist,
					 an_import ! imports,
					 body
				     );
				 };

			     THE (f as (fk, fv, [(arg_var, arg_type)], b))
				 =>
				 {
				     #  control_print::say "hello\n" 
				     inlv = lv::make_highcode_variable ();
				     my (wrap_select, rvarlist) = select_hdr (inlv, tree, rvarlist);
				     my (typelist, imports, body) =
					 build (more_imports, list::drop (typelist, leaf_count), i + 1, rvarlist);

				     (arg_type ! typelist, (pid, IMPORT_TREE_NODE []) ! imports,
				      f::SELECT (f::VAR new_arg_lvar, i, arg_var,
						f::LET ([inlv], b, wrap_select body)));
				 };

			     _ => bug "bad cross-inlining argument list";
			 esac;
		    };
            end;				# fun build

	    my (new_typelist, new_imports, new_body)
                =
                build (old_imports, import_types, 0, []);

	    new_arg_lty   =   lk::lambda_type_inject (lk::FNTYPE_PACKAGE new_typelist);
	
	    (   (   main_fkind,
                    main_lvar,
                    [ (new_arg_lvar, new_arg_lty) ],
                    new_body
                ),
                new_imports
            );
	};         #  main fun inline case 

       inline0 _ => bug "bad comp-unit argument list"; end;


    fun inline args
        =
        {   my (e, i) = inline0 args;
	
	    (/* LContract::lcontract */ e, i);
	};
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
