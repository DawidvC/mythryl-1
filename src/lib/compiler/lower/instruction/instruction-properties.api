# instruction-properties.api
#
# Basic Instruction properties that must be supported on all architectures.
#
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6




api Instruction_Properties {

    package instruction_set:  Instruction_Set;		# Instruction_Set	is from   src/lib/compiler/lower/instruction/instruction-set.api

    package cells
        :
        Cells;						# Cells	is from   src/lib/compiler/lower/instruction/cells.api

    sharing instruction_set::cells == cells;

    # Classify instructions 
    #
    Kind = IK_JUMP		# Branches, including returns 
	 | IK_NOP		# No-ops 
	 | IK_INSTRUCTION	# Normal instructions 
	 | IK_COPY		# Parallel copy 
	 | IK_CALL		# Call instructions 
	 | IK_CALL_WITH_CUTS	# Call with cut edges 
	 | IK_PHI		# A phi node.    (For SSA -- static single assignment.) 
	 | IK_SINK		# A sink node.   (For SSA -- static single assignment.) 
	 | IK_SOURCE;		# A source node. (For SSA -- static single assignment.) 

    instruction_kind:   instruction_set::Instruction -> Kind;

    # Parallel moves:
    #
    move_instruction:  instruction_set::Instruction -> Bool;
    move_tmp_r:        instruction_set::Instruction -> Null_Or( cells_basis::Cell );
    move_dst_src:      instruction_set::Instruction -> (List( cells_basis::Cell ), List( cells_basis::Cell ));

    # No-op:
    #
    nop: 	   Void -> instruction_set::Instruction;

    # Jump instruction:
    #
    jump:        label::Label -> instruction_set::Instruction;

    # load immediate; must be within immed_range 
    #
    immed_range:   { lo: Int, hi: Int };
    load_immed:    { immed: Int, t: cells_basis::Cell } -> instruction_set::Instruction;
    load_operand:  { opn: instruction_set::Operand, t: cells_basis::Cell } -> instruction_set::Instruction;


    # Targets of a branch instruction 
    # precondition: instruction must be of type IK_JUMP.
    #
    Target = LABELLED  label::Label | FALLTHROUGH | ESCAPES;
    branch_targets:  instruction_set::Instruction -> List( Target );

    # Set the jump target;
    # error if not a jump instruction.  
    #
    set_jump_target:  (instruction_set::Instruction, label::Label) -> instruction_set::Instruction;

    # Set the branch target;
    # error if not a branch instruction, t=TRUE, f=FALSE case 
    #
    set_branch_targets:  { i: instruction_set::Instruction, t: label::Label, f: label::Label } -> instruction_set::Instruction;

    # Equality and hashing on operands:
    #
    eq_opn:       (instruction_set::Operand, instruction_set::Operand) -> Bool;
    hash_opn:     instruction_set::Operand -> Unt;

    # Given a conditional jump instruction and label, return a conditional
    # jump that has the complimentary condition and that targets the given
    # label.  If the given instruction is not a conditional jump, then
    # the NEGATE_CONDITIONAL exception is raised.
    #
    exception NEGATE_CONDITIONAL;
    negate_conditional:  ((instruction_set::Instruction, label::Label)) -> instruction_set::Instruction;

    # Def/use ("definition/use")
    # for the register allocator:
    #
    def_use
        :
	cells_basis::Cellkind
        -> 
	instruction_set::Instruction
	->
	( List( cells_basis::Cell ),
          List( cells_basis::Cell )
        );

    # Annotations:
    #
    get_notes
	:
	instruction_set::Instruction
	->
	( instruction_set::Instruction,
          List( note::Note )
        );

    annotate
	:
	( instruction_set::Instruction,
	  note::Note
	)
	->
	instruction_set::Instruction;

    replicate
	:
	instruction_set::Instruction
	->
	instruction_set::Instruction;
};


## Changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
