## win32-text-primitive-io.pkg
## COPYRIGHT (c) 1995 AT&T Bell Laboratories. 



# This implements the Win32 version of the OS specific text primitive
# IO package.  It is implemented by a trivial translation of the
# binary operations (see win32-binary-primitive-io.pkg).



package Win32TextPrimIO:  api

    include Os_Primitive_IO

    my stdin:   Void -> primitive_io::Reader
    my stdout:  Void -> primitive_io::Writer
    my stderr:  Void -> primitive_io::Writer

    my string_reader:  String -> primitive_io::Reader

  end
{

    package md = maildrop
    package binary_primitive_io = Win32BinPrimIO
    package primitive_io = text_primitive_io

    package W32FS = Win32::file_system
    package W32IO = Win32::IO
    package W32G = Win32::general

    package v = unt8_vector
	
    type File_Descriptor = W32G::hndl

    bufferSzB = 4096

 /* If char::char is really unt8::word, then very efficient versions of
  * translateIn and translateOut are possible:
  */
    my translateIn:  binary_primitive_io::primitive_io::Reader -> primitive_io::Reader = unsafe::cast
    my translateOut: binary_primitive_io::primitive_io::Writer -> primitive_io::Writer = unsafe::cast

    fun openRd fname = translateIn (binary_primitive_io::openRd fname)
    fun openWr fname = translateOut (binary_primitive_io::openWr fname)
    fun openApp fname = translateOut (binary_primitive_io::openApp fname)

    fun mkReader args = translateIn (binary_primitive_io::mkReader args)
    fun mkWriter args = translateOut (binary_primitive_io::mkWriter args)

    fun stdin () = let
	  h = W32IO::getStdHandle (W32IO::STD_INPUT_HANDLE)
	  in
	    if W32G::isValidHandle h
	      then mkReader { fd = h, name = "<stdin>"}
	      else raise exception winix::SYSTEM_ERROR("Win32TextPrimIO: can't get stdin", NULL)
	  end
    
    fun stdout () = let
	  h = W32IO::getStdHandle (W32IO::STD_OUTPUT_HANDLE)
	  in
	    if W32G::isValidHandle h
	      then mkWriter {
		  fd = h,
		  name = "<stdout>",
		  appendMode = TRUE,
		  chunkSize = bufferSzB
		}
	      else raise exception winix::SYSTEM_ERROR("Win32TextPrimIO: can't get stdout", NULL)
	  end
    
    fun stderr () = let
	  h = W32IO::getStdHandle (W32IO::STD_ERROR_HANDLE)
	  in
	    if W32G::isValidHandle h
	      then mkWriter {
		  fd = h,
		  name = "<stderr>",
		  appendMode = TRUE,
		  chunkSize = bufferSzB
		}
	      else raise exception winix::SYSTEM_ERROR("Win32TextPrimIO: can't get stderr", NULL)
	  end
    
    fun string_reader src = let
	  lockMV = md::mVarInit()
	  fun withLock f x = (
		md::mTake lockMV;
		f x before md::mPut (lockMV, ()))
		  except ex => (md::mPut (lockMV, ()); raise exception ex)
	  pos = REF 0
	  closed = REF FALSE
	  fun checkClosed () = if *closed then raise exception io::CLOSED_IO_STREAM else ()
	  len = string::size src
	  fun avail () = (len - *pos)
	  fun readV n = let
		p = *pos
		m = int::min (n, len-p)
		in
		  checkClosed ();
		  pos := p+m;
# * NOTE: could use unchecked operations here *
		  string::substring (src, p, m)
		end
	  fun readA asl = let
	      my (buf, i, n) = rw_char_vector_slice::base asl
		p = *pos
		m = int::min (n, len-p)
		in
		  checkClosed ();
		  pos := p+m;
		  rw_char_vector_slice::copyVec { src = char_vector_slice::slice 
						     (src, p, THE len),
					   dst = buf, di = i };
		  m
		end
	  fun getPos () = (checkClosed(); *pos)
	  in
	      primitive_io::RD {
		name        = "<string>", 
		chunkSize   = len,
		readVec     = withLock readV,
        	readArr     = withLock readA,
		readVecEvt  = withLock (threadkit::alwaysEvt o readV),
		readArrEvt  = withLock (threadkit::alwaysEvt o readA),
		avail       = THE o avail,
		getPos      = THE (withLock getPos),
		setPos	    = THE (withLock (fn i => (
				checkClosed();
				if (i < 0) or (len < i)
				  then raise exception SUBSCRIPT
				  
				pos := i))),
        	endPos      = THE (withLock (fn () => (checkClosed(); len))),
		verifyPos   = THE (withLock getPos),
		close       = withLock (fn () => closed := TRUE),
		ioDesc      = NULL
	      }
	  end

};		#  Win32TextPrimIO 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
