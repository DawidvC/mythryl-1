## symbol-table-dictionary.api 

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# Implementation for the eight individual subtables
# of the symbol table (one per namespace).
#
# The core implementation* datastructure is a conventional
# rw_vector-of-bucketchains hashtable.
#
# These hashtables then get layered, one per lexical scope.
#
# For more on the symbol table generally,
# see the OVERVIEW section in:
#
#     compiler/typecheck-stuff/symbol-table/symboltable.sml



api Symbol_Table_Dictionary {

    Symbol_Table_Dictionary( Y );
    exception UNBOUND;  

    empty: Symbol_Table_Dictionary(  Y );
    get: (Symbol_Table_Dictionary( Y ), symbol::Symbol) -> Y;
    bind: (symbol::Symbol, Y, Symbol_Table_Dictionary( Y )) -> Symbol_Table_Dictionary( Y );

    special: ((symbol::Symbol -> Y), (Void -> List( symbol::Symbol ) )) -> Symbol_Table_Dictionary( Y );

    atop: (Symbol_Table_Dictionary( Y ), Symbol_Table_Dictionary( Y )) -> Symbol_Table_Dictionary( Y );
	#  Atop (e1, e2): place e1 on top of e2 

    consolidate: Symbol_Table_Dictionary( Y ) -> Symbol_Table_Dictionary( Y );
    consolidate_lazy: Symbol_Table_Dictionary( Y ) -> Symbol_Table_Dictionary( Y );
    apply: ((symbol::Symbol, Y) -> Void) -> Symbol_Table_Dictionary( Y ) -> Void;
    map: (Y -> Y) -> Symbol_Table_Dictionary( Y ) -> Symbol_Table_Dictionary( Y );
    fold: ((((symbol::Symbol, Y)), X) -> X) -> X -> Symbol_Table_Dictionary( Y ) -> X;

    symbols:  Symbol_Table_Dictionary( Y ) -> List( symbol::Symbol );
				  #  may contain duplicate symbols 

}; #  Api SYMBOL_TABLE_DICTIONARY 


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
