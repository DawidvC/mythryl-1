## ppc-codetree.pkg

# Compiled by:
#     src/lib/compiler/backend-ppc.make6

package ppccodetree
    = 
    codetree_g (							# codetree_g			is from   src/lib/compiler/lower/codetree/codetree-g.pkg
        package constant= lib7constant;					# lib7constant			is from   src/lib/compiler/codegen/compile-fps/lib7-const.pkg
	package region= cpsregions;					# cpsregions			is from   src/lib/compiler/codegen/compile-fps/fps-regions.pkg
	package extension= lib7codetree_ext;				# lib7codetree_ext		is from   src/lib/compiler/codegen/compile-fps/lib7-codetreeext.pkg
    );

package ppccodetree_eval
    =
    codetree_eval_g (							# codetree_eval_g		is from   src/lib/compiler/lower/codetree/codetree-eval-g.pkg
        package codetree = ppccodetree;					# ppccodetree			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	fun eq _ _ =  FALSE;
        eq_rext = eq;
	eq_fext = eq;
        eq_ccext = eq;
	eq_sext = eq;
    );
					    
package ppccodetree_hash
    = 
    codetree_hash_g (							# codetree_hash_g		is from   src/lib/compiler/lower/codetree/codetree-hash-g.pkg
        package codetree = ppccodetree;
        fun h _ _ = 0u0;
        hash_rext = h;	hash_fext = h;
        hash_ccext = h;       hash_sext = h;
    );

package ppcgas_pseudo_ops
    =
    ppc_gas_pseudo_op_g (
        package codetree      =  ppccodetree;
	package codetree_eval =  ppccodetree_eval;			# ppccodetree_eval		is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
    );

package ppcclient_pseudo_ops
    =
    lib7_pseudo_op_g (							# lib7_pseudo_op_g		is from   src/lib/compiler/codegen/compile-fps/lib7-pseudo-ops-g.pkg
        package asm = ppcgas_pseudo_ops;
    );

package ppcpseudo_ops
    =
    pseudo_op_g (							# pseudo_op_g			is from   src/lib/compiler/lower/flowgraph/pseudo-op-g.pkg
        package client = ppcclient_pseudo_ops;
    );
	      
package ppcstream
    =
    instruction_stream_g (						# instruction_stream_g		is from   src/lib/compiler/lower/instruction/instruction-stream-g.pkg
	ppcpseudo_ops
    );

package ppccodetree_stream
    = 
    codetree_stream_g (							# codetree_stream_g		is from   src/lib/compiler/lower/codetree/codetree-stream-g.pkg
        package codetree           = ppccodetree;			# ppccodetree			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
        package instruction_stream = ppcstream;				# ppcstream			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
    );

# Specialized powerpc instruction set 
#
package instruction_set_ppc
    =
    instruction_set_ppc_g (						# instruction_set_ppc_g		is from   src/lib/compiler/lower/ppc/instruction/instruction-set-ppc-g.pkg
	ppccodetree
    );

package ppcprops
    = 
    ppc_instruction_properties_g (					# ppc_instruction_properties_g	is from   src/lib/compiler/lower/ppc/instruction/ppc-instruction-properties-g.pkg
	package instruction_set = instruction_set_ppc;
	package codetree_eval   = ppccodetree_eval;			# ppccodetree_eval		is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package codetree_hash   = ppccodetree_hash;			# ppccodetree_hash		is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
    );

package ppcshuffle
    =
    ppc_shuffle_g (
	instruction_set_ppc
    );


package ppcasm_emitter
    =
    ppc_asm_emitter_g (							# ppc_asm_emitter_g		is from   src/lib/compiler/lower/ppc/emit/ppc-asm.pkg
	package instruction_set = instruction_set_ppc;
	package pseudo_op = ppcpseudo_ops;  
	package instruction_stream = ppcstream;				# ppcstream			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package codetree_eval= ppccodetree_eval;			# ppccodetree_eval		is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package shuffle = ppcshuffle;
    );

package ppcmcemitter
    = 
    translate_ppc_to_ppc_machine_code_g (					# translate_ppc_to_ppc_machine_code_g	is from   src/lib/compiler/lower/ppc/emit/translate-ppc-to-ppc-machine-code-g.pkg
	package instruction_set = instruction_set_ppc;
	package pseudo_op= ppcpseudo_ops;				# ppcpseudo_ops			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package instruction_stream = ppcstream;				# ppcstream			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package codetree_eval= ppccodetree_eval;			# ppccodetree_eval		is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package code_string = code_string;
    );

#  Flowgraph data package specialized to ppc instructions 
#
package ppccfg
    = 
    control_flow_graph_g (						# control_flow_graph_g		is from   src/lib/compiler/lower/flowgraph/control-flow-graph-g.pkg
        package instruction_set = instruction_set_ppc;			# instruction_set_ppc		is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package pseudo_op= ppcpseudo_ops;				# ppcpseudo_ops			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package graph_guts= directed_graph;				# directed_graph		is from   src/lib/graph/directed-graph.pkg
	package instruction_properties= ppcprops;			# ppcprops			is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
	package asm= ppcasm_emitter;					# ppcasm_emitter		is from   src/lib/compiler/codegen/ppc/ppc-codetree.pkg
    );



##  COPYRIGHT (c) 1999 Lucent Technologies, Bell Labs. 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
