#  example-start notebook notebook.c 

local 
   use C Gtk gtk_enums 

   #  This function rotates the position of the tabs 
   fun rotate_book notebook button =
       gtk_notebook_set_tab_pos::f (notebook, 
         ml_gtk_position_type
         ((int32::from_int(
              unt32::toInt (GtkNotebook::get'tab_pos notebook)) + 1) mod 4))

   #  Add/Remove the page tabs and the borders 
   fun tabsborder_book notebook button =
   let tval = REF FALSE
       bval = REF FALSE
   in  if GtkNotebook::get'show_tabs notebook then tval := TRUE 
       if GtkNotebook::get'show_border notebook then bval := TRUE 
       gtk_notebook_set_show_tabs::f (notebook, *tval);
       gtk_notebook_set_show_border::f (notebook, *bval)
   end

   #  Remove a page from the notebook 
   fun remove_book notebook button = 
   let page = gtk_notebook_get_current_page::f notebook
   in  gtk_notebook_remove_page::f (notebook, page);
       /* Need to refresh the widget -- 
         This forces the widget to redraw itself. */
       gtk_widget_queue_draw::f notebook
   end

   fun delete (widget, event) = (gtk_main_quit::f(); FALSE)

in

   fun main (prog, argv) = 
   let gtk_init::f (prog . argv)
    
       window = gtk_window_new::f GTK_WINDOW_TOPLEVEL
    
       gtk_event_connect::f (window, "delete_event", delete)
    
       gtk_container_set_border_width::f (window, 0w10)

       table = gtk_table_new::f (0w3, 0w6, FALSE)
       gtk_container_add::f (window, table)
    
       #  Create a new notebook, place the position of the tabs 
       notebook = gtk_notebook_new::f ()
       gtk_notebook_set_tab_pos::f (notebook, GTK_POS_TOP)
       gtk_table_attach_defaults::f (table, notebook, 0w0, 0w6, 0w0, 0w1)
       gtk_widget_show::f notebook
    
       #  Let's append a bunch of pages to the notebook 
       fun appendPages i = 
       if i < 5 then 
       let bufferf = "Append Frame "$int::to_string (i+1)
           bufferl = "Page "$int::to_string (i+1)
           frame   = gtk_frame_new::f bufferf
           gtk_container_set_border_width::f (frame, 0w10)
           gtk_widget_set_usize::f (frame, 100, 75)
           gtk_widget_show::f frame
        
           label   = gtk_label_new::f bufferf
           gtk_container_add::f (frame, label)
           gtk_widget_show::f label
        
           label   = gtk_label_new::f bufferl
           gtk_notebook_append_page::f (notebook, frame, label)
       in  appendPages (i+1)
       end
       else ()

       appendPages 0
      
       #  Now let's add a page to a specific spot 
       checkbutton = gtk_check_button_new_with_label::f "Check me please!"
       gtk_widget_set_usize::f (checkbutton, 100, 75)
       gtk_widget_show::f checkbutton
   
       label       = gtk_label_new::f "Add page"
       gtk_notebook_insert_page::f 
                             (notebook, checkbutton, label, 2)
    
       #  Now finally let's prepend pages to the notebook 
       fun prependPages i = 
       if i < 5 then
       let bufferf = "Prepend Frame "$int::to_string (i+1)
           bufferl = "PPage "$int::to_string (i+1)
           frame   = gtk_frame_new::f bufferf
           gtk_container_set_border_width::f (frame, 0w10)
           gtk_widget_set_usize::f (frame, 100, 75)
           gtk_widget_show::f frame
        
           label   = gtk_label_new::f bufferf
           gtk_container_add::f (frame, label)
           gtk_widget_show::f label
        
           label   = gtk_label_new::f bufferl
           gtk_notebook_prepend_page::f (notebook, frame, label)
       in  prependPages (i+1)
       end
       else ()
       prependPages 0
    
       #  Set what page to start at (page 4) 
       gtk_notebook_set_page::f (notebook, 3)

       #  Create a bunch of buttons 
       button = gtk_button_new_with_label::f "close"
       gtk_signal_connect::f (button, "clicked", 
                                                fn _ => gtk_main_quit::f ())
       gtk_table_attach_defaults::f (table, button, 0w0, 0w1, 0w1, 0w2)
       gtk_widget_show::f button
    
       button = gtk_button_new_with_label::f "next page"
       gtk_signal_connect::f (button, "clicked",
                                   fn _ => gtk_notebook_next_page::f notebook)
       gtk_table_attach_defaults::f (table, button, 0w1, 0w2, 0w1, 0w2)
       gtk_widget_show::f button
    
       button = gtk_button_new_with_label::f "prev page"
       gtk_signal_connect::f (button, "clicked",
                                    fn _ => gtk_notebook_prev_page::f notebook)
       gtk_table_attach_defaults::f (table, button, 0w2, 0w3, 0w1, 0w2)
       gtk_widget_show::f button
    
       button = gtk_button_new_with_label::f "tab position"
       gtk_signal_connect::f (button, "clicked",
                                          rotate_book notebook)
       gtk_table_attach_defaults::f (table, button, 0w3, 0w4, 0w1, 0w2)
       gtk_widget_show::f button
    
       button = gtk_button_new_with_label::f "tabs/border on/off"
       gtk_signal_connect::f (button, "clicked",
                                          tabsborder_book notebook)
       gtk_table_attach_defaults::f (table, button, 0w4, 0w5, 0w1, 0w2)
       gtk_widget_show::f button
    
       button = gtk_button_new_with_label::f "remove page"
       gtk_signal_connect::f (button, "clicked",
                                          remove_book notebook)
       gtk_table_attach_defaults::f (table, button, 0w5, 0w6, 0w1, 0w2)
       gtk_widget_show::f button
    
       gtk_widget_show::f table
       gtk_widget_show::f window
    
    in gtk_main::f ();
       0
    end
end #  local 
#  example-end 
