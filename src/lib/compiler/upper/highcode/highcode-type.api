## highcode-type.api 
#
# Here and in
#
#     src/lib/compiler/upper/highcode/highcode-type.api
#
# we implement the client-code interface to the
# hash-consed intermediate-code representation
# implemented in
#
#     src/lib/compiler/upper/highcode/highcode-guts.pkg
#
# For general context, see
#
#     src/lib/compiler/README
#
# For authoritative background see Zhong Shao's PhD thesis:
#
#     Compiling Standard ML for Efficient Execution on Modern Machines
#     http://flint.cs.yale.edu/flint/publications/zsh-thesis.html
#
# Here we implement what his thesis calls LTY ("LEXP types").
#
# These type representations are used in all
# three of the intermediate code representations
# used in the upper half, namely polylambda, A-Normal
# and FPS (fate passing style):
#
#     src/lib/compiler/upper/anormal/anormal.pkg
#     src/lib/compiler/upper/polylambda/polylambda.pkg
#     src/lib/compiler/upper/fps/fate-passing-style.api
#
# This interface hides the implementation details of highcode
# Highcode_Kind, Highcode_Type_Constructor, and Highcode_Type defined inside
# highcode_guts.  The main point of this is to shield our code
# clients from the complexity of the hash-consing which we 
# implement in
#
#     src/lib/compiler/upper/highcode/highcode-guts.pkg
#
# For each entity, we provide a series of constructor functions,
# deconstructor functions, predicate functions, and
# functions that test equivalence and do pretty-printing.
#
# This interface should only refer to debruijn_index, highcode_guts,
# highcode_data_representation, and symbol. 

# Compiled by:
#     src/lib/compiler/core.make6



###              "Once code is decently formatted
###               and commented, often even the
###               original author can understand it."
###
###                           Wilbur Thompson

api Highcode_Type {

    # Basic entities.
 
    Index = debruijn_index::Index;
    Depth = debruijn_index::Depth;

    Primitive_Type_Constructor
        =
        highcode_data_representation::Primitive_Type_Constructor;		# highcode_data_representation	is from   src/lib/compiler/upper/highcode/highcode-data-representation.pkg

    Highcode_Variable = highcode_guts::Highcode_Variable;

    Fn_Flag       =  highcode_guts::Fn_Flag; 
    Record_Flag   =  highcode_guts::Record_Flag;

    Highcode_Kind =  highcode_guts::Highcode_Kind;
    Highcode_Type_Constructor =  highcode_guts::Highcode_Type_Constructor;
    Highcode_Type   =  highcode_guts::Highcode_Type;


    # Anormal Highcode_Kind is roughly equivalent to the following ML enum 
    #
    #    enum Highcode_Kind 
    #      = TYPEKIND_MONOMORPHIC_TYPE_CONSTRUCTOR 
    #      | TYPEKIND_BOXED_TYPE_CONSTRUCTOR
    #      | TYPEKIND_TYPE_CONSTRUCTOR_SEQUENCE of List Highcode_Kind
    #      | TYPEKIND_TYPE_CONSTRUCTOR_FUNCTION of Highcode_Kind * Highcode_Kind
    #
    # We treat Highcode_Kind as an abstract type,
    # so unfortunately we cannot use pattern matching.


    # Highcode_Kind constructors
    #
    tkc_mono:    Highcode_Kind;
    tkc_box:     Highcode_Kind;
    tkc_seq:     List( Highcode_Kind )                  -> Highcode_Kind;
    tkc_fun:     (List( Highcode_Kind ), Highcode_Kind) -> Highcode_Kind;

    # Highcode_Kind deconstructors:
    #
    tkd_mono:    Highcode_Kind -> Void;
    tkd_box:     Highcode_Kind -> Void;
    tkd_seq:     Highcode_Kind -> List( Highcode_Kind );
    tkd_fun:     Highcode_Kind -> (List( Highcode_Kind ), Highcode_Kind);

    # Highcode_Kind predicates:
    #
    tkp_mono:    Highcode_Kind -> Bool;
    tkp_box:     Highcode_Kind -> Bool;
    tkp_seq:     Highcode_Kind -> Bool;
    tkp_fun:     Highcode_Kind -> Bool;

    # Highcode_Kind one-arm switch:
    #
    tkw_mono:    (Highcode_Kind, (Void -> X), (Highcode_Kind -> X)) -> X;
    tkw_box:     (Highcode_Kind, (Void -> X), (Highcode_Kind -> X)) -> X;
    tkw_seq:     (Highcode_Kind, (List( Highcode_Kind ) -> X), (Highcode_Kind -> X)) -> X;
    tkw_fun:     (Highcode_Kind, ((List( Highcode_Kind ), Highcode_Kind) -> X), (Highcode_Kind -> X)) -> X;



    # Anormal fn_flag and record_flag are used to
    # classify different kinds of monomorphic 
    # functions and records. As of now, they are
    # roughly equivalent to:
    #
    #    Fn_Flag
    #      = FNFLAG_VARIABLE (Bool, Bool)
    #      | FNFLAG_FIXED
    #      ;
    #
    #    Record_Flag = RECORDFLAG_TMP;
    #
    # We treat both as abstract types so,
    # so again we are unfortunately not
    # able to use pattern matching with them.
    #
    # NOTE: FNFLAG_VARIABLE flags are used by HIGHCODEs before we perform representation
    # analysis while FNFLAG_FIXED is used by HIGHCODEs after we perform representation
    # analysis. 


    # Fn_Flag and Record_Flag constructors:
    #
    ffc_var:     (Bool, Bool) -> Fn_Flag;
    ffc_fixed:   Fn_Flag;
    rfc_tmp:     Record_Flag;

    # fn_flag and record_flag deconstructors:
    #
    ffd_var:     Fn_Flag -> (Bool, Bool);
    ffd_fixed:   Fn_Flag -> Void;
    rfd_tmp:     Record_Flag -> Void;

    # fn_flag and record_flag predicates:
    #
    ffp_var:     Fn_Flag -> Bool;
    ffp_fixed:   Fn_Flag -> Bool;
    rfp_tmp:     Record_Flag -> Bool;

    # fn_flag and record_flag one-arm switch:
    #
    ffw_var:     (Fn_Flag, ((Bool, Bool) -> X), (Fn_Flag -> X)) -> X;
    ffw_fixed:   (Fn_Flag, (Void -> X), (Fn_Flag -> X)) -> X;
    rfw_tmp:     (Record_Flag, (Void -> X), (Record_Flag -> X)) -> X;


    # Anormal Highcode_Type_Constructor is roughly equivalent to the following ML enum 
    #
    #    Highcode_Type_Constructor
    #      = TC_VAR       (Debruijn_Index, Int)
    #      | TC_NAMED_VAR  Highcode_Variable
    #      | TC_PRIM       Primitive_Type_Constructor
    #      | TC_FN        (List( Highcode_Kind ), Highcode_Type_Constructor)
    #      | TC_APPLY     (Highcode_Type_Constructor, List( Highcode_Type_Constructor ))
    #      | TC_SEQ        List( Highcode_Type_Constructor )
    #      | TC_PROJ      (Highcode_Type_Constructor, Int)
    #      | TC_SUM        List( Highcode_Type_Constructor )
    #      | TC_RECURSIVE (Highcode_Type_Constructor, Int)
    #      | TC_WRAP       Highcode_Type_Constructor                   #  used after rep. analysis only 
    #      | TC_ABSTRACT   Highcode_Type_Constructor                   #  NOT USED 
    #      | TC_BOXED      Highcode_Type_Constructor                   #  NOT USED 
    #      | TC_TUPLE      List( Highcode_Type_Constructor )           #  record_flag hidden 
    #      | TC_ARROW     (Fn_Flag, List( Highcode_Type_Constructor ), List( Highcode_Type_Constructor ))
    #
    # We treat Highcode_Type_Constructor as an abstract type
    # so yet again we cannot use pattern matching.
    #
    # Type applications (TC_APPLY) and projections 
    # (TC_PROJ) are automatically reduced as needed:
    # the client does not need to worry about whether
    # a Highcode_Type_Constructor is in the normal form or not,
    # all functions defined here automatically 
    # take care of this.


    # Our Type constructors:
    #
    tcc_var:    (Index, Int)                                             -> Highcode_Type_Constructor;
    tcc_nvar:    Highcode_Variable                                       -> Highcode_Type_Constructor;
    tcc_prim:    Primitive_Type_Constructor                              -> Highcode_Type_Constructor;
    tcc_g:      (List( Highcode_Kind ), Highcode_Type_Constructor)                   -> Highcode_Type_Constructor;
    tcc_app:    (Highcode_Type_Constructor, List( Highcode_Type_Constructor ))                   -> Highcode_Type_Constructor;
    tcc_seq:     List( Highcode_Type_Constructor )                                   -> Highcode_Type_Constructor;
    tcc_proj:   (Highcode_Type_Constructor, Int)                                     -> Highcode_Type_Constructor;
    tcc_sum:     List( Highcode_Type_Constructor )                                   -> Highcode_Type_Constructor;
    tcc_fix:     (((Int, Highcode_Type_Constructor, List( Highcode_Type_Constructor )) ), Int)   -> Highcode_Type_Constructor; 
    tcc_wrap:    Highcode_Type_Constructor                                           -> Highcode_Type_Constructor;
    tcc_abs:     Highcode_Type_Constructor                                           -> Highcode_Type_Constructor;
    tcc_box:     Highcode_Type_Constructor                                           -> Highcode_Type_Constructor;
    tcc_tuple:   List( Highcode_Type_Constructor )                                   -> Highcode_Type_Constructor;
    tcc_arrow:   (Fn_Flag, List( Highcode_Type_Constructor ), List( Highcode_Type_Constructor )) -> Highcode_Type_Constructor;

    # Our Highcode_Type_Constructor deconstructors:
    #
    tcd_var:     Highcode_Type_Constructor -> (Index, Int); 
    tcd_nvar:    Highcode_Type_Constructor -> Highcode_Variable;
    tcd_prim:    Highcode_Type_Constructor -> Primitive_Type_Constructor; 
    tcd_g:       Highcode_Type_Constructor -> (List( Highcode_Kind ), Highcode_Type_Constructor); 
    tcd_app:     Highcode_Type_Constructor -> (Highcode_Type_Constructor, List( Highcode_Type_Constructor ));
    tcd_seq:     Highcode_Type_Constructor -> List( Highcode_Type_Constructor );
    tcd_proj:    Highcode_Type_Constructor -> (Highcode_Type_Constructor, Int); 
    tcd_sum:     Highcode_Type_Constructor -> List( Highcode_Type_Constructor );
    tcd_fix:     Highcode_Type_Constructor -> (((Int, Highcode_Type_Constructor, List( Highcode_Type_Constructor )) ), Int); 
    tcd_wrap:    Highcode_Type_Constructor -> Highcode_Type_Constructor;
    tcd_abs:     Highcode_Type_Constructor -> Highcode_Type_Constructor; 
    tcd_box:     Highcode_Type_Constructor -> Highcode_Type_Constructor; 
    tcd_tuple:   Highcode_Type_Constructor -> List( Highcode_Type_Constructor ); 
    tcd_arrow:   Highcode_Type_Constructor -> (Fn_Flag, List( Highcode_Type_Constructor ), List( Highcode_Type_Constructor )); 

    # Our Highcode_Type_Constructor predicates:
    #
    tcp_var:     Highcode_Type_Constructor -> Bool;
    tcp_nvar:    Highcode_Type_Constructor -> Bool;
    tcp_prim:    Highcode_Type_Constructor -> Bool;
    tcp_g:       Highcode_Type_Constructor -> Bool;
    tcp_app:     Highcode_Type_Constructor -> Bool;
    tcp_seq:     Highcode_Type_Constructor -> Bool;
    tcp_proj:    Highcode_Type_Constructor -> Bool;
    tcp_sum:     Highcode_Type_Constructor -> Bool;
    tcp_fix:     Highcode_Type_Constructor -> Bool;
    tcp_wrap:    Highcode_Type_Constructor -> Bool;
    tcp_abs:     Highcode_Type_Constructor -> Bool;
    tcp_box:     Highcode_Type_Constructor -> Bool;
    tcp_tuple:   Highcode_Type_Constructor -> Bool;
    tcp_arrow:   Highcode_Type_Constructor -> Bool;

    # Our Highcode_Type_Constructor one-arm switch:
    #
    tcw_var:     (Highcode_Type_Constructor, ((Index, Int) -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_nvar:    (Highcode_Type_Constructor, (Highcode_Variable -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_prim:    (Highcode_Type_Constructor, (Primitive_Type_Constructor -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_fn:      (Highcode_Type_Constructor, ((List( Highcode_Kind ), Highcode_Type_Constructor) -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_app:     (Highcode_Type_Constructor, ((Highcode_Type_Constructor, List( Highcode_Type_Constructor )) -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_seq:     (Highcode_Type_Constructor, (List( Highcode_Type_Constructor ) -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_proj:    (Highcode_Type_Constructor, ((Highcode_Type_Constructor, Int) -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_sum:     (Highcode_Type_Constructor, (List( Highcode_Type_Constructor ) -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_fix:     (Highcode_Type_Constructor, ((((Int, Highcode_Type_Constructor, List( Highcode_Type_Constructor ))), Int) -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_wrap:    (Highcode_Type_Constructor, (Highcode_Type_Constructor -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_abs:     (Highcode_Type_Constructor, (Highcode_Type_Constructor -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_box:     (Highcode_Type_Constructor, (Highcode_Type_Constructor -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_tuple:   (Highcode_Type_Constructor, (List( Highcode_Type_Constructor ) -> X), (Highcode_Type_Constructor -> X)) -> X;
    tcw_arrow:   (Highcode_Type_Constructor, ((Fn_Flag, List( Highcode_Type_Constructor ), List( Highcode_Type_Constructor )) -> X),
			(Highcode_Type_Constructor -> X)) -> X;


    # Anormal Highcode_Type is roughly equivalent to the following ML enum 
    #
    #    enum Highcode_Type
    #      = FNTYPE_MONOMORPHIC_TYPE_CONSTRUCTOR of Highcode_Type_Constructor
    #      | FNTYPE_PACKAGE of List Highcode_Type
    #      | FNTYPE_GENERIC of List Highcode_Type * List Highcode_Type
    #      | FNTYPE_POLYMORPHIC of List Highcode_Kind * List Highcode_Type
    #
    # We treat Highcode_Type as an abstract type so we can no longer use pattern
    # matching. The client does not need to worry about whether an Highcode_Type
    # is in normal form or not. 


    # Highcode_Type constructors:
    #
    ltc_tyc:     Highcode_Type_Constructor -> Highcode_Type;
    ltc_str:     List( Highcode_Type ) -> Highcode_Type;
    ltc_fct:     (List( Highcode_Type ), List( Highcode_Type )) -> Highcode_Type;
    ltc_poly:    (List( Highcode_Kind ), List( Highcode_Type )) -> Highcode_Type;    

    # Highcode_Type deconstructors:
    #
    ltd_tyc:     Highcode_Type -> Highcode_Type_Constructor;
    ltd_str:     Highcode_Type -> List( Highcode_Type );
    ltd_fct:     Highcode_Type -> (List( Highcode_Type ), List( Highcode_Type ));
    ltd_poly:    Highcode_Type -> (List( Highcode_Kind ), List( Highcode_Type ));

    # Highcode_Type predicates:
    #
    ltp_tyc:     Highcode_Type -> Bool;
    ltp_str:     Highcode_Type -> Bool;
    ltp_fct:     Highcode_Type -> Bool;
    ltp_poly:    Highcode_Type -> Bool;

    # Highcode_Type one arm switches:
    #
    ltw_tyc:     (Highcode_Type, (Highcode_Type_Constructor -> X), (Highcode_Type -> X)) -> X;
    ltw_str:     (Highcode_Type, (List( Highcode_Type ) -> X), (Highcode_Type -> X)) -> X;
    ltw_fct:     (Highcode_Type, ((List( Highcode_Type ), List( Highcode_Type )) -> X), (Highcode_Type -> X)) -> X;
    ltw_poly:    (Highcode_Type, ((List( Highcode_Kind ), List( Highcode_Type )) -> X), (Highcode_Type -> X)) -> X;


    # Because highcode Highcode_Type_Constructor is embedded inside highcode Highcode_Type, we supply the
    # the following utility functions on building ltys that are based
    # on simple mono tycs.

    # Highcode_Type_Constructor-Highcode_Type constructors:
    #
    ltc_var:     (Index, Int) -> Highcode_Type;
    ltc_prim:    Primitive_Type_Constructor -> Highcode_Type;
    ltc_tuple:   List( Highcode_Type ) -> Highcode_Type;
    ltc_arrow:   (Fn_Flag, List( Highcode_Type ), List( Highcode_Type )) -> Highcode_Type;

    # Highcode_Type_Constructor-Highcode_Type deconstructors:
    #
    ltd_var:     Highcode_Type -> (Index, Int);
    ltd_prim:    Highcode_Type -> Primitive_Type_Constructor;
    ltd_tuple:   Highcode_Type -> List( Highcode_Type );
    ltd_arrow:   Highcode_Type -> (Fn_Flag, List( Highcode_Type ), List( Highcode_Type ));

    # Highcode_Type_Constructor-Highcode_Type predicates:
    #
    ltp_var:     Highcode_Type -> Bool;
    ltp_prim:    Highcode_Type -> Bool;
    ltp_tuple:   Highcode_Type -> Bool;
    ltp_arrow:   Highcode_Type -> Bool;

    # Highcode_Type_Constructor-Highcode_Type one-arm switches:
    #
    ltw_var:     (Highcode_Type, ((Index, Int) -> X), (Highcode_Type -> X)) -> X;
    ltw_prim:    (Highcode_Type, (Primitive_Type_Constructor -> X), (Highcode_Type -> X)) -> X;
    ltw_tuple:   (Highcode_Type, (List( Highcode_Type_Constructor ) -> X), (Highcode_Type -> X)) -> X;
    ltw_arrow:   (Highcode_Type, ((Fn_Flag, List( Highcode_Type_Constructor ), List( Highcode_Type_Constructor )) -> X), 
			 (Highcode_Type -> X)) -> X;


    # The following functions are written for FPS only. If you are writing
    # code for highcode, you should not use any of these functions. 
    # The fate referred here is the internal fate introduced
    # via FPS conversion; it is different from the source-level fate 
    # (X Fate) or control fate (X control-fate) where are represented 
    # as xt::primTypeCon_fate and xt::primTypeCon_control_fate respectively. 


    # fate-Highcode_Type_Constructor-Highcode_Type constructors:
    #
    tcc_cont:    List( Highcode_Type_Constructor ) -> Highcode_Type_Constructor;      
    ltc_cont:    List( Highcode_Type ) -> Highcode_Type;                

    # fate-Highcode_Type_Constructor-Highcode_Type deconstructors 
    #
    tcd_cont:    Highcode_Type_Constructor -> List( Highcode_Type_Constructor );      
    ltd_cont:    Highcode_Type -> List( Highcode_Type );        

    # fate-Highcode_Type_Constructor-Highcode_Type predicates 
    #
    tcp_cont:    Highcode_Type_Constructor -> Bool;          
    ltp_cont:    Highcode_Type -> Bool;            

    # fate-Highcode_Type_Constructor-Highcode_Type one-arm switches
    #
    tcw_cont:    (Highcode_Type_Constructor, (List( Highcode_Type_Constructor ) -> X), (Highcode_Type_Constructor -> X)) -> X;
    ltw_cont:    (Highcode_Type, (List( Highcode_Type ) -> X), (Highcode_Type -> X)) -> X;


    # The following functions are written for polylambda_type only. If you
    # are writing code for highcode only, don't use any of these functions. 
    # The idea is that in polylambda, all (value or type) functions have single
    # argument and single return-result. Ideally, we should define 
    # another sets of datatypes for tycs and ltys. But we want to avoid
    # the translation from polylambda_type to highcode types, so we let them
    # share the same representations as much as possible. 
    #
    # Ultimately, highcode_type should be separated into two files: one for 
    # highcode, another for polylambda, but we will see if this is necessary.


    # polylambda Highcode_Type_Constructor-Highcode_Type constructors:
    #
    tcc_parrow:  (Highcode_Type_Constructor, Highcode_Type_Constructor) -> Highcode_Type_Constructor;     
    ltc_parrow:  (Highcode_Type, Highcode_Type) -> Highcode_Type;
    ltc_ppoly:   (List( Highcode_Kind ), Highcode_Type) -> Highcode_Type;  
    ltc_pfct:    (Highcode_Type, Highcode_Type) -> Highcode_Type;         

    # polylambda Highcode_Type_Constructor-Highcode_Type deconstructors:
    #
    tcd_parrow:  Highcode_Type_Constructor -> (Highcode_Type_Constructor, Highcode_Type_Constructor);
    ltd_parrow:  Highcode_Type -> (Highcode_Type, Highcode_Type);    
    ltd_ppoly:   Highcode_Type -> (List( Highcode_Kind ), Highcode_Type);
    ltd_pfct:    Highcode_Type -> (Highcode_Type, Highcode_Type);       

    # polylambda Highcode_Type_Constructor-Highcode_Type predicates:
    #
    tcp_parrow:  Highcode_Type_Constructor -> Bool;          
    ltp_parrow:  Highcode_Type -> Bool;
    ltp_ppoly:   Highcode_Type -> Bool;
    ltp_pfct:    Highcode_Type -> Bool;            

    # polylambda Highcode_Type_Constructor-Highcode_Type one-arm switches:
    #
    tcw_parrow:  (Highcode_Type_Constructor, ((Highcode_Type_Constructor, Highcode_Type_Constructor) -> X), (Highcode_Type_Constructor -> X)) -> X;
    ltw_parrow:  (Highcode_Type, ((Highcode_Type_Constructor, Highcode_Type_Constructor) -> X), (Highcode_Type -> X)) -> X;
    ltw_ppoly:   (Highcode_Type, ((List( Highcode_Kind ), Highcode_Type) -> X), (Highcode_Type -> X)) -> X;
    ltw_pfct:    (Highcode_Type, ((Highcode_Type, Highcode_Type) -> X), (Highcode_Type -> X)) -> X;

};


## Copyright (c) 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
