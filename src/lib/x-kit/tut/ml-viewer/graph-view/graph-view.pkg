## graph-view.pkg
#

# Compiled by:
#     src/lib/x-kit/tut/ml-viewer/ml-viewer.make6

# This package gets used in:
#     src/lib/x-kit/tut/ml-viewer/main/main.pkg 

stipulate
    include threadkit;				# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    include xgeometry;				# xgeometry		is from   src/lib/x-kit/xclient/xgeometry.pkg

    package v   =  graph_viewer;
    package vg  =  planar_subgraph_tree;
    package b   =  border;
    package sb  =  scrollbar;			# scrollbar		is from   src/lib/x-kit/widget/leaf/scrollbar.pkg
    package sbl =  widget_with_scrollbars;
    package w   =  widget;			# widget		is from   src/lib/x-kit/widget/basic/widget.pkg
    package vf  =  view_font;
    package lw  =  line_of_widgets;		# line_of_widgets	is from   src/lib/x-kit/widget/layout/line-of-widgets.pkg
    package xc  =  xcore;			# xcore			is from   src/lib/x-kit/xclient/src/api/xkit-lib-external-interface.pkg

						# graph_viewer		is from   src/lib/x-kit/tut/ml-viewer/graph-view/graph-viewer.pkg
						# planar_subgraph_tree	is from   src/lib/x-kit/tut/ml-viewer/graph-view/planar-subgraph-tree.pkg
herein

    package graph_view:  Graph_View {		# Graph_View		is from   src/lib/x-kit/tut/ml-viewer/graph-view/graph-view.api


	View = VIEW { widget:  w::Widget,
		      viewer:  v::Graph_Viewer
		    };

	Vport = { min:    Int,
		  size:   Int,
		  total:  Int
		};

	State = (Vport, Vport);

	scroll_bar_size = 10;

	fun make_graph_view (fs, root_window) graph
	    =
	    {   viewer    = v::make_graph_viewer (fs, root_window) graph ;

		vp_mailop = v::mailop_of  viewer;

		hsb = sb::make_horizontal_scrollbar root_window { color=>NULL, size=>scroll_bar_size };	    horizontal_scrollbar_change' = sb::scrollbar_change'_of  hsb;
		vsb = sb::make_vertical_scrollbar   root_window { color=>NULL, size=>scroll_bar_size };	    vertical_scrollbar_change' = sb::scrollbar_change'_of  vsb;

		screen = w::screen_of root_window;

		black  = xc::rgb_from_floats (0.0, 0.0, 0.0);

		widget = sbl::make_widget_with_scrollbars  root_window
			   {
			     scrolled_widget => v::as_widget viewer,

			     horizontal_scrollbar
				 =>
				 THE { pad => 1, 
				       top => FALSE,
				       scrollbar
					   =>
					   b::as_widget
					       (b::make_border
						 {
						   color => THE black,
						   width => 1,
						   child => lw::as_widget
								(lw::make_line_of_widgets  root_window
								    (lw::VT_CENTER
								      [
									lw::SPACER { min_size=>1, ideal_size=>1, max_size=>THE 1 },
									lw::WIDGET (sb::as_widget hsb),
									lw::SPACER { min_size=>1, ideal_size=>1, max_size=>THE 1 }
								      ]
								    )
								)
						 }
					       )

				     },

			     vertical_scrollbar
				 =>
				 THE { pad  => 1, 
				       left => FALSE,

				       scrollbar
					   =>
					    b::as_widget
						(b::make_border
						  {
						    color =>  THE black,
						    width =>  1,
						    child =>  lw::as_widget
								  (lw::make_line_of_widgets  root_window
								      (lw::HZ_CENTER
									[
									  lw::SPACER { min_size=>1,  ideal_size=>1, max_size=>THE 1 },
									  lw::WIDGET (sb::as_widget vsb),
									  lw::SPACER { min_size=>1,  ideal_size=>1, max_size=>THE 1 }
									]
								      )
								  )
						  }
						)


				     }
			   };

		initstate
		    =
		    ( { min=>0, size=>0, total=>0 },
		      { min=>0, size=>0, total=>0 }
		    );

		# hsb is probably "horizontal_scrollbar":
		#
		fun do_horizontal_scrollbar_change (sb::SCROLL_UP   r, state:  State) =>  state;
		    do_horizontal_scrollbar_change (sb::SCROLL_DOWN r, state:  State) =>  state;

		    do_horizontal_scrollbar_change (sb::SCROLL_END  r, state as ( { min, size, total }, v))
			=>
			{   min' = floor (r * (real total));

			    if (min' != min)
				#
				v::set_horz_view viewer min';

				( { min=>min', size, total }, v);
			    else
				state;
			    fi;
			};

		    do_horizontal_scrollbar_change (_, state)
			=>
			state;
		end;

		# vsb is probably "vertical scrollbar":
		#
		fun do_vertical_scrollbar_change (sb::SCROLL_UP   r, state: State) =>  state;
		    do_vertical_scrollbar_change (sb::SCROLL_DOWN r, state: State) =>  state;

		    do_vertical_scrollbar_change (sb::SCROLL_END  r, state as (h, { min, size, total } ))
			=>
			{   min' = floor (r * (real total));

			    if (min' != min)
				#
				v::set_vert_view viewer min';

				(h, { min=>min', size, total } );
			    else
				state;
			    fi;
			};

		    do_vertical_scrollbar_change (_, state)
			=>
			state;
		end;

		fun handle_vp ( { horz=>v::VIEWDIM hz, vert=>v::VIEWDIM vt }, (h, v))
		    =
		    {
			fun change (sb, { min, size, total }:  Vport)
			    =
			    {   total = real total;

				sb::set_scrollbar_thumb
				    #
				    sb
				    #
				    { size =>  THE ((float::from_int size) // total),
				      top  =>  THE ((float::from_int min ) // total)
				    };
			    };

			if (hz != h)   change (hsb, hz);  fi; 
			if (vt != v)   change (vsb, vt);  fi; 

			(hz, vt);
		    };

		fun loop state
		    =
		    for (;;) {
			#
			select [
			    #
			    vp_mailop
				==>
				(fn e = handle_vp  (e, state)),

			    horizontal_scrollbar_change'
				==>
				(fn e = do_horizontal_scrollbar_change (e, state)),

			    vertical_scrollbar_change'
				==>
				(fn e = do_vertical_scrollbar_change (e, state))
			];
		    };

		make_thread  "graph_view"  .{
		    #
		    loop initstate;
		};

		VIEW {
		    viewer,
		    widget => lw::as_widget widget
		};
	    };

	fun as_widget (VIEW { widget, ... } )
	    =
	    widget;

    };							# package graph_view 
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
