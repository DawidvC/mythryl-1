#  A singleton graph view (i.e. graph with one node.)
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

###           "Alone, alone, all, all alone,
###            Alone on a wide wide sea!"
###
###                       -- Coleridge


api Singleton_Graph_View {
  
    singleton_view:  graph::Graph( N, E, G)
                       -> 
                       graph::Node_Id
                       ->
                       graph::Graph( N, E, G );

};



###           "He travels fastest who travels alone."
###
###                                -- Kipling  


package singleton_graph_view: (weak)  Singleton_Graph_View		# Singleton_Graph_View	is from   src/lib/graph/singleton.pkg
{
    package g= graph;	# graph	is from   src/lib/graph/graph.pkg

    fun singleton_view (g::GRAPH graph) n
	=
	{   fun unimplemented _
                =
                raise exception g::READ_ONLY;

	    fun none _
                =
                [];

	    fun entries () =  case (graph.in_edges  n)      [] => [];   _ => [n];   esac;
	    fun exits ()   =  case (graph.out_edges n)      [] => [];   _ => [n];   esac;

	    g::GRAPH
	      { name            => graph.name,
		graph_info      => graph.graph_info,
		new_id          => graph.new_id,
		add_node        => unimplemented,
		add_edge        => unimplemented,
		remove_node     => unimplemented,
		set_in_edges    => unimplemented,
		set_out_edges   => unimplemented,
		set_entries     => unimplemented,
		set_exits       => unimplemented,
		garbage_collect => unimplemented,
		nodes           => fn _ =  [(n, graph.node_info n)],
		edges           => none,
		order           => fn _ =  1,
		size            => fn _ =  0,
		capacity        => graph.capacity,
		out_edges       => none,
		in_edges        => none,
		next            => none,
		prior            => none,
		has_edge        => fn _ =  FALSE,
		has_node        => fn i =  i == n,
		node_info       => graph.node_info,
		entries,
		exits,
		entry_edges     => fn i =  if  (i == n  )  graph.in_edges  i;  else  [];  fi,
		exit_edges      => fn i =  if  (i == n  )  graph.out_edges i;  else  [];  fi,
		forall_nodes    => fn f =  f (n, graph.node_info n),
		forall_edges    => fn f =  ()
	      };
	};
};
