## buffer.pkg

# Compiled by:
#     src/lib/x-kit/tut/bounce/bounce-app.make6


# This is an implementation of unbounded buffered channels.
# Send operations never block, but accept/receive operations may.
# Caveat: since the buffer is unbounded it is possible for the buffer to consume
# excessive amounts of space, if the number of send operations greatly exceeds
# the number of accepts over some time period.

# Does this do anything mailqueues don't do?
# Or was it written before mailqueues were implemented?  -- 2009-12-01 CrT  XXX BUGGO FIXME
# LATER: He hands this as an argument to a Multicast
# functor in 'load' -- I think maybe at that point
# multicast didn't incorporate queues.  Since
# multicast now comes with queues included, this
# file is probably junk.

api Buffered_Mail_Channel {

#    package threadkit:  CONCUR_LIB7

    Buffered_Mail_Channel( X );

    buffer:  Void -> Buffered_Mail_Channel( X );
    buffer_in:  mailslot::Mailslot(X)  -> Buffered_Mail_Channel(X);
    buffer_out:  mailslot::Mailslot(X) -> Buffered_Mail_Channel(X);
    buffer_send:  (Buffered_Mail_Channel(X), X) -> Void;
    buffer_accept:  Buffered_Mail_Channel(X) -> X;
    buffer_receive:  Buffered_Mail_Channel(X) -> mailop::Mailop(X);
};

generic package buffered_mail_channel_g (threadkit: Threadkit) : Buffered_Mail_Channel {

#    package threadkit = threadkit

    include threadkit;						# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg

    Buffered_Mail_Channel(X)
        =
        BUFFERED_MAIL_CHANNEL
          { in_slot:   Mailslot(X),
            out_slot:  Mailslot(X)
          };

    stipulate
# * We need the Mailslot(X) type constraint here because of a compiler bug XXX BUGGO FIXME 

	fun make_buffer (in_slot, out_slot: Mailslot(X))
	    =
	    {   in_mailop =  take'  in_slot;

		fun loop ([], [])
                        =>
                        loop([take in_slot], []);

		    loop (front as (x ! r), rear)
                        =>
                        do_mailop (choose [
			    in_mailop
                                ==>
                                (fn y = loop (front, y ! rear)),

			    give' (out_slot, x)
                                ==>
                                (fn () = loop (r, rear))
		      ]);

		    loop ([], rear)
			=>
                        loop (list::reverse rear, []);
                end;

		make_thread "buffer" (fn () = loop([], []));

		BUFFERED_MAIL_CHANNEL { in_slot, out_slot };
	    };
    herein
	fun buffer ()           =  make_buffer (make_mailslot (), make_mailslot ());
	fun buffer_in  in_slot  =  make_buffer (in_slot,          make_mailslot ());
	fun buffer_out out_slot =  make_buffer (make_mailslot (), out_slot        );
    end;

    fun buffer_send    (BUFFERED_MAIL_CHANNEL { in_slot, ... }, x) = give (in_slot, x);
    fun buffer_accept  (BUFFERED_MAIL_CHANNEL { out_slot, ... } )  = take out_slot;
    fun buffer_receive (BUFFERED_MAIL_CHANNEL { out_slot, ... } )  = take' out_slot;

};					#  generic package buffered_mail_channel 


## COPYRIGHT (c) 1990 by John H. Reppy.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
