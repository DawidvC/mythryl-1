## badbricks.pkg

# Compiled by:
#     src/lib/x-kit/tut/bricks/bricks.make6

stipulate
    include threadkit;					# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xg =  xgeometry;				# xgeometry			is from   src/lib/x-kit/xclient/xgeometry.pkg
    #
    package w  =  widget;				# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
    package dv =  divider;				# divider			is from   src/lib/x-kit/widget/leaf/divider.pkg
    package lw =  line_of_widgets;			# line_of_widgets		is from   src/lib/x-kit/widget/layout/line-of-widgets.pkg
    package sz =  size_preference_wrapper;		# size_preference_wrapper	is from   src/lib/x-kit/widget/wrapper/size-preference-wrapper.pkg
    package pd =  pulldown_menu_button;			# pulldown_menu_button		is from   src/lib/x-kit/widget/menu/pulldown-menu-button.pkg
    package pu =  popup_menu;				# popup_menu			is from   src/lib/x-kit/widget/menu/popup-menu.pkg
    package tw =  topwindow;				# topwindow			is from   src/lib/x-kit/widget/menu/popup-menu.pkg
    #
    package bu =  brick_util;				# brick_util			is from   src/lib/x-kit/tut/bricks/brick-util.pkg
    package wl =  wall;					# wall				is from   src/lib/x-kit/tut/bricks/wall.pkg
herein

    package bad_bricks:  api {

	do_it' : (List(String), String, integer::Int) -> winix::process::Status;
	do_it:   String -> winix::process::Status;
	main:   (String, List(String)) -> winix::process::Status;

    }{


	x_size = 10;
	y_size = 30;

	fun bad_bricks server
	    =
	    {   tw::start  topwindow;

		wl::start_game (wall, bu::NORMAL);

		loop ();
	    }
	    where
		root_window =  w::make_root_window (server, NULL);

		wall = wl::make_wall root_window (x_size, y_size);

		#  fun collect_garbage () = system::unsafe::c_interface::gc 2;

		fun quit_game ()
		    =
		    {   w::delete_root_window  root_window;

			shut_down_thread_scheduler  winix::process::success;
		    };

		fun do_short_range ()
		    =
		    wl::set_range (wall, bu::SHORT);

		fun do_long_range ()
		    =
		    if (bu::cmp_difficulty (wl::difficulty_of wall, bu::HARD) > 0) 
			#
			wl::set_range (wall, bu::LONG);
		    fi;

		fun do_game d
		    =
		    {   wl::start_game (wall, d);
			#  if d > Hard then activate sensor_menu 
			();
		    };

		fun game_menu ()
		    =
		    {   fun make_item d
			    =
			    pu::POPUP_MENU_ITEM (bu::difficulty_name d, fn () = do_game d);

			#  pu::POPUP_MENU((map make_item bu::difficulty_list)@[POPUP_MENU_ITEM("GARBAGE_COLLECTION", do_gc), POPUP_MENU_ITEM("Quit", quit_game)]) ;

			pu::POPUP_MENU ( (map  make_item  bu::difficulty_list)
			       @
			       [pu::POPUP_MENU_ITEM ("Quit", quit_game)]
			     );
		    };

		fun sensor_menu ()
		    =
		    {   pu::POPUP_MENU [
			    pu::POPUP_MENU_ITEM("Short range", do_short_range),
			    pu::POPUP_MENU_ITEM("Long range",  do_long_range)
			  ];
		    };

		my (game_menu_button, game_menu_mailop)
		    = 
		    pd::make_pulldown_menu_button
			#
			root_window
			#
			("Game", game_menu());

		fun loop ()
		    =
		    for (;;) {
			#
			(do_mailop  game_menu_mailop)  ();
		    };

		layout
		    =
		    lw::make_line_of_widgets  root_window
		      (lw::VT_CENTER
			[
			  lw::HZ_TOP
			    [
			      lw::WIDGET (sz::make_tight_size_preference_wrapper   game_menu_button), 
			      lw::SPACER { min_size=>0,  ideal_size=>0, max_size=>NULL }
			    ],
			  lw::WIDGET (dv::make_horizontal_divider  root_window  { color=>NULL, width=>1 } ),
			  lw::WIDGET (wl::as_widget wall)
			]
		      );

		topwindow
		    =
		    tw::make_topwindow
		      ( lw::as_widget layout,
			NULL,
			{ window_name => THE "BadBricks",
			  icon_name   => THE "BadBricks"
			}
		      );

	    end;

	fun do_it' (flgs, display, timeslice_quantum)
	    =
	    {   xtracing::init flgs;

		start_up_thread_scheduler'
		    #
		    (time::from_milliseconds  timeslice_quantum)
		    #
		   .{  xtracing::xspawn("bad_bricks", fn () = bad_bricks display);
		       ();
		    };
	    };

	fun do_it s
	    =
	    do_it' ([], s, 20);

	fun main (program, "-display" ! server ! _) => do_it  server;
	    main _                                  => do_it  "";
	end;

    };						#  package bad_bricks 
end;


## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
