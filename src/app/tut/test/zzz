# A totally trivial test program.
# See AN.OVERVIEW

api Test {
   My_Type;
   two: Int;
};

# package test: (weak) Test {
# package test {

package test:  Test {

    My_Type = Int;

    two = 2;
    six = 6;

};


my it = make "test.make6"

typecheck_declaration': unparsing declaration raw syntax:
api Test
    =
    api _ {
        My_Type;
        two:   Int; 
    };

typecheck_declaration': prettyprinting declaration raw syntax:
API_DECLARATIONS api Test
    =SOURCE_CODE_REGION_FOR_API (...) API_DEFINITION 
    api
        TYPE_CONSTRUCTORS_IN_API My_Type;
        VALUES_IN_API two:   TYPE_CONSTRUCTOR_TYPE Int; 
    end;
[[typecheck_api_bs
--typecheck_declaration': api Test
]]typecheck_api_bs

typecheck_declaration': unparsing declaration raw syntax:
package test =
              stipulate 
                 herein package _ {
                      My_Type = Int;
                      my two = 2
                      my six = 6};
                end;

typecheck_declaration': prettyprinting declaration raw syntax:
PACKAGE_DECLARATIONS
[ NAMED_PACKAGE test = 
      LET_IN_PACKAGE[ 
      
               
           SEQUENTIAL_DECLARATIONS[ 
           ]SEQUENTIAL DECLARATIONS 
           
      ;LET_IN_PACKAGE 
          
           PACKAGE_DEFINITION[
               
                 
               SEQUENTIAL_DECLARATIONS[ SOURCE_CODE_REGION_FOR_DECLARATION <...> TYPE_DECLARATIONS [ NAMED_TYPE My_Type = TYPE_CONSTRUCTOR_TYPE Int; ]TYPE_DECLARATIONS 
                                        ;SEQUENTIAL_DECLARATIONS
                                        SOURCE_CODE_REGION_FOR_DECLARATION <...> 
                                        
                                        VALUE_DECLARATIONS    [ NAMED_VALUE[ 
                                                VARIABLE_IN_PATTERN two
                                             = (NAMED_VALUE)
                                                 PRE_FIXITY_EXPRESSION[ 
                                                    SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 2 ] 
                                                 ]PRE_FIXITY_EXPRESSION 
                                            ]NAMED_VALUE
                                        ]VALUE_DECLARATIONS 
                                        
                                        
                                        ;SEQUENTIAL_DECLARATIONS
                                        SOURCE_CODE_REGION_FOR_DECLARATION <...> 
                                        
                                        VALUE_DECLARATIONS    [ NAMED_VALUE[ 
                                                VARIABLE_IN_PATTERN six
                                             = (NAMED_VALUE)
                                                 PRE_FIXITY_EXPRESSION[ 
                                                    SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 6 ] 
                                                 ]PRE_FIXITY_EXPRESSION 
                                            ]NAMED_VALUE
                                        ]VALUE_DECLARATIONS 
                                        
                                        
               ]SEQUENTIAL DECLARATIONS 
           ]PACKAGE_DEFINITION
           
                
            ]LET_IN_PACKAGE ;
     ]PACKAGE_DECLARATIONS 
[[typecheck_named_packages
[[typecheck_named_packages
--typecheck_named_packages: package test
[[typecheck_named_packages: doing 'constraint' case

[[typecheck_named_packages[CAST_PACKAGE_PER_API_CONSTRAINT]: calling typecheck_api

[[typecheck_named_packages: calling ta::typecheck_api
[[typecheck_named_packages: DONE 'constraint' case

[[typecheck_package: test
[[typecheck_package'[LET_IN_PACKAGE]

typecheck_declaration': unparsing declaration raw syntax:


typecheck_declaration': prettyprinting declaration raw syntax:

SEQUENTIAL_DECLARATIONS[ 
]SEQUENTIAL DECLARATIONS 
[[typecheck_seq_declaration
typecheck_seq_declaration - symbols: 
      []
    ]]typecheck_seq_declaration
--typecheck_package'[LET_IN_PACKAGE]: local typecheck_declaration' done
[[typecheck_package'[PACKAGE_DEFINITION]

typecheck_declaration': unparsing declaration raw syntax:
My_Type = Int;
my two = 2
my six = 6

typecheck_declaration': prettyprinting declaration raw syntax:

SEQUENTIAL_DECLARATIONS[ SOURCE_CODE_REGION_FOR_DECLARATION <...> TYPE_DECLARATIONS [ NAMED_TYPE My_Type = TYPE_CONSTRUCTOR_TYPE Int; ]TYPE_DECLARATIONS 
                         ;SEQUENTIAL_DECLARATIONS
                         SOURCE_CODE_REGION_FOR_DECLARATION <...> 
                         
                         VALUE_DECLARATIONS    [ NAMED_VALUE[ 
                                 VARIABLE_IN_PATTERN two
                              = (NAMED_VALUE)
                                  PRE_FIXITY_EXPRESSION[ 
                                     SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 2 ] 
                                  ]PRE_FIXITY_EXPRESSION 
                             ]NAMED_VALUE
                         ]VALUE_DECLARATIONS 
                         
                         
                         ;SEQUENTIAL_DECLARATIONS
                         SOURCE_CODE_REGION_FOR_DECLARATION <...> 
                         
                         VALUE_DECLARATIONS    [ NAMED_VALUE[ 
                                 VARIABLE_IN_PATTERN six
                              = (NAMED_VALUE)
                                  PRE_FIXITY_EXPRESSION[ 
                                     SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 6 ] 
                                  ]PRE_FIXITY_EXPRESSION 
                             ]NAMED_VALUE
                         ]VALUE_DECLARATIONS 
                         
                         
]SEQUENTIAL DECLARATIONS 
[[typecheck_seq_declaration

typecheck_declaration': unparsing declaration raw syntax:
My_Type = Int;

typecheck_declaration': prettyprinting declaration raw syntax:
SOURCE_CODE_REGION_FOR_DECLARATION <...> TYPE_DECLARATIONS [ NAMED_TYPE My_Type = TYPE_CONSTRUCTOR_TYPE Int; ]TYPE_DECLARATIONS 

typecheck_declaration': unparsing declaration raw syntax:
My_Type = Int;

typecheck_declaration': prettyprinting declaration raw syntax:
TYPE_DECLARATIONS [ NAMED_TYPE My_Type = TYPE_CONSTRUCTOR_TYPE Int; ]TYPE_DECLARATIONS 

typecheck_declaration': unparsing declaration raw syntax:
my two = 2

typecheck_declaration': prettyprinting declaration raw syntax:
SOURCE_CODE_REGION_FOR_DECLARATION <...> 

VALUE_DECLARATIONS    [ NAMED_VALUE[ 
        VARIABLE_IN_PATTERN two
     = (NAMED_VALUE)
         PRE_FIXITY_EXPRESSION[ 
            SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 2 ] 
         ]PRE_FIXITY_EXPRESSION 
    ]NAMED_VALUE
]VALUE_DECLARATIONS 



typecheck_declaration': unparsing declaration raw syntax:
my two = 2

typecheck_declaration': prettyprinting declaration raw syntax:


VALUE_DECLARATIONS    [ NAMED_VALUE[ 
        VARIABLE_IN_PATTERN two
     = (NAMED_VALUE)
         PRE_FIXITY_EXPRESSION[ 
            SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 2 ] 
         ]PRE_FIXITY_EXPRESSION 
    ]NAMED_VALUE
]VALUE_DECLARATIONS 


[[typecheck_declaration'::declaration[after tcl::typecheck_declaration: top=TRUE
[[typecheck_declaration'::declaration[after transform]
[[typecheck_declaration'::declaration[after typecheck_module_declaration_type]

typecheck_declaration': unparsing declaration raw syntax:
my six = 6

typecheck_declaration': prettyprinting declaration raw syntax:
SOURCE_CODE_REGION_FOR_DECLARATION <...> 

VALUE_DECLARATIONS    [ NAMED_VALUE[ 
        VARIABLE_IN_PATTERN six
     = (NAMED_VALUE)
         PRE_FIXITY_EXPRESSION[ 
            SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 6 ] 
         ]PRE_FIXITY_EXPRESSION 
    ]NAMED_VALUE
]VALUE_DECLARATIONS 



typecheck_declaration': unparsing declaration raw syntax:
my six = 6

typecheck_declaration': prettyprinting declaration raw syntax:


VALUE_DECLARATIONS    [ NAMED_VALUE[ 
        VARIABLE_IN_PATTERN six
     = (NAMED_VALUE)
         PRE_FIXITY_EXPRESSION[ 
            SOURCE_CODE_REGION_FOR_EXPRESSION [ INT_CONSTANT_IN_EXPRESSION 6 ] 
         ]PRE_FIXITY_EXPRESSION 
    ]NAMED_VALUE
]VALUE_DECLARATIONS 


[[typecheck_declaration'::declaration[after tcl::typecheck_declaration: top=TRUE
[[typecheck_declaration'::declaration[after transform]
[[typecheck_declaration'::declaration[after typecheck_module_declaration_type]
typecheck_seq_declaration - symbols: 
      [six, two, My_Type]
    ]]typecheck_seq_declaration
--typecheck[PACKAGE_DEFINITION]: typecheck_declaration' done
--typecheck_package'[PACKAGE_DEFINITION]: calling extract_symbol_table_contents...
--typecheck_package'[PACKAGE_DEFINITION]: extract_symbol_table_contents done
]]typecheck_package'[PACKAGE_DEFINITION]
]]typecheck_package'[LET_IN_PACKAGE]: typecheck body pkg done
]]typecheck_package
--typecheck_named_packages: typecheck_package done
unconstrained package: 
      A_PACKAGE
          an_api:
            BEGIN_API:
              stamp: #F10
              name: ANONYMOUS
              elements:
                six : int[GP;#S:int;YES];
                  two : int[GP;#S:int;YES];
                  test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                      module_stamp: #F9
                      scope: 0;;
          typechecked_package:
            Typechecked_Package:
              inverse_path: <test>
              stamp: #F11
              typechecker_dictionary:
                #F9:
                    test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                  
              lambdaty:
                <lambdaty>
    
--typecheck_named_packages: calling typecheck_constrained_package
[[match_package
[[match_pkg_to_api
[[match_all_api_elements
[[match_all_api_elements TYPE_CONSTRUCTOR_IN_API: My_Type, FSTAMP(1)
--match_all_api_elements TYPE_CONSTRUCTOR_IN_API - pkg_typecheck_package_variable: FSTAMP(9)
--match_all_api_elements TYPE_CONSTRUCTOR_IN_API >> chec_named_type_constructor
]]match_all_api_elements TYPE_CONSTRUCTOR_IN_API << check_named_type_constructor
[[match_all_api_elements
--match_pkg_to_api: elements matched successfully
--match_pkg_to_api: sharing checked
]]match_pkg_to_api
]]match_package
--typecheck_constrained_package: api_match::match_package done
--typecheck_constrained_package: result_package1: 
      A_PACKAGE
          an_api:
            BEGIN_API:
              stamp: #F2
              name: NAMED Test
              elements:
                test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                      module_stamp: #F1
                      scope: 0;
                  two : Int[D;int[GP;#S:int;YES]];;
          typechecked_package:
            Typechecked_Package:
              inverse_path: <test>
              stamp: #F11
              typechecker_dictionary:
                #F1:
                    test::My_Type[D;Int[D;int[GP;#S:int;YES]]]
                  
              lambdaty:
                <lambdaty>
    

--typecheck_constrained_package: result_declaration1: package <anonymous_package> [LAMBDA_VARIABLE(4)] = 
  stipulate 
  
  herein
  pkg
    ...end
  end;
typecheck_constrained_package: This is a  CAST.
[[>pack_package
pack_package - processing done
[[pack_api_elements
[[pack_api_elements
pack_package - packPackage1 done
]]<pack_package
--typecheck_constrainted_package: api_match::pack_package done
--typecheck_constrained_package: result_package2: 
      A_PACKAGE
          an_api:
            BEGIN_API:
              stamp: #F2
              name: NAMED Test
              elements:
                test::My_Type[GA;#F15;INDETERMINATE]
                      module_stamp: #F1
                      scope: 0;
                  two : Int[D;int[GP;#S:int;YES]];;
          typechecked_package:
            Typechecked_Package:
              inverse_path: <test>
              stamp: #F16
              typechecker_dictionary:
                #F1:
                    test::My_Type[GA;#F15;INDETERMINATE]
                  
              lambdaty:
                <lambdaty>
    

--typecheck_constrained_package: result_declaration2: package <anonymous_package> [LAMBDA_VARIABLE(5)] = 
  stipulate 
  
  herein
  pkg
    ...end
  end;
--typecheck_named_packages: now past typecheck_constrained_package call point.
--typecheck_named_packages: constrain done
--typecheck_named_packages: result_package: 
      A_PACKAGE
          an_api:
            BEGIN_API:
              stamp: #F2
              name: NAMED Test
              elements:
                test::My_Type[GA;#F15;INDETERMINATE]
                      module_stamp: #F1
                      scope: 0;
                  two : Int[D;int[GP;#S:int;YES]];;
          typechecked_package:
            Typechecked_Package:
              inverse_path: <test>
              stamp: #F16
              typechecker_dictionary:
                #F1:
                    test::My_Type[GA;#F15;INDETERMINATE]
                  
              lambdaty:
                <lambdaty>
    
--typecheck_named_packages: bound_package: 
      A_PACKAGE
          an_api:
            BEGIN_API:
              stamp: #F2
              name: NAMED Test
              elements:
                test::My_Type[GA;#F15;INDETERMINATE]
                      module_stamp: #F1
                      scope: 0;
                  two : Int[D;int[GP;#S:int;YES]];;
          typechecked_package:
            Typechecked_Package:
              inverse_path: <test>
              stamp: #F16
              typechecker_dictionary:
                #F1:
                    test::My_Type[GA;#F15;INDETERMINATE]
                  
              lambdaty:
                <lambdaty>
    
--typecheck_named_packages: bound_package: 
      A_PACKAGE
          an_api:
            BEGIN_API:
              stamp: #F2
              name: NAMED Test
              elements:
                test::My_Type[GA;#F15;INDETERMINATE]
                      module_stamp: #F1
                      scope: 0;
                  two : Int[D;int[GP;#S:int;YES]];;
          typechecked_package:
            Typechecked_Package:
              inverse_path: <test>
              stamp: #F16
              typechecker_dictionary:
                #F1:
                    test::My_Type[GA;#F15;INDETERMINATE]
                  
              lambdaty:
                <lambdaty>
    
]]typecheck_named_packages
          src/app/make7/main/make7-g.pkg:   New names added.

TRUE

eval:  