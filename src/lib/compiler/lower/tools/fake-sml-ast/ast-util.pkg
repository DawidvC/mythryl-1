# ast-util.pkg

# Compiled by:
#     src/lib/compiler/lower/tools/sml-ast.make6

generic package mdl_abstract_syntax_utilities (raw_syntax:  Mdl_Ast)		# Mdl_Ast	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast.api

: (weak) Mdl_Ast_Util							# Mdl_Ast_Util	is from   src/lib/compiler/lower/tools/fake-sml-ast/ast-util.api

{
    package raw_syntax = raw_syntax;
    include raw_syntax;

    fun id id
        =
        IDEXP (IDENT([], id));

    fun app (f, e)
        =
        APPLY_EXPRESSION (id f, e);

    fun binop_exp (f, x, y)
        =
        app (f, TUPLEEXP [x, y]);

    fun plus (a, LITEXP (INT_LIT      0)) => a;
	plus (a, LITEXP (UNT_LIT   0u0)) => a;
	plus (a, LITEXP (UNT32_LIT 0u0)) => a;

	plus (LITEXP (INT_LIT      0), a) => a;
	plus (LITEXP (UNT_LIT   0u0), a) => a;
	plus (LITEXP (UNT32_LIT 0u0), a) => a;

	plus (a, b) => binop_exp("+", a, b);
    end;

    fun minus (a, LITEXP (INT_LIT     0)) => a;
	minus (a, LITEXP (UNT_LIT   0u0)) => a;
	minus (a, LITEXP (UNT32_LIT 0u0)) => a;

	minus (a, b) => binop_exp("-", a, b);
    end;

    fun bitwise_and (a, b)
        =
        binop_exp("&&", a, b);

    fun bitwise_or (a, b)
        =
        binop_exp("||", a, b);

    fun sll (a, LITEXP (UNT_LIT    0u0)) => a;
	sll (a, LITEXP (UNT32_LIT  0u0)) => a;
	sll (a, LITEXP (INT_LIT       0)) => a;

	sll (a, b) =>   binop_exp("<<", a, b);
    end;

    fun slr (a, LITEXP (UNT_LIT   0u0)) => a;
	slr (a, LITEXP (UNT32_LIT 0u0)) => a;
	slr (a, LITEXP (INT_LIT      0)) => a;

	slr (a, b) =>   binop_exp(">>", a, b);
    end;

    fun sar (a, LITEXP (UNT_LIT   0u0)) => a;
	sar (a, LITEXP (UNT32_LIT 0u0)) => a;
	sar (a, LITEXP (INT_LIT      0)) => a;

	sar (a, b) =>   binop_exp(">>>", a, b);
    end;

    fun bool_exp x = LITEXP (BOOL_LIT x);
    fun string_constant_in_expression s = LITEXP (STRING_LIT s);
    fun integer_constant_in_expression x = LITEXP (INT_LIT x);
    fun int32expression x = LITEXP (INT32_LIT x);
    fun intinfexp x = LITEXP (INTEGER_LIT x);
    fun character_constant_in_expression x = LITEXP (CHAR_LIT x);
    fun word_constant_in_expression x = LITEXP (UNT_LIT x);
    fun word32expression x = LITEXP (UNT32_LIT x);

    fun bool_pat x = LITPAT (BOOL_LIT x);
    fun string_constant_in_pattern s = LITPAT (STRING_LIT s);
    fun integer_constant_in_pattern x = LITPAT (INT_LIT x);
    fun int32pattern x = LITPAT (INT32_LIT x);
    fun intinfpat x = LITPAT (INTEGER_LIT x);
    fun character_constant_in_pattern x = LITPAT (CHAR_LIT x);
    fun word_constant_in_pattern x = LITPAT (UNT_LIT x);
    fun word32pattern x = LITPAT (UNT32_LIT x);

    void = TUPLEEXP [];
    true = bool_exp TRUE;
    false = bool_exp FALSE;

    fun and_fn (LITEXP (BOOL_LIT TRUE), x) => x;
	and_fn (LITEXP (BOOL_LIT FALSE), x) => false;
	and_fn (x, LITEXP (BOOL_LIT TRUE)) => x;
	and_fn (x, LITEXP (BOOL_LIT FALSE)) => false;
	and_fn (x, y) => binop_exp("andalso", x, y);
    end;

    fun or_fn (LITEXP (BOOL_LIT TRUE), x) => true;
	or_fn (LITEXP (BOOL_LIT FALSE), x) => x;
	or_fn (x, LITEXP (BOOL_LIT TRUE)) => true;
	or_fn (x, LITEXP (BOOL_LIT FALSE)) => x;
	or_fn (x, y) => binop_exp("or", x, y);
    end;

    nil_exp = LISTEXP([], NULL);


    void_type     = IDTY (IDENT([], "unit"));
    bool_type     = IDTY (IDENT([], "bool"));
    int_type      = IDTY (IDENT([], "int"));
    register_type = IDTY (IDENT([], "cells_basis::cell"));

    register_list_type = APPTY (IDENT([], "list"),[register_type]);
    int_list_type      = APPTY (IDENT([], "list"),[int_type]);

    string_type = IDTY (IDENT([], "String"));
    word32_type = IDTY (IDENT(["unt32"], "word"));
    word_type  = IDTY (IDENT(["Unt"], "word"));
    label_type = IDTY (IDENT(["Label"], "label"));

    label_expression_type = IDTY (IDENT(["label_expression"], "labexp"));

    constant_type  = IDTY (IDENT(["Constant"], "const"));
    cell_kind_type = IDTY (IDENT([], "cells_basis::cellkind"));
    cell_set_type  = IDTY (IDENT([], "cellset"));

    fun datatype_fn (id, args, cbs)
        = 
	DATATYPEBIND { id, type_variables=>args, mc=>NULL, asm=>FALSE, field'=>NULL, cbs };

    fun cons (id, arg)
        =
        CONSBIND
          { id, type=>arg, mc=>NULL, asm=>NULL, rtl=>NULL,
	    nop=>FLAGOFF, nullified=>FLAGOFF,
	    delayslot=>NULL,
	    delaycand=>NULL, sdi=>NULL, latency=>NULL,
	    pipeline=>NULL, loc=>source_mapping::dummy_loc
          };

    fun my_fn (id, e)
        =
        VALDECL
	  [ NAMED_VARIABLE
	      ( case id
                    "_" => WILDCARD_PATTERN;
                     _  => IDPAT id;
                esac,
                e
	      )
	  ];

    fun fun_fn'(id, p, e) = FUNBIND (id, [CLAUSE([p], NULL, e)]);
    fun fun_fn (id, p, e) = FUNDECL [fun_fn'(id, p, e)];

    fun let_fn ([], e) => e; 
        let_fn (d, e) => LET_EXPRESSION (d,[e]);
    end;


    fun error_fn text
        =
        CLAUSE([WILDCARD_PATTERN], NULL, app("error", string_constant_in_expression text));

    fun error_fun_fn name
        = 
	VERBATIM_CODE ["fun error msg = lowcode_error_message::error(\"" + name + "\", msg)"];

    fun dummy_fun name
        = 
	VERBATIM_CODE ["fun " + name + " _ = error \"" + name + "\""];


    fun bitslice (e, ranges)
	=
	{   temp = id "temp";

	    fun gen (tmp, [], pos, e)
                    =>
                    e;

		gen (tmp, (a, b) ! slices, pos, e)
		    =>
		    {   width = b - a + 1;
			mask  = unt32::(<<) (0u1, unt::from_int width) - 0u1;

			field' = sll (tmp, word32expression (unt32::from_int a));
			field' = bitwise_and (field', word32expression mask);

		        gen (tmp, slices, pos+width,
			    plus (sll (field', word32expression (unt32::from_int pos)), e));
		    };
            end;

	    fun emit (tmp)
                =
                gen (tmp, reverse ranges, 0, word32expression 0u0);

	    case ranges
		[_] => emit e;
	        _   => LET_EXPRESSION( [VALDECL [NAMED_VARIABLE (IDPAT "temp", e)]], [emit (id "temp")]);
            esac;
	};

    # Add an entry:
    #
    fun cons' (x, LISTEXP (a, b)) =>  LISTEXP  (x ! a, b);
        cons' (x, y)              =>  LISTEXP ([x], THE y);
    end;

    # Append an entry:
    #
    fun append (x, LISTEXP([], NULL)) =>   x;
        append (x, y)                 =>   app("@", TUPLEEXP [x, y]);
    end;

    fun compare_literal (x, y)
	=
	{   fun kind (INT_LIT    _) => 0;
		kind (BOOL_LIT   _) => 1;
		kind (STRING_LIT _) => 2;
		kind (CHAR_LIT   _) => 3;
		kind (UNT_LIT   _) => 4;
		kind (UNT32_LIT _) => 5;
		kind (INTEGER_LIT _) => 6;
		kind (FLOAT_LIT   _) => 7;
		kind (INT32_LIT  _) => 8;
            end;

	    case (x, y)
		(INT_LIT     x, INT_LIT     y) =>  int::compare     (x, y);
		(INT32_LIT   x, INT32_LIT   y) =>  int32::compare   (x, y);
		(STRING_LIT  x, STRING_LIT  y) =>  string::compare  (x, y);
		(CHAR_LIT    x, CHAR_LIT    y) =>  char::compare    (x, y);
		(UNT_LIT     x, UNT_LIT     y) =>  unt::compare     (x, y);
		(UNT32_LIT   x, UNT32_LIT   y) =>  unt32::compare   (x, y);
		(INTEGER_LIT x, INTEGER_LIT y) =>  integer::compare (x, y);
		(FLOAT_LIT   x, FLOAT_LIT   y) =>  string::compare  (x, y);
		(BOOL_LIT    x, BOOL_LIT    y) =>  if   (x == y     )   EQUAL; 
						   elif (x == FALSE )   LESS;
						   else                 GREATER;
						   fi;

		(x, y)                         =>  int::compare (kind x, kind y);
	    esac;
	};
};
