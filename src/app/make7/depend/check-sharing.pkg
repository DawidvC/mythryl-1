## check-sharing.pkg
## (C) 1999 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/Make7.make6


# Check for consistency of "private" and "shared" annotations.


stipulate

    package lg= inter_library_dependency_graph;		# inter_library_dependency_graph	is from   src/app/make7/depend/inter-library-dependency-graph.pkg
    package sg= intra_library_dependency_graph;		# intra_library_dependency_graph	is from   src/app/make7/depend/intra-library-dependency-graph.pkg
    package em= error_message;				# error_message				is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    package pp= prettyprint;				# prettyprint				is from   src/lib/prettyprint/src/prettyprint.pkg

herein

    api Check_Sharing {

         check:  (symbol_map::Map( lg::Oh7_View )
                  , make7_state::Make7_State)
                 -> Void;
    };

    package check_sharing: Check_Sharing {		# Check_Sharing	is from   src/app/make7/depend/check-sharing.pkg

        fun check (exports, make7_state)
	    =
	    {   fun check (sharing_mode::DONT_CARE, _, s, _)
			=>
			(s, if (string_set::is_empty s ) sharing_mode::SHARE FALSE;
			    else sharing_mode::DO_NOT_SHARE;fi);

		    check (sharing_mode::PRIVATE, x, _, _)
			=>
			(string_set::singleton x, sharing_mode::DO_NOT_SHARE);

		    check (sharing_mode::SHARED, x, s, err)
			=>
			{
			    fun ppb pps
				=
				{   fun loop [] => ();

				        loop (h ! t)
					    =>
					    {   pp::string pps h;
						pp::newline pps;
						loop t;
					    };
                                    end;

				    pp::newline pps;
				    pp::string pps "because of dependence on non-shareable state in:";
				    pp::newline pps;
				    loop (string_set::vals_list s);
				};

			    if   (string_set::is_empty s)
			        
				 (s, sharing_mode::SHARE TRUE);
			    else
				 err em::ERROR ("cannot share state of " + x) ppb;
				 (s, sharing_mode::DO_NOT_SHARE);
                            fi;
			};
              end;

	      smlmap = REF bare_o7_map::empty;

	      fun bn (sg::ICED_O7 { iced_o7 => i, ... } )
                  =
		  case (iced_o7::sharing_mode i)
		    
		       sharing_mode::DO_NOT_SHARE => string_set::singleton (iced_o7::describe i);
		      _ => string_set::empty;
                  esac;

	      fun sn (sg::BARE_O7 n)
                  =
                  {   my  {  bare_o7       => i,
                             near_imports  => li,
                             far_imports   => gi,
                             ...
                          }
                          =
                          n;

		      fun acc f (arg, s)
                          =
                          string_set::union (f arg, s);
		  
		      case (bare_o7_map::get (*smlmap, i))
		        
			   THE s => s;

			   NULL => {
				gs = fold_left (acc fsbn) string_set::empty gi;
				ls = fold_left (acc sn) gs li;

				my (s, m) = check (   bare_o7::sharing_request i,
						       bare_o7::describe i,
						       ls,
						       bare_o7::error make7_state i
						   );

				smlmap := bare_o7_map::set (*smlmap, i, s);
				bare_o7::set_sharing_mode (i, m);
				s;
			    };
                      esac;
		  }

	      also
	      fun sbn (sg::O7_IS_ICED (n, _, _))   =>   bn n;
		  sbn (sg::O7_IS_BARE   n)          =>   sn n;
              end 

	      also
	      fun fsbn (_, n)
                  =
                  sbn n;

	      fun import_export (nth, _, _)
                  =
                  ignore (fsbn (nth ()));
	  
	      symbol_map::apply import_export exports;
	  };
    };
end;
