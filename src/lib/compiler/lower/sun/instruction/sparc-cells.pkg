/*
 * WARNING: This file was automatically generated by mdl_g (v3.0)
 * from the machine description file "sparc/sparc.mdl".
 * DO NOT EDIT this file directly
 */

# Compiled by:
#     src/lib/compiler/lower/make7/sparc.make6


api Sparccells {

    include Cells;		# Cells	is from   src/lib/compiler/lower/instruction/cells.api

    yyy:  cells_basis::Cellkind;
    psr':  cells_basis::Cellkind;
    fsr':  cells_basis::Cellkind;
    cellset:  cells_basis::Cellkind;
    show_gp:  cells_basis::Register_Id -> String;
    show_fp:  cells_basis::Register_Id -> String;
    show_y:  cells_basis::Register_Id -> String;
    show_psr:  cells_basis::Register_Id -> String;
    show_fsr:  cells_basis::Register_Id -> String;
    show_cc:  cells_basis::Register_Id -> String;
    show_mem:  cells_basis::Register_Id -> String;
    show_ctrl:  cells_basis::Register_Id -> String;
    show_cellset:  cells_basis::Register_Id -> String;
    show_gpwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_fpwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_ywith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_psrwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_fsrwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_ccwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_memwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_ctrlwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    show_cellsetwith_size:  (cells_basis::Register_Id, cells_basis::Size_In_Bits) -> String;
    frameptr_r:  cells_basis::Cell;
    link_reg:  cells_basis::Cell;
    y:  cells_basis::Cell;
    psr:  cells_basis::Cell;
    fsr:  cells_basis::Cell;
    r0:  cells_basis::Cell;
    add_gp:  (cells_basis::Cell, Cellset) -> Cellset;
    add_fp:  (cells_basis::Cell, Cellset) -> Cellset;
    add_y:  (cells_basis::Cell, Cellset) -> Cellset;
    add_psr:  (cells_basis::Cell, Cellset) -> Cellset;
    add_fsr:  (cells_basis::Cell, Cellset) -> Cellset;
    add_cc:  (cells_basis::Cell, Cellset) -> Cellset;
    add_mem:  (cells_basis::Cell, Cellset) -> Cellset;
    add_ctrl:  (cells_basis::Cell, Cellset) -> Cellset;
    add_cellset:  (cells_basis::Cell, Cellset) -> Cellset;
};

package sparc_cells: (weak)  Sparccells	{	# Sparccells	is from   src/lib/compiler/lower/sun/instruction/sparc-cells.pkg

    exception SPARC_CELLS;

    fun error msg
	=
	lowcode_error_message::error("SPARC_CELLS", msg);

    include cells_basis;

    fun show_gpwith_size (r, type) = (fn (r, _) => (if (r < 8)
					     ("%g" + (int::to_string r));
					else (if (r == 14)
					        "%sp";
					   else (if (r < 16)
					           ("%o" + (int::to_string (r - 8)));
					      else (if ((r < 24))
						      ("%l" + (int::to_string (r - 16)));
						 else (if ((r == 30))
						         "%fp";
						    else (if ((r < 32))
						            ("%i" + (int::to_string (r - 24)));
						       else ("%r" + (int::to_string r));fi);fi);fi);fi);fi);fi); end 
				 ) (r, type)
    also fun show_fpwith_size (r, type) = (fn (f, _) => "%f" + (int::to_string f); end 
				 ) (r, type)
    also fun show_ywith_size (r, type) = (fn _ => "%y"; end 
				) (r, type)
    also fun show_psrwith_size (r, type) = (fn (0, _) => "%psr";
				     (n, _) => "%psr" + (int::to_string n); end 
				  ) (r, type)
    also fun show_fsrwith_size (r, type) = (fn (0, _) => "%fsr";
				     (n, _) => "%fsr" + (int::to_string n); end 
				  ) (r, type)
    also fun show_ccwith_size (r, type) = (fn _ => "%cc"; end 
				 ) (r, type)
    also fun show_memwith_size (r, type) = (fn (r, _) => "m" + (int::to_string r); end 
				  ) (r, type)
    also fun show_ctrlwith_size (r, type) = (fn (r, _) => "ctrl" + (int::to_string r); end 
				   ) (r, type)
    also fun show_cellsetwith_size (r, type) = (fn _ => "CELLSET"; end 
				      ) (r, type);
    fun show_gp r = show_gpwith_size (r, 64);
    fun show_fp r = show_fpwith_size (r, 32);
    fun show_y r = show_ywith_size (r, 64);
    fun show_psr r = show_psrwith_size (r, 64);
    fun show_fsr r = show_fsrwith_size (r, 64);
    fun show_cc r = show_ccwith_size (r, 64);
    fun show_mem r = show_memwith_size (r, 8);
    fun show_ctrl r = show_ctrlwith_size (r, 0);
    fun show_cellset r = show_cellsetwith_size (r, 0);

    yyy     = cells_basis::new_cell_kind { name=>"Y", nickname=>"y"};
    psr'    = cells_basis::new_cell_kind { name=>"PSR", nickname=>"psr"};
    fsr'    = cells_basis::new_cell_kind { name=>"FSR", nickname=>"fsr"};
    cellset = cells_basis::new_cell_kind { name=>"CELLSET", nickname=>"cellset"};

    package my_cells
        =
        cells_g (						# cells_g	is from   src/lib/compiler/lower/instruction/cells-g.pkg
	    exception CELLS = SPARC_CELLS;
	    first_pseudo = 256;

	    desc_gp
		=
		cells_basis::DESC { low=>0, high=>31, kind=>cells_basis::REGISTER, default_values => [(0, 
		   0)], zero_reg=>THE 0, to_string=>show_gp, to_string_with_size=>show_gpwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_fp
		=
		cells_basis::DESC { low=>32, high=>63, kind=>cells_basis::FLOAT_REGISTER, 
		   default_values => [], zero_reg=>NULL, to_string=>show_fp, to_string_with_size=>show_fpwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_y
		=
		cells_basis::DESC { low=>64, high=>64, kind=>yyy, default_values => [], 
		   zero_reg=>NULL, to_string=>show_y, to_string_with_size=>show_ywith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_psr
		=
		cells_basis::DESC { low=>65, high=>65, kind=>psr', default_values => [], 
		   zero_reg=>NULL, to_string=>show_psr, to_string_with_size=>show_psrwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_fsr
		=
		cells_basis::DESC { low=>66, high=>66, kind=>fsr', default_values => [], 
		   zero_reg=>NULL, to_string=>show_fsr, to_string_with_size=>show_fsrwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_mem
		=
		cells_basis::DESC { low=>67, high=>66, kind=>cells_basis::RAM_CELL, 
		   default_values => [], zero_reg=>NULL, to_string=>show_mem, to_string_with_size=>show_memwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_ctrl
		=
		cells_basis::DESC { low=>67, high=>66, kind=>cells_basis::CONTROL_DEPENDENCY, 
		   default_values => [], zero_reg=>NULL, to_string=>show_ctrl, to_string_with_size=>show_ctrlwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    desc_cellset
		=
		cells_basis::DESC { low=>67, high=>66, kind=>cellset, default_values => [], 
		   zero_reg=>NULL, to_string=>show_cellset, to_string_with_size=>show_cellsetwith_size, 
		   counter=>REF 0, dedicated=>REF 0, physical_regs=>REF cells_basis::array0 };

	    cell_kind_descs
                =
                [(cells_basis::REGISTER, desc_gp), (cells_basis::FLOAT_REGISTER, desc_fp), 
		   (yyy, desc_y), (psr', desc_psr), (fsr', desc_fsr), (cells_basis::CONDITION_CODES, 
		   desc_gp), (cells_basis::RAM_CELL, desc_mem), (cells_basis::CONTROL_DEPENDENCY, desc_ctrl), 
		   (cellset, desc_cellset)];
        );

    include my_cells;

    add_gp = cell_set::add;
    add_fp = cell_set::add;
    add_y = cell_set::add;
    add_psr = cell_set::add;
    add_fsr = cell_set::add;
    add_cc = cell_set::add;
    add_mem = cell_set::add;
    add_ctrl = cell_set::add;
    add_cellset = cell_set::add;

    reg_gp = reg REGISTER;
    reg_fp = reg FLOAT_REGISTER;
    reg_y = reg yyy;
    reg_psr = reg psr';
    reg_fsr = reg fsr';
    reg_cc = reg CONDITION_CODES;
    reg_mem = reg RAM_CELL;
    reg_ctrl = reg CONTROL_DEPENDENCY;
    reg_cellset = reg cellset;

    stackptr_r = reg_gp 14;
    frameptr_r = reg_gp 30;
    asm_tmp_r = reg_gp 10;
    link_reg = reg_gp 15;
    fasm_tmp = reg_fp 30;
    y = reg_y 0;
    psr = reg_psr 0;
    fsr = reg_fsr 0;
    r0 = reg_gp 0;
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
