/* 
 * This generic factors out the machine independent part of the register
 * allocator.   This works well for RISC machines; not applicable to x86.
 */
generic package backend
  (package translate_codetree_to_target_machine:  Translate_Codetree_To_Target_Machine    #  instruction selection 
   package flowgraph:   FLOWGRAPH
   package instruction_properties:   Instruction_Properties
   package asm:         Instruction_Emitter
   package ra:          CLUSTER_OPTIMIZATION
      sharing instruction_properties::I = flowgraph::I = Asm::I = translate_codetree_to_target_machine::I 
      sharing Asm::P = flowgraph::P = translate_codetree_to_target_machine::T.PseudoOp
      sharing ra::F = flowgraph
  ) : api
         package t:  Codetree
         package c:  Cells
         my codegen:  label::label * List( t::statement ) -> Void  
      end
{
   package f      = flowgraph
   package t      = translate_codetree_to_target_machine::T
   package i      = f::I
   package c      = i::C
   package stream = t::Stream

   #  Flowgraph generation 
   package flow_graph_g =
       ClusterGen (package flowgraph = F
                  package instruction_properties = instruction_properties
                  package codetree    = translate_codetree_to_target_machine::T
                 )

   #  Assembly output 
   package assembler = 
      ClusterEmit (package f = F
                  package e = Asm)

   fun error msg = lowcode_error_message::error("backend", msg)

   /* How to compile a cluster */ 
   fun compile cluster =
   let cluster = ra::run cluster #  just run register allocation 
   in  assembler::asmEmit cluster    #  And output the assembly 
   end

   fun codegen (functionName, codetreeStms) =
   let 
         #  initialize all hidden states first 
          label::reset();  /* okay, just the label counters */ 
       /*
        * Extract the methods from a stream 
        */
       my stream as Stream::STREAM
          { begin_cluster,  #  start a cluster 
            end_cluster,    #  end a cluster 
            emit,          #  emit Codetree statement 
            define_local_label,   #  Define a local label 
            define_global_label,    #  Define an external entry 
            end_procedure,     #  mark the end of a procedure 
            pseudoOp,      #  emit a pseudo op 
            annotation,    #  Add an annotation 
            ... } =
            translate_codetree_to_target_machine::select_instructions
                (flow_graph_g::newStream { compile=compile, flowgraph=NULL } )
   in  begin_cluster 0;      #  start a new cluster 
       define_global_label functionName; #  Define the entry label 
       apply emit codetreeStms; #  emit all the statements 
         #  IMPORTANT: normally you'll have to call the other methods too 
       end_cluster []        #  end the cluster 
   end 
}
