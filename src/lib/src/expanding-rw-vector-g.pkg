## unbounded-rw-vector-g.pkg
#
# rw_vectors of unbounded length
#
# Compare with
#
#     src/lib/src/dynamic-rw-vector.pkg
#
# Do we need both?

# Compiled by:
#     src/lib/src/lib7.make6



###        "It is difficult to steer a parked car, so get moving."
###
###                                -- Henrietta Mears


# This generic gets invoked in:
#
#     src/lib/compiler/src/bignum/realconst.pkg
#     src/lib/compiler/front/typecheck-stuff/types/tuples.pkg


generic package expanding_rw_vector_g (

    a:  Monomorphic_Rw_Vector						# Monomorphic_Rw_Vector			is from   src/lib/std/src/monomorphic-rw-vector.api
)

: (weak) Monomorphic_Expanding_Rw_Vector				# Monomorphic_Expanding_Rw_Vector	is from   src/lib/src/monomorphic-expanding-rw-vector.api
{
    Element = a::Element;

    Rw_Vector = BLOCK  (Ref( a::Rw_Vector ), Element, Ref( Int ));
 
    exception SUBSCRIPT           =  exceptions::SUBSCRIPT;
    exception INDEX_OUT_OF_BOUNDS =  exceptions::INDEX_OUT_OF_BOUNDS;

    exception SIZE = exceptions::SIZE;

    fun rw_vector (size, default)
        =
        BLOCK (REF (a::make_rw_vector (size, default)), default, REF (-1));

    # from_list (l, v) creates an rw_vector using the list of values l
    # plus the default value v.
    # NOTE: Once Monomorphic_Rw_Vector includes arrayoflist, this will become trivial.
    #
    fun from_list (init_list, default)
        =
        {   len = length init_list;
	    arr = a::make_rw_vector (len, default);

	    fun set ([], _)    =>  ();
	        set (x ! r, i) =>  { a::set (arr, i, x);   set (r, i+1); };
            end;
	  
	    set (init_list, 0);
	    BLOCK (REF arr, default, REF (len - 1));
	};


    # Tabulate (size, fill, default) acts like rw_vector::tabulate,
    # plus  stores default value default.  Raises SIZE if size < 0.
    #
    fun tabulate (size, fill_g, default)
        =
	BLOCK (REF (a::tabulate (size, fill_g)), default, REF (size - 1));

    fun copy_rw_subvector (BLOCK (arr, default, bnd), lo, hi)
        =
        {   arrval = *arr;
	    bnd = *bnd;

	    fun copy i
                =
                a::get (arrval, i+lo);
          
            if   (hi <= bnd)  BLOCK (REF (a::tabulate (hi-lo,  copy)), default, REF (hi-lo));
            elif (lo <= bnd)  BLOCK (REF (a::tabulate (bnd-lo, copy)), default, REF (bnd-lo));
            else              rw_vector (0, default);
            fi;
        };

    fun default (BLOCK(_, default, _))
        =
        default;

    fun get (BLOCK (arr, default, _), idx)
        =
        (a::get (*arr, idx)) 
        except
            (SUBSCRIPT|INDEX_OUT_OF_BOUNDS) =  if (idx < 0)   raise exception SUBSCRIPT;
                                               else           default;
                                               fi;

    fun bound (BLOCK(_, _, bnd))
        =
        *bnd;

    fun expand (arr, oldlen, newlen, default)
        =
        a::tabulate (newlen, fillfn)
        where
            fun fillfn i
                =
                if (i < oldlen)   a::get (arr, i);
                else              default;
                fi;
        end;

    fun set (BLOCK (arr, default, bnd), idx, v)
        =
        {   len =  a::length *arr;
          
            if (idx >= len )
                 arr := expand (*arr, len, int::max (len+len, idx+1), default); 
            fi;

            a::set (*arr, idx, v);

            if (*bnd <  idx   )
                 bnd := idx;
            fi;
        };

    fun truncate (a as BLOCK (arr, default, bndref), size)
        =
        {   bnd = *bndref;
	    newbnd = size - 1;
	    arr_val = *arr;
	    array_size = a::length arr_val;

	    fun fill_default (i, stop)
                =
		if (i != stop)
		    #	
		    a::set (arr_val, i, default);
                    fill_default (i - 1, stop);
                fi;
          
            if (newbnd < 0)
		#
                bndref := -1;
                arr    :=  a::make_rw_vector (0, default);
            else
		if (newbnd < bnd)
		    #	
		    if (3 * size < array_size)
			#
			my BLOCK (arr', _, bnd')
			    =
			    copy_rw_subvector (a, 0, newbnd);

			bndref :=  *bnd';
			arr    :=  *arr';
		    else
			fill_default (bnd, newbnd);
		    fi;
		fi;
            fi;
        };

};							# generic package expanding_rw_vector_g



## COPYRIGHT (c) 1993 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
