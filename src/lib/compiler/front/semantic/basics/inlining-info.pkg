## inlining-info.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/core.make6



### 	"If I had eight hours to chop down a tree,
###      I'd spend six sharpening my axe."
###
###                       -- Abraham Lincoln



package inlining_info: (weak)      Inlining_Info {		# Inlining_Info	is from   src/lib/compiler/front/semantic/basics/inlining-info.api

    fun bug s
        =
        error_message::impossible ("inlining_info: " + s);

    exception EXCEPTION  (highcode_primitive_op::Primitive_Operation, types::Type);

    Inlining_Info =  inlining_information::Inlining_Information;

    inline_primitive =  inlining_information::INFO o EXCEPTION;
    inline_package   =  inlining_information::LIST;
    inline_nothing   =  inlining_information::NULL;

    fun match i { do_inline_primitive, do_inline_package, do_inline_nothing }
        =
	case i
	     inlining_information::INFO (EXCEPTION x)   =>   do_inline_primitive x;
	     inlining_information::INFO _               =>   bug "bogus Info node";
	     inlining_information::LIST l               =>   do_inline_package l;
	     inlining_information::NULL                 =>   do_inline_nothing ();
        esac;

    fun print_info i
        =
	cat (loop (i, []))
        where
	    fun loop (i, acc)
		=
		match i {   do_inline_primitive => fn (p, _)   =   highcode_primitive_op::pr_primop p ! acc,
			    do_inline_nothing   => fn ()       =   "<InlNo>" ! acc,
			    do_inline_package   => fn []       =>  "{ }" ! acc;
						      h ! t  =>  "{ " ! loop ( h,
										  fold_right (fn (x, a) =  ", " ! loop (x, a))
										  ("}" ! acc)
										  t
										);
						   end 
			};
	
	end;

    select_info   =   inlining_information::select;

    is_primitive_info   =   inlining_information::is_simple;

    fun is_callcc_primitive (inlining_information::INFO (EXCEPTION ((highcode_primitive_op::CALLCC | highcode_primitive_op::CAPTURE), _)))
	    =>
	    TRUE;

        is_callcc_primitive _
	    =>
	    FALSE;
    end;

    fun pure_info (inlining_information::INFO (EXCEPTION (p, _)))
	    =>
	    is_pure  p
            where 
	        fun is_pure highcode_primitive_op::CAST => TRUE;
		    is_pure _                          => FALSE;
                end;

	    #  isPure = highcode_primitive_op::purePrimop 

	    end;

        pure_info _
	    =>
	    FALSE;
    end;

    make_primitive_info = inline_primitive;
    make_package_info   = inline_package;
    null_info           = inline_nothing;
};
