#
# Dynamic (dense) rw_vector.
#
# -- Allen Leung


package DynArray:  
  api include Rw_Vector
      my fromArray:  rw_vector::Rw_Vector( X ) * X * Int -> Rw_Vector( X )
      my baseArray:  Rw_Vector( X ) -> rw_vector::Rw_Vector( X )
      my checkArray: Rw_Vector( X ) *  rw_vector::Rw_Vector( X ) -> Void
      my clear:      Rw_Vector( X ) * Int -> Void
      my expandTo:   Rw_Vector( X ) * Int -> Void
  end =
  pkg
     package a = rw_vector
     type Vector( X ) =  a::Vector( X )

     enum Rw_Vector X = ARRAY of Ref( a::Rw_Vector( X ) ) * X * Ref( Int )

     exception SUBSCRIPT           = exceptions::SUBSCRIPT
     exception INDEX_OUT_OF_BOUNDS = exceptions::INDEX_OUT_OF_BOUNDS;
     exception SIZE                = exceptions::SIZE
     exception UNIMPLEMENTED

     infix 9 sub

     maxLen = a::maxLen

     fun rw_vector (n, d) = ARRAY (REF (a::rw_vector (n, d)), d, REF 0) 
     fun clear (ARRAY (a, def, count), n) = (a := a::rw_vector (n, def); count := n)
     fun fromArray (a, d, n) = ARRAY (REF a, d, REF n)

     fun baseArray (ARRAY (REF a, _, _)) = a
     fun checkArray (ARRAY (REF a, _, _), a') = if a == a' then () else raise exception MATCH

     fun length (ARRAY (REF a, _, REF n)) = n

     fun (ARRAY (REF a, d, _)) sub i = a::sub (a, i) except _ => d
    
     fun update (ARRAY (r as REF a, d, n), i, e) =
        (a::update (a, i, e); n := int::max(*n, i+1)) except _ =>
            let new_size  = int::max (i+1,*n*2)
                new_size  = if new_size < 10 then 10 else new_size
                new_array = a::rw_vector (new_size, d)
            in  a::copy { src = a, si = 0, len = NULL, dst = new_array, di = 0 };
                r := new_array;
                n := i+1;
                a::update (new_array, i, e)
            end

     fun expandTo (arr as ARRAY(_, d, _), N) = update (arr, N - 1, d)

     fun extract (ARRAY (r as REF a, _, REF n), i, j) = a::extract (a, i, j)

     fun copy { src = ARRAY (REF a, _, size), si, len, dst, di } =
       let n = case len of THE l => si + l 
                             | NULL   => *size
           fun cp (i, j) = 
                if i < n then (update (dst, j, a::sub (a, i)); cp (i+1, j+1)) else ()
       in  cp (si, di)
       end

     fun copyVec { src, si, len, dst = ARRAY (REF a, _, size), di } = 
       a::copyVec { src = src, si = si, len = len, dst = a, di = di }

     fun tabulate (n, f) = 
         let rw_vector   = a::tabulate (n, f)
             default = a::sub (rw_vector, 0)
         in
             ARRAY (REF rw_vector, default, REF n)
         end except _ => raise exception SIZE

     fun from_list l =
         let rw_vector   = a::from_list l
             default = a::sub (rw_vector, 0)
         in
             ARRAY (REF rw_vector, default, REF (list::length l))
         end except _ => raise exception SIZE

     fun apply f (ARRAY (REF a, _, REF n)) = 
         a::keyed_apply (fn (_, x) => f x) (a, 0, THE n)

     fun fold_left f u (ARRAY (REF a, _, REF n)) = 
        a::keyed_fold_left (fn (_, x, y) => f (x, y)) u (a, 0, THE n)

     fun fold_right f u (ARRAY (REF a, _, REF n)) = 
        a::keyed_fold_right (fn (_, x, y) => f (x, y)) u (a, 0, THE n)

     fun modify f (ARRAY (REF a, _, REF n)) =  
        a::modifyi (fn (_, x) => f x) (a, 0, THE n)

     fun keyed_apply f (ARRAY (REF a, _, REF n), i, j) = a::keyed_apply f (a, i, j)

     fun keyed_fold_left f u (ARRAY (REF a, _, REF n), i, j) = a::keyed_fold_left f u (a, i, j)

     fun keyed_fold_right f u (ARRAY (REF a, _, REF n), i, j) = a::keyed_fold_right f u (a, i, j)

     fun modifyi f (ARRAY (REF a, _, REF n), i, j) = a::modifyi f (a, i, j)

end



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
