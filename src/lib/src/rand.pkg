## rand.pkg

# Compiled by:
#     src/lib/src/lib7.make6

# Random number generator taken from Paulson, pages 170-171.
# Recommended by Stephen K. Park and Keith W. Miller, 
# Random number generators: good ones are hard to find,
# CACM 31 (1988), 1192-1201
# Updated to include the new preferred multiplier of 48271
# CACM 36 (1993), 105-110
# Updated to use on unt31.
#
# Note: The Random package provides a better generator.


###               "The generation of random numbers is
###                too important to be left to chance."
###
###                               -- Robert Coveyou

###               "We must believe in luck.
###                For how else can we explain the
###                success of those we don't like?"
###
###                           -- Jean Cocteau



package rand: (weak)  Rand {		# Rand	is from   src/lib/src/rand.api

    Rand  = unt31::Unt;
    Rand' = int32::Int;  #  internal representation 

    my a:  Rand' = 48271;
    my m:  Rand' = 2147483647;  #  2^31 - 1 

    m_1 =  m - 1;

    q =  m / a;
    r =  m % a;

    ext_to_int = int32::from_large o unt31::to_large_int;
    int_to_ext = unt31::from_large_int o int32::to_large;

    my rand_min:  Rand = 0u1;
    my rand_max:  Rand = int_to_ext m_1;

    fun check 0u0 => 1;
        check 0ux7fffffff => m_1;
        check seed => ext_to_int seed;
    end;

    fun random' seed
        =
        {   hi = seed / q;
            lo = seed % q;
            test = a * lo - r * hi;
          
            test > 0   ??  test
                       ::  test + m;
        };

    random =  int_to_ext  o  random'  o  check;

    fun make_random seed
        =
        {   seed = REF (check seed);
          
           .{   seed := random' *seed;
                int_to_ext *seed;
            };
        };

    real_m = float::from_large_int (int32::to_large m);

    fun normalize s
        =
        (float::from_large_int (unt31::to_large_int s)) // real_m;

    fun range (i, j)
        = 
        if   (j < i )

            lib_base::failure { module=>"Random", func=>"range", msg=>"hi < lo"};

        elif (j == i)

	    fn _ = i;
	else
	    rrr = int32::from_int j - int32::from_int i;

	    convert = unt31::to_int_x o unt31::from_large_int o int32::to_large;

	    if (rrr == m)  unt31::to_int_x;
	    else           fn s =  i + convert ((ext_to_int s) % (rrr+1));
	    fi;
        fi;

};	#  rand 



## COPYRIGHT (c) 1991 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## COPYRIGHT (c) 1998 by AT&T Laboratories.       See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
