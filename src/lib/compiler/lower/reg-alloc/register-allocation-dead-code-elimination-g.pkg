## register-allocation-dead-code-elimination-g.pkg
#
# This is a hack module for removing dead code that are discovered by 
# the register allocator.  This module acts as a wrapper
# for the generic RA flowgraph module.
#
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



###               "There is nothing so useless
###                as doing efficiently that which
###                should not be done at all.'
###
###                         -- Peter Drucker

# We are invoked from:
#
#     src/lib/compiler/lower/x86/codetree/x86-register-allocation-g.pkg
#     src/lib/compiler/lower/x86/reg-alloc/x86-register-allocation-g.pkg

generic package
register_allocation_dead_code_elimination_g

   (flowgraph:  Register_Allocation_Flowgraph)				# Register_Allocation_Flowgraph	is from   src/lib/compiler/lower/reg-alloc/ra-flowgraph.api

   (
        cellkind:         cells_basis::Cellkind -> Bool;		#  Check for dead code on these cellkinds only 
        dead_regs:        int_hash_table::Hash_Table( Bool );		#  Dead registers are stored here. 
        affected_blocks:  int_hash_table::Hash_Table(  Bool );
        spill_init:       (flowgraph::g::Interference_Graph, cells_basis::Cellkind) -> Void; 
   )

: (weak) Register_Allocation_Flowgraph					# Register_Allocation_Flowgraph	is from   src/lib/compiler/lower/reg-alloc/ra-flowgraph.api

=
package {

    package f = flowgraph;

    include f;

    # We must save all the copy temporaries for this to work 
    #
    mode = register_allocation_core::save_copy_temps;

    fun is_on (flag, mask)
        =
        unt::bitwise_and (flag, mask) != 0u0;


    # New services that also removes dead code 
    #
    fun services f
	=
	{   (f::services f)
                ->
                { build, spill, block_num, instr_num, program_point };

	    # The following build method marks all pseudo registers
	    # that are dead, and records their definition points.
	    #	
	    fun find_dead_code (g::GRAPH { nodes, copy_tmps, mode, ... } )
		= 
		{   dead     = int_hash_table::set dead_regs; 
		    affected = int_hash_table::set affected_blocks;
		    affected_list = apply (fn d => affected (block_num d, TRUE); end );

		    # Mark all copy temporaries 
		    #
		    marker = [{ block=>0, instruction=>0 } ];

		    fun mark_copy_tmps []
                            =>
                            ();  

		        mark_copy_tmps (g::NODE { uses, ... } ! tmps)
                            =>
			    {   uses := marker;
                                mark_copy_tmps tmps;
                            };
                    end;

		    fun unmark_copy_tmps []
                            =>
                            ();

		        unmark_copy_tmps (g::NODE { uses, ... } ! tmps)
                            =>
			    {   uses := [];
                                unmark_copy_tmps tmps;
                            };
                    end;

		    fun enter(_, g::NODE { uses=>REF [], defs, number=>reg, ... } )
                            =>
			    # This is dead, but make sure it is not a copy temporary.
			    # Those cannot be eliminated.
			    {   affected_list *defs;
                                dead (reg, TRUE);
                            };

		        enter _ => ();

                    end;

		    mark_copy_tmps *copy_tmps;
		    int_hash_table::keyed_apply enter nodes;
		    unmark_copy_tmps *copy_tmps;

		    if (not (is_on (mode, register_allocation_core::has_parallel_copies)) )
			copy_tmps := [];
		    fi;				 #  Clean up now 
		};


	    # Build the graph, then remove dead code.
	    #
	    fun build_it (graph, kind)
		=  
		moves
                where
		    moves = build (graph, kind);

		    if (cellkind kind)   find_dead_code  graph;   fi;
		end;

	    fun spill_it (arg as { graph, cellkind, ... } )
                = 
		{   spill_init (graph, cellkind);
                    spill arg;
                };

	    { build => build_it,
              spill => spill_it,
              program_point,
              block_num,
              instr_num
            };
	};

};
