## ra-bitmatrix.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# Bit Matrix routines

package register_allocation_bitmatrix: (weak)  Register_Allocation_Bitmatrix {		# Register_Allocation_Bitmatrix	is from   src/lib/compiler/lower/reg-alloc/ra-bitmatrix.api


    package w= unt;			# unt		is from   src/lib/std/unt.pkg
    package a= rw_vector;		# rw_vector	is from   src/lib/std/src/rw-vector.pkg
    package ua= unsafe::rw_vector;	# unsafe	is from   src/lib/std/src/unsafe/unsafe.pkg

    Bit_Matrix
        = 
	BIT_MATRIX
          { table: Hash_Table, 
	    elems: Ref( Int ),
	    edges: Int
          }
    also
    Hash_Table
      = SMALL  (Ref( rw_vector::Rw_Vector( List( Unt ) ) ), Unt)
      | LARGE  (Ref( rw_vector::Rw_Vector( Bucket      ) ), Unt)
   #  | BITMATRIX    rw_unt8_vector::Rw_Vector 

    also
    Bucket = NIL | BUCKET  (Int, Int, Bucket); 

    exception NODES;

    fun hash_fun (i, j, shift, size)
	= 
	{   i    = w::from_int i;
	    j    = w::from_int j;
	    h    = w::(+) (w::(<<) (i, shift), w::(+) (i, j));
	    mask = w::(-) (w::from_int size, 0u1);
	    w::to_int_x (w::bitwise_and (h, mask));
	};

    empty
        =
        BIT_MATRIX { table => SMALL (REF (a::make_rw_vector (2, [])), 0u0),
             elems => REF 0,
             edges => 0
           };


 #   indices = a::rw_vector (1024, 0)
 #
 #   fun init (i, j) =
 #       if i < 1024 then
 #	  (a::update (indices, i, j); init (i+1, i+j+1))
 #       else ()
 #
 #   my _ = init (0, 0)

    fun size (BIT_MATRIX { elems, ... } )
        =
        *elems;

    fun edges (BIT_MATRIX { table=>SMALL (REF table, _), ... } ) => a::length table;
        edges (BIT_MATRIX { table=>LARGE (REF table, _), ... } ) => a::length table;
    #   edges (BIT_MATRIX { table=BITMATRIX _, edges,    ... } ) => edges;
    end;

    fun member (BIT_MATRIX { table=>SMALL (table, shift), ... } )
            =>
	    (fn (i, j)
                =
	        {   my (i, j)
                        =
                        if (i < j)   (i, j);
                        else         (j, i);
                        fi;

	            k = w::(+) (w::(<<) (w::from_int i, 0u15), w::from_int j);

	            fun find [] => FALSE;
		        find (k' ! b)   =>   k == k' or find b;
                    end;

	            tab = *table;
	            find (ua::get (tab, hash_fun (i, j, shift, a::length tab)));
                }
	    );

        member (BIT_MATRIX { table=>LARGE (table, shift), ... } )
            =>
	    (fn (i, j)
		=
	        {   my (i, j)
                        =
                        if (i < j)   (i, j);
                        else         (j, i);
                        fi;

	            fun find NIL => FALSE;
		        find (BUCKET(i', j', b))   =>   i == i' and j == j' or find b;
                    end;

	            tab = *table;

	            find (ua::get (tab, hash_fun (i, j, shift, a::length tab)));
                }
	    );
    end;

 #      member (BIT_MATRIX { table=BITMATRIX table, ... } ) =
 #       (fn (i, j) => 
 #	let my (i, j) = if i > j then (i, j) else (j, i)
 #	    bit   = w::from_int (ua::get (indices, i) + j)
 #	    index = w::toIntX (W.>>(bit, 0u3))
 #	    mask  = W.<<(0u1, w::bitwise_and (bit, 0u7))
 #	in  w::bitwise_and (w::from_int (W8::toInt (UW8A::sub (table, index))), mask) != 0u0 
 #	end
 #       )


    fun add (BIT_MATRIX { table=>SMALL (table, shift), elems, ... } )
	    =>
	    insert
	    where
	        fun insert (i, j)
		    =
		    {   my (i, j)
			    =
			    if (i < j)   (i, j);
			    else         (j, i);
			    fi;

			tab = *table;

			len = a::length tab;

			if (*elems < len)
			    index = hash_fun (i, j, shift, len);
			    k = w::(+) (w::(<<) (w::from_int i, 0u15), w::from_int j);

			    fun find [] => FALSE;
				find (k' ! b)   =>   k == k' or find b;
			    end;

			    b = ua::get (tab, index);

			    if (find b)
				 FALSE;
			    else
				 ua::set (tab, index, k ! b); 
				 elems := *elems + 1; TRUE;
			    fi;

			else
			    # Grow table:
			    # 
			    old_table = tab;
			    old_size  = a::length old_table;
			    new_size  = old_size + old_size;
			    new_table = a::make_rw_vector (new_size,[]);

			    fun enter n
				=
				if (n < old_size )

				    loop (ua::get (old_table, n), [], [])
                                    where
					fun loop ([], a, b)
						=> 
						{   ua::set (new_table, n, a);
						    ua::set (new_table, n + old_size, b);
						    enter (n+1);
						};

					    loop (k ! l, a, b)
						=>
						{   i = w::to_int_x (w::(>>) (k, 0u15));  
						    j = w::to_int_x (w::(-) (k, w::(<<) (w::from_int i, 0u15)));

						    (hash_fun (i, j, shift, new_size) == n) 
							??  loop (l,  k ! a,      b)
						        ::  loop (l,      a,  k ! b);
						};
					end;
				    end;

                                fi;

			    table := new_table;
			    enter 0; 
			    insert (i, j);
			fi; 
		    };
	    end;

        add (BIT_MATRIX { table=>LARGE (table, shift), elems, ... } )
		=>
		insert
		where
		    fun insert (i, j)
			=
			{   my (i, j) = if (i < j ) (i, j); else (j, i);fi;
			    tab = *table;
			    len = a::length tab;

			    if (*elems < len)

				index = hash_fun (i, j, shift, len);

				fun find NIL => FALSE;
				    find (BUCKET(i', j', b))   =>   i == i' and j == j' or find b;
                                end;

				b = ua::get (tab, index);

				if (find b)
                                     FALSE;
				else
                                     ua::set (tab, index, BUCKET (i, j, b)); 
				     elems := *elems + 1;
                                     TRUE;
                                fi;

			    else #  grow table 

			        old_table = tab;
				old_size  = a::length old_table;
				new_size  = old_size + old_size;
				new_table = a::make_rw_vector (new_size, NIL);

				fun enter n
				    =
				    if (n < old_size)

				         loop (ua::get (old_table, n), NIL, NIL)
                                         where
					     fun loop (NIL, a, b)
						     => 
						     {   ua::set (new_table, n, a);
							 ua::set (new_table, n + old_size, b);
							 enter (n+1);
						     };

						 loop (BUCKET(i, j, l), a, b)
						     =>
						     if (hash_fun (i, j, shift, new_size) == n) 
							  loop (l, BUCKET (i, j, a), b);
						     else loop (l, a, BUCKET (i, j, b));
						     fi;
					     end;
					 end;
				    fi;

				table := new_table;
				enter 0; 
				insert (i, j);
                            fi; 
			};			# fun insert
		end;
    end;

 #     | add (BIT_MATRIX { table=BITMATRIX table, ... } ) =
 #       (fn (i, j) =>
 #	let my (i, j) = if i > j then (i, j) else (j, i)
 #	    bit   = w::from_int (ua::get (indices, i) + j)
 #	    index = w::toIntX (W.>>(bit, 0u3))
 #	    mask  = W.<<(0u1, w::bitwise_and (bit, 0u7))
 #	    value = w::from_int (W8::toInt (UW8A::sub (table, index)))
 #	in  if w::bitwise_and (value, mask) != 0u0 then FALSE
 #	    else (UW8A::update (table, index, 
 #		    W8::from_int (w::toIntX (w::bitwise_or (value, mask)))); TRUE) 
 #	end
 #       )


    fun delete (BIT_MATRIX { table=>SMALL (table, shift), elems, ... } )
            =>
	    (fn (i, j)
                =
	        {   k = w::(+) (w::(<<) (w::from_int i, 0u15), w::from_int j);

	            fun find []
                            =>
                            [];

		        find (k' ! b)
                            =>
		            if (k == k')
                                elems := *elems - 1;
                                b;
                            else
                                k' ! find b;
                            fi;
                    end;

		    tab = *table;
		    index = hash_fun (i, j, shift, a::length tab);
		    n = *elems;
	            ua::set (tab, index, find (ua::get (tab, index)));
	            *elems != n;
	        }
	    );

        delete (BIT_MATRIX { table=>LARGE (table, shift), elems, ... } )
            =>
	    (fn (i, j)
                =
	        {   fun find NIL
                            =>
                            NIL;

		        find (BUCKET(i', j', b))
                            =>
		            if (i == i' and j == j')
                                 elems := *elems - 1;
                                 b;
		            else
                                 BUCKET (i', j', find b);
                            fi;
                    end;

		    tab = *table;
		    index = hash_fun (i, j, shift, a::length tab);
		    n = *elems;
	            ua::set (tab, index, find (ua::get (tab, index)));
		    *elems != n;
	        }
	    );
    end;			# fun delete

 #     | delete (BIT_MATRIX { table=BITMATRIX table, ... } ) =
 #       (fn (i, j) =>
 #	let my (i, j) = if i > j then (i, j) else (j, i)
 #	    bit   = w::from_int (ua::get (indices, i) + j)
 #	    index = w::toIntX (W.>>(bit, 0u3))
 #	    mask  = W.-(W.<<(0u1, w::bitwise_and (bit, 0u7)), 0u1)
 #	    value = w::from_int (W8::toInt (UW8A::sub (table, index)))
 #	in  if w::bitwise_and (value, mask) == 0u0 then FALSE
 #	    else (UW8A::update (table, index, 
 #			  W8::from_int (w::toIntX (w::bitwise_and (value, w::bitwise_not mask)))); 
 #		  TRUE) 
 #	end
 #       )

};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
