local use ml_grinder
in
package lib7_nlffi_gen_info:  Lib7_Nlffi_Gen_Info {
 
    package a  = Ast
    package u  = AstUtil
    package re = RE

    enum interface = LIGHT | HEAVY

    #  Naming 
    fun filenameToCname filename
	=
	{   base =   winix::path::base filename;
	    re::replace "^.*-+" "" base;
	}

    fun tick LIGHT x = x^"'"
      | tick HEAVY x = x


    fun structnameToCname s
        = 
	if      re::matches "^F_" s            then re::replace "^F_" "" s
	else if re::matches "^[SU]_.*'[0-9]" s then re::replace "^[SU]_+" "" s
	else if re::matches "^I?[SU].*'" s     then re::replace "^.*'" "" s 
	else if re::matches "^I?[SU]T?_" s     then re::replace "^I?[SU]T?_" "" s
	else raise exception FAIL ("structnameToCname: "$s)

    fun structnameToMLname s
        = 
	if re::matches "^[SU]_[0-9]" s
        then s #  Don't strip it 
	else
	      {   s =   structnameToCname s;
		  s =   re::replace "^'" "" s;
		  s =   re::replace "^_+" "" s;		#  strip leading _ 
	          s;
	      }

    fun structnameToMLFunname s
        = 
	{   s = re::replace "^F_" "" s; 

	    if    re::matches "^_" s   then  "f"$s
                                       else  s;
	}

    isAnonymousStruct =   re::matches "^[SU]T?_'?[0-9]"

    exception NoRTTI of a::ty

    typPath  = ["C", "T"]
    sizePath = ["C", "S"]
    ptrSize  = a::IDexp (a::IDENT (sizePath, "ptr"))
    fptrSize  = a::IDexp (a::IDENT (sizePath, "fptr"))

    pointer = a::IDexp (a::IDENT (typPath, "pointer"))
    ro      = a::IDexp (a::IDENT (typPath, "ro"))
    arr     = a::IDexp (a::IDENT (typPath, "arr"))
    dim'    = a::IDexp (a::IDENT (typPath, "dim'"))

    fun pointerOf t  = a::APPexp (pointer, t)
    fun roOf t       = a::APPexp (ro, t)
    fun arrOf (t, dim) = a::APPexp (arr, a::TUPLEexp[t, dim])

    fun App (path, f, x) = a::APPexp (a::IDexp (a::IDENT (path, f)), x)

    #  Given an type expression, return runtime type info 
    fun typOf (t as a::IDty (a::IDENT([], ty))) =
	(case ty of
	   ("sint" | "uint" | "schar" | "uchar" |
	    "sshort" | "ushort" | "slong" | "ulong" |
	    "float" | "double" | "voidptr") => a::IDexp (a::IDENT (typPath, ty))
	| _ => raise exception NoRTTI t
	)
      | typOf (a::IDty (a::IDENT (SU, "tag"))) = a::IDexp (a::IDENT (SU, "type"))
      | typOf (t as a::APPty (a::IDENT([], f), args)) =
	(case (f, args) of 
	  (("ptr" | "ptr'"),[ty]) => pointerOf (typOf ty)
	| (("obj" | "obj'"),[ty, mode]) => modeOf (mode, typOf ty)
	| ("su",[ty]) => typOf ty
	| (("arr" | "arr'"),[ty, dim]) => arrOf (typOf ty, dimOf dim)
	| _ => raise exception NoRTTI t
	)
      | typOf ty = raise exception NoRTTI ty

    and dimOf (a::IDty (a::IDENT([], "dim"))) = dim'
      | dimOf (t as a::APPty (a::IDENT([], dg),[ty])) =
	if re::matches "^dg[0-9]$" dg then
	    a::APPexp (a::IDexp (a::IDENT (typPath, dg$"'")), dimOf ty)
	else 
	   raise exception FAIL("dimOf: "$Ty::show t)
      | dimOf ty = raise exception FAIL("dimOf: "$Ty::show ty)

    and modeOf (a::IDty (a::IDENT([], "ro")), type) = roOf type
      | modeOf(_, type) = type

    and sizeTy t = a::APPty (a::IDENT(["C", "S"], "size"),[t])

    #  Given an type expression, return runtime size info 
    and sizeOf (t as a::IDty (a::IDENT([], ty))) =
	(case ty of
	   ("sint" | "uint" | "schar" | "uchar" |
	    "sshort" | "ushort" | "slong" | "ulong" |
	    "float" | "double" | "voidptr") => a::IDexp (a::IDENT (sizePath, ty))
	|  _ => raise exception NoRTTI t
	)
      | sizeOf (a::IDty (a::IDENT (SU, "tag"))) = a::IDexp (a::IDENT (SU, "size"))
      | sizeOf (t as a::APPty (a::IDENT([], f), args)) =
	(case (f, args) of 
	   (("ptr" | "ptr'"), _) => 
	     a::TYPEDexp (ptrSize, sizeTy (a::APPty (a::IDENT([], "ptr"), args)))
	 | (("fptr" | "fptr'"), _) => 
	     a::TYPEDexp (fptrSize, sizeTy (a::APPty (a::IDENT([], "fptr"), args)))
	 | ("su", [ty]) => sizeOf ty
	 | (("obj" | "obj'"), [ty, _]) => sizeOf ty
	 | _ => raise exception NoRTTI t
	)
      | sizeOf t = raise exception NoRTTI t

    #  Given an type expression, return its get function 
    fun getSetOf path interface (t as a::IDty (a::IDENT([], ty))) =
	(case ty of
	   ("sint" | "uint" | "schar" | "uchar" |
	    "sshort" | "ushort" | "slong" | "ulong" |
	    "float" | "double" | "voidptr") => 
	       a::IDexp (a::IDENT (path, tick interface ty))
	| ("ubf" | "sbf") => a::IDexp (a::IDENT (path, ty))
	|  _ => raise exception NoRTTI t
	)
      | getSetOf path interface (t as a::APPty (a::IDENT([], f), args)) =
	(case (f, args) of 
	   (("ptr" | "ptr'"), _) => a::IDexp (a::IDENT (path, tick interface "ptr"))
	 | (("fptr" | "fptr'"), _) => a::IDexp (a::IDENT (path, tick interface "fptr"))
	 | ("obj", [ty, _]) => getSetOf path HEAVY ty
	 | ("obj'", [ty, _]) => getSetOf path LIGHT ty
	 | _ => raise exception NoRTTI t
	)
      | getSetOf _ _ t = raise exception NoRTTI t

    getOf = getSetOf ["C", "Get"]
    setOf = getSetOf ["C", "Set"]


    #  Create a tag definition 

    fun tagDecl { ty, name, su }
	=
	{   fun make t
                =
                "t_"$str t$" ";

	    tag  =   string::cat (map make (string::explode name));

	    A.@@@["local use Tag",
		"in",
		"    type "$ty$" = " $tag$ " " $su,
		"end"
	       ];
	}

    signedTy   =   a::IDty (a::IDENT(["mlrep", "Signed"],   "int" ))
    unsignedTy =   a::IDty (a::IDENT(["mlrep", "Unsigned"], "word"))
    realTy     =   a::IDty (a::IDENT(["mlrep", "Float"],     "real"))

    fun repTy interface (ty as a::IDty (a::IDENT([], t)))
        =
	 (case t of
	   ("sint" | "schar" | "sshort" | "slong") => signedTy
	 | ("uint" | "uchar" | "ushort" | "ulong") => unsignedTy
	 | ("float" | "double") => realTy
	 | _ => ty
	 )
      | repTy interface (ty as a::APPty (a::IDENT (path, f), args)) = 
	(case f of 
	   ("ptr" | "ptr'") => a::APPty (a::IDENT (path, tick interface "ptr"), args) 
	 | ("fptr" | "fptr'")  => 
	    a::APPty (a::IDENT (path, tick interface "fptr"), args) 
	 | ("su" | "arr") => ty
	 | ("obj" | "obj'") => ty
	 | "enum" => signedTy #  XXX 
	 | _ => raise exception NoRTTI ty
	)
      | repTy _ t = raise exception NoRTTI t



    #  Remove all generated enum stuff by c-glue-maker 

    fun noBuiltinEnums decl
	=
	{   isEnum =   re::matches "^E_";

	    fun exp e
                = 
		case e of
		  a::IDexp (a::IDENT([E], "c2sint")) =>
		    if isEnum E then a::IDexp (a::IDENT(["Cvt"], "ml_sint")) else e
		| a::IDexp (a::IDENT([E], "sint2c")) => 
		    if isEnum E then a::IDexp (a::IDENT(["Cvt"], "c_sint")) else e
		| a::IDexp (a::IDENT([E], "type")) => 
		    if isEnum E then a::IDexp (a::IDENT(["C", "T"], "sint")) else e
		| a::IDexp (a::IDENT(["T"], "enum")) => a::IDexp (a::IDENT(["T"], "sint"))
		| a::APPexp (a::IDexp (a::IDENT([E], "c")), a) =>
		    if isEnum E then a::APPexp (a::IDexp (a::IDENT(["Cvt"], "c_sint")), a) 
		    else e
		| a::APPexp (a::IDexp (a::IDENT([E], "ml")), a) =>
		    if isEnum E then a::APPexp (a::IDexp (a::IDENT(["Cvt"], "ml_sint")), a)
		    else e
		| a::APPexp (a::IDexp (a::IDENT(["Cvt"], "i2c_enum")), a) =>
		    a::APPexp (a::IDexp (a::IDENT(["Cvt"], "c_sint")), a)
		| a::APPexp (a::IDexp (a::IDENT(["Cvt"], "c2i_enum")), a) =>
		    a::APPexp (a::IDexp (a::IDENT(["Cvt"], "ml_sint")), a)
		| e => e;

	    fun ty t = 
		case t of
		  a::IDty (a::IDENT([E], "mlrep")) =>
		    if isEnum E then a::IDty (a::IDENT(["mlrep", "Signed"], "int"))
		    else t
		| a::IDty (a::IDENT([E], "type")) =>
		    if isEnum E then a::IDty (a::IDENT([], "sint"))
		    else t
		| a::APPty (a::IDENT([], "enum"),[_]) => a::IDty (a::IDENT([], "sint"))
		| t => t;

	    decl::map[Map::E exp, Map::T ty] decl;
	}


    #  Code generation 
    package code {

       fun apply i (p, x, y) = a::APPexp (a::IDexp (a::IDENT (p, tick i x)), y)
       fun applyX i (p, x, y) = apply i (p, x, u::ID y)
       fun ignore e = a::VALdecl[a::VALbind (a::TUPLEpat [], e)]
       fun new i (x, ty) = u::MY (x, apply i (["C"], "new", sizeOf ty))
       fun alloc i (x, n, ty) = 
	      u::MY (x, a::APPexp (apply i (["C"], "alloc", sizeOf ty),
				 a::LITexp (a::WORDlit (unt::from_int n))))
       fun discard i x = ignore (applyX i (["C"], "discard", x))
       fun free i x = ignore (applyX i (["C"], "free", x))
       fun dupML i (x, y) = u::MY (x, applyX i (["ZString"], "dupML", y))
       fun toML i (x, y) = u::MY (x, applyX i (["ZString"], "toML", y))

       fun & i (x, y) = 
	   u::MY (x, a::APPexp (a::IDexp (a::IDENT(["C", "Ptr"],
			       case i of LIGHT => "enref'" | HEAVY => "enref")),
			    u::ID y))
    }



    package t {

	fun any _ = TRUE

	fun id f (a::IDty (a::IDENT([], x))) = f x
	  | id _ _ = FALSE

	prim = id any

	fun primObj f g (a::APPty (a::IDENT([], obj),[t])) =
	      re::matches "_obj$" obj and f t and g obj
	  | primObj _ _ _ = FALSE

	fun AnyTy tc (f, rw) (a::APPty (a::IDENT([], tc'), [t, r])) = 
				   tc=tc' and rw r and f t
	  | AnyTy _ _ _ = FALSE

	fun AnyPtr ptr f (a::APPty (a::IDENT([], p), [t])) = ptr=p and f t
	  | AnyPtr _ _ _ = FALSE

	fun rw (a::IDty (a::IDENT([], "rw"))) = TRUE | rw _ = FALSE
	fun ro (a::IDty (a::IDENT([], "ro"))) = TRUE | ro _ = FALSE

	ptr  = AnyPtr "ptr"
	ptr' = AnyPtr "ptr'"
	obj  = AnyTy "obj"
	obj' = AnyTy "obj'"
	arr  = AnyTy "arr"
	arr' = AnyTy "arr'"

	fun getRW (a::IDty (a::IDENT([], x))) = x
	  | getRW t = raise exception FAIL ("getRW: "$Ty::show t)

	fun getObj (a::APPty (a::IDENT([], "obj"),[t, rw])) = THE (t, getRW rw)
	  | getObj (a::APPty (a::IDENT([], "su_obj"),[t, rw])) =
	     THE (a::APPty (a::IDENT([], "su"),[t]), getRW rw)
	  | getObj (a::APPty (a::IDENT([], obj),[t as a::IDty _])) =
	    (case re::grep "^(.*)_obj$" obj of
	      THE[x] => THE (a::IDty (a::IDENT([], x)), getRW t)
	    | _ => NULL
	    )
	  | getObj _ = NULL

	fun getTy ptr (a::APPty (a::IDENT([], p),[t])) =
	    if p == ptr then getObj t else NULL
	  | getTy _ _ = NULL

	getPtr  = getTy "ptr"
	getPtr' = getTy "ptr'"
    }

    package raw {

	fun bytesOf s
	    =
	    unt::toIntX (c::s::toWord s);

	fun bytes (a::IDty (a::IDENT([], "schar"))) = bytesOf c::s::schar
	  | bytes (a::IDty (a::IDENT([], "uchar"))) = bytesOf c::s::uchar
	  | bytes (a::IDty (a::IDENT([], "sshort"))) = bytesOf c::s::sshort
	  | bytes (a::IDty (a::IDENT([], "ushort"))) = bytesOf c::s::ushort
	  | bytes (a::IDty (a::IDENT([], "sint"))) = bytesOf c::s::sint
	  | bytes (a::IDty (a::IDENT([], "uint"))) = bytesOf c::s::uint
	  | bytes (a::IDty (a::IDENT([], "slong"))) = bytesOf c::s::slong
	  | bytes (a::IDty (a::IDENT([], "ulong"))) = bytesOf c::s::ulong
	  | bytes (a::IDty (a::IDENT([], "float"))) = bytesOf c::s::float
	  | bytes (a::IDty (a::IDENT([], "double"))) = bytesOf c::s::double
	  | bytes (a::APPty (a::IDENT([], ("ptr'" | "ptr")), _)) = bytesOf c::s::ptr
	  | bytes t = raise exception NoRTTI t;

	fun access (a::IDty (a::IDENT([], x))) = x
	  | access (a::APPty (a::IDENT([], ("ptr'" | "ptr")), _)) = "ptr"
	  | access t = raise exception NoRTTI t;

	fun roundToWords  n =   (n + 3) div 4;
	fun roundToDwords n =   (n + 7) div 8;
	fun words t         =   (bytes t + 3) div 4;

	fun alloc (x, ty, n)
	    = 
	    {   size =   bytes ty;

		my (a, n)
                    = 
		    if   size == 8
                    then
		         ("c_alloc64", roundToDwords (size * n))
		    else
		         ("c_alloc", roundToWords (size * n));

	        u::MY (x, App(["c_ext"], a, u::INTexp n));
	    }

	fun set (x, ty, i, y)
	    = 
	    {   n =   bytes ty ;

	        u::MY("_", App(["c_ext", "Set"], access ty,
			   a::TUPLEexp[u::ID x, u::WORDexp (unt::from_int (i*n)), u::ID y]));
	    }

	fun get (x, y, ty, i)
	    = 
	    {   n =   bytes ty;

	        u::MY (x, App(["c_ext", "Get"], access ty,
			     a::TUPLEexp[u::ID y, u::WORDexp (unt::from_int (i*n))]));
	    }

	fun c_string (x, y)
	    =
	    u::MY (x, App(["c_ext"], "c_string", u::ID y))

	 /*
	    a::SEQdecl[
	       u::MY (x, App(["c_ext"], "c_string", u::ID y)),
	       comment["Empty string is broken in smlnj!"],
	       u::MY (x, a::IFexp (App(["c_ext"], "boxed", u::ID x),
			  u::ID x,
			  a::LETexp([u::MY (x, App(["c_ext"], "c_alloc", u::INTexp 1))],
			     [App(["c_ext", "Set"], "uchar",
				  a::TUPLEexp[u::ID x, u::WORDexp 0w0, u::WORDexp 0w0]),
			      u::ID x
			     ])))
	   ]
	  */
    }
};
end;



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
