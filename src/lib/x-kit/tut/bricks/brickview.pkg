## brickview.pkg

# Compiled by:
#     src/lib/x-kit/tut/bricks/bricks.make6


stipulate
    include threadkit;					# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xg  =  xgeometry;				# xgeometry			is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xi  =  xinput;				# xinput			is from   src/lib/x-kit/xclient/xinput.pkg
    #
    package bdr =  border;				# border			is from   src/lib/x-kit/widget/wrapper/border.pkg
    package lbl =  label;				# label				is from   src/lib/x-kit/widget/leaf/label.pkg
    package sz  =  size_preference_wrapper;		# size_preference_wrapper	is from   src/lib/x-kit/widget/wrapper/size-preference-wrapper.pkg
    package w   =  widget;				# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
    package wt  =  widget_types;			# widget_types			is from   src/lib/x-kit/widget/basic/widget-types.pkg
    #
    package bu  =  brick_util;				# brick_util			is from   src/lib/x-kit/tut/bricks/brick-util.pkg
herein

    package brick_view:   Brick_View {			# Brick_Util			is from   src/lib/x-kit/tut/bricks/brick-util.pkg


	Brick_View
	    =
	    BRICK_VIEW
	      {
		widget:        w::Widget,
		#
		highlight:     Bool -> Void,
		#
		set_text_fn:   String -> Void,
		show_view_fn:  String -> Void,
		end_view_fn:   String -> Void,
		#
		mark_view_fn:  Void -> Void,
		norm_view_fn:  Void -> Void
	      };

	fun make_brick_view
		root_window
		(pt, brick_slot, palette:  bu::Palette)
	    =
	    {   foo = palette.brick;

		label
		    =
		    lbl::make_label  root_window
		      {
			label =>  "",
			font  =>  THE bu::brick_font,
			align =>  wt::HCENTER,
			#
			foreground =>  NULL,
			background =>  THE (.brick palette)
		      };

		widget'
		    =
		    sz::make_tight_sized_preference_wrapper
		      (
			lbl::as_widget label,

			xg::SIZE { wide =>  bu::brick_size_h,
			           high =>  bu::brick_size_v
			         }
		      );

		border
		    =
		    bdr::make_border
		      {
			color =>  THE palette.dark_lines,
			width =>  1,
			child =>  widget'
		      };

		my (widget, revt)
		    =
		    w::filter_mouse (bdr::as_widget border);

		plea_slot
		    =
		    make_mailslot ();


		fun set_text  text  me
		    =
		    {   lbl::set_label label (lbl::TEXT text);
			me;
		    };


		fun show_text (backc, borderc) txt _
		    =
		    {   lbl::set_background  label backc;

			lbl::set_label label (lbl::TEXT txt);

			bdr::set_color border borderc;
			borderc;
		    };

		show_view = show_text (palette.concrete, THE palette.light_lines);
		end_view  = show_text (palette.brick,    THE palette.light_lines);

		mark_view = show_text (palette.mark,     THE palette.dark_lines) "ok";
		norm_view = show_text (palette.brick,    THE palette.dark_lines) "";

		hilite = THE palette.highlight_lines;

		fun highlight TRUE  me =>  { bdr::set_color border hilite;  me; };
		    highlight FALSE me =>  { bdr::set_color border me;      me; };
		end;

		fun handle_mouse (xi::MOUSE_FIRST_DOWN { button, ... }, _)
			=>
			{    give (brick_slot, bu::DOWN (button, pt));
			     TRUE;
			};

		    handle_mouse (xi::MOUSE_LAST_UP { button, ... }, TRUE)
			=>
			{   give (brick_slot, bu::UP (button, pt));
			    FALSE;
			};

		    handle_mouse (xi::MOUSE_LEAVE _, TRUE)
			=>
			{   give (brick_slot, bu::CANCEL pt);
			    FALSE;
			};

		    handle_mouse (_, me)
			=>
			me;
		end;


		fun main ((m, _), me)
		    =
		    loop me
		    where
			fun loop (updown, border)
			    =
			    for (;;) {
				#
				select [
				    #
				    m   ==>
					(fn envelope = (handle_mouse  (xi::envelope_contents  envelope,  updown), border)),

				    take' plea_slot
					==>
					(fn f = (updown, f border))
				];
			    };
		    end;

		fun init_loop ()
		    =
		    loop (FALSE, THE palette.dark_lines)
		    where
			fun loop (me as (updown, border))
			    =
			    select [

				revt ==>
				    (fn event =  main (event, me)),

				take' plea_slot
				    ==>
				    (fn f = loop (updown, f border))
			    ];
		    end;


		make_thread  "brickview"  init_loop;

		BRICK_VIEW
		  {
		    widget,
		    #
		    highlight    =>  fn b  =  give (plea_slot, highlight b),
		    set_text_fn  =>  fn t  =  give (plea_slot, set_text t),
		    #
		    show_view_fn =>  fn t  =  give (plea_slot, show_view t),
		    end_view_fn  =>  fn t  =  give (plea_slot, end_view t),
		    #
		    norm_view_fn =>  fn () =  give (plea_slot, norm_view),
		    mark_view_fn =>  fn () =  give (plea_slot, mark_view)
		  };
	    };

	fun as_widget (BRICK_VIEW { widget, ... } )
	    =
	    widget;

	fun show_view (BRICK_VIEW { show_view_fn, ... } ) text =  show_view_fn text;
	fun end_view  (BRICK_VIEW { end_view_fn,  ... } ) text =  end_view_fn  text;

	fun mark_view (BRICK_VIEW { mark_view_fn, ... } ) =  mark_view_fn ();
	fun norm_view (BRICK_VIEW { norm_view_fn, ... } ) =  norm_view_fn ();

	fun set_text
		(BRICK_VIEW { set_text_fn, ... } )
		text
	    =
	    set_text_fn  text;

	fun highlight_on  (BRICK_VIEW { highlight, ... } ) =  highlight TRUE;
	fun highlight_off (BRICK_VIEW { highlight, ... } ) =  highlight FALSE;

    };

end;



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
