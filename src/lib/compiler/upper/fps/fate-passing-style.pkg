## fate-passing-style.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



###             "He who walks with truth generates life."
###
###                                 -- Sumerian saying



package fate_passing_style {

    stipulate

        package pt
            =
            highcode_data_representation;

	fun bug s
            =
            error_message::impossible ("FPS:" + s);

    herein

	Record_Kind
	  = RK_VECTOR
	  | RK_RECORD
	  | RK_SPILL
	  | RK_ESCAPE
	  | RK_EXN
	  | RK_CONT
	  | RK_FCONT
	  | RK_KNOWN
	  | RK_BLOCK
	  | RK_FBLOCK
	  | RK_I32BLOCK;

	Pkind = VPT | RPT  Int | FPT  Int;

	Fps_Type = INTT | INT32T | PTRT  Pkind
		     | FUNT | FLTT | CNTT | DSPT;

	package p {

	    # numkind includes kind and size:
	    #
	    Numkind = INT  Int | UINT  Int | FLOAT  Int;

	    Arithop = ADD | SUBTRACT | MULTIPLY | DIVIDE | NEGATE | ABS 
			     | FSQRT | FSIN | FCOS | FTAN 
			     | LSHIFT | RSHIFT | RSHIFTL | BITWISEAND | BITWISEOR | BITWISEXOR | BITWISENOT
			     | REM | DIV | MOD;

	    Compare_Op = GT | GE | LT | LE | EQL | NEQ;

	    # fcmpop conforms to the IEEE std 754 predicates.
	    #
	    Ieee754_Floating_Point_Compare_Op 
	      = F_EQ  #  = 
	      | F_ULG #  ?<> 
	      | F_UN  #  ? 
	      | F_LEG #  <=>
	      | F_GT  #  > 
	      | F_GE  #  >= 
	      | F_UGT #  ?> 
	      | F_UGE #  ?>=
	      | F_LT  #  < 
	      | F_LE  #  <= 
	      | F_ULT #  ?< 
	      | F_ULE #  ?<=
	      | F_LG  #  <> 
	      | F_UE;  #  ?= 

	    # These are two-way branches
	    # dependent on pure inputs:
	    #
	    Branch
	      = CMP  { oper: Compare_Op, kind: Numkind }    #  numkind cannot be FLOAT 
	      | FCMP  { oper: Ieee754_Floating_Point_Compare_Op, size: Int }
	      | BOXED | UNBOXED | PEQL | PNEQ
	      | STREQ | STRNEQ; 
		  # streq (n, a, b) is defined only if strings a and b have
		  # exactly the same length n > 1 

	    # These all update the store:
	    #
	    Setter
	      = NUMUPDATE  { kind: Numkind }
	      | UNBOXED_SET | BOXED_SET | UPDATE
	      | UNBOXEDASSIGN | ASSIGN
	      | SETHANDLER | SET_CURRENT_THREAD_REGISTER | USELVAR | SETSPECIAL
	      | FREE | ACCLINK | SETPSEUDO | SETMARK
	      | RAWSTORE  { kind: Numkind }
	      | RAWUPDATE  Fps_Type
              ;

	    # These fetch from the store, never
            # have functions as arguments:
	    #
	    Looker
	      = BANG | SUBSCRIPT | NUMSUBSCRIPT  { kind: Numkind } | GETSPECIAL | DEFLVAR
	      | GETRUNVEC | GETHANDLER | GET_CURRENT_THREAD_REGISTER | GETPSEUDO
	      | RAWLOAD  { kind: Numkind }
              ;

	    # These might raise exception exceptions, never
            # have functions as arguments:
	    #
	    Arith
	      = ARITH  { oper: Arithop, kind: Numkind }
	      | TEST  (Int, Int)
	      | TESTU  (Int, Int)
	      | TEST_INF  Int
	      | ROUND  { floor: Bool, fromkind: Numkind, tokind: Numkind }
              ;

	    # These don't raise exception exceptions
            # and don't access the store:
	    #
	    Pure
	      = PURE_ARITH  { oper: Arithop, kind: Numkind }
	      | PURE_NUMSUBSCRIPT  { kind: Numkind }
	      | LENGTH | CHUNKLENGTH | MAKEREF
	      | EXTEND  (Int, Int)
	      | TRUNC  (Int, Int)
	      | COPY  (Int, Int)
	      | EXTEND_INF  Int
	      | TRUNC_INF  Int
	      | COPY_INF  Int
	      | REAL  { fromkind: Numkind, tokind: Numkind }
	      | SUBSCRIPTV
	      | GETTAG | MAKE_SPECIAL | WRAP | UNWRAP | CAST | GETCON | GETEXN
	      | FWRAP | FUNWRAP | IWRAP | IUNWRAP | I32WRAP | I32UNWRAP
	      | GETSEQDATA | RECSUBSCRIPT | RAW64SUBSCRIPT | NEWARRAY0
	      | RAWRECORD  Null_Or( Record_Kind )
		 #  Allocate uninitialized words from the heap 
	      | CONDMOVE  Branch
              ;

	    stipulate 

		fun ioper (GT : Compare_Op)  => (LE : Compare_Op);
		    ioper LE  => GT;
		    ioper LT  => GE; 
		    ioper GE  => LT;
		    ioper EQL => NEQ; 
		    ioper NEQ => EQL;
		end;

		fun foper F_EQ   => F_ULG;
		    foper F_ULG  => F_EQ;
		    foper F_GT   => F_ULE;
		    foper F_GE   => F_ULT;
		    foper F_LT   => F_UGE;
		    foper F_LE   => F_UGT;
		    foper F_LG   => F_UE;
		    foper F_LEG  => F_UN;
		    foper F_UGT  => F_LE;
		    foper F_UGE  => F_LT;
		    foper F_ULT  => F_GE;
		    foper F_ULE  => F_GT;
		    foper F_UE   => F_LG;
		    foper F_UN   => F_LEG;
		end;

	    herein 

		fun opp BOXED   => UNBOXED; 
		    opp UNBOXED => BOXED;
		    opp STRNEQ  => STREQ; 
		    opp STREQ   => STRNEQ;
		    opp PEQL    => PNEQ; 
		    opp PNEQ    => PEQL;
		    opp ( CMP { oper, kind } ) =>  CMP { oper=>ioper oper, kind };
		    opp (FCMP { oper, size } ) => FCMP { oper=>foper oper, size };
		end;
	    end;

	    iadd = ARITH { oper => ADD,      kind=>INT 31 };
	    isub = ARITH { oper => SUBTRACT, kind=>INT 31 };
	    imul = ARITH { oper => MULTIPLY, kind=>INT 31 };
	    idiv = ARITH { oper => DIVIDE,   kind=>INT 31 };
	    ineg = ARITH { oper => NEGATE,   kind=>INT 31 };

	    fadd = ARITH { oper => ADD,      kind=>FLOAT 64 };
	    fsub = ARITH { oper => SUBTRACT, kind=>FLOAT 64 };
	    fmul = ARITH { oper => MULTIPLY, kind=>FLOAT 64 };
	    fdiv = ARITH { oper => DIVIDE,   kind=>FLOAT 64 };
	    fneg = ARITH { oper => NEGATE,   kind=>FLOAT 64 };

	    ieql = CMP { oper=>EQL, kind=>INT 31 };
	    ineq = CMP { oper=>NEQ, kind=>INT 31 };
	    igt  = CMP { oper=>GT,  kind=>INT 31 };
	    ige  = CMP { oper=>GE,  kind=>INT 31 };
	    ile  = CMP { oper=>LE,  kind=>INT 31 };
	    ilt  = CMP { oper=>LT,  kind=>INT 31 };
	/*  iltu = CMP { oper=>LTU, kind=INT 31 } 
	    igeu = CMP { oper=>GEU, kind=INT 31 }
	*/
	    feql =FCMP { oper=>F_EQ, size=>64 };
	    fneq =FCMP { oper=>F_LG, size=>64 };
	    fgt  =FCMP { oper=>F_GT, size=>64 };
	    fge  =FCMP { oper=>F_GE, size=>64 };
	    fle  =FCMP { oper=>F_LE, size=>64 };
	    flt  =FCMP { oper=>F_LT, size=>64 };

	    fun arity NEGATE => 1;
		arity _      => 2;
	    end;

	};			# package p

								# highcode_var	is from   src/lib/compiler/upper/highcode/highcode-var.pkg

	Highcode_Variable
	    =
            highcode_var::Highcode_Variable;

	Value 
	  = VAR  Highcode_Variable
	  | LABEL  Highcode_Variable
	  | INT  Int
	  | INT32  unt32::Unt
	  | REAL  String
	  | STRING  String
	  | CHUNK  unsafe::unsafe_chunk::Chunk
	  | VOID;

	Accesspath 
	  = OFFP  Int 
	  | SELP  (Int, Accesspath);

	# Comments in:  src/lib/compiler/upper/fps/fate-passing-style.api
	#
	Fun_Kind
	  = FATE
	  | KNOWN
	  | KNOWN_RECURSIVE
	  | KNOWN_CHECK
	  | KNOWN_TAIL
	  | KNOWN_FATE
	  | ESCAPE
	  | NO_INLINE_INTO;

	Fps_Expression
	  = RECORD  (Record_Kind, List ((Value, Accesspath)), Highcode_Variable, Fps_Expression)
	  | SELECT  (Int, Value, Highcode_Variable, Fps_Type, Fps_Expression)
	  | OFFSET  (Int, Value, Highcode_Variable, Fps_Expression)
	  | APPLY  (Value, List( Value ))
	  | MUTUALLY_RECURSIVE_FNS  (List( Function ), Fps_Expression)
	  | SWITCH  (Value, Highcode_Variable, List( Fps_Expression ))
	  | BRANCH  (p::Branch, List( Value ), Highcode_Variable, Fps_Expression, Fps_Expression)
	  | SETTER  (p::Setter, List( Value ), Fps_Expression)
	  | LOOKER  (p::Looker, List( Value ), Highcode_Variable, Fps_Type, Fps_Expression)
	  | ARITH   (p::Arith,  List( Value ), Highcode_Variable, Fps_Type, Fps_Expression)
	  | PURE    (p::Pure,   List( Value ), Highcode_Variable, Fps_Type, Fps_Expression)
	  #  experimental "raw C call" (Blume, 1/2001) 
	  | RAW_C_CALL (Rcc_Kind, String, ctypes::Ckit_Prototype, List( Value ),  List( (Highcode_Variable, Fps_Type) ), Fps_Expression)

	also
        Rcc_Kind
            =
            FAST_RCC | REENTRANT_RCC

	withtype
            Function
                =
                ( Fun_Kind,
                  Highcode_Variable,
                  List( Highcode_Variable ),
                  List( Fps_Type ),
                  Fps_Expression
                );

	fun has_raw_c_call  cexp
	    =
	    {
		fun check_list (c ! rest) =>  has_raw_c_call (c) or check_list (rest);
		    check_list []         =>  FALSE;
                end;

		case cexp
		  
		     RAW_C_CALL _            =>  TRUE;
		     RECORD(_, _, _, e)      =>  has_raw_c_call e;
		     SELECT(_, _, _, _, e)   =>  has_raw_c_call e;
		     OFFSET(_, _, _, e)      =>  has_raw_c_call e;
		     APPLY _                   =>  FALSE;
		     SWITCH(_, _, ce)        =>  check_list (ce);
		     BRANCH(_, _, _, c1, c2) =>  has_raw_c_call (c1) or has_raw_c_call (c2);
		     SETTER(_, _, e)         =>  has_raw_c_call e;
		     LOOKER(_, _, _, _, e)   =>  has_raw_c_call e;
		     ARITH(_, _, _, _, e)    =>  has_raw_c_call e;
		     PURE(_, _, _, _, e)     =>  has_raw_c_call e;

		     MUTUALLY_RECURSIVE_FNS (fl, e)
                         =>
                         has_raw_c_call e   or
                         check_list
                             (map  (fn (_, _, _, _, e) = e)  fl);
                esac;
	    };

	fun size_in_bits (FLTT) => 64; 
	    size_in_bits (INTT | INT32T | PTRT _ | FUNT | CNTT | DSPT) => 32;
	end;

	fun is_float (FLTT) => TRUE;
	    is_float (INTT | INT32T | PTRT _ | FUNT | CNTT | DSPT) => FALSE;
	end;

	fun is_tagged (FLTT | INT32T) => FALSE;
	    is_tagged (INTT | PTRT _ | FUNT | CNTT | DSPT) => TRUE;
	end;

	fun cty_to_string (INTT)         =>  "[I]";
	    cty_to_string (INT32T)       =>  "[I32]";
	    cty_to_string (FLTT)         =>  "[R]";
	    cty_to_string (PTRT (RPT k)) =>  ("[PR" + (int::to_string (k)) + "]");
	    cty_to_string (PTRT (FPT k)) =>  ("[PF" + (int::to_string (k)) + "]");
	    cty_to_string (PTRT (VPT))   =>  "[PV]";
	    cty_to_string (FUNT)         =>  "[F]";
	    cty_to_string (CNTT)         =>  "[C]";
	    cty_to_string (DSPT)         =>  "[D]";
	end;

	fun combinepaths (p, OFFP 0) => p;

	    combinepaths (p, q)
		=> 
		comb p
                where
		    recursive val comb
			=
			fn (OFFP 0)
                               =>
                               q;

			   (OFFP i)
                               =>
                               case q   
				   (OFFP j) => OFFP (i+j);
				   (SELP (j, p)) => SELP (i+j, p);
			       esac;

			   (SELP (i, p))
                              =>
                              SELP (i, comb p);
                        end;
		end;
	end;

	fun lenp (OFFP _) => 0;
	    lenp (SELP(_, p)) => 1 + lenp p;
	end;

	bogt = PTRT (VPT);  #  Bogus pointer type whose length is unknown 

	stipulate

	    package lt= highcode;				# highcode	is from   src/lib/compiler/upper/highcode/highcode.pkg

	    tc_real = lt::tcc_real;
	    lt_real = lt::ltc_real;

	herein

	    fun tcflt tc = if (lt::type_constructors_are_equivalent (tc, tc_real) ) TRUE; else FALSE;fi;
	    fun ltflt lt = if (lt::lambda_types_are_equivalent      (lt, lt_real) ) TRUE; else FALSE;fi;

	    fun rtyc (f, []) => RPT 0;

		rtyc (f, ts)
                    =>
		    loop (ts, TRUE, 0)
                    where
		        fun loop (a ! r, b, len)
				=> 
				if (f a)   loop (r,     b, len+1);
				else       loop (r, FALSE, len+1);
				fi;

			    loop ([], b, len)
                                =>
                                if b   FPT len;
                                else   RPT len;
                                fi;
                        end;  
		    end;
	    end;

	    fun ctyc tc
		=
		lt::tcw_prim (

                   tc, 

		   fn pt =   if   (pt == pt::prim_type_con_int31)   INTT;
			     elif (pt == pt::prim_type_con_int32)   INT32T;
			     elif (pt == pt::prim_type_con_real)    FLTT;
			     else                                   bogt;
                             fi,

		   fn tc
		       =
		       lt::tcw_tuple (
			   tc,
			   fn ts = PTRT (rtyc (tcflt, ts)),

			   fn tc = if   (lt::tcp_arrow tc)  FUNT;
				   elif (lt::tcp_cont  tc)  CNTT;
				   else                     bogt;
				   fi
		       )
	       );

	    fun ctype lt
		= 
		lt::ltw_tyc (

                    lt,

                    fn tc =  ctyc tc,

		    fn lt =  lt::ltw_str (

                                 lt,

                                 fn ts =  PTRT (rtyc (fn _ = FALSE, ts)), 

			         fn lt =  if   (lt::ltp_fct  lt)  FUNT;
				          elif (lt::ltp_cont lt)  CNTT;
					  else                    bogt;
                                          fi
                             )
                );

	end;		#  local ctype 
    end;		#  top-level with
};			#  package fate_passing_style



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
