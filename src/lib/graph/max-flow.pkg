# max-flow.pkg
# This module implements max (s, t) flow.
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

###          "In the Universe the
###           difficult things are done
###           as if they were easy."
###
###                     -- Lao Tzu



generic package max_flow (num:  Abelian_Group) 		# Abelian_Group	is from   src/lib/graph/group.api
: (weak)
Maximum_Flow						# Maximum_Flow	is from   src/lib/graph/max-flow.api
{
    package g= graph;		# graph		is from   src/lib/graph/graph.pkg
    package a= rw_vector;	# rw_vector	is from   src/lib/std/src/rw-vector.pkg
    package num = num;


    # Use Goldberg's preflow-push approach.
    # This algorithm is presented in the book by Cormen, Leiserson and Rivest.

    fun max_flow { graph=>g::GRAPH ggg, s, t, capacity, flows }
	=
	{   if  (s == t)
		 raise exception g::BAD_GRAPH "maxflow";
	    fi;

	    nnn        = ggg.capacity ();
	    mmm        = ggg.order ();

	    zero       = num::zero;

	    neighbors  = a::make_rw_vector (nnn,[]);
	    dist       = a::make_rw_vector (nnn, 0);
	    excess     = a::make_rw_vector (nnn, zero);
	    current    = a::make_rw_vector (nnn,[]);

	    fun min (a, b)
		=
		if (num::(<) (a, b) ) a; else b;fi;

	    fun is_zero a
		=
		num::(====) (a, zero);

	    my (-_)      = num::neg;

	    fun set_up_preflow ()
		=
		{   fun add_edge (e as (u, _, _))
			= 
			a::set (neighbors, u, e ! a::get (neighbors, u));

		     ggg.forall_edges
			 (   fn e as (u, v, e')
				=
				{   c = capacity e; 

				    if  (u == s)

					 f  = REF c;
					 f' = REF(-c);

					 add_edge (u, v, (f, c, f', TRUE, e'));
					 add_edge (v, u, (f', zero, f, FALSE, e'));

					 a::set (excess, v, num::(+)(c, a::get (excess, v)));
					 
				    else 
					 f  = REF zero;
					 f' = REF zero;

					 add_edge (u, v, (f, c, f', TRUE, e'));
					 add_edge (v, u, (f', zero, f, FALSE, e'));
				    fi;
				  }
			 );

		    a::set (dist, s, mmm);
		};


	    # Push d_f (u, v) = min (e[u], c (u, v)) units of flow from u to v 
	    # Returns the new e_u

	    fun push (e_u, (u, v, (flow, cap, flow', x, _)))
		=
		{   c_f =  num::(-) (cap,*flow);
		    d_f =  min (e_u, c_f); 
		    e_v =  a::get (excess, v);

		    flow  :=  num::(+) (*flow, d_f);
		    flow' :=  -(*flow);

		    a::set (excess, v, num::(+) (e_v, d_f));
		    num::(-) (e_u, d_f);
		};

	    # Lift a vertex
	    # dist[v] := 1 + min { dist[w] | (v, w) \in E_f } 
	    # Returns the new dist[v]

	    fun lift (v)
		=
		d_v
		where 
		    fun loop ([], d_v)
                            =>
                            d_v;

		        loop((v, w, (f, c, _, _, _)) ! es, d_v)
			    =>
			    if  (num::(<) (*f, c))   loop (es, int::min (a::get (dist, w), d_v));
			    else                     loop (es, d_v);                          fi;
                    end;

		    d_v =  loop (a::get (neighbors, v), 1000000000) + 1;

		    a::set (dist, v, d_v); 

		end;


	    # Push all excess flow thru admissible edges to neighboring vertices 
	    # until all excess flow has been discharged.

	    fun discharge (v)
		=
		{   e_v = a::get (excess, v);

		    if  (is_zero e_v)
                         FALSE;
		    else
			 fun loop (d_v, e_v, (e as (v, w, (f, c, _, _, _))) ! es)
                                 => 
			         if  (num::(<) (*f, c)   and   d_v == a::get (dist, w) + 1)

				      e_v = push (e_v, e); 

				      if  (is_zero  e_v)   (d_v, es); 
				      else                 loop (d_v, e_v, es);          fi; 

			         else
                                      loop (d_v, e_v, es);
                                 fi;

			     loop (_, e_v,[])
                                 =>
                                 loop (lift (v), e_v, a::get (neighbors, v));
                         end;

			 d_v       = a::get (dist, v);

			 my (d_v', es)
                             =
                             loop (d_v, e_v, a::get (current, v));

			 a::set (excess, v, zero);    #  e[v] must be zero 
			 a::set (current, v, es);  

			 d_v != d_v';
		    fi;
		};			# fun discharge 

	    fun lift_to_front ()
	       =
	       {   set_up_preflow();

		   iterate(
		       [],
		       list::fold_right
			   (   fn ((u, _), l)
				   =
				   if  (u == s or u == t)
					l;
				   else
					a::set (current, u, a::get (neighbors, u));
					u ! l;
				   fi
			       )
			   [] 
			   (ggg.nodes ())
		   );
	       }

	    also
	    fun iterate (_,[]) => ();

		iterate (f, u ! b)
		    => 
		    if  (discharge u)   iterate([u], reverse f@b);
		    else                iterate (u ! f, b);
                    fi;
	    end;

	    lift_to_front ();

	    ggg.forall_nodes
		(fn (i, _)
                    =
		    apply
                        (fn (i, j, (f, _, _, x, e'))
                            =
			    if  x
                                flows ((i, j, e'), *f); 
                            fi
                        )
			(a::get (neighbors, i))
                );

	    list::fold_right
                (fn ((_, _, (f, _, _, _, _)), n) =  num::(+) (*f, n))
                zero
		(a::get (neighbors, s));
	};

    fun min_cost_max_flow { graph=>g::GRAPH ggg, s, t, capacity, cost, flows }
	= 
	raise exception graph::UNIMPLEMENTED;

};
