#  Mythryl-Yacc Parser Generator (c) 1989 Andrew W. Appel, David R. Tarditi 

#  parser for the ML parser generator 



###             "If we don't change direction soon,
###              we'll end up where we're going."
###
###                         -- Professor Irwin Corey



include header;
%%

%name Mlyacc
%eop EOF_T
%noshift EOF_T
%right ARROW
%left  ASTERISK
%pos Int

%term	ARROW | ASTERISK | BLOCK | BAR | CHANGE | COLON | 
	COMMA | DELIMITER | EOF_T | FOR_T |
	HEADER of String | ID of (String, Int) | IDDOT of String |
	PERCENT_HEADER | INT of String | KEYWORD | LBRACE | LPAREN |
	NAME | NODEFAULT | NONTERM | NOSHIFT | OF_T |
	PERCENT_EOP | PERCENT_PURE | PERCENT_POS | PERCENT_ARG |
	PERCENT_TOKEN_SIG_INFO |
	PREC of header::Precedence | PREC_TAG | PREFER |
	PROG of String | RBRACE | RPAREN | SUBST | START |
	TERM | TYVAR of String | VERBOSE | VALUE |
	UNKNOWN of String | BOGUS_VALUE

%nonterm
	BEGIN of (String, header::Decl_Data, (List header::Rule)) |
	CONSTR_LIST of  List ((header::Symbol, Null_Or header::Some_Type)) |
	ID_LIST of List header::Symbol |
 	LABEL of String |
 	MPC_DECL of header::Decl_Data |
	MPC_DECLS of header::Decl_Data |
	QUAL_ID of String |
	RECORD_LIST of String |
	RHS_LIST of List { rhs:  List header::Symbol,
                           code: String,
		           prec:  Null_Or header::Symbol } |
	G_RULE of List header::Rule |
	G_RULE_LIST of List header::Rule |
	G_RULE_PREC of Null_Or header::Symbol |
	SUBST_DECL of  List (( List header::Symbol, List header::Symbol)) |
	SUBST_DEC of (( List header::Symbol, List header::Symbol)) |
	CHANGE_DECL of List (( List header::Symbol, List header::Symbol)) |
	CHANGE_DEC of (( List header::Symbol, List header::Symbol)) |
 	TY of String
%header (
generic package mlyacc_lr_vals_g (package header : Header
		          where Precedence == header::Precedence;
			package token : Token;)
)
%arg (input_source) : header::Input_Source
%%

BEGIN : HEADER MPC_DECLS DELIMITER G_RULE_LIST
	(header, mpc_decls, reverse g_rule_list)

MPC_DECLS : MPC_DECLS MPC_DECL
	      (join_decls (mpc_decls, mpc_decl, input_source, mpc_declleft))

MPC_DECLS:  (DECL { prec=>NIL, nonterm=>NULL, term=>NULL, eop=>NIL, control=>NIL,
		   keyword=>NIL, change=>NIL,
		   value=>NIL } )

MPC_DECL: TERM CONSTR_LIST
	    (DECL { prec=>NIL, nonterm=>NULL,
	       term => THE constr_list, eop =>NIL, control=>NIL,
		change=>NIL, keyword=>NIL,
		value=>NIL } )

	| NONTERM CONSTR_LIST
	    (DECL { prec=>NIL, control=>NIL, nonterm=> THE constr_list,
	       term => NULL, eop=>NIL, change=>NIL, keyword=>NIL,
	       value=>NIL } )

	| PREC ID_LIST
	    (DECL { prec=> [(prec, id_list)], control=>NIL,
	      nonterm=>NULL, term=>NULL, eop=>NIL, change=>NIL,
	      keyword=>NIL, value=>NIL } )

	| START ID
	     (DECL { prec=>NIL, control => [START_SYM (symbol_make id)], nonterm=>NULL,
	       term => NULL, eop => NIL, change=>NIL, keyword=>NIL,
	       value=>NIL } )

	| PERCENT_EOP ID_LIST
	     (DECL { prec=>NIL, control=>NIL, nonterm=>NULL, term=>NULL,
		eop=>id_list, change=>NIL, keyword=>NIL,
	 	value=>NIL } )

	| KEYWORD ID_LIST
	     (DECL { prec=>NIL, control=>NIL, nonterm=>NULL, term=>NULL, eop=>NIL,
		change=>NIL, keyword=>id_list,
	 	value=>NIL } )

	| PREFER ID_LIST
	     (DECL { prec=>NIL, control=>NIL, nonterm=>NULL, term=>NULL, eop=>NIL,
		    change=>map (fn i = ([], [i])) id_list, keyword=>NIL,
		    value=>NIL } )

        | CHANGE CHANGE_DECL
	     (DECL { prec=>NIL, control=>NIL, nonterm=>NULL, term=>NULL, eop=>NIL,
		change=>change_decl, keyword=>NIL,
		value=>NIL } )
	| SUBST SUBST_DECL
	     (DECL { prec=>NIL, control=>NIL, nonterm=>NULL, term=>NULL, eop=>NIL,
		change=>subst_decl, keyword=>NIL,
		value=>NIL } )
	| NOSHIFT ID_LIST
	     (DECL { prec=>NIL, control => [NSHIFT id_list], nonterm=>NULL, term=>NULL,
	            eop=>NIL, change=>NIL, keyword=>NIL,
		    value=>NIL } )
	| PERCENT_HEADER PROG
	     (DECL { prec=>NIL, control => [GENERIC prog], nonterm=>NULL, term=>NULL,
	            eop=>NIL, change=>NIL, keyword=>NIL,
		    value=>NIL } )
	| PERCENT_TOKEN_SIG_INFO PROG
	     (DECL { prec=>NIL, control => [TOKEN_SIG_INFO prog],
                    nonterm=>NULL, term=>NULL,
	            eop=>NIL, change=>NIL, keyword=>NIL,
		    value=>NIL } )
	| NAME ID
	     (DECL { prec=>NIL, control => [PARSER_NAME (symbol_make id)],
	            nonterm=>NULL, term=>NULL,
		    eop=>NIL, change=>NIL, keyword=>NIL, value=>NIL } )

	| PERCENT_ARG PROG COLON TY
	     (DECL { prec=>NIL, control => [PARSE_ARG (prog, ty)], nonterm=>NULL,
	            term=>NULL, eop=>NIL, change=>NIL, keyword=>NIL,
		     value=>NIL } )

	| VERBOSE
	     (DECL { prec=>NIL, control => [header::VERBOSE],
	        nonterm=>NULL, term=>NULL, eop=>NIL,
	        change=>NIL, keyword=>NIL,
		value=>NIL } )
	| NODEFAULT
	     (DECL { prec=>NIL, control => [header::NODEFAULT],
	        nonterm=>NULL, term=>NULL, eop=>NIL,
	        change=>NIL, keyword=>NIL,
		value=>NIL } )
	| PERCENT_PURE
	     (DECL { prec=>NIL, control => [header::PURE],
	        nonterm=>NULL, term=>NULL, eop=>NIL,
	        change=>NIL, keyword=>NIL,
		value=>NIL } )
	| PERCENT_POS TY
	     (DECL { prec=>NIL, control => [header::POS ty],
	        nonterm=>NULL, term=>NULL, eop=>NIL,
	        change=>NIL, keyword=>NIL,
		value=>NIL } )
	| VALUE ID PROG
	     (DECL { prec=>NIL, control=>NIL,
	        nonterm=>NULL, term=>NULL, eop=>NIL,
	        change=>NIL, keyword=>NIL,
		value => [(symbol_make id, prog ) ] } )

CHANGE_DECL : CHANGE_DEC BAR CHANGE_DECL
	            (change_dec ! change_decl)
            | CHANGE_DEC
		    ([change_dec])

CHANGE_DEC  : ID_LIST ARROW ID_LIST
	          (id_list1, id_list2)

SUBST_DECL : SUBST_DEC BAR SUBST_DECL
	      (subst_dec ! subst_decl)
           | SUBST_DEC
	      ([subst_dec])

SUBST_DEC:   ID FOR_T ID
	      ([symbol_make id2],[symbol_make id1])

CONSTR_LIST : CONSTR_LIST BAR ID OF_T TY
	     ((symbol_make id, THE (type_make ty)) ! constr_list)

	| CONSTR_LIST BAR ID
	     ((symbol_make id, NULL) ! constr_list)

	| ID OF_T TY ([(symbol_make id, THE (type_make ty))])

	| ID ([(symbol_make id, NULL)])

G_RULE : ID COLON RHS_LIST
	(map (fn { rhs, code, prec } =
    	          header::RULE { lhs=>symbol_make id, rhs,
			       code, prec } )
	 rhs_list)

G_RULE_LIST:  G_RULE_LIST G_RULE (g_rule @ g_rule_list)
	|   G_RULE	 (g_rule)

ID_LIST : ID ID_LIST (symbol_make id ! id_list)
	| 	 (NIL)

RHS_LIST : ID_LIST G_RULE_PREC PROG
	    ( [ { rhs=>id_list, code=>prog, prec=>g_rule_prec } ] )

	| RHS_LIST BAR ID_LIST G_RULE_PREC PROG
	    ( { rhs=>id_list, code=>prog, prec=>g_rule_prec } ! rhs_list)

TY : TYVAR
 	(tyvar)
   | LBRACE RECORD_LIST RBRACE
	("{ " + record_list + " }")
   | LBRACE RBRACE
	("{ }")
   | PROG
	("(" + prog + ")")
   | QUAL_ID TY
	(qual_id + " " + ty + " ")
   | QUAL_ID
	(qual_id)
   | TY ASTERISK TY
	(ty1 + "*" + ty2)
   | TY ARROW TY
	(ty1 + " -> " + ty2)

RECORD_LIST : RECORD_LIST COMMA LABEL COLON TY
		(record_list + ", " + label + ": " + ty)
	   | LABEL COLON TY
		(label + ": " + ty)

QUAL_ID : ID	((fn (a, _) = a) id)
       | IDDOT QUAL_ID (iddot + qual_id)
	 
LABEL : ID  ((fn (a, _) = a) id)
      | INT (int)

G_RULE_PREC : PREC_TAG ID (THE (symbol_make id))

G_RULE_PREC : (NULL)
