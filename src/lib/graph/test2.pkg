CM::make "graphs.make6";
#  See page 249 of Aho Hopcroft Ullman 

package test_matching {

my G as graph::GRAPH g = directed_graph::graph("foo", (), 10) :    graph::graph( String, Int, Void ) 

my _ = apply g.add_node
          [(1, "1"),
           (2, "2"),
           (3, "3"),
           (4, "4"),
           (5, "5"),
           (6, "6"),
           (7, "7"),
           (8, "8"),
           (9, "9"),
           (10, "10")
          ]

my _ = apply g.add_edge
          (reverse[(1, 6, 1),
           (1, 7, 1),
           (1, 8, 1),
           (2, 6, 1),
           (2, 9, 1),
           (2, 10, 1),
           (3, 6, 1),
           (3, 7, 1),
           (4, 8, 1),
           (4, 9, 1),
           (4, 10, 1),
           (5, 6, 1)
          ])

fun matching ((i, j, c), _)
    = 
    print (int::to_string i + " -> " + int::to_string j + "\n")

fun test () = 
    let my (_, card) = bipartite_matching::matching G matching ()
    in  if card != 5 then raise exception MATCH else card
    end

}
