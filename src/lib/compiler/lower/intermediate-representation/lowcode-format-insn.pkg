/*
 * This just provide a very simple pretty printing function.
 * It is used for visualization.
 *
 * -- Allen Leung 
 * 
 */

api FORMAT_INSTRUCTION =
api
   package i:   Instruction_Set

   my to_string:  Annotations::annotations -> i::instruction -> String

end

generic package format_instruction_g (Asm:  Instruction_Emitter) : FORMAT_INSTRUCTION 
{
   package i = Asm::I

   fun to_string an instruction =
   let buffer = StringOutStream::mkStreamBuf()
       S      = StringOutStream::openStringOut buffer
       my ()     = asm_stream::with_stream S 
                     (fn instruction => 
                      let my Asm::S.STREAM { emit, ... } = Asm::make_stream an
                      in emit instruction
                      end) instruction
       text   = StringOutStream::get_string buffer
       fun is_space ' '  = TRUE
         | is_space '\t' = TRUE
         | is_space _     = FALSE
       text   = fold_right (fn (x, "") => x | (x, y) => x$" "$y) ""
                          (string::tokens is_space text)
       fun stripNL "" = ""
         | stripNL s =
       let fun f (0) = ""
             | f (i) = 
               case string::get (s, i) of
                 '\n' => f (i - 1)
               | ' '  => f (i - 1)
               | _     => string::extract (s, 0, THE (i+1))
       in  f (size s - 1) end  
   in  stripNL text end

}

