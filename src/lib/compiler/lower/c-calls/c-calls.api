## c-calls.api

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



api Ansi_C_Calls {

    package codetree:  Codetree;			# Codetree	is from   src/lib/compiler/lower/codetree/codetree.api

    Ckit_Arg 
      = ARG  codetree::Int_Expression			# int_expression specifies integer or pointer; if the 
							# corresponding parameter is a C struct, then 
							# this argument is the address of the struct. 

      | FARG  codetree::Float_Expression		#  float_expression specifies floating-point argument 
      | ARGS  List( Ckit_Arg );				#  list of arguments corresponding to the contents of a C struct 

    # This constant is the offset
    # from the caller's SP to the
    # low-address of the parameter area.
    # (see the paramAlloc callback below).
    #
    param_area_offset:  Int;

    # The lowcode type that describes the natural size of integer arguments (i.e., what
    # small integers are promoted to).

    natural_int_size:  codetree::Some_Type;

    # Translate a C function call with
    # the given argument list into
    # a lowcode statement list.
    # The arguments are as follows:
    #
    #	name			-- An expression that specifies the function.
    #
    #	proto			-- The function's prototype
    #
    #	param_alloc		-- This callback takes the size and alignment
    #				   constraints on the parameter-passing area
    #				   in the stack.  If it returns TRUE, then the
    #				   space for the parameters is allocated by
    #				   client; otherwise gen_call allocates the space.
    #
    #   struct_ret		-- This callback takes the size and alignment
    #				   of space required for returning a struct
    #				   value.  It returns the address of the
    #				   reserved space.
    #
    #	save_restore_dedicated	-- This callback takes a list of registers
    #				   that the call kills and should return an
    #				   instruction sequence to save/restore any
    #				   registers that the client run-time model
    #				   expects to be preserved (e.g., allocation
    #				   pointers).
    #
    #    call_comment		-- If present, the comment string is attached to
    #				   the CALL instruction as a COMMENT annotation.
    #
    #    args			-- The arguments to the call.  We assume that
    #				   any required sign or zero extension has
    #				   already been done.
    #
    # The result of genCall is a lowcode list specifying where the result
    # is and the LowCoded statements that implement the calling sequence.
    # Functions with void return type have no result, most others have
    # one result, but some conventions may flatten larger arguments into
    # multiple registers (e.g., a register pair for long long results).
    #
    # The implementation of gen_call will return a
    # statement sequence with the following order:
    #
    #	<argument area allocation>
    #	<setup arguments>
    #	<save dedicated registers>
    #	<call C function>
    #	<restore dedicated registers>
    #	<free argument area>
    #	<copy result into fresh registers>
    #
    # WARNING: if the client's implementation of struct_ret uses the stack
    # pointer to address the struct-return area, then param_alloc should always
    # handle allocating space for the parameter area (i.e., return TRUE).
    #
    gen_call:
        {
	  name:           codetree::Int_Expression,
	  fn_prototype:   ctypes::Ckit_Prototype,
	  param_alloc:  { szb:  Int, align:  Int } -> Bool,
	  struct_ret:   { szb:  Int, align:  Int } -> codetree::Int_Expression,
	  save_restore_dedicated :
	     List( codetree::Expression ) -> { save: List( codetree::Statement ), restore: List( codetree::Statement ) },
	  call_comment:  Null_Or( String ),
	  args:  List( Ckit_Arg )
        }
        ->
        { callseq:  List( codetree::Statement ),
	  result:   List( codetree::Expression )
	};


    # The location of arguments/parameters;
    # offsets are given with respect to the
    # low end of the parameter area -- see
    # param_area_offset above:
    #
    Arg_Location
      = REG   (codetree::Some_Type,  codetree::Reg, Null_Or( codetree::machine_int::Machine_Int ))		#  integer/pointer argument in register 
      | FREG  (codetree::Fty,        codetree::Reg, Null_Or( codetree::machine_int::Machine_Int ))		#  floating-point argument in register 
      | STK   (codetree::Some_Type,  codetree::machine_int::Machine_Int)				#  integer/pointer argument in parameter area 
      | FSTK  (codetree::Fty,        codetree::machine_int::Machine_Int)				#  floating-point argument in parameter area 
      | ARG_LOCS  List( Arg_Location );


    layout:
        ctypes::Ckit_Prototype
        ->
        {
	  arg_locs:  List( Arg_Location ),		# Argument/parameter assignment.

	  arg_mem:  { szb:  Int, align:  Int },		# Memory requirements for stack-allocated 
							# arguments. This value can be passed to 
							# the param_alloc callback. 

	  result_loc:  Null_Or( Arg_Location ),		# Result location. NULL for void functions. 

	  struct_ret_loc:  Null_Or { szb:  Int, align:  Int }
	};

    # Callee-save registers as defined in the C calling convention.
    #
    # Note that these do not include special registers
    # (e::g., stack and frame-pointers)
    # that are preserved across calls.
    #
    callee_save_regs:   List( codetree::Reg );		# C callee-save registers 
    callee_save_fregs:  List( codetree::Reg );		# C callee-save floating-point registers 
};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
