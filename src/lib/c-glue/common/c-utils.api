
# Common conversion operations on C objects. 
# Only light version is implemented for now.

api Cutils =
api

   #  getfn * size -> C array * length -> ML List/rw_vector/vector 
   type ml_cvt'( T, U, A_ml, C )
       = 
       (c::obj'( T, C) -> U) * c::S.size( T ) ->
             c::ptr'( c::obj( T, C ) )  * mlrep::signed::Int -> A_ml

   my ml_list'  : ml_cvt'( T,U, List( U ),C )
   my ml_array' : ml_cvt'( T,U, Rw_Vector( U ),C )
   my ml_vector': ml_cvt'( T,U, Vector( U ),C )

   #  setfn * size -> ML List/rw_vector/vector -> C array * length 
   type c_cvt'( T, U, A_ml, C )
       = 
         (c::obj'( T, c::rw ) * U -> Void) * c::S.size( T ) ->
             A_ml -> c::ptr'( c::obj( T, C ) )  * mlrep::signed::Int 

   my c_list'  : c_cvt'( T,U, List( U ),C )
   my c_array' : c_cvt'( T,U, Rw_Vector( U ),C )
   my c_vector': c_cvt'( T,U, Vector( U ),C )

   #  memcpy; always copy by bytes 
   my memcpy' : c::ptr'( T ) * c::ptr'( T ) * mlrep::signed::Int -> Void
   my memcpy:   c::ptr( T )  * c::ptr( T ) * mlrep::signed::Int -> Void

   #  Allocate a new object and initialize it 
   package New :
   api
      my ptr'  : c::ptr'( T ) -> c::obj'( c::ptr( T ), C )
      my sint' : mlrep::signed::Int -> c::obj'( c::sint,N )
      my uint' : mlrep::unsigned::word -> c::obj'( c::uint,Y )
   end

   # Shared operations! 
   # These operations take a C pointer and creates a shared ML view of it.
   # This is done by sharing and no copying is involved.  
   # So beware if the object is changed or freed behind ML's back.  
   #)
   package Shared :
   api
      my string'     : c::ptr'( c::obj( c::uchar,C ) ) * mlrep::signed::Int -> String
      my zstring'    : c::ptr'( c::obj( c::uchar,C ) ) -> String
      my ptr_array'  : c::ptr'( c::obj( c::ptr( T ), c::rw ) ) * mlrep::signed::Int -> 
                           rw_vector::Rw_Vector( c::ptr'( T ) )

       #  The following are very unsafe! 
      my bytearray'  : c::ptr'( c::obj( T, c::rw ) ) * mlrep::signed::Int -> 
                           rw_unt8_vector::Rw_Vector
      my bytevector' : c::ptr'( c::obj( T,C ) ) * mlrep::signed::Int -> 
                           unt8_vector::Vector
      my chararray'  : c::ptr'( c::obj( T, c::rw ) ) * mlrep::signed::Int -> 
                           rw_char_vector::Rw_Vector
   end

end
