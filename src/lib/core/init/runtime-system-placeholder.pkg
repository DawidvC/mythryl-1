## runtime-system-placeholder.pkg 

# Compiled by:
#     src/lib/core/init/init.cmi


# The Lib7 runtime system, which is coded in C, contains
# various functions which get called from Lib7 code.
#
# This file contains dummy declarations of the Lib7-accessible
# runtime functions.  Lib7 source code is compiled against
# these declarations just as though the runtime was written in
# lib7.
#
# There is a kludge in runtime7 so that at linktime calls to
# the below functions are transparently redirected to the
# actual C implementations.
#
# Parts of this kludge are in
#    src/runtime/main/load-o7-files.c: load_o7files
#    src/app/make7/make-compiler/find-set-of-o7-files-for-executable.pkg
# -- search for "RUNTIME_SYSTEM_PICKLEHASH".
#
# The required special handling for runtime-system-placeholder.pkg
# is specified by the "runtime-system-placeholder" line in the file
#     src/lib/core/init/init.cmi
# and then implemented in
#     src/app/make7/make-compiler/primordial-make7file.pkg
#
# The C global variable runtimeCompileUnit points to the heap
# datastructure holding pointers into the the C runtime proper.
# The runtimeCompileUnit variable is set up in
#     src/runtime/main/globals.c: allocate_globals()
#
# When                  src/runtime/main/load-o7-files.c: load_o7_files()
# sees the compiled     runtime-system-placeholder.pkg.o7
# file go by, it replaces the objectfile return value
# (i.e., the exported-declarations datastructure against
# which subsequent code will link) with runtimeCompileUnit:
# This is the central sleight-of-hand which makes everything work.



###                     "When we remember we are all mad, the mysteries
###                      of life disappear and life stands explained."
###
###                                           -- Mark Twain,
###                                              Notebook, 1898



package assembly: Assembly_Boxed {		# Assembly_Boxed	is from   src/lib/core/init/runtime-system.api

    Chunk = Chunk;

    Null_Or(X) =  NULL  |  THE X;


    # Declarations whose right handside is a primOp do not 
    # generate any code. This is a hack, and should be cleaned
    # in the future. (ZHONG)			XXX BUGGO FIXME

    my cast:  X -> Y = inline::cast;  

    package a {

	Cfunction = Cfunction;
	Unt8_Rw_Vector = Unt8_Rw_Vector;
	Float64_Rw_Vector = Float64_Rw_Vector;
	Spin_Lock = Spin_Lock;

	fun rw_vector (x: Chunk): Chunk             =  cast x;
	fun bind_cfun (x: Chunk): Chunk             =  cast x;
	fun callc     (x: Chunk): Chunk             =  cast x;
	fun create_b  (x: Chunk): Unt8_Rw_Vector    =  cast x;
	fun create_r  (x: Chunk): Float64_Rw_Vector =  cast x;
	fun create_s  (x: Chunk): String            =  cast x;
	fun create_v  (x: Chunk): Chunk             =  cast x;
	fun floor     (x: Chunk): Chunk             =  cast x;
	fun logb      (x: Chunk): Chunk             =  cast x;
	fun scalb     (x: Chunk): Chunk             =  cast x;
	fun try_lock  (x: Spin_Lock): Chunk         =  cast x;
	fun unlock    (x: Spin_Lock): Chunk         =  cast x;
    };

    exception DIVIDE_BY_ZERO;
    exception OVERFLOW;
    exception SYSTEM_ERROR  (String, Null_Or(Int));

    my vector0:       Vector(X)					  = cast();	# LIB7_vector0		in src/runtime/main/globals.c
    my prof_current:  Ref( Int )                                  = cast();	# ProfCurrent		in src/runtime/main/globals.c
    my poll_event:    Ref( Bool )                                 = cast();	# PollEvent		in src/runtime/main/globals.c
    my poll_freq:     Ref( Int )                                  = cast();	# PollFreq		in src/runtime/main/globals.c
    my poll_handler:  Ref( Fate(Void) -> Fate(Void) )		  = cast();	# Lib7PollHandler	in src/runtime/main/globals.c
    my active_procs:  Ref( Int )                                  = cast();	# ActiveProcs		in src/runtime/main/globals.c
    my pstruct:       Ref( Chunk )                                = cast();	# PervasiveStruct	in src/runtime/main/globals.c
    my sighandler:    Ref( (Int, Int, Fate(Void)) -> Fate(Void))  = cast();	# Lib7SignalHandler	in src/runtime/main/globals.c

};




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
