## compiler-client-interface-g.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/core.make6



# Here we define the backend package as
# seen by the front end of the compiler.
# 
# We actually provide two compilation interfaces:
# 
#     interact,
#         for interactive use compiling direct from
#         the user's commandline into memory,
# 
#     compile
#         for batch use compiling sourcefiles
#         on disk to .o7 object files on disk.
# 
# Our generic is invoked in
#
#     src/lib/compiler/toplevel/backend/ppc-compiler-client-interface.pkg
#     src/lib/compiler/toplevel/backend/sparc-compiler-client-interface.pkg
#     src/lib/compiler/toplevel/backend/x86-unix-compiler-client-interface.pkg
#     src/lib/compiler/toplevel/backend/x86-win32-compiler-client-interface.pkg
#
# to produce the corresponding platform-specific backends
#
#     ppc_compiler_client_interface
#     sparc_compiler_client_interface
#     x86_unix_compiler_client_interface
#     x86_win32_compiler_client_interface
#
# one of which is then annointed to be the default "backend" by
#
#     src/lib/core/compiler/current.make6
#
# Generic argument "package m" is the machine-dependent
# appropriate code generator for our platform:
#
# 
# Our api Compiler_Client_Interface is defined in ./compiler-client-interface.api
# in terms of the Profile, Compile, Interact,
# and Machine apis defined in (respectively):
# 
#     src/lib/compiler/debugging-and-profiling/profile/profile.api
#     src/lib/compiler/toplevel/main/compile.api
#     src/lib/compiler/toplevel/interact/interact.api
#     src/lib/compiler/codegen/main/machine.api



generic package  compiler_client_interface_g (				# compiler_client_interface_g	is from   src/lib/compiler/toplevel/backend/compiler-client-interface-g.pkg

    package m:  		  Backend;			# Backend			is from   src/lib/compiler/toplevel/main/backend.api

    ansi_c_prototype_convention:  String;			#  "unix_convention", "windows_convention" or "unimplemented".
)

: (weak)  Compiler_Client_Interface				# Compiler_Client_Interface	is from   src/lib/compiler/toplevel/backend/compiler-client-interface.api

{
    package interact
	=
	interact_g (						# interact_g			def in    src/lib/compiler/toplevel/interact/interact-g.pkg
	    read_eval_print_loop_g (				# read_eval_print_loop_g	def in    src/lib/compiler/toplevel/interact/read-eval-print-loop-g.pkg
		compile_g (					# compile_g			def in    src/lib/compiler/toplevel/main/compile-g.pkg

		    ansi_c_prototype_convention
			=
			ansi_c_prototype_convention;

		    package m = m;

		    package cc: (weak)  Compiler_Configuration {		# Compiler_Configuration	is from   src/lib/compiler/toplevel/main/compiler-config.api

			    # Compiler configuration for interactive toplevel:
			    # No real pickling/unpickling;
			    # picklehashes are assigned randomly.

			    Pickle = Void;
			    Hash   = Void;
			    Pid    = picklehash::Picklehash;

			    Version  = Void;

			    stipulate
				top_count = REF 0;
			    herein
				fun pickle_unpickle { context, symbol_table => new_symbol_table, version }
				    =
				    {
					top_count := *top_count + 1;

					(pickle_module::dont_pickle
					    {
					      symbol_table =>  new_symbol_table,
					      count        =>  *top_count
					    })
					    ->
					    { new_symbol_table,
					      picklehash,
					      exported_highcode_variables,
					      has_exports
					    };

						  # pickle_module		is from   src/lib/compiler/front/semantic/pickle/pickle-module.pkg


					{ pid    => (),
					  pickle => (),
					  exported_highcode_variables,
					  new_symbol_table,
					  export_picklehash =>   has_exports
                                                                     ??  THE picklehash
                                                                     ::  NULL
					};
				    };
			    end;

			    stipulate
				stamp_g = stamp::new_generator ();
			    herein
				fun make_stamp_generator ()
				    =
				    stamp_g; #  Always the same 
			    end;

			};
		)
	    )
	);

    package compile
        =
        compile_g (

            ansi_c_prototype_convention
            =
            ansi_c_prototype_convention;

	    package m = m;

	    package cc: (weak)  Compiler_Configuration {		# Compiler_Configuration	is from   src/lib/compiler/toplevel/main/compiler-config.api

		    # Compiler configuration for batch compilation
		    # (under control of Make7); real pickling, unpickling,
		    # and pid-generation:

		    Pickle  = unt8_vector::Vector;
		    Hash    = picklehash::Picklehash;
		    Pid     = Hash;
		    Version = String;

		    fun pickle_unpickle
                        { context,
                          version,
                          symbol_table =>  new_symbol_table
                        }
			=
			{   m = symbol_table_to_module_map::make_map context;

			    fun up_context _ = m;

			    my { picklehash, pickle, exported_highcode_variables, has_exports }
				= 
				pickle_module::pickle_symbol_table (pickle_module::INITIAL m) new_symbol_table;

			    pid = rehash_module::add_version { picklehash, version };

			    new_symbol_table'  = unpickle_module::unpickle_symboltable up_context (pid, pickle);
			
			    {   pid,
				pickle,
				exported_highcode_variables,
				new_symbol_table  =>   new_symbol_table',
				export_picklehash =>   has_exports  ??  THE pid
						                    ::  NULL
			    };
			};

		    make_stamp_generator
                        =
                        stamp::new_generator;
	        };
        );

    package profile
        =
        profiling_control_ui_g (

            package prof_dictionary
                =
	        profiling_dictionary_g (
                    Dictionary              =  compiler_table_set::Compiler_Table_Set;
		    symbol_table_part =  compiler_table_set::symbol_table_part;
		    layer             =  compiler_table_set::concatenate_compiler_table_sets;

		    fun evaluate (s, e)
                        =
			interact::evaluate_stream (file::open_string s, e);
                );

	    pervasive = compiler_state::pervasive;
        );


    package unparse_compiler_state
        =
        unparse_compiler_state;


    package machine   = m::codegen;			# Codegen is a superset of Machine -- see src/lib/compiler/codegen/main/codegen.api
    architecture_name = m::architecture_name;		# "ppc", "sparc" or "x86".
    abi_variant       = m::abi_variant;
};
