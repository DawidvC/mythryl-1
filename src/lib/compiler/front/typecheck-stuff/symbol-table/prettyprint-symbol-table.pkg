## prettyprint-symbol-table.pkg

# Compiled by:
#     src/lib/compiler/core.make6

package prettyprint_symbol_table:  Prettyprint_Symbol_Table {		# Prettyprint_Symbol_Table	is from   src/lib/compiler/front/typecheck-stuff/symbol-table/prettyprint-symbol-table.api

					# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
					# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
					# variables_and_constructors	is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
					# module			is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
					# symbol_table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
					# symbol_table_entry		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg

    package pp = prettyprint;		# prettyprint			is from   src/lib/prettyprint/src/prettyprint.pkg
					# unparse_value			is from   src/lib/compiler/front/typechecker/print/unparse-value.pkg
					# unparse_type			is from   src/lib/compiler/front/typechecker/print/unparse-type.pkg

    include symbol_table_entry;


    # 2007-12-05: At the moment we are called only from
    #
    #	src/lib/compiler/toplevel/main/compile-g.pkg
    #
    fun prettyprint_symbol_table  pps  symbol_table	# "pps" == "prettyprint_stream"
	=
	{    map
		 do_symbol_binding
		 symboltable_contents; 

             pp::newline pps;
	}
        where

	     symboltable_contents			# A list of (symbol, value) pairs.
		 = 
		 symbol_table::to_sorted_list  symbol_table;


	     fun do_symbol_binding (symbol, binding)			# symbol	is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
		 =
		 {
                     fun print_tagged_name ()
                          =
                          {   namespace =   symbol::name_space_to_string (symbol::name_space symbol);
		              name      =                                 symbol::name       symbol;

                              pp::string  pps   (namespace + " " + name + ":  " );
                          };

                     fun print_name ()
                          =
                          {   name      =   symbol::name       symbol;

                              pp::string  pps   name;
                          };

		      case binding
		        
			   NAMED_VARIABLE             (v:   variables_and_constructors::Variable)
			       =>
			       unparse_value::unparse_variable
				   pps
                                   (symbol_table, v);

			   NAMED_CONSTRUCTOR          (v:   variables_and_constructors::Constructor)
			       =>
                               {   unparse_value::unparse_constructor
				       pps
				       symbol_table
                                       v;

                                   pp::string  pps   ";";
			       };

			   NAMED_TYPE                 (t:   types::Type_Constructor)
			       =>
                               {   unparse_type::unparse_type_constructor
				       symbol_table			# XXX BUGGO FIXME we need to standardize on "stream symbol_table" or "symbol_table stream" arg order.
				       pps
                                       t;

                                   pp::string  pps   ";";
			       };

			   NAMED_API                  (m:   module::Api)
			       =>
                               {   pp::newline pps;
				   pp::string  pps  "api ";
                                   print_name ();	
			           pp::newline pps;
				   pp::string  pps  "=";
			           pp::newline pps;
                                   unparse_package_language::unparse_api
				       pps
                                       (m, symbol_table, /* max prettyprint recursion depth: */ 200);
			       };

			   NAMED_PACKAGE              (m:   module::Package)
			       =>
                               {   pp::newline pps;
				   pp::string  pps  "package ";
                                   print_name ();	
			           pp::newline pps;
				   pp::string  pps  ":";
			           pp::newline pps;
                                   unparse_package_language::unparse_package
				       pps
                                       (m, symbol_table, /* max prettyprint recursion depth: */ 200);
			       };

			   NAMED_GENERIC_API          (m:   module::Generic_Api)
			       =>
                               {   pp::newline pps;
				   pp::string  pps  "generic_api ";
                                   print_name ();	
			           pp::newline pps;
				   pp::string  pps  ":";
			           pp::newline pps;
                                   unparse_package_language::unparse_generic_api
				       pps
                                       (m, symbol_table, /* max prettyprint recursion depth: */ 200);
			       };
#			       print_tagged_name ();

			   NAMED_GENERIC              (m:   module::Generic)
			       =>
                               {   pp::newline pps;
				   pp::string  pps  "generic ";
                                   print_name ();	
			           pp::newline pps;
				   pp::string  pps  ":";
			           pp::newline pps;
                                   unparse_package_language::unparse_generic
				       pps
                                       (m, symbol_table, /* max prettyprint recursion depth: */ 200);
			       };
#			       print_tagged_name ();

			   NAMED_FIXITY               (f:   fixity::Fixity)
			       =>
			       print_tagged_name ();
		      esac;     

       	              pp::newline pps;
		 };				# fun do_symbol_binding    in   fun prettyprint_symbol_table
	end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Code by Jeff Prothero: Copyright (c) 2010,
## released under Gnu Public Licence version 3.
