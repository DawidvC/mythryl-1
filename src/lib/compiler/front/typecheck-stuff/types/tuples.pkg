## tuples.pkg 

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# 'Tuples' and 'tuples' should be called 'Records' and 'records', since 
# records are the primary concept, and tuples are a derived form.   XXX BUGGO FIXME


api Tuples {

     number_to_label:               Int -> types::Label;
     make_tuple_type_constructor:   Int -> types::Type_Constructor;
     is_tuple_type_constructor:     types::Type_Constructor -> Bool;
     make_record_type_constructor:  List( types::Label ) -> types::Type_Constructor;

};  #  Api Tuples 

package tuples: (weak)  Tuples {		# Tuples	is from   src/lib/compiler/front/typecheck-stuff/types/tuples.pkg

    include types;

    Optional_Label
         =
         NO_LABEL | SOME_LABEL  Label;

    Optional_Type_Constructor
         =
         NO_TYPE_CONSTRUCTOR | SOME_TYPE_CONSTRUCTOR  Type_Constructor;

    package label_array
        =
        expanding_rw_vector_g (

            package {
		include rw_vector;
		Rw_Vector  = Rw_Vector( Optional_Label );
		Vector     =    Vector( Optional_Label );
		Element    =            Optional_Label;
	    }
	);

    package type_constructor_array
        =
        expanding_rw_vector_g (

            package {
		include rw_vector;
		Rw_Vector  = Rw_Vector( Optional_Type_Constructor );
		Vector     =    Vector( Optional_Type_Constructor );
		Element   =             Optional_Type_Constructor;
	    }
	);

    exception NEW;

    package table= word_string_hash_table;	# word_string_hash_table	is from   src/lib/compiler/front/basics/miscutil/wordstr-hashtable.pkg

    # XXX BUGGO FIXME This looks like icky global mutable state
    # that will foul us up when/if we do parallel compiles
    # in different threads or such.  All such state should
    # be in a compile_state record of some type...

    type_constructor_table  = table::make_table (32, NEW) : table::Hash_Table(  Type_Constructor );
    type_constructor_map    = table::get type_constructor_table;
    insert_type_constructor = table::set  type_constructor_table;

    fun labels_to_symbol (labels: List( Label )) : symbol::Symbol
        =
        symbol::make_type_symbol (cat("{ " ! wrap labels))
        where
	    fun wrap [] => ["}"];
	        wrap [id] => [symbol::name id, " }"];
	        wrap (id ! rest) => symbol::name id ! ", " ! wrap rest;
            end;
	end;


    # This is an optimization to make similar
    # record tycs point to the same thing,
    # thus speeding equality testing on them:

    fun make_record_type_constructor labels
        = 
	{   record_name = labels_to_symbol labels;

	    number     = symbol::number record_name;
	    name       = symbol::name   record_name;
	
            type_constructor_map (number, name)
	    except
                NEW
                =
		{   type_constructor = RECORD_TYPE_CONSTRUCTOR labels;
		
                    insert_type_constructor ((number, name), type_constructor);
		    type_constructor;
		};
	};

    numeric_labels
       =
       label_array::rw_vector (0, NO_LABEL);

    tuple_type_constructors
       =
       type_constructor_array::rw_vector (0, NO_TYPE_CONSTRUCTOR);

    fun number_to_label i
        =
	case (label_array::get (numeric_labels, i))
	  
	     NO_LABEL
		 =>
		 {   newlabel
                         =
                         symbol::make_label_symbol (int::to_string i);

		     label_array::set (numeric_labels, i, SOME_LABEL (newlabel));
		     newlabel;
		 };

	     SOME_LABEL label
		 =>
		 label;
        esac;

    fun numlabels n
        =
        labels (n, NIL)
        where
	    fun labels (0, result_list) =>  result_list;
	        labels (i, result_list) =>  labels (i - 1, number_to_label i ! result_list);
            end;
	end;

    fun make_tuple_type_constructor n
        =
	case (type_constructor_array::get (tuple_type_constructors, n))
          
	     NO_TYPE_CONSTRUCTOR
		 =>
		 {   type_constructor
                         =
                         make_record_type_constructor (numlabels n);

		     type_constructor_array::set (tuple_type_constructors, n, SOME_TYPE_CONSTRUCTOR (type_constructor));
		     type_constructor;
		 };

	     SOME_TYPE_CONSTRUCTOR (type_constructor)
		 =>
		 type_constructor;
        esac;

    fun check_labels (2, NIL) =>  FALSE;   #  { 1: t } is not a tuple 
	check_labels (n, NIL) =>  TRUE;

	check_labels (n, lab ! labs)
	    => 
	    symbol::eq (lab, number_to_label n)
	    and
	    check_labels (n+1, labs);
    end;

    fun is_tuple_type_constructor (RECORD_TYPE_CONSTRUCTOR labels)
	    =>
	    check_labels (1, labels);

        is_tuple_type_constructor _ => FALSE;
    end;

};		#  package tuples 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
