## queue.api

# Compiled by:
#     src/lib/src/lib7.make6

# Implemented by:
#     src/lib/src/queue.pkg

# See also:
#     src/lib/src/fifo.api

# Imperative fifos


###        "If you cannot grok the overall pattern
###         of a program while taking a shower,
###         you are not ready to code it."
###
###                            -- Richard Pattis



api Queue {

    Queue(X);

    exception DEQUEUE;

    make_queue:  Void -> Queue(X);		# Make a new queue.

    clear:     Queue(X) -> Void;   		# Remove all elements.
    is_empty:  Queue(X) -> Bool;		# Test for empty queue.

    enqueue:   (Queue(X), X) -> Void;		# Eenqueue an element at the rear.
    dequeue:   Queue(X) -> X;			# Remove the front element (raise Dequeue if empty).

    # Delete all elements satisfying the given predicate 
    #
    delete:  (Queue(X), (X -> Bool)) -> Void;

    head:      Queue(X) -> X;
    peek:      Queue(X) -> Null_Or(X);
    length:    Queue(X) -> Int;
    contents:  Queue(X) -> List(X);

    apply:  (X -> Void) -> Queue(X) -> Void;
    map:    (X -> Y) -> Queue(X) -> Queue(Y);

    fold_left:   ((X, Y) -> Y) -> Y -> Queue(X) -> Y;
    fold_right:  ((X, Y) -> Y) -> Y -> Queue(X) -> Y;
};


## COPYRIGHT (c) 1993 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
