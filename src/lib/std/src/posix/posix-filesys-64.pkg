## posix-file.pkg



# Package for POSIX 1003.1 file system operations



###             "I stopped believing in Santa Claus when I was six.
###              Mother took me to see him in a department store
###              and he asked for my autograph."
###
###                                     -- Shirley Temple



local
    package host_unt = host_unt_guts
    package unt32 = Word32Imp
    package time = TimeImp
in
package posix_file {

    my ++ = host_unt::bitwise_or
    my & = host_unt::bitwise_and
    infix ++ &

    type word = host_unt::word
    type s_int = host_int::int

    fun cfun x = c_interface::c_function "POSIX-FileSys" x
    my osval:  String -> s_int = cfun "osval"
    w_osval = host_unt::from_int o osval

    enum uid = UID of word
    enum gid = GID of word

    enum File_Descriptor = FD of { fd:  s_int }
    fun intOf (FD { fd, ... } ) = fd
    fun fd fd = FD { fd=fd }
    fun fdToWord (FD { fd, ... } ) = host_unt::from_int fd
    fun wordToFD fd = FD { fd = host_unt::toInt fd }

    #   file_position::Int <-> hi & lo parts 
    splitpos = inline_t::Int64::extern
    joinpos  = inline_t::Int64::intern

    #  Conversions between winix::io::Io_Descriptor values and Posix file descriptors. 
    fun fdToIOD (FD { fd, ... } ) = winix::io::IODESC fd
    fun iodToFD (winix::io::IODESC fd) = THE (FD { fd = fd } )

    o_rdonly = w_osval "O_RDONLY"
    o_wronly = w_osval "O_WRONLY"
    o_rdwr = w_osval "O_RDWR"

    enum open_mode = O_RDONLY | O_WRONLY | O_RDWR
    fun omodeFromWord omode =
          if omode == o_rdonly then O_RDONLY
          else if omode == o_wronly then O_WRONLY
          else if omode == o_rdwr then O_RDWR
          else raise exception FAIL ("posix_file::omodeFromWord: unknown mode " $
                                  (unt32::to_string omode))

    fun omodeToWord O_RDONLY = o_rdonly
      | omodeToWord O_WRONLY = o_wronly
      | omodeToWord O_RDWR = o_rdwr

    fun uidToWord (UID i) = i
    fun wordToUid i = UID i
    fun gidToWord (GID i) = i
    fun wordToGid i = GID i

    type c_dirstream = assembly::chunk  #  the underlying C DIRSTREAM 

    enum Directory_Stream = DS of {
	dirStrm:  c_dirstream,
	isOpen:  Ref( Bool )
      }

    my opendir' : String -> c_dirstream  = cfun "opendir"
    my readdir' : c_dirstream -> String  = cfun "readdir"
    my rewinddir' : c_dirstream -> Void  = cfun "rewinddir"
    my closedir' : c_dirstream -> Void	  = cfun "closedir"
    fun opendir path = DS {
	    dirStrm = opendir' path,
	    isOpen = REF TRUE
	  }
    fun readdir (DS { dirStrm, isOpen = REF FALSE } ) =
	  raise exception assembly::SYSTEM_ERROR("readdir on closed directory stream", NULL)
      | readdir (DS { dirStrm, ... } ) =
	  case readdir' dirStrm of
	      "" => NULL
	    | name => THE name
    fun rewinddir (DS { dirStrm, isOpen = REF FALSE } ) =
	  raise exception assembly::SYSTEM_ERROR("rewinddir on closed directory stream", NULL)
      | rewinddir (DS { dirStrm, ... } ) = rewinddir' dirStrm
    fun closedir (DS { dirStrm, isOpen = REF FALSE } ) = ()
      | closedir (DS { dirStrm, isOpen } ) = (
	  isOpen := FALSE;
	  closedir' dirStrm)

    my change_directory:   String -> Void    = cfun "chdir"
    my current_directory:  Void -> String    = cfun "getcwd"

    stdin  = fd 0
    stdout = fd 1
    stderr = fd 2

    package s {

        local package bf = bit_flags_g ()
	in
	    use BF
	    type mode = flags
	end

        irwxu = fromWord (w_osval "irwxu")
        irusr = fromWord (w_osval "irusr")
        iwusr = fromWord (w_osval "iwusr")
        ixusr = fromWord (w_osval "ixusr")
        irwxg = fromWord (w_osval "irwxg")
        irgrp = fromWord (w_osval "irgrp")
        iwgrp = fromWord (w_osval "iwgrp")
        ixgrp = fromWord (w_osval "ixgrp")
        irwxo = fromWord (w_osval "irwxo")
        iroth = fromWord (w_osval "iroth")
        iwoth = fromWord (w_osval "iwoth")
        ixoth = fromWord (w_osval "ixoth")
        isuid = fromWord (w_osval "isuid")
        isgid = fromWord (w_osval "isgid")

      }

    package o {

        local package bf = bit_flags_g ()
	in
	    use BF
	end

        append   = fromWord (w_osval "O_APPEND")
        dsync    = fromWord (w_osval "O_DSYNC")
        excl     = fromWord (w_osval "O_EXCL")
        noctty   = fromWord (w_osval "O_NOCTTY")
        nonblock = fromWord (w_osval "O_NONBLOCK")
        rsync    = fromWord (w_osval "O_RSYNC")
        sync     = fromWord (w_osval "O_SYNC")
        o_trunc  = w_osval "O_TRUNC"
        trunc    = fromWord  o_trunc
        o_creat  = w_osval "O_CREAT"
        crflags  = o_wronly ++ o_creat ++ o_trunc

      }

    my openf' : String * word * word -> s_int = cfun "openf"
    fun openf (fname, omode, flags) =
          fd (openf'(fname, o::toWord flags ++ (omodeToWord omode), 0w0))
    fun createf (fname, omode, oflags, mode) = let
          flags = o::o_creat ++ o::toWord oflags ++ (omodeToWord omode)
          in
            fd (openf'(fname, flags, s::toWord mode))
          end
    fun creat (fname, mode) =
          fd (openf'(fname, o::crflags, s::toWord mode))

    my umask' : word -> word = cfun "umask"
    fun umask mode = s::fromWord (umask' (s::toWord mode))

    my link' : String * String -> Void = cfun "link"
    fun link { old, new } = link'(old, new)
    my rename' : String * String -> Void = cfun "rename"
    fun rename { old, new } = rename'(old, new)
    my symlink' : String * String -> Void = cfun "symlink"
    fun symlink { old, new } = symlink'(old, new)

    my mkdir' : String * word -> Void = cfun "mkdir"
    fun mkdir (dirname, mode) = mkdir'(dirname, s::toWord mode)

    my mkfifo' : String * word -> Void = cfun "mkfifo"
    fun mkfifo (name, mode) = mkfifo'(name, s::toWord mode)

    my unlink:  String -> Void = cfun "unlink"
    my rmdir:  String -> Void = cfun "rmdir"
    my readlink:  String -> String = cfun "readlink"

    my ftruncate' : s_int * word * word -> Void = cfun "ftruncate_64"
    fun ftruncate (FD { fd, ... }, len) =
	let my (lhi, llo) = splitpos len
	in ftruncate' (fd, lhi, llo)
	end

    enum dev = DEV of word
    fun devToWord (DEV i) = i
    fun wordToDev i = DEV i

    enum ino = INO of word
    fun inoToWord (INO i) = i
    fun wordToIno i = INO i

    package st {

        enum Stat = ST of {
                 ftype:  s_int,
                 mode:   s::mode,
                 ino:    ino,
                 dev:    dev,
                 nlink:  Int,
                 uid:    uid,
                 gid:    gid,
                 size:   file_position::Int,
                 atime:  time::time,
                 mtime:  time::time,
                 ctime:  time::time
               }
      # The following assumes the C stat functions pull the
      # file type from the mode field and return the
      # integer below corresponding to the file type.

	fun is_directory  (ST { ftype, ... } ) = (ftype = 0x4000)
	fun isChr  (ST { ftype, ... } ) = (ftype = 0x2000)
	fun isBlk  (ST { ftype, ... } ) = (ftype = 0x6000)
	fun isReg  (ST { ftype, ... } ) = (ftype = 0x8000)
	fun isFIFO (ST { ftype, ... } ) = (ftype = 0x1000)
	fun is_symbolic_link (ST { ftype, ... } ) = (ftype = 0xA000)
	fun isSock (ST { ftype, ... } ) = (ftype = 0xC000)

        fun mode (ST { mode, ... } ) = mode
        fun ino (ST { ino, ... } ) = ino
        fun dev (ST { dev, ... } ) = dev
        fun nlink (ST { nlink, ... } ) = nlink
        fun uid (ST { uid, ... } ) = uid
        fun gid (ST { gid, ... } ) = gid
        fun size (ST { size, ... } ) = size
        fun atime (ST { atime, ... } ) = atime
        fun mtime (ST { mtime, ... } ) = mtime
        fun ctime (ST { ctime, ... } ) = ctime
      } /* package st */ 

    # This layout needs to track c-libs/posix-filesys/stat.c 
    type statrep =
      ( s_int			#  file type 
      * word			#  mode 
      * word			#  ino 
      * word			#  Devno 
      * word			#  nlink 
      * word			#  uid 
      * word			#  gid 
      * word                    #  sizehi 
      * word			#  sizelo 
      * int32::Int		#  Atime 
      * int32::Int		#  mtime 
      * int32::Int		#  Ctime 
      )
    fun mkStat ((ft, m, ino, devno, nlink, uid, gid,
		 szhi, szlo, at, mt, ct) : statrep) =
	st::ST { ftype = ft,
		mode = s::fromWord m,
		ino = INO ino,
		dev = DEV devno,
		nlink = host_unt::toInt nlink,	/* probably should be an int in
						 * the run-time too.
						 */
		uid = UID uid,
		gid = GID gid,
		size = joinpos (szhi, szlo),
		atime = time::from_seconds (Int32Imp::toLarge at),
		mtime = time::from_seconds (Int32Imp::toLarge mt),
		ctime = time::from_seconds (Int32Imp::toLarge ct) }

    my stat' : String -> statrep = cfun "stat_64"
    my lstat' : String -> statrep = cfun "lstat_64"
    my fstat' : s_int -> statrep = cfun "fstat_64"
    fun stat fname = mkStat (stat' fname)
    fun lstat fname = mkStat (lstat' fname) #  POSIX 1003.1a 
    fun fstat (FD { fd } ) = mkStat (fstat' fd)

    enum Access_Mode = MAY_READ | MAY_WRITE | MAY_EXECUTE
    a_read = w_osval "MAY_READ"	#  R_OK 
    a_write = w_osval "MAY_WRITE"	#  W_OK 
    a_exec = w_osval "MAY_EXECUTE"	#  X_OK 
    a_file = w_osval "FILE_EXISTS"	#  F_OK 
    fun amodeToWord [] = a_file
      | amodeToWord l = let
          fun amtoi (MAY_READ, v) = a_read ++ v
            | amtoi (MAY_WRITE, v) = a_write ++ v
            | amtoi (MAY_EXECUTE, v) = a_exec ++ v
          in
            list::fold_left amtoi a_file l
          end
    my access' : String * word -> Bool = cfun "access"
    fun access (fname, aml) = access'(fname, amodeToWord aml)

    my chmod' : String * word -> Void = cfun "chmod"
    fun chmod (fname, m) = chmod'(fname, s::toWord m)

    my fchmod' : s_int * word -> Void = cfun "fchmod"
    fun fchmod (FD { fd }, m) = fchmod'(fd, s::toWord m)

    my chown' : String * word * word -> Void = cfun "chown"
    fun chown (fname, UID uid, GID gid) = chown'(fname, uid, gid)

    my fchown' : s_int * word * word -> Void = cfun "fchown"
    fun fchown (fd, UID uid, GID gid) = fchown'(intOf fd, uid, gid)

    my utime' : String * int32::Int * int32::Int -> Void = cfun "utime"
    fun utime (file, NULL) = utime' (file, -1, 0)
      | utime (file, THE { actime, modtime } ) = let
          atime = Int32Imp::fromLarge (time::to_seconds actime)
          mtime = Int32Imp::fromLarge (time::to_seconds modtime)
          in
            utime'(file, atime, mtime)
          end
    
    my pathconf:   (String * String) -> Null_Or( word )
       =
       cfun "pathconf"

    my fpathconf'  : (s_int * String) -> Null_Or( word )
       =
       cfun "fpathconf"

    fun fpathconf (FD { fd }, s) = fpathconf'(fd, s)

  }; #  package posix_file 
end



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
