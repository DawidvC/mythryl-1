
# Build Codetree-based RTLs 


generic package rtl_build (rtl:  Codetree_Rtl) : Rtl_Build  {

    package rtl = rtl
    package t = rtl::T
    package i = t::I

    type effect  = rtl::rtl
    type expression     = t::int_expression
    type aType      = t::aType
    type Bool    = t::bool_expression
    type region  = t::int_expression
    type cond    = t::cond
    type fcond   = t::fcond
    type div_rounding_mode = t::div_rounding_mode

    fun error msg
        =
        lowcode_error_message::error("rtl_build", msg)

    hashCounter = REF 0w23

    fun newHash ()
        =
        *hashCounter
        before
            hashCounter := *hashCounter + 0w23499

    fun newOper name
        =
        {   name,
            hash = newHash(),
            attributes = REF 0w0
        }

    newOpList = REF [] :  Ref( List( t::Basis::misc_op ) )

    fun getNewOps   () =   *newOpList
    fun clearNewOps () =    newOpList := []

    fun newOp name
	= 
	{   oper =   newOper name;

	    newOpList := oper . *newOpList;

	    oper =   t::OPER oper;

	    fn es => t::OP (32, oper, es);		#  XXX 
	}

    fun op:= type (lhs, rhs)
        =
        t::ASSIGN (type, lhs, rhs)

    fun @@@ (k, type) e
        =
        T.@@@(type, k, e)

    fun Mem (k, type) (address, mem)
        =
        T.@@@(type, k, address)

    fun ??? type
        =
        T.??? 

    fun Arg (type, kind, name)
        =
        t::ARG (type, REF (t::REP kind), name)

    fun BitSlice type slice e
        =
        t::BITSLICE (type, slice, e)

    fun operand type expression =   expression
    fun immed   type expression =   expression
    fun label   type expression =   expression

    #  integer 

    fun intConst  type i =   t::LITERAL (i::from_int (type, i))
    fun wordConst type w =   t::LITERAL (i::fromWord32 (type, w))

    fun ternaryOp oper type (x, y, z) =   oper (x, type, y, z)
    fun binOp     oper type (x, y)    =   oper (type, x, y)
    fun unaryOp   oper type (x)       =   oper (type, x)

    fun sx (from, to) e =   t::SIGNEXTEND (to, from, e)
    fun zx (from, to) e =   t::ZEROEXTEND (to, from, e)

    my op (-_) = unaryOp t::NEG
    my op+     = binOp t::ADD
    my op-     = binOp t::SUB
    muls    = binOp t::MULS
    divs    = ternaryOp t::DIVS
    rems    = ternaryOp t::REMS
    mulu    = binOp t::MULU
    divu    = binOp t::DIVU
    remu    = binOp t::REMU

    negt    = unaryOp t::NEGT
    addt    = binOp t::ADDT
    subt    = binOp t::SUBT
    mult    = binOp t::MULT
    divt    = ternaryOp t::DIVT

    bitwise_not    = unaryOp t::BITWISENOT
    bitwise_and    = binOp t::BITWISEAND
    bitwise_or     = binOp t::BITWISEOR
    bitwise_xor    = binOp t::BITWISEXOR
    eqvb    = binOp t::BITWISEEQV
    my >>>     = binOp t::RIGHTSHIFT
    my >>      = binOp t::RIGHTSHIFTU
    my <<      = binOp t::LEFTSHIFT

    True    = t::TRUE
    False   = t::FALSE
    Not     = t::NOT
    And     = t::AND
    Or      = t::OR
    Xor     = t::XOR

    fun cmp cc type (x, y)     =   t::CMP  (type, cc,   x, y)
    fun Cond type (cond, x, y) =   t::COND (type, cond, x, y)

    op==== = cmp t::EQ
    my op<> = cmp t::NE
    my op>= = cmp t::GE
    my op>  = cmp t::GT
    my op<= = cmp t::LE
    my op<  = cmp t::LT
    geu  = cmp t::GEU
    gtu  = cmp t::GTU
    leu  = cmp t::LEU
    ltu  = cmp t::LTU
    setcc  = cmp t::SETCC

    fun getcc type (e, cc)
        =
        t::CMP (type, cc, e, T.???)

    #  floating point 

    fun i2f (type, x) =   t::CVTI2F (type, aType, x)
    fun f2i (type, x) =   t::CONVERTFLOATTOINT (type, t::TO_ZERO, type, x)

    fun fbinOp   oper type (x, y) =   f2i (type, oper (type, i2f (type, x), i2f (type, y)))
    fun funaryOp oper type (x)    =   f2i (type, oper (type, i2f (type, x)))

    fun fcmp fcc type (x, y)  =   t::FCMP (type, fcc, i2f (type, x), i2f (type, y))
    fun getfcc   type (e, cc) =   t::FCMP (type, cc,  i2f (type, e), i2f (type, T.???))

    fadd  = fbinOp t::FADD
    fsub  = fbinOp t::FSUB
    fmul  = fbinOp t::FMUL
    fdiv  = fbinOp t::FDIV
    fcopysign = fbinOp t::COPY_FLOAT_SIGN
    fneg  = funaryOp t::FNEG
    fabs  = funaryOp t::FABS
    fsqrt = funaryOp t::FSQRT

    my |?|     = fcmp T::(?)
    my |====|  = fcmp T::(==)
    my |?=|    = fcmp T::(?=)
    my |<|     = fcmp T::(<)
    my |?<|    = fcmp T::(?<)
    my |<=|    = fcmp T::(<=)
    my |?<=|   = fcmp T::(?<=)
    my |>|     = fcmp T::(>)
    my |?>|    = fcmp T::(?>)
    my |>=|    = fcmp T::(>=)
    my |?>=|   = fcmp T::(?>=)
    my |<>|    = fcmp T::(<>)
    my |<=>|   = fcmp T::(<=>)
    my |?<>|   = fcmp T::(?<>)
    setfcc  = fcmp t::SETFCC

    #  effects 
    Nop = t::SEQ []

    fun Jmp type address
        =
        t::JUMP (address,[]) 

    fun Call type address
        =
        t::CALL {

            funct   = address,
            targets = [],
	    defs    = [],
            uses    = [], 
	    region  = t::region::memory,
	    pops    = 0
        }

    Ret =   t::RET([])

    fun If (t::TRUE, yes, no) = yes
      | If (t::FALSE, yes, no) = no
      | If (t::CMP (type, cc, x, y), t::SEQ [], no)
            = 
	    t::IF (t::CMP (type, t::Basis::negateCond cc, x, y), no, Nop)
      | If (a, b, c) = t::IF (a, b, c)

    fun Par (t::SEQ[], y)          = y
      | Par (x, t::SEQ[])          = x
      | Par (t::SEQ xs, t::SEQ ys) = t::SEQ (xs@ys)
      | Par (t::SEQ xs, y)         = t::SEQ (xs@[y])
      | Par (x, t::SEQ ys)         = t::SEQ (x . ys)
      | Par (x, y)                 = t::SEQ[x, y] 

    map =   fn _ => list::map

};
