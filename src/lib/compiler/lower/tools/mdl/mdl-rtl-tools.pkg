
# Process rtl descriptions



###                  "Seek simplicity but distrust it."
###
###                             -- Alfred North Whitehead 



generic package mdl_rtl_tools
   (package raw_syntax_stuff:    MDL_AST_UTIL
    package codetree_rtl:  Codetree_Rtl
   )

: Mdl_Rtl_Tools

{
   package raw_syntax = raw_syntax_stuff::raw_syntax
   package rtl = codetree_rtl
   package t   = RTL::T
   package a   = raw_syntax
   package u   = raw_syntax_stuff
   package cells_basis = cells_basis

   fun error msg = lowcode_error_message::error("MDRTLTools", msg)

   /*========================================================================
    *
    * Simplify an RTL expression
    *
    *========================================================================*/
   fun simplify rtl =
   let fun statement reduce (t::SEQ [s]) = s
         | statement reduce (t::IF (t::TRUE, y, n)) = y
         | statement reduce (t::IF (t::FALSE, y, n)) = n
         | statement reduce s = s

       and /* int_expression reduce (t::ADD(_, t::LITERAL 0, x)) = x
         | int_expression reduce (t::ADD(_, x, t::LITERAL 0)) = x
         | int_expression reduce (t::SUB(_, x, t::LITERAL 0)) = x
         | int_expression reduce (t::MULS(_, _, zero as t::LITERAL 0)) = zero
         | int_expression reduce (t::MULU(_, _, zero as t::LITERAL 0)) = zero
         | int_expression reduce (t::MULT(_, _, zero as t::LITERAL 0)) = zero
         | int_expression reduce (t::MULS(_, zero as t::LITERAL 0, _)) = zero
         | int_expression reduce (t::MULU(_, zero as t::LITERAL 0, _)) = zero
         | int_expression reduce (t::MULT(_, zero as t::LITERAL 0, _)) = zero
         | int_expression reduce (t::MULS(_, x, t::LITERAL 1)) = x
         | int_expression reduce (t::MULU(_, x, t::LITERAL 1)) = x
         | int_expression reduce (t::MULT(_, x, t::LITERAL 1)) = x
         | int_expression reduce (t::DIVS(_, x, t::LITERAL 1)) = x
         | int_expression reduce (t::DIVU(_, x, t::LITERAL 1)) = x
         | int_expression reduce (t::DIVT(_, x, t::LITERAL 1)) = x
         | int_expression reduce (t::BITWISEAND(_, _, zero as t::LITERAL 0)) = zero
         | int_expression reduce (t::BITWISEAND(_, zero as t::LITERAL 0, _)) = zero 
         | */ int_expression reduce (e as t::BITWISEAND(_, x, y)) = 
             if RTL::Util::eqRexp (x, y) then x else e
         /* | int_expression reduce (t::BITWISEOR(_, x, t::LITERAL 0)) = x
         | int_expression reduce (t::BITWISEOR(_, t::LITERAL 0, x)) = x */
         | int_expression reduce (e as t::BITWISEOR(_, x, y)) = 
             if RTL::Util::eqRexp (x, y) then x else e
         | int_expression reduce (t::BITWISENOT(_, t::BITWISENOT(_, x))) = x
         | int_expression reduce (e as t::SIGNEXTEND (t1, t2, x)) = if t1 == t2 then x else e
         | int_expression reduce (e as t::ZEROEXTEND (t1, t2, x)) = if t1 == t2 then x else e
         | int_expression reduce e = e
       and float_expression reduce e = e

       and bool_expression reduce (t::NOT t::TRUE) = t::FALSE
         | bool_expression reduce (t::NOT t::FALSE) = t::TRUE
         | bool_expression reduce (t::AND (t::FALSE, _)) = t::FALSE
         | bool_expression reduce (t::AND(_, t::FALSE)) = t::FALSE
         | bool_expression reduce (t::AND (t::TRUE, x)) = x
         | bool_expression reduce (t::AND (x, t::TRUE)) = x
         | bool_expression reduce (t::OR (t::FALSE, x)) = x
         | bool_expression reduce (t::OR (x, t::FALSE)) = x
         | bool_expression reduce (t::OR (t::TRUE, _)) = t::TRUE
         | bool_expression reduce (t::OR(_, t::TRUE)) = t::TRUE
         | bool_expression reduce (e as t::CMP(_, t::EQ, x, y)) = 
            if RTL::Util::eqRexp (x, y) then t::TRUE else e
         | bool_expression reduce (e as t::CMP(_, t::NE, x, y)) = 
            if RTL::Util::eqRexp (x, y) then t::FALSE else e
         | bool_expression reduce e = e

       rewriter = 
             RTL::Rewrite::rewrite { int_expression, float_expression, bool_expression, statement }
   in  rewriter.statement rtl
   end
 
   /*========================================================================
    *
    * Translate an RTL into something else
    *
    *========================================================================*/
   fun transRTL 
        { apply, id, int, intinf, word32, string, list, Nil, tuple, record, arg,
         cellkind, oper, region } 
                rtl = 
   let fun word w = word32 (unt::toLargeWord w)
       fun ternOp n (x, type, y, z) = apply (n,[x, int type, int_expression y, int_expression z])
       and binOp n (type, x, y) = apply (n,[int type, int_expression x, int_expression y])
       and unaryOp n (type, x) = apply (n,[int type, int_expression x])
       and int_expression (t::LITERAL i) = apply("LITERAL",[intinf i])
         | int_expression (t::NEG x) = unaryOp "NEG" x
         | int_expression (t::ADD x) = binOp "ADD" x
         | int_expression (t::SUB x) = binOp "SUB" x
         | int_expression (t::MULS x) = binOp "MULS" x
/* FIXME
         | int_expression (t::DIVS x) = ternOp "DIVS" x
         | int_expression (t::REMS x) = ternOp "REMS" x	
 */
         | int_expression (t::MULU x) = binOp "MULU" x
         | int_expression (t::DIVU x) = binOp "DIVU" x
         | int_expression (t::REMU x) = binOp "REMU" x
         | int_expression (t::NEGT x) = unaryOp "NEGT" x
         | int_expression (t::ADDT x) = binOp "ADDT" x
         | int_expression (t::SUBT x) = binOp "SUBT" x
         | int_expression (t::MULT x) = binOp "MULT" x
/* FIXME
         | int_expression (t::DIVT x) = ternOp "DIVT" x
 */
         | int_expression (t::BITWISENOT x) = unaryOp "BITWISENOT" x 
         | int_expression (t::BITWISEAND x) = binOp "BITWISEAND" x
         | int_expression (t::BITWISEOR x) = binOp "BITWISEOR" x
         | int_expression (t::BITWISEXOR x) = binOp "BITWISEXOR" x
         | int_expression (t::BITWISEEQV x) = binOp "BITWISEEQV" x
         | int_expression (t::LEFTSHIFT x) = binOp "LEFTSHIFT" x
         | int_expression (t::RIGHTSHIFTU x) = binOp "RIGHTSHIFTU" x
         | int_expression (t::RIGHTSHIFT x) = binOp "RIGHTSHIFT" x
         | int_expression (t::SIGNEXTEND (t1, t2, x)) = apply("SIGNEXTEND",[int t1, int t2, int_expression x])
         | int_expression (t::ZEROEXTEND (t1, t2, x)) = apply("ZEROEXTEND",[int t1, int t2, int_expression x])
         | int_expression (t::CONVERTFLOATTOINT (t1, r, t2, x)) = 
               apply("CONVERTFLOATTOINT",[int t1, id (t::Basis::roundingModeToString r),
                             int t2, float_expression x])
         | int_expression (t::COND (type, cc, a, b)) = 
              apply("COND",[int type, bool_expression cc, int_expression a, int_expression b])
         | int_expression (T.@@@(type, k, e)) = apply("@@@",[int type, cellkind k, int_expression e])
         | int_expression (t::ARG (type, a, b)) = arg (type, a, b)
         | int_expression (t::PARAM (i)) = apply("PARAM",[int i])
         | int_expression (T.???) = id "???"
         | int_expression (t::OP (type, opc, es)) = 
              apply("OP",[int type, oper opc, list (map int_expression es, NULL)])
         | int_expression (t::BITSLICE (type, sl, e)) =
              apply("BITSLICE",[int type, slice sl, int_expression e])
         | int_expression e = error("transRTL: "$RTL::Util::rexpToString e)
       and slice sl = list (map (fn (x, y) => tuple[int x, int y]) sl, NULL)
       and fbinOp n (type, x, y) = apply (n,[int type, float_expression x, float_expression y])
       and funaryOp n (type, x) = apply (n,[int type, float_expression x])
       and float_expression (t::FADD x) = fbinOp "FADD" x
         | float_expression (t::FSUB x) = fbinOp "FSUB" x
         | float_expression (t::FMUL x) = fbinOp "FMUL" x
         | float_expression (t::FDIV x) = fbinOp "FDIV" x
         | float_expression (t::COPY_FLOAT_SIGN x) = fbinOp "FCOPYSIGN" x
         | float_expression (t::FNEG x) = funaryOp "FNEG" x
         | float_expression (t::FABS x) = funaryOp "FABS" x
         | float_expression (t::FSQRT x) = funaryOp "FSQRT" x
         | float_expression (t::FCOND (type, cc, x, y)) = 
              apply("FCOND",[int type, bool_expression cc, float_expression x, float_expression y])
         | float_expression (t::CVTI2F (t1, t2, x)) = apply("CVTI2F",[int t1, int t2, int_expression x])
         | float_expression (t::CVTF2F (t1, t2, x)) = apply("CVTF2F",[int t1, int t2, float_expression x])
         | float_expression e = error("transRTL: "$RTL::Util::fexpToString e)
      
       and statement (t::ASSIGN (type, x, y)) = apply("ASSIGN",[int type, int_expression x, int_expression y])
         | statement (t::JUMP (e, _)) = apply("JMP",[int_expression e, Nil])
         | statement (t::RET _) = apply("RET",[Nil])
         | statement (t::IF (x, y, z)) = apply("IF",[bool_expression x, statement y, statement z])
         | statement (t::SEQ ss) = apply("SEQ",[list (map statement ss, NULL)])
         | statement (t::RTL { e, ... } ) = statement e
         | statement (t::CALL { funct, ... } ) = apply("CALL",
                [record[("defs", Nil),     
                        ("uses", Nil),
                        ("funct", int_expression funct),
                        ("targets", Nil),
                        ("region", region)]
                ]
            )
         | statement s = error("transRTL: "$RTL::Util::stmToString s)

       and bool_expression (t::CMP (type, cc, x, y)) = 
             apply("CMP",[int type, id (t::Basis::condToString cc), int_expression x, int_expression y])
         | bool_expression (t::FCMP (type, cc, x, y)) = 
             apply("FCMP",[int type, id (t::Basis::fcondToString cc), float_expression x, float_expression y])
         | bool_expression (t::TRUE)     = id "TRUE"
         | bool_expression (t::FALSE)    = id "FALSE"
         | bool_expression (t::AND (x, y)) = apply("AND",[bool_expression x, bool_expression y])
         | bool_expression (t::OR (x, y))  = apply("OR",[bool_expression x, bool_expression y])
         | bool_expression (t::XOR (x, y)) = apply("XOR",[bool_expression x, bool_expression y])
         | bool_expression (t::EQV (x, y)) = apply("EQV",[bool_expression x, bool_expression y])
         | bool_expression (t::NOT x)    = apply("NOT",[bool_expression x])
         | bool_expression e = error("transRTL: "$RTL::Util::ccexpToString e)
   in  statement rtl
   end

   /*========================================================================
    * Translate an RTL to an expression
    *========================================================================*/
   fun rtlToExpression rtl = 
   let fun id name = a::IDexp (a::IDENT(["T"], name))
       fun apply (n, es) = a::APPLY_EXPRESSION (id n, a::TUPLEexp es)
       int = u::INT_CONSTANT_IN_EXPRESSION
       string= u::STRING_CONSTANT_IN_EXPRESSION
       fun arg (type, a, name) = a::IDexp (a::IDENT([], name))
       fun cellkind k = a::IDexp (a::IDENT(["C"], cells_basis::cellkindToString k))
       fun oper (t::OPER { name, ... } ) = a::IDexp (a::IDENT(["P"], name))
       region=a::IDexp (a::IDENT(["T", "Region"], "memory"))
   in  transRTL { id=id, apply=app, list=a::LISTexp, string=string,
                int=int, intinf=u::INTINFexp,
                word32=u::WORD32expression, Nil=a::LISTexp([], NULL),
                tuple=a::TUPLEexp, record=a::RECORD_EXPRESSION,
                region=region, arg=arg, cellkind=cellkind, oper=oper
               } rtl
   end

   /*========================================================================
    * Translate an RTL to a pattern
    *========================================================================*/
   fun rtlToPattern rtl = 
   let fun mkId name = a::IDENT(["T"], name)
       fun id name = a::CONSpat (mkId name, NULL)
       fun apply (n, [x]) = a::CONSpat (mkId n, THE x)
         | apply (n, es) = a::CONSpat (mkId n, THE (a::TUPLEpat es))
       fun record ps = a::RECORD_PATTERN (ps, FALSE)
       int = u::INT_CONSTANT_IN_PATTERN
       intinf= u::INTINFpat
       string= u::STRING_CONSTANT_IN_PATTERN
       fun arg (type, a, name) = a::IDpat name
       fun cellkind k = a::IDpat (cells_basis::cellkindToString k)
       fun oper (t::OPER { name, ... } ) = 
          a::CONSpat (a::IDENT(["T"], "OPER"),
            THE (a::RECORD_PATTERN([("name", u::STRING_CONSTANT_IN_PATTERN name)], TRUE)))
       region=a::WILDCARD_PATTERN
   in  transRTL { id=id, apply=app, list=a::LISTpat, string=string,
                int=int, intinf=intinf,
                word32=u::WORD32pattern, Nil=a::LISTpat([], NULL),
                tuple=a::TUPLEpat, record=record, region=region,
                arg=arg, cellkind=cellkind, oper=oper
               } rtl
   end

   /*========================================================================
    * Translate an RTL to a function with arguments
    *========================================================================*/
   fun rtlToFun (rtlName, rtlArgs, rtl) = 
   let body = rtlToExpression rtl 
       args = a::RECORD_PATTERN (map (fn id => (id, a::IDpat id)) rtlArgs, FALSE)
   in  a::FUNdecl
          [a::FUNbind (rtlName, [a::CLAUSE([args], NULL, body)])]
   end

   /*========================================================================
    * Create a new_op 
    *========================================================================*/
   fun createNewOp { name, hash, attributes } =
       a::VALdecl[
         a::NAMED_VARIABLE (a::IDpat name,
            a::APPLY_EXPRESSION (a::IDexp (a::IDENT(["T"], "OPER")),
               a::APPLY_EXPRESSION (a::IDexp (a::IDENT(["RTL"], "newOp")),
                  a::RECORD_EXPRESSION[("name", u::STRING_CONSTANT_IN_EXPRESSION name),
                              ("attributes", u::UNT_CONSTANT_IN_EXPRESSION *attributes)
                             ])))
       ]

};

