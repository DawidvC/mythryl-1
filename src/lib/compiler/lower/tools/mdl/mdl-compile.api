
# Compile the machine description into an internal digestable form

api Mdl_Compile =
api

   package raw_syntax:        MDL_AST
   package Dictionary:        Mdl_Dictionary
   package util:       MDL_AST_UTIL
   package Trans:      MDL_AST_TRANSLATION
   package Consts:     MDL_AST_CONSTANTS
   package Rewriter:   MDL_AST_REWRITER
   package RawSyntaxTreePP:      MDL_AST_PRETTY_PRINTER
   package TypeUtils:  Mdl_Type_Utilities
   package error:      MDL_ERROR
      sharing raw_syntax = Dictionary::raw_syntax = Util::raw_syntax = Rewriter::raw_syntax = Consts::raw_syntax =
              Trans::raw_syntax = RawSyntaxTreePP::raw_syntax = TypeUtils::raw_syntax

   type md  #  machine description 
   type filename = String

   #  Extract info from a machine description 
   my endianess:  md -> raw_syntax::endianess    #  endianess 
   my archKind:   md -> raw_syntax::archKind     #  kind of architecture 
   my asmCase:    md -> raw_syntax::assemblycase #  Assembly case 
   my name:       md -> String           #  name of description 
   my filename:   md -> String           #  filename 
   my dictionary:       md -> Dictionary::dictionary          #  Dictionary 
   my cells:      md -> List( raw_syntax::storagedecl )

#   my cellSets:   md -> List( raw_syntax::storagedecl )      #  All cellkinds with cellsets 
#   my cellSetsAliases:  md -> List( raw_syntax::storagedecl ) #  include all aliases 

   my locations:  md -> List( raw_syntax::locbind )
   my formats:    md ->  List( Null_Or( Int ) * raw_syntax::formatbind)
   my debugging:  md -> String -> Bool
   my lookupCellKind:  md -> String -> raw_syntax::storagedecl 
   my lookupDatatype:  md -> String -> raw_syntax::datatypebind 
   my hasCopyImpl:  md -> Bool

   my resources:  md -> List( raw_syntax::id )
   my pipelines:  md -> List( raw_syntax::pipelinebind )
   my cpus:       md -> List( raw_syntax::cpubind )
   my latencies:  md -> List( raw_syntax::latencybind )

   #  Compile an AST into a machine description 
   my compile:    filename * List( raw_syntax::decl ) -> md

   #  Extract info from the dictionary 
   my declOf:     md -> String -> raw_syntax::decl      #  Body of package 
   my genericArgOf:   md -> String -> raw_syntax::decl  #  generic argument 
   my typeOf:     md -> String -> raw_syntax::decl      # type definitions
   my instructions:  md -> List( raw_syntax::consbind ) 

   #  Require the definitions of these things 
   my require:   md -> String -> { values: List( raw_syntax::id ), types: List( raw_syntax::id ) } 
                    -> Void

   #  Code generation functions 
   type module = String
   type arguments = List( String )
   type apiName = String

   my mkQueryByCellKind:  md -> String -> raw_syntax::decl
   my forallUserCellKinds:  md -> (raw_syntax::storagedecl -> X) -> List( X )

   my errorHandler:  md -> String -> raw_syntax::decl
   my signame:    md -> module -> String
   my strname:    md -> module -> String
   my mkCode:     List( raw_syntax::decl ) -> pp::prettyprint 
   my make_package:      md -> String -> apiName -> List( raw_syntax::decl ) -> pp::prettyprint
   my make_api:      md -> module -> List( raw_syntax::decl ) -> pp::prettyprint
   my make_generic:      md -> module -> arguments -> apiName -> 
                    List( raw_syntax::decl ) -> pp::prettyprint
   my make_generic'    : md -> module -> raw_syntax::decl -> apiName ->  
                    List( raw_syntax::decl ) -> pp::prettyprint
   my outfile:    md -> module -> String -> String -> Void
   my pathName:   md -> module -> String -> String
   my codegen:    md -> module -> List( pp::prettyprint ) -> Void

end
