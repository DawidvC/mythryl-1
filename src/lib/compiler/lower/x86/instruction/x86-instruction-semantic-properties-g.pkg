## x86-instruction-semantic-properties-g.pkg -- 32bit, x86 instruction semantic properties

# Compiled by:
#     src/lib/compiler/lower/make7/ia32.make6


# We are invoked from:
#
#     src/lib/compiler/codegen/x86/x86-codetree.pkg

generic package x86_instruction_semantic_properties_g (

    package instruction_set
        :
        Instruction_Set_X86;				# Instruction_Set_X86		is from   src/lib/compiler/lower/x86/instruction/instruction-set-x86.api

    package codetree_hash
        :
        Codetree_Hash					# Codetree_Hash			is from   src/lib/compiler/lower/codetree/codetree-hash.api
        where codetree == instruction_set::codetree;

    package codetree_eval
        :
        Codetree_Eval					# Codetree_Eval			is from   src/lib/compiler/lower/codetree/codetree-eval.api
        where codetree == instruction_set::codetree;
)

: (weak) Instruction_Properties				# Instruction_Properties	is from   src/lib/compiler/lower/instruction/instruction-properties.api

{
    package instruction_set  = instruction_set;
    package cells            = instruction_set::cells;
    package codetree         = instruction_set::codetree;

    package i  = instruction_set;
    package c  = cells;
    package t  = codetree;
    package cb = cells_basis;				# cells_basis			is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    exception NEGATE_CONDITIONAL;

    fun error msg
        =
        lowcode_error_message::error("x86_instruction_semantic_properties_g", msg);

     Kind = IK_JUMP | IK_NOP | IK_INSTRUCTION | IK_COPY | IK_CALL 
	  | IK_CALL_WITH_CUTS | IK_PHI | IK_SOURCE | IK_SINK
          ;

     Target = LABELLED  label::Label | FALLTHROUGH | ESCAPES;

    # ========================================================================
    #  Instruction Kinds
    # ========================================================================
    fun instruction_kind (i::NOTE { instruction, ... } )
            =>
            instruction_kind instruction;

	instruction_kind (i::COPY _)
            =>
            IK_COPY;

	instruction_kind (i::BASE_INSTRUCTION i)
	    => 
	    case i 
		i::CALL { cuts_to=>_ ! _, ... } => IK_CALL_WITH_CUTS;
		i::CALL   _ =>   IK_CALL;
		i::JMP    _ =>   IK_JUMP;
		i::JCC    _ =>   IK_JUMP;
		i::PHI    _ =>   IK_PHI;
		i::SOURCE _ =>   IK_SOURCE;
		i::SINK   _ =>   IK_SINK;
		i::RET    _ =>   IK_JUMP;
		i::INTO     =>   IK_JUMP;
		_           =>   IK_INSTRUCTION;
	    esac;

        instruction_kind _
            =>
            IK_INSTRUCTION;
    end;

    fun move_instruction (i::NOTE { instruction, ... } )
            =>
            move_instruction instruction;

	move_instruction (i::LIVE _) => FALSE;
	move_instruction (i::DEAD _) => FALSE;
	move_instruction (i::COPY _) => TRUE;

	move_instruction (i::BASE_INSTRUCTION i)
          => 
	  case i
	      i::MOVE  { mv_op=>i::MOVL, src=>i::DIRECT _, dst=>i::MEM_REG _, ... } => TRUE;
	      i::MOVE  { mv_op=>i::MOVL, src=>i::MEM_REG _, dst=>i::DIRECT _, ... } => TRUE;
	      i::FMOVE { fsize=>i::FP64, src=>i::FPR _, dst=>i::FPR _, ... } => TRUE;
	      i::FMOVE { fsize=>i::FP64, src=>i::FPR _, dst=>i::FDIRECT _, ... } => TRUE;
	      i::FMOVE { fsize=>i::FP64, src=>i::FDIRECT _, dst=>i::FPR _, ... } => TRUE;
	      i::FMOVE { fsize=>i::FP64, src=>i::FDIRECT _, dst=>i::FDIRECT _, ... } => TRUE;
	      _ => FALSE;
          esac;
    end;


    fun is_mem_move (i::BASE_INSTRUCTION i)
	    => 
	    case i
		i::MOVE  { mv_op=>i::MOVL,  src=>i::DIRECT _,  dst=>i::MEM_REG _, ... } => TRUE;
		i::MOVE  { mv_op=>i::MOVL,  src=>i::MEM_REG _, dst=>i::DIRECT _,  ... } => TRUE;
		i::FMOVE { fsize=>i::FP64, src=>i::FPR _,     dst=>i::FPR _,     ... } => TRUE;
		i::FMOVE { fsize=>i::FP64, src=>i::FPR _,     dst=>i::FDIRECT _, ... } => TRUE;
		i::FMOVE { fsize=>i::FP64, src=>i::FDIRECT _, dst=>i::FPR _,     ... } => TRUE;
		i::FMOVE { fsize=>i::FP64, src=>i::FDIRECT _, dst=>i::FDIRECT _, ... } => TRUE;

		_ => FALSE;
	    esac; 

        is_mem_move _ => FALSE;
    end;


    fun mem_move (i::BASE_INSTRUCTION i)
	    => 
	    case i
		i::MOVE  { src=>i::DIRECT rs,  dst=>i::MEM_REG rd, ... } => ([rd], [rs]);
		i::MOVE  { src=>i::MEM_REG rs, dst=>i::DIRECT rd,  ... } => ([rd], [rs]);
		i::FMOVE { src=>i::FPR rs,     dst=>i::FPR rd,     ... } => ([rd], [rs]);
		i::FMOVE { src=>i::FDIRECT rs, dst=>i::FPR rd,     ... } => ([rd], [rs]);
		i::FMOVE { src=>i::FPR rs,     dst=>i::FDIRECT rd, ... } => ([rd], [rs]);
		i::FMOVE { src=>i::FDIRECT rs, dst=>i::FDIRECT rd, ... } => ([rd], [rs]);

		 _ => error "memMove: INSTR";
	   esac;

       mem_move _
           =>
           error "mem_move";
    end;

    nop =   fn () =  i::nop;


   /*========================================================================
    *  Parallel Move
    *========================================================================*/

    fun move_tmp_r (i::NOTE { instruction, ... } ) => move_tmp_r instruction;
	move_tmp_r (i::COPY { kind => cb::REGISTER, tmp=>THE (i::DIRECT r), ... } ) => THE r;
	move_tmp_r (i::COPY { kind => cb::FLOAT_REGISTER, tmp=>THE (i::FDIRECT f), ... } ) => THE f;
	move_tmp_r (i::COPY { kind => cb::FLOAT_REGISTER, tmp=>THE (i::FPR f), ... } ) => THE f; 
	move_tmp_r _ => NULL;
    end;

    fun move_dst_src (i::NOTE { instruction, ... } ) => move_dst_src instruction;
	move_dst_src (i::COPY { src, dst, ... } ) => (dst, src);

	move_dst_src (i::BASE_INSTRUCTION i)
            => 
	    case i
		i::MOVE  { src=>i::DIRECT rs, dst=>i::MEM_REG rd,  ... } => ([rd], [rs]);
		i::MOVE  { src=>i::MEM_REG rs, dst=>i::DIRECT rd,  ... } => ([rd], [rs]);
		i::FMOVE { src=>i::FPR rs, dst=>i::FPR rd,         ... } => ([rd], [rs]);
		i::FMOVE { src=>i::FDIRECT rs, dst=>i::FPR rd,     ... } => ([rd], [rs]);
		i::FMOVE { src=>i::FPR rs, dst=>i::FDIRECT rd,     ... } => ([rd], [rs]);
		i::FMOVE { src=>i::FDIRECT rs, dst=>i::FDIRECT rd, ... } => ([rd], [rs]);
		 _ => error "moveDstSrc";
	   esac;

	move_dst_src _
            =>
            error "move_dst_src";
    end;

   /*=====================================================================
    *  Branches and Calls/Returns
    *=====================================================================*/
    fun branch_targets (i::NOTE { instruction, ... } )
            =>
            branch_targets instruction;

        branch_targets (i::BASE_INSTRUCTION i)
	    => 
	    case i
		i::JMP(_, []) => [ESCAPES];
		i::JMP(_, labs) => map LABELLED labs;
		i::RET _ => [ESCAPES];
		i::JCC { operand=>i::IMMED_LABEL (t::LABEL (lab)), ... } => 
		   [FALLTHROUGH, LABELLED lab];
		i::CALL { cuts_to, ... } => FALLTHROUGH ! map LABELLED cuts_to;
		i::INTO => [ESCAPES];
		 _ => error "branchTargets";
	    esac;

        branch_targets _
            =>
            error "branchTargets";
    end;


    fun jump label
        =
        i::jmp (i::IMMED_LABEL (t::LABEL label), [label]);


    exception NOT_IMPLEMENTED;


    fun set_jump_target (i::NOTE { note, instruction }, l)
            =>
            i::NOTE { note, instruction=>set_jump_target (instruction, l) };

        set_jump_target (i::BASE_INSTRUCTION (i::JMP (i::IMMED_LABEL _, _)), lab)
            =>
            jump lab;

        set_jump_target _
            =>
            error "set_jump_target";
    end;


    fun set_branch_targets { i=>i::NOTE { note, instruction }, t, f }
            => 
	    i::NOTE { note, instruction=>set_branch_targets { i=>instruction, t, f }};

        set_branch_targets { i=>i::BASE_INSTRUCTION (i::JCC { cond, operand=>i::IMMED_LABEL _} ), t, ... }
	    => 
	    i::jcc { cond, operand=>i::IMMED_LABEL (t::LABEL t) };

        set_branch_targets _
            =>
	    error "set_branch_targets";
    end;


    fun negate_conditional (i::NOTE { instruction, note }, lab)
            =>
	    i::NOTE { instruction=>negate_conditional (instruction, lab), note };

        negate_conditional (i::BASE_INSTRUCTION (i::JCC { cond, operand=>i::IMMED_LABEL (t::LABEL _) } ), lab)
            =>
	    {   cond' = case cond
			    i::EQ => i::NE;
			    i::NE => i::EQ;
			    i::LT => i::GE;
			    i::LE => i::GT;
			    i::GT => i::LE;
			    i::GE => i::LT;
			    i::BB => i::AE;
			    i::BE => i::AA;
			    i::AA => i::BE;
			    i::AE => i::BB;
			    i::CC => i::NC;
			    i::NC => i::CC;
			    i::PP => i::NP;
			    i::NP => i::PP;
			    i::OO => i::NO;
			    i::NO => i::OO;
                        esac;

		  i::BASE_INSTRUCTION (i::JCC { cond=>cond', operand=>i::IMMED_LABEL (t::LABEL lab) } );
	    };

        negate_conditional _
	    =>
            error "negateConditional";
    end;

    immed_range= { lo=> -1073741824, hi=>1073741823 };
    to_int32 = int32::from_large o int::to_large;

    fun load_immed { immed, t }
        =
	i::move { mv_op=>i::MOVL, src=>i::IMMED (to_int32 immed), dst=>i::DIRECT t };

    fun load_operand { opn, t }
        =
        i::move { mv_op=>i::MOVL, src=>opn, dst=>i::DIRECT t };

   /*=====================================================================
    *  Hashing and Equality on operands
    *=====================================================================*/
    fun hash_opn (i::IMMED i) => unt::from_int (int32::to_int i);
	hash_opn (i::IMMED_LABEL le) => codetree_hash::hash le + 0u123;
	hash_opn (i::RELATIVE i) => unt::from_int i + 0u1232;
	hash_opn (i::LABEL_EA le) => codetree_hash::hash le + 0u44444;
	hash_opn (i::DIRECT r)  => cb::hash_cell r;
	hash_opn (i::MEM_REG r)  => cb::hash_cell r + 0u2123;
	hash_opn (i::ST f) => cb::hash_cell f + 0u88;
	hash_opn (i::FPR f) => cb::hash_cell f + 0u881;
	hash_opn (i::FDIRECT f) => cb::hash_cell f + 0u31245;

	hash_opn (i::DISPLACE { base, disp, ... } )
            => 
	    hash_opn disp + cb::hash_cell base;

	hash_opn (i::INDEXED { base, index, scale, disp, ... } )
            =>
	    cb::hash_cell index + unt::from_int scale + hash_opn disp;
    end;

    fun eq_opn (i::IMMED a, i::IMMED b)   =>   a == b;
	eq_opn (i::IMMED_LABEL a, i::IMMED_LABEL b) => codetree_eval::(====) (a, b);
	eq_opn (i::RELATIVE a, i::RELATIVE b)   =>   a == b;
	eq_opn (i::LABEL_EA a, i::LABEL_EA b) => codetree_eval::(====) (a, b);
	eq_opn (i::DIRECT a, i::DIRECT b) => cb::same_color (a, b);
	eq_opn (i::MEM_REG a, i::MEM_REG b) => cb::same_color (a, b);
	eq_opn (i::FDIRECT a, i::FDIRECT b) => cb::same_color (a, b);
	eq_opn (i::ST a, i::ST b) => cb::same_color (a, b);
	eq_opn (i::FPR a, i::FPR b) => cb::same_color (a, b);

	eq_opn (i::DISPLACE { base=>a, disp=>b, ... }, i::DISPLACE { base=>c, disp=>d, ... } )
            =>
	    cb::same_color (a, c) and eq_opn (b, d);

	eq_opn (i::INDEXED { base=>a, index=>b, scale=>c, disp=>d, ... },
	       i::INDEXED { base=>e, index=>f, scale=>g, disp=>h, ... } )
            =>
	    cb::same_color (b, f) and c == g
	    and same_cell_option (a, e) and eq_opn (d, h);

	eq_opn _
            =>
            FALSE;
    end 

    also
    fun same_cell_option (NULL, NULL) => TRUE;
	same_cell_option (THE x, THE y) => cb::same_color (x, y);
	same_cell_option _ => FALSE;
    end;

   /*========================================================================
    *  Definition and use (for register allocation mainly)
    *========================================================================*/
    eax_pair = [c::edx, c::eax];

    fun def_use_r instruction
        =
        {   fun operand_acc (i::DIRECT r, acc) => r ! acc;
		operand_acc (i::MEM_REG r, acc) => r ! acc;
		operand_acc (i::DISPLACE { base, ... }, acc) => base ! acc;
		operand_acc (i::INDEXED { base=>THE b, index, ... }, acc) => b ! index ! acc;
		operand_acc (i::INDEXED { base=>NULL, index, ... }, acc) => index ! acc;
		operand_acc(_, acc) => acc;
	    end;

	    fun x86def_use_r instruction
                =
                {   fun operand_use operand
                        =
                        operand_acc (operand, []);

		    fun operand_use2 (src1, src2) =  ([], operand_acc (src1, operand_use src2));
		    fun operand_use3 (x, y, z)    =  ([], operand_acc (x, operand_acc (y, operand_use y)));

		    fun operand_def (i::DIRECT r) => [r];
		        operand_def (i::MEM_REG r) => [r];
		        operand_def _ => [];
                    end;

		    fun multdiv { src, mult_div_op }
			=
			{   uses = operand_use src;

			    case mult_div_op
			        (i::IDIVL1 | i::DIVL1) => (eax_pair, c::edx ! c::eax ! uses);
			        (i::IMULL1 | i::MULL1) => (eax_pair, c::eax ! uses);
                            esac;
			};

		    fun unary operand = (operand_def operand, operand_use operand);
		    fun cmptest { lsrc, rsrc } = ([], operand_acc (lsrc, operand_use rsrc));
		    fun esp_only ()  = { sp = [c::stackptr_r];  (sp, sp); };
		    fun push arg = ([c::stackptr_r], operand_acc (arg, [c::stackptr_r]));
		    fun float operand = ([], operand_use operand);

		    case instruction
		      
			i::JMP (operand, _)        => ([], operand_use operand);
			i::JCC { operand, ... }      => ([], operand_use operand);
			i::CALL { operand, defs, uses, ... } => 
			    (c::get_reg defs, operand_acc (operand, c::get_reg uses));
			i::MOVE { src, dst=>i::DIRECT r, ... } => ([r], operand_use src);
			i::MOVE { src, dst=>i::MEM_REG r, ... } => ([r], operand_use src);
			i::MOVE { src, dst, ... } => ([], operand_acc (dst, operand_use src));
			i::LEA { r32, address }      => ([r32], operand_use address);
			( i::CMPL arg | i::CMPW arg | i::CMPB arg
			 | i::TESTL arg | i::TESTW arg | i::TESTB arg ) => cmptest arg; 
			i::BITOP { lsrc, rsrc, ... } => cmptest { lsrc, rsrc };

			i::BINARY { bin_op=>i::XORL, src=>i::DIRECT rs, dst=>i::DIRECT rd, ... }
                            =>   
			    if (cb::same_color (rs, rd))  ([rd],[]);
                            else                          ([rd],[rs, rd]);
                            fi;

			i::BINARY { src, dst, ... }
                            =>   
			    (operand_def dst, operand_acc (src, operand_use dst));

			i::SHIFT { src, dst, count, ... }
                            =>   
			    ( operand_def dst, 
			      operand_acc (count, operand_acc (src, operand_use dst))
                            );

			i::CMPXCHG { src, dst, ... }
                            =>
			    (c::eax ! operand_def dst, c::eax ! operand_acc (src, operand_use dst));

			i::ENTER _             => ([c::esp, c::ebp], [c::esp, c::ebp]);
			i::LEAVE               => ([c::esp, c::ebp], [c::esp, c::ebp]);
			i::MULTDIV arg	      => multdiv arg;
			i::MUL3 { src1, dst, ... } => ([dst], operand_use src1);

			i::UNARY { operand, ... }    => unary operand;
			i::SET { operand, ... }      => unary operand;
			( i::PUSHL arg | i::PUSHW arg | i::PUSHB arg ) => push arg;
			i::POP arg	      => (c::stackptr_r ! operand_def arg, [c::stackptr_r]);
			i::PUSHFD	      => esp_only();
			i::POPFD		      => esp_only();
			i::CDQ		      => ([c::edx], [c::eax]);
			i::FSTPT operand	      => float operand;
			i::FSTPL operand	      => float operand;
			i::FSTPS operand	      => float operand; 
			i::FSTL operand	      => float operand;
			i::FSTS operand	      => float operand; 
			i::FLDL operand	      => float operand;
			i::FLDS operand	      => float operand;
			i::FILD operand           => float operand;
			i::FILDL operand          => float operand;
			i::FILDLL operand         => float operand;
			i::FBINARY { src, ... }   => ([], operand_use src);
			i::FIBINARY { src, ... }  => ([], operand_use src);
			i::FENV { operand, ... }     => ([], operand_use operand);
			i::FNSTSW	      => ([c::eax], []);
			i::FUCOM operand          => float operand;
			i::FUCOMP operand         => float operand;
			i::FCOMI operand          => float operand;
			i::FCOMIP operand         => float operand;
			i::FUCOMI operand         => float operand;
			i::FUCOMIP operand        => float operand;

			i::FMOVE { src, dst, ... } => operand_use2 (src, dst); 
			i::FILOAD { ea, dst, ... } => operand_use2 (ea, dst); 
			i::FCMP { lsrc, rsrc, ... } => operand_use2 (lsrc, rsrc);
			i::FBINOP { lsrc, rsrc, dst, ... } => operand_use3 (lsrc, rsrc, dst);
			i::FIBINOP { lsrc, rsrc, dst, ... } => operand_use3 (lsrc, rsrc, dst);
			i::FUNOP { src, dst, ... } => operand_use2 (src, dst);

			i::SAHF		      => ([], [c::eax]);
			i::LAHF		      => ([c::eax], []);
			 # This sets the low order byte, 
			 # do potentially it may define *and* use 

			i::CMOV { src, dst, ... } => ([dst], operand_acc (src, [dst]));
			_		      => ([], []);
                    esac;
	        }; 

	    case instruction
		i::NOTE { instruction, ... } => def_use_r instruction;
		i::LIVE { regs, ... } => ([], c::get_reg regs);
		i::DEAD { regs, ... } => (c::get_reg regs, []);

		i::COPY { kind => cb::REGISTER, dst, src, tmp, ... }
		    => 
		    case tmp
			NULL => (dst, src);
			THE (i::DIRECT r) => (r ! dst, src);
			THE (i::MEM_REG r) => (r ! dst, src);
			THE (ea) => (dst, operand_acc (ea, src));
		    esac;

		i::COPY _ => ([], []);
		i::BASE_INSTRUCTION i  => x86def_use_r i;
	    esac;
        };

    fun def_use_f instruction
	=
	{   fun x86def_use_f instruction
		=
		{   fun do_operand (i::FDIRECT f) => [f];
			do_operand (i::FPR f) => [f];
			do_operand _ => [];
		    end;

		    fun operand_acc (i::FDIRECT f, acc) => f ! acc;
			operand_acc (i::FPR f, acc) => f ! acc;
			operand_acc(_, acc) => acc;
		    end;

		    fun fbinop (lsrc, rsrc, dst)
			= 
			{   def = do_operand dst;
			    uses = operand_acc (lsrc, do_operand rsrc);
			    (def, uses); 
			};

		    fcmp_tmp = [c::st 0];


		    case instruction
		      
			i::FSTPT operand        => (do_operand operand, []);  
			i::FSTPL operand	=> (do_operand operand, []);
			i::FSTPS operand	=> (do_operand operand, []);
			i::FSTL operand		=> (do_operand operand, []);
			i::FSTS operand		=> (do_operand operand, []);

			i::FLDT operand		=> ([], do_operand operand);
			i::FLDL operand		=> ([], do_operand operand);
			i::FLDS operand		=> ([], do_operand operand);
			i::FUCOM operand        => ([], do_operand operand);
			i::FUCOMP operand       => ([], do_operand operand);
			i::FCOMI operand        => ([], do_operand operand);
			i::FCOMIP operand       => ([], do_operand operand);
			i::FUCOMI operand       => ([], do_operand operand);
			i::FUCOMIP operand      => ([], do_operand operand);

			i::CALL   { defs, uses, ... } => (c::get_freg defs, c::get_freg uses);
			i::FBINARY { dst, src, ... }  => (do_operand dst, do_operand dst @ do_operand src);

			i::FMOVE { src, dst, ... } => (do_operand dst, do_operand src); 
			i::FILOAD { ea, dst, ... } => (do_operand dst, []); 
			i::FCMP { lsrc, rsrc, ... } => (fcmp_tmp, operand_acc (lsrc, do_operand rsrc));
			i::FBINOP { lsrc, rsrc, dst, ... } => fbinop (lsrc, rsrc, dst);
			i::FIBINOP { lsrc, rsrc, dst, ... } => fbinop (lsrc, rsrc, dst);
			i::FUNOP { src, dst, ... } => (do_operand dst, do_operand src);
			_  => ([], []);
		    esac;
	    };

	     case instruction

		 i::NOTE { instruction, ... } => def_use_f  instruction;

		 i::LIVE { regs, ... } => ([], c::get_freg regs);
		 i::DEAD { regs, ... } => (c::get_freg regs, []);

		 i::COPY { kind => cb::FLOAT_REGISTER, dst, src, tmp, ... }
		     => 
		     case tmp
			 NULL => (dst, src);
			 THE (i::FDIRECT f) => (f ! dst, src);
			 THE (i::FPR f) => (f ! dst, src);
			 _ => (dst, src);
		     esac;

		 i::COPY _  => ([], []);
		 i::BASE_INSTRUCTION i => x86def_use_f  i;
             esac;
      };

    fun def_use cb::REGISTER => def_use_r;
	def_use cb::FLOAT_REGISTER => def_use_f;
	def_use _ => error "defUse";
    end;

    /*========================================================================
     *  Annotations 
     *========================================================================*/
    fun get_notes (i::NOTE { instruction, note } )
            => 
	    {   my (instruction, notes) = get_notes instruction;
                (instruction, note ! notes);
            };

        get_notes instruction
            =>
            (instruction, []);
    end;

    fun annotate (instruction, note)
        =
        i::NOTE { instruction, note };

    /*========================================================================
     *  Replicate an instruction
     *========================================================================*/
    fun replicate (i::NOTE { instruction, note } ) => i::NOTE { instruction=>replicate instruction, note };
  /*
      | replicate (i::COPY { tmp=THE _, dst, src } ) =  
	  i::COPY { tmp=THE (i::DIRECT (c::new_reg())), dst=dst, src=src }
      | replicate (i::FCOPY { tmp=THE _, dst, src } ) = 
	  i::FCOPY { tmp=THE (i::FDIRECT (c::new_freg())), dst=dst, src=src }
  */
       replicate i => i;
    end;
};



## COPYRIGHT (c) 1997 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
