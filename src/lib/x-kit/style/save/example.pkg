/*
 * Here is an encoding of our canonical style example.
 * It uses boxes, frames, buttons, shapes and shells.
 * When you get a api for styles, I'll modify
 * these widgets to use them.
 *
 * This example begins to raise the question as to how
 * much control we can have via resources. For example,
 * it's hard to see how box glue can be handled dynamically.
 */

package VKBD:  api

    my keyboard:  widget::root -> Void

  end = pkg
    package b = Box
    kbd_data = [
            ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"],
            ["q", "w", "e", "r", "t", "y", "u", "i", "o", "p"],
            ["a", "s", "d", "f", "g", "h", "j", "k", "l", ";"],
            ["z", "x", "c", "v", "b", "n", "m", ", ", ".", "/"]
          ]
    pad_data = [
            ["7", "8", "9"],
            ["4", "5", "6"],
            ["1", "2", "3"],
            ["", "0", ""]
          ]
    fun mkB root syms = let
          glue = b::Glue { nat = 10, min = 10, max = THE 10 }
          flex_glue = b::Glue { nat = 10, min = 0, max = NULL }
          fun action symbol = fn () => CIO::print (implode["key ", symbol, "\n"])
          fun args symbol = {
		  rounded=TRUE,
		  background=NULL,
		  foreground=NULL,
		  label=symbol,
		  action= action symbol
		}
          fun mkBut ("", buts) = flex_glue . buts
            | mkBut (symbol, buts) = let
                b = button::mkTextCmd root (args symbol)
                but = shape::mkRigid (button::widgetOf b)
                in glue . (b::WBox but) . buts end
          fun mkRow (syms, rows) = let
                row = b::HzCenter (fold mkBut syms [glue])
                in glue . row . rows end
          w = b::widgetOf (b::mkLayout root (b::VtCenter (fold mkRow syms [glue])))
          black = xcore::black_of_screen (widget::screen_of root)
          in
            #  frame::widgetOf (frame::mkFrame { color=THE black, width=2, widget=w } ) 
            frame::widgetOf (frame::mkFrame { name=, style= } w)
          end

    fun keyboard root = let
          keypad = mkB root pad_data
          keyboard = mkB root kbd_data
          topw = b::mkLayout root (b::VtCenter [
                  b::Glue { nat = 10, min = 10, max = THE 10 },
                  b::HzCenter [
                    b::Glue { nat = 10, min = 10, max = THE 10 },
                    b::WBox keyboard,
                    b::Glue { nat = 10, min = 10, max = THE 10 },
                    b::WBox keypad,
                    b::Glue { nat = 10, min = 10, max = THE 10 }
                  ],
                  b::Glue { nat = 10, min = 10, max = THE 10 }
                ])
          shell = shell::mkShell (b::widgetOf topw, NULL, {
		  window_name = NULL, icon_name = NULL
		} )
          in
            shell::init shell;
            CIO::read_line CIO::std_in;
            RunTHREADKIT::shutdown()
          end
  end

fun do_it () = run_xkit::run VKBD::keyboard
