## unrebind.pkg 

# Compiled by:
#     src/lib/compiler/core.make6

# **************************************************************************
#                                                                          *
# "Alpha conversion": the closure converter introduces duplicate namings  *
# at function arguments (the free variables of known functions) and at     *
# SELECT's and OFFSET's from closures.  This function restores unique      *
# namings, and also eliminates OFFSET's of 0 (which are introduced as     *
# a side effect of trying to improve lazy display).  It assumes that a     *
# FIX has no free variables.                                               *
#                                                                          *
# **************************************************************************



###                         "Never try and teach a pig to sing:
###                          it's a waste of time,
###                          and it annoys the pig."
###
###                                      -- Robert A. Heinlein
###                                         Time Enough for Love



api Un_Rebind {

     unrebind:  fate_passing_style::Function
                -> fate_passing_style::Function;
};

package un_rebind: (weak)  Un_Rebind {		# Un_Rebind	is from   src/lib/compiler/upper/closures/unrebind.pkg

    stipulate 

	include fate_passing_style; 

    herein

	fun bug s
            =
            error_message::impossible ("UnRebind: " + s);


	fun unrebind (fk, v, args, cl, ce)
            =
	    {   fun rename rebind (VAR v)
			  =>
			  f rebind
                          where
			      fun f NIL
                                      =>
                                      VAR v;

				  f ((w: Int, v') ! t)
				      =>
				      v == w   ??   v'
				               ::   f t;
                              end;
			  end;

		    rename _ x
			=>
			x;
                end;


		fun f (kind, l, args, cl, b)
                    =
		    {   my (args', rebind')
                            = 
			    fold_right
                                (   fn (v, (args', rebind'))
                                       =
				       { v' = highcode_var::copy_highcode_variable v;
				       
                                           (   v' ! args',
                                               (v, VAR v') ! rebind'
                                           );
				       }
                                )

				(NIL, NIL)

                                args;
		    
                        (   kind,
                            l,
                            args',
                            cl,
                            g rebind' b
                        );
		    }

		also
		fun g (rebind: List( (Highcode_Variable, Value) ) )
                    =
                    h
                    where
		        rename = rename rebind;

			recursive val h
                            =
			    fn RECORD (kind, vl, w, e)
				   =>
				   {   w' = highcode_var::copy_highcode_variable w;

				       RECORD (
					   kind,

					   map (   fn (v, p)
						      =
						      (rename v, p)
					       )
					       vl,

					   w',
					   g   ((w, VAR w') ! rebind)   e
				       );
				   };

				  OFFSET (0, v, w, e) => g ((w, rename v) ! rebind) e;
				  OFFSET (i, v, w, e) => bug "unexpected none-zero OFFSET";
		 /*
				     let w' = highcode_var::copy_highcode_variable w
				      in OFFSET (i, rename v, w', g ((w, VAR w') ! rebind) e)
				     end
		 */
				  SELECT (i, v, w, t, e)
				      =>
				      {   w' = highcode_var::copy_highcode_variable w;

					  SELECT (
					      i,
					      rename v,
					      w',
					      t,
					      g ((w, VAR w') ! rebind) e
					  );
				      };

				  APPLY (f, vl)                 =>  APPLY (rename f, map rename vl);
				  MUTUALLY_RECURSIVE_FNS (l, e) =>  MUTUALLY_RECURSIVE_FNS (map f l, h e);

				  SWITCH (v, c, el)             =>  SWITCH (rename v, c, map h el);
				  BRANCH (i, vl, c, e1, e2)     =>  BRANCH (i, map rename vl, c, h e1, h e2);

				  SETTER (i, vl, e)             =>  SETTER (i, map rename vl, h e);
				  LOOKER (i, vl, w, t, e)       =>  LOOKER (i, map rename vl, w, t, h e);

				  ARITH (i, vl, w, t, e)        =>  ARITH (i, map rename vl, w, t, h e);
				  PURE (i, vl, w, t, e)         =>  PURE  (i, map rename vl, w, t, h e);

				  RAW_C_CALL (k, l, p, vl, wtl, e)
				      =>
				      RAW_C_CALL (k, l, p, map rename vl, wtl, h e);
                            end;
		    
		    end;		# fun g

	    
                (fk, v, args, cl, g NIL ce);

	    };  # unrebind 
    end;	# stipulate
};		# package un_rebind 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
