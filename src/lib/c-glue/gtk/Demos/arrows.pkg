local
   use gtk_enums

   /* Create an Arrow widget with the specified parameters
    * and pack it into a button */
   fun create_arrow_button (arrow_type, shadow_type) =
   let button = gtk_button_new::f()
       arrow  = gtk_arrow_new::f (arrow_type, shadow_type)
   in  gtk_container_add::f (button, arrow);
       gtk_widget_show::f button;
       gtk_widget_show::f arrow;
       button
   end

   die = gtk_main_quit::f
in

   fun main (prog, argv) =
   let gtk_init::f (prog . argv)
       window = gtk_window_new::f GTK_WINDOW_TOPLEVEL
       gtk_window_set_title::f (window, "Arrow Buttons")
       gtk_signal_connect::f (window, "destroy", die)
       gtk_container_set_border_width::f (window, 0w10)
       box    = gtk_hbox_new::f (FALSE, 0)
       gtk_container_set_border_width::f (box, 0w2)
       gtk_container_add::f (window, box)
       gtk_widget_show::f box
       button = create_arrow_button (GTK_ARROW_UP, GTK_SHADOW_IN)
       gtk_box_pack_start::f (box, button, FALSE, FALSE, 0w3)
       button = create_arrow_button (GTK_ARROW_DOWN, GTK_SHADOW_OUT)
       gtk_box_pack_start::f (box, button, FALSE, FALSE, 0w3)
       button = create_arrow_button (GTK_ARROW_LEFT, GTK_SHADOW_ETCHED_IN)
       gtk_box_pack_start::f (box, button, FALSE, FALSE, 0w3)
       button = create_arrow_button (GTK_ARROW_RIGHT, GTK_SHADOW_ETCHED_OUT)
       gtk_box_pack_start::f (box, button, FALSE, FALSE, 0w3)
   in  gtk_widget_show::f (window);
       gtk_main::f ();
       0
   end
end
