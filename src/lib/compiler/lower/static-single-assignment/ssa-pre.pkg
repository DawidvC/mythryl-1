/*
 * Partial redundancy elimination.
 * This is my own algorithm. 
 *
 * -- Allen Leung (leunga@cs.nyu.edu)
 */
generic package SSAPRE (SSA:  SSA) : SSA_OPTIMIZATION =
pkg
   package ssa  = SSA
   package sp   = SSA::SP
   package rtl  = SSA::RTL
   package dom  = SSA::Dom
   package t    = RTL::T
   package g    = graph 
   package a    = rw_vector
  
   type flowgraph = SSA::ssa

   fun error msg = lowcode_error_message::error("SSAPRE", msg)

   preRemoved = LowCodeControl::getCounter "ssa-partial-redundancy-removed"

   name = "Partial Redundancy Elimination"

   /*
    * Redundancy elimination is driven by frequency.
    * Given:
    *
    *    t <- phi (t1, t2, ..., tn)
    *    ...
    *    v <- f (t) 
    *
    * f (t) is partially redundant if it is cheaper to transform it
    * into: 
    *
    *    v1 <- f (v1)
    *    v2 <- f (v2)
    *    ...
    *    vn <- f (vn)
    * 
    *    v <- phi (v1, v2, ..., vn)
    *    t <- phi (t1, t2, ..., tn)
    */

   fun run (SSA as g::GRAPH ssa) = 
   let my Dom as g::GRAPH dom = SSA::dom SSA

       dominates = Dom::dominates Dom
       levels    = Dom::levelsMap Dom

       defSite = SSA::defSite SSA
       block   = SSA::block SSA
       uses    = SSA::uses SSA
       defs    = SSA::defs SSA
       rtl     = SSA::rtl SSA
       freqTable = SSA::freqTable SSA 

       showOp  = SSA::showOp SSA
       showVal = SSA::showVal SSA

       fun process i = 
           case rtl i of
             t::PHI { preds, ... } => hoistAllUses (i, preds)
           | _ => ()

           #  hoist uses of phi-node i 
       and hoistAllUses (i, preds) =
           let my [t]  = defs i
               uses_i = uses i

               #  find partially redundant phi nodes 
           in  if list::exists (fn v => v == t) uses_i then
                  print("PRE "$showOp i$"\n") else ()
           end
          
   in  SSA::forallNodes SSA process;
       SSA
   end

end
