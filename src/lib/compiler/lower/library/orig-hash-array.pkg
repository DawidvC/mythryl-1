#
# Dynamic (sparse) rw_vector that uses hashing
#
# -- Allen Leung



package sparse_rw_vector:  
     api include Rw_Vector
         my rw_vector' : Int * (Int -> X) -> Rw_Vector( X )
         my rw_vector'': Int * (Int -> X) -> Rw_Vector( X )
         my clear:   Rw_Vector( X ) -> Void 
         my remove:  Rw_Vector( X ) * Int -> Void
         my dom:     Rw_Vector( X ) -> List( Int )
         my copy_array:  Rw_Vector( X ) -> Rw_Vector( X )
     end
{
    package a = rw_vector

    enum default X = V of X | F of Int -> X | U of Int -> X

    enum Rw_Vector X
        = 
        ARRAY of  Ref( a::Rw_Vector( List (Int * X) ) ) * default( X ) * Ref( Int ) * Ref( Int )

    type Vector( X ) = vector::Vector( X )

    maxLen   = a::maxLen

    exception HashArrayUnimplemented

    fun unimplemented _ = raise exception HashArrayUnimplemented

    fun rw_vector (n, d) = ARRAY (REF (a::rw_vector (16,[])), V d, REF n, REF 0)
    fun rw_vector'(n, f) = ARRAY (REF (a::rw_vector (16,[])), F f, REF n, REF 0)
    fun rw_vector''(n, f) = ARRAY (REF (a::rw_vector (16,[])), U f, REF n, REF 0)
    fun clear (ARRAY (r, d, n, c)) = (r := a::rw_vector (16,[]); n := 0; c := 0)

    fun roundsize n =
    let fun loop i = if i >= n then i else loop (i+i)
    in  loop 1 end 

    fun copy_array (ARRAY (REF a, d, REF n, REF c)) = 
         let a' = a::rw_vector (n,[])
             a::copy { src=a, dst=a', si=0, di=0, len=NULL }
         in  ARRAY (REF a', d, REF n, REF c)
         end

    itow = unt::from_int
    wtoi = unt::toIntX
    fun index (a, i) = wtoi (unt::bitwise_and (itow i, itow (rw_vector::length a - 1)))

    fun tabulate (n, f) =
    let N = n*n+1
        N = if N < 16 then 16 else roundsize N
        a = a::rw_vector (N,[])
        fun ins i = 
            let pos = index (a, i)
                x   = f i
            in  a::update (a, pos, (i, x) . a::sub (a, pos)); x
            end
        fun insert 0 = ins 0
          | insert i = (ins i; insert (i - 1))
    in  if n < 0 then
          ARRAY (REF a, F (fn _ => raise exception SUBSCRIPT), REF 0, REF 0)
        else
          ARRAY (REF a, V (insert (n - 1)), REF n, REF n)
    end

    fun from_list l =
    let n = length l
        N = n*n+1
        N = if N < 16 then 16 else roundsize N
        a = a::rw_vector (N,[])
        fun ins (i, x) = 
            let pos = index (a, i)
            in  a::update (a, pos, (i, x) . a::sub (a, pos)); x
            end
        fun insert (i,[])   = F (fn _ => raise exception SUBSCRIPT)
          | insert (i,[x])  = V (ins (i, x))
          | insert (i, x . l) = (ins (i, x); insert (i+1, l))
    in  ARRAY (REF a, insert (0, l), REF n, REF n)
    end

    fun length (ARRAY(_, _, REF n, _)) = n

    fun sub (a' as ARRAY (REF a, d, _, _), i) = 
    let pos = index (a, i)
        fun search [] = (case d of
                           V d => d
                         | F f => f i
                         | U f => let x = f i
                                  in  update (a', i, x); x end
                        )
          | search ((j, x) . l) = if i == j then x else search l
    in  search (a::sub (a, pos)) end

    and update (a' as ARRAY (REF a, _, n, s as REF size), i, x) =
    let N   = a::length a
        pos = index (a, i)
        fun change ([], l) = 
              if size+size >= N then grow (a', i, x)
              else (s := size + 1; a::update (a, pos, (i, x) . l))
          | change((y as (j, _)) . l', l) = 
              if j == i then a::update (a, pos, (i, x) . l'@l)
              else change (l', y . l)
    in
        change (a::sub (a, pos),[]);
        if i >= *n then n := i+1 else ()
    end

    and grow (ARRAY (a' as REF a, _, _, _), i, x) = 
    let N   = a::length a
        N'  = N+N
        a'' = a::rw_vector (N',[])
        fun insert (i, x) = 
            let pos = index (a'', i)
            in  a::update (a'', pos, (i, x) . a::sub (a'', pos)) end
    in  
        a::apply (list::apply insert) a;
        insert (i, x);
        a' := a''
    end

    fun remove (a' as ARRAY (REF a, _, n, s as REF size), i) =
    let N   = a::length a
        pos = index (a, i)
        fun change ([], _) = ()
          | change((y as (j, _)) . l', l) = 
              if j == i then (s := size - 1; a::update (a, pos, l'@l))
              else change (l', y . l)
    in  change (a::sub (a, pos),[])
    end

    fun extract (a as ARRAY(_, _, REF n, _), i, j) = 
    let j = case j of THE j => i+j | NULL => n
        fun f (k, l) = if k < i then l else f (k - 1, sub (a, k) . l)
    in 
        vector::from_list (f(j - 1,[]))
    end

    fun copy { src = src as ARRAY(_, _, REF n, _), si, len, dst, di } = 
    let j = case len of THE len => si+len | NULL => n
        fun f (k, k') = if k >= j then ()
                      else (update (dst, k', sub (src, k)); f (k+1, k'+1))
    in  f (si, di)
    end

    copyVec = unimplemented

    fun apply f (ARRAY (REF a, _, _, _)) = a::apply (list::apply (fn (_, x) => f x)) a
    fun fold_left f e (ARRAY (REF a, _, _, _)) =
       a::fold_left (fn (l, e) => list::fold_left (fn ((_, x), e) => f (x, e)) e l) e a
    fun fold_right f e (ARRAY (REF a, _, _, _)) =
       a::fold_right (fn (l, e) => list::fold_right (fn ((_, x), e) => f (x, e)) e l) e a

    fun modify f (ARRAY (REF a, _, _, _)) =
       a::modify (list::map (fn (i, x) => (i, f x))) a 

    fun keyed_apply f (ARRAY (REF a, _, REF n, _), i, j) =
    let j = case j of THE j => i+j | NULL => n
    in  a::apply (list::apply 
           (fn (k, x) => if k >= i and k < j then f (k, x) else ())) a
    end
    fun keyed_fold_left f e (ARRAY (REF a, _, REF n, _), i, j) = 
    let j = case j of THE j => i+j | NULL => n
    in  a::fold_left (fn (l, e) => list::fold_left 
           (fn ((k, x), e) => if k >= i and k < j then f (k, x, e) else e) e l) 
           e a
    end
    fun keyed_fold_right f e (ARRAY (REF a, _, REF n, _), i, j) = 
    let j = case j of THE j => i+j | NULL => n
    in  a::fold_right (fn (l, e) => list::fold_right 
           (fn ((k, x), e) => if k >= i and k < j then f (k, x, e) else e) e l) 
           e a
    end
    fun dom (ARRAY (REF a, _, _, _)) = 
       a::fold_left (fn (e, l) => list::fold_right (fn ((i, _), l) => i . l) l e) [] a

    fun modifyi f (ARRAY (REF a, _, REF n, _), i, j) =
    let j = case j of THE j => i+j | NULL => n
    in  a::modify (list::map (fn (k, x) => if k >= i and k < j then (k, f (k, x))
                                       else (k, x))) a
    end
};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
