## anormal.pkg 

# Compiled by:
#     src/lib/compiler/core.make6


# "A-Normal" intermediate code form.
# See extensive comments in src/lib/compiler/upper/anormal/anormal.api


package anormal

: (weak) Anormal				# Anormal	is from   src/lib/compiler/upper/anormal/anormal.api

{
    stipulate

        package a  =  var_home;			# Should go away soon 
	package ld =  highcode_type;		# highcode_type			is from   src/lib/compiler/upper/highcode/highcode-type.pkg
#	package lb =  highcode;			# highcode			is from   src/lib/compiler/upper/highcode/highcode.pkg
	package lv =  highcode_var;		# highcode_var			is from   src/lib/compiler/upper/highcode/highcode-var.pkg
	package po =  highcode_primitive_op;	# highcode_primitive_op		is from   src/lib/compiler/upper/highcode/highcode-primitive-op.pkg
	package s  =  symbol;			# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg

    herein 

	Fn_Flag 	  =  ld::Fn_Flag;
	Record_Flag       =  ld::Record_Flag;

	Highcode_Kind     =  ld::Highcode_Kind;
	Highcode_Type_Constructor     =  ld::Highcode_Type_Constructor;
	Highcode_Type       =  ld::Highcode_Type;

	Highcode_Variable =  lv::Highcode_Variable;


	# What kind of inlining behavior
        # is desired for the function?
	#
	Inlining_Hint
	    = INLINE_IF_SIZE_SAFE		#  Only if trivially size-safe 
	    | INLINE_WHENEVER_POSSIBLE		#  Inline whenever possible 
	    | INLINE_ONCE_WITHIN_ITSELF		#  Only inline once within itself 

	  # Call-site dependent inlining:
	  #     #1 < sum (map2 (fn (a, w) => (known a) * w) (actuals, #2)

	    | INLINE_MAYBE  (Int, List( Int ));

	# What kind of recursive function
        # (aka loop) is this?
        #
	Loop_Kind
	    = OTHER_LOOP				#  something else 
	    | PREHEADER_WRAPPED_LOOP			#  loop wrapped in a preheader 
	    | TAIL_RECURSIVE_LOOP;			#  properly tail-recursive 

	# Calling convention:
        #
	Calling_Convention
	    = CALLING_CONVENTION_GENERIC		# It is a generic package.
	    | CALLING_CONVENTION_FUNCTION  Fn_Flag;	# It is a function.

	# Classifying various kinds of functions:
        #
	Function_Kind
	    =
	    { inlining_hint:        Inlining_Hint,				#  When should it be inlined?    
	      all_call_sites_known: Bool,					#  Are all the call sites known? 
	      calling_convention:   Calling_Convention,				#  Calling convention.           
	      is_recursive:         Null_Or( (List( Highcode_Type ), Loop_Kind))	#  Is it recursive?              
	    };

	# Additional attributes for type abstractions
        #
	Typefunction_Kind
	    =
            { inlining_hint: Inlining_Hint };

	# Classifying various kinds of records:
        #
	Record_Kind
	    = RK_VECTOR  Highcode_Type_Constructor		#  vector: all elements have same type 
	    | RK_STRUCT					#  module: elements may be polymorphic 
	    | RK_TUPLE  Record_Flag;			#  tuple: all elements are monomorphic 



	# Dcon records the name of the constructor (for debugging),
	# the corresponding datatypeConstructorRepresentation,
	# and the highcode type Highcode_Type (which must be an arrow type). 
	#
	Dcon
	    =
            (s::Symbol, a::Constructor_Form, Highcode_Type);



	# Con: Used to specify all possible switching statements.
	# Efficient switch generation can be applied to DATACON and INTcon.
	# Otherwise, the switch is  just a short-hand of the binary branch trees.
	# Some of these instances  such as REALcon and VLENcon will go away soon.
	#
	Con 
	    = DATACON  (Dcon, List( Highcode_Type_Constructor ), Highcode_Variable)
	    | INTCON    Int                          #  should use InfInf::int 
	    | INT32CON  int32::Int 
	    | WORDCON   Unt 
	    | WORD32CON unt32::Unt 
	    | REALCON   String 
	    | STRINGCON String 
	    | VLENCON   Int; 

	# Simple values, including
        # variables and static constants:
	#
	Value
	    = VAR  Highcode_Variable
	    | INT  Int                            #  should use InfInf::int 
	    | INT32  int32::Int
	    | WORD  Unt
	    | WORD32  unt32::Unt
	    | REAL  String
	    | STRING  String;

	# Lambda expressions:
        #
	Anormal_Expression
	    = RET  List( Value )
	    | LET  (List( Highcode_Variable ), Anormal_Expression, Anormal_Expression)

	    | MUTUALLY_RECURSIVE_FNS (List( Function_Declaration ), Anormal_Expression) 
	    | APPLY  (Value, List( Value ))

	    | TYPE_FN   (Tfundec, Anormal_Expression)
	    | TYPE_APPLY  (Value, List( Highcode_Type_Constructor ))

	    | SWITCH      (Value, a::Constructor_Signature, List( (Con, Anormal_Expression) ), Null_Or( Anormal_Expression ))
	    | CONSTRUCTOR (Dcon, List( Highcode_Type_Constructor ), Value, Highcode_Variable, Anormal_Expression)  

	    | RECORD  (Record_Kind, List( Value ), Highcode_Variable, Anormal_Expression)
	    | SELECT  (Value, Int, Highcode_Variable, Anormal_Expression)          #  Add record_kind ? 

	    | RAISE   (Value, List( Highcode_Type ))
	    | EXCEPT  (Anormal_Expression, Value)

	    | BRANCH  (Primitive_Operation, List( Value ), Anormal_Expression, Anormal_Expression)
	    | PRIMOP  (Primitive_Operation, List( Value ), Highcode_Variable , Anormal_Expression)

	withtype
        Function_Declaration
            =
            (Function_Kind,
				          Highcode_Variable,
				          List ( (Highcode_Variable, Highcode_Type) ),
				          Anormal_Expression)

	also
        Tfundec
            =
            ( Typefunction_Kind,
	      Highcode_Variable,
	      List ( (Highcode_Variable, Highcode_Kind) ),
	      Anormal_Expression
            )

	also
        Dictionary
            =
            { default: Highcode_Variable,
	      table:  List( (List( Highcode_Type_Constructor ), Highcode_Variable) )
	    }

	also
        Primitive_Operation
	    =
            ( Null_Or ( Dictionary ),
	      po::Primitive_Operation,
	      Highcode_Type,
	      List( Highcode_Type_Constructor )
            );
		 #  Invariant: primitive_operation's Highcode_Type is always fully closed 

	Program
            =
            Function_Declaration;

    end;	#  with
};		#  package anormal


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1997 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
