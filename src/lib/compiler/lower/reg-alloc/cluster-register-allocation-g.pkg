## cluster-register-allocation-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


# This module provides services for the
# new register allocator when using the
# cluster representation.  
# The algorithm is adapted from
# Algorithm 19.17 from Appel, Modern Compiler Implementation in ML,
# Calculation of live ranges in SSA form.  We don't directly use SSA 
# here but the principles are the same.
#
# -- Allen Leung


###           "Always listen to the experts.
###            They'll tell you what can't be
###            done and why.  Then do it."
###
###               -- Robert A Heinlein


# We get invoked from:
#     src/lib/compiler/lower/reg-alloc/risc-register-allocation-g.pkg
#     src/lib/compiler/lower/x86/codetree/x86-register-allocation-g.pkg
#     src/lib/compiler/lower/x86/reg-alloc/x86-register-allocation-g.pkg	# appears to duplicat the above...?

generic package cluster_register_allocation_g (

    package asm:        Instruction_Emitter;			# Instruction_Emitter		is from   src/lib/compiler/lower/emit/instruction-emitter.api

    package flowgraph
	:
	Control_Flow_Graph					# Control_Flow_Graph		is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api
	where instruction_set == asm::instruction_set
	also  pseudo_op == asm::instruction_stream::pseudo_op;

    package instruction_properties
	:
	Instruction_Properties					# Instruction_Properties	is from   src/lib/compiler/lower/instruction/instruction-properties.api
	where instruction_set == flowgraph::instruction_set;

    package spill
	:
	Register_Allocation_Spilling				# Register_Allocation_Spilling	is from   src/lib/compiler/lower/reg-alloc/register-allocation-spilling.api
	where instruction_set == flowgraph::instruction_set;
)

: (weak)  Register_Allocation_Flowgraph				# Register_Allocation_Flowgraph	is from   src/lib/compiler/lower/reg-alloc/ra-flowgraph.api

{
    package control_flow_graph = flowgraph;
    package instruction_set    = control_flow_graph::instruction_set;
    package cells              = instruction_set::cells;

    package props  = instruction_properties;
    package core= register_allocation_core;			# register_allocation_core	is from   src/lib/compiler/lower/reg-alloc/register-allocation-core.pkg
    package spill  = spill;

    package i  = instruction_set;
    package g  = register_allocation_graph;			# register_allocation_graph	is from   src/lib/compiler/lower/reg-alloc/ra-graph.pkg
    package a  = rw_vector; 
    package ua = unsafe::rw_vector; #  okay, I'm cheating a bit here 

    include g;

    package c      = cells;
    package cb= cells_basis;					# cells_basis			is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    fun is_on (flag, mask)
	=
	unt::bitwise_and (flag, mask) != 0u0;

    print_interference_graph_size
        =
        low_code_control::make_bool (
            "print_interference_graph_size",
            "whether to show RA size"
        );

    Flowgraph
        =
        control_flow_graph::Control_Flow_Graph;		#  flowgraph is a cluster 

    fun error msg
        =
        lowcode_error_message::error("cluster_register_allocation", msg);

    mode = 0u0;

    fun uniq_cells s
        =
        cb::sorted_cells::return (cb::sorted_cells::uniq s);

    fun chase_cell (c as cb::CELL { ref_color=>REF (cb::MACHINE r), ... } ) =>  (c, r);
	chase_cell (     cb::CELL { ref_color=>REF (cb::ALIASED c), ... } ) =>  chase_cell c;
	chase_cell (c as cb::CELL { ref_color=>REF  cb::SPILLED,    ... } ) =>  (c,-1);
	chase_cell (c as cb::CELL { ref_color=>REF  cb::PSEUDO, id, ... } ) =>  (c, id);
    end;

    fun color_of (cb::CELL { ref_color=>REF (cb::MACHINE r), ... } ) =>  r;
	color_of (cb::CELL { ref_color=>REF (cb::ALIASED c), ... } ) =>  color_of c;
	color_of (cb::CELL { ref_color=>REF  cb::SPILLED,    ... } ) =>  -1;
	color_of (cb::CELL { ref_color=>REF  cb::PSEUDO, id, ... } ) =>  id;
    end;

    fun chase (NODE { color=>REF (ALIASED n), ... } )
            =>
            chase n;

        chase n
            =>
            n;
    end;

    exception NOT_THERE;

    my asm::instruction_stream::STREAM { emit, ... }
        =
        asm::make_stream [];

    fun dump_flowgraph (txt, cfg as graph::GRAPH graph, outstrm)
	=
	{   fun say txt
                =
                file::write (outstrm, txt);

	    fun say_pseudo p
                =
                {   say (control_flow_graph::pseudo_op::to_string p);
                    say "\n";
                };

	    my control_flow_graph::INFO { data, ... }
                =
                graph.graph_info;

	    control_flow_graph::dump (outstrm, txt, cfg);
	    apply say_pseudo (reverse *data);
	};

    notes = control_flow_graph::notes; 

    dummy_block =   control_flow_graph::new_block(-1, REF 0.0);

    uniq = list_mergesort::unique_sort 
	       (fn ( { block=>b1, instruction=>i1 },{ block=>b2, instruction=>i2 } )
		   =
		   case (int::compare (b1, b2))
		       EQUAL =>  int::compare (i1, i2);
		       ord   =>  ord;
		   esac
	       );

    fun services (cfg as graph::GRAPH graph)
	=
	{ build, 
	  spill, 
	  program_point =>  fn { block, instruction } =  prog_pt (block, instruction),
	  block_num, 
	  instr_num
	}
        where
	    my control_flow_graph::INFO { notes => cl_notess, ... }
		=
		graph.graph_info;

	    blocks = graph.nodes ();

	    fun max_block_id ((id, control_flow_graph::BLOCK _) ! rest, curr)
		    => 
		    if (id > curr)   max_block_id (rest, id);
                    else             max_block_id (rest, curr);
                    fi;

		max_block_id([], curr)
                    =>
                    curr;
	    end;

	    nnn =   max_block_id (blocks, graph.capacity ());


	    # Construct program point:
	    #
	    fun prog_pt (blknum, instr_id)
		=
		{ block=>blknum, instruction=>instr_id };

	    fun block_num { block, instruction } =  block;
	    fun instr_num { block, instruction } =  instruction;

	    block_table		#  Blocks indexed by block id 
                =
                a::make_rw_vector (nnn, (graph.new_id (), dummy_block));

	    # Fill block table:
	    #
	    list::apply
		(fn b as (nid, _) =  rw_vector::set (block_table, nid, b))
		blocks;

	    exit
                =
                case (graph.exits ())
                  
                     [e] =>  e;
                      _  =>  error "EXIT";
                esac;


	    # Building the interference graph:
	    #	
	    fun build_interference_graph
                ( cellkind,  
		  graph' as GRAPH { nodes, dedicated, mode, span, copy_tmps, ... }
                )
		=
		{   # Definitions indexed by
                    # block id+instruction id: 

		    defs_table =  a::make_rw_vector (nnn, a::make_rw_vector (0, [] : List( Node )));
		    marked     =  a::make_rw_vector (nnn, -1);
		    add_edge   =  core::add_edge graph';

		    # Copies indexed by source.
		    # This table maps variable v
                    # to the program points where
		    # v is a source of a copy.
		    #
		    copy_table = int_hash_table::make_table (nnn, NOT_THERE) 
			       : int_hash_table::Hash_Table(  List  { dst: cb::Cell, pt: g::Program_Point } );

		    lookup_copy =  int_hash_table::find copy_table; 

		    lookup_copy
                        =
                        fn r = case (lookup_copy r)
				   THE c => c; 
				   NULL  => [];
			       esac;

		    add_copy      = int_hash_table::set copy_table;

		    stamp = REF 0;

		    # Allocate the arrays 
		    #
		    fun alloc [] => ();

		        alloc((id, control_flow_graph::BLOCK { instructions, ... } ) ! blocks)
                            => 
			    {   ua::set (defs_table, id, a::make_rw_vector (length *instructions+1, []));
			        alloc blocks;
                            };
                    end;

		    alloc blocks;


		    # Remove pseudo use generated
                    # by copy temporaries:
		    #
		    fun rm_pseudo_uses []
                            =>
                            ();

		        rm_pseudo_uses (NODE { uses, ... } ! ns)
                            =>
                            {   uses := [];
                                rm_pseudo_uses ns;
                            };
                    end;


		    # Initialize the definitions before
                    # computing the liveness for v:
		    #
		    fun initialize (v, v', use_sites)
			=
			{
			    # First we remove all definitions for all copies 
			    # with v as source.
			    # When we have a copy and while we are processing v
			    #
			    #      x <- v
			    #
			    #  x does not really interfere with v at this point,
			    #  so we remove the definition of x temporarily.
			    #
			    fun mark_copies ([], trail)
                                    =>
                                    trail;

			        mark_copies( { pt, dst } ! copies, trail)
				    => 
				    {   b     = block_num pt;
					i     = instr_num pt;
					defs  = ua::get (defs_table, b);
					nodes = ua::get (defs, i);

					fun reverse_and_prepend ([], nodes)
                                                =>
                                                nodes;

					    reverse_and_prepend (n ! ns, nodes)
                                                =>
                                                reverse_and_prepend (ns, n ! nodes);
                                        end;

					dst_color = color_of dst;

					fun remove_dst ([], nodes')
                                                =>
                                                nodes';

					    remove_dst((d as NODE { number=>r, ... } ) ! nodes, nodes')
                                                =>
						if   (r == dst_color)
                                                    
                                                     reverse_and_prepend (nodes', nodes);
						else
                                                     remove_dst (nodes, d ! nodes');
                                                fi;
                                        end;

					nodes' = remove_dst (nodes, []);
				        ua::set (defs, i, nodes');
					mark_copies (copies, (defs, i, nodes) ! trail);
				    };
                            end;


			    # Then we mark all use sites of v
                            # with a fake definition so that
			    # the scanning will terminate
                            # correctly at these points.
			    #
			    fun mark_use_sites ([], trail)
                                    =>
                                    trail;

			        mark_use_sites (pt ! pts, trail)
				    => 
				    {   b     = block_num pt;
					i     = instr_num pt;
					defs  = ua::get (defs_table, b);
					nodes = ua::get (defs, i);

				        ua::set (defs, i, v' ! nodes);
					mark_use_sites (pts, (defs, i, nodes) ! trail);
				    };
                            end;

			    copies = lookup_copy v;
			    trail  = mark_copies (copies, []);
			    trail  = mark_use_sites (use_sites, trail);

			    trail;
                        };

		    fun cleanup []
                            =>
                            ();

		        cleanup ((defs, i, nodes) ! trail)
                            => 
			    {   ua::set (defs, i, nodes);
                                cleanup trail;
                            };
                    end; 

		    # Perform incremental liveness
                    # analysis on register v 
		    # and compute the span:
		    #
		    fun liveness (v, v' as NODE { uses, ... }, cell_v)
			=
			{   st = *stamp;
			    stamp := st + 1;

			    fun foreach_use_site ([], span)
                                    =>
                                    span;

			        foreach_use_site (u ! uses, span)
				    =>
				    {   b = block_num u;
					i = instr_num u;

					my block as (_, control_flow_graph::BLOCK { freq, ... } )
                                            =
                                            ua::get (block_table, b);

					span
                                            =
					    if   (i == 0)
					        
						 live_out_atablock (block, span); #  live out 
					    else 
						 f = *freq;
						 defs = ua::get (defs_table, b);
						 live_out_at_statement (block, a::length defs, defs, i+1, f, span+f);
					    fi;

				        foreach_use_site (uses, span);
				    };
                            end 

			    also
			    fun visit_pred ((nid, _), span)
				=
				foreach_pred (graph.prior nid, span)
                                where
				    fun foreach_pred ([], span)
                                            =>
                                            span;

					foreach_pred (nid ! prior, span)
					    =>
					    {   span = live_out_atablock((nid, graph.node_info nid), span);
						foreach_pred (prior, span); 
					    };
				    end;
				end

			    also
                            fun live_out_at_statement (block, n_defs, defs, pos, freq, span)
                                = 
				# v is live out
				#
				if (pos >= n_defs)

				     visit_pred (block, span);
				else

				    foreach_def (ua::get (defs, pos), FALSE)
                                    where 
					fun foreach_def ([], TRUE)
						=>
						span;

					    foreach_def([], FALSE)
						=> 
						live_out_at_statement (block, n_defs, defs, 
							     pos+1, freq, span+freq);

					    foreach_def((d as NODE { number=>r, ... } ) ! ds, kill)
						=> 
						if (r == v)
						     foreach_def (ds, TRUE);
						else
						     add_edge (d, v');
						     foreach_def (ds, kill);
						fi;
					end; 
				    end; 
                                fi

			    also
                            fun live_out_atablock (block as (nid, control_flow_graph::BLOCK { freq, ... } ), span)
                                = 
				# v is live out at the current block 
				#
				if   (ua::get (marked, nid) == st)
                                    
                                     span;
				else 
				     defs = ua::get (defs_table, nid);

				     ua::set (marked, nid, st);
				     live_out_at_statement (block, a::length defs, defs, 1, *freq, span);
				fi;

			    use_sites = uniq *uses; 
			    trail    = initialize (v, v', use_sites);
			    span     = foreach_use_site (use_sites, 0.0);
			    cleanup trail;

			    span;
			}; 			# fun build_interference_graph

		    new_nodes    =  core::new_nodes graph';
		    getnode      =  int_hash_table::get  nodes;

		    instruction_def_use =  props::def_use cellkind;

		    get_cell     =  c::get_cells_by_kind cellkind;

		    fun is_dedicated r
                        =
                        dedicated r;


		    #  Remove all dedicated or spilled registers from the list 
		    #
		    fun rmv_dedicated regs
			=
			loop (regs, [])
			where
                            fun loop ([], rs')
                                    =>
                                    rs';

			        loop (r ! rs, rs')
				    => 
				    {   fun rmv (r as cb::CELL { ref_color=>REF (cb::PSEUDO), id, ... } )
                                                => 
					        if (is_dedicated (id) ) loop (rs, rs'); else loop (rs, r ! rs');fi;

					    rmv (cb::CELL { ref_color=>REF (cb::ALIASED r), ... } )
                                                =>
                                                rmv r;

					    rmv (r as cb::CELL { ref_color=>REF (cb::MACHINE col), ... } )
                                                => 
					        if (is_dedicated col)    loop (rs,     rs');
					        else                     loop (rs, r ! rs');
                                                fi;

					    rmv (cb::CELL { ref_color=>REF (cb::SPILLED), ... } )
                                                =>
                                                loop (rs, rs');
                                        end;

				        rmv r; 
				    };
                            end;
                        end;


		    # Create parallel move:
		    #
		    fun make_moves (instruction, pt, cost, mv, tmps)
                      =
		      case instruction
		        
			   i::NOTE { instruction, ... }
			       => 
			       # Strip away the annotation.
			       # Note: we are assuming annotations cannot change 
			       # the semantics of the copies.
			       #	
			       make_moves (instruction, pt, cost, mv, tmps);

			   i::COPY { dst, src, kind, ... }
			       =>
			       # If it is a parallel copy, deal
                               # with the copy temporary properly.
			       #	
			       # If it is a register, create a
                               # pseudo use site just below the
			       # end of  the copy instruction.
                               # This is to make sure that the
			       # temporary is colored properly.
			       #	
                               # If the copy temporary doesn't
                               # exist or if it has been spilled,
                               # do nothing.
			       #	
			       if (kind == cellkind)
			           
				    tmps = 
				       case (props::move_tmp_r instruction)
				         
					    THE r
						=> 
						# Add a pseudo use for tmpR 
						case (chase (getnode (color_of r)))
						  
						     tmp as NODE { uses, defs=>REF [d], ... }
							 =>
							 {   fun prev { block, instruction } = { block, instruction => instruction - 1 };
							     uses := [prev d]; 
							     tmp ! tmps;
							 };

						     _ => error "make_moves";
						esac;


					    NULL => tmps;
				       esac;

				   fun moves ([], [], mv)
					   =>
					   mv;

				       moves (d ! ds, s ! ss, mv)
					   =>
					   {   my (d, cd) = chase_cell d;
					       my (s, cs) = chase_cell s;

					       if (  is_dedicated cd
					          or is_dedicated cs
                                                  )

						    moves (ds, ss, mv);
					       else
						    if   (cd == cs)
						        
							 moves (ds, ss, mv);
						    else 

							 add_copy (cs, { dst=>d, pt } ! lookup_copy cs);

							 dst = chase (getnode cd); 
							 src = chase (getnode cs); 

							 moves (ds, ss, MOVE_INT { dst, src,
									     status=>REF WORKLIST,
									     hicount=>REF 0,
									     #  kind=REG_TO_REG, 
									     cost
                                                                           } ! mv
							 ); 
					       fi;  fi;
					   };
				       moves _ => error "moves";
				   end;

				   (moves (dst, src, mv), tmps);
			       else
				   (mv, tmps);
			       fi;

			   _ => (mv, tmps);
		      esac;


		    # Add the nodes first:
		    #
		    fun make_nodes ([], mv, tmps)
                            =>
                            (mv, tmps);

		        make_nodes((nid, blk) ! blocks, mv, tmps)
                            =>
			    {   my control_flow_graph::BLOCK { instructions, freq=>REF w, notes, ... }
                                    =
                                    blk;

				next     =  graph.next nid;
				live_out =  control_flow_graph::live_out blk;
				dtab     =  a::get (defs_table, nid);

				fun scan ([], pt, i, mv, tmps)
                                        =>
                                        (pt, i, mv, tmps);

				    scan (instruction ! rest, pt, i, mv, tmps)
					=>
					{   my (d, u)
                                                =
                                                instruction_def_use instruction;

					    defs = rmv_dedicated d;
					    uses = rmv_dedicated u;
					    defs = new_nodes { cost=>w, pt, 
								defs, uses };

					    ua::set (dtab, i, defs);

					    my (mv, tmps)
                                                =
                                                make_moves (instruction, pt, w, mv, tmps);

					    fun next { block, instruction }
                                                =
                                                { block, instruction=>instruction+1 };

					    scan (rest, next pt, i+1, mv, tmps);  
					};
                                end;

				my (pt, i, mv, tmps)
                                    = 
				    scan (*instructions, prog_pt (nid, 1), 1, mv, tmps);

				# If the block is escaping
                                # then all liveout registers
                                # are considered used here.
				#
				case next 
				  
				    [id] => 
					if (id == exit)

					     live_set = rmv_dedicated(
							     uniq_cells (get_cell (live_out)));

					     new_nodes { cost=>w, pt=>prog_pt (nid, 0),
						     defs => [], uses => live_set };
					     ();
					fi;

				    _ => ();
                                esac;

				make_nodes (blocks, mv, tmps);
			    };
                   end;

		   # Add the edges 
		   #
		   my (moves, tmps)
                       =
                       make_nodes (blocks, [], []);

		   int_hash_table::keyed_apply
		       (   fn (v, v' as NODE { cell, color, ... } )
			       =
			       {   fun compute_liveness ()
				       = 
				       set_span (v, liveness (v, v', cell));

				   case *color

					PSEUDO    =>  compute_liveness ();
					COLORED _ =>  compute_liveness ();
					MEMREG _  =>  compute_liveness ();
					_         => ();
				   esac;
			       }
			       where
				   my set_span:  ((Int, Float)) -> Void
				       =
				       if   (is_on (mode, core::compute_span))

					    span_map = int_hash_table::make_table
							     (int_hash_table::vals_count nodes, NOT_THERE);
					    set_span = int_hash_table::set span_map;
					    span := THE span_map;
					    set_span;
				       else
					    fn _ = ();
				       fi;
			       end
		       )
		       nodes;

		    if (is_on (core::save_copy_temps, mode))
		        
			 copy_tmps := tmps;
		    fi;

		    rm_pseudo_uses tmps;
		    moves;
		};			# fun build_interference_graph


	    # Build the interference graph initially:
	    #
	    fun build (ggg, cellkind)
		=
		moves
                where
		    moves = build_interference_graph (cellkind, ggg);

		    i2s = int::to_string;

		    if *print_interference_graph_size

			 my GRAPH { nodes, bit_matrix, ... } = ggg;

			 instructions
                             = 
			     fold_right
                                 (fn ((_, control_flow_graph::BLOCK { instructions, ... } ), n)
                                     =
                                     length *instructions + n
                                 )
                                 0
                                 blocks;

			 file::write
			    ( *low_code_control::debug_stream,

			      "RA #blocks=" + i2s nnn
			      +	" #instructions="  + i2s instructions
			      +	" #nodes="  + i2s (int_hash_table::vals_count nodes)
			      +	" #edges="  + i2s (core::bm::size(*bit_matrix))
			      +	" #moves="  + i2s (length moves) + "\n"
                            );

		    fi;
		end;


	    # Rebuild the interference graph;
	    # We'll just do it from scratch for now.
	    #
	    fun rebuild (cellkind, ggg)
		= 
		{   core::clear_nodes ggg;
		    build_interference_graph (cellkind, ggg);
		};


	    # Spill a set of nodes and rewrite the flowgraph 
	    #
	    fun spill { copy_instr, spill, spill_src, spill_copy_tmp, 
		        reload, reload_dst, rename_src, graph,
		        cellkind, nodes=>nodes_to_spill
                      }
		= 
		{   # Remove the interference graph now:
		    #
		    core::clear_graph graph;

		    # Map program point to registers to be spilled:
		    #
		    spill_set = g::ppt_hash_table::make_table (32, NOT_THERE);

		    # Map program point to registers to be reloaded:
		    #
		    reload_set = g::ppt_hash_table::make_table (32, NOT_THERE);

		    # Maps program point to registers to be killed:
		    # 
		    kill_set = g::ppt_hash_table::make_table (32, NOT_THERE); 

		    spill_rewrite
                        =
                        spill::spill_rewrite {
			  graph,
			  spill,
			  spill_src,
			  spill_copy_tmp,
			  reload,
			  reload_dst,
			  rename_src,
			  copy_instr,
			  cellkind,
			  spill_set,
			  reload_set,
			  kill_set
			};

		    affected_blocks		# Set of basic blocks that are affected.
                        =
                        int_hash_table::make_table (32, NOT_THERE);

		    add_affected_blocks
                        =
                        int_hash_table::set affected_blocks;

		    fun ins set
			=
			enter
			where
			    add =  g::ppt_hash_table::set  set;

			    get =  g::ppt_hash_table::find set;
			    get =  fn r =  case (get r)
                                               THE s => s;
                                               NULL  => [];
                                           esac;

			    fun enter (r, [])
                                    =>
                                    ();

			        enter (r, pt ! pts)
				    => 
				    {   add (pt, r ! get pt);
				        add_affected_blocks (block_num pt, TRUE);
				        enter (r, pts);
				    };
                            end;
			end;

		    ins_spill_set  = ins spill_set;
		    ins_reload_set = ins reload_set;

		    ins_kill_set
			= 
			enter
			where
			    add =  g::ppt_hash_table::set  kill_set;

			    get =  g::ppt_hash_table::find kill_set;
			    get =  fn r =  case (get r)
                                               THE s => s;
                                               NULL => [];
                                           esac;

			    fun enter (r, [])
                                    =>
                                    ();

			        enter (r, pt ! pts)
                                    =>
                                    {   add (pt, r ! get pt);
                                        enter (r, pts);
                                    };
                            end;
			end;


		    # Mark all spill/reload locations 
		    #
		    fun mark_spills (g::NODE { color, number, cell, defs, uses, ... } )
                        =
			{   fun spill_it (defs, uses)
                                = 
				{   ins_spill_set (cell, defs);
				    ins_reload_set (cell, uses);

				    # Definitions but no use!

				    case uses
					[] =>  ins_kill_set (cell, defs);
					_  =>  ();
                                    esac;
				};

			    d = *defs;
			    u = *uses;

			    case *color 
				g::SPILLED     =>  spill_it (d, u);
				g::SPILL_LOC _ =>  spill_it (d, u);
				g::MEMREG _    =>  spill_it (d, u);
				g::PSEUDO      =>  spill_it (d, u);
				_ => ();
                            esac;
			};

		    apply  mark_spills  nodes_to_spill;


		    # Rewrite all affected blocks:
		    #
		    fun rewrite_all (blknum, _)
                        =
			{   my (_, control_flow_graph::BLOCK { instructions as REF instrs, notes, ... } )
                                = 
			        a::get (block_table, blknum);

			    instrs
				= 
				spill_rewrite { pt=>prog_pt (blknum, length instrs),
					 instrs, notes };

		            instructions := instrs;
		        };


		    fun mark (g::NODE { color, ... } )
			= 
			case *color
			    PSEUDO      => color := SPILLED;
			    SPILLED     => ();
			    SPILL_LOC _ => ();
			    ALIASED _   => ();
			    MEMREG _    => ();
			    COLORED _   => error "mark: COLORED";
			    REMOVED     => error "mark: REMOVED";
			esac;


		    int_hash_table::keyed_apply
                        rewrite_all
                        affected_blocks;

		    apply  mark  nodes_to_spill;

		    rebuild (cellkind, graph);
		};				# fun spill 
       end;					# fun services
};



## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
