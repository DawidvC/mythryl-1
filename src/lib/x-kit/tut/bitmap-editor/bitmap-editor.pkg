## bitmap-editor.pkg

# Compiled by:
#     src/lib/x-kit/tut/bitmap-editor/bitmap-editor.make6


stipulate
    include threadkit;					# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xc =  xcore;				# xcore			is from   src/lib/x-kit/xclient/xcore.pkg
    package xd =  xdraw;				# xdraw			is from   src/lib/x-kit/xclient/xdraw.pkg
    package xg =  xgeometry;				# xgeometry		is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xi =  xinput;				# xinput		is from   src/lib/x-kit/xclient/xinput.pkg
    #
    package wg =  widget;				# widget		is from   src/lib/x-kit/widget/basic/widget.pkg
herein

    package bitmap_editor:  Bitmap_Editor {		# Bitmap_Editor		is from   src/lib/x-kit/tut/bitmap-editor/bitmap-editor.api

	exception BAD_PARAMETER;

	Pixel_Change = (Bool, xg::Point);

	Bitmap_Editor
	    =
	    BITMAP_EDITOR
	      { widget:  wg::Widget,
		mailop:  Mailop( Pixel_Change )
	      };

	Cell_Change
	    #
	    =   DRAW  xg::Point
	    | UNDRAW  xg::Point
	    |   FLIP  xg::Point
	    ;

	fun mse_reader (from_mouse', trans_fn, m_slot)			# "mse" may be "mouse_event".
	    =
	    loop () 
	    where
		fun track msg pt
		    =
		    {   p =  trans_fn  pt;

			give  (m_slot,  msg p);

			loop p;
		    }
		    where

			fun next ()
			    = 
			    case (xi::envelope_contents (do_mailop from_mouse'))
				#
				xi::MOUSE_MOTION  { window_point, ... } => (trans_fn window_point, FALSE);
				xi::MOUSE_LAST_UP { window_point, ... } => (trans_fn window_point, TRUE );
				xi::MOUSE_DOWN    { window_point, ... } => (trans_fn window_point, FALSE);
				xi::MOUSE_UP      { window_point, ... } => (trans_fn window_point, FALSE);
				#
				_ =>  next ();
			    esac;

			fun loop p
			    =
			    {   my (p', done)
				    =
				    next ();

				if (p != p')    give (m_slot, msg p');  fi; 

				if (not done)   loop p';                fi;
			    };
		    end;


		fun handle_mse (xi::MOUSE_FIRST_DOWN { button, window_point, ... } )
			=>
			case button
			    #
			    xi::MOUSEBUTTON 1 =>  track DRAW   window_point;
			    xi::MOUSEBUTTON 2 =>  track UNDRAW window_point;
			    _                 =>  track FLIP   window_point;
			esac;

		    handle_mse(_)
			=>
			();
		end;


		fun loop ()
		    =
		    loop (handle_mse (xi::envelope_contents (do_mailop from_mouse')));

	    end;							# fun mse_reader

	fun make_bitmap_editor
		root_window
		 { horz_cells, vert_cells, cell_size }
	    =
	    {   screen =  wg::screen_of root_window;

		mailop_slot = make_mailslot ();

		pix_wide =  horz_cells*cell_size + 1;
		pix_high =  vert_cells*cell_size + 1;

		pixmap =  xc::make_readwrite_pixmap  screen  (xg::SIZE { wide=>pix_wide, high=>pix_high }, 1);

		pm =  xd::drawable_of_rw_pixmap  pixmap;

		cell_map = rw_vector::make_rw_vector (horz_cells*vert_cells, FALSE);

		size_preferences
		    =
		    { col_preference =>   wg::INT_PREFERENCE { start_at=>1, step_by=>cell_size, min_steps=>2, ideal_steps=>horz_cells, max_steps=>THE horz_cells },
		      row_preference =>   wg::INT_PREFERENCE { start_at=>1, step_by=>cell_size, min_steps=>2, ideal_steps=>vert_cells, max_steps=>THE vert_cells }
		    };

		max_x = horz_cells - 1;
		max_y = vert_cells - 1;

		draw_sz = cell_size - 3;

		on_pen =  xd::make_pen [ xd::FOREGROUND  xc::rgb8_color1,
				         xd::LINE_STYLE_ON_OFF_DASH,
				         xd::DASH_OFFSET 0,
				         xd::DASH_FIXED  1
				       ];

		off_pen  = xd::make_pen [ xd::FOREGROUND  xc::rgb8_color0 ];

		copy_pen = xd::make_pen [ xd::FOREGROUND  xc::rgb8_black,
				          xd::BACKGROUND  xc::rgb8_white
				        ];

		fun fill_pix_map  pm
		    =
		    {
			pwid = pix_wide - 1;
			pht  = pix_high - 1;

			fun make_horizontal_seg i =  {  y = i*cell_size;   xg::LINE (xg::POINT { col=>0, row=>y }, xg::POINT { col=>pwid, row=>y   } );  };
			fun make_vertical_seg   i =  {  x = i*cell_size;   xg::LINE (xg::POINT { col=>x, row=>0 }, xg::POINT { col=>x,    row=>pht } );  };

			fun make_segs seg_fn (i, bnd, l)
			    =
			    if (i == bnd)      seg_fn i  !  l;
			    else               make_segs seg_fn (i+1, bnd, (seg_fn i) ! l);
			    fi;

			xd::clear_drawable pm;

			xd::draw_segs
                            pm
                            on_pen
                            (make_segs
                                make_vertical_seg
                                ( 0,
                                  horz_cells+1,
                                  (make_segs
                                      make_horizontal_seg
                                      ( 0,
                                        vert_cells+1,
                                        []
                                      )
                                  )
                                )
                            );
		    };


		fun trans_fn (xg::POINT { col=>x, row=>y } )
		    =
		    xg::POINT { col => int::max (0, int::min (x / cell_size, max_x)),
			        row => int::max (0, int::min (y / cell_size, max_y))
			      };


		fun index (xg::POINT { col, row } )
		    =
		    col + row*horz_cells;


		fun pt_to_rectangle (xg::POINT { col, row } )
		    =
		    xg::BOX
		      {
			col  =>  2 + col*cell_size,
			row  =>  2 + row*cell_size,
			#
			wide =>  draw_sz,
			high =>  draw_sz
		      };


		fun blt dw r
		    =
		    xd::bitblt  dw  copy_pen  { from     =>  xd::FROM_RW_PIXMAP  pixmap,
			   		        from_box =>  r,
					        to_pos   =>  xg::box::upperleft_of  r
					      };


		fun redraw (dw, rlist)
		    =
		    apply (ignore o (blt dw))
			  rlist;


		fun draw_cell (dw, pt, turn_on, pen)
		    =
		    {   index = index pt;

			if (turn_on == rw_vector::get (cell_map, index))
			    #
			    NULL;
			else 
			    rw_vector::set (cell_map, index, turn_on);

			    r = pt_to_rectangle pt;

			    xd::fill_box  pm  pen  r;

			    redraw (dw,[r]);

			    THE (turn_on, pt);
			fi;
		    };

		fun realize { kidplug, window, size }
		    =
		    {   my  xi::KIDPLUG { from_other', from_mouse', ... }
			    =
			    xi::ignore_keyboard  kidplug;

			m_slot = make_mailslot ();

			dw =  xd::drawable_of_window  window;


			fun handle_ci (xi::ETC_RESIZE (xg::BOX { col, row, wide, high } ))
				=>
				();

			    handle_ci (xi::ETC_REDRAW rlist)
				=>
				{   redraw (dw, rlist);
				    ();
				};

			    handle_ci  xi::ETC_OWN_DEATH
				=>
				();

			    handle_ci _
				=>
				();
			end;


			fun handle_mse (  DRAW pt) =>  draw_cell (dw, pt, TRUE,   on_pen);
			    handle_mse (UNDRAW pt) =>  draw_cell (dw, pt, FALSE, off_pen);

			    handle_mse (FLIP pt)
				=>
				case (rw_vector::get (cell_map, index pt))
				    #
				    TRUE =>  draw_cell (dw, pt, FALSE, off_pen);
				    _    =>  draw_cell (dw, pt, TRUE,   on_pen);
				esac;
			end;


			fun loop ()
			    =
			    for (;;) {

				fun if_change (NULL ) =>  ();
				    if_change (THE v) =>  give (mailop_slot, v);
				end;

				select [
				    #
				    from_other'
					==>
				       .{  handle_ci (xi::envelope_contents  #mailop);  },

				    take' m_slot
					==>
				       .{  if_change (handle_mse   #mailop);  }
				];
			    };

			make_thread  "bitmap_editor mouse"  .{
			    #
			    mse_reader (from_mouse', trans_fn, m_slot);
			};

			make_thread  "bitmap_editor"  loop;

			();
		    };

		fill_pix_map pm;

		BITMAP_EDITOR
		  {
		    mailop =>  take'  mailop_slot,

		    widget =>  wg::make_widget
				 { root_window,
				   realize,
				   size_preference_thunk_of =>  fn () = size_preferences,
				   args      =>  fn () = { background => NULL }	# Added 2009-12-09 CrT just to make it compile.
				 }
		  };
	};								# fun make_bitmap_editor

	fun as_widget (BITMAP_EDITOR { widget, ... } ) =  widget;
	fun mailop_of (BITMAP_EDITOR { mailop, ... } ) =  mailop;

    };								# package bitmap_editor

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
