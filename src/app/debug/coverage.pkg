## coverage.pkg

# Compiled by:
#     src/app/debug/plugins.make6

#   Using the generic trace/debug/profile framework for test coverage.


package coverage
: (weak)
api {
    Kind;

    functions:      Kind;
    tail_calls:     Kind;
    non_tail_calls: Kind;

    not_covered:    List( Kind ) -> Void;
    hot_spots:      List( Kind ) -> Int -> Void;

     install:  Void -> Void;
}
{

    package m= int_red_black_map;			# int_red_black_map	is from   src/lib/src/int-red-black-map.pkg
    package f= printf_combinator;			# printf_combinator	is from   src/lib/src/printf-combinator.pkg

    package tdp= runtime_internals::tdp;		# runtime_internals	is from   src/lib/std/src/nj/runtime-internals.pkg

    Kind = Int;

    functions = tdp::idk_entry_point;
    tail_calls = tdp::idk_tail_call;
    non_tail_calls = tdp::idk_non_tail_call;

    Record = { kind:  Int, descr: String };

    records = REF (m::empty:  m::Map( Record ));

    counters = REF (rw_vector::from_list [0]);

    fun count idx
        =
        rw_vector::get (*counters, idx)
        except
            (exceptions::SUBSCRIPT | exceptions::INDEX_OUT_OF_BOUNDS) = 0;

    fun bump (module, id)
        =
	{   idx = module + id;
	    a = *counters;
	
	    rw_vector::set (a, idx, rw_vector::get (a, idx) + 1)
	    except
                (exceptions::SUBSCRIPT | exceptions::INDEX_OUT_OF_BOUNDS)
                    =
		    {  olen = rw_vector::length a;
		       nlen = int::min (idx + 1, olen + olen);

		       fun cp i
                           =
                           if   (i < olen)  rw_vector::get (a, i);
			   elif (i == idx)  1;
			   else             0;
                           fi;
		   
		       counters := rw_vector::tabulate (nlen, cp);
		    };
	};

    enter = bump;
    fun push mi = { bump mi;   fn () = (); };
    nopush = bump;

    fun register (module, kind, id, s)
        =
	{   idx = module + id;
	    r = { kind, descr => s };
	
	    records := m::set (*records, idx, r);
	};

    fun save () () = ();

    name = "coverage";

    fun install ()
        =
	{   plugin = { name, save,
			   push, nopush,
			   enter, register };
	    fun addto r x = r := x ! *r;
	
	    addto tdp::active_plugins plugin;
	};

    fun not_covered kinds
        =
	{   fun zerocnt (idx, r: Record)
                =
		count idx == 0
                and
                list::exists
                    (fn k =   k == r.kind)
                    kinds;

	    zrecords = m::keyed_filter zerocnt *records;

	    fun tell { descr, kind }
                =
		controls::print::say (descr + "\n");
	
	    m::apply tell zrecords;
	};

    fun hot_spots kinds n
        =
	{   fun getcount (idx, r: Record)
                =
		if  (list::exists
                         (fn k =  k == r.kind)
                         kinds
                    )

		    THE (r.descr, count idx);
		else
                    NULL;
                fi;

	    countmap  =  m::keyed_map_maybe_null_fn getcount *records;
	    countlist =  m::vals_list countmap;

	    fun lt ( (_, c ),
                     (_, c') )
                =
                c < c';

	    sortedcountlist
                =
                list_mergesort::sort  lt  countlist;

	    fun loop ([], _) => ();
	        loop ( _, 0) => ();
	        loop ((descr, count) ! rest, n)
		    =>
		    {   controls::print::say (f::format (f::padl 3 f::int o f::sp 1 o f::string o f::nl) count descr);
		        loop (rest, n - 1);
                    };
            end;
	
	    loop (sortedcountlist, n);
	};
};


## Copyright (c) 2004 by The Fellowship of SML/NJ
## Author: Matthias Blume (blume@tti-c.org)
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.

##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
