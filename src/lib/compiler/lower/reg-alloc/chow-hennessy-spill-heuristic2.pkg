#
# This module implements a Chow-Hennessy-style spill heuristic 

# Compiled by:
#     src/lib/compiler/lower/make7/ra.make6

generic package improved_chow_hennessy_spill_heuristic_g
   ( move_ratio:  Float;)

: (weak)  Register_Allocation_Spill_Heuristics		# Register_Allocation_Spill_Heuristics	is from   src/lib/compiler/lower/reg-alloc/ra-spill-heuristic.api

{
    package g    = register_allocation_graph;		# register_allocation_graph	is from   src/lib/compiler/lower/reg-alloc/ra-graph.pkg
    package heap = heap_priority_queue;			# heap_priority_queue		is from   src/lib/src/heap-priority-queue.pkg

    include g;

    exception NO_CANDIDATE;

    mode = register_allocation_core::compute_span;

    cache = REF NULL:   Ref( Null_Or( heap::Priority_Queue( (g::Node, Float) ) ) );		# XXX BUGGO FIXME more icky thread-hostile global mutable state

    fun init ()
        =
        cache := NULL;


    # Potential spill phase.
    # Find a cheap node to spill according to Chow Hennessy's heuristic.
    #
    fun choose_spill_node
        { graph as
          g::GRAPH { span, ... },
	  has_been_spilled,
          spill_worklist
        }
        =
	{   fun chase (NODE { color=>REF (ALIASED n), ... } )
                    =>
                    chase n;

	        chase n
                    =>
                    n;
            end;

	    # Savings due to coalescing
            # when a node is not spilled:
	    #
	    fun move_savings (NODE { movecnt=>REF 0, ... } )
                    =>
                    0.0;

	        move_savings (NODE { movelist, ... } )
		    => 
		    loop (*movelist, [])
                    where
		        fun loop ([], savings)
                                => 
			        fold_right
                                    (fn ((_, a), b) =  float::max (a, b))
                                    0.0
                                    savings;

			    loop (MOVE_INT { status=>REF (WORKLIST | GEORGE_MOVE | BRIGGS_MOVE), dst, src, cost, ... } ! mvs, savings)
                                => 
				{   fun add (c,[])
                                            =>
                                            [(c, cost)];

				        add (c, (x as (c': Int, s)) ! savings)
                                            =>
					    c == c'   ??  (c', s+cost) ! savings
					              ::   x ! add (c, savings);
                                    end;

				    savings
                                        =
				        case (chase dst)   

					    NODE { color=>REF (COLORED c), ... }
                                                =>
                                                add (c, savings);

					    _   =>
					        case (chase src)   

						    NODE { color=>REF (COLORED c), ... }
                                                        =>
                                                        add (c, savings);

						    _   =>
                                                        savings;
                                                esac;
                                        esac;

				    loop (mvs, savings);
                                };

			    loop(_ ! mvs, savings)
                                =>
                                loop (mvs, savings);
                        end;
                    end;
	    end;			# fun move_savings


	    # The spill worklist is maintained only lazily.
	    #
	    # So we have to prune away those nodes that are
	    # already removed from the interference graph.
	    #
	    # After pruning the worklist, it may be the
	    # case that there isn't anything to be spilled
	    # after all.
	    #
	    fun chow_hennessy spills
		=
		{   # Compute savings due to moves:
		    #
		    spill_savings = register_allocation_core::move_savings graph;
		    lookup_span = int_hash_table::find (null_or::the *span);

		    lookup_span
			= 
			fn r =  case (lookup_span r)

				     THE s =>  s;
				     NULL  =>  0.0;
				esac;

		    span := NULL;

		    fun loop ([], lll, pruned)
			    =>
			    (lll, pruned);

			loop (node ! rest, lll, pruned)
			    => 
			    case (chase node)   

				  node as NODE { number, pri, defs, uses,
					       degree=>REF deg, color=>REF PSEUDO, ... }
				      => 
				      if (has_been_spilled number) 
					   loop (rest, lll, FALSE);
				      else
					   fun newnode ()
                                               =
					       {   span       = lookup_span number;
						   savings    =  spill_savings number;

						   spill_cost = *pri;
						   total_cost = spill_cost - savings; 

						   # rank = ((real totalCost)+0.01) / real (span)

						   rank = (total_cost + 0.5 + move_savings (node))
								 // (span + real deg);

						   loop (rest, (node, rank) ! lll, FALSE);
                                               };

					   case (*defs, *uses)

					       (_, [])			# One def no use. 
						    =>
                                                    loop (rest, (node, -1.0 - real (deg)) ! lll, FALSE);

					       ([d], [u])		# Defs after use; don't use
                                                    =>
						    {   fun plus ( { block, instruction }, n)
                                                            =
                                                            { block, instruction=>instruction+n };

						        (d == plus (u, 1) or d == plus (u, 2) ) 
						            ??  loop (rest, lll, FALSE)
						            ::  newnode ();
						    };
					       _ => newnode();
					   esac; 
				      fi; 

				 _ => loop (rest, lll, pruned);		# Discard node 
			    esac;

		    end;

		    loop (spills, [], TRUE);
		};

	    fun choose_node heap
		=
		{   fun loop ()
			= 
			{   my (node, cost)
				=
				heap::delete_min  heap;

			    case (chase node)

				 node as NODE { color=>REF PSEUDO, ... }
				     =>
				     { node=>THE (node), cost, spill_worklist };

				 _   => loop();
			    esac;    
			};

		     loop();
		}
		except
		    _ = { node => NULL, cost => 0.0, spill_worklist => [] };

	  case *cache

	       THE heap
                   =>
                   choose_node heap;

	       NULL
		   => 
		   {   my (lll, pruned) = chow_hennessy (spill_worklist);

		       if pruned
			    # Done.
			    { node => NULL, cost => 0.0, spill_worklist => [] };
		       else
			    case lll

				[]  => raise exception NO_CANDIDATE;

				 _  => {   fun rank ( (_, x),
						      (_, y)
						    )
					       =
					       float::(<) (x, y);

					   heap   =  heap::from_list rank lll;

					   cache :=  THE heap; 

					   choose_node heap;
				       };
			 esac;

		     fi;
		   };
	  esac;
	};
};
