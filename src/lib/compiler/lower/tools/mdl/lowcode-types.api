
# This module defines special handling of various types in lowcode



api Lowcode_Types =
api

   package raw_syntax:  MDL_AST
   package rtl:  Codetree_Rtl

   # Does this type has special meaning in an instruction representation? 
   # If so, we warn the user if the argument is somehow not mentioned
   # in the RTL.

   my isSpecialRepType:  raw_syntax::Some_Type -> Bool


   # Given a type for an rtl argument, 
   # return actual representation type in lowcode

   my representationOf:  raw_syntax::id * raw_syntax::id * raw_syntax::loc * raw_syntax::Some_Type -> Int * raw_syntax::id


   # Given an rtl argument and the actual representation type,
   # insert coercion if possible.

   my insertRepCoercion:  RTL::expression * raw_syntax::Some_Type -> Void


   # Code generation magic

   my isConst:  RTL::T.rep -> Bool         # Does it represent a constant?

   my ofCellKind:  RTL::expression * raw_syntax::storagedecl -> Bool


   # Generate code for extracting an operand.
   # The functions generated are
   #   get_cellset,
   #   get_cell,
   #   get_label, 
   #   get_operand, 
   # etc.

   enum conv = IGNORE
                 | CONV  of String
                 | MULTI of String
   my getOpnd:  
           List (String * conv) -> 
          { decl:  raw_syntax::decl,
            get:   raw_syntax::expression * RTL::expression * raw_syntax::expression -> raw_syntax::expression 
          }

end
