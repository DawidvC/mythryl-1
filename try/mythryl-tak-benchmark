#!/usr/bin/mythryl

# Mythryl version of 'tak' recursion benchmark from
# Richard P. Gabriel's "Performance and Evaluation of Lisp Systems", p82.

# This runs for  10 seconds on my box,

fun tak (x, y, z)
    =
    if (not (y < x))
	#
        z;
    else 
	tak (  tak ( x - 1, y, z ),
	       tak ( y - 1, z, x ),
	       tak ( z - 1, x, y )
	    );
    fi;	


init_x =   18;
init_y =   12;
init_z =    6;

passes =   10000;

started_at =   time::get ();

sum = 0;

fun do_pass (sum, 0) => sum;
    do_pass (sum, i) => do_pass (   sum +  tak (init_x, init_y, init_z),
                                   i - 1
                               );
end;  

print "Start...\n";

sum = do_pass( 0, passes );

print "Elapsed time = ";
print (large_int::to_string (time::to_seconds(time::get ()) - time::to_seconds(started_at)));
print " seconds.\n";
