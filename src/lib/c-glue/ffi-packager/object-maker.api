#
# Sometimes the programmer fakes object orientation in C.
# This module allows you to recreate the object hierarchy sensibly in SML.
# Only single inheritance is currently supported.



###                             "This our fathers bought for us, long and long ago."
###
###                                                       -- Rudyard Kipling



local use ffi_packager
in 
api Object_Maker =
api

   type classHier

   #  Create an object hierarchy with names matching regexp 
   my makeObjectHier:  { info    :ffi_info, 
                         name    :String,           #  name of this hier 
                         root    :Ast::id,           #  root class 
                         filter  :Ast::id -> Bool,   #  filtering regexp 
                         ml      :Ast::id -> Ast::id, #  C name -> ml name 
                         downcast: Ast::id -> Ast::id, #  C name -> downcast fun 
                         tag     :Ast::id -> Ast::id, #  C name -> tag name 
                         str     :Ast::id            #  package name 
                        } -> classHier

   #  Find base class 
   my base:  classHier -> Ast::id -> Ast::id

   #  Find the root of a class hierarchy 
   my root:   classHier -> Ast::id 

   #  Find the nesting level 
   my level:  classHier -> Ast::id -> Int

   #  Enumerate an object hierarchy top down 
   my fold:  classHier -> (Int * Ast::id * X -> X) -> X -> X
                           /*level*/ 

   #  A member of the hierarchy? 
   my is_member:  classHier -> Ast::id -> Bool


   #  Convert a class name -> ML name 
   my ml:        classHier -> Ast::id -> Ast::id

   #  Package where the object types are defined 
   my str:       classHier -> Ast::id

   my findClass:  classHier -> Ast::id -> Null_Or( Ast::id )

   #  Generate type definitions for a classHier 
   my genTypeDefs:  classHier -> { sign:  List( Ast::decl ),
                                   str:   List( Ast::decl )
                                  }


end
end
