## make7.api
## author: Matthias Blume (blume@cs.princeton.edu)

# Compiled by:
#     src/lib/core/internal/cm-sig-lib.make6


# This is the api for a "full" package make7.
# This package gets constructed in
#     src/app/make7/main/standard-compiler.sml
#  and is made available at top-level by
# (auto-)loading the library "full-cm.make6".
# (After system startup only a "minimal" package cm is visible.)



###            "Philosophy of science is about as useful
###             to scientists as ornithology is to birds."
###
###                           -- Richard P. Feynman



api Make7 {

    help:            Void   -> Void;

    make:            String -> Bool;
    compile:         String -> Bool;
    freeze:          String -> Bool;
    freeze1:         String -> Bool;
    freeze': Bool -> String -> Bool;

    show_all:        Void -> Void;
    show_apis:       Void -> Void;
    show_pkgs:       Void -> Void;
    show_vals:       Void -> Void;
    show_types:      Void -> Void;
    show_generics:   Void -> Void;
    show_controls:   Void -> Void;
    show_control:    String -> Void;
    set_control:     String -> String -> Void;

    show_api:        String -> Void;
    show_pkg:        String -> Void;

    Controller( X )
        =
        {   get: Void -> X,
            set: X -> Void
        };


    package control:
        api {
	    keep_going:               Controller(  Bool );
	    verbose:                  Controller(  Bool );
	    parse_caching:            Controller(  Int  );
	    warn_on_obsolete_syntax:  Controller(  Bool );
	    debug:                    Controller(  Bool );
	    conserve_memory:          Controller(  Bool );
	    generate_index:           Controller(  Bool );
	};

    package freezefile_db:
	api {
	    Freezefile;
	    known:      Void -> List( Freezefile );
	    describe:   Freezefile  -> String;
	    os_string:  Freezefile  -> String;
	    dismiss:    Freezefile  -> Void;
	    unshare:    Freezefile  -> Void;
	};

    package make7_state:
	api {
	    reset:	   Void   -> Void;
            dump:          String -> Void;

            dump_latex:    { directory:       String,
                             filename_prefix: String,
                             filename_suffix: String
                           }
                           ->
                           Void;
	};

    package compile_client:
        api {
	    Compile_Server_Handle;

	    start_a_compile_server:
		{ cmd:  (String, List( String )),
		  name:  String,
		  path_translator:  Null_Or (String -> String),
		  preference:  Int
		}
		->
                Null_Or( Compile_Server_Handle );

	    stop_a_compile_server:  Compile_Server_Handle -> Void;
	    kill_a_compile_server:  Compile_Server_Handle -> Void;
	    compile_server_name:    Compile_Server_Handle -> String;
	};

    sources
        :
        Null_Or {
          architecture: String,
          os:           String
        }
        ->
        String
        ->
        Null_Or (
            List {
              file:    String,
              ilk:   String,
              derived: Bool
            }
        );

    host_property
        :
        String -> Controller( Null_Or(  Int ) );

    load_plugin
        :
        String -> Bool;

    build_executable_heap_image
       :
       freeze_policy::Freeze_Policy
       ->
       { setup:             Null_Or( String ),
	 make7file_to_run:  String,
	 wrapper_make7file: String,
	 heap_filename:     String
       }
       ->
       Null_Or( List( String ) );

    package graph
        :
        api {
	    graph:  String
            ->
            Null_Or {
              graph:     portable_graph::Graph,
	      imports:   List( freezefile_db::Freezefile ),
	      nativesrc: String -> String
            };
        };

    package scripting_globals
        :
        api {
	    # The following identifiers get exported into
            # the global script namespace -- see
            #     src/lib/core/internal/main,pkg
            # -- so that Mythryl scripts can use them
            # without package qualifiers.
            # 
	    # This package is the only place in Mythryl
	    # where we favor run-on identifiers like
	    # "getlogin" over our standard "get_login"
	    # style identifiers.  Reasons:
	    #
	    #  o Most of these identifiers are hallowed
	    #    by time-out-of-mind Unix tradition.
	    #
	    #  o These identifiers are primarily intended
	    #    to keep short informal scripts short and
	    #    informal.
	    #
	    #  o Keeping to the traditional forms in these
	    #    common cases helps C/Perl programmers get
	    #    up and running faster in Mythryl.
	    #
	    # In short: Every language needs a few irregular
	    # verbs, and these are Mythryl's.
            #
            # For the actual values bound, see
            #     src/app/make7/main/make7-g.pkg

	    # Note:  The (_[])   enables   'vec[index]'           notation;
	    #        The (_[]:=) enables   'vec[index] := value'  notation;

            (_!):         integer::Int -> integer::Int;
            (_[]):      (Vector(X), Int) -> X;
            (_[]:=):    (Vector(X), Int, X) -> Vector(X);

	    =~ :         (String, String) -> Bool;
	    atod:         String -> Float;
	    atoi:         String -> Int;
	    back__ticks:  String -> String;
	    basename:     String -> String;
	    bash:         String -> String;
	    chdir:        String -> Void;
	    chomp:        String -> String; 
	    die:          String -> X;
	    dirname:      String -> String;
	    environ:      Void   -> List( String );
	    eval:         String -> Void;
	    evali:        String -> Int;
	    evalf:        String -> Float;
	    evals:        String -> String;
	    evalli:       String -> List(Int);
	    evallf:       String -> List(Float);
	    evalls:       String -> List(String);
	    exit:         Int    -> X;
	    explode:      String -> List( Char );
	    factors:      Int    -> List( Int );
	    fields:      (Char -> Bool) -> String -> List( String );
	    filter:      (X -> Bool) -> List( X ) -> List( X );
	    fscanf:       file::Input_Stream -> String ->  Null_Or( List( scanf::Printf_Arg ) );
	    getcwd:       Void   -> String;
	    getenv:       String -> Null_Or( String );
	    getpid:       Void -> Int;
	    getuid:       Void -> Int;
	    geteuid:      Void -> Int;
	    getppid:      Void -> Int;
	    getgid:       Void -> Int;
	    getegid:      Void -> Int;
	    getgroups:    Void -> List( Int );
	    getlogin:     Void -> String;
	    getpgrp:      Void -> Int;
#	    glob:         String -> List( String );	XXX BUGGO FIXME Should add this, patterned after the Python glob. There's relevant existing infrastructure in src/lib/tk/src/toolkit/regExp/globber.pkg
	    setgid:       Int  -> Void;
	    setpgid:      (Int, Int) -> Void;
	    setsid:       Void -> Int;
	    setuid:       Int  -> Void;
	    implode:      List( Char ) -> String;
	    in:		  (_X, List( _X)) -> Bool;
	    iseven:	  Int -> Bool;
	    isodd:	  Int -> Bool;
	    isprime:	  Int -> Bool;
	    join':        String -> String -> String -> List( String ) -> String;
	    join:         String -> List( String ) -> String;
	    lstat:        String -> posix::stat::Stat;
	    now:          Void   -> Float;
	    product:	  List(Int) -> Int;
	    round:        Float  -> Int;
	    shuffle':      random::Random_Number_Generator -> List( X ) -> List( X );
	    shuffle:       List( X ) -> List( X );
	    sleep:	  Float  -> Void;
	    sort:	 ((X, X) -> Bool ) -> List( X ) -> List( X );
	    sorted:      ((X, X) -> Bool ) -> List( X ) -> Bool;  
	    scanf:                  String -> Null_Or( List( scanf::Printf_Arg ) );
	    sscanf:       String -> String -> Null_Or( List( scanf::Printf_Arg ) );
	    stat:         String -> posix::stat::Stat;
	    strcat:       List( String ) -> String;
	    strlen:       String -> Int;
	    strsort:      List(String) -> List(String);
	    struniqsort:  List(String) -> List(String);
	    sum:	  List(Int) -> Int;
	    system:       String -> winix::process::Status;
	    time:         Void   -> int32::Int;			# NB: 'now' has much more precision.
	    tolower:      String -> String;
	    toupper:      String -> String;
	    tokens:      (Char -> Bool) -> String -> List( String );
	    trim:         String -> String;			# Drop leading and trailing whitespace.
	    uniquesort: ((X, X) -> Order) -> List( X ) -> List( X );
	    words:        String -> List( String );
	    dot__qquotes: String -> List( String );

            arg0:         Void -> String;
            argv:         Void -> List( String );

	    # NB: The following have the perl-inspired
            #     lexer-implemented synonyms
	    #     -F -D -P -L -S -C -B -R -W -X
	    #
            isfile:      String -> Bool;
            isdir:       String -> Bool;
            ispipe:      String -> Bool;
            issymlink:   String -> Bool;
            issocket:    String -> Bool;
            ischardev:   String -> Bool;
            isblockdev:  String -> Bool;
	    #
            mayread:     String -> Bool;
            maywrite:    String -> Bool;
            mayexecute:  String -> Bool;


            # These are used in
            #     src/lib/src/eval-unit-test.pkg
            # There must be a cleaner way! :)   XXX BUGGO FIXME
	    # 
            eval_kludge_ref_int:         Ref( Int   );
            eval_kludge_ref_float:       Ref( Float );
            eval_kludge_ref_string:      Ref( String );
	    #
            eval_kludge_ref_list_int:    Ref( List( Int    ) );
            eval_kludge_ref_list_float:  Ref( List( Float  ) );
            eval_kludge_ref_list_string: Ref( List( String ) );

	    include Threadkit;
        };

    redump_heap
        :
        String -> Void;

};


## Copyright (c) 1999 by Lucent Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
