## winix-file.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6


# The Posix implementation of the portable
# (cross-platform) file system interface.

# A subpackage of winix_guts:
#
#     src/lib/std/src/unix/winix-guts.pkg

stipulate
    package host_unt =  host_unt_guts;		# host_unt_guts		is from   src/lib/std/src/bind-sysword-32.pkg
    package unt      =  unt_guts;		# unt_guts		is from   src/lib/std/src/bind-word-32.pkg
herein
    package winix_file: (weak)  Winix_File {	# Winix_File		is from   src/lib/std/src/winix/winix-file.api

	package p_fsys
            =
            posix;				# posix	is from   src/lib/std/src/posix/posix.pkg

	sys_word_to_word
            =
            unt::from_large_unt  o  host_unt::to_large_unt;

	Directory_Stream
            =
            p_fsys::Directory_Stream;

	open_directory_stream   =  p_fsys::open_directory_stream;
	read_directory_entry    =  p_fsys::read_directory_entry;
	rewind_directory_stream =  p_fsys::rewind_directory_stream;
	close_directory_stream  =  p_fsys::close_directory_stream;

	change_directory	=  p_fsys::change_directory;
	current_directory       =  p_fsys::current_directory;

	stipulate
	    package s =  p_fsys::s;

	    mode777 =  s::flags [ s::irwxu, s::irwxg, s::irwxo ];
	herein
	    fun make_directory path
		=
		p_fsys::mkdir (path, mode777);
	end;

	remove_directory   =  p_fsys::rmdir;
	is_directory       =  p_fsys::stat::is_directory  o  p_fsys::stat;

	is_symlink   =  p_fsys::stat::is_symlink  o  p_fsys::lstat;
	read_symlink =  p_fsys::readlink;

	# The maximum number of links allowed:
	max_links = 64;

	package p = winix_path;				# winix_path	is from   src/lib/std/src/unix/winix-path.pkg

	# A Unix-specific implementation of full_path:
	#
	fun full_path p
	    =
	    {   old_cwd =  current_directory ();

		fun make_path  path_from_root
		    =
		    p::to_string {
                      is_absolute => TRUE,
                      disk_volume => "",
                      arcs        => list::reverse  path_from_root
                    };

		fun walk_path (0, _, _                     ) =>   raise exception assembly::SYSTEM_ERROR("too many links", NULL);
		    walk_path (n, path_from_root, []       ) =>   make_path path_from_root;
		    walk_path (n, path_from_root, ""  ! al ) =>   walk_path (n, path_from_root, al);
		    walk_path (n, path_from_root, "." ! al ) =>   walk_path (n, path_from_root, al);
		    walk_path (n, [], ".." ! al            ) =>   walk_path (n, [], al);
		    walk_path (n, _ ! r, ".." ! al         ) =>   { change_directory "..";   walk_path (n, r, al); };	# XXX BUGGO FIXME There must be some way to do this without frigging with the cwd!  (This is DISTINCTLY multi-thread hostile.)

		    walk_path (n, path_from_root, [arc])
			=>
			if (is_symlink arc)
			     expand_link (n, path_from_root, arc, []);
			else make_path (arc ! path_from_root);  fi;

		    walk_path (n, path_from_root, arc ! al)
			=>
			if (is_symlink arc)
			     expand_link (n, path_from_root, arc, al);
			else change_directory arc; walk_path (n, arc ! path_from_root, al); fi;
		end 

		also
		fun expand_link (n, path_from_root, link, rest)
		     =
		     case (p::from_string (read_symlink link))
                       
		          {   is_absolute => FALSE, arcs, ... }
			          =>
			          walk_path (n - 1, path_from_root, list::(@) (arcs, rest));

			  {   is_absolute => TRUE,  arcs, ... }
			          =>
			          goto_root (n - 1, list::(@) (arcs, rest));
                     esac

		also
		fun goto_root (n, arcs)
		     =
		     {   change_directory "/";
			 walk_path (n, [], arcs);
		     };

		fun compute_full_path  arcs
		    =
		    (   goto_root (max_links, arcs)
			before
			    change_directory old_cwd
		    )
		    except
			ex =  {   change_directory old_cwd;
				  raise exception ex;
			      };

		case (p::from_string p)
		  
		     {   is_absolute=>FALSE, arcs, ... }
			 =>
			 {   my { arcs=>arcs', ... }
				 =
				 p::from_string  (old_cwd);

			     compute_full_path (list::(@) (arcs', arcs));
			 };

		     {   is_absolute=>TRUE, arcs, ... }
			     =>
			     compute_full_path  arcs;
		esac;
	    };

	fun real_path p
	    =
	    if   (p::is_absolute p)
	        
		 full_path p;
	    else
		 p::make_relative { path=>full_path p, relative_to=>full_path (current_directory()) };
	    fi;

	file_size
	    =
	    p_fsys::stat::size  o  p_fsys::stat;

	last_file_modification_time
	    =
	    p_fsys::stat::mtime  o  p_fsys::stat;

#	fun set_last_file_modification_time (path, NULL)  =>  p_fsys::utime (path, NULL);
#	    set_last_file_modification_time (path, THE t) =>  p_fsys::utime (path, THE { actime=>t, modtime=>t } );
#	end;

	fun set_last_file_modification_time (path, NULL)
                =>
                p_fsys::utime (path, NULL);

	    set_last_file_modification_time (path, THE t)
                =>
                {
                    p_fsys::utime (path, THE { actime=>t, modtime=>t } );
                };
	end;

	remove_file   = p_fsys::unlink;
	rename_file   = p_fsys::rename;

	package a: (weak)  api {
			Access_Mode = MAY_READ | MAY_WRITE | MAY_EXECUTE;
		    }
		 =  posix;					# posix		is from   src/lib/std/src/posix/posix.pkg

	include a;

	fun access (path, al)
	    =
	    p_fsys::access (path, list::map convert al)
	    where
		fun convert MAY_READ  =>  p_fsys::MAY_READ;
		    convert MAY_WRITE =>  p_fsys::MAY_WRITE;
		    convert MAY_EXECUTE  =>  p_fsys::MAY_EXECUTE;
		end;
	    end;

	my tmp_name:  Void -> String
	    =
            c_interface::c_function "POSIX-OS" "tmpname";		# c_interface	is from   src/lib/std/src/unsafe/cinterface.pkg

	File_Id
            =
            FILE_ID {
              dev:    Int,		# "dev" == "device"
              inode:  Int
            };

	fun file_id fname
	    =
	    {   stat =  p_fsys::stat  fname;

		FILE_ID {
		    dev   =>  p_fsys::stat::dev   stat,
		    inode =>  p_fsys::stat::inode stat
		  };
	    };


	fun hash (FILE_ID { dev, inode } )
	    =
	    sys_word_to_word (
	        host_unt::(+)   (host_unt::(<<) (host_unt::from_int dev, 0u16),   host_unt::from_int inode)
            );


	fun compare ( FILE_ID { dev => d1,  inode => i1 },
                      FILE_ID { dev => d2,  inode => i2 }
                    )
	    =
	    if   (d1 < d2)   exceptions::LESS;
	    elif (d1 > d2)   exceptions::GREATER;
	    elif (i1 < i2)   exceptions::LESS;
	    elif (i1 > i2)   exceptions::GREATER;
	    else             exceptions::EQUAL;
            fi;

    };		# package winix_file
end;		# stipulate



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
