# register-allocation-spill-types-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# We get invoked from:
#
#     src/lib/compiler/lower/reg-alloc/ra-spill-with-renaming.pkg
#     src/lib/compiler/lower/reg-alloc/register-allocation-spilling-g.pkg

generic package register_allocation_spill_types_g (

    instruction_set: Instruction_Set		# Instruction_Set		is from   src/lib/compiler/lower/instruction/instruction-set.api

)
{
    package instruction_set = instruction_set;
    package cells           = instruction_set::cells;

    package g = register_allocation_graph;	# register_allocation_graph	is from   src/lib/compiler/lower/reg-alloc/ra-graph.pkg
    package i = instruction_set;
    package c = cells;
    package cb= cells_basis;			# cells_basis			is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    Copy_Instr
	=
        (((List( cb::Cell ), List( cb::Cell))), i::Instruction) -> List( i::Instruction );


    # Spill the value associated with reg into spillLoc.
    # All definitions of instruction should be renamed to a new temporary new_reg. 
    #
    Spill
	=
	{ instruction:  i::Instruction,		# Instruction where spill is to occur 
	  reg:          cb::Cell,				# Register to spill 
	  spill_loc:    g::Spill_Loc,				# Logical spill location 
	  kill:         Bool,					# Can we kill the current node? 
	  notes:        Ref( note::Notes )			# Annotations 
	}
        ->
	{ code:         List( i::Instruction ),	# Instruction + spill code 
	  prohibitions: List( cb::Cell ),			# Prohibited from future spilling 
	  new_reg:      Null_Or( cb::Cell )			# The spilled value is available here 
	};

    # Spill the register src into spillLoc.
    # The value is originally from register reg.
    #
    Spill_Src
        =
        { src:        cb::Cell,					# Register to spill from 
          reg:        cb::Cell,					# The register 
          spill_loc:  g::Spill_Loc,				# Logical spill location 
          notes:      Ref( note::Notes )			# Annotations 
        }
        ->
        List( i::Instruction );			# Spill code 


    # Spill the temporary associated with a copy into spillLoc
    #
    Spill_Copy_Tmp
       =
       { copy:       i::Instruction,		# Copy to spill 
         reg:        cb::Cell,					# The register 
         spill_loc:  g::Spill_Loc,				# Logical spill location 
         notes:      Ref( note::Notes )				# Annotations 
       }
       ->
       i::Instruction;				# Spill code 


    # Reload the value associated
    # with reg from spill_loc.
    #
    # All uses of instruction should be
    # renamed to a new temporary new_reg.
    #
    Reload
	=
        { instruction:  i::Instruction,		# Instruction where spill is to occur 
          reg:          cb::Cell,              			# Register to spill 
          spill_loc:    g::Spill_Loc,          			# Logical spill location 
          notes:        Ref( note::Notes )			# Annotations 
	}
	->
	{ code:         List( i::Instruction ),	#  instruction + reload code 
	  prohibitions: List( cb::Cell ),				# Prohibited from future spilling 
	  new_reg:      Null_Or( cb::Cell )			# The reloaded value is here 
	};


    # Rename all uses from_src to to_src
    #
    Rename_Src
        =
	{ instruction:  i::Instruction,		# Instruction where spill is to occur 
	  from_src:     cb::Cell,				# Register to rename 
	  to_src:       cb::Cell				# Register to rename to 
	}
        ->
	{ code:         List( i::Instruction ),	# Renamed instruction 
	  prohibitions: List( cb::Cell ),			# Prohibited from future spilling 
	  new_reg:      Null_Or( cb::Cell )			# The renamed value is here 
	};

    # Reload the register dst from spillLoc. 
    # The value is originally from register reg.
    #
    Reload_Dst
        =
        { dst:       cb::Cell,					# Register to reload to 
          reg:       cb::Cell,					# The register 
          spill_loc: g::Spill_Loc,				# Logical spill location 
          notes:     Ref( note::Notes )				# Annotations 
        }
        ->
        List( i::Instruction );			# Reload code 

};
