## codetree-size-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



###                 "Without music, life would be an error."
###
###                              -- Friedrich Nietzsche


# We get invoked from;
#
#     src/lib/compiler/lower/codetree/codetree-stuff-g.pkg

generic package codetree_size_g (

    package     codetree:  Codetree;		# Codetree	is from   src/lib/compiler/lower/codetree/codetree.api
    int_type:   codetree::Some_Type;		# size of integer word
)

: (weak) Codetree_Size				# Codetree_Size	is from   src/lib/compiler/lower/codetree/codetree-size.api

{
    package codetree = codetree;

    package t = codetree;

    int_type = int_type;

    fun size (t::REG (type, _)) => type;
	size (t::LITERAL _) => int_type;
	size (t::LABEL _) => int_type;
	size (t::CONST _) => int_type;
	size (t::LABEXP e) => size e;
	size (t::NEG (type, _)) => type;
	size (t::ADD (type, _, _)) => type;
	size (t::SUB (type, _, _)) => type;
	size (t::MULS (type, _, _)) => type;
	size (t::DIVS(_, type, _, _)) => type;
	size (t::REMS(_, type, _, _)) => type;
	size (t::MULU (type, _, _)) => type;
	size (t::DIVU (type, _, _)) => type;
	size (t::REMU (type, _, _)) => type;
	size (t::NEGT (type, _)) => type;
	size (t::ADDT (type, _, _)) => type;
	size (t::SUBT (type, _, _)) => type;
	size (t::MULT (type, _, _)) => type;
	size (t::DIVT(_, type, _, _)) => type;
	size (t::BITWISEAND (type, _, _)) => type;
	size (t::BITWISEOR (type, _, _)) => type;
	size (t::BITWISEXOR (type, _, _)) => type;
	size (t::BITWISEEQV (type, _, _)) => type;
	size (t::BITWISENOT (type, _)) => type;
	size (t::RIGHTSHIFT (type, _, _)) => type;
	size (t::RIGHTSHIFTU (type, _, _)) => type;
	size (t::LEFTSHIFT (type, _, _)) => type;
	size (t::SIGNEXTEND (type, _, _)) => type;
	size (t::ZEROEXTEND (type, _, _)) => type;
	size (t::CONVERTFLOATTOINT (type, _, _, _)) => type;
	size (t::COND (type, _, _, _)) => type;
	size (t::LOAD (type, _, _)) => type;
	size (t::PRED (e, _)) => size e;
	size (t::LET(_, e)) => size e;
	size (t::REXT (type, _)) => type;
	size (t::MARK (e, _)) => size e;
	size (t::OP (type, _, _)) => type;
	size (t::ARG (type, _, _)) => type;
	size (t::ATATAT(type, _, _)) => type;
	size (t::PARAM _) => int_type;
	size (t::BITSLICE (type, _, _)) => type;
	size (t::QQQ) => int_type;
    end;

    fun fsize (t::FREG (type, _)) => type;
	fsize (t::FLOAD (type, _, _)) => type;
	fsize (t::FADD (type, _, _)) => type;
	fsize (t::FSUB (type, _, _)) => type;
	fsize (t::FMUL (type, _, _)) => type;
	fsize (t::FDIV (type, _, _)) => type;
	fsize (t::FABS (type, _)) => type;
	fsize (t::FNEG (type, _)) => type;
	fsize (t::FSQRT (type, _)) => type;
	fsize (t::FCOND (type, _, _, _)) => type;
	fsize (t::CVTI2F (type, _, _)) => type;
	fsize (t::CVTF2F (type, _, _)) => type;
	fsize (t::COPY_FLOAT_SIGN (type, _, _)) => type;
	fsize (t::FPRED (e, _)) => fsize e;
	fsize (t::FEXT (type, _)) => type;
	fsize (t::FMARK (e, _)) => fsize e;
    end;
};
