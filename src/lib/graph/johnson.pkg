# johnson.pkg
#
# This is Johnson's algorithm for computing all pairs shortest paths.
# Good for sparse graphs.
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6




###           "Do you believe then that the sciences
###            would ever have arisen and become great
###            if there had not before hand been
###            magicians, alchemists, astrologers and wizards,
###            who thirsted and hungered after
###            abscondite and forbidden powers?"
###
###                         -- Friedrich Nietzsche 1886



generic package johnsons_all_pairs_shortest_paths (num: Abelian_Group_With_Infinity) 		# Abelian_Group_With_Infinity	is from   src/lib/graph/group.api
: (weak) 
api {
    include All_Pairs_Shortest_Paths; 		# All_Pairs_Shortest_Paths	is from   src/lib/graph/shortest-paths.api
    exception NEGATIVE_CYCLE;
}
{
    package num =  num;
    package g=  graph;				# graph		is from   src/lib/graph/graph.pkg
    package a2=  matrix;			# matrix	is from   src/lib/std/src/matrix.pkg
    package a=  rw_vector;			# rw_vector	is from   src/lib/std/src/rw-vector.pkg
    package u=  union_graph_view;		# union_graph_view	is from   src/lib/graph/uniongraph.pkg

    package d   =  dijkstras_single_source_shortest_paths(     num );
    package bf  =  bellman_fords_single_source_shortest_paths( num );

    package gi  =  directed_graph_g( sparse_rw_vector );

    exception NEGATIVE_CYCLE = bf::NEGATIVE_CYCLE;

    fun all_pairs_shortest_paths
	  { graph=>ggg as g::GRAPH g:  g::Graph( N, E, G), weight }
	=
	{   nnn    = g.capacity ();
	    dist = a2::array (nnn, nnn, num::inf);
	    prior = a2::array (nnn, nnn,-1);

	    exception EDGE  E;
	    exception NODE  N;
	    exception EMPTY;

	    fun arb_edge ()
		= 
		{   g.forall_edges (fn (_, _, e) = raise exception EDGE e);
		    raise exception EMPTY;
		}
		except
		    EDGE e = e;

	    fun arb_node ()
		= 
		{   g.forall_nodes (fn (_, n) = raise exception NODE n);
		    raise exception EMPTY;
		}
		except
		    NODE n = n;

	    {   e    = arb_edge ();
		n    = arb_node ();

		my  ggg' as g::GRAPH g'
		    =
		    gi::graph ("dummy source", g.graph_info, 1);

		ggg''  = u::union_view (fn (a, b) => a; end ) (ggg, ggg');

		my (+) = num::(+) ;
		my (-) = num::(-) ;

		s    = nnn;

		g.forall_nodes
                   (fn (v, _) = g'.add_edge (s, v, e));

		g'.add_node (s, n);

		fun weight'(u, v, e)
                    =
                    if   (u == s   )   num::zero;
                                  else   weight (u, v, e);   fi;

		my { dist=>h, ... } = d::single_source_shortest_paths
				       { graph=>ggg'', s, weight=>weight'};

		fun weight''(u, v, e)
		    =
		    weight (u, v, e) + ((a::get (h, u)) - (a::get (h, v)));

		g.forall_nodes
		    (    fn (u, _)
			     =
			     {    my { dist=>d, prior=>p }
				       =
				       bf::single_source_shortest_paths
					   { graph=>ggg, s=>u, weight=>weight''};

				  h_u =  a::get (h, u);

				  g.forall_nodes
				      (    fn (v, _)
					       =
					       {   a2::set (dist, u, v, a::get (d, v) + a::get (h, v) - h_u);
						   a2::set (prior, u, v, a::get (p, v));
					       }
				      );
			     }
		    );
	    }
	    except
		EMPTY = ();

	    { dist, prior };
	}; 
};
