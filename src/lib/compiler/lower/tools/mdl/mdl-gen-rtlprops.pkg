
# Generate the <architecture>RTLProps generic.
# This package extracts semantics and dependence 
# information about the instruction set needed for SSA optimizations.



###                  "Civilization advances by extending
###                   the number of important operations which
###                   we can perform without thinking of them."
###
###                                -- Alfred North Whitehead 



generic package MDLGenRTLProps (RTLComp:  Mdl_Rtl_Comp) : Mdl_Gen_Module2 =
pkg

   package RTLComp = RTLComp
   package Comp    = RTLComp::Comp
   package m       = RTLComp::lowcode_types
   package Consts  = Comp::Consts
   package raw_syntax     = Comp::raw_syntax
   package Dictionary     = Comp::Dictionary
   package tr      = Comp::Trans
   package rtl     = RTLComp::RTL
   package t       = RTL::T
   package c       = cells_basis

   use raw_syntax Comp::Util Comp::error

   exception Undefined
   exception NOT_FOUND

   #  Function to make a new RTL 
   makeNewRTL = IDexp (IDENT(["RTL"], "new"))

   /*------------------------------------------------------------------------
    *
    * Generate a table of compiled RTLs templates
    *
    *------------------------------------------------------------------------*/
   fun genRTLTable compiled_rtls =
   let md   = RTLComp::md compiled_rtls

       rtls = RTLComp::rtls compiled_rtls

       rtlStringName = Comp::strname md "RTL" 

       constTable = Consts::newConstTable()

       fun make_entry (RTLComp::RTLDEF { id, args, rtl, ... } ) =  
       let lookup = RTL::argOf rtl

           fun parameter i = APPLY_EXPRESSION (IDexp (IDENT(["T"], "PARAM")), INTexp i)

           fun makeArg name =
           let my (expression, pos) = lookup name
               e =
                   case pos of
                     RTL::IN i    => parameter i
                   | RTL::OUT i   => parameter i
                   | RTL::IO (i, _) => parameter i
           in  (name, e)
           end except RTL::NotAnArgument =>
               (warning("'"$name$"' is unused in rtl "$id);
                (name, parameter 0)
               )

           arg = Consts::const constTable (RECORD_EXPRESSION (map makeArg args))
       in  VALdecl[NAMED_VARIABLE (IDpat id,
                    APPLY_EXPRESSION (makeNewRTL,
                           APPLY_EXPRESSION (IDexp (IDENT([rtlStringName], id)),
                           arg)))
                  ]
       end

       body = map make_entry rtls  

   in  PACKAGE_DECL("Arch",[],
                     NULL, DECLsexp
                       [LOCALdecl (Comp::Consts::genConsts constTable, body)
                       ])
   end

   # ------------------------------------------------------------------------
   #
   # Create the function rtl:  instruction -> rtl
   #
   # ------------------------------------------------------------------------
   fun mkRtlQueryFun compiled_rtls =
   let fun body { instruction, rtl=RTLComp::RTLDEF { id, ... }, const } = 
           { expression=IDexp (IDENT(["Arch"], id)), casePats=[] }
   in  RTLComp::mkQuery compiled_rtls
          { name          = "rtl",
           namedArguments= TRUE,
           args          = [["instruction"]], 
           decls         = [RTLComp::complexErrorHandler "rtl"],
           caseArgs      = [],
           body          = body
          }
   end

   # ------------------------------------------------------------------------
   #
   # Create the function defUse:  instruction -> List( cell ) * List( cell )
   #
   # ------------------------------------------------------------------------
   fun mkDefUseQueryFun compiled_rtls name =
   let my { get, decl } = m::getOpnd
            [("int",     m::CONV("CELL (int x)")),
             ("int32",   m::CONV("CELL (int32 x)")),
             ("intinf",  m::CONV("CELL (intinf x)")),
             ("word",    m::CONV("CELL (word x)")),
             ("word32",  m::CONV("CELL (word32 x)")),
             ("cell",    m::CONV("CELL x")),
             ("label",   m::IGNORE),
             ("cellset", m::MULTI("map CELL (cells_basis::CellSet::toCellList x)")),
             ("operand", m::CONV("OPERAND x"))
            ]
        decl0 =
            @@@["/* methods for computing value numbers */",
              "my ot::VALUE_NUMBERING",
              "   { int, int32, intinf, word, word32, operand, ... } =",
              "      valueNumberingMethods",
              "/* methods for type conversion */"
             ]       
       fun gen x = THE (get x)
   in  RTLComp::mkDefUseQuery 
          compiled_rtls
          { name           = name,
           args           = [["valueNumberingMethods"], ["instruction"]],
           namedArguments = FALSE,
           decls          = [RTLComp::complexErrorHandler name, decl0, decl],
           def            = gen,
           use            = gen
          }
   end

   /*------------------------------------------------------------------------
    *
    * Main routine
    *
    *------------------------------------------------------------------------*/
   fun gen compiled_rtls =
   let #  The machine description 
       md = RTLComp::md compiled_rtls

       #  name of the package/api 
       strName = Comp::strname md "RTLProps"  
       sigName = "RTL_PROPERTIES"
 
       #  Arguments to the instruction generic 
       args =
           ["package instruction:  "$Comp::signame md "INSTR",
            "package region_props:  REGION_PROPERTIES",
            "package rtl:  Codetree_Rtl",
            "package operand_table:  OPERAND_TABLE where I = Instr",
            "package asm:  Instruction_Emitter where I = Instr",
            "  sharing Instr::T = RTL::T"
           ]

       #  The generic 
       strBody = 
           [@@@ ["package i   = Instr",
               "package c   = i::C",
               "package rtl = RTL",
               "package t   = RTL::T",
               "package ot  = OperandTable",
               "",
               "enum value = CELL of c::cell",
               "               | OPERAND of i::operand",
               ""
              ],
            Comp::errorHandler md "RTLProps",
            RTLComp::complexErrorHandlerDef (),
            PACKAGE_DECL (Comp::strname md "RTL",[], NULL,
               APPsexp (IDsexp (IDENT([], Comp::strname md "RTL")),
                  DECLsexp[
                  @@@[ "package rtl = RTL",
                     "package c   = C"
                   ]]
                  )
            ),
            genRTLTable compiled_rtls,
            mkRtlQueryFun compiled_rtls,
            mkDefUseQueryFun compiled_rtls "defUse" 
           ]

   in  Comp::codegen md "codetree/RTLProps"
         [Comp::make_generic md "RTLProps" args sigName
             (map tr::simplify_declaration strBody)
         ]
   end
end
