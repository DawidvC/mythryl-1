## latex-print-symbol-table.pkg

# Compiled by:
#     src/lib/compiler/core.make6

# Invoked from src/lib/compiler/front/typecheck-stuff/symbol-table/latex-print-compiler-state.pkg

# This is a clone of prettyprint-symbol-table.pkg
# specialized to produce LaTeX output intended to be
# run through Hevea to produce online HTML docs of
# our interfaces.
#

package latex_print_symbol_table:  Latex_Print_Symbol_Table {                # Latex_Print_Symbol_Table      is from   src/lib/compiler/front/typecheck-stuff/symbol-table/latex-print-symbol-table.api

                                        # symbol                        is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
                                        # types                         is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
                                        # variables_and_constructors    is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/variables-and-constructors.pkg
                                        # module                        is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
                                        # symbol_table                  is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
                                        # symbol_table_entry		is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg

    package pp = prettyprint;           # prettyprint                   is from   src/lib/prettyprint/src/prettyprint.pkg
                                        # latex_print_value             is from   src/lib/compiler/front/typechecker/print/latex-print-value.pkg
                                        # latex_print_type              is from   src/lib/compiler/front/typechecker/print/latex-print-type.pkg
                                        # latex_print_package_language   is from   src/lib/compiler/front/typechecker/print/latex-print-package-language.pkg
    include symbol_table_entry;


    fun is_file filename
        =
        posix::stat::is_file (posix::stat  filename)
        except
            _ = FALSE;

    # 2007-12-05: At the moment we are called only from
    #
    #   src/lib/compiler/toplevel/main/compile-g.pkg
    #
    fun latex_print_symbol_table
            pps                         # "pps" == "prettyprint_stream"
            { directory:       String,
              filename_prefix: String,
              filename_suffix: String
            }
            symbol_table
        =
        {    map
                 do_symbol_binding
                 symboltable_contents; 

             pp::newline pps;
        }
        where

             symboltable_contents                       # A list of (symbol, value) pairs.
                 = 
                 symbol_table::to_sorted_list  symbol_table;


             fun do_symbol_binding (symbol, binding)                    # symbol        is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
                 =
                 {
                     fun print_tagged_name ()
                          =
                          {   namespace =   symbol::name_space_to_string  (symbol::name_space symbol);
                              name      =                                  symbol::name       symbol;

                              pp::string  pps   (namespace + " " + name + ":  " );
                          };

		     backslash_latex_special_chars = latex_print_value::backslash_latex_special_chars;

                     fun print_name ()
                          =
                          {   name      =   symbol::name       symbol;

                              pp::string  pps   name;
                          };

                     case binding
                        
                           NAMED_VARIABLE             (v:   variables_and_constructors::Variable)
                               =>
                               latex_print_value::latex_print_variable
                                   pps
                                   (symbol_table, v);

                           NAMED_CONSTRUCTOR          (v:   variables_and_constructors::Constructor)
                               =>
                               {   latex_print_value::latex_print_constructor
                                       pps
                                       symbol_table
                                       v;

                                   pp::string  pps   ";";
                               };

                           NAMED_TYPE                 (t:   types::Type_Constructor)
                               =>
                               {   latex_print_type::latex_print_type
                                       symbol_table                     # XXX BUGGO FIXME we need to standardize on "stream symbol_table" or "symbol_table stream" arg order.
                                       pps
                                       t;

                                   pp::string  pps   ";";
                               };

                           NAMED_API                  (our_api:   module::Api)
                               =>
                               {
                                   # Open a separate   doc/tex/tmp*.tex
                                   # output file for this api:
                                   #  
                                   api_name  =   symbol::name       symbol;

                                   # Filename for autogenerated content:
                                   #
                                   prettyprint_filepath
                                       =
                                       directory + "/"   +
                                       filename_prefix   +
                                       "api-"            +
                                       api_name          +
                                       filename_suffix;


                                   # Filename for matching top-of-file manually generated content, if any:
                                   #
                                   top_manually_generated_content_filename
                                       =
                                       "top-"            +
                                       "api-"            +
                                       api_name          +
                                       filename_suffix;
                                   #
                                   top_manually_generated_content_filepath
                                       =
                                       directory + "/"   +  top_manually_generated_content_filename;


                                   # Filename for matching bottom-of-file manually generated content, if any:
                                   #
                                   bot_manually_generated_content_filename
                                       =
                                       "bot-"            +
                                       "api-"            +
                                       api_name          +
                                       filename_suffix;
                                   #
                                   bot_manually_generated_content_filepath
                                       =
                                       directory + "/"   +  bot_manually_generated_content_filename;


                                   pp  = prettyprinter::make_file_prettyprinter  prettyprint_filepath;
                                   pps = pp.stream;


                                   pp::string   pps  ("\\inde" + "x[api]{" + (backslash_latex_special_chars api_name) + "}");
                                   pp::newline  pps;

                                   pp::string   pps  ("\\labe" + "l{api:"  + (backslash_latex_special_chars api_name) + "}");
                                   pp::newline  pps;

                                   # Include top-of-file manually generated content if available:
                                   #
                                   if (is_file  top_manually_generated_content_filepath)
                                       pp::newline  pps;
                                       pp::string   pps  ("\\in" + "put{" + top_manually_generated_content_filename + "}");                               pp::newline  pps;      pp::newline  pps;
                                       pp::string   pps  "{\\tiny \\it The above information is manually maintained and may contain errors.}";            pp::newline  pps;      pp::newline  pps;
                                   fi;  

                                   pp::string   pps  ("\\begi" + "n{verbatim}");        # The break is to avoid confusing Hevea when it formats this file.
                                   pp::newline  pps;

				   # Upon return from next call, this will be a
                                   # list of TeX index entry strings like
                                   # "(backslash)index[fun]{foo}" or such:
				   #
                                   index_entries = REF [];

				   latex_print_package_language::latex_print_api
				       pps
				       (our_api, symbol_table, /* max prettyprint recursion depth: */ 200, index_entries );

                                   pp::newline  pps;
                                   pp::string   pps  ("\\en" + "d{verbatim}");          # The break is to avoid confusing Hevea when it formats this file.

                                   # Print any index table entries generated during the above:
                                   #
				   foreach *index_entries .{
                                       pp::string   pps  #entry;
                                   };

                                   # Include bottom-of-file manually generated content if available:
                                   #
                                   if (is_file  bot_manually_generated_content_filepath)
                                       pp::newline  pps;
                                       pp::string   pps  "{\\tiny \\it The following information is manually maintained and may contain errors.}";            pp::newline  pps;      pp::newline  pps;
                                       pp::string   pps  ("\\in" + "put{" + bot_manually_generated_content_filename + "}");                                   pp::newline  pps;
                                   fi;  

                                   pp::newline  pps;
                                   pp::newline  pps;
                                   pp::string   pps   "% This file generated by do_symbol_binding  from";                                                     pp::newline  pps;
                                   pp::string   pps   "%    src/lib/compiler/front/typecheck-stuff/symbol-table/latex-print-symbol-table.pkg";           pp::newline  pps;

                                   pp.flush ();
                                   pp.close ();
                               };

                           NAMED_PACKAGE              (our_pkg:   module::Package)
                               =>
                               {
                                   # Open a separate   doc/tex/tmp*.tex
                                   # output file for this pkg:
                                   #  
                                   pkg_name  =   symbol::name       symbol;

                                   # Filename for autogenerated content:
                                   #
                                   prettyprint_filepath
                                       =
                                       directory + "/"   +
                                       filename_prefix   +
                                       "pkg-"            +
                                       pkg_name          +
                                       filename_suffix;

                                   # Filename for matching top-of-file manually generated content, if any:
                                   #
                                   top_manually_generated_content_filename
                                       =
                                       "top-"            +
                                       "pkg-"            +
                                       pkg_name          +
                                       filename_suffix;
                                   #
                                   top_manually_generated_content_filepath
                                       =
                                       directory + "/"   +  top_manually_generated_content_filename;

                                   # Filename for matching bottom-of-file manually generated content, if any:
                                   #
                                   bot_manually_generated_content_filename
                                       =
                                       "bot-"            +
                                       "pkg-"            +
                                       pkg_name          +
                                       filename_suffix;
                                   #
                                   bot_manually_generated_content_filepath
                                       =
                                       directory + "/"   +  bot_manually_generated_content_filename;

                                   pp  = prettyprinter::make_file_prettyprinter  prettyprint_filepath;
                                   pps = pp.stream;


                                   pp::string   pps  ("\\inde" + "x[pkg]{" + (backslash_latex_special_chars pkg_name) + "}");
                                   pp::newline  pps;

                                   pp::string   pps  ("\\labe" + "l{pkg:" + (backslash_latex_special_chars  pkg_name) + "}");
                                   pp::newline  pps;

                                   # Include top-of-file manually generated content if available:
                                   #
                                   if (is_file  top_manually_generated_content_filepath)
                                       pp::newline  pps;
                                       pp::string   pps  ("\\in" + "put{" + top_manually_generated_content_filename + "}");                               pp::newline  pps;      pp::newline  pps;
                                       pp::string   pps  "{\\tiny \\it The above information is manually maintained and may contain errors.}";            pp::newline  pps;      pp::newline  pps;
                                   fi;  

                                   pp::string   pps  ("\\begi" + "n{verbatim}");        # The break is to avoid confusing Hevea when it formats this file.
                                   pp::newline  pps;

                                   latex_print_package_language::latex_print_package
                                       pps
                                       (our_pkg, symbol_table, /* max prettyprint recursion depth: */ 200, /*currently unused index entry return channel:*/ REF []);

                                   pp::newline  pps;
                                   pp::string   pps  ("\\en" + "d{verbatim}");          # The break is to avoid confusing Hevea when it formats this file.

                                   # Include manually generated bottom-of-file content if available:
                                   #
                                   if (is_file  bot_manually_generated_content_filepath)
                                       pp::newline  pps;
                                       pp::string   pps  "{\\tiny\\it The following information is manually maintained and may contain errors.}";             pp::newline  pps;      pp::newline  pps;
                                       pp::string   pps  ("\\in" + "put{" + bot_manually_generated_content_filename + "}");                                   pp::newline  pps;
                                   fi;  

                                   pp::newline  pps;
                                   pp::newline  pps;
                                   pp::string   pps   "% This file generated by do_symbol_binding  from";                                                     pp::newline  pps;
                                   pp::string   pps   "%    src/lib/compiler/front/typecheck-stuff/symbol-table/latex-print-symbol-table.pkg";           pp::newline  pps;

                                   pp.flush ();
                                   pp.close ();


#                                   pp::newline pps;
#                                  pp::string  pps  "package ";
#                                   print_name ();      
#                                  pp::newline pps;
#                                  pp::string  pps  ":";
#                                  pp::newline pps;
#                                   latex_print_package_language::latex_print_package
#                                      pps
#                                       (m, symbol_table, /* max prettyprint recursion depth: */ 200);
                               };

                           NAMED_GENERIC_API          (m:   module::Generic_Api)
                               =>
                               {   pp::newline pps;
                                   pp::string  pps  "generic_api ";
                                   print_name ();       
                                   pp::newline pps;
                                   pp::string  pps  ":";
                                   pp::newline pps;
                                   latex_print_package_language::latex_print_generic_api
                                       pps
                                       (m, symbol_table, /* max prettyprint recursion depth: */ 200, /*currently unused index entry return channel:*/ REF []);
                               };
#                              print_tagged_name ();

                           NAMED_GENERIC              (m:   module::Generic)
                               =>
                               {   pp::newline pps;
                                   pp::string  pps  "generic ";
                                   print_name ();       
                                   pp::newline pps;
                                   pp::string  pps  ":";
                                   pp::newline pps;
                                   latex_print_package_language::latex_print_generic
                                       pps
                                       (m, symbol_table, /* max prettyprint recursion depth: */ 200, /*currently unused index entry return channel:*/ REF []);
                               };
#                              print_tagged_name ();

                           NAMED_FIXITY               (f:   fixity::Fixity)
                               =>
                               print_tagged_name ();
                      esac;     

                      pp::newline pps;
                 };                             # fun do_symbol_binding    in   fun prettyprint_symbol_table


        end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.            #
#  ^C @ ^T hides all Text. (Leaves all headings.)                        #
#  ^C @ ^A shows All of file.                                            #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)     #
#  ^C @ ^I shows Immediate children of node.                             #
#  ^C @ ^S Shows all of a node.                                          #
#  ^C @ ^D hiDes all of a node.                                          #
#  ^HFoutline-mode gives more details.                                   #
#  (Or do ^HI and read emacs:outline mode.)                              #
#                                                                        #
# Local variables:                                                       #
# mode: outline-minor                                                    #
# outline-regexp: "[{ \t]*\\(fun \\)"                                    #
# End:                                                                   #
##########################################################################


## Code by Jeff Prothero: Copyright (c) 2010,
## released under Gnu Public Licence version 3.
