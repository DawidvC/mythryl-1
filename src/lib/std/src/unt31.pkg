## unt31.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6

###              "Silence is better than unmeaning words."
###
###                                -- Pythagoras



package unt31_guts: (weak)  Unt {		# Unt	is from   src/lib/std/src/unt.api

    package w31= inline_t::unt31;		# inline_t	is from   src/lib/core/init/built-in.pkg
    package lw= unt32;				# unt32		is from   src/lib/std/types-only/basis-structs.pkg

    Unt = Unt;

    word_size = 31;

    my to_large_unt:    Unt -> large_unt::Unt = w31::to_large_unt;
    my to_large_unt_x:  Unt -> large_unt::Unt = w31::to_large_unt_x;
    my from_large_unt:  large_unt::Unt -> Unt = w31::from_large_unt;

    my to_large_int:  Unt -> large_int::Int = w31::to_large_int;
    my to_large_int_x:   Unt -> large_int::Int = w31::to_large_int_x;
    my from_large_int:  large_int::Int -> Unt = w31::from_large_int;

    my to_int:    Unt -> Int = w31::to_int;
    my to_int_x:   Unt -> Int = w31::to_int_x;
    my from_int:  Int -> Unt = w31::from_int;

    my bitwise_or:   (Unt, Unt) -> Unt = w31::bitwise_or;
    my bitwise_xor:  (Unt, Unt) -> Unt = w31::bitwise_xor;
    my bitwise_and:  (Unt, Unt) -> Unt = w31::bitwise_and;
    my bitwise_not:  Unt -> Unt = w31::bitwise_not;

    my (*) : (Unt, Unt) -> Unt = w31::(*);
    my (+) : (Unt, Unt) -> Unt = w31::(+);
    my (-) : (Unt, Unt) -> Unt = w31::(-);
    my (/) : (Unt, Unt) -> Unt = w31::div ;
    my (%) : (Unt, Unt) -> Unt = w31::mod ;

    my (<<)  : (Unt, Unt) -> Unt = w31::check_lshift;
    my (>>)  : (Unt, Unt) -> Unt = w31::check_rshiftl;
    my (>>>) : (Unt, Unt) -> Unt = w31::check_rshift;

    fun compare (w1, w2)
        =
	if   (w31::(<) (w1, w2))  LESS;
	elif (w31::(>) (w1, w2))  GREATER;
	else                      EQUAL;
        fi;

    my (>)  : (Unt, Unt) -> Bool = w31::(>);
    my (>=) : (Unt, Unt) -> Bool = w31::(>=);
    my (<)  : (Unt, Unt) -> Bool = w31::(<);
    my (<=) : (Unt, Unt) -> Bool = w31::(<=);

    my (-_): Unt -> Unt = (-_);
    my  min:  (Unt, Unt) -> Unt = w31::min;
    my  max:  (Unt, Unt) -> Unt = w31::max;

    fun format radix
        =
        (num_format::format_unt radix) o  w31::to_large_unt;

    to_string = format string_conversion::HEX;

    fun scan radix
        =
        {
	    scan_large = num_scan::scan_word radix;

	    fun scan getc cs
                =
                 case (scan_large getc cs)

		      NULL => NULL;

		      THE (w, cs')
                          =>
                          if (inline_t::unt32::(>) (w, 0ux7FFFFFFF))
			      #	
			      raise exception OVERFLOW;
			  else
                              THE (w31::from_large_unt w, cs');
                          fi;
                 esac;

	  
	    scan;
	  };
    from_string = pre_basis::scan_string (scan string_conversion::HEX);

};	#  package unt31_guts 





## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
