## prof-dictionary.pkg

# Compiled by:
#     src/lib/compiler/debugging-and-profiling/debugprof.make6


###       "The term 'bug' is used, to a limited extent,
###        to designate any fault or trouble in the
###        connections or working of electric apparatus."
###
###                        -- N Hawkin, 1896


api Prof_Dictionary {

     Dictionary;
     prof: tell_dictionary::Dictionary -> String; 
     replace: {
	    get: Void -> Dictionary,
	    set: Dictionary -> Void
	  } -> Void;
  };

generic package profiling_dictionary_g (
                    Dictionary;
		    symbol_table_part:  Dictionary -> symbol_table::Symbol_Table;
		    evaluate:           (String, Dictionary) -> Dictionary;
		    layer:              (Dictionary, Dictionary) -> Dictionary;
        )
	: Prof_Dictionary		# Prof_Dictionary	is from   src/lib/compiler/debugging-and-profiling/profile/prof-env.pkg
           where    Dictionary == Dictionary
=
package {

   Dictionary = Dictionary;

  package t= tell_dictionary;	# tell_dictionary	is from   src/lib/compiler/debugging-and-profiling/profile/tell-env.pkg

  fun prof (e0:  t::Dictionary)
      =
      {   accum = REF (NIL: List( String ));
	  fun say x = accum := x ! *accum;
	  indentlev = REF 0;
	  spaces = "                                            ";

	  fun nl ()
              =
              {
		 say "\n";
		 say (substring (spaces, 0, int::min (size spaces, *indentlev)));
              };

	  fun indent f x = { indentlev := *indentlev + 1;
			    f x;
			    indentlev := *indentlev - 1;};


	  fun any_in_env e
              =
              list::exists any_in_naming (t::components e)

	  also
	  fun any_in_naming (_, b)
              =
	      case (t::str_bind b, t::val_bind b)
		   (THE str, _) => any_in_env str;
		  (_, THE v) => any_in_ty v;
		  _ => FALSE;
              esac

	  also
	  fun any_in_ty type
              =
              case (t::fun_type type)   
                  THE _ => TRUE;
                  NULL => FALSE;
              esac;

	  fun pr_env (e: t::Dictionary)
              =
              apply pr_naming (t::components e)

	  also
	  fun pr_naming (symbol: t::Symbol, b: t::Naming)
              =
	      case (t::str_bind b, t::val_bind b)
	          (THE str, _) => pr_str (symbol, str);
		 (_, THE v) => pr_val (symbol, v);
		 _ => ();
              esac

	  also
	  fun pr_str (symbol: t::Symbol, e: t::Dictionary)
              =
	      if (any_in_env e) 
	          
		 say "package ";
                 say (t::name symbol); 
		 say " {"; nl();
                 say " include ";
                 say (t::name symbol);
		 indent (fn () = { nl(); pr_env e; }) ();
		 say "};"; nl();
	      fi

	  also
	  fun pr_val (symbol: t::Symbol, type: t::Some_Type)
	      =
	      {   fun curried (funid, argid, type)
                      =
		      case (t::fun_type type)
			 NULL => { say "op "; say funid; say " "; say argid;};
			THE(_, type') => { say "stipulate my op f = op "; say funid;
					 say " "; say argid; 
					 indent (fn()=> { nl(); say "herein fn x => ";
							 curried("f", "x", type');
							 nl(); say "end";}; end ) ();};
                      esac;

		  case (t::fun_type type)
		       THE(_, type') => { say "my op "; say (t::name symbol); say " = fn x => ";
				       curried (t::name symbol, "x", type'); nl();};
		      _ => ();
		  esac;
	      };

        pr_env e0;

	cat (reverse *accum);
      };

  fun replace { get, set }
      = 
      {   e0 = get ();
	  s = prof (symbol_table_part e0);
	  e1 = evaluate (s, e0);
          set (layer (e1, e0));
      };


};



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
