## list-fns.pkg

# Compiled by:
#     src/lib/std/stdlib.make6




# General list functions.


package list_fns:  List_Fns {


    exception ZIP;
    exception SPLIT;


    fun find  predicate  []         =>  [];
	#
        find  predicate  (a ! rest) =>  if (predicate a)   a ! (find predicate rest);
                                        else                   (find predicate rest);
				        fi;	
    end;


    fun find_first  predicate  []         =>  NULL;
	#
        find_first  predicate  (a ! rest) =>  if (predicate a)    THE a;
                                              else                (find_first  predicate  rest);
					      fi;
    end;


    fun splitp predicate
        =
        spl
        where
	    fun spl (l as a ! rest)
		    =>
		    if (predicate a)
			#
			([], l);
		    else
			my (p, s) = spl rest;

			(a ! p, s);
		    fi;

	        spl []
		    =>
		    ([], []) ;
	    end;
	end;


    fun prefix predicate l
	=
	#1 (splitp predicate l);


    fun suffix prediicate []
	    =>
	    [];

        suffix predicate (a ! rest)
	    =>
	    if (predicate a)   rest;
	    else               suffix predicate rest;
	    fi;
    end;


    fun remove predicate
	=
	rm
	where
	    fun rm []
		    =>
		    [];

	        rm (a ! l)
		    =>
		    if (predicate a)       (rm l);
                    else               a ! (rm l);
		    fi;
	    end;
        end;

    fun remove_first predicate
	=
	rm
	where
	    fun rm []
		    =>
		    [];

	        rm (a ! l)
		    =>
		    if (predicate a)    l;
                    else                a ! (rm l);
		    fi;
	    end;
        end;


    fun flatten []
	    =>
	    [];

        flatten [l]
	    =>
	    l;

        flatten ll
	    =>
	    flat (ll, [])
	    where
		fun flat ([],     l) =>  reverse l;
		    flat (ll ! r, l) =>  flat (r, flat2 (ll, l));
		end

		also
		fun flat2 ([],    l) =>  l;
		    flat2 (x ! r, l) =>  flat2 (r, x ! l);
		end;
	    end;
    end;


    fun zip ([],[])            =>  [];
        zip ((a ! x), (b ! y)) =>  (a, b) ! zip (x, y);
        zip (_, _)             =>   raise exception ZIP;
    end;	


    fun unzip []
	    =>
	    ([], []);

        unzip ((a, b) ! z)
	    =>
	    {   my (x, y) =  unzip z;

                (a ! x,  b ! y);
            };
    end;


    fun filter predicate l
	=
	filter_p (l, [])
	where
	    fun filter_p ([], l)
		    =>
		    reverse l;

	        filter_p (x ! r, l)
		    =>
		    case (predicate x)
			#
		        THE y =>  filter_p  (r,  y ! l);
		        NULL  =>  filter_p  (r,      l);
		    esac;
	    end;
	end;


    fun from_to (lo, hi)
	= 
        if (hi < lo)
	    #
	    lib_base::failure { module=>"List_fns", func=>"from_to", msg=>"hi < lo"};
        else
            loop (hi,[])
	    where
		fun loop (i, l)
		    =
		    if (i < lo)    l;
		    else           loop (i - 1, i ! l);
		    fi;
	    end;
        fi;


    fun make_list (len, genfn)
	=
	if (len < 0)
	    #
	    lib_base::failure { module=>"list_fns", func=>"make_list", msg=>"len < 0"};
        else
            loop (len - 1,[])
	    where
                fun loop (i, l)
		    =
		    if (i < 0)      l;
                    else            loop (i - 1, (genfn i) ! l);
		    fi;
            end;
	fi;


    fun split n l
	=
        if (n < 0)
	    #
	    lib_base::failure { module=>"list_fns", func=>"split", msg=>"len < 0"};
        else
            spl (n, l)
	    where
		fun spl (0, l)
			=>
			([], l);

		    spl (n, a ! rest)
			=>
			{   my (p, s) =  spl (n - 1, rest);

			    (a ! p, s);
			};

		    spl _
			=>
			raise exception SPLIT;
		end;
	    end;
	fi;
       
};					# package list_fns



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1993 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
