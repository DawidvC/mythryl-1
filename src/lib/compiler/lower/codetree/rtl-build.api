
# How to build primitive RTL operators 

api Rtl_Build =
api
   package t:  Codetree
   type Some_Type= t::Type
   type cond  = t::cond
   type fcond = t::fcond

   type effect 
   type region 
   type expression
   type Bool
   type div_rounding_mode
   
   my intConst:   Some_Type -> Int -> expression          #  integer constant 
   my wordConst:  Some_Type -> unt32::word -> expression  #  word constant 
   my ???       : Some_Type -> expression                 #  An undefined value 

   my newOp:      String -> expression List -> expression   #  Create new operator 

   my immed:      Some_Type -> expression -> expression          #  immediate value 
   my operand:    Some_Type -> expression -> expression          
   my label:      Some_Type -> expression -> expression
   my @@@       : cells_basis::cellkind * Some_Type -> expression -> expression   
   my Mem:        cells_basis::cellkind * Some_Type -> expression * region -> expression
   my Arg:        Some_Type * String * String -> expression

   #  Signed/unsigned promotion 
   my sx:   Some_Type * Some_Type -> expression -> expression
   my zx:   Some_Type * Some_Type -> expression -> expression

   #  Integer operators 
   my (-_)  : Some_Type -> expression -> expression
   my +     : Some_Type -> expression * expression -> expression
   my -     : Some_Type -> expression * expression -> expression
   my muls:   Some_Type -> expression * expression -> expression 
   my mulu:   Some_Type -> expression * expression -> expression 
   my divs:   Some_Type -> div_rounding_mode * expression * expression -> expression 
   my divu:   Some_Type -> expression * expression -> expression 
   my rems:   Some_Type -> div_rounding_mode * expression * expression -> expression 
   my remu:   Some_Type -> expression * expression -> expression 

   my addt:   Some_Type -> expression * expression -> expression 
   my subt:   Some_Type -> expression * expression -> expression 
   my mult:   Some_Type -> expression * expression -> expression 
   my divt:   Some_Type -> div_rounding_mode * expression * expression -> expression 

   my bitwise_not:   Some_Type -> expression -> expression
   my bitwise_and:   Some_Type -> expression * expression -> expression 
   my bitwise_or:    Some_Type -> expression * expression -> expression 
   my bitwise_xor:   Some_Type -> expression * expression -> expression 
   my eqvb:   Some_Type -> expression * expression -> expression 
   my <<    : Some_Type -> expression * expression -> expression 
   my >>    : Some_Type -> expression * expression -> expression 
   my >>>   : Some_Type -> expression * expression -> expression 

   my BitSlice:  Some_Type ->  List( Int * Int ) -> expression -> expression

   #  Boolean operators 
   #  my Cond:     Some_Type -> Bool * expression * expression -> expression 
   my False:     Bool
   my True:      Bool
   my Not:       Bool -> Bool
   my And:       Bool * Bool -> Bool
   my Or:        Bool * Bool -> Bool
   my Cond:      Some_Type -> Bool * expression * expression -> expression 

   #  Integer comparisons 
   my ====     : Some_Type -> expression * expression -> Bool 
   my <>      : Some_Type -> expression * expression -> Bool 
   my <       : Some_Type -> expression * expression -> Bool 
   my >       : Some_Type -> expression * expression -> Bool 
   my <=      : Some_Type -> expression * expression -> Bool 
   my >=      : Some_Type -> expression * expression -> Bool 
   my ltu:      Some_Type -> expression * expression -> Bool 
   my leu:      Some_Type -> expression * expression -> Bool 
   my gtu:      Some_Type -> expression * expression -> Bool 
   my geu:      Some_Type -> expression * expression -> Bool 
   my setcc:    Some_Type -> expression * expression -> Bool
   my getcc:    Some_Type -> expression * t::cond -> Bool

   #  Floating point operators 
   my fadd:     Some_Type -> expression * expression -> expression
   my fsub:     Some_Type -> expression * expression -> expression
   my fmul:     Some_Type -> expression * expression -> expression
   my fdiv:     Some_Type -> expression * expression -> expression
   my fcopysign:  Some_Type -> expression * expression -> expression
   my fabs:     Some_Type -> expression -> expression
   my fneg:     Some_Type -> expression -> expression
   my fsqrt:    Some_Type -> expression -> expression

   #  Floating point comparisons 
   my |?|     : Some_Type -> expression * expression -> Bool
   my |====|  : Some_Type -> expression * expression -> Bool
   my |?=|    : Some_Type -> expression * expression -> Bool
   my |<|     : Some_Type -> expression * expression -> Bool
   my |?<|    : Some_Type -> expression * expression -> Bool
   my |<=|    : Some_Type -> expression * expression -> Bool
   my |?<=|   : Some_Type -> expression * expression -> Bool
   my |>|     : Some_Type -> expression * expression -> Bool
   my |?>|    : Some_Type -> expression * expression -> Bool
   my |>=|    : Some_Type -> expression * expression -> Bool
   my |?>=|   : Some_Type -> expression * expression -> Bool
   my |<>|    : Some_Type -> expression * expression -> Bool
   my |<=>|   : Some_Type -> expression * expression -> Bool
   my |?<>|   : Some_Type -> expression * expression -> Bool
   my setfcc:   Some_Type -> expression * expression -> Bool
   my getfcc:   Some_Type -> expression * t::fcond -> Bool

   #  Effect combinators 
   my :=    : Some_Type -> expression * expression -> effect
   my Par:    effect * effect -> effect  #  parallel effects 
   my Nop:    effect                     #  empty effect 
   my Jmp:    Some_Type -> expression -> effect        #  jump to address 
   my Call:   Some_Type -> expression -> effect        #  Call address 
   my Ret:    effect                     #  return 
   my If:     Bool * effect * effect -> effect #  if/then/else 

   my map:     Some_Type -> (X -> Y) -> List( X ) -> List( Y )

   my getNewOps:    Void -> List( t::Basis::misc_op )
   my clearNewOps:  Void -> Void

end
