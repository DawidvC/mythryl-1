## typechecking-debugging.pkg

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6


api Typechecking_Debugging {

     debug_print:  Ref( Bool )
	          -> ( (String,
                      (prettyprint::Stream -> X -> Void),
                      X)
                     )
		  -> Void;

     prettyprint_symbol_list:  prettyprint::Stream
			     -> List( symbol::Symbol )
			     -> Void;

     symbol_table_symbols:  symbol_table::Symbol_Table
                          -> List( symbol::Symbol );

     check_symbol_table:  (symbol_table::Symbol_Table,
			  symbol::Symbol)
			-> String;

     with_internals:  (Void -> X)
                     -> X;

}; #  Api Typechecking_Debugging 


package typechecking_debugging: (weak)  Typechecking_Debugging {		# Typechecking_Debugging	is from   src/lib/compiler/front/typechecker/typecheck/typechecking-debugging.pkg

    stipulate

	package s= symbol;							# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package se= symbol_table;						# symbol_table			is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg
	package pp= prettyprint;						# prettyprint			is from   src/lib/prettyprint/src/prettyprint.pkg
	package ppu= unparse_stuff;						# unparse_stuff			is from   src/lib/compiler/front/typechecker/print/unparse-stuff.pkg
	package em= error_message;						# error_message			is from   src/lib/compiler/front/basics/errormsg/error-message.pkg

	include pp;

    herein 

	fun debug_print (debugging: Ref( Bool ))
		       ( msg:       String,
                         printfn:   pp::Stream -> X -> Void,
                         arg:       X
                       )
            =
	    if *debugging

		 with_prettyprint_device (em::default_plaint_sink())
		  (fn stream
                    =
		    {   begin_horizontal_else_vertical_box stream;
			pp::string stream msg;
			newline stream;
			pp::nonbreakable_spaces stream 2;
			begin_horizontal_else_vertical_box stream;
			printfn stream arg;
			end_box stream;
			newline stream;
			end_box stream;
			pp::flush_stream stream;
                    }
                  );
	    fi;

	fun prettyprint_symbol_list stream (syms: List( s::Symbol ))
            = 
	    ppu::unparse_closed_sequence

                stream

		{ front => (fn stream =  pp::string stream "["),
		  sep   => (fn stream = (pp::string stream ", ")),
		  back  => (fn stream =  pp::string stream "]"),
		  style => ppu::INCONSISTENT,
		  pr    => ppu::unparse_symbol
		}

		syms;


	#  More debugging: 

	fun symbol_table_symbols (symbol_table: se::Symbol_Table)
            =
	    se::fold   (fn ((s, _), sl) =  s ! sl)   NIL   symbol_table;

	fun check_symbol_table (   symbol_table: se::Symbol_Table,
                                 symbol:      s::Symbol
                     )
            =
	    {   se::get (symbol_table, symbol);
               "YES";
            }
            except
                se::UNBOUND
                =>
                "NO"; end ;

	fun with_internals (f: Void -> X)
            =
	    {   internals   =   *typechecking_control::internals;

                typechecking_control::internals := TRUE;

		(   f()
                    before
		        typechecking_control::internals := internals
                )
		except
                    exn = {   typechecking_control::internals := internals;
			      raise exception exn;
			  };
	    };

    end;	# stipulate
};		# package typechecking_debugging 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
