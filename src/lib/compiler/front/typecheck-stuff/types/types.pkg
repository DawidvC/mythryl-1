## types.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# Datastructures describing type declarations.
#
# In particular,
#
#     Type_Constructor
#
# provides the value type bound by the symbol table
# for that namespace -- see OVERVIEW section in
#
#     compiler/typecheck-stuff/symbol-table/symboltable.sml


# NB: In general we avoid plurals in package names,
#     but we use the plural in this case to sidestep
#     the problem that 'type' is a reserved word.		XXX BUGGO FIXME -- except that 'type' is no longer reserved! ;-)

package types: (weak)  Types {			# Types		is from   src/lib/compiler/front/typecheck-stuff/types/types.api

    stipulate

        package a  =  var_home;			# var_home	is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package ep =  module_path;		# module_path	is from   src/lib/compiler/front/typecheck-stuff/modules/module-path.pkg
	package ip =  inverse_path;		# inverse_path	is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package s  =  symbol;			# symbol	is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package st =  stamp;			# stamp		is from   src/lib/compiler/front/typecheck-stuff/basics/stamp.pkg

    herein

	Label = s::Symbol;

	Type_Scheme_Arg_Eq_Properties
            =
            List( Bool );			#  equality property indicator 

	Equality_Property
            = YES
            | NO
            | INDETERMINATE			# This was "IND", which I'm guessing is cryptic for "INDETERMINATE" -- 2009-03-21 CrT
            | CHUNK
            | DATA
            | EQ_ABSTRACT			# Used to implement "abstype" statements.
            | UNDEF;

	Literal_Kind
            =
            INT | WORD | REAL | CHAR | STRING; 


        Type_Variable		        # User-specified type variables like X.  

	    = USER_TYPE_VARIABLE {
                name:        s::Symbol,						# A type variable symbol.
                eq:          Bool,						# Must it resolve to an 'equality type'?
                fn_nesting:  Int						# Outermost fun/fn lexical context mentioning/using us.
              }

	    | META_TYPE_VARIABLE {
		eq:          Bool,						# Must it resolve to an 'equality type'?
		fn_nesting:  Int						# Outermost fun/fn lexical context mentioning/using us.
										#   fn_nesting = infinity for META-args
										#   fn_nesting < infinity for lambda bound
	      }

	    | INCOMPLETE_RECORD_TYPE_VARIABLE {
		known_fields: List( (Label, Type) ),
		eq:           Bool,						# Must it resolve to an 'equality type'?
		fn_nesting:   Int						# Outermost fun/fn lexical context mentioning/using us.
	      }

	    | RESOLVED_TYPE_VARIABLE Type								# A type variable for which we have inferred a type.

	    | OVERLOADED_TYPE_VARIABLE  Bool								# Overloaded operator type scheme variable:
			     										# arg is TRUE if it must resolve to an equality type.

	    | LITERAL_TYPE_VARIABLE  									# Used to resolve type of a type-polymorphic literal.
               { kind: Literal_Kind,
		 source_code_region: source_map::Source_Code_Region
	       }

	    | TYPE_VARIABLE_MARK  Int

	also
        Type_Constructor_Path                        
	    = TYPCONPATH_VARIABLE          Exception
	    | TYPCONPATH_TYPE_CONSTRUCTOR  Type_Constructor
	    | TYPCONPATH_GENERIC           (List( Type_Constructor_Path ), List( Type_Constructor_Path ))
	    | TYPCONPATH_APPLY             (Type_Constructor_Path, List( Type_Constructor_Path ))
	    | TYPCONPATH_SELECT            (Type_Constructor_Path, Int)

	also
        Type_Constructor_Kind
	    = PRIMITIVE  Int
	    | DATATYPE 
		 { index:    Int,
		   stamps:   Vector( st::Stamp ),
		   root:     Null_Or( ep::Module_Stamp ),    #  The root field used by type spec only. 
		   free_type_constructors: List( Type_Constructor ),
		   family:   Datatype_Family
		 }
	    | ABSTRACT  Type_Constructor
	    | FLEXIBLE_TYPE_CONSTRUCTOR  Type_Constructor_Path            #  macro expanded formal type constructor 
	    | FORMAL                        #  used only inside apis 
	    | TEMP                          #  used only during enum elaborations 

	also
        Type_Constructor
	    = PRIMITIVE_TYPE_CONSTRUCTOR  Primitive_Type_Constructor_Record
	    | DEFINED_TYPE_CONSTRUCTOR 
		{   stamp:        st::Stamp, 
		    type_scheme:  Type_Scheme, 
		    strict:       List( Bool ), 
		    path:         ip::Inverse_Path
		}
	    | TYPE_CONSTRUCTOR_BY_MODULE_PATH               #  Used only inside apis 
		{   arity:        Int,
		    module_path:  ep::Module_Path,
		    path:         ip::Inverse_Path
		}
	    | RECORD_TYPE_CONSTRUCTOR  List( Label )
	    | RECURSIVE_TYPE  Int                 #  Used only in domain type of Constructor_Description 
	    | FREE_TYPE  Int                      #  Used only in domain type of Constructor_Description 
	    | ERRONEOUS_TYPE_CONSTRUCTOR

	also
        Type 
	    = TYPE_VARIABLE_REF  Typevar_Ref
	    | TYPE_SCHEME_ARG_I  Int				# i-th argument to a type function.
	    | WILDCARD_TYPE
	    | UNDEFINED_TYPE
	    | CONSTRUCTOR_TYPE  (Type_Constructor, List( Type ))
	    | TYPE_SCHEME_TYPE 
		{   type_scheme_arg_eq_properties: Type_Scheme_Arg_Eq_Properties,
		    type_scheme: Type_Scheme
		}

	also
        Type_Scheme 
	    = TYPE_SCHEME 
		{   arity: Int,
		    body: Type
		}

	withtype
        Typevar_Ref
	    =
	    {   ref_typevar:  Ref( Type_Variable ),
		id:                 Int							# Purely for debuggging printout purposes.
	    }



	#  Constructor description used in Datatype_Member 

	also
        Constructor_Description
            =
	    { name:           s::Symbol,
	      representation: a::Constructor_Form,
	      domain:         Null_Or( Type )
            }



	#  A member of a family of (potentially) mutually recursive datatypes 

	also
        Datatype_Member
            =
	    { type_constructor_name:     s::Symbol,
	      arity:                   Int,
	      eq:                      Ref( Equality_Property ),
	      is_lazy:                  Bool,
	      constructor_list: List( Constructor_Description ),
	      an_api:              a::Constructor_Signature
            }

	also
        Datatype_Family
            = 
	    { mkey:          st::Stamp,                  #  "member key"...? 
	      members:       Vector( Datatype_Member ),
	      property_list: property_list::Property_List
	    }

	also
        Stub_Info
            =
	    { owner:  picklehash::Picklehash,
	      lib:    Bool
            }

	also
        Primitive_Type_Constructor_Record
            =
	    { stamp:  st::Stamp, 
	      arity:  Int, 
	      eq:     Ref( Equality_Property ),
	      kind:   Type_Constructor_Kind,
	      path:   ip::Inverse_Path,
	      stub:   Null_Or( Stub_Info )
            };

        debugging  =   typecheck_data_control::types_debugging;		#  REF FALSE 

        stipulate

            next_type_var_id =  REF 0;				# Used purely for debugging printout purposes.

	herein

	    fun allocate_type_variable_id ()
		=
		{   id = *next_type_var_id;
		    next_type_var_id := id + 1;
		    id;
		};

	    fun make_type_variable_ref
		( typevar:  Type_Variable,
		  stack:    List(String)
		)
		:
		Typevar_Ref
		=
		{   if *debugging
			printf "make_type_variable_ref making typevar_ref id%d for %s\n"  *next_type_var_id  (string::join "" (reverse stack));
		    fi; 
		    { ref_typevar => REF typevar,
		      id          => allocate_type_variable_id()
		    }; 
		};

	    fun make_type_variable_ref'
		( ref_typevar:  Ref( Type_Variable ),
		  stack:        List(String)
		)
		:
		Typevar_Ref
		=
		{   if *debugging
			printf "make_type_variable_ref' making typevar_ref id%d for %s\n"  *next_type_var_id  (string::join "" (reverse stack));
		    fi; 
		    { id => allocate_type_variable_id (),
		      ref_typevar
		    }; 
		};

	end;

	fun copy_type_variable_ref ({ ref_typevar, ... }: Typevar_Ref)
            =
            { ref_typevar => REF *ref_typevar,
              id                => allocate_type_variable_id()
	    };

	infinity = 10000000;				# Now you know. :)

	Constructor #  Data constructors 
	    =
	    ENUM_CONSTRUCTOR  {
	      symbol:            s::Symbol,	# Name of constructor.
	      constructor_type:  Type,
	      representation:    a::Constructor_Form,
	      is_lazy:           Bool,    		  #  LAZY: constructor belongs to lazy enum? 
	      const:             Bool,     		  #  redundant, could be determined from type 
	      signature:         a::Constructor_Signature #  redundant, ditto 
	    };

    end;	# stipulate

};		#  package types 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
