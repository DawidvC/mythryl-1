## module-path.pkg

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6

api Module_Path {

    Module_Stamp = stamp::Stamp;
    Module_Path  = List( Module_Stamp );
    Reverse_Module_Path;

    null_module_path:          Module_Path;
    null_reverse_module_path:  Reverse_Module_Path;
    prepend_to_reverse_module_path2: (Module_Stamp, Reverse_Module_Path) -> Reverse_Module_Path;

    reverse_and_prepend_to_reverse_module_path:  (Module_Path, Reverse_Module_Path) -> Reverse_Module_Path;
    reverse_module_path_to_module_path:  Reverse_Module_Path -> Module_Path;

    module_stamps_are_equal:  (Module_Stamp, Module_Stamp) -> Bool;
    module_paths_are_equal:   (Module_Path, Module_Path)  -> Bool;

    compare_generics_expansion_variables: (Module_Stamp, Module_Stamp) -> Order;
    compare_module_paths:     (Module_Path, Module_Path)  -> Order;

    module_path_is_null:       Module_Path -> Bool;

    module_stamp_to_string:    Module_Stamp -> String;
    module_path_to_string:     Module_Path  -> String;

    bogus_typechecked_package_variable:     Module_Stamp;

    package module_stamp_map:  Map		# Map	is from   src/lib/src/map.api
                                        where
                                            key::Key == Module_Stamp;

};  #  Api Module_Path 


package module_path:  Module_Path {		# Module_Path	is from   src/lib/compiler/front/typecheck-stuff/modules/module-path.pkg

    stipulate

        package st = stamp;			# stamp		is from   src/lib/compiler/front/typecheck-stuff/basics/stamp.pkg

    herein

	Module_Stamp
            =
            st::Stamp;

	Module_Path
            =
            List( Module_Stamp );
	#  Module_Path has generics expansion stamps in direct order, outer first 

	Reverse_Module_Path
            =
            List( Module_Stamp );		#  reversed order; abstract 

	null_module_path         =  [];
	null_reverse_module_path =  [];

	prepend_to_reverse_module_path2
            =
            (!);


	reverse_and_prepend_to_reverse_module_path
            =
            list::reverse_and_prepend;


	reverse_module_path_to_module_path
            =
            reverse;


	module_stamps_are_equal
            =
            st::eq;


	fun module_paths_are_equal (ep1, ep2)
	    =
	    all (ep1, ep2)
            where
	        fun all (v ! l, u ! m) => module_stamps_are_equal (v, u) and all (l, m);
		    all (NIL, NIL) => TRUE;
		    all _ => FALSE;
                end;
	    end;

	compare_generics_expansion_variables
            =
            st::compare;

	fun compare_module_paths (ep1, ep2)
	    = 
	    {   fun f (a ! ar, b ! br)
                    =>
		    case (st::compare (a, b))
		      
			 EQUAL => f (ar, br);
			 z     => z;
		    esac;

		    f (a ! ar, NIL  )  =>   GREATER;
		    f (NIL,   b ! br)  =>   LESS;
		    f (NIL,   NIL  )   =>   EQUAL;
                end;
	    
		f (ep1, ep2);
	    };

	package module_stamp_map
            =
            red_black_map_g (						# red_black_map_g		is from   src/lib/src/red-black-map-g.pkg

		Key = Module_Stamp; 

		compare = compare_generics_expansion_variables;

            );

	# paired_lists::all didn't cut it because it doesn't require lists of equal length
	#  length ep1 = length ep2 and
	#  paired_lists::all generics expansion stamps are equal (ep1, ep2)
	#
	fun module_path_is_null (ep: Module_Path)
            =
            list::null ep;


	fun module_stamp_to_string (v: Module_Stamp)
            =
            st::to_short_string v;


	fun module_path_to_string ([]: Module_Path)
                =>
                "[]";

	    module_path_to_string (x ! xs)
		=>
		{   rest
                        =
                        fold_right
                            (fn (y, l) =  ", " ! (st::to_short_string y) ! l)
                            ["]"]
                            xs;

		    string::cat("[" ! (st::to_short_string x) ! rest);
		};
        end;


	bogus_typechecked_package_variable
            =
            st::special "bogus generics expansion variable";

    end; #  local 

};		#  package module_path 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
