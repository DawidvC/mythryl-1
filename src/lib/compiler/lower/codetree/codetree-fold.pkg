
# Compiled by:
#     src/lib/compiler/lower/make7/codetree.make6



###               "I find television very educating.
###                Every time somebody turns on the set,
###                I go into the other room and read a book."
###
###                                  -- Groucho Marx



generic package codetree_fold (

    package t:  Codetree;			# Codetree	is from   src/lib/compiler/lower/codetree/codetree.api

    # Extension mechanism:
    #
    sext:   t::Fold_Fns( Y ) -> (t::Sext,                Y) -> Y;
    rext:   t::Fold_Fns( Y ) -> (t::Some_Type, t::Rext,  Y) -> Y;
    fext:   t::Fold_Fns( Y ) -> (t::Fty,       t::Fext,  Y) -> Y;
    ccext:  t::Fold_Fns( Y ) -> (t::Some_Type, t::Ccext, Y) -> Y;

)

: (weak) Codetree_Fold				# Codetree_Fold	is from   src/lib/compiler/lower/codetree/codetree-fold.api

{
    package t = t;

    fun fold
        { int_expression   => do_int_expression,
          float_expression => do_float_expression,
          bool_expression  => do_bool_expression,
          statement        => do_statement
        }
	= 
	{   fun statement (s, x)
		=
	        do_statement (s, x)
                where 
		    x =   case s
			       t::MOVE_INT (type, dst, e) => int_expression (e, x);
			       t::MOVE_BOOL (dst, e) => bool_expression (e, x);
			       t::MOVE_FLOAT (fty, dst, e) => float_expression (e, x);
			       t::COPY_INTS _  => x;
			       t::COPY_FLOATS _ => x;
			       t::JUMP (e, cf) => int_expression (e, x);
			       t::BCC (cc, l) => bool_expression (cc, x);
			       t::CALL { funct, defs, uses, ... } => 
				  lowcodes (uses, lowcodes (defs, int_expression (funct, x)));
			       t::RET _ => x;
			       t::FLOW_TO (s, _) => statement (s, x);
			       t::IF (cc, yes, no) => statement (no, statement (yes, bool_expression (cc, x)));
			       t::STORE (type, ea, d, r) => int_expression (d, int_expression (ea, x));
			       t::FSTORE (fty, ea, d, r) => float_expression (d, int_expression (ea, x));
			       t::REGION (s, ctrl) => statement (s, x);
			       t::SEQ s => statements (s, x);
			       t::DEFINE _ => x;
			       t::NOTE (s, an) => statement (s, x);
			       t::EXT s => 
				  sext { statement, int_expression, float_expression, bool_expression } (s, x);
			       t::PHI _ => x; 
			       t::ASSIGN(_, a, b) => int_expression (b, int_expression (a, x));
			       t::SOURCE => x; 
			       t::SINK => x; 
			       t::RTL _ => x;
			       t::LIVE ls => lowcodes (ls, x);
			       t::DEAD ks => lowcodes (ks, x);
                          esac;
	        end

           also
           fun statements (ss, x)
                =
                fold_right statement x ss

           also
           fun int_expression (e, x)
                = 
		do_int_expression (e, x)
                where
		    x =   case e
			    
			       t::REG _ => x;
			       t::LITERAL _ => x;
			       t::LABEL _ => x; 
			       t::LABEXP _ => x; 
			       t::CONST _ => x;
			       t::NEG (type, a) => int_expression (a, x);
			       t::ADD (type, a, b) => rexp2 (a, b, x);
			       t::SUB (type, a, b) => rexp2 (a, b, x);
			       t::MULS (type, a, b) => rexp2 (a, b, x);
			       t::DIVS (m, type, a, b) => rexp2 (a, b, x);
			       t::REMS (m, type, a, b) => rexp2 (a, b, x);
			       t::MULU (type, a, b) => rexp2 (a, b, x);
			       t::DIVU (type, a, b) => rexp2 (a, b, x);
			       t::REMU (type, a, b) => rexp2 (a, b, x);
			       t::NEGT (type, a) => int_expression (a, x);
			       t::ADDT (type, a, b) => rexp2 (a, b, x);
			       t::SUBT (type, a, b) => rexp2 (a, b, x);
			       t::MULT (type, a, b) => rexp2 (a, b, x);
			       t::DIVT (m, type, a, b) => rexp2 (a, b, x);
			       t::BITWISEAND (type, a, b) => rexp2 (a, b, x);
			       t::BITWISEOR (type, a, b) => rexp2 (a, b, x);
			       t::BITWISEXOR (type, a, b) => rexp2 (a, b, x);
			       t::BITWISEEQV (type, a, b) => rexp2 (a, b, x);
			       t::BITWISENOT (type, a) => int_expression (a, x);
			       t::RIGHTSHIFT (type, a, b) => rexp2 (a, b, x);
			       t::RIGHTSHIFTU (type, a, b) => rexp2 (a, b, x);
			       t::LEFTSHIFT (type, a, b) => rexp2 (a, b, x);
			       t::SIGNEXTEND (t, t', e) => int_expression (e, x);
			       t::ZEROEXTEND (t, t', e) => int_expression (e, x);
			       t::CONVERTFLOATTOINT (type, mode, fty, e) => float_expression (e, x);
			       t::COND (type, cc, yes, no) => int_expression (no, int_expression (yes, bool_expression (cc, x)));
			       t::LOAD (type, ea, r) => int_expression (ea, x);
			       t::PRED (e, ctrl) => int_expression (e, x);
			       t::LET (s, e) => int_expression (e, statement (s, x));
			       t::REXT (t, e) => 
				   rext { statement, int_expression, float_expression, bool_expression } (t, e, x);
			       t::MARK (e, an) => int_expression (e, x);
			       t::OP (type, oper, es) => rexps (es, x);
			       t::ARG _ => x;
			       t::PARAM _ => x;
			       t::BITSLICE(_, _, e) => int_expression (e, x);
			       t::ATATAT(type, k, e) => int_expression (e, x);
			       t::QQQ => x;
                          esac;
                end

           also
           fun rexp2 (a, b, x)
                =
                int_expression (b, int_expression (a, x))

           also
           fun rexps (es, x)
                =
                fold_right int_expression x es

           also
           fun float_expression (e, x)
                =
		do_float_expression (e, x)
                where
		    x = case e
			     t::FREG _ => x;
			     t::FLOAD (fty, e, r) => int_expression (e, x);
			     t::FADD (fty, a, b) => fexp2 (a, b, x);
			     t::FSUB (fty, a, b) => fexp2 (a, b, x);
			     t::FMUL (fty, a, b) => fexp2 (a, b, x);
			     t::FDIV (fty, a, b) => fexp2 (a, b, x);
			     t::FABS (fty, e) => float_expression (e, x);
			     t::FNEG (fty, e) => float_expression (e, x);
			     t::FSQRT (fty, e) => float_expression (e, x);
			     t::COPY_FLOAT_SIGN (fty, a, b) => fexp2 (a, b, x);
			     t::FCOND (fty, c, a, b) => fexp2 (a, b, bool_expression (c, x));
			     t::CVTI2F (fty, type, e) => int_expression (e, x);
			     t::CVTF2F (fty, fty', e) => float_expression (e, x);
			     t::FPRED (e, ctrl) => float_expression (e, x);
			     t::FEXT (t, e) => 
				 fext { statement, int_expression, float_expression, bool_expression } (t, e, x);
			     t::FMARK (e, an) => float_expression (e, x);
                        esac;
                end

           also
           fun fexp2 (a, b, x)
                =
                float_expression (b, float_expression (a, x))

           also
           fun fexps (es, x)
                =
                fold_right float_expression x es

           also
           fun bool_expression (e, x)
                =
		do_bool_expression (e, x)
                where
		    x = case e
			     t::CC _ => x;
			     t::FCC _ => x; 
			     t::TRUE => x;
			     t::FALSE => x;
			     t::NOT e => bool_expression (e, x);
			     t::AND (a, b) => bool_expression2 (a, b, x);
			     t::OR (a, b) => bool_expression2 (a, b, x);
			     t::XOR (a, b) => bool_expression2 (a, b, x);
			     t::EQV (a, b) => bool_expression2 (a, b, x);
			     t::CMP (type, cond, a, b) => rexp2 (a, b, x);
			     t::FCMP (type, fcond, a, b) => fexp2 (a, b, x);
			     t::CCMARK (e, an) => bool_expression (e, x);
			     t::CCEXT (t, e) => 
			       ccext { statement, int_expression, float_expression, bool_expression } (t, e, x);
                        esac;
                end

           also
           fun bool_expression2 (a, b, x)
                =
                bool_expression (b, bool_expression (a, x))

           also
           fun lowcodes (m, x)
                =
                fold_right lowcode x m

           also
           fun lowcode (m, x)
		=
		{   x =   case m
			       t::BOOL_EXPRESSION e =>   bool_expression (e, x);
			      t::INT_EXPRESSION e =>   int_expression  (e, x);
			      t::FLOAT_EXPRESSION e =>   float_expression  (e, x); esac;

                    x;
                };


            { int_expression, float_expression, bool_expression, statement };
        };

};	#  codetree_fold 

