## oh7-file.api
## (C) 2001 Lucent Technologies, Bell Labs
## author: Matthias Blume (blume@research.bell-labs.com

# Compiled by:
#     src/lib/compiler/execution/execute.make6



# This revised version of api OH7_FILE is now machine-independent.
# Moreover, it deals with the file format only and does not know how to
# create new o7file contents (aka "compile") or how to interpret the
# pickles.  As a result, it does not statically depend on the compiler.
# (Eventually we might want to support a light-weight o7file loader.)



api Oh7_File {

    Oh7_File_Contents;

    exception FORMAT_ERROR;

    Picklehash = picklehash::Picklehash;



    # When the compiler is done with a sourcefile,
    # it reports the sizes of the various principal
    # compile outputs using this type:

    Byte_Sizes
        =
        { dictionary:      Int,		# symbol table of externally visible functions, types &tc.
          inlinable: Int,		# machine-independent code for exported inlinable functions, in A-Normal form.
          data:      Int,		# Literals.
          code:      Int		# The compiled code proper.
        };



    # A pickle is a bytestring representation of some
    # in-memory datastructure such as a symbol table
    # or compiled code segments.
    #
    # We pervasively use hashes of these pickles as
    # compact and convenient names for them.

    Pickle
        =
        { picklehash: Picklehash,
          pickle:     unt8_vector::Vector
        };

    hash_of_symbol_table_pickle:  Oh7_File_Contents -> Picklehash;
    hash_of_pickled_exports:      Oh7_File_Contents -> Null_Or( Picklehash );
    hash_of_pickled_inlinables:   Oh7_File_Contents -> Picklehash;

    picklehash_list:              Oh7_File_Contents -> List( Picklehash );
    pickle_of_symbol_table:       Oh7_File_Contents -> Pickle;
    pickle_of_inlinables:         Oh7_File_Contents -> Pickle;

    version_of:                   Oh7_File_Contents -> String;



    #  Calculate the size in bytes occupied by some o7file contents: 
    size:
        { contents:  Oh7_File_Contents,
          no_pickle: Bool
        }
        ->
        Int;



    #  Create the abstract o7file contents 
    create:
        { imports:           List( import_tree::Import ),
	  export_picklehash: Null_Or( Picklehash ),
	  picklehash_list:   List( Picklehash ),
	  symbol_table:      Pickle,
	  inlinables:        Pickle,
	  version:           String,
	  code_segments:     code_segments::Code_Segments
        }
        ->
        Oh7_File_Contents;



    # Read just the version: 
    read_version:  binary_io::Input_Stream -> String;



    # Read o7file contents from an IO stream: 
    #
    read:
        { architecture_name:  String,
          version:            List( Int ),
          stream:             binary_io::Input_Stream
        }
	->
        { contents:  Oh7_File_Contents,
          byte_sizes: Byte_Sizes
        };



    # Write o7file contents to an IO stream: 
    write:
        { architecture_name:   String,
          version:             List( Int ),
	  stream:              binary_io::Output_Stream,
	  oh7_file_contents:   Oh7_File_Contents,
          no_pickle:           Bool
        }
	->
        Byte_Sizes;



    # Given a linking dictionary, link in
    # the code chunk contained in some given
    # o7file.
    #
    # The result is the delta dictionary
    # containing the namings (if any)
    # resulting from this link operation.

    exec:
        ( Oh7_File_Contents,
          linking_table::Dictionary,
          (Exception -> Exception)
        )
        ->
        linking_table::Dictionary;
};
