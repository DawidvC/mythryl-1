## runtime-internals.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6

# This package (lib7::internals) is a gathering place for internal
# features that need to be exposed outside the boot directory.

package runtime_internals: (weak)  Runtime_Internals {				# Runtime_Internals	is from   src/lib/std/src/nj/runtime-internals.api

    package at                 =   at;			# at			is from   src/lib/std/src/nj/at.pkg
    package profiling_control  =   profiling_control;	# profiling_control	is from   src/lib/std/src/nj/prof-control.pkg
    package garbage_collection =   garbage_collection;	# garbage_collection	is from   src/lib/std/src/nj/garbage-collection.pkg

    print_hook = print_hook::print_hook;

    initialize_signal_table  =   internal_signals::initialize_signal_table;
    clear_signal_table =   internal_signals::clear_signal_table;
    reset_signal_table =   internal_signals::reset_signal_table;

    reset_timers = internal_timer::reset_timers;

    package tdp {	# tracing, debugging and profiling

	Plugin = core::Tdp_Plugin;
	Monitor = { name: String, monitor: (Bool, (Void -> Void)) -> Void };

	active_plugins = core::tdp_active_plugins;

	active_monitors = REF ([] : List( Monitor ));

	fun reserve n =   core::tdp_reserve n;
	fun reset ()  =   core::tdp_reset ();

	idk_entry_point   =   core::tdp_idk_entry_point;
	idk_tail_call     =   core::tdp_idk_tail_call;
	idk_non_tail_call =   core::tdp_idk_non_tail_call;

	mode = REF FALSE;

	fun with_monitors report_final_exn work
	    =
	    loop *active_monitors
	    where
		fun loop []
			=>
			work ();

		    loop ( { name, monitor } ! ms)
			=>
			monitor (report_final_exn, fn () =  loop ms);
		end;
	    end;
    };
};


## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
