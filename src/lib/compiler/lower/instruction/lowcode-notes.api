## lowcode-notes.api

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



#
# These are some basic annotations understood by the lowcode system.
# The lowcode client can create its own annotations and propagate them
# to lowcode.  Client-defined annotations are ignored by lowcode. 
#
# -- Allen Leung
# 
# TODO: There should be comments to say that the annotations are block
# or instruction annotations. -- Lal.
#
# See also:
#
#     MLRISC Annotations
#     Allen Leung, Lal George
#     circa 1999, 14p
#     http://www.smlnj.org//compiler-notes/annotations.ps



###             "If the programmer can simulate a construct
###              faster than a compiler can implement the
###              construct itself, then the compiler writer
###              has blown it badly."
###                                    -- Guy Steele



api Lowcode_Notes {

    package c:  Cells_Basis		# Cells_Basis	is from   src/lib/compiler/lower/instruction/cells-basis.api
            =   cells_basis;


    # The branch probability of conditional branches. 
    # The client can attach this with conditional branches.
    # nnThis has no effect otherwise. 
    #
    # Currently, the annotation is recognized by the static branch prediction
    # mondule. 
    #
    exception BRANCHPROB  probability::Probability;
    branch_prob:  note::Property(  probability::Probability );

    # The execution frequency of a basic block 
    # You can attach this at a basic block.
    #
    exception EXECUTIONFREQ  Int;
    execution_freq:  note::Property( Int );

    # No effect at all; this just
    # allows you to insert comments:
    #
    comment:  note::Property( String );

    # Instructions in the block
    # should not be reordered:
    #
    noreorder:  note::Property(  Void );


    # Control dependence definition and use.
    #
    # To use these, the client should generate
    # control dependence virtual registers via cells::new_cell cells::CTRL
    # and attach these annotations to instructions and basic blocks.
    #
    # These annotations are currently recognized by the SSA optimization
    # modules.
    #
    exception CONTROL_DEP_DEF  c::Cell;
    exception CONTROL_DEP_USE  c::Cell;

    ctrl_def:  note::Property(  c::Cell );
    ctrl_use:  note::Property(  c::Cell );


    # Attach this annotation to assemblers
    # for pretty printing client defined
    # cell information:
    #
    print_cellinfo:  note::Property (c::Cell -> String);


    # Does a compilation unit has GC information? 
    #
    gc_info:  note::Property(  Void );


    # Disable all optimizations in the cluster
    #
    no_optimization:  note::Property(  Void );


    # Mark basic block that is used for calling the GC
    #
    callgc:  note::Property(  Void );
    gcsafepoint:  note::Property(  String );


    # Insert block names
    #
    exception BLOCKNAMES  note::Notes;
    #
    block_names:  note::Property(  note::Notes );


    # This annotation inserts an empty basic block
    #
    exception EMPTYBLOCK; 
    empty_block:  note::Property(  Void );


    # Enter information for a register.
    #
    exception MARKREG  c::Cell -> Void;
    mark_reg:  note::Property (c::Cell -> Void);


    # Disable branch chaining optimization on a jump
    #
    no_branch_chaining:  note::Property(  Void );


    # Code has reference to a virtual (dedicated) frame pointer.
    #
    uses_virtual_frame_pointer:  note::Property(  Void );


    # Define return arguments of a call (hack for x86)
    #
    return_arg:  note::Property(  c::Cell );
};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
