## lowcode-notes.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


# These are some basic annotations
# understood by the lowcode system:
#
# -- Allen Leung


package lowcode_notes: (weak)  Lowcode_Notes {		# Lowcode_Notes	is from   src/lib/compiler/lower/instruction/lowcode-notes.api

    package a= note;					# note		is from   src/lib/src/note.pkg
    package c= cells_basis;				# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    # The branch probability of conditional
    # branches  in percentage
    #
    exception BRANCHPROB  probability::Probability;

    branch_prob
        =
        a::new'
          { create    => BRANCHPROB, 
	    get       => fn BRANCHPROB b => b;  e => raise exception e; end ,
	    to_string => fn p = "branch(" + probability::to_string p + ")"
          };

    # The execution frequency of a basic block:
    #
    exception EXECUTIONFREQ  Int;

    execution_freq
        =
        a::new'
          { create    => EXECUTIONFREQ,
	    get       => fn EXECUTIONFREQ x => x;  e => raise exception e; end ,
	    to_string => fn r =  "freq(" + int::to_string r + ")"
          };

    # No effect at all; just allows
    # you to insert comments:
    #
    comment = a::new (THE (fn s = s));

    # Instructions in the block
    # should not be reordered:
    #
    noreorder = a::new (NULL:  Null_Or( Void -> String ) );

    fun listify f
	=
        g
        where
	    fun g [] => "";
	        g [x] => f x;
	        g (x ! xs) => f x + " " + g xs;
	    end;
	end;

    # Control dependence use:
    #
    exception CONTROL_DEP_DEF  c::Cell; 
    exception CONTROL_DEP_USE  c::Cell;

    ctrl_use = a::new'{ create=>CONTROL_DEP_USE, 
			get=>fn CONTROL_DEP_USE x => x;  e => raise exception e; end, 
			to_string=>c::to_string
                      };

    ctrl_def = a::new'{ create=>CONTROL_DEP_DEF, 
			get=>fn CONTROL_DEP_DEF x => x;  e => raise exception e; end, 
			to_string=>c::to_string
                      };

    no_optimization = a::new (THE (fn () = "NO_OPTIMIZATION"));
    callgc = a::new (THE (fn () = "CALLGC"));
    gcsafepoint = a::new (THE (fn s = "GCSAFEPOINT: " + s));
    gc_info = a::new (THE (fn () = "GC_INFO"));

    exception BLOCKNAMES  a::Notes;

    block_names
        =
        a::new'{ create=>BLOCKNAMES,
		 get=>fn BLOCKNAMES n => n;  e => raise exception e; end,
		 to_string=>fn _ = "BLOCK_NAMES"
               };

    exception EMPTYBLOCK; 

    empty_block
        =
        a::new' { create=>fn () = EMPTYBLOCK,
		  get=>fn EMPTYBLOCK => ();  e => raise exception e; end,
		  to_string=>fn () = "EMPTY_BLOCK"
                };

    exception MARKREG  c::Cell -> Void;

    mark_reg
        =
        a::new' { to_string=>fn _ = "MARK_REG",
		  create=>MARKREG,
		  get=>fn MARKREG f => f;  e => raise exception e; end 
		};

    print_cellinfo
        =
        a::new (THE (fn _ = "PRINT_CELLINFO"))
	    : a::Property (c::Cell -> String);


    no_branch_chaining
        =
        a::new (THE (fn () = "NO_BRANCH_CHAINING"));


    uses_virtual_frame_pointer
        =
        a::new (THE (fn () = "HAS_VIRTUAL_FRAME_POINTER"));


    return_arg
        =
        a::new (THE (c::to_string));

};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
