#
# This module is responsible for generating new instructions from 
# Codetree and inserting them into the SSA graph.  This is useful for
# patching in new instructions as the SSA graph is being transformed.
#
# Special lowcode Magic (tm) for invoking the instruction selection 
# module and ssa-ifying the output code are all hidden here.
# 
# -- Allen Leung (leunga@cs.nyu.edu)



###        "One is always a long way from solving a problem
###         until one actually has the answer."
###
###                            -- Stephen Hawking



api SSA_INSTRGEN =
api

   package ssa:  SSA
   package rtl:  Codetree_Rtl
   package translate_codetree_to_target_machine:  Translate_Codetree_To_Target_Machine
      sharing SSA::translate_codetree_to_target_machine = translate_codetree_to_target_machine
      sharing SSA::RTL = RTL

    exception Illegal

   #  Convert internal RTL into a codetree term 
   my translate:  SSA::ssa ->
                   { rtl: RTL::rtl, defs: List( SSA::value ), uses: List( SSA::value ) } ->
                      translate_codetree_to_target_machine::T.statement
   #  Convert an codetree term into a list of instructions 
   my instrGen:   SSA::ssa -> translate_codetree_to_target_machine::T.statement -> List( SSA::I.instruction )

   #  Insert instructions into the SSA graph 

   #  Replace the instruction at id 
   my replace:  SSA::ssa -> { id: SSA::ssa_id, codetree: translate_codetree_to_target_machine::T.statement } -> Bool

end
