## hash-cons.api

# Compiled by:
#     src/lib/hash-consing/hash-cons-lib.make6



api Hash_Cons {

    # hash table for consing 
    Table( X );
    new:  { eq:  (X, X) -> Bool } -> Table( X );
    clear:  Table( X ) -> Void;

    Chunk( X ) = { nd:  X, tag:  Unt, hash:  Unt };

    node:  Chunk( X ) -> X;
    tag:   Chunk( X ) -> Unt;

    same:  ((Chunk( X ), Chunk( X ))) -> Bool;
    compare:  ((Chunk( X ), Chunk( X ))) -> Order;

    cons0:  Table( X ) -> ((Unt, X)) -> Chunk( X );
    cons1:  Table( X ) -> ((Unt, (Chunk( Y ) -> X)))
	  -> Chunk( Y ) -> Chunk( X );
    cons2:  Table( X ) -> ((Unt, ((Chunk( Y ), Chunk( Z )) -> X)))
	  -> (Chunk( Y ), Chunk( Z )) -> Chunk( X );
    cons3:  Table( X ) -> ((Unt, ((Chunk( Y ), Chunk( Z ), Chunk( W )) -> X)))
	  -> (Chunk( Y ), Chunk( Z ), Chunk( W )) -> Chunk( X );
    cons4:  Table( X ) -> ((Unt, ((Chunk( Y ), Chunk( Z ), Chunk( W ), Chunk( V )) -> X)))
	  -> (Chunk( Y ), Chunk( Z ), Chunk( W ), Chunk( V )) -> Chunk( X );
    cons5:  Table( X ) -> ((Unt, ((Chunk( Y ), Chunk( Z ), Chunk( W ), Chunk( V ), Chunk( U )) -> X)))
	  -> (Chunk( Y ), Chunk( Z ), Chunk( W ), Chunk( V ), Chunk( U )) -> Chunk( X );

    cons_list:  Table( X ) -> ((Unt, (List( Chunk( Y ) ) -> X))) -> List( Chunk( Y ) ) -> Chunk( X );



    #  hash consing support for record types 

    cons_r1:  Table( X ) -> ((Unt, (Chunk( Y ) -> X), (R -> Chunk( Y ))))
	  -> R -> Chunk( X );

    cons_r2:  Table( X )
	  -> ((Unt, ((Chunk( Y ), Chunk( Z )) -> X), (R -> (Chunk( Y ), Chunk( Z )))))
	    -> R -> Chunk( X );

    cons_r3:  Table( X )
	  -> ((Unt, ((Chunk( Y ), Chunk( Z ), Chunk( W )) -> X)
	   , (R -> (Chunk( Y ), Chunk( Z ), Chunk( W )))))
	    -> R -> Chunk( X );

    cons_r4:  Table( X )
	  -> ((Unt, ((Chunk( Y ), Chunk( Z ), Chunk( W ), Chunk( V )) -> X)
	   , (R -> (Chunk( Y ), Chunk( Z ), Chunk( W ), Chunk( V )))))
	    -> R -> Chunk( X );

    cons_r5:  Table( X )
	  -> ((Unt, ((Chunk( Y ), Chunk( Z ), Chunk( W ), Chunk( V ), Chunk( U )) -> X)
	   , (R -> (Chunk( Y ), Chunk( Z ), Chunk( W ), Chunk( V ), Chunk( U )))))
	    -> R -> Chunk( X );

};



## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
