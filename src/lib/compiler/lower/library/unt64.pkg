#
# 64-bit word enum.
# unt64::word is implemented as unt32::word * unt32::word
# A constant of this type can be specified as a pair of 32-bit words.
# Also pattern matching can also be applied in the same manner. 
#
# -- Allen Leung


###           "Put it before them briefly so that they will read it,
###            clearly so they will appreciate it,
###            picturesquely so they will remember it, and above all,
###            accurately so they will be guided by its light."
###
###                                      -- Joseph Pulitzer


package unt64:  Unt {

   package w = unt32

   type word = w::word * w::word #  high, low 

   wordSize = 64

   fun isNeg w = W.>>(w, 0w31) = 0w1 #  test the sign bit 

   fun toLargeWord (x, y) = y #  strip high order bits 
   fun toLargeWordX (x, y) = y #  strip high order bits 
   fun fromLargeWord w = (0w0:  w::word, w)

   fun toLargeInt (x: w::word, y) = 
        if x != 0w0 or isNeg y then raise exception OVERFLOW
        else w::toLargeInt y

   fun toLargeIntX (x, y) = 
         if x == 0w0 then 
           if isNeg y then raise exception OVERFLOW else w::toLargeInt y
         else if (w::bitwise_not x) == 0w0 then
           if isNeg y then w::toLargeIntX y else raise exception OVERFLOW
         else raise exception OVERFLOW    

   fun from_large_int i = (if i >= 0 then 0w0 else w::bitwise_not 0w0, w::from_large_int i)

   fun toInt (x: w::word, y) = 
        if x != 0w0 or isNeg y then raise exception OVERFLOW else w::toInt y

   fun toIntX (x, y) = 
         if x == 0w0 then
            if isNeg y then raise exception OVERFLOW else w::toInt y
         else if (w::bitwise_not x) == 0w0 then
            if isNeg y then w::toIntX y else raise exception OVERFLOW
         else raise exception OVERFLOW

   fun from_int i = if i >= 0 then (0w0: w::word, w::from_int i)
                   else (w::bitwise_not 0w0, w::from_int i)

   fun bitwise_or ((a, b), (c, d)) = (w::bitwise_or  (a, c), w::bitwise_or  (b, d))
   fun bitwise_xor ((a, b), (c, d)) = (w::bitwise_xor (a, c), w::bitwise_xor (b, d))
   fun bitwise_and ((a, b), (c, d)) = (w::bitwise_and (a, c), w::bitwise_and (b, d))
   fun bitwise_not (a, b) = (w::bitwise_not a, w::bitwise_not b)

   fun plus ((a, b), (c, d)) = 
   let y = W.+(b, d)
       x = W.+(a, c)
       x = if y < b then W.+(x, 0w1) else x #  Carry 
   in  (x, y) end

   fun minus ((a, b), (c, d)) =
   let x = W.-(a, c)
       y = W.-(b, d)
       x = if b < d then W.-(x, 0w1) else x #  Borrow 
   in  (x, y) end

   fun mult ((a, b), (c, d)) =
   let /* multiply 32x32 -> 64.
        * Split them into two pairs of 16 bit words in order to deal
        * with carries in a portable manner.  This is really annoying.
        */
       fun multiply (u, v) = 
       let a = W.>>(u, 0w16)
           b = w::bitwise_and (u, 0wxffff)
           c = W.>>(v, 0w16)
           d = w::bitwise_and (v, 0wxffff)
           ac = a*c
           bc = b*c
           ad = a*d
           bd = b*d
           bc_hi = W.>>(bc, 0w16)
           bc_lo = W.<<(bc, 0w16)
           ad_hi = W.>>(ad, 0w16)
           ad_lo = W.<<(ad, 0w16)
           AC    = (ac, 0w0: w::word)
           BC    = (bc_hi, bc_lo)
           AD    = (ad_hi, ad_lo)
           BD    = (0w0: w::word, bd)
       in  plus (AC, plus (BC, plus (AD, BD))) end
       fun shift32 (a, b)  = (b, 0w0)
       ad = multiply (a, d)
       bc = multiply (b, c)
       bd = multiply (b, d)
   in  plus (plus (shift32 (ad), shift32 (bc)), bd) end

   fun gt ((a, b):word, (c, d):word) = a > c or a=c and b > d
   fun ge ((a, b):word, (c, d):word) = a > c or a=c and b >= d
   fun lt ((a, b):word, (c, d):word) = a < b or a=c and b < d
   fun le ((a, b):word, (c, d):word) = a < b or a=c and b <= d

   fun compare ((a, b):word, (c, d):word) =
       if a < c then LESS
       else if a > c then GREATER
       else if b < d then LESS
       else if b > d then GREATER
       else EQUAL

   fun sll ((a, b), c) =
       if c >= 0w32 then  
            let x = W.<<(b, c - 0w32)
            in  (x, 0w0) end
       else let x = W.<<(a, c)
                y = W.<<(b, c)
                z = W.>>(b, 0w32-c)
            in  (w::bitwise_or (x, z), y) end

   fun srl ((a, b), c) = 
       if c >= 0w32 then
            let y = W.>>(a, c - 0w32)
            in  (0w0, y) end
       else let x = W.>>(a, c)
                y = W.>>(b, c)
                z = W.<<(w::bitwise_and (a, W.<<(0w1, c)-0w1), 0w32-c)
            in  (x, w::bitwise_or (y, z)) end

   fun sra ((a, b), c) = 
       if c >= 0w32 then
            let y = W.>>>(a, c - 0w32)
                x = if isNeg a then w::bitwise_not 0w0 else 0w0
            in  (x, y) end
       else let x = W.>>>(a, c)
                y = W.>>(b, c)
                z = W.<<(w::bitwise_and (a, W.<<(0w1, c)-0w1), 0w32-c)
            in  (x, w::bitwise_or (y, z)) end

   fun min (w1, w2) = if lt (w1, w2) then w1 else w2
   fun max (w1, w2) = if gt (w1, w2) then w1 else w2

   fun divide ((a, b):word, (0w0, 0w0):word) = raise exception DIVIDE_BY_ZERO 
     | divide((0w0, b), (0w0, d)) = (0w0: w::word, b div d)
     | divide((a, b), (c, d)) = raise exception MATCH
      #  okay, not yet supported, I'm lazy 

   fun padZero (b, 0) = b
     | padZero (b, n) = padZero("0"$b, n - 1)

   fun hex (0w0, y) = w::to_string y
     | hex (x, y) =
       let a = w::to_string x
           b = w::to_string y
       in  a$padZero (b, 8-size b) end

   fun bin (0w0, y) = w::fmt string_conversion::BIN y
     | bin (x, y) = 
       let a = w::fmt string_conversion::BIN x
           b = w::fmt string_conversion::BIN y
       in  a$padZero (b, 32-size b) end

   fun fmt string_conversion::BIN = bin
     | fmt string_conversion::DEC = raise exception MATCH
     | fmt string_conversion::HEX = hex
     | fmt string_conversion::OCT = raise exception MATCH

   to_string = hex

   scan = fn _ => raise exception MATCH
   fun from_string s = 
       case w::from_string s of
         THE w => THE (0w0: w::word, w)
       | NULL => NULL

   my op <   = lt
   my op <=  = le
   my op >   = gt
   my op >=  = ge
   my op *   = mult
   my op +   = plus
   my op -   = minus
   my op <<  = sll
   my op >>  = srl
   my op >>> = sra
   my op div = divide
   fun op mod (a: word, b: word):word = a-(a div b)*b

};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
