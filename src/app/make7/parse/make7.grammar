## make7.grammar
## (C) 1999, 2001 Lucent Technologies, Bell Laboratories
## Author: Matthias Blume (blume@research.bell-labs.com)



# Mythryl-Yacc grammar for make7 description files



package s = make7grammar_actions;

%%

%term EOF
    | FILE_STANDARD of String
    | FILE_NATIVE   of String
    | MAKE7_ID of String
    | ML_ID of String
    | NUMBER of Int
    | GROUP | LIBRARY | IS
    | LPAREN | RPAREN | COLON
    | IF_T | ELIF_T | ELSE_T | ENDIF
    | ERRORX of String
    | PACKAGE_T | PKG_T | API_T | GENERIC_T | GENERIC_API_T
    | DEFINED
    | ADDSYM  of make7grammar_actions::Addsym
    | MULSYM  of make7grammar_actions::Mulsym
    | EQSYM   of make7grammar_actions::Eqsym
    | INEQSYM of make7grammar_actions::Ineqsym
    | TILDE
    | AND_T | OR_T | NOT_T
    | STAR    | DASH   | SOURCE

%nonterm description    of s::Library
    | group             of s::Library
    | gprivspec         of s::Privilege_Spec
    | lprivspec         of s::Privilege_Spec
    | version           of s::Cm_Version
    | wrapspec          of s::Privilege_Spec -> s::Privilege_Spec
    | mandatory_exports of s::Exports
    | optional_exports  of s::Exports
    | exports           of s::Exports
    | export            of s::Exports
    | guarded_exports   of (s::Exports, s::Exports)
    | else_exports      of s::Exports
    | members           of s::Members
    | member            of s::Members
    | guarded_members   of (s::Members, s::Members)
    | else_members      of s::Members
    | aexp              of s::Aexp
    | boolexp           of s::Expression
    | exp               of s::Expression
    | ml_symbol         of s::Ml_Symbol
    | ml_symbolset      of s::Exports
    | pathname          of { name: String, make_path: Void -> anchor_dictionary::Basename }
    | symbol            of s::Cm_Symbol
    | word              of s::Cm_Symbol
    | ilk               of s::Cm_Ilk
    | optilk            of Null_Or s::Cm_Ilk
    | toolopts          of List s::Tool_Option
    | ptoolopts         of List s::Tool_Option
    | opttoolopts       of Null_Or List s::Tool_Option
    | srcfile           of anchor_dictionary::File
    | srcfiles          of Null_Or anchor_dictionary::File
    | filecat           of (Null_Or anchor_dictionary::File, s::Plaint_Sink) -> s::Exports

%pos Int
%verbose

%arg ( { library_path, context, obsolete, error, make_member, this_lib, make7_state, primordial_make7file })
     :
      { library_path: anchor_dictionary::File,
	context:     s::Context,
	obsolete:    (Source_Position, Source_Position) -> Void,
	error:       (Source_Position, Source_Position) -> String -> Void,

	make_member : ( { name: String,
                        make_path: Void -> anchor_dictionary::Basename
                      },
                      Source_Position,
                      Source_Position,
                      Null_Or s::Cm_Ilk,
                      Null_Or List s::Tool_Option
                    )
	         -> s::Members,

	this_lib:      Null_Or anchor_dictionary::File,
	make7_state:  make7_state::Make7_State,
	primordial_make7file: s::Library
      }

%start description

%eop EOF
%noshift EOF

%name Cm

%keyword GROUP LIBRARY IS IF_T ELIF_T ELSE_T ENDIF DEFINED
  PACKAGE_T PKG_T API_T GENERIC_T GENERIC_API_T

%prefer LPAREN

%left OR_T
%left AND_T
%nonassoc INEQSYM
%nonassoc EQSYM
%left ADDSYM
%left MULSYM
%left NOT_T TILDE

%left DASH
%left STAR

%%

description
    : group				        (group)

group
    : gprivspec
      LPAREN
          srcfile
      RPAREN
      optional_exports
      IS
      members

                                                (   {   obsolete (   lparenleft,
								     rparenright
								 );

							s::make_virtual_library {
							    path        => library_path,
							    privileges  => gprivspec,
							    exports     => optional_exports,
							    members,
							    make7_state,
							    this_lib,
							    primordial_make7file
							};
                                                    }  
                                                ) 
    | gprivspec optional_exports IS members
                                                (   s::make_virtual_library {
							path         => library_path,
							privileges   => gprivspec,
							exports      => optional_exports,
							members,
							make7_state,
							this_lib,
							primordial_make7file
                                                    }
                                                )

    | lprivspec
      LPAREN
          version
      RPAREN
      mandatory_exports
      IS
      members
                                                (   s::make_real_library {
							path        => library_path,
							privileges  => lprivspec,
							exports     => mandatory_exports,
							version     => THE version,
							members,
							make7_state,
							primordial_make7file
                                                    }
                                                )
    | lprivspec mandatory_exports IS members
                                                (    s::make_real_library {
						 	path        => library_path,
							privileges  => lprivspec,
							exports     => mandatory_exports,
							version     => NULL,
							members,
							make7_state,
							primordial_make7file
                                                    }
                                                )

version
    : FILE_STANDARD                             (   s::cm_version
						       (   file_standard,
						           error (   file_standardleft,
							             file_standardright
                                                )      )   )

wrapspec
    : /* empty */                               (fn p =  p)
    | wrapspec word                             (fn p =  s::wrap (   wrapspec p,
                                                                    word,
							            error (wordleft, wordright)
                                                )               )

gprivspec
    : GROUP                                     (s::initial_privilege_spec)
    | word gprivspec                            (s::require (   gprivspec,
                                                               word,
							       error (wordleft, wordright)
                                                )          )

lprivspec
    : LIBRARY                                   (s::initial_privilege_spec)
    | word lprivspec                            (s::require (   lprivspec,
                                                               word,
							       error (wordleft, wordright)
                                                )          )
    | LPAREN wrapspec RPAREN lprivspec          (wrapspec lprivspec)

mandatory_exports
    : export				        (export)
    | mandatory_exports export	                (s::union (mandatory_exports, export))

optional_exports
    : /* empty */                               (s::default_library_exports)
    | mandatory_exports                         (mandatory_exports)

exports
    : /* empty */                               (s::empty_exports)
    | exports export                            (s::union (exports, export))

export
    : ml_symbolset				(ml_symbolset)
    | IF_T exp guarded_exports			(s::guarded_exports
						  (exp, guarded_exports,
						   error (expleft, expright)))
    | ERRORX                                     (s::error_export
						   (fn () =
						    error (errorxleft, errorxright)
						          errorx))

filecat
    : GROUP                                     (s::export_library)
    | SOURCE                                    (s::export_sourcefile)


ml_symbolset
    : ml_symbol                                 (s::export
						     (ml_symbol,
						      error (ml_symbolleft,
							     ml_symbolright)))
    | LPAREN exports RPAREN                     (exports)
    | ml_symbolset STAR ml_symbolset            (s::intersection
					             (ml_symbolset1,
					              ml_symbolset2))
    | ml_symbolset DASH ml_symbolset            (s::difference
					            (ml_symbolset1,
					             ml_symbolset2))
    | filecat LPAREN srcfiles RPAREN            (filecat
					            (srcfiles,
					             error (srcfilesleft,
						            srcfilesright)))
    | LIBRARY LPAREN pathname opttoolopts RPAREN
				                (s::export_freezefile
						    (anchor_dictionary::file
							(pathname.make_path ()),
						     error (pathnameleft,
							    pathnameright),
						     { hasoptions =>
							  not_null opttoolopts,
						       elab => fn () =
							  make_member
							      (pathname,
							       pathnameleft,
							       pathnameright,
							       NULL,
							       opttoolopts),
						       this_lib }))

guarded_exports
    : exports else_exports	                ((exports, else_exports))

else_exports
    : ENDIF				        (s::empty_exports)
    | ELSE_T exports ENDIF		        (exports)
    | ELIF_T exp guarded_exports		        (s::guarded_exports
						    (exp, guarded_exports,
						     error (expleft, expright)))

members
    : /* empty */				(s::empty_members)
    | member members			        (s::members (member, members))

toolopts
    : /* empty */                               ([])
    | pathname toolopts                         (s::string pathname ! toolopts)
    | pathname COLON ptoolopts toolopts         (s::subopts
						     { name => pathname.name,
						       opts => ptoolopts
                                                     }
						     ! toolopts
                                                )
    | pathname COLON pathname toolopts          (s::subopts
						     { name => pathname1.name,
						       opts => [s::string
								   pathname2] }
						 ! toolopts)

ptoolopts
    : LPAREN toolopts RPAREN                    (toolopts)

opttoolopts
    : /* empty */                               (NULL)
    | ptoolopts                                 (THE ptoolopts)

optilk
    : /* empty */                               (NULL)
    | COLON ilk                               (THE ilk)

member
    : pathname optilk opttoolopts		(make_member (pathname,
							   pathnameleft,
							   pathnameright,
							   optilk,
							   opttoolopts))
    | IF_T exp guarded_members			(s::guarded_members
					        (exp, guarded_members,
					           error (expleft, expright)))
    | ERRORX                                     (s::error_member
					           (fn () =
					             error (errorxleft, errorxright)
						        errorx))

ilk
     : word                                     (s::ilk word)

guarded_members
     : members else_members	                ((members, else_members))

else_members
     : ENDIF				        (s::empty_members)
     | ELSE_T members ENDIF		        (members)
     | ELIF_T exp guarded_members	        (s::guarded_members
					           (exp, guarded_members,
					            error (expleft, expright)))

word
    : FILE_STANDARD                             (s::cm_symbol file_standard)

symbol
    : MAKE7_ID                                  (s::cm_symbol make7_id)

exp : boolexp					(boolexp)

aexp
    : NUMBER				        (s::number number)
    | symbol					(s::variable make7_state symbol)
    | LPAREN aexp RPAREN		        (aexp)
    | aexp ADDSYM aexp                          (s::add (aexp1, addsym, aexp2))
    | aexp MULSYM aexp                          (s::mul (aexp1, mulsym, aexp2))
    | TILDE aexp		                (s::negate aexp)
    | ADDSYM aexp %prec TILDE                   (   {   obsolete (addsymleft,
							          addsymright);
						        s::sign (addsym, aexp);
                                                    }
                                                )

boolexp
    : DEFINED LPAREN ml_symbol RPAREN	        (s::ml_defined ml_symbol)
    | DEFINED LPAREN symbol RPAREN		(s::cm_defined make7_state symbol)
    | LPAREN boolexp RPAREN			(boolexp)
    | boolexp AND_T boolexp		        (s::conj (boolexp1,        boolexp2))
    | boolexp OR_T  boolexp		        (s::disj (boolexp1,        boolexp2))
    | boolexp EQSYM   boolexp                   (s::beq  (boolexp1, eqsym, boolexp2))
    | NOT_T boolexp				(s::not boolexp)
    | aexp INEQSYM aexp                         (s::ineq (aexp1, ineqsym,
						     aexp2))
    | aexp EQSYM aexp                           (s::eq (aexp1, eqsym, aexp2))

ml_symbol
    : PACKAGE_T ML_ID			        (s::my_package ml_id)
    | PKG_T ML_ID			        (s::my_package ml_id)
    | API_T ML_ID			        (s::my_api ml_id)
    | GENERIC_T         ML_ID		        (s::my_g   ml_id)
    | GENERIC_API_T    ML_ID	        (s::my_generic_api    ml_id)

pathname
    : FILE_STANDARD			        ( { name   => file_standard,
						   make_path => fn () =  s::file_standard
                                                                         make7_state
									 (   file_standard,
									     context,
                                                                             error
									     (file_standardleft, file_standardright)
                                                                         )
                                                 }
                                                )
    | FILE_NATIVE				( { name
                                                        =>
                                                        file_native,

						    make_path
                                                        =>
                                                        fn ()
                                                            =
                                                            s::file_native
								( file_native,
								  context,
								  error
								  (file_nativeleft, file_nativeright)
								)
                                                 }
                                                )

srcfile
    : pathname                                  (anchor_dictionary::file
						     (pathname.make_path ()))
srcfiles
    : srcfile                                   (THE srcfile)
    | DASH                                      (NULL)
