# heap-priority-queue.pkg
#
# This implements a priority queue using a heap
# 
# -- Allen Leung

# Compiled by:
#     src/lib/src/lib7.make6
#     src/lib/thread-kit/threadkit-lib/cm-descr/lib7.make6

###              "A hacker on a roll may be able to produce,
###               in a period of a few months, something that
###               a small development group (say, 7-8 people)
###               would have a hard time getting together
###               over a year.
###
###              "IBM used to report that certain programmers
###               might be as much as 100 times as productive
###               as other workers, or more."
###
###                                  -- Peter Seebach



package heap_priority_queue
:
Priority_Queue			# Priority_Queue	is from   src/lib/src/priority-queue.api
=
package {

    package a = rw_vector;	# rw_vector	is from   src/lib/std/src/rw-vector.pkg

    exception EMPTY_PRIORITY_QUEUE;
    exception UNIMPLEMENTED;

    Priority_Queue X
	= 
	HEAP  { less:  (X, X) -> Bool,
		heap:  a::Rw_Vector( X ),
		size:  Ref( Int )
	      };

    fun create_n (less, n, dummy)
	= 
	HEAP { less,
	       heap => a::make_rw_vector (n, dummy),
	       size => REF 0
	     };

    fun unimplemented() =   raise exception UNIMPLEMENTED;

    fun create _     =   unimplemented();
    fun merge _      =   unimplemented();
    fun merge_into _ =   unimplemented();
    fun to_list _    =   unimplemented();

    fun is_empty (HEAP { size => REF 0, ... } ) => TRUE;
	is_empty _ => FALSE;
    end;

    fun clear (HEAP { size, ... } )
	=
	size := 0;

    fun min (HEAP { size => REF 0, ... } ) => raise exception EMPTY_PRIORITY_QUEUE;
	min (HEAP { heap, ... } ) => a::get (heap, 0);
    end;


    fun set (HEAP { size, heap, less, ... } ) x
	=
	{   nnn = *size;

	    fun siftup 0 => 0;

		siftup i
		    =>
		    {   j = (i - 1) / 2;
			y = a::get (heap, j);

			if   (less (x, y))
                             a::set (heap, i, y);
                             siftup j;
			else
                             i;
                        fi;
		    };
	    end;

	    size := nnn + 1;
	    a::set (heap, siftup nnn, x);
	};


    fun sift_down (heap, less, nnn, i, x)
	=
	{   fun siftdown (i, x)
		= 
		{   j = i + i + 1;
		    k = j + 1;

		    if   (j >= nnn)
		         i;
		    else
			 y = a::get (heap, j);

			 if   (k >= nnn)
			      if (less (y, x) ) go (i, x, j, y); else i;fi; 
			 else 
			       z = a::get (heap, k);
				if (less (y, x) )
				     if (less (z, y) ) go (i, x, k, z); 
				     else go (i, x, j, y);fi;
			        elif (less (z, x) ) go (i, x, k, z);
				else i;
                                fi;
			 fi;
		    fi;
		}

	    also
	    fun go (i, x, j, y)
		=
		{   a::set (heap, i, y);
		    siftdown (j, x);
		};

	    pos_x = siftdown (i, x); 
	    a::set (heap, pos_x, x); 
	    pos_x; 
	};

    fun delete_min (HEAP { size => REF 0, ... } )
	    =>
	    raise exception EMPTY_PRIORITY_QUEUE;

	delete_min (HEAP { size, heap, less, ... } )
	    =>
	    { nnn = *size - 1;
		min   = a::get (heap, 0);
		x     = a::get (heap, nnn);
		x_pos = sift_down (heap, less, nnn, 0, x);
	      size := nnn;
		min;
	    };
    end;


    fun from_list less data
	=
	{   heap =  a::from_list  data;
	    nnn  =  a::length     heap;

	    fun make_heap -1 =>   ();

		make_heap i
		    => 
		    {   sift_down (heap, less, nnn, i, a::get (heap, i));
			make_heap (i - 1);
		    };
	    end;

	    if   (nnn >= 2)
		 make_heap ((nnn+1) / 2);
	    fi;

	    HEAP { less, heap,   size => REF nnn }; 
	};
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
