# 
# Perform memory aliasing analysis.
#
# The old memory disambiguation module discards aliasing information
# across fate-passing-style function boundaries, which made
# it not very useful for the optimizations I have in mind.
#
# This is an alternative module that (hopefully) does the right thing.
# The algorithm is inspired by Steensgaard's work on flow insensitive
# points-to analysis, but has been hacked to deal with target level issues.
#
# Some target level issues
# ------------------------
# In the source level two FPS allocations cannot be aliased by definition.
# However, when allocations are translated into target code, they become
# stores to fixed offsets from the heap pointer.  Two allocation stores 
# that may write to the same offset are aliased.  Allocation stores that are
# in disjoint program paths may be assigned the same heap allocation offset.
# We have to mark these as aliased since we want to allow speculative writes
# to the allocation space.
#
# Representing heap offsets 
# -------------------------
#
# 
# Language 
# --------
# e ::= x <- v.i; k           # select
#    |  x <- v+i; k           # offset
#    |  x <- [v1, ...vn]^hp; k # record allocation at heap pointer hp
#    |  x <- *v; k            # Dereference
#    |  v1 := v2; k           # update
#    |  f (v1, ..., vn)          # tail call
#
# Since the analysis is flow insensitive, the branch constructs are 
# irrelevant.
#
# -- Allen Leung

# Compiled by:
#     src/lib/compiler/core.make6


api Memory_Aliasing {

    analyze:  List( fate_passing_style::Function ) -> (fate_passing_style::Highcode_Variable -> cpsregions::Region);
};

generic package memory_aliasing_g (cells:  Cells)		# Cells			is from   src/lib/compiler/lower/instruction/cells.api
: (weak)
Memory_Aliasing							# Memory_Aliasing	is from   src/lib/compiler/codegen/compile-fps/memory-aliasing.pkg
{

    package c  = fate_passing_style;				# fate_passing_style	is from   src/lib/compiler/upper/fps/fate-passing-style.pkg
    package p  = fate_passing_style::p;
    package pt = points_to;					# points_to		is from   src/lib/compiler/lower/aliasing/points-to.pkg

    fun error msg
        =
        lowcode_error_message::error("memory_aliasing_g", msg);

    # The following functions advances the heap pointer.
    # These functions are highly dependent on the runtime system and
    # how data structures are represented.
    # IMPORTANT: we are assuming that the new rw_vector representation is used.

    fun record_size (n, hp)
	=
	n * 4 + 4 + hp;

    fun frecord_size (n, hp)
	= 
	{   hp = if (unt::bitwise_and (unt::from_int hp, 0u4) != 0u0 ) hp+8; else hp+4;fi;
	    8*n + hp;
        };

    fun vector_size (n, hp)
	=
	n * 4 + 16 + hp; 

    fun alloc_record (c::RK_FBLOCK, vs, hp) => frecord_size (length vs, hp);
        alloc_record (c::RK_FCONT, vs, hp)  => frecord_size (length vs, hp);
        alloc_record (c::RK_VECTOR, vs, hp) => vector_size (length vs, hp);
        alloc_record(_, vs, hp) => record_size (length vs, hp);
    end;

    store_list_size = 8;
    array0size    = 20;

    exception NOT_FOUND;

    top =   cpsregions::memory;


    # Analyze a set of FPS functions
    #
    fun analyze (fps_functions)
	= 
	{   fun size_of (c::RECORD (rk, vs, x, k), hp) => size_of (k, alloc_record (rk, vs, hp));
		size_of (c::SELECT (off, v, x, cty, k), hp) => size_of (k, hp);
		size_of (c::OFFSET (off, v, x, k), hp) => size_of (k, hp);
		size_of (c::APPLY (f, vs), hp) => hp;
		size_of (c::MUTUALLY_RECURSIVE_FNS _, hp) => error "sizeOf: MUTUALLY_RECURSIVE_FNS";
		size_of (c::SWITCH (v, x, ks), hp) => size_ofs (ks, hp);
		size_of (c::BRANCH (p, _, x, k1, k2), hp) => int::max (size_of (k1, hp), size_of (k2, hp));
		size_of (c::SETTER (p::ASSIGN, vs, k), hp) => size_of (k, hp+store_list_size);
		size_of (c::SETTER (p::UPDATE, vs, k), hp) => size_of (k, hp+store_list_size);
		size_of (c::SETTER (p::BOXED_SET, vs, k), hp) => size_of (k, hp+store_list_size);
		size_of (c::SETTER(_, vs, k), hp) => size_of (k, hp);
		size_of (c::PURE (p::FWRAP, vs, x, cty, k), hp) => size_of (k, frecord_size (1, hp));
		size_of (c::PURE (p::MAKE_SPECIAL, vs, x, cty, k), hp) => size_of (k, hp+8);
		size_of (c::PURE (p::MAKEREF, vs, x, cty, k), hp) => size_of (k, hp+8);
		size_of (c::PURE (p::I32WRAP, vs, x, cty, k), hp) => size_of (k, hp+8);
		size_of (c::PURE (p::NEWARRAY0, vs, x, cty, k), hp) => size_of (k, hp+array0size);
		size_of (c::PURE (p, vs, x, cty, k), hp) => size_of (k, hp);
		size_of (c::ARITH (a, vs, x, cty, k), hp) => size_of (k, hp);
		size_of (c::LOOKER (lk, vs, x, cty, k), hp) => size_of (k, hp);
		size_of (c::RAW_C_CALL(_, _, _, _, _, k), hp) => size_of (k, hp);
            end 

	    also
	    fun size_ofs ([], hp)    => hp;
	        size_ofs (k ! ks, hp) => int::max (size_of (k, hp), size_ofs (ks, hp));
            end;

	    loc_map  = int_hash_table::make_table (37, NOT_FOUND);		#  Highcode_Variable -> loc 
	    get  = int_hash_table::get  loc_map;
	    bind     = int_hash_table::set   loc_map;

	    new_mem = cells::new_cell cells_basis::RAM_CELL;

	    pt::reset new_mem;

	    fun new_ref _
		=
		REF (pt::SCELL (new_mem(), REF []));

	    exnptr             = pt::new_sref ();		#  exception handler 
	    current_thread_ptr = pt::new_sref ();		# 

	    fun lookup x
		=
		get x
		except
		    _ => {   r = new_ref ();
			     bind (x, r);
			     r;
			 }; end ;


	    fun define_function (fk, f, args, _, cexp)
		= 
		bind (f, pt::make_fn  xs)
                where
		    xs =   map (fn x = {   r =   new_ref ();
					   bind (x, r);
					   r;
				       }
			       )
			       args;
		end;

	    off0 =   c::OFFP 0;

	    fun process (fk, f, args, _, cexp)
		= 
		infer (cexp, 0)
		where 

		    #  Create a table of allocation offset locations 

		    table =   rw_vector::tabulate (size_of (cexp, 0) / 4, new_ref);

		    fun select (i, c::VAR v, x) =>   bind (x, pt::ith_projection (lookup v, i));
			select (i, _, x)        =>   ();
		    end;

		    fun offset (i, c::VAR v, x) =>   bind (x, pt::ith_offset (lookup v, i));
			offset (i, _, x)        =>   ();
		    end;

		    fun value (c::VAR v) =>   lookup v;
			value _          =>   new_ref ();
		    end;

		    fun apply (c::VAR f, args) =>   pt::apply (lookup f, map value args);
			apply _                =>   ();
		    end;

		    fun get_path (v, c::OFFP 0)         =>   value v;
			get_path (v, c::OFFP n)         =>   pt::ith_offset (value v, n);
			get_path (v, c::SELP (n, path)) =>   pt::ith_projection (get_path (v, path), n);
		    end;

		    fun get_paths ([], hp) =>   [];

			get_paths((v, path) ! vs, hp)
			    => 
			    {   r  =    rw_vector::get (table, hp);
				r' =    get_path (v, path);

				pt::unify (r, r');

				r ! get_paths (vs, hp+1);
			    };
		    end;

		    fun get_f64paths ([], hp) =>   [];

			get_f64paths((v, path) ! vs, hp)
			    => 
			    {   r1  =   rw_vector::get (table, hp);
				r2  =   rw_vector::get (table, hp+1);
				r'  =   get_path (v, path);

				pt::unify (r1, r');
				pt::unify (r2, r');

				r' ! get_f64paths (vs, hp+2); 
			    };
		    end;

		    # How to make a record 
		    #
		    stipulate

			fun make_rec (f, get_paths, x, vs, hp)
			    = 
			    {   i =   unt::to_int (unt::(>>) (unt::from_int hp, 0u2));
				r =   f (THE (rw_vector::get (table, i)), get_paths (vs, i+1));

				bind (x, r);
			    };
		    herein	

			fun make_frecord       (x, vs, hp) =   make_rec (pt::make_record, get_f64paths, x, vs, hp);
			fun make_vector        (x, vs, hp) =   make_rec (pt::make_record, get_paths,    x, vs, hp);
			fun make_normal_record (x, vs, hp) =   make_rec (pt::make_record, get_paths,    x, vs, hp);

		    end;

		    fun make_record (c::RK_FBLOCK, x, vs, hp) =>   make_frecord (x, vs, hp);
			make_record (c::RK_FCONT,  x, vs, hp) =>   make_frecord (x, vs, hp);
			make_record (c::RK_VECTOR, x, vs, hp) =>   make_vector (x, vs, hp); 
			make_record (_,            x, vs, hp) =>   make_normal_record (x, vs, hp);
		    end;

		    fun make_top (m)
			=
			{   pt::unify (m, top);
			    top;
			};

		    #  FPS Pure Primitives 

		    fun arrayptr v
			=
			pt::ith_projection (value v, 0);

		    fun make_special (x, v, hp) =   make_normal_record (x,[(v, off0)], hp);
		    fun fwrap     (x, v, hp) =   make_frecord      (x,[(v, off0)], hp);
		    fun i32wrap   (x, v, hp) =   make_normal_record (x,[(v, off0)], hp);
		    fun makeref   (x, v, hp) =   make_normal_record (x,[(v, off0)], hp);

		    fun newarray0 (x, hp)
			= 
			bind (x, pt::make_record (NULL,[pt::make_record (NULL,[])]));

		    fun chunklength (x, v) = bind (x, pt::ith_projection (value v, -1));
		    fun length      (x, v) = bind (x, pt::ith_projection (value v,  1));
		    fun gettag      (x, v) = bind (x, pt::ith_projection (value v, -1));
		    fun getcon      (x, v) = bind (x, pt::ith_projection (value v,  0));
		    fun getexn      (x, v) = bind (x, pt::ith_projection (value v,  0));

		    fun arraysub          (x, a, i) = make_top (pt::weak_get (arrayptr a));
		    fun subscriptv        (x, a, i) = arraysub (x, a, i);
		    fun subscript         (x, a, i) = arraysub (x, a, i);
		    fun pure_numsubscript (x, a, i) = arraysub (x, a, i);
		    fun numsubscript8     (x, a, i) = arraysub (x, a, i);
		    fun numsubscriptf64   (x, a, i) = arraysub (x, a, i);
		    fun recsubscript      (x, a, i) = arraysub (x, a, i);
		    fun raw64subscript    (x, a, i) = arraysub (x, a, i);

		    #  FPS Looker Primitives 
		    fun deref (x, v) = make_top (pt::strong_get (value v, 0));

		    fun gethandler x = bind (x, pt::strong_get (exnptr, 0));
		    fun get_current_thread_register  x = bind (x, pt::strong_get (current_thread_ptr, 0));

		    #  FPS Setter Primitives 
		    fun supdate (a, x) = pt::strong_set (value a, 0, make_top (value x));
		    fun wupdate (a, x) = pt::weak_set (value a, make_top (value x));

		    fun arrayupdate (a, i, x) = pt::weak_set (arrayptr a, value x);

		    fun assign        (a, x) = supdate (a, x);
		    fun unboxedassign (a, x) = supdate (a, x);

		    fun update        (a, i, x) = arrayupdate (a, i, x);
		    fun boxedupdate   (a, i, x) = arrayupdate (a, i, x);
		    fun unboxed_set (a, i, x) = arrayupdate (a, i, x);
		    fun numupdate     (a, i, x) = arrayupdate (a, i, x);
		    fun numupdate_f64  (a, i, x) = arrayupdate (a, i, x);

		    fun sethandler                  x = pt::strong_set (exnptr,             0, value x);
		    fun set_current_thread_register x = pt::strong_set (current_thread_ptr, 0, value x);

		    # I don't know whether the following makes any sense...  XXX BUGGO FIXME
		    # Basically, I want to ignore this aliasing analysis
		    # as far as raw access is concerned.  (The invariant is
		    # that raw access NEVER occurs to any memory location
		    # that ML "knows" about.  -- Blume (2000/1/1)

		    fun rawstore (a, x) = ();
		    fun rawload  (a, x) = top;

		    fun infer (c::RECORD (rk, vs, x, k), hp)
			    => 
			    {   make_record (rk, x, vs, hp);
				infer (k, alloc_record (rk, vs, hp));
			    };

			infer (c::SELECT (i, v, x, cty, k), hp) =>   { select (i, v, x); infer (k, hp);};
			infer (c::OFFSET (i, v, x, k),      hp) =>   { offset (i, v, x); infer (k, hp);};
			infer (c::APPLY (f, vs),            hp) =>   apply (f, vs);
			infer (c::MUTUALLY_RECURSIVE_FNS _, hp) =>   error "infer: MUTUALLY_RECURSIVE_FNS";
			infer (c::SWITCH (v, x, ks),        hp) =>   infers (ks, hp);
			infer (c::BRANCH (p, _, x, k1, k2), hp) =>   { infer (k1, hp); infer (k2, hp);};


			 # These things are misnamed! There is nothing pure about them!   XXX BUGGO FIXME

			infer (c::PURE (p::CHUNKLENGTH, [v], x, _, k), hp)
			    => 
			    {   chunklength (x, v);
				infer (k, hp);
			    };

			infer (c::PURE (p::LENGTH, [v], x, _, k),           hp) =>   { length (x, v);        infer (k, hp);}; 
			infer (c::PURE (p::SUBSCRIPTV,[a, i], x, _, k),     hp) =>   { subscriptv (x, a, i); infer (k, hp);};
			infer (c::PURE (p::PURE_NUMSUBSCRIPT { kind=>p::INT 8 },[a, i], x, _, k), hp) => { pure_numsubscript (x, a, i); infer (k, hp);};
			infer (c::PURE (p::GETTAG, [v], x, _, k),           hp) => { gettag (x, v); infer (k, hp);};
			infer (c::PURE (p::MAKE_SPECIAL,[i, v], x, cty, k),    hp) => { make_special (x, v, hp); infer (k, hp+8);};
			infer (c::PURE (p::MAKEREF,[v], x, cty, k),         hp) => { makeref (x, v, hp); infer (k, hp+8);};
			infer (c::PURE (p::FWRAP,[v], x, cty, k),           hp) => { fwrap (x, v, hp); infer (k, frecord_size (1, hp));};
			infer (c::PURE (p::I32WRAP,[v], x, cty, k),         hp) => { i32wrap (x, v, hp); infer (k, hp+8);};
			infer (c::PURE (p::GETCON,[v], x, _, k),            hp) => { getcon (x, v); infer (k, hp);};
			infer (c::PURE (p::GETEXN,[v], x, _, k),            hp) => { getexn (x, v); infer (k, hp);};
			infer (c::PURE (p::RECSUBSCRIPT,[a, i], x, _, k),   hp) => { recsubscript (x, a, i); infer (k, hp);};
			infer (c::PURE (p::RAW64SUBSCRIPT,[a, i], x, _, k), hp) => { raw64subscript (x, a, i); infer (k, hp);};
			infer (c::PURE (p::NEWARRAY0, _, x, cty, k),        hp) => { newarray0 (x, hp); infer (k, hp+array0size);};
			infer (c::PURE (p, vs, x, cty, k),                  hp) => infer (k, hp);
			infer (c::ARITH (a, vs, x, cty, k),                 hp) => infer (k, hp);

			#  Lookers 
			infer (c::LOOKER (p::BANG,[v],           x, _, k), hp) =>   { deref (x, v); infer (k, hp);};
			infer (c::LOOKER (p::GETHANDLER,[],       x, _, k), hp) =>   { gethandler x; infer (k, hp);};
			infer (c::LOOKER (p::SUBSCRIPT,[a, i], x, _, k), hp) =>   { subscript (x, a, i); infer (k, hp);};

			infer (c::LOOKER (p::NUMSUBSCRIPT { kind=>p::INT 8    },[a, i], x, _, k), hp) =>   { numsubscript8   (x, a, i); infer (k, hp);};
			infer (c::LOOKER (p::NUMSUBSCRIPT { kind=>p::FLOAT 64 },[a, i], x, _, k), hp) =>   { numsubscriptf64 (x, a, i); infer (k, hp);};

			infer (c::LOOKER (p::GET_CURRENT_THREAD_REGISTER, [], x, _,     k), hp) => { get_current_thread_register x; infer (k, hp);};
			infer (c::LOOKER (p::DEFLVAR,[], x, cty,   k), hp) => infer (k, hp);		#  nop! 
			infer (c::LOOKER (p::RAWLOAD _, [a], x, _, k), hp) => { rawload (x, a); infer (k, hp);};

			#  Setters 
			infer (c::SETTER (p::ASSIGN,                            [a, v], k), hp) => { assign (a, v); infer (k, hp+store_list_size);};
			infer (c::SETTER (p::UNBOXEDASSIGN,                     [a, v], k), hp) => { unboxedassign (a, v); infer (k, hp);};
			infer (c::SETTER (p::UPDATE,                         [a, i, v], k), hp) => { update (a, i, v); infer (k, hp+store_list_size);};
			infer (c::SETTER (p::BOXED_SET,                    [a, i, v], k), hp) => { boxedupdate (a, i, v); infer (k, hp+store_list_size);};
			infer (c::SETTER (p::UNBOXED_SET,                  [a, i, v], k), hp) => { unboxed_set (a, i, v); infer (k, hp);};
			infer (c::SETTER (p::NUMUPDATE { kind=>p::INT _},     [a, i, v], k), hp) => { numupdate (a, i, v); infer (k, hp);};
			infer (c::SETTER (p::NUMUPDATE { kind=>p::FLOAT 64 }, [a, i, v], k), hp) => { numupdate_f64 (a, i, v); infer (k, hp);};

			infer (c::SETTER (p::SETHANDLER,                        [x], k), hp) => { sethandler x; infer (k, hp);};
			infer (c::SETTER (p::SET_CURRENT_THREAD_REGISTER,       [x], k), hp) => { set_current_thread_register x; infer (k, hp);};
			infer (c::SETTER (p::RAWSTORE _, [a, x], k), hp) => { rawstore (a, x); infer (k, hp);};

			# Apparently these are nops -- see
                        #     src/lib/compiler/codegen/main/translate-fate-passing-style-to-binary-g.pkg
			#
			infer (c::SETTER (p::USELVAR, [x], k), hp) => infer (k, hp);
			infer (c::SETTER (p::ACCLINK, _,   k), hp) => infer (k, hp);
			infer (c::SETTER (p::SETMARK, _,   k), hp) => infer (k, hp);
			infer (c::SETTER (p::FREE,    [x], k), hp) => infer (k, hp);

			infer (c::SETTER (p::SETPSEUDO, _, k), hp)
                            =>
                            {
#                               print "setpseudo not implemented\n";
                                infer (k, hp);
                            };

			infer (e, hp) => { prettyprint_fps::print_fps_expression e; print "\n"; error "infer";};
                    end 

		    also
		    fun infers ([], hp) => ();
			infers (k ! ks, hp) => { infer (k, hp); infers (ks, hp);};
		    end;
		end;

	    if *controls::cg::disambiguate_memory

		     cpsregions::reset ();
		     apply define_function fps_functions;
		     apply process fps_functions;

		     fn r =  get r
                             except _ = top;

	    else
		 (fn _ = top);
            fi;
	};
};
