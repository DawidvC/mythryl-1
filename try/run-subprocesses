#!/usr/bin/mythryl

fun spawn_subprocess ()
    =
    {   process = spawn::spawn ("/bin/sh", []);				# spawn	is from   src/lib/std/src/unix/spawn.pkg
	my (instream, outstream) = spawn::streams_of process;
        (process, instream, outstream, REF 0, REF 0);
    }; 

fun input_poll_descriptor input_stream
    =
    {   stream = file::get_instream  input_stream;		# Convert file::Input_Stream to stream_io::Input_Stream

	reader_and_vector = file::stream_io::get_reader stream;

	case reader_and_vector

	     (text_primitive_io::READER { io_descriptor => THE io_descriptor, ... }, "")
		 =>
		 {   poll_descriptor = the (winix::io::poll_descriptor  io_descriptor);
		     winix::io::poll_in  poll_descriptor;
		 };

             _   => raise FAIL "Couldn't construct input poll descriptor";
	esac;
    }

fun output_poll_descriptor output_stream
    =
    {   stream = file::get_outstream  output_stream;		# Convert file::Input_Stream to stream_io::Input_Stream

	reader_and_vector = file::stream_io::get_writer stream;

	case reader_and_vector

	     (text_primitive_io::WRITER { io_descriptor => THE io_descriptor, ... }, "")
		 =>
		 {   poll_descriptor = the (winix::io::poll_descriptor  io_descriptor);
		     winix::io::poll_out  poll_descriptor;
		 };

             _   => raise FAIL "Couldn't construct output poll descriptor";
	esac;
    }

fun run_subprocesses ()
    = 
    {   # Start two subprocesses:
	#
        my (proc1, in1, out1, wrote1, read1) =  spawn_subprocess ();
        my (proc2, in2, out2, wrote2, read2) =  spawn_subprocess ();

        # Set up to poll them:

	poll_descriptor_list
	    =
	    [  input_poll_descriptor  in1,
               input_poll_descriptor  in2,
              output_poll_descriptor out1,
              output_poll_descriptor out2
	    ];

	poll_results_list
	    =
	    winix::io::poll (poll_descriptor_list, NULL);


	

	file::write (outstream, "echo 'xyzzy'\n");			# file	is from   src/lib/std/src/unix/file.pkg
	file::flush outstream;

	printf "Read from subprocess: '%s'\n" (string::chomp (the (file::read_line  instream) ) );

	exit 0;
    };

run_subprocess ();

