## optutils.pkg
## monnier@cs.yale.edu 

# Compiled by:
#     src/lib/compiler/core.make6

api Opt_Utils {

    Either (X,Y) = AA  X | BB  Y;

    # Takes the fk of a function and returns
    # the fk of the wrapper along with the
    # new fk of the actual body:
    #
    fk_wrap:  (anormal::Function_Kind,
	       Null_Or( List( anormal::Highcode_Type ) ))
	      ->
	       ((anormal::Function_Kind, anormal::Function_Kind));

    # This is a known APL function, but I don't know its real name:
    # 
    filter:  List( Bool ) -> List( X ) -> List( X );

    # A less brain-dead version of
    # paired_lists::all: returns FALSE
    # if length l1 != length l2 *)
    #
    paired_lists_all:  ((X, Y) -> Bool) -> (List( X ), List( Y )) -> Bool;

    pow2:  Int -> Int;

    # This is not a proper transposition in that
    # the order is reversed in the following way:
    #  transpose x = map reverse (proper_trans x)
    #
    exception UNBALANCED;
    transpose:  List( List( X ) ) -> List( List( X ) );

    foldl3:  ((X, Y, Z, W) -> W) -> W -> (List( X ), List( Y ), List( Z )) -> W;
};

package opt_utils: Opt_Utils {		# Opt_Utils	is from   src/lib/compiler/upper/optimize/optutils.pkg

    stipulate

        package f  =  anormal;
	package lk =  highcode_guts;	# highcode_guts	is from   src/lib/compiler/upper/highcode/highcode-guts.pkg

    herein

	Either (X,Y) = AA X | BB Y;

	fun bug msg = error_message::impossible ("opt_utils: " + msg);

	fun fk_wrap ( { inlining_hint, all_call_sites_known, is_recursive, calling_convention }, rtys')
            =
	    {   calling_convention'
                    =
		    case calling_convention

			f::CALLING_CONVENTION_FUNCTION (lk::FNFLAG_VARIABLE (f1, f2))
                            =>
                            f::CALLING_CONVENTION_FUNCTION (lk::FNFLAG_VARIABLE (TRUE, f2));

			( f::CALLING_CONVENTION_GENERIC
			| f::CALLING_CONVENTION_FUNCTION (lk::FNFLAG_FIXED)
			)
			    =>
                           calling_convention;
                    esac;

		is_recursive' = null_or::map (fn ltys => (ltys, f::OTHER_LOOP); end ) rtys';

		(   { is_recursive,  all_call_sites_known, calling_convention,  inlining_hint=>f::INLINE_WHENEVER_POSSIBLE },
		    { is_recursive=>is_recursive', all_call_sites_known=>TRUE,              calling_convention=>calling_convention', inlining_hint }
		);
	    };

	fun filter [] [] => [];
	    filter (TRUE ! fs) (x ! xs)  => x ! (filter fs xs);
	    filter (FALSE ! fs) (x ! xs) => (filter fs xs);
	    filter _ _ => bug "unmatched list length in filter";
        end;

	fun paired_lists_all prior
            =
	    allp
            where
	        fun allp (a ! r1, b ! r2) => prior (a, b) and allp (r1, r2);
		    allp ([],[]) => TRUE;
		    allp _ => FALSE;
                end;
	    end;

	fun pow2 n
            =
            unt::to_int (unt::(<<) (unt::from_int 1, unt::from_int n));

	exception UNBALANCED;

	fun transpose []
                =>
                [];

	    transpose (xs ! xss)
		=>
		tr xss (map  (fn x = [x])  xs)
                where
		    fun tr [] accs
                            =>
                            accs;

		        tr (xs ! xss) accs
                            =>
			    tr xss (f xs accs)
                            where
			        fun f [] [] => [];
			            f (x ! xs) (acc ! accs) => (x ! acc) ! (f xs accs);
			            f _ _ => raise exception UNBALANCED;
                                end;
			    end;
                    end;
		end;
        end;

	fun foldl3 f
            =
	    l
            where
	        fun l s ([],[],[]) => s;
		    l s (x1 ! x1s, x2 ! x2s, x3 ! x3s) => l (f (x1, x2, x3, s)) (x1s, x2s, x3s);
		    l _ _ => raise exception UNBALANCED;
                end;
	    end;

    end;
};



## copyright 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
