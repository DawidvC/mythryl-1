## x86-instruction-rewriter-g.pkg -- rewrite an x86 instruction 

# Compiled by:
#     src/lib/compiler/lower/make7/ia32.make6

# We are invoked by:
#
#     src/lib/compiler/codegen/x86/x86-codetree.pkg

generic package x86_instruction_rewriter_g (

    instruction_set:  Instruction_Set_X86				# Instruction_Set_X86	is from   src/lib/compiler/lower/x86/instruction/instruction-set-x86.api

)
: (weak)  Xy86Rewrite							# Xy86Rewrite		is from   src/lib/compiler/lower/x86/reg-alloc/x86-rewrite.api

{
    package i = instruction_set;
    package c = i::cells;
    package cb= cells_basis;						# cells_basis		is from   src/lib/compiler/lower/instruction/cells-basis.pkg

    fun error msg
	=
	lowcode_error_message::error("x86_instruction_rewriter_g", msg);

    fun do_operand (rs, rt) operand
	=
	case  operand

	   i::DIRECT r
	       =>
	       if (cb::same_color (r, rs) ) i::DIRECT rt; else operand;fi;

	   i::DISPLACE { base, disp, mem }
	       => 
	       if (cb::same_color (base, rs) ) i::DISPLACE { base=>rt, disp, mem }; 
	       else operand;fi;

	   i::INDEXED { base as THE b, index, scale, disp, mem }
	       =>
	       {   base'= if (cb::same_color (b, rs) ) THE rt; else base;fi;
		   index'=if (cb::same_color (index, rs) ) rt; else index;fi;
		   i::INDEXED { base=>base', index=>index', scale, disp, mem };
	       };

	   i::INDEXED { base, index, scale, disp, mem }
               => 
	       if (cb::same_color (index, rs))   i::INDEXED { base, index=>rt, scale, disp, mem };
	       else                              operand;
               fi;

	   _ => operand;
	esac;


    fun rewrite_use (instruction, rs, rt)
        =
        {
	    do_operand = do_operand (rs, rt);

	    fun replace r = if (cb::same_color (r, rs) ) rt; else r;fi;

	    fun rewrite_x86use (instruction)
                = 
	        case instruction
		    i::JMP (operand, labs) => i::JMP (do_operand operand, labs);
		    i::JCC { cond, operand } => i::JCC { cond, operand => do_operand operand };

		    i::CALL { operand, defs, uses, return, cuts_to, mem, pops }
                        => 
		        i::CALL { operand=>do_operand operand, defs, return,
			      uses=>cb::cell_set::map { from=>rs, to=>rt } uses, cuts_to,
			      mem, pops };

		    i::MOVE { mv_op, src, dst as i::DIRECT _} => 
		       i::MOVE { mv_op, src=>do_operand src, dst };

		    i::MOVE { mv_op, src, dst } => 
		       i::MOVE { mv_op, src=>do_operand src, dst=>do_operand dst };

		    i::LEA { r32, address } => i::LEA { r32, address=>do_operand address };
		    i::CMPL { lsrc, rsrc } => i::CMPL { lsrc=>do_operand lsrc, rsrc=>do_operand rsrc };
		    i::CMPW { lsrc, rsrc } => i::CMPW { lsrc=>do_operand lsrc, rsrc=>do_operand rsrc };
		    i::CMPB { lsrc, rsrc } => i::CMPB { lsrc=>do_operand lsrc, rsrc=>do_operand rsrc };
		    i::TESTL { lsrc, rsrc } => i::TESTL { lsrc=>do_operand lsrc, rsrc=>do_operand rsrc };
		    i::TESTW { lsrc, rsrc } => i::TESTW { lsrc=>do_operand lsrc, rsrc=>do_operand rsrc };
		    i::TESTB { lsrc, rsrc } => i::TESTB { lsrc=>do_operand lsrc, rsrc=>do_operand rsrc };

		    i::BITOP { bit_op, lsrc, rsrc } => 
		      i::BITOP { bit_op, lsrc=>do_operand lsrc, rsrc=>do_operand rsrc };

		    i::BINARY { bin_op, src, dst } => 
		      i::BINARY { bin_op, src=>do_operand src, dst=>do_operand dst };

		    i::SHIFT { shift_op, src, dst, count } => 
		      i::SHIFT { shift_op, src=>do_operand src, dst=>do_operand dst, 
			      count=>do_operand src };

		    i::CMPXCHG { lock, size, src, dst } => 
		      i::CMPXCHG { lock, size, src=>do_operand src, dst=>do_operand dst };

		    i::MULTDIV { mult_div_op, src } => 
		      i::MULTDIV { mult_div_op, src=>do_operand src };

		    i::MUL3 { dst, src1, src2 } => 
		      i::MUL3 { dst, src1=>do_operand src1, src2 };

		    i::UNARY { un_op, operand } => i::UNARY { un_op, operand=>do_operand operand };
		    i::SET { cond, operand } => i::SET { cond, operand=>do_operand operand };
		    i::PUSHL operand => i::PUSHL (do_operand operand);
		    i::PUSHW operand => i::PUSHW (do_operand operand);
		    i::PUSHB operand => i::PUSHB (do_operand operand);
		    i::POP operand  => i::POP (do_operand operand);
		    i::FSTPT operand => i::FSTPT (do_operand operand);
		    i::FSTPL operand => i::FSTPL (do_operand operand);
		    i::FSTPS operand => i::FSTPS (do_operand operand);
		    i::FSTL operand => i::FSTL (do_operand operand);
		    i::FSTS operand => i::FSTS (do_operand operand);
		    i::FLDT operand => i::FLDT (do_operand operand);
		    i::FLDL operand => i::FLDL (do_operand operand);
		    i::FLDS operand => i::FLDS (do_operand operand);
		    i::FUCOM operand => i::FUCOM (do_operand operand);
		    i::FUCOMP operand => i::FUCOMP (do_operand operand);
		    i::FCOMI operand => i::FCOMI (do_operand operand);
		    i::FCOMIP operand => i::FCOMIP (do_operand operand);
		    i::FUCOMI operand => i::FUCOMI (do_operand operand);
		    i::FUCOMIP operand => i::FUCOMIP (do_operand operand);
		    i::FENV { fenv_op, operand } => i::FENV { fenv_op, operand=>do_operand operand };

		    i::FBINARY { bin_op, src, dst } => 
		      i::FBINARY { bin_op, src=>do_operand src, dst };

		    i::FIBINARY { bin_op, src } => 
		      i::FIBINARY { bin_op, src=>do_operand src };

		     #  Pseudo floating point instructions 
		    i::FMOVE { fsize, src, dst } => 
		      i::FMOVE { fsize, src=>do_operand src, dst=>do_operand dst };

		    i::FILOAD { isize, ea, dst } => 
		      i::FILOAD { isize, ea=>do_operand ea, dst=>do_operand dst };

		    i::FBINOP { fsize, bin_op, lsrc, rsrc, dst } =>
		      i::FBINOP { fsize, bin_op,
			       lsrc=>do_operand lsrc, rsrc=>do_operand rsrc, dst=>do_operand dst };

		    i::FIBINOP { isize, bin_op, lsrc, rsrc, dst } =>
		      i::FIBINOP { isize, bin_op,
				lsrc=>do_operand lsrc, rsrc=>do_operand rsrc, dst=>do_operand dst };

		    i::FUNOP { fsize, un_op, src, dst } =>
		      i::FUNOP { fsize, un_op, src=>do_operand src, dst=>do_operand dst };

		    i::FCMP { i, fsize, lsrc, rsrc } =>
		      i::FCMP { i, fsize, lsrc=>do_operand lsrc, rsrc=>do_operand rsrc };

		    i::CMOV { cond, src, dst } => i::CMOV { cond, src=>do_operand src, dst };
		    _ => instruction;
	        esac;


	    fun f (i::NOTE { note, instruction } )
                    => 
		    i::NOTE { instruction => rewrite_use (instruction, rs, rt),
			      note => case note
				          cb::DEF_USE { cellkind=>cb::REGISTER, defs, uses }
                                              =>
				              cb::DEF_USE { cellkind=>cb::REGISTER, uses=>map replace uses, defs };
				          _   => note;
                                      esac
                            };

	        f (i::BASE_INSTRUCTION i)
                    =>
                    i::BASE_INSTRUCTION (rewrite_x86use i);

	        f (i::COPY { kind as cb::REGISTER, size_in_bits, dst, src, tmp } )
                    => 
		    i::COPY { kind, size_in_bits, dst, src=>map replace src, tmp };

	        f _  => error "rewrite_use: f";
            end;

	    f (instruction: i::Instruction);
        };							# fun rewrite_use

    fun rewrite_def (instruction, rs, rt)
        =
	f  instruction
        where
	    fun do_operand (operand as i::DIRECT r)
                    => 
		    if (cb::same_color (r, rs))  i::DIRECT rt;
                    else                         operand;
                    fi;

	       do_operand _
                   =>
                   error "operand: not i::DIRECT";
            end;

	    fun replace r
                =
                if (cb::same_color (r, rs) ) rt; else r;fi;

	    fun rewrite_x86def (instruction)
	      =
	      case instruction 

		  i::CALL { operand, defs, uses, return, cuts_to, mem, pops }
                      => 
		      i::CALL { operand, cuts_to, 
			     return=>cb::cell_set::map { from=>rs, to=>rt } return, pops,
			     defs=>cb::cell_set::map { from=>rs, to=>rt } defs, uses, mem };

		  i::MOVE { mv_op, src, dst } => i::MOVE { mv_op, src, dst=>do_operand dst };
		  i::LEA { r32, address } => i::LEA { r32=>replace r32, address };

		  i::BINARY { bin_op, src, dst }
                      => 
		      i::BINARY { bin_op, src, dst=>do_operand dst };

		  i::SHIFT { shift_op, src, dst, count }
                      => 
		      i::SHIFT { shift_op, src, count, dst=>do_operand dst };

		  i::CMPXCHG { lock, size, src, dst }
                      => 
		      i::CMPXCHG { lock, size, src, dst=>do_operand dst };

		  i::MUL3 { dst, src1, src2 } => i::MUL3 { dst=>replace dst, src1, src2 };
		  i::UNARY { un_op, operand } => i::UNARY { un_op, operand=>do_operand operand };
		  i::SET { cond, operand } => i::SET { cond, operand=>do_operand operand };
		  i::CMOV { cond, src, dst } => i::CMOV { cond, src, dst=>replace dst };

		  _ => instruction;
	       esac;

	    fun f (i::NOTE { note, instruction } )
		       =>
		       i::NOTE { instruction=>rewrite_def (instruction, rs, rt),
				 note => case note
					     cb::DEF_USE { cellkind=>cb::REGISTER, defs, uses }
						 =>
						 cb::DEF_USE { cellkind=>cb::REGISTER, uses, defs=>map replace defs };
					     _ => note;
                                         esac
                               };

	       f (i::BASE_INSTRUCTION i) => i::BASE_INSTRUCTION (rewrite_x86def i);

	       f (i::COPY { kind as cb::REGISTER, size_in_bits, dst, src, tmp } )
                   =>
		   i::COPY { kind, size_in_bits, dst=>map replace dst, src, tmp };

	       f _ => error "rewrite_def: f";
           end;
        end;

    fun frewrite_use (instruction, fs, ft)
        =
	f  instruction
        where
	    fun foperand (operand as i::FDIRECT f)
                    => 
		    if (cb::same_color (f, fs) ) i::FDIRECT ft; else operand;fi;

	        foperand (operand as i::FPR f)
                    => 
		    if (cb::same_color (f, fs) ) i::FPR ft; else operand;fi;

	        foperand operand
                    =>
                    operand;
            end;

	    fun replace f
                =
                if (cb::same_color (f, fs) ) ft; else f;fi;

	    fun frewrite_x86use (instruction)
	       = 
	       case instruction

		   i::FLDL operand => i::FLDL (foperand operand);
		   i::FLDS operand => i::FLDS (foperand operand);

		   i::CALL { operand, defs, uses, return, cuts_to, mem, pops }
                       => 
		       i::CALL { operand, defs, return, cuts_to,
			     uses=>cb::cell_set::map { from=>fs, to=>ft } uses, mem, pops };

		   i::FBINARY { bin_op, src, dst }
                       => 
		       i::FBINARY { bin_op, src=>foperand src, dst=>foperand dst };

		   i::FUCOM operand => i::FUCOM (foperand operand);
		   i::FUCOMP operand => i::FUCOMP (foperand operand);
		   i::FCOMI operand => i::FCOMI (foperand operand);
		   i::FCOMIP operand => i::FCOMIP (foperand operand);
		   i::FUCOMI operand => i::FUCOMI (foperand operand);
		   i::FUCOMIP operand => i::FUCOMIP (foperand operand);

		   #  Pseudo floating point instructions 
		   i::FMOVE { fsize, dst, src }
                       =>
		       i::FMOVE { fsize, dst, src=>foperand src };

		   i::FBINOP { fsize, bin_op, lsrc, rsrc, dst }
                       =>
		       i::FBINOP { fsize, bin_op,
			      lsrc=>foperand lsrc, rsrc=>foperand rsrc, dst };

		   i::FIBINOP { isize, bin_op, lsrc, rsrc, dst }
                       =>
		       i::FIBINOP { isize, bin_op,
			       lsrc=>foperand lsrc, rsrc=>foperand rsrc, dst };

		   i::FUNOP { fsize, un_op, src, dst }
                       =>
		       i::FUNOP { fsize, un_op, src=>foperand src, dst };

		   i::FCMP { i, fsize, lsrc, rsrc }
                       =>
		       i::FCMP { i, fsize, lsrc=>foperand lsrc, rsrc=>foperand rsrc };

		   _ => instruction;
	       esac;


	    fun f (i::NOTE { note, instruction } )
                      => 
		       i::NOTE { instruction=>frewrite_use (instruction, fs, ft),
				 note => case note

					     cb::DEF_USE { cellkind=>cb::FLOAT_REGISTER, defs, uses }
                                                 =>
					         cb::DEF_USE { cellkind=>cb::FLOAT_REGISTER, uses=>map replace uses,
							 defs };

					     _   => note;
                                         esac
                               };

	       f (i::BASE_INSTRUCTION i) => i::BASE_INSTRUCTION (frewrite_x86use i);

	       f (i::COPY { kind as cb::FLOAT_REGISTER, size_in_bits, dst, src, tmp } )
                   => 
		   i::COPY { kind, size_in_bits, dst, src=>map replace src, tmp };

	       f _ => error "frewrite";
           end;
        end;

    fun frewrite_def (instruction, fs, ft)
        =
	f  instruction
        where
         
	    fun foperand (operand as i::FDIRECT r)
                    => 
		    if (cb::same_color (r, fs) ) i::FDIRECT ft; else operand;fi;

	        foperand (operand as i::FPR r)
                    => 
		    if (cb::same_color (r, fs) ) i::FPR ft; else operand;fi;

	        foperand operand
                    =>
                    operand;
            end;

	    fun replace f
                =
                if (cb::same_color (f, fs))   ft;
                else                          f;
                fi;

	    fun frewrite_x86def (instruction)
	       = 
	       case instruction
		   i::FSTPT operand => i::FSTPT (foperand operand);
		   i::FSTPL operand => i::FSTPL (foperand operand);
		   i::FSTPS operand => i::FSTPS (foperand operand);
		   i::FSTL operand => i::FSTL (foperand operand);
		   i::FSTS operand => i::FSTS (foperand operand);

		   i::CALL { operand, defs, uses, return, cuts_to, mem, pops }
                       => 
		       i::CALL { operand, defs=>cb::cell_set::map { from=>fs, to=>ft } defs, 
					return=>cb::cell_set::map { from=>fs, to=>ft } return,
			     uses, cuts_to, mem, pops };

		   i::FBINARY { bin_op, src, dst }
                       =>
                       i::FBINARY { bin_op, src, dst=>foperand dst };

		   #  Pseudo floating point instructions 
		   i::FMOVE { fsize, src, dst }
                       => 
		       i::FMOVE { fsize, src, dst=>foperand dst };

		   i::FILOAD { isize, ea, dst }
                       => 
		       i::FILOAD { isize, ea, dst=>foperand dst };

		   i::FBINOP { fsize, bin_op, lsrc, rsrc, dst }
                       =>
		       i::FBINOP { fsize, bin_op, lsrc, rsrc, dst=>foperand dst };

		   i::FIBINOP { isize, bin_op, lsrc, rsrc, dst }
                       =>
 		       i::FIBINOP { isize, bin_op, lsrc, rsrc, dst=>foperand dst };

		   i::FUNOP { fsize, un_op, src, dst }
                       =>
		       i::FUNOP { fsize, un_op, src, dst=>foperand dst };

		   _  => instruction;
	        esac;

	    fun f (i::NOTE { instruction, note } )
                    =>
		    i::NOTE { instruction => frewrite_def (instruction, fs, ft),

			      note => case note
					  cb::DEF_USE { cellkind=>cb::FLOAT_REGISTER, defs, uses } =>
					    cb::DEF_USE { cellkind=>cb::FLOAT_REGISTER, uses,
						      defs=>map replace defs };
					  _ => note;
                                       esac
                            };

		f (i::BASE_INSTRUCTION i)
                    =>
                    i::BASE_INSTRUCTION (frewrite_x86def i);

		f (i::COPY { kind as cb::FLOAT_REGISTER, dst, src, tmp, size_in_bits } )
                    => 
		    i::COPY { kind, size_in_bits, dst=>map replace dst, src, tmp };

		f _ => error "frewriteDef";
            end;

        end;					# fun frewrite_def
};



## COPYRIGHT (c) 1997 Bell Labs
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
