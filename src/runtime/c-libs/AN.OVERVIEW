2007-11-26 CrT

This directory tree contains the glue code that allows high-level
Mythryl code to call standard C library functions like sin() fopen()
and so forth.



    NB: The src/runtime/c-libs directory tree is based on simple,
	straight-forward manually written C glue logic.

	By contrast, Matthias Blume's c-glue-maker project/package
	(the SML/NJ version of which is called "NL-FFI", for
        ("No-Longer-Foreign Function Interface") directly parses .h
        files and then generates everything needed for Mythryl compiled
        code to call C library functions directly, with essentially
        no glue layer at all.

	That is very pretty!   Unfortunately, c-glue-maker does not
        appear to be anywhere close to ready for production use.

        (Not to mention that my conversion of it from SML to Mythryl
        syntax resulted in some superficial breakage, not yet all fixed.)

	For more info on c-glue-maker, see:

	    src/app/c-glue-maker	# The main interface generator
	    src/lib/c-glue-lib		# Associated library code
	    src/lib/c-glue		# Interfaces Allen Leung generated via NLFFI



=======================================================================
A QUICK GUIDE TO THE CODE LAYOUT:
---------------------------------

 o  For a given pre-existing C library libfoo.a,
    we put our glue code in a new C library liblib7-foo.a,
    where the added "lib7-" prefix prevents confusion.

 o  The C code for liblib7-foo.a lives in
    its own src/runtime/c-libs/foo subdirectory, which:

    .  Has its own Makefile, invoked at compile time
       from src/runtime/o/Makefile

    .  Compiles its own liblib7-foo.a code library.

    .  Contains a boilerplate file

           cfun-proto-list.h

       which is identical for every library.		

    .  Contains a file

           cfun-list.h

       which maps Mythryl function names
       to C function names.

    .  Contains a   foo-lib.c   which compiles
       the above cfun-list.h file into its runtime
       representation.  (Only the table name changes.)

    .  For each function call
           zot()
       in library foo which is to be callable from Mythryl, a file
           zot.c
       which contains a glue function
           _lib7_P_Foo_zot ()
       for calling zot() from the Mythryl level.

 o  On the Mythryl sourcecode side, there will be a pair of files like

        src/lib/foo/foo.api
        src/lib/foo/foo.pkg

    where   foo.pkg   contains for each library call
    like zot() (above) some code initializing
    a variable 'zot' with the right type, and
    binding it to the C glue code:

        zot:    This -> That
           =    c_interface::c_function "Foo" "zot";

    and     foo.api   contains simply the type declaration:

	zot:    This -> That;








=======================================================================
ADDING GLUE FOR A NEW C LIBRARY:
--------------------------------

 o  Supposing it is the existing C library "libfoo" that you're
    providing glue for, create a new directory

        src/runtime/c-libs/lib7-foo

    and fill it up by copying over and appropriately modifying
    either code from some existing library, or else the provided
    sample files in the directory

        src/runtime/c-libs/templates


 o  In your

        src/runtime/c-libs/lib7-foo/lib7-foo-lib.c

    file, change the table name to

	Lib7_Foo_Library

    That is the only required change in this file,
    although you should update comments appropriately.


 o  For each call 'zot()' in your library 'foo', you'll need to

    .  Create a file

          src/runtime/c-libs/lib7-foo/zot.c
    
       containing your

           _lib7_P_Foo_zot ()

       glue code function.  You'll probably find it easiest
       to clone and edit a pre-existing file implementing
       a function with similar argument types and return type.

    .  In your

           src/runtime/c-libs/lib7-foo/cfun-list.h

       file, add a line

           CFUNC( "zot",	_lib7_P_Foo_zot,	"This -> That")

       to establish the connection from the Mythryl namespace
       level to the C function level.	


 o  To get your liblib7-foo.a file built, you need to make
    two additions to   src/runtime/o/Makefile[.in]:

    .  Add your liblib7-foo.a  file to CLIBS in  src/runtime/o/Makefile[.in]
       following the model of the existing libraries.

    .  Add an invocation of your src/runtime/c-libs/foo/Makefile
       following the pattern of the existing rules like:

	    $(CLIB_DIR)/lib7-foo/liblib7-foo.a: runtime-sizes.h
		    (cd $(CLIB_DIR)/lib7-foo; $(MAKE)  $(LIB_MK_ARGS) liblib7-foo.a)

 o  For "make clean" to work right, in file

        src/runtime/c-libs/Makefile.in

    you'll need to add your library directory to the

        LIB_DIRS

    section in the obvious way.

 o  To make your function table visible at the Mythryl
    level, in the file 

        src/runtime/c-libs/clib-list.h

    you'll need to add a line

	C_LIBRARY(Lib7_Foo_Library)


 o  To build a new

        bin/runtime7

    executable containing your new glue code, from
    the root install directory you'll need to do

	rm bin/runtime7
        make c-stuff


 o  On the Mythryl side create the files

        src/lib/std/src/foo.pkg:

            package foo: Foo {

		    my zot:    This -> That
		          =    c_interface::c_function "Lib7-Foo" "zot";
	    };

        src/lib/std/src/foo.api:
 
	    api Foo {

		    zot:    This -> That;
            };

 


 o  To get your Mythryl glue code to compile
    as part of the interactive system you'll
    need to add lines

        $ROOT/src/lib/std/src/foo.api
        $ROOT/src/lib/std/src/foo.pkg

    to the LIBRARY_COMPONENTS section of

        src/lib/std/src/stdlib-core.make6

    To make your Mythryl glue code visible at top 
    level in the interactive system, you'll need
    to add the lines

	api Foo
	pkg foo

    to the LIBRARY_EXPORTS section of the files

        src/lib/std/src/stdlib-core.make6
        src/lib/std/stdlib.make6





 o  Finally, for production use, you'll want to
    test at build time for the presence of your
    library, and #ifdef in appropriate default
    code if it is not available.

    For a typical library, you'll need to test
    for both the presence of some <foo.h>
    header file, and also some libfoo.so or
    libfoo.a library.

    To do this, you'll need to add

        #define HAVE_FOO_H 0
        #define HAVE_FOO 0

    lines to

        src/runtime/config.h.in

    and then in

        src/runtime/Configure.in

    add in the 

        # Checks for libraries.
        [...]

    section add a line

        AC_CHECK_LIB([foo], [zot])

    and in the

	# Checks for header files.
        [...]

    section add a line

	AC_CHECK_HEADERS([foo.h])

    If in doubt, look at some of the existing examples
    and follow their lead.



 o  Finally, add your new Makefile.in to the

        AC_CONFIG_FILES

    call in

        src/runtime/Configure.in

    in the obvious way, following the pattern of the
    other c-libs Makefiles.



The remaining issues mainly involve how to correctly
handle various specific argument and return types in
your glue code function.

The macros used for doing this are mostly
defined in

    src/runtime/include/runtime-values.h

-- not that you'll find reading it very helpful.   

In general, the best way to resolve them is to look
at a pre-existing function with similar types:

    Void                        -> Int                           src/runtime/c-libs/posix-procenv/getpid.c
    Void                        -> String                        src/runtime/c-libs/lib7-socket/gethostname.c
    Void                        -> (Int, Int)                    src/runtime/c-libs/lib7-time/timeofday.c

    (String,(Int,Int...)        -> String                        src/runtime/c-libs/lib7-date/strftime.c
    String                      -> Null_Or(String)               src/runtime/c-libs/posix-procenv/getenv.c 

    Int                         -> (Int, Int...)                 src/runtime/c-libs/lib7-date/gmtime.c
    (Int, Int...)               -> Int                           src/runtime/c-libs/lib7-date/mktime.c

    Float                        -> Float                          src/runtime/c-libs/lib7-math/log64.c

    Void                        -> Null_Or( List( Sysconst ) )   src/runtime/machine-dependent/unix-signal.c

    Null_Or( Rw_Vector( Unt ) ) -> Void                          src/runtime/c-libs/lib7-prof/setpref.c



=======================================================================
2007-11-26 CrT:  Following is the README file I found in this
directory.  It appears to be badly outdated.  In particular,

  o Dynamic linking has been working for some time.

  o Matthias Blume's "nlffi" ("no-longer foriegn function interface")
    stuff seems to be the current effort toward easier library
    interfacing.

  o I find no trace of the HOWTO-ADD-C-CODE file mentioned,

Additional obsolete documentation may be found in

  src/lib/c-glue-old/README
=======================================================================

This is the root directory of the Lib7-callable C library source.  
Versions of Lib7 up to 106 used a single monolithic library
of C functions that were callable from Lib7, with a single table
of C function bindings.  This meant that to add a C function,
required changing the run-time system source.  In the new scheme,
the runtime system supports an extensible set of libraries that
are configured at build time.  Note, however, that since the run-
time system and Lib7 heap images are separate files, one can extend
the run-time system with additional libraries and then use existing
Lib7 heap images with the extended run-time system.  See the file
HOWTO-ADD-C-CODE in the notes directory for more details.

The decentralization of the libraries represents a first step in
an ongoing process to make the Lib7/C interface easier to extend.
There will be continue to be changes in the way that these
libraries are organized and supported.  Here is a tentative list
of anticipated changes:

  1) as we move towards the new Lib7 basis, the libraries will be
     reorganized and redefined to reflect the new semantics.

  2) support for non UNIX systems (Windows NT, Windows 95, OS/2,
     and MacOS), will result in different versions of libraries
     for different systems.

  3) the generation of library interfaces will be automated.  We plan
     an extension to Lib7 that we will feed into a preprocessor to
     generate both the Lib7 code that binds the C functions, and the
     C function prototype declarations and library tables (the stuff
     that is in "*/cfun-list.h" and "*/*-lib.c").

  4) support for dynamic loading of C libraries on machines that have
     dynamic linking.

