## graph.api
#
#  A generic directed graph data package.  
#  Implemented in an ``object oriented style''
#  All graphs are based on this interface.
# 
#  -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6



###            "When spider webs unite,
###             they can tie up a lion."
###
###                      -- Ethiopian proverb



api Graph {

    exception BAD_GRAPH  String; #  Bug 
    exception SUBGRAPH;          #  subgraph constraint failure 
    exception NOT_FOUND;         #  element not located 
    exception UNIMPLEMENTED;     #  method is not implemented 
    exception READ_ONLY;         #  modification fails 
    exception NOT_SINGLE_ENTRY;  #  should be single entry 
    exception NOT_SINGLE_EXIT;   #  should be single exit 


    Node_Id = Int;
    Node( N ) = (Node_Id, N); 
    Edge( E ) = (Node_Id, Node_Id, E);

    Graph (N,E,G)
        =
        GRAPH  Graph_Methods (N,E,G)
        withtype
               Graph_Methods (N,E,G)
                   = 
	           { name:             String,
		     graph_info:       G,

		     # Inserting/removing nodes and edges:
		     #
		     new_id:           Void -> Node_Id,
		     add_node:         Node( N ) -> Void,
		     add_edge:         Edge( E ) -> Void, 
		     remove_node:      Node_Id -> Void,
		     set_out_edges:    (Node_Id, List( Edge( E ) )) -> Void,
		     set_in_edges:     (Node_Id, List( Edge( E ) )) -> Void,
		     set_entries:      List( Node_Id ) -> Void,
		     set_exits:        List( Node_Id ) -> Void,

		     # Collect deleted node ids:
		     #
		     garbage_collect:  Void -> Void,

		     # Selectors:
		     #	
		     nodes:            Void -> List( Node( N ) ),
		     edges:            Void -> List( Edge( E ) ),
		     order:            Void -> Int,	#  # nodes 
		     size:             Void -> Int,	#  # edges 
		     capacity:         Void -> Int,	#  max. node_id < capacity 
		     next:             Node_Id -> List( Node_Id ),
		     prior:            Node_Id -> List( Node_Id ),
		     out_edges:        Node_Id -> List( Edge( E ) ),
		     in_edges:         Node_Id -> List( Edge( E ) ),
		     has_edge:         (Node_Id, Node_Id) -> Bool,
		     has_node:         Node_Id -> Bool,
		     node_info:        Node_Id -> N,
		     entries:          Void -> List( Node_Id ),
		     exits:            Void -> List( Node_Id ),
		     entry_edges:      Node_Id -> List( Edge( E ) ),
		     exit_edges:       Node_Id -> List( Edge( E ) ),

		     # Iterators:
		     # 
		     forall_nodes:     (Node( N ) -> Void) -> Void,
		     forall_edges:     (Edge( E ) -> Void) -> Void
		   };

    unimplemented:  X -> Y;

    # Remove one edge i->j from graph: 
    #
    remove_edge
        :
        Graph( N,E,G )
        ->
        (Node_Id, Node_Id)
        ->
        Void;

    remove_edge'
        :
        Graph( N,E,G )
        ->
        (Node_Id, Node_Id, (E -> Bool))
        ->
        Void;

    # Remove all edges i->j from graph: 
    #
    remove_all_edges
	:
        Graph( N,E,G )
        ->
        (Node_Id, Node_Id)
        ->
        Void;

    remove_all_edges'
        :
        Graph( N,E,G )
        -> 
	(Node_Id, Node_Id, (E -> Bool))
        ->
        Void;
};



## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
