## control-flow-graph-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


# The control flow graph representation used for optimizations.
#
# -- Allen Leung

# We get invoked from;
#
#     src/lib/compiler/codegen/ppc/ppc-codetree.pkg
#     src/lib/compiler/codegen/sun/sparc-codetree.pkg
#     src/lib/compiler/codegen/x86/x86-codetree.pkg

generic package control_flow_graph_g (

    package instruction_set:	Instruction_Set;		# Instruction_Set		is from   src/lib/compiler/lower/instruction/instruction-set.api
    package graph_guts:		Graph_Guts;			# Graph_Guts			is from   src/lib/graph/graph-guts.api

    package instruction_properties
	:
	Instruction_Properties					# Instruction_Properties	is from   src/lib/compiler/lower/instruction/instruction-properties.api
	where instruction_set == instruction_set;

    package asm
	:
	Instruction_Emitter					# Instruction_Emitter		is from   src/lib/compiler/lower/emit/instruction-emitter.api
	where instruction_set == instruction_set;
)

: (weak) Control_Flow_Graph					# Control_Flow_Graph		is from   src/lib/compiler/lower/flowgraph/control-flow-graph.api

{
    package instruction_set =  instruction_set;
    package cells           =  instruction_set::cells;
    package pseudo_op       =  asm::instruction_stream::pseudo_op;

    package i = instruction_set;
    package p = pseudo_op;
    package c = cells;
    package g = graph;						# graph				is from   src/lib/graph/graph.pkg
    package s = asm::instruction_stream;
    package a = rw_vector;					# rw_vector			is from   src/lib/std/src/rw-vector.pkg
    package h = int_hash_table;					# int_hash_table		is from   src/lib/src/int-hash-table.pkg
 
    Weight = Float;

    Block_Kind
	= START          #  entry node 
	| STOP           #  exit node 
	| NORMAL         #  normal node 

    also
    Block =
       BLOCK 
       {  id:       Int,                        			# Block id.
          kind:     Block_Kind,                 			# Block kind.
          freq:     Ref( Weight ),                 			# Execution frequency.
          labels:   Ref(  List(  label::Label ) ),			# Labels on blocks.
          instructions:    Ref(  List(  i::Instruction ) ),		# In reverse order.
	  align:    Ref(  Null_Or(  p::Pseudo_Op ) ),			# Alignment only.
          notes:    Ref( note::Notes ) #  Annotations 
       }

    also
    Edge_Kind	    		# edge kinds -- for more info see  src/lib/compiler/lower/flowgraph/control-flow-graph.api
      = ENTRY			# entry edge
      | EXIT            	# exit edge 
      | JUMP			# unconditional jump 
      | FALLSTHRU		# falls through to next block
      | BRANCH  Bool		# branch
      | SWITCH  Int		# Computed goto 
      | FLOWSTO			# FLOW_TO edge 
   
    also
    Edge_Info
        =
        EDGE  {
	  kind:    Edge_Kind,			# Edge kind 
	  weight:  Ref( Weight ),		# Edge freq 
	  notes:   Ref( note::Notes )		# Annotations 
        };

    Edge = graph::Edge( Edge_Info );
    Node = graph::Node( Block );

    Info = 
        INFO { notes:        Ref( note::Notes ),
	       first_block:  Ref( Int ),
	       reorder:      Ref( Bool ),
	       data:         Ref( List( p::Pseudo_Op ) ),
	       decls:	     Ref( List( p::Pseudo_Op ) )
	     };

    Control_Flow_Graph = graph::Graph( Block, Edge_Info, Info );

    fun error msg
        =
        lowcode_error_message::error("control_flow_graph", msg);

    # ========================================================================
    #
    #  Various kinds of annotations 
    #
    # ========================================================================
              #  escaping live out information 
    liveout = note::new 
          (THE (fn c =  "Liveout: " +
                        (line_break::line_break 75 
                            (cells_basis::cell_set::to_string c))));

    exception CHANGED_X  (String, (Void -> Void)); 

    changed
        =
        note::new'
            {
              create    =>  CHANGED_X,
              get       =>  fn CHANGED_X x => x;  e => raise exception e; end,
              to_string =>  fn (name, _) = "CHANGED:" + name
            };

    # ========================================================================
    #
    #  Methods for manipulating basic blocks
    #
    # ========================================================================
    fun define_local_label (BLOCK { labels=>REF (l ! _), ... } )
            =>
            l;

	define_local_label (BLOCK { labels, ... } )
            =>
            {   l = label::make_anonymous_label ();

	        labels := [l];

	        l;
	   };
    end;

    fun instructions (BLOCK { instructions, ... } )
        =
        instructions;

    fun freq  (BLOCK { freq,  ... } )
        =
        freq;

    fun edge_freq (_, _, EDGE { weight, ... } )
        =
        weight;

    fun sum_edge_freqs es
        =
        fold_right
            (fn (e, w) =  *(edge_freq e) + w)
            0.0
            es;

    fun new_block' (id, kind, instructions, freq)
        =
        BLOCK { id,
		kind,
		freq,
		labels => REF [],
		instructions  => REF instructions,
		align  => REF NULL,
		notes  => REF []
	      };

    fun copy_block (id, BLOCK { kind, freq, align, labels, instructions, notes, ... } )
        =
        BLOCK { id,
		kind,
		freq    => REF *freq,
		labels  => REF [],
		align	=> REF *align,
		instructions   => REF *instructions,
		notes   => REF *notes
	      };

    fun new_block (id, freq) =  new_block'(id, NORMAL,[], freq);
    fun new_start (id, freq) =  new_block'(id, START, [], freq);
    fun new_stop  (id, freq) =  new_block'(id, STOP,  [], freq);

    fun new_node (g::GRAPH graph) wt
        =
        {   id = graph.new_id ();
	    nd = (id, new_block (id, REF wt));
	  
	    graph.add_node nd;
	    nd;
	};

    fun branch_of (EDGE { kind => BRANCH b, ... } )
            =>
            THE b;

        branch_of _ 
            =>
            NULL;
    end;

    fun edge_dir (_, _, e)
        =
        branch_of e;

    # ========================================================================
    #
    #  Emit a basic block
    #
    # ========================================================================
    fun kind_name START  =>  "START";
	kind_name STOP   =>  "STOP";
	kind_name NORMAL =>  "Block";
    end;

    fun nl ()
        =
        file::write (*asm_stream::asm_out_stream, "\n");

    fun emit_header
        (s::STREAM { emit_comment, add_note, ... } ) 
        (BLOCK { id, kind, freq, notes,      ... } )
        = 
        {   emit_comment (kind_name kind + "[" + int::to_string id +
                    "] (" + float::to_string *freq + ")");
            nl();
            apply  add_note  *notes;
        }; 

    fun emit_footer (s::STREAM { emit_comment, ... } ) (BLOCK { notes, ... } )
        = 
        case (liveout.get  *notes)
          
	     THE s
                 => 
		 {   regs = string::tokens char::is_space (cells_basis::cell_set::to_string s);

		     kkk = 7;

		     fun f (_,     [], s, l) =>  s ! l;
			 f (0,     vs, s, l) =>  f (kkk, vs, "   ", s ! l);
			 f (n,    [v], s, l) =>  v + s ! l;
			 f (n, v ! vs, s, l) =>  f (n - 1, vs, s + " " + v, l);
                     end;

		     text = reverse (f(kkk, regs, "",[]));

		     apply
                         (fn c =  { emit_comment c;   nl(); })
                         text;
		 };

	     NULL => ();
        esac
        except
            OVERFLOW =  print("Bad footer\n");

    fun emit_stuff
            outline
            notes
           (block as BLOCK { instructions, labels, ... } )
       =
       {   my s as s::STREAM { emit_pseudo_op, define_local_label, emit, ... }
                = 
                asm::make_stream  notes;

           emit_header  s  block;
           apply  define_local_label *labels; 

           if   (not outline)
               
                apply emit (reverse *instructions);
           fi;

           emit_footer s block;
       };

    emit         =  emit_stuff FALSE; 
    emit_outline =  emit_stuff TRUE [];
 

    # ========================================================================
    #
    #  Methods for manipulating control_flow_graph
    #
    # ========================================================================

    fun cfg info
        =
        graph_guts::graph("CFG", info, 10);

    fun new ()
        =
        {   info = INFO { notes => REF [],
			  first_block => REF 0,
			  reorder     => REF FALSE,
			  data        => REF [],
			  decls       => REF []
			};
            cfg info;
        };

    fun subgraph (cfg'' as g::GRAPH { graph_info => INFO graph_info, ... } )
        =
        {   info = INFO { notes       =>  REF [],
			  first_block =>  graph_info.first_block,
			  reorder     =>  graph_info.reorder,
			  data        =>  graph_info.data,
			  decls       =>  graph_info.decls
			};

            update_graph_info::update cfg'' info;
        };

    fun init (g::GRAPH cfg)
        =
        case (cfg.entries ())
          
	     []  =>
		 {   i     = cfg.new_id ();
		     start = new_start (i, REF 0.0);

		     cfg.add_node (i, start);

		     j     = cfg.new_id ();
		     stop  = new_stop (j, REF 0.0);

		     cfg.add_node (j, stop); 
		  #  cfg.add_edge (i, j, EDGE { k=ENTRY, w=REF 0, a=REF [] } ); 
		     cfg.set_entries [i];
		     cfg.set_exits [j];
		 };

	    _ => ();
        esac; 


    fun mark_as_changed (g::GRAPH { graph_info=>INFO { reorder, notes, ... }, ... } )
        = 
        {   fun signal []
                    =>
                    ();

                signal (CHANGED_X(_, f) ! notes)
                    =>
                    {   f ();
                        signal notes;
                    };

                signal(_ ! notes)
                    =>
                    signal notes;
            end;

            signal *notes;

            reorder := TRUE;
        }; 

    fun notes (g::GRAPH { graph_info=>INFO { notes, ... }, ... } )
        =
        notes;

    fun live_out (BLOCK { notes, ... } )
        = 
        case (liveout.get *notes)
	    THE s =>  s;
	    NULL  =>  c::empty;
        esac;

    fun falls_thru_from (g::GRAPH cfg, b)
        =
        f (cfg.in_edges b)
        where
            fun f [] => NULL;
                f((i, _, EDGE { kind => BRANCH FALSE, ... } ) ! _) =>  THE i;
                f((i, _, EDGE { kind => FALLSTHRU,    ... } ) ! _) =>  THE i;
                f(_ ! es) => f es;
            end;
        end;

    fun falls_thru_to (g::GRAPH cfg, b)
        =
        f (cfg.out_edges b)
        where
            fun f [] => NULL;
		f((_, j, EDGE { kind => BRANCH FALSE, ... } ) ! _) =>  THE j;
		f((_, j, EDGE { kind => FALLSTHRU,    ... } ) ! _) =>  THE j;
		f(_ ! es) => f es;
            end;
        end;

    fun remove_edge cfg'' (i, j, EDGE { notes, ... } )
        =
        graph::remove_edge'
            cfg'' (
                i,
                j,
                fn EDGE { notes => notes', ... }
                    =
                    notes == notes'
            );

    fun set_branch (cfg'' as g::GRAPH cfg, b, cond)
	=
	{   fun loop ((i, j, EDGE { kind => BRANCH cond', weight, notes } ) ! es, es', x, y)
		    =>
		    if (cond' == cond)
		         
		       loop (es, (i, j, EDGE { kind => JUMP, weight, notes } ) ! es', j, y);
		    else
		       loop (es, es', x, j);
                    fi;

	        loop([], es', target, elim)
                    =>
                    (es', target, elim);

	        loop _ => error "set_branch";
            end;

	    out_edges
                =
                cfg.out_edges  b;

	    my (out_edges', target, elim)
                =
                loop (out_edges,[],-1,-1);

	    if   (elim < 0)
                
                 error "setBranch: bad edges";
            fi;

	    lab   =  define_local_label (cfg.node_info target); 
	    jmp   =  instruction_properties::jump lab;
	    instructions =  instructions (cfg.node_info b); 

	    cfg.set_out_edges (b, out_edges');

	    case *instructions
              
	         []  =>
                     error "set_branch: missing branch";

	         branch ! rest
                     => 
	             case (instruction_properties::instruction_kind  branch)
                       
		          instruction_properties::IK_JUMP
                              =>
                              instructions := jmp ! rest;

	                  _   =>
                              error "set_branch: bad branch instruction";
                     esac;
            esac;

	    jmp;
	};

    stipulate

	fun get_node (g::GRAPH { node_info, ... }, id)
            =
            (id, node_info id);

    herein

	fun entry_id (g::GRAPH { entries, ... } )
	    =
	    case (entries())
	      
		 [id] =>  id;
		  _   =>  error "no unique entry block";
	    esac;

	fun entry cfg
	    =
	    get_node (cfg, entry_id cfg);

	fun exit_id (g::GRAPH { exits, node_info, ... } )
	    =
	    case (exits())
	      
		 [id] =>  id;
		  _   =>  error "no unique exit block";
	    esac;

	fun exit cfg
	    =
	    get_node (cfg, exit_id cfg);
    end;

    exception CANNOT_MERGE;
    exception NOT_FOUND;

    fun label_of (g::GRAPH cfg) node
	=
	define_local_label (cfg.node_info node);

    fun copy_edge (EDGE { notes, weight, kind } )
	=
	EDGE { notes  => REF *notes,
               weight => REF *weight,
               kind
             };

    # =====================================================================
    #
    #  Check whether block i must precede block j in any linear layout.
    #  This may be TRUE if i falls through to j (transitively)
    #
    # =====================================================================
    fun must_precede (g::GRAPH cfg) (i, j)
	=
	(   i == j
            or
	    chase (cfg.in_edges j)
        )
        where
	    visited =  h::make_table (23, NOT_FOUND);

	    fun chase []
		    =>
		    FALSE;

	        chase((u, v, EDGE { kind => (FALLSTHRU|BRANCH FALSE), ... } ) ! _)
		    =>
		    if (h::contains_key visited u)
		         FALSE;
		    else
                         u == i
                         or
                         {   h::set visited (u, TRUE);
                             chase (cfg.in_edges u);
                         };
                    fi;

	        chase(_ ! es)
		    =>
		    chase es;
            end;
	end;

    # =====================================================================
    #
    #  Predicates on nodes and edges
    #
    # =====================================================================
    fun is_merge (g::GRAPH cfg) node = length (cfg.in_edges node) > 1;
    fun is_split (g::GRAPH cfg) node = length (cfg.out_edges node) > 1;
 /*
    fun hasSideExits (g::GRAPH cfg) node = 
	  list::exists (fn (_, _, EDGE { kind=SIDEEXIT _, ... } ) => TRUE 
			| _ => FALSE) (cfg.out_edges node)
 */

    fun has_side_exits _ _
        =
        FALSE;

    fun is_critical_edge cfg'' (_, _, EDGE { kind=>ENTRY, ... } ) => FALSE;
        is_critical_edge cfg'' (_, _, EDGE { kind=>EXIT,  ... } ) => FALSE;
        is_critical_edge cfg'' (i, j, _) => is_split cfg'' i and is_merge cfg'' j;
    end;

    # =====================================================================
    #
    #  Update the label of the branch instruction in a certain block
    #  to be consistent with the control flow edges.  This doesn't work
    #  on hyperblocks!!!
    #
    # =====================================================================
    fun update_jump_label (cfg'' as g::GRAPH cfg)
	=
	update
        where
	    label_of = label_of cfg'';

	    fun update node
		=
		case (cfg.node_info node)
		  
		    BLOCK { instructions => REF [], ... } =>  ();
		    BLOCK { kind  => START,  ... } =>  ();
		    BLOCK { kind  => STOP,   ... } =>  ();

		    BLOCK { instructions => instructions as REF (jmp ! rest), ... }
			=> 
			case (cfg.out_edges node)

			    [] => ();

			    [(_, _, EDGE { kind => (ENTRY | EXIT), ... } )]
				=>
				();

			    [(i, j, _)]
				=>
				if   (instruction_properties::instruction_kind jmp == instruction_properties::IK_JUMP)

				     instructions := instruction_properties::set_jump_target (jmp, label_of j) ! rest;
				fi;

			    [ (_, i, EDGE { kind => BRANCH x, ... } ),
			      (_, j, EDGE { kind => BRANCH y, ... } )
			    ]
				=>
				{   my (no, yes)
					=
					x  ??  (j, i)
					   ::  (i, j);

				    instructions
					:= 
					instruction_properties::set_branch_targets { i=>jmp,
					     f=>label_of no, t=>label_of yes } ! rest;
				};

			    es  =>
				{   fun gt ((_, _, EDGE { kind => SWITCH i, ... } ),
					    (_, _, EDGE { kind => SWITCH j, ... } ))
					    =>
					    i > j;

					gt _
					    =>
					    error "gt";
				    end;

				    es     =  list_mergesort::sort  gt  es;
				    labels =  map  (fn (_, j, _) =  label_of j)  es;

				    error "update_jump_label";
				};
			esac;
		esac;
	end;

    # =====================================================================
    #
    #  Merge a control flow edge i -> j.
    #  Raise Can't Merge if it is illegal.
    #  After merging blocks i and j will become block i.
    #
    # =====================================================================
    fun merge_edge (cfg'' as g::GRAPH cfg) (i, j, e as EDGE { weight, kind, ... } )
	= 
	{   case kind
              
		 (ENTRY | EXIT) =>  raise exception CANNOT_MERGE;
		 _              =>  ();
            esac; 

	    case (cfg.out_edges i, cfg.in_edges j)

		([(_, j', _)],[(i', _, _)])
		    => 
		    if (j' != j or i' != i)   raise exception CANNOT_MERGE;   fi;

	       _ => raise exception CANNOT_MERGE;
            esac;  

	    if (must_precede cfg'' (i, j))
                
                 raise exception CANNOT_MERGE;
            fi;

	    (cfg.node_info j)
		->
	        BLOCK { align=>d2, instructions=>i2, notes=>notes2, ... };

	    case *d2
                THE _ => ();
                _     => raise exception CANNOT_MERGE;
            esac;

	    (cfg.node_info i)
		->
	        BLOCK { align=>d1, instructions=>i1, notes=>notes1, ... }; 

	    # If both blocks have annotations then don't merge them.
	    # Instead, just try to remove the jump instruction:
	    #
	    can_merge
                =
                case (*notes1, *notes2)   
		    (_ ! _, _ ! _) => FALSE;
		    _              => TRUE;
		esac;

	    instructions1
                =
                case *i1   

		    instructions as jmp ! rest
                        => 
			instruction_properties::instruction_kind jmp == instruction_properties::IK_JUMP
			    ??  rest
                            ::  instructions;

		    [] => [];
                esac;

	    if can_merge

		 i1 := *i2 @ instructions1;

		 notes1 :=  *notes1 @ *notes2;

		 cfg.set_out_edges 
		   ( i,
                     map (fn (_, j', e) = (i, j', e))
                         (cfg.out_edges j)
                   );

		 cfg.remove_node j;
		 update_jump_label cfg'' i;

	    else
                 # Just eliminate the jump
                 # instruction at the end:
		 # 
		 i1 := instructions1;
		 #
		 cfg.set_out_edges 
		   ( i,
                     map (fn (i, j, EDGE { weight, notes, ... } )
			      =
			      (i, j, EDGE { kind => FALLSTHRU, weight, notes } )
			  )
			  (cfg.out_edges i)
                   );
	    fi;

	    TRUE;
	}
        except
            CANNOT_MERGE = FALSE;

    # =====================================================================
    #
    #  Eliminate the jump at the end of a basic block if feasible
    #
    # =====================================================================
    #
    fun eliminate_jump (cfg'' as g::GRAPH cfg) i
        = 
	case (cfg.out_edges i)
          
	   [e as (i, j, EDGE { kind, weight, notes } )]
              =>
	      case (falls_thru_from (cfg'', j))
                
		   THE _ => FALSE;

		   NULL => 
		       if (must_precede cfg'' (j, i))
                           FALSE;
		       else 
			   my BLOCK { instructions, ... } =  cfg.node_info  i;
			   my BLOCK { align, ... } =  cfg.node_info  j;

			   case (*align, *instructions)

				(NULL, jmp ! rest)
				    =>
				    if (instruction_properties::instruction_kind jmp == instruction_properties::IK_JUMP) 

					instructions := rest;
					remove_edge cfg'' e;
					cfg.add_edge (i, j, EDGE { kind => FALLSTHRU, weight, notes } );
					TRUE;
				    else
                                        FALSE;
                                    fi;

				_ => FALSE;
			   esac;
		       fi;
              esac;

	  _ => FALSE;
        esac;


    # =====================================================================
    #
    #  Insert a jump at the end of a basic block if feasible
    #
    # =====================================================================
    fun insert_jump (cfg'' as g::GRAPH cfg) i
        =
	case (cfg.out_edges i)
          
	     [e as (i, j, EDGE { kind => FALLSTHRU, weight, notes, ... } )]
                 =>
		 {   my BLOCK { instructions, ... }
                         =
                         cfg.node_info i;

		     instructions := instruction_properties::jump (label_of cfg'' j) ! *instructions;

		     remove_edge cfg'' e;

		     cfg.add_edge (i, j, EDGE { kind => JUMP, weight, notes } );

		     TRUE;
		 };

	     _ => FALSE;
        esac;



    # =====================================================================
    #
    #  Split a group of control flow edge.
    #
    #  Split n groups of control flow edges, all initially entering block j,
    #
    #     i_11 -> j,  i_12 -> j, ...         group 1
    #     i_21 -> j,  i_22 -> j, ...         group 2
    #             ....
    #     i_n1 -> j,  i_n2 -> j, ...         group n
    #  
    #  into 
    #
    #     i_11 -> k_1 
    #     i_12 -> k_1
    #        ...
    #     i_21 -> k_2
    #     i_22 -> k_2
    #        ...
    #     i_n1 -> k_n
    #     i_n2 -> k_n
    #        ...
    # 
    #  and k_1 -> k_2
    #      k_2 -> k_3
    #        ...
    #      k_n -> j
    # 
    #  Return the new edges 
    #       k_1->j, ..., k_n -> j 
    #
    #  and the new blocks 
    #       k_1, ..., k_n.
    #
    #  Each block k_1, ..., k_n can have instructions placed in them.
    #
    #  If the jump flag is TRUE, then a jump is always placed in the 
    #  new block k_n; otherwise, we try to eliminate the jump when feasible.
    #
    # =====================================================================

    fun split_edges (cfg'' as g::GRAPH cfg) { groups => [], jump }
            =>
            [];

        split_edges (cfg'' as g::GRAPH cfg) { groups as ((first, _) ! _), jump }
            => 
	    {   # Target of all the edges:
		#
		j = { my (_, j, _) = head first;  j; };

		# Insert an edge i->j with frequency freq.
		# It is a jump edge iff jump flag is TRUE or
		# some other block is already falling into j:
		#
		fun insert_edge (i, j, node_i, freq, jump)
		    = 
		    {   kind = if (jump or not_null (falls_thru_from (cfg'', j)) ) 
				   instructions_i = instructions node_i;
				   instructions_i := instruction_properties::jump (label_of cfg'' j) ! *instructions_i;
				   JUMP;
			       else
				   FALLSTHRU;
                               fi;

			edge_info
                            =
                            EDGE { kind,
                                   weight => REF freq,
                                   notes => REF []
                                 };

			edge = (i, j, edge_info);
		        cfg.add_edge edge;
			edge;
		    };

		# Redirect all edges:
		#
		fun redirect ([], freq, new)
                        =>
                        new;

		    redirect((edges, instructions) ! groups, freq, new)
			=> 
			{
			    freq = sum_edge_freqs edges + freq;		# Freq of new block. 

			    # Sanity check
			    #
			    fun check []
                                    =>
                                    ();

			        check((u, v, _) ! es)
				    => 
				    {   if (v != j)  error "splitEdge: bad edge";  fi;
				        check es;
				    };
                            end;

			    my () = check edges; 

			    k = cfg.new_id ();		# New block id.

			    node_k
                                =
				BLOCK
                                  { id     => k,
                                    kind   => NORMAL, 
				    freq   => REF freq,
                                    align  => REF NULL,
                                    labels => REF [],
                                    notes  => REF [],
				    instructions  => REF instructions
                                  };

			    apply (remove_edge cfg'') edges;

			    apply (fn (i, _, e) =  cfg.add_edge (i, k, e))
                                  edges;

			    cfg.add_node (k, node_k);

			    redirect (groups, freq, (k, node_k, edges, freq) ! new); 
			};
                end;

		new = redirect (groups, 0.0, []);

		# Add the edges on the chain:
		#
		fun postprocess ([], next, new)
			=>
			new;

		    postprocess((k, node_k, edges, freq) ! rest, next, new)
			=>
			{   jump   =   next == j and jump; 

			    edge   =   insert_edge (k, next, node_k, freq, jump);

			    postprocess (rest, k, ((k, node_k), edge) ! new);
			};
                end;

		new = postprocess (new, j, []);

	        # Update the labels on the groups:
		#
		apply
                    (fn (es, _)
                        =
                        apply
                            (fn (i, _, _)
                                =
                                update_jump_label cfg'' i
                            )
                            es
                    )
                    groups;
		new;
	    };
        end; 

    # =====================================================================
    #
    #  Split all critical edges in the CFG
    #
    # =====================================================================
    fun split_all_critical_edges (cfg' as g::GRAPH cfg)
	=
	{   has_changed = REF FALSE;

	    cfg.forall_edges 
		(fn e = if (is_critical_edge cfg' e)
			    split_edges cfg' { groups => [([e], [])], jump => FALSE }; 
			    has_changed := TRUE;
			fi
                );

	    if *has_changed  mark_as_changed cfg'; fi;
	}; 

    # =====================================================================
    #
    #  Tail duplicate a region until there are no side entry edges
    #  entering into the region.  Return the set of new edges and nodes
    #
    # =====================================================================
    fun tail_duplicate (cfg' as g::GRAPH cfg:  Control_Flow_Graph) 
		      { root, subgraph=>g::GRAPH subgraph:  Control_Flow_Graph  }
	=
	{   block_map = h::make_table (10, NOT_FOUND);

	    print("[root " + int::to_string root + "]\n");

	    fun duplicate v
		=
		h::get  block_map v
                except
                    NOT_FOUND
                        =
			{   w  = cfg.new_id ();
			    w' = copy_block (w, cfg.node_info v);
			    cfg.add_node (w, w');
			    h::set block_map (v, (w, w'));

			    apply cfg.add_edge
				(map (fn (i, j, e) => (w, j, copy_edge e); end ) (cfg.out_edges v));

			    update_jump_label cfg' w;

			    (w, w');
			};

	    fun process ((n, _) ! rest, ns, ns', es)
		    =>
		    process (rest, collect (subgraph.entry_edges n, ns), ns', es);

		process([], ns, ns', es)
		    =>
		    dupl (ns, ns', es, FALSE);
	    end 

	    also
            fun collect ([], ns) => ns;
		 collect((i, _, _) ! es, ns) => collect (es, if (i == root ) ns; else i ! ns;fi);
	    end 

	    also
            fun dupl ([], ns, es, changed)
                    =>
                    (ns, es, changed);

		dupl (n ! ns, ns', es, changed)
                    =>
		   redirect (cfg.out_edges n, ns, ns', es, changed);
	    end    

	    also
            fun redirect ([], ns, ns', es, changed)
                    =>
                    dupl (ns, ns', es, changed);

		 redirect((u, v, e) ! es, ns, ns', es', changed)
		     =>
		     if  (v != root and
			  cfg.has_edge (u, v) and
			  subgraph.has_node v and 
			  not (subgraph.has_edge (u, v))
                         )

			  # u -> v is a side entry edge, duplicate v
			  #
			  print("[tail duplicating " + int::to_string u + " -> "  + int::to_string v + "]\n");

			  my (w, w') =  duplicate v;

			  remove_edge cfg' (u, v, e);
			  cfg.add_edge (u, w, e);
			  update_jump_label cfg' u;
			  redirect (es, w ! ns, (w, w') ! ns', (u, w, e) ! es', TRUE);
		     else redirect (es, ns, ns', es', changed);
                     fi;
	    end;

	    fun iter (ns, es)
		= 
		{   my (ns, es, has_changed)
			=
			process (subgraph.nodes (),[], ns, es);

		    if has_changed
			 mark_as_changed cfg';
			 iter (ns, es);
		    else
			 { nodes=>ns, edges=>es };
		    fi;
		};

	    iter([],[]); 
	};


    # =====================================================================
    #
    #  Remove unreachable code in the CFG
    #
    # =====================================================================
    fun remove_unreachable_code (cfg' as g::GRAPH cfg)
	=
	{   nnn     =  cfg.capacity ();
	    visited =  a::make_rw_vector (nnn, FALSE);

	    fun mark n
                =
                if (not (a::get (visited, n)))
                    a::set (visited, n, TRUE);
                    apply mark (cfg.next n);
                fi;

	    has_changed = REF FALSE;

	    fun remove (b, BLOCK { align, instructions, ... } )
		=
		if (not (a::get (visited, b)))
		    
		     has_changed :=TRUE;

		     case (cfg.in_edges b)
		       
			  [] => cfg.remove_node b;

			  _  => {   instructions := [];
				    cfg.set_out_edges (b,[]);
				};
		     esac;

		fi;

	    apply mark (cfg.entries ());
	    cfg.forall_nodes remove;

	    if *has_changed   mark_as_changed cfg';   fi;
	};


    # =====================================================================
    #
    #  Merge all edges in the CFG.
    #  Merge higher frequency edges first
    #
    # =====================================================================
    fun merge_all_edges (cfg' as g::GRAPH cfg)
	=
	{   merge_edge = merge_edge cfg';

	    fun higher_freq ((_, _, EDGE { weight => x, ... } ), (_, _, EDGE { weight => y, ... } ))
		=
		*x < *y;

	    fun merge_all ([], changed)
                    =>
                    changed;

		merge_all (e ! es, changed)
                    =>
                    merge_all (es, merge_edge e or changed);
	    end; 

	    # Note: sort expects the gt operator
            # and sorts in ascending order:
	    #
	    has_changed = merge_all (list_mergesort::sort higher_freq (cfg.edges ()),
				      FALSE);

	    if has_changed   mark_as_changed cfg';   fi;
	};

    # ========================================================================
    #
    #  Miscellaneous 
    #
    # ========================================================================
    fun cdg_edge (EDGE { kind, ... } )
	= 
	case kind
	  
	    (JUMP | FALLSTHRU) =>   FALSE;
	    _                  =>   TRUE;
	esac;

    # ========================================================================
    #
    #  Pretty Printing and Viewing 
    #
    # ========================================================================

     package f =  sfprintf;				# sfprintf	is from   src/lib/src/sfprintf.pkg

     fun show_edge (EDGE { kind, weight, notes, ... } )
	 =
	 {   kind =  case kind
			 JUMP		=> "jump";
			 FALLSTHRU	=> "fallsthru";
			 BRANCH b	=> bool::to_string b;
			 SWITCH i	=> int::to_string i;
			 ENTRY		=> "entry";
			 EXIT		=> "exit";
			 FLOWSTO	=> "flowsto";
		     esac;

	     f::sprintf' "%s[%f]" [f::STRING kind, f::FLOAT *weight];
	 };

     fun get_string f x
	 =
	 {   buffer = string_out_stream::make_stream_buf();
	     sss    = string_out_stream::open_string_out buffer;

	     asm_stream::with_stream sss f x; 

	     string_out_stream::get_string buffer;
	 };

     fun show_block an block
	 =
	 {   text = get_string (emit an) block;

	     fold_right
                 fn (x, "") => x;
                    (x,  y) => x + " " + y;
                 end
                 ""
	         (string::tokens
                      fn ' ' => TRUE;
                           _ => FALSE;
                      end
                      text
                 );
	 };

     fun dump_block (out_s, cfg as g::GRAPH g)
	 =
	 {   fun print str
                 =
                 file::write (out_s, str);

	     fun print_list []  =>  ();
		 print_list [i] =>  print i;

		 print_list (h ! t)
                     =>
                     {   print (h + ", ");
                         print_list t;
                     };
	     end;

	     my asm::instruction_stream::STREAM { emit, define_local_label, add_note, ... }
		  = 
		  asm_stream::with_stream out_s asm::make_stream [];

	     fun show_freq (REF w)
                 =
                 f::sprintf' "[%f]" [f::FLOAT w];

	     fun show_edge' (blknum, e)
		 = 
		 f::sprintf' "%d:%s" [f::INT blknum, f::STRING (show_edge e)];

	     fun show_succ (_, x, e) = show_edge' (x, e);
	     fun show_pred (x, _, e) = show_edge' (x, e); 

	     fun show_succs b
		 =
		 {   print "\tsucc:     "; 
		     print_list (map show_succ (g.out_edges b)); 
		     print "\n";
		 };

	     fun show_preds b
		 =
		 {   print "\tpred:     "; 
		     print_list (map show_pred (g.in_edges b)); 
		     print "\n";
		 };

	     fun print_block (_, BLOCK { kind=>START, id, freq, ... } )
		     =>
		     {   print (f::sprintf' "ENTRY %d %s\n" [f::INT id, f::STRING (show_freq freq)]);
			 show_succs id;
		     };

		 print_block (_, BLOCK { kind=>STOP, id, freq, ... } )
		     =>
		     {   print (f::sprintf' "EXIT %d %s\n" [f::INT id, f::STRING (show_freq freq)]);
			 show_preds id;
		     };

		 print_block (_, BLOCK { id, align, freq, instructions, notes, labels, ... } )
		     =>
		     {   print (f::sprintf' "BLOCK %d %s\n" [f::INT id, f::STRING (show_freq freq)]);

			 case *align
			   
			       NULL  => ();
			       THE p => (print (p::to_string p + "\n"));
			 esac;

			 list::apply  add_note            *notes;
			 list::apply  define_local_label  *labels;

			 show_succs id;
			 show_preds id;

			 list::apply emit (list::reverse *instructions);
		     };
	     end;

	     print_block;
	 };

     fun dump (out_s, title, cfg as g::GRAPH g)
	 =
	 {   fun print str
		 =
		 file::write (out_s, str);

	     notes = *(notes cfg);

	     my asm::instruction_stream::STREAM { add_note, ... }
		 = 
		 asm_stream::with_stream
                     out_s
                     asm::make_stream
                     notes;

	     fun print_data ()
		 =
		 {   g.graph_info ->  INFO { data, ... };

		     list::apply (print o p::to_string)
                                 (reverse *data);
		 };

	     print (f::sprintf' "[ %s ]\n" [f::STRING title]);

	     list::apply  add_note  notes;

	     #  print_block entry; 

	     asm_stream::with_stream out_s g.forall_nodes (dump_block (out_s, cfg));

	     #  print_block exit; 

	     asm_stream::with_stream out_s print_data ();

	     file::flush out_s;
	 };

};



## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
