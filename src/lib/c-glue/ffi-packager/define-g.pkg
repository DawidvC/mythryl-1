
# This module encapsulates all the ugliness in dealing with C macros.


package define_g:  Define_Gen {

   package g  = ml_grinder
   package a  = g::Ast
   package u  = g::AstUtil
   package re = g::RE

   use G

   package s = red_black_set_g (type Key = a::id   compare = string::compare)
   package m = red_black_map_g (type Key = a::id   compare = string::compare)   

   enum define =
      DEFINE of { name: Ast::id,
                 args: Null_Or(  List(  Ast::id ) ),
                 body: String,
                 exp:  Ref( Ast::exp ),
                 rank:  Ref( Int ),
                 line: Int
                }
   enum define_info = C_DEFINES of m::Map( define )

   exception Illegal

   basis = "infix << >> &"

   #  Accessors 
   fun line (DEFINE { line, ... } ) = line
   fun name (DEFINE { name, ... } ) = name
   fun exp (DEFINE { exp, ... } ) = exp
   fun body (DEFINE { body, ... } ) = body
   fun args (DEFINE { args, ... } ) = args

   #  How to tokenize cpp stuff  
   getDefine = re::grep "^\\s*#\\s*define ([a-zA-Z0-9_]+)(\\([a-zA-Z0-9_, ]*\\))?\\s+(.+)"
   get_line   = re::grep ("^#\\s*\\d+\\s+[\"<](.*)[\">]")
   getArgs   = re::findAll "[a-zA-Z0-9_]+"

   hex     = string_conversion::scan_string (integer::scan string_conversion::HEX) 
   signbit = integer::pow (integer::from_int 2, 31)

   fun convert e
       =
       {   fun exp (e as a::IDexp (a::IDENT([], x)))
               = 
	       (case x of
		 (">>" | "<<") => a::IDexp (a::IDENT(["mlrep", "SignedBitOps"], x))
	       | ("typedef" | "int" | "short" | "char" | "float" | "double" 
		 | "struct" | "union" | "void") => raise exception Illegal
	       | x => if re::matches "^_" x then raise exception Illegal else 
		      case re::grep "^0[xX]([\\da-fA-F]+)$" x of  
			     #  Bug in ml-grinder 
			THE [i] =>
			 (case hex i of
			   THE i => 
			    { i = 
				if integer.>=(i, signbit)
                                then
				   integer.-(i, integer::pow (integer::from_int 2, 32))
				else i;

			        a::LITexp (a::INT32lit
				    (int32::fromLarge (integer::toLarge i)))
				   except e => 
				     (print("Bad int: "$integer::to_string i$"\n"); 
				      raise exception e);
			    }
			 | NULL => raise exception Illegal
			 )
		      | _ => e
	       )
	     | exp (a::LISTexp _) = raise exception Illegal
	     | exp e = e;

           exp::map[Map::E exp] e;
       }

   fun ok (e as a::LITexp _) = e
     | ok (e as a::IDexp _) = e
     | ok _ = raise exception Illegal #  for now 

   fun parseExp exp
       =
       {   s =   *g::silent;

	   fun undo ()
               =
               g::silent := s;

           g::silent := TRUE;

	   (   case exp::parse("stipulate "$basis$" herein "$exp$" end")

	         of a::LETexp(_,[e]) => {  undo;   ok (convert e); }
	          | _                => {  undo(); raise exception Illegal; }
	   )
           except
               e => {   undo();
                        raise exception e;
                    }
       }

   fun parseDefine line
       =
       case getDefine line

         of THE [name, args, body]
                =>
                (   {   args =   if args == ""   then NULL
                                                 else THE (getArgs args);

                        THE (name, args, body, REF (parseExp body));
                    }
                    except _ => NULL
                )
       | _ => NULL

   #  Get dependences 
   fun depends e
       =
       {   fun exp (a::IDexp (a::IDENT([], x)), S) = s::add (S, x)
	     | exp(_, S) = S;

           exp::fold[Fold::E exp] s::empty e
       }

   fun readDefines (filename, re)
       =
       {   lines =   io::read_lines filename   except _ => [];

	   get_line =   re::grep ("^#\\s*\\d+\\s+[\"<](.*)[\">]");
	   ok       =   re::matches re;

	   fun define ([], tbl, accept, i) = tbl

	     | define (line . lines, tbl, accept, i)
	       = 
	       case get_line line
		 of THE[file] => define (lines, tbl, ok file, i+1)
		  | _ =>
		    if not accept
		    then define (lines, tbl, FALSE, i+1);
		    else
			 case parseDefine line

			   of   NULL
				    =>
				    define (lines, tbl, accept, i+1);

			    |   THE (name, args, body, exp)
				    =>
				    {   d = DEFINE { name,
						       args,
						       body,
						       exp,
						       rank=REF 0,
						       line=i };

					define (lines, m::set (tbl, name, d), accept, i+1)
				    }


	   table =   define (lines, m::empty, FALSE, 0);

	    #  Prune out undefined stuff 
	   fun prune ([], WL', FALSE, D) = D
	     | prune([], WL', TRUE, D)  = prune (WL', [], FALSE, D)
	     | prune (d . ds, WL', changed, D)
		   =
		   {   fun look d
                           =
                           null_or::the (m::find (table, d));

		       my DEFINE { exp, args, rank, ... }
                           =
                           look d;

		       args =   fold_right (fn (x, S) => s::add (S, x)) 
				     s::empty (null_or::the_else (args,[]));

		       dep  =   s::difference (depends *exp, args);

		       fun rankOf i
                           =
                           1
                           +
                           s::fold_right
                               (   fn (d, r)
                                      =>
				      {   my DEFINE { rank, ... }
                                              =
                                              look d;

				          int::max (*rank, r);
                                      }
                               )
                               -1
                               dep;

		       if s::is_empty (s::difference (dep, D))
                       then
			  (rank := rankOf dep;
			   prune (ds, WL', TRUE, s::add (D, d)) 
			  )
		       else
			  prune (ds, d . WL', changed, D);
		   }

	   ddd =   prune (m::listKeys table, [], FALSE, s::empty);

	   table =   m::keyed_filter (fn (d, _) => s::member (ddd, d)) table;

	   C_DEFINES table;
       }


   signedTy   =   a::IDty (a::IDENT(["mlrep", "Signed"],   "int"));
   unsignedTy =   a::IDty (a::IDENT(["mlrep", "Unsigned"], "word"));

   fun toUnsigned (x as a::LITexp (a::WORDlit _)) = a::TYPEDexp (x, unsignedTy)
     | toUnsigned (x as a::LITexp (a::WORD32lit _)) = a::TYPEDexp (x, unsignedTy)

     | toUnsigned (x as a::LITexp (a::INTlit i))
           = 
           a::TYPEDexp (u::WORD32exp (unt32::from_int i), unsignedTy)

     | toUnsigned (x as a::LITexp (a::INT32lit i))
           = 
           a::TYPEDexp (u::WORD32exp (unt32::from_large_int i), unsignedTy);

     | toUnsigned e
           =
           e;

   fun toSigned (x as a::LITexp (a::INTlit i)) = a::TYPEDexp (x, signedTy)
     | toSigned (x as a::LITexp (a::INT32lit i)) = a::TYPEDexp (x, signedTy)
     | toSigned (a::LITexp (a::WORDlit w)) = 
          a::TYPEDexp (u::INT32exp (unt::toLargeIntX w), signedTy)
     | toSigned (a::LITexp (a::WORD32lit w)) = 
          a::TYPEDexp (u::INT32exp (unt32::toLargeIntX w), signedTy)
     | toSigned e = e

   fun orderByRankAndName
         (DEFINE { name=x, exp=e1, rank=r1, ... },
          DEFINE { name=y, exp=e2, rank=r2, ... } ) = 
             case int::compare(*r1,*r2) of
               EQUAL => string.>(x, y)
             | GREATER => TRUE
             | LESS => FALSE

   sortByRankAndName = list_mergesort::sort orderByRankAndName

   fun listDefines (C_DEFINES t)
       =
       sortByRankAndName (m::vals_list t);

   fun findDefines defines re
       =
       {   ok  =   re::matches re ;
           ok2 =   not o re::matches "^_";

           fun f (DEFINE { name, ... } )
                =
                ok name and ok2 name;

           list::filter f (listDefines defines);
       }

   fun genDefine f (DEFINE { name, args, exp, body, ... } )
       = 
       {   fun makeArgs xs
               =
               a::TUPLEpat (map a::IDpat xs);

	   e = *exp;

           case args of
	     NULL      => u::MY (name, f e)
	   | THE args => u::FUN (name, makeArgs args, f e);
       }
      
   fun genConstants defines { regexp, signed }
       = 
       {   defs = findDefines defines regexp;
	   convert  = if signed then toSigned else toUnsigned;
	   convert  = exp::map [Map::E convert] ;

           a::SEQdecl (
               comment [ "#define's matching "$regexp ]
               .
	       map (genDefine convert) defs
           };
       }

};	# package


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
