## execute.pkg
## (C) 2001 Lucent Technologies, Bell labs

# Compiled by:
#     src/lib/compiler/execution/execute.make6


###          "Walking on water and developing
###           software from a specification
###           are both easy if they are frozen."
###
###                     -- Edward V Berard



/*****************************************************************************
 *                        EXECUTING THE EXECUTABLE                           *
 *****************************************************************************/

package execute
: (weak)
api {

    exception LINK;			# For compilation manager to
					# signal to interactive loop that
					# error messages have been issued
					# already.  The interactive loop
					# should simply discard this
					# exception (keep quiet) and
					# go to the next input prompt.

    make_executable_closure
        :
        { code_segments
              :
              code_segments::Code_Segments,

	  exception_wrapper:  Exception -> Exception
	}
	->
        code_segments::Executable;


    execute
        :
        { executable:         code_segments::Executable,
	  imports:            List( import_tree::Import ),
	  export_picklehash:  Null_Or( picklehash::Picklehash ),
	  linking_table:      linking_table::Dictionary
        }
	->
        linking_table::Dictionary;
}
{
    exception LINK;

    package unsafe_chunk
        =
        unsafe::unsafe_chunk;

							# unsafe	is from   src/lib/std/src/unsafe/unsafe.pkg
							# chunk		is from   x
							# control_print	is from   src/lib/compiler/front/basics/print/printcontrol.pkg
							# error_message	is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
							# code_segments	is from   src/lib/compiler/execution/code-segments/code-segments.pkg
							# unt8_vector	is from   src/lib/std/src/unt8-vector.pkg

    Chunk
        =
        unsafe_chunk::Chunk;

    say =  control_print::say;

    fun bug s
        =
        error_message::impossible ("Execute: " + s);



    # * Turn the byte-vector-like code segments into an executable closure 

    fun make_executable_closure
            { code_segments: code_segments::Code_Segments,
              exception_wrapper
            }
        =
        {   ex  =  code_segments::exec  code_segments.c0;

	    nex = if   (unt8_vector::length code_segments.data > 0)
		       (fn ivec =  ex (unsafe_chunk::make_tuple (unsafe_chunk::to_tuple ivec @ [code_segments::make_literals code_segments.data ])));
		  else (fn ivec =  ex ivec); fi;

	    executable
                =
                fold_left
                    (fn (c, r) =  (code_segments::exec c) o r)
                    nex
                    code_segments.cn;

	    fn args
                =
                (   executable args
                    except
                        e =  raise exception exception_wrapper e
                );
	};



    # Evaluate the executable and return the new linking_table: 
    #
    fun execute { executable, imports, export_picklehash, linking_table }
        =
        {   my args:  Chunk
                =
                {   fun sel_chunk (chunk, i)
			=
			unsafe_chunk::nth (chunk, i)
			except
                            _ =  bug "unexpected linkage interface in execute";

		    fun get_chunk ((p, n), zs)
			=
			{   fun get (chunk, import_tree::IMPORT_TREE_NODE [], z)
                                    =>
                                    chunk ! z;

			        get (chunk, import_tree::IMPORT_TREE_NODE xl, z)
				    =>
				    {   fun g ((i, n), x) = get (sel_chunk (chunk, i), n, x);

					fold_right g z xl;
				    };
                            end;


							# import_tree		is from   src/lib/compiler/execution/main/importtree.pkg
							# linking_table		is from   src/lib/compiler/execution/linking-table/linking-table.pkg
							# picklehash		is from   src/lib/compiler/front/basics/mlcomp/picklehash.pkg
							# compilation_exception	is from   src/lib/compiler/front/basics/mlcomp/compilation-exception.pkg
							# chunk			is from   x


			    chunk
                                =
                                case (linking_table::get  linking_table  p)
				  
				     THE chunk
                                         =>
                                         chunk;

				     NULL
                                         =>
                                         {   say ("lookup " + (picklehash::to_hex p) + "\n");

					     raise exception compilation_exception::COMPILE "imported chunks not found or inconsistent";
                                         };
                                esac;

			    get (chunk, n, zs);
			};

		    unsafe_chunk::make_tuple
                        (fold_right
                            get_chunk
                            []
                            imports
                        );
		};

	    my result:  Chunk
                =
                executable args;

	    case export_picklehash
              
	        NULL  =>  linking_table::empty;
	        THE p =>  linking_table::singleton (p, result);
            esac;
	};

							# compile_statistics	is from   src/lib/compiler/front/basics/stats/compile-statistics.pkg
    execute
        =
        compile_statistics::do_phase
            (compile_statistics::make_phase  "Execute")
            execute;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
