#
# References that can be merged
#
# -- Allen Leung


###             "Communication with an engineer
###              is only slightly more difficult than
###              communication with the dead."
###
###                                -- Rus Stiles Sr


api UNION_FIND_REF =
api

   type union_find( X )

   my union_find:    X -> union_find( X )
   my !!     : union_find( X ) -> X
   my ::=    : union_find( X ) * X -> Void
   my ====    : union_find( X ) * union_find( X ) -> Bool
   my eq:      union_find( X ) * union_find( X ) -> Bool
   my find:    union_find( X ) -> union_find( X )
   my union:   (X * X -> X) -> union_find( X ) * union_find( X ) -> Bool
   my union' : union_find( X ) * union_find( X ) -> Bool
end

package UnionFindRef :> UNION_FIND_REF =
pkg

   enum uptree X = ROOT of X * Int
                  | LINK of union_find( X )
   withtype
       union_find X = X uptree REF

   fun union_find x = REF (ROOT (x, 1))
   fun eq (x:  union_find( X ), y:  union_find( X )) = x = y
   fun find r =
   let fun get (r as REF (ROOT _))  = r
         | get (r' as REF (LINK r)) = 
           let r'' = get r
           in  if r != r'' then r' := LINK r'' 
               r''
           end
   in  get r end

   fun ==== (x, y)
       =
       find x = find y

   fun !! r     = let my ROOT (x, _) = *(find r) in x end
   fun ::=(r, x) = let my r as REF (ROOT(_, w)) = find r 
                  in  r := ROOT (x, w) end
   fun union f (x, y) =
   let my r  as REF (x as ROOT (i, w))  = find x
       my r' as REF (y as ROOT (j, w')) = find y
   in  if r == r' then FALSE
       else if w > w' then
               (r  := ROOT (f(i, j), w+w'); r' := LINK r; TRUE)
            else
               (r' := ROOT (f(i, j), w+w'); r := LINK r'; TRUE)
   end
   fun union' (x, y) =
   let my r  as REF (x as ROOT (i, w))  = find x
       my r' as REF (y as ROOT (j, w')) = find y
   in  if r == r' then FALSE
       else if w > w' then
               (r  := ROOT (i, w+w'); r' := LINK r; TRUE)
            else
               (r' := ROOT (j, w+w'); r := LINK r'; TRUE)
   end
end

