## checkbutton-appearance.pkg
#
# View for check-box buttons.

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6






###              "The general application of the transistor in
###               radio and television is far in the future."
###                             --  Lee deForest, 1952

# This package gets used in:
#
#     src/lib/x-kit/widget/leaf/toggleswitches.pkg

stipulate
    package d3 =  three_d;						# three_d		is from   src/lib/x-kit/widget/lib/three-d.pkg
    package w  =  widget;						# widget		is from   src/lib/x-kit/widget/basic/widget.pkg
    package wa =  widget_attribute;					# widget_attribute	is from   src/lib/x-kit/widget/lib/widget-attribute.pkg
    package wt =  widget_types;						# widget_types		is from   src/lib/x-kit/widget/basic/widget-types.pkg
    #
    package xc =  xcore;						# xcore			is from   src/lib/x-kit/xclient/xcore.pkg
    package xg =  xgeometry;						# xgeometry		is from   src/lib/x-kit/xclient/xgeometry.pkg
herein

    package checkbutton_appearance: (weak)  Button_Appearance {		# Button_Appearance	is from   src/lib/x-kit/widget/leaf/button-appearance.api


	attributes
	    =
	    [ (wa::relief,         wa::RELIEF, wa::RELIEF_VAL w::FLAT),
	      (wa::width,          wa::INT,    wa::INT_VAL 30),
	      (wa::ready_color,    wa::COLOR,  wa::NO_VAL),
	      (wa::color,          wa::COLOR,  wa::NO_VAL),
	      (wa::background,     wa::COLOR,  wa::STRING_VAL "white"),
	      (wa::foreground,     wa::COLOR,  wa::STRING_VAL "black")
	    ];

	 Button_Appearance
	     =
	     BUTTON_APPEARANCE
	       {
		 relief:  w::Relief,
		 shades:  w::Shades,
		 stipple: xc::Ro_Pixmap,
		 fg:      xc::Color,
		 bg:      xc::Color,
		 color:   xc::Color,
		 readyc:  xc::Color,
		 size:    Int
	       };

	fun make_button_appearance (root, view, args)
	    =
	    {   attributes = w::find_attribute (w::attributes (view, attributes, args));

		size   = wa::get_int    (attributes wa::width);
		relief = wa::get_relief (attributes wa::relief);

		forec  = wa::get_color  (attributes wa::foreground);
		backc  = wa::get_color  (attributes wa::background);

		color = case (wa::get_color_opt (attributes wa::color))   
			    #
			    THE c => c; 
			   _ => forec;
			esac;

		readyc = case (wa::get_color_opt (attributes wa::ready_color))   
			     #	
			     NULL => color;
			     THE c => c;
			 esac;

		stipple = w::ro_pixmap root "lightGray";

		BUTTON_APPEARANCE
		  {
		    fg => forec,
		    stipple,
		    bg => backc,
		    color,
		    readyc,
		    relief,
		    shades => w::shades root color,
		    size
		  };
	    };

	fun config (BUTTON_APPEARANCE (v as { size, color, shades, readyc, ... } ), window, xg::SIZE { wide, high } )
	    =
	    setf
	    where
		include xdraw;			# xdraw		is from   src/lib/x-kit/xclient/xdraw.pkg

		drawable = drawable_of_window window;

		bwid = 2; 
		pwid = 3; 

		readyp = if (xc::same_color (v.bg, readyc))
			      NULL;
			 else THE (make_pen [FOREGROUND readyc]);
			 fi;

		shades ->  { light, base, dark };

		check_pen = make_pen [ FOREGROUND v.fg, 
				       LINE_WIDTH 3,
				       JOIN_STYLE_MITER
				     ];

		stipple = v.stipple;

		fun mki p
		    =
		    clone_pen
		      ( p,
			[ FILL_STYLE_STIPPLED,
			  STIPPLE stipple
			]
		      );

		i_check_pen = mki check_pen;

		ishades = { light=> mki light, dark => mki dark, base => mki base };

		bsz    =  int::min (wide, high) / 2;

		xstart =  (wide - bsz) / 2;
		ystart =  (high - bsz) / 2;

		box_r  =  xg::BOX { col=>xstart, row=>xstart, wide=>bsz, high=>bsz };

		drawr = d3::draw_box drawable { width=>bwid, box=>box_r, relief=> v.relief };

		check_pts
                    =
                    [ xg::POINT { col=>xstart+4,       row=>high / 2 },
		      xg::POINT { col=>wide / 2,       row=>(ystart+bsz) - 4 },
		      xg::POINT { col=>(xstart+bsz)+4, row=> ystart - (bsz / 6) }
		    ];

		fun draw_check pen
		    =
		    draw_lines drawable pen check_pts;

		fun draw_box (shades, back)
		    =
		    {   clear_drawable drawable;

			case back   
			    #
			    THE p => fill_box drawable p box_r;
			    NULL => ();
			esac;

			drawr shades;
		    };

		fun setf (wt::INACTIVE TRUE, _, _)
			=> 
			{   draw_box (ishades, NULL);
			    draw_check i_check_pen;
			};

		   setf (wt::INACTIVE FALSE, _, _)
		       =>
		       draw_box (ishades, NULL);

		   setf (wt::ACTIVE FALSE, ready, FALSE)
		      => 
		      if ready  draw_box (shades, readyp);
		      else      draw_box (shades, NULL);
		      fi;

		   setf (wt::ACTIVE FALSE, ready, TRUE)
		      =>
		      if ready  { draw_box (shades, readyp); draw_check check_pen; };
		      else      { draw_box (shades, NULL);   draw_check check_pen; };
		      fi;

		   setf (wt::ACTIVE TRUE, ready, FALSE)
		      =>
		      if ready  { draw_box (shades, readyp);  draw_check check_pen; };
		      else      { draw_box (shades, NULL);    draw_check check_pen; };
		      fi;

		   setf (wt::ACTIVE TRUE, ready, TRUE)
		       =>
		       if ready  draw_box (shades, readyp);
		       else      draw_box (shades, NULL);
		       fi;
		end;

	    end;

	fun bounds      (BUTTON_APPEARANCE { size, ... } ) =  w::make_tight_size_preference (size, size);
	fun window_args (BUTTON_APPEARANCE { bg,   ... } ) =  { background => THE bg };

    };								# package checkbutton_appearance 

end;

## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
