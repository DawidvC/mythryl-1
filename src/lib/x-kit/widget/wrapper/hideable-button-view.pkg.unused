## hideable-button-view.pkg



# View for hideable button.


package HideView:  BUTTON_APPEARANCE {

    package w = widget

    use Geometry

    dfltFont = "-Adobe-Helvetica-Bold-R-Normal--*-120-*"
    dfltBorderWidth = 2

    attributes = [
        (attributes::label,          attributes::AT_Str,    attributes::AV_Str ""),
        (attributes::font,           attributes::AT_Font,   attributes::AV_Str dfltFont),
        (attributes::color,          attributes::AT_Color,  attributes::NO_VAL),
        (attributes::background,     attributes::AT_Color,  attributes::AV_Str "white"),
        (attributes::foreground,     attributes::AT_Color,  attributes::AV_Str "black")
      ]

    fun mkFontInfo font = let
          my { ascent=fonta, descent=fontd } = Font::fontHt font
          in (font, fonta, fontd) end

    fun mkTextLabel (s, font) = let
          my Font::CharInfo { left_bearing=lb, right_bearing=rb, ... }
                = .overall_info (Font::textExtents font s)
          in (s, lb, rb) end

    fun sizeOfLabel ((s, lb, rb), (_, fa, fd)) =
          SIZE { wid = rb - lb + 2, ht = fa + fd + 2 }

    fun setLightWidth (_, fonta, fontd) = (80 * (fonta+fontd)) div 100

    enum button_appearance = BV of {
        shades:  w::shades,
        fontinfo:  (w::XC::font * Int * Int),
        label:  (String * Int * Int),
        fg:  w::XC::color,
        bg:  w::XC::color,
        lightSz:  Int,
        padx:  Int,
        pady:  Int,
        borderWidth:  Int,
        onColor:  w::XC::color
      }

    fun buttonView (root, view, args) = let
          use Attributes
          attributes = w::findAttr (w::attributes (view, attributes, args))
          my fontinfo as (f, _, _) = mkFontInfo (getFont (attributes font))
          label = mkTextLabel (get_string (attributes label), f)
          forec = attributes::getColor (attributes attributes::foreground)
          backc = attributes::getColor (attributes attributes::background)
          color = case attributes::getColorOpt (attributes attributes::color) of
                        THE c => c 
                      | _ => forec
          lightSz = setLightWidth fontinfo
          in
            BV {
              fontinfo = fontinfo,
              label = label,
              fg = forec,
              bg = backc,
              shades = w::shades root color,
              lightSz = lightSz,
              borderWidth = dfltBorderWidth,
              padx = lightSz div 2,
              pady = lightSz div 4,
              onColor = forec
            }
          end

    fun config (BV v, window, SIZE { wid, ht } ) = let
          use Drawing
          dr = drawableOfWin window
          my { fontinfo, shades, label, borderWidth=bw, fg, onColor, ... } = v
          my (font, fonta, fontd) = fontinfo
          fonth = fonta + fontd
          fgPen = newPen[PV_Foreground fg, PV_LineWidth 2]
          onPen = newPen[PV_Foreground onColor]
          pts = let
                my SIZE { wid=lwid, ... } = sizeOfLabel (label, fontinfo)
                topy = v.pady + (fonth div 2)
                boty = ht - topy
                lightSz = v.lightSz
                x0 = v.padx + lightSz div 2
                x1 = v.padx
                x2 = wid - x1
                x3 = v.padx + 2*lightSz + lwid
                in
                  [PT { x=x0, y=topy }, PT { x=x1, y=topy }, PT { x=x1, y=boty },
                   PT { x=x2, y=boty }, PT { x=x2, y=topy }, PT { x=x3, y=topy } ]
                end

          fun drawCheck (isOn, rel) = let
                lightSz = v.lightSz
                y = v.pady + (fonth - lightSz) div 2
                x = v.padx + (lightSz div 2)
                box = BOX { x=x, y=y, wid=lightSz, ht=lightSz }
                arg = { box=box, width=bw, relief=rel }
                in
                  if isOn then (
                    fillRect dr onPen box;
                    three_d::drawRect dr arg shades
                  )
                  else three_d::drawFilledRect dr arg shades
                end

          fun drawLine () = drawLines dr fgPen pts
          fun drawLabel () = let
                lightSz = v.lightSz
                my (font, fonta, _) = v.fontinfo
                my (s, lb, _) = v.label
                x = v.padx + (2*lightSz) - lb + 1
                y = v.pady + fonta + 1
                in drawString dr fgPen font (PT { x=x, y=y }, s) end

          fun init () = (clearDrawable dr; drawLabel (); drawLine ())

          fun setf (w::Inactive s, _, _) = (init(); drawCheck (s, w::Raised))
            | setf (w::Active s, _, d) = let
                rel = if d then w::Sunken else w::Raised
                in init(); drawCheck (s, rel) end
          in 
            setf
          end

    fun bounds (BV v) = let
          my { label, lightSz, fontinfo, padx, pady, ... } = v
          my SIZE { wid, ht } = sizeOfLabel (label, fontinfo)
          halfLight = lightSz div 2
          wid = (2*padx + 3*lightSz + wid)
          ht = (2*pady + 2*ht)
          x_dim = w::flexDim wid
          y_dim = w::fixDim ht
          in { x_dim=x_dim, y_dim=y_dim } end

    fun window_args (BV { bg, ... } ) = { background = THE bg }

}		#  HideView 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 by AT&T Bell Laboratories  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
