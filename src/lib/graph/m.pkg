/*
 *  Graph minor.
 *  Allows contraction of nodes.  
 * 
 * -- Allen Leung
 */ 
api GRAPH_MINOR =
api

   my minor:  graph::graph( N, E, G )
           -> 
	   { view:       graph::graph( N, E, G ),
	     merge:      List( graph::node_id ) * N -> Void,
	     ====       : graph::node_id * graph::node_id -> Bool,
	     partition:  graph::node_id -> List( graph::node_id )
	   }

end

package graph_minor:  GRAPH_MINOR
{

   package g  = graph
   package h  = sparse_rw_vector
   package sl = sorted_list

   fun minor (g::GRAPH G:  graph::graph( N, E, G ) ) =
   let exception NOT_THERE
       uptree = h::rw_vector'(13, fn _ => raise exception NOT_THERE)
       fun get n = #1 (h::sub (uptree, n)) except _ => n
       fun edge (i, j, e) = (get i, get j, e)
       fun set_in_edges (i, e) = G.set_in_edges (get i, e)
       fun set_out_edges (i, e) = G.set_out_edges (get i, e)
       fun all f n =
           let my (_, nodes, _, _) = h::sub (uptree, n)
           in  list::fold_right (fn (i, l) => f i @ l) [] nodes
           end except NOT_THERE => f n
       fun in_edges i = map edge (all G.in_edges i)
       fun out_edges i = map edge (all G.out_edges i)
       fun prior i = map (get o #1) (all G.in_edges i)
       fun next i = map (get o #2) (all G.out_edges i)
       fun entry_edges i = map edge (all G.entry_edges i)
       fun exit_edges i = map edge (all G.exit_edges i)
       fun has_node n = 
           let my (_, _, _, x) = h::sub (uptree, n)
           in  x end except NOT_THERE => G.has_node n
       fun node_info n =
           let my (_, _, n', x) = h::sub (uptree, n) 
           in  if x then n' else raise exception g::NOT_FOUND
           end except NOT_THERE => G.node_info n
       fun nodes () =
           list::fold_right (fn (node as (n, _), ns) =>
               let my (n, _, n', x) = h::sub (uptree, n)
               in  if x then (n, n') . ns else ns 
               end except NOT_THERE => node . ns) [] (G.nodes ())
       fun edges () = 
           list::fold_right (fn (node as (n, _), es) =>
               let my (n, _, n', x) = h::sub (uptree, n)
               in  if x then map edge (G.out_edges n)@es else es 
               end except NOT_THERE => map edge (G.out_edges n)@es) [] 
               (G.nodes ())
       fun order () = length (nodes())
       fun size () = length (edges())
       fun entries () = sl::uniq (map get (G.entries ()))
       fun exits () = sl::uniq (map get (G.exits ()))
       fun forall_nodes f = apply f (nodes ())
       fun forall_edges f = apply f (edges ())
       fun merge ([], _) = ()
         | merge (nodes as n . ns, n') = 
           let info  = (n, nodes, n', TRUE)
               info' = (n, nodes, n', FALSE)
           in  h::update (uptree, n, info);
               apply (fn i => h::update (uptree, i, info')) ns
           end
       fun ====(a, b) = get a = get b
       fun partition n = #2 (h::sub (uptree, n)) except NOT_THERE => [n]
       view =
          g::GRAPH
          { name            = G.name,
            graph_info      = G.graph_info,
            new_id          = G.new_id,
            add_node        = G.add_node,
            add_edge        = G.add_edge,
            remove_node     = G.remove_node,
            set_in_edges    = set_in_edges,
            set_out_edges   = set_out_edges,
            set_entries     = G.set_entries,
            set_exits       = G.set_exits,
            garbage_collect = G.garbage_collect,
            nodes           = nodes,
            edges           = edges,
            order           = order,
            size            = size,
            capacity        = G.capacity,
            in_edges        = in_edges,
            out_edges       = out_edges,
            prior            = prior,
            next            = next,
            has_edge        = G.has_edge,
            has_node        = has_node,
            node_info       = node_info,
            entries         = entries,
            exits           = exits,
            entry_edges     = entry_edges,
            exit_edges      = exit_edges,
            forall_nodes    = forall_nodes,
            forall_edges    = forall_edges
          }
   in  { view      = view,
         merge     = merge,
         ====       = ====,
         partition = partition
       }
   end
}



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
