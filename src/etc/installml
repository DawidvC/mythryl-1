#!/bin/sh

# The tmpfile is for pathconfig editing (see below).
tmpfile=pathconfig.tmp.$$

trap 'rm -f $tmpfile; exit 1' 1 2 3 15

this=$0
here=`pwd`
cd ../..
twoup=`pwd`
cd $here
echo "cd $here"

MAIN_HEAP_DIR=$twoup/heap
MAIN_LIB_DIR=$twoup/lib

if [ $# -gt 0 ] ; then
    STEM=$1
else
    STEM=mythryld
fi

if [ -f ../../bin/guess-host-architecture-and-os ]; then
  ARCHITECTURE_AND_OS=`../../bin/guess-host-architecture-and-os`
  if [ "$?" = "0" ]; then
    eval $ARCHITECTURE_AND_OS
  else
    echo "$this: Cannot determine architecture/os."
    exit 1
  fi
fi

# A function to move all stable library files to a parallel directory
# hierarchy.
# The first argument must be a simple path (no / inside), and
# the second argument must be an absolute path.
move() {
    if [ -d $1 ] ; then
	if [ ! -d $2 ] ; then
	    if [ -f $2 ] ; then
		echo $this: $2 exists as a non-directory.
		exit 1
	    fi
	    mkdir $2
            echo "mkdir $2" 
	fi
	cd $1
        echo "cd $1"
	for i in * .[a-zA-Z0-9]* ; do
	    move $i $2/$i
	done
	cd ..
        echo "cd .."
    elif [ -f $1 ] ; then
	rm -f $2
	mv $1 $2
        echo "mv $1 $2" 
    fi
}

HEAP_FILE=$STEM
LIB_DIR=$STEM.lib

if [ ! -f $HEAP_FILE ] ; then
    echo "$this: The heap file $HEAP_FILE is missing."
    exit 1
else
    echo "The heap file $HEAP_FILE exists as expected."
fi

if [ ! -d $LIB_DIR ] ; then
    echo "$this: The library directory $LIB_DIR is missing."
    exit 1
else
    echo "The library directory $LIB_DIR exists as expected."
fi

#
# create heap and lib directories, if necessary
#
if test ! -d $MAIN_HEAP_DIR ; then
  mkdir -p $MAIN_HEAP_DIR
  echo "mkdir -p $MAIN_HEAP_DIR"
fi
if test ! -d $MAIN_LIB_DIR ; then
  mkdir -p $MAIN_LIB_DIR
  echo "mkdir -p $MAIN_LIB_DIR"
fi

# Moving the heap image to its place
mv $HEAP_FILE $MAIN_HEAP_DIR/mythryld
echo "mv $HEAP_FILE $MAIN_HEAP_DIR/mythryld"

# Moving each individual library...
cd $LIB_DIR
echo "cd $LIB_DIR"
for anchor in * ; do
    if [ -d $anchor ] ; then
	move $anchor $MAIN_LIB_DIR/$anchor
    fi
done
cd ..

# Update the pathconfig file in $MAIN_LIB_DIR
#  The awk script below replaces the original binding in $pcfile
#  with its fresh counterpart should there be one.  Other bindings
#  are retained and brand new ones are added.
pcfile=$MAIN_LIB_DIR/pathconfig
if [ -f $pcfile ] ; then
    cp $pcfile $tmpfile
fi
rm -f $pcfile
cat $LIB_DIR/pathconfig >>$tmpfile
awk <$tmpfile 'NF == 2 { mapping[$1] = $2 }
NF != 2 { print $0 }
END { for (i in mapping) print i, mapping[i] }' \
 | sort >$pcfile
echo "Updated $pcfile"

rm -r $LIB_DIR
rm -f $tmpfile

echo "rm -r $LIB_DIR"
echo "rm -f $tmpfile"