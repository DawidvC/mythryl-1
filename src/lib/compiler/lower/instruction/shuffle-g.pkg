## shuffle-g.pkg -- Implements parallel copy instructions as sequences of moves. 

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6

# We are invoked by:
#
#     src/lib/compiler/lower/x86/codetree/translate-codetree-to-x86-g.pkg
#     src/lib/compiler/lower/ppc/instruction/ppc-shuffle-g.pkg
#     src/lib/compiler/lower/sun/instruction/sparc-shuffle-g.pkg
#     src/lib/compiler/lower/x86/instruction/x86-shuffle-g.pkg

generic package  shuffle_g  (

    instruction_set:  Instruction_Set			# Instruction_Set	is from   src/lib/compiler/lower/instruction/instruction-set.api
)

: (weak)  api {

    shuffle
	:  
	{ mv_instr:  { dst: instruction_set::Ea, src: instruction_set::Ea } -> List( instruction_set::Instruction ),
	  ea:  cells_basis::Cell -> instruction_set::Ea
	} 
	->
	{ tmp:  Null_Or( instruction_set::Ea ),
	  dst:  List( cells_basis::Cell ),
	  src:  List( cells_basis::Cell )
	} 
	->
	List( instruction_set::Instruction );
}
{

    package cells = instruction_set::cells;

    package c = cells;

    Chunk = TEMP | CELL  cells_basis::Cell;

    fun equal (r1, r2)
        =
        cells_basis::same_color (r1, r2);

    fun equal_chunk (TEMP, TEMP) => TRUE;
	equal_chunk (CELL u, CELL v) => equal (u, v);
	equal_chunk _ => FALSE;
    end;

    fun shuffle { mv_instr, ea } { tmp, dst, src }
	=
	reverse (cycle (rmv_coalesced (dst, src), []))
        where

	    fun mv { dst, src, instrs }
                =
                list::reverse_and_prepend (mv_instr { dst, src }, instrs);


	    fun operand dst
                =
                case dst
                   
		     TEMP     =>  null_or::the  tmp; 
		     CELL dst =>  ea dst;
                esac;


	    # Do unconstrained moves:
	    #
	    fun loop ((p as (rd, rs)) ! rest, changed, used, done, instrs)
                    => 
		    if  (list::exists
                             (fn r =  equal_chunk (r, rd))
                             used
                    )
		         loop (rest, changed, used, p ! done, instrs);
		    else
                         loop (rest, TRUE, used, done,
			  mv { dst=>operand rd, src=>operand rs, instrs } );
                    fi;

	        loop ([], changed, _, done, instrs)
                    =>
                    (changed, done, instrs);
            end;


	    fun cycle ([], instrs)
                    =>
                    instrs;

	        cycle (moves, instrs)
		    =>
		    case (loop (moves, FALSE, map #2 moves, [], instrs))
		      
		         (_, [], instrs)
                             =>
                             instrs;

			 (TRUE, acc, instrs)
                             =>
                             cycle (acc, instrs);

			 (FALSE, (rd, rs) ! acc, instrs)
                             =>
                             {   fun rename (p as (a, b))
                                     =
			             if   (equal_chunk (rd, b))
                                         
                                          (a, TEMP);
                                     else
                                          p;
                                     fi;

			         acc' = (rd, rs) ! map rename acc;
			         instrs' = mv { dst=>null_or::the tmp, src=>operand rd, instrs };

			         my (_, acc'', instrs'')
                                     = 
			             loop (acc', FALSE, map #2 acc', [], instrs');

			         cycle (acc'', instrs'');
			     };
                    esac;
            end;

	    # Remove moves that have been coalesced. 
	    #
	    rmv_coalesced
                =
		paired_lists::fold_left
                    (fn (rd, rs, mvs)
                        =
			if   (equal (rd, rs))
                            
                             mvs;
			else
                             (CELL rd, CELL rs) ! mvs;
                        fi)
                    [];

	end;			# fun shuffle
};



## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
