#  (C) 1999 Lucent Technologies, Bell Laboratories 



###              "We used to think that if we knew one,
###               we knew two, because one and one are two.
###               We are finding that we must learn a great
###               deal more about `and'."
###
###                      -- Sir Arthur Eddington
###
###                      Quoted in Mathematical Maxims and Minims
###                      N Rose (Raleigh N C 1988).



infix  val 90 ** ;
infix  val 80 * / % div & // ;
infix  val 70 $ + - ~ | ^ ? \ ;
infixr val 60 @ . ! << >> >>> in ;
infix  val 50 > < >= <= == != =~ .. ;
infix  val 40 := o ;
infix  val 20 ==> ;
infix  val 10 before ;

						# primitive_types	is from   src/lib/compiler/front/semantic/symbol-table/primitives-symbol-table.pkg
						# inline_t		is from   src/lib/core/init/built-in.pkg	

Bool ==  primitive_types::Bool;			# Top-level type -- we need this one early.

my (o) :  ((Y -> Z), (X -> Y)) -> (X -> Z)
       =  inline_t::compose;





stipulate

    fun strcat ("", s) =>  s;
	strcat (s, "") =>  s;
	strcat (x,  y) =>  prestring::meld2 (x, y);
    end;

						# inline_t	is from   src/lib/core/init/built-in.pkg
						# core_unt64	is from   src/lib/core/init/core-unt64.pkg

    package int31  = inline_t::int31;
    package int32  = inline_t::int32;

    package unt08  = inline_t::unt8;
    package unt31  = inline_t::unt31;
    package unt32  = inline_t::unt32;
    package intgr  = core_integer;

    package unt64  = core_unt64;
    package int64  = core_int64;
    package flt64  = inline_t::float64;

    package cv     = inline_t::char_vector;
    package pv     = inline_t::poly_vector;
    package di     = inline_t::default_int;

    fun unt08adapt oper args
        =
        unt08::bitwise_and (oper args, 0uxFF);

    unt08plus    = unt08adapt unt08::(+);
    unt08minus   = unt08adapt unt08::(-);
    unt08times   = unt08adapt unt08::(*);
    unt08neg     = unt08adapt unt08::neg;
    unt08lshift  = unt08adapt unt08::lshift;
    unt08rshift  = unt08adapt unt08::rshift;
    unt08rshiftl = unt08adapt unt08::rshiftl;

    unt08bitwise_or  = unt08adapt unt08::bitwise_or;	# XXX BUGGO FIXME Do we need to do 'unt08adapt' here?
    unt08bitwise_xor = unt08adapt unt08::bitwise_xor;	# XXX BUGGO FIXME Do we need to do 'unt08adapt' here?

    fun stringlt (a, b)
        =
	compare 0
        where
            al     = cv::length a;
	    bl     = cv::length b;

	    ashort = (di::(<)) (al, bl);

	    n      = if ashort  al; else bl;fi;

	    fun compare i
                =
		if   ((inline_t::(==)) (i, n))
                    
                     ashort;
		else
		     ai = cv::get (a, i);
		     bi = cv::get (b, i);

		     inline_t::char::(<) (ai, bi) or
		     (inline_t::(==) (ai, bi) and compare (di::(+) (i, 1)));
		fi;
	
	end;

    fun stringle (a, b) =  if (stringlt (b, a) ) FALSE; else TRUE;fi;
    fun stringgt (a, b) =  stringlt (b, a);
    fun stringge (a, b) =  stringle (b, a);

herein

    #########################################################
    # WARNING:
    # Order is significant here, in that when in doubt
    #
    #     src/lib/compiler/front/typechecker/types/resolve-overloaded-variables.pkg
    #
    # will default to the first entry in the list.
    #########################################################

#    overload (_[]) :   ((X, Int) -> Y)
#    as string::get;

#    overload (_!) :   (X -> X)
#	as   int31::(_!)
#	also int32::(_!)
#	also int64::(_!)
#	also intgr::(_!);

#    overload (_!) :   (X -> X)	as   int31::(_!)	also int32::(_!)	also int64::(_!)	also intgr::(_!);

    overloaded val (-_) :   (X -> X)
       =
       ( int31::neg,
	 int32::neg,
	 int64::neg,
	 intgr::neg,
	 unt31::neg,
	 unt32::neg,
	 unt64::neg,
	 flt64::neg,
	 unt08neg
       );

    overloaded val (~_) :   (X -> X)
	=
	( int31::bitwise_not,
#	  int32::bitwise_not,
#	  int64::bitwise_not,
#	  intgr::bitwise_not,
	  unt31::bitwise_not,
	  unt32::bitwise_not,
#	  unt64::bitwise_not,
	  unt08::bitwise_not
        );

    overloaded val << :   ((X, Y) -> X)
	=
	( int31::lshift,
	  int32::lshift,
#	  int64::lshift,
#	  intgr::lshift,
	  unt31::lshift,
	  unt32::lshift,
#	  unt64::lshift,
	  unt08lshift
        );

    overloaded val >> :   ((X, Y) -> X)
	=
	(
	  int31::rshift,
	  int32::rshift,
#	  int64::rshift,
#	  intgr::rshift,
	  unt31::rshift,
	  unt32::rshift,
#	  unt64::rshift,
	  unt08rshift
	);

    overloaded val >>> :   ((X, Y) -> X)
	=
	(
#	  int31::rshiftl,
#	  int32::rshiftl,
#	  int64::rshiftl,
#	  intgr::rshiftl,
	  unt31::rshiftl,
	  unt32::rshiftl,
#	  unt64::rshiftl,
	  unt08rshiftl
	);

    overloaded val + :   ((X, X) -> X)
	=
	( int31::(+),
	  int32::(+),
	  int64::(+),
	  intgr::(+),
	  unt31::(+),
          strcat,
	  unt32::(+),
	  unt64::(+),
	  flt64::(+),
	  unt08plus
	);

    overloaded val | :   ((X, X) -> X)
	=
	( int31::bitwise_or,
	  int32::bitwise_or,
#	  int64::bitwise_or,
#	  intgr::bitwise_or,
	  unt31::bitwise_or,
	  unt32::bitwise_or,
#	  unt64::bitwise_or,
	  unt08bitwise_or
	);

    overloaded val ^ :   ((X, X) -> X)
	=
	( int31::bitwise_xor,
	  int32::bitwise_xor,
#	  int64::bitwise_xor,
#	  intgr::bitwise_xor,
	  unt31::bitwise_xor,
	  unt32::bitwise_xor,
#	  unt64::bitwise_xor,
	  unt08bitwise_xor
	);

    overloaded val & :   ((X, X) -> X)
	=
	( int31::bitwise_and,
	  int32::bitwise_and,
#	  int64::bitwise_and,
#	  intgr::bitwise_and,
	  unt31::bitwise_and,
	  unt32::bitwise_and,
#	  unt64::bitwise_and,
	  unt08::bitwise_and
	);

    overloaded val - :   ((X, X) -> X)
	=
	( int31::(-),
	  int32::(-),
	  int64::(-),
	  intgr::(-),
	  unt31::(-),
	  unt32::(-),
	  unt64::(-),
	  flt64::(-),
	  unt08minus
	);

    overloaded val * :   ((X, X) -> X)
	=
	( int31::(*),
	  int32::(*),
	  int64::(*),
	  intgr::(*),
	  unt31::(*),
	  unt32::(*),
	  unt64::(*),
	  flt64::(*),
	  unt08times
	);

# Can't overload ** with float and int pow() right now
# because they are not currently defined this early
# in the game.                                      XXX BUGGO FIXME
#    overload ** :   ((X, X) -> X)
#	as   math::pow;

    (//) = (flt64::(/));		#  temporary hack around overloading bug  XXX BUGGO FIXME

    overloaded val / :  ((X, X) -> X)
	=
	( int31::div,
	  int32::div,
	  int64::div,
	  intgr::div,
	  unt08::div,
	  unt31::div,
	  unt32::div,
	  unt64::div
	);

    overloaded val % :  ((X, X) -> X)
	=
	( int31::mod,
	  int32::mod,
	  int64::mod,
	  intgr::mod,
	  unt08::mod,
	  unt31::mod,
	  unt32::mod,
	  unt64::mod
	);

    overloaded val < :   ((X, X) -> Bool)
	=
	( int31::(<),
	  int32::(<),
	  int64::(<),
	  intgr::(<),
	  unt08::(<),
	  unt31::(<),
	  unt32::(<),
	  unt64::(<),
	  flt64::(<),
	  inline_t::char::(<),
	  stringlt
	);

    overloaded val <= :   ((X, X) -> Bool)
	=
	( int31::(<=),
	  int32::(<=),
	  int64::(<=),
	  intgr::(<=),
	  unt08::(<=),
	  unt31::(<=),
	  unt32::(<=),
	  unt64::(<=),
	  flt64::(<=),
	  inline_t::char::(<=),
	  stringle
	);

    overloaded val > :   ((X, X) -> Bool)
	=
	( int31::(>),
	  int32::(>),
	  int64::(>),
	  intgr::(>),
	  unt08::(>),
	  unt31::(>),
	  unt32::(>),
	  unt64::(>),
	  flt64::(>),
	  inline_t::char::(>),
	  stringgt
	);

    overloaded val >= :   ((X, X) -> Bool)
	=
	( int31::(>=),
	  int32::(>=),
	  int64::(>=),
	  intgr::(>=),
	  unt08::(>=),
	  unt31::(>=),
	  unt32::(>=),
	  unt64::(>=),
	  flt64::(>=),
	  inline_t::char::(>=),
	  stringge
	);

    overloaded val abs:  (X -> X)
	=
	( int31::abs,
	  int32::abs,
	  int64::abs,
	  intgr::abs,
	  flt64::abs
	);

    overloaded val min:  ((X, X) -> X)
	=
	( int31::min,
	  int32::min,
#	  int64::min,
#	  intgr::min,
	  flt64::min
	);

    overloaded val max:  ((X, X) -> X)
	=
	( int31::max,
	  int32::max,
#	  int64::min,
#	  intgr::min,
	  flt64::max
	);

    Void = primitive_types::Void;

    Exception = primitive_types::Exception;

    exception BIND                = core::BIND;
    exception MATCH               = core::MATCH;
    exception SUBSCRIPT           = core::SUBSCRIPT;
    exception INDEX_OUT_OF_BOUNDS = core::INDEX_OUT_OF_BOUNDS;	# I want this to replace SUBSCRIPT, but haven't finished that project yet -- obviously! :)
    exception SIZE                = core::SIZE;

    exception OVERFLOW       = assembly::OVERFLOW;
    exception DIVIDE_BY_ZERO = assembly::DIVIDE_BY_ZERO;

    exception BAD_CHAR       = inline_t::char::BAD_CHAR;
    exception DOMAIN;
    exception NOT_FOUND;					# Raised when a regex fails to match given string, and similar search situations.

    exception IMPOSSIBLE;

    String = primitive_types::String;


    exception FAIL  String;

    # exception SPAN
    # enum order
    # enum option
    # exception Option
    # my the_else
    # my not_null
    # my the
    # op ==
    # my op !=

    include pre_pervasive;

    Null_Or( X )   = Null_Or( X );

    (*_)  = inline_t::deref;
    deref = inline_t::deref;		# Synonym, handy when doing 'map' or such.
    (:=)  = inline_t::(:=);

    my (before) :  ((X, Void)) -> X
                =  inline_t::before;

    my ignore:  X -> Void
             =  inline_t::ignore;

    # Top-level types:
    #
    List == primitive_types::List;
    Ref  == primitive_types::Ref;


    # Top-level value identifiers: 
    #
    fun vector l
        =
        {   fun len ([],         n) =>   n;
	        len ([_],        n) =>   n+1;
	        len (_ ! _ ! r,  n) =>   len (r, n+2);
            end;

	    n =  len (l, 0);
	
	    if   (di::ltu (core::max_length, n))
                
                 raise exception SIZE;
	    else
                 if (n == 0)   assembly::vector0;
	         else          assembly::a::create_v (n, l);
                 fi;
            fi;
	};


    # Bool 
    not =  inline_t::inlnot;
    (!_) = not;

    fun !*boolref		# Just to avoid having to write  !(*boolref)   all the time.
        =
        not *boolref;

    # Int 
    Int =  primitive_types::Int;

    # Unt
    Unt  = primitive_types::Unt;

    # Float
    Float = primitive_types::Float;

    real = inline_t::float64::from_int31;

    fun floor x
        =
	if ((flt64::(<) (x,  1073741824.0))
        and (flt64::(>=) (x, -1073741824.0))) 
	    assembly::a::floor x;
	elif (flt64::(====) (x, x))  raise exception OVERFLOW;	#  not a NaN 
	else                         raise exception DOMAIN;	#  NaN 
        fi;

    fun ceil  x = (di::(-)) (-1, floor ((flt64::neg) (x + 1.0)));
    fun trunc x = if (flt64::(<) (x, 0.0))  ceil x; else floor x;fi;
    fun round x = floor (x + 0.5);		#  Bug: does not round-to-nearest XXX BUGGO FIXME 

    #  List 
    exception EMPTY;

    fun null [] =>   TRUE;
        null _  =>   FALSE;
    end;

    fun head (h ! _) =>  h;
        head []      =>  raise exception EMPTY;
    end;

    fun tail (_ ! t) =>  t;
        tail []      =>  raise exception EMPTY;
    end;

    fun fold_left f b l
        =
	f2 (l, b)
        where
	    fun f2 ([],    b) =>  b;
		f2 (a ! r, b) =>  f2 (r, f (a, b));
	    end;
        end;

    fun length l
        =
	loop (0, l)
        where
	    fun loop (n, [])     =>   n;
		loop (n, _ ! l) =>   loop (n + 1, l);
	    end;
	end;

    fun reverse l
        =
        fold_left (!) [] l;

    fun fold_right f b
        =
	f2
        where
            fun f2 []      =>   b;
	        f2 (a ! r) =>   f (a, f2 r);
            end;
	end;

    fun l1 @ l2
        =
        fold_right (!) l2 l1;

    fun apply f
        =
	a2
        where
            fun a2 []       =>   ();
	        a2 (h ! t) =>   {   f h:  Void;
                                     a2 t;
                                 };
            end;
	end;

    fun map f
        =
	m
        where 
	    fun m []        =>  [];
		m [a]       =>  [f a];
		m [a, b]    =>  [f a, f b];
		m [a, b, c] =>  [f a, f b, f c];
		m (a ! b ! c ! d ! r) => f a ! f b ! f c ! f d ! m r;
            end;
	end;

    #  rw_vector 
        Array( X )   = primitive_types::Rw_Vector( X ); # XXX BUGGO DELETEME
    Rw_Vector( X )   = primitive_types::Rw_Vector( X );

    #  Vector 
    Vector( X )   = primitive_types::Vector( X );

    #  Char 
    Char = primitive_types::Char;

    to_int   = inline_t::char::ord;
    from_int = inline_t::char::chr;

    # This doesn't work as-is because the string package isn't defined at this point:
#    eq =  string::(==);
#    ne =  string::(!=);
#    le =  string::(<=);
#    ge =  string::(>=);
#    lt =  string::(<);
#    gt =  string::(>);
#
#    to_lower = string::to_lower;
#    to_upper = string::to_upper;

    #  String 
    stipulate
	#  Allocate an uninitialized string of given length 
	fun create n
            =
	    if   ((di::ltu (core::max_length, n)))
                 raise exception SIZE;
	    else assembly::a::create_s n;fi;

	unsafe_get = cv::get;
	unsafe_set = cv::set;
    herein

	size = cv::length:  String -> Int;

	fun str (c: Char) : String
	    =
	    pv::get (prestring::chars, inline_t::cast c);


	# Concatenate a list of strings together:

	fun cat [s]
		=>
		s;

	    cat (sl:  List( String ))
		=>
		{   fun length (i, []       ) =>  i;
			length (i, s ! rest) =>  length (i+size s, rest);
		    end;

		    case (length (0, sl))
		      
			0   => "";

			1   =>
			    { fun find ("" ! r) =>  find r;
				  find (s  ! _) =>  s;
				  find _ => "";
			      end; # * impossible *

			      find sl;
			    };

			tot_len
			    =>
			    {   ss = create tot_len;

				fun copy ([], _) => ();

				    copy (s ! r, i) => {
					 len = size s;
					 fun copy' j
                                             =
					     if   (j != len)
                                                 
					          unsafe_set (ss, i+j, unsafe_get (s, j));
						  copy'(j+1);
                                             fi;

					 copy' 0;
					 copy (r, i+len);
				     };
				end;

				copy (sl, 0);
				ss;
			    };
		    esac;
		};
	end;		#  fun cat


	# Implode a list of characters into a string:

	fun implode [] =>   "";

	    implode cl
		=>
		prestring::implode (length (cl, 0), cl)
		where
		    fun length ([],     n) =>  n;
			length (_ ! r, n) =>  length (r, n+1);
		    end;
		end;
	end;



	# Explode a string into a list of characters:

	fun explode s
	    =
	    f (NIL, size s - 1)
	    where
		fun f (l, -1) => l;
		    f (l,  i) => f (unsafe_get (s, i) ! l, i - 1);
		end;
	    end;

	# Return the n-character substring of s starting at position i.
	# NOTE: we use words to check the right bound so as to avoid
	# raising overflow.

	stipulate
	    package w = inline_t::default_word;
	herein
	    fun substring (s, i, n)
		=
		if (((i < 0) or
		     (n < 0)	or
		     (w::(<))(w::from_int (size s), (w::(+))(w::from_int i, w::from_int n)))
		)
		     raise exception core::SUBSCRIPT;
		else
		     prestring::unsafe_substring (s, i, n);
		fi;
	end;

#	fun "" $ s  =>  s;
#	    s  $ "" =>  s;
#	    x  $ y  =>  prestring::meld2 (x, y);
#	end;

    end;		# stipulate

    # Substring:
    # 
    Substring =  substring::Substring;
    Substring =  substring::Substring;

    # I/O:
    #
    print = print_hook::print;

    # Simple interface to redirect interactive
    # compiler to read from some stream other
    # than the default (stdin):
    #
    run = read_eval_print_hook::run;

    # Getting info about exceptions:
    #
    exception_name    =  exception_info_hook::exception_name;
    exception_message =  exception_info_hook::exception_message;


    # Given 1 .. 10,
    # return   [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    #
    fun i .. j
	=
	make_arithmetic_sequence (i, j, [])
	where
	    fun make_arithmetic_sequence (i, j, result_so_far)
		=
		i > j   ??   result_so_far
			::   make_arithmetic_sequence (i,   j - 1,   j ! result_so_far);
	end;


    fun foreach []         thunk =>  ();
        foreach (a ! rest) thunk =>  { thunk(a);   foreach rest thunk; };
    end;

    fun identity i = i;

    dot__quotes    = identity;	# .'foo'
    dot__brokets   = identity;	# .<foo>
    dot__barets    = identity;	# .|foo|
    dot__slashets  = identity;	# ./foo/
    dot__hashets   = identity;	# .#foo#
    dot__backticks = identity;	# .`foo`
    

end;		# stipulate

# Here's an odd problem:  Any reference to
# polymorphic equality checking in this file
# triggers an error like
#
#     runtime7: Fatal error -- unable to find picklehash (oh7_file identifier) '[...]'
#
# For example this stimulus exhibits the problem:
#
#     fun x (a,b) = inline_t::(==)(b, a);
# 
# but this one does not (presumably the zero allows the
# compiler to produce integer equality test instead of
# polymorphic one):
#
#     fun x (a,b) = inline_t::(==)(0, a);
#
# The simplest stimulus exhibiting the problem is likely:
#
#     foo = (!=);
#
# XXX BUGGO FIXME

# Bind package _Core.  We use the symbol "xcore", but after parsing
# is done this will be re-written to "_Core" by the bootstrap compilation
# machinery in ROOT/src/app/make7/compile/compile-treewalk-g.pkg.
# See file init.cmi for more details:

package xcore = core;
