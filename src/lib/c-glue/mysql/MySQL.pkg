
# Nice interface to MySQL



###                   "An average American loves his family.
###                    If he has any love left over for some other
###                    person, he generally selects Mark Twain."
###
###                                       -- Thomas Edison



package my_sql :> My_Sql {

   use lib7_ffilib_basis
   use C MySQLEnums

   version = "0.1.1"

   exception SQLError

   enum connectOptions =
     HOST        of String   #  host name; default to localhost 
   | USER        of String   #  user name (optional) 
   | PASSWD      of String   #  passwd (optional) 
   | DB          of String   #  Database name 
   | PORT        of Int      #  port; default to 3306 
   | UNIX_SOCKET of String   #  socket for talking with server (optional) 

   enum field = #  A field type descriptor 
      FIELD of { name          :String,
                table         :Null_Or( String ), #  NULL means computed 
                default       :String,
                type           :fieldtype,
                length        :Int,
                max_length    :Int,
                null          :Bool,
                primary_key   :Bool,
                unique_key    :Bool,
                multiple_key  :Bool,
                unsigned      :Bool,
                zerofill      :Bool,
                autoincrement :Bool,
                decimals      :Int
               }
   and fieldtype = TINY | SHORT | LONG | INT25 | LONGLONG | DECIMAL
                 | FLOAT | DOUBLE | TIMESTAMP | DATE | TIME | DATETIME
                 | STRING | BLOB | SET | ENUM | NULLf

   type mysql      = ptr'  su_obj  (st_mysql::tag, rw)
   enum result = RESULT of { db: mysql, 
                                res:  ptr'( su_obj( st_mysql_res::tag, rw) ), 
                                cols: Int }
   enum row    = ROW of { row: ptr'( obj( ptr( uchar_obj( rw ) ) ), rw) ), cols: Int }

   #  C <-> ML string 
   fun c_string  s =  ptr::enref' (ptr::deref' (ZString::dupML' s))
   fun ml_string s =  if ptr::is_null' s then "" else ZString::toML' s
   fun free_str  s =  if ptr::is_null' s then () else free' s

   #  C int <-> ML int 
   c_uint = unt32::from_int
   ml_int = unt32::toInt
   itow   = mlrep::unsigned::from_large_int o large_int::from_int
   wtoi   = mlrep::unsigned::toIntX 

   #  Generate error message 
   fun genErr (func, db)
       = 
       {   msg   = mysql_error::f db;
           raise exception io::Io { cause=SQLError, function=func, name=msg };
       }

   #  Check errno after an SQL call 
   fun chkErr (func, db)
       =
       {   errno =   mysql_errno::f db;

           if errno == 0w0   then ()
                             else genErr (func, db);
       }

   #  Create a connection to a database 
   fun connect options
       =
       {   sql = mysql_init::f NULL;
	   c_host   = REF NULL;
	   c_user   = REF NULL;
	   c_passwd = REF NULL;
	   c_db     = REF NULL;
	   c_port   = REF 0w0;
	   c_unix_socket = REF NULL;

	   fun process (HOST x) = c_host := c_string x
	     | process (USER x) = c_user := c_string x
	     | process (PASSWD x) = c_passwd := c_string x
	     | process (DB x) = c_db := c_string x
	     | process (PORT x) = c_port := itow x
	     | process (UNIX_SOCKET x) = c_unix_socket := c_string x;

	   apply process options;

	   r = mysql_real_connect::f
		(sql, *c_host, *c_user, *c_passwd, 
		 *c_db, *c_port, *c_unix_socket, 0w0);

           if    Ptr::isNull' r
           then  genErr("connect", sql)
           else  sql;
       }

   fun shutdown db = (mysql_shutdown::f db; chkErr("shutdown", db))
   fun close db    = (mysql_close::f db; chkErr("close", db))
   fun ping db     = (mysql_ping::f db; chkErr("ping", db))

   fun numCols (RESULT { cols, ... } ) = cols
   fun numRows (RESULT { res, ... } ) = mlrep::signed::toInt (mysql_num_rows::f res)
   fun affectedRows db = mlrep::signed::toInt (mysql_affected_rows::f db)

   fun getRes (func, db)
       = 
       {   chkErr (func, db);
	   res =   mysql_use_result::f db;

           if    Ptr::isNull' res
           then  RESULT { db, res, cols=0 }
	   else  RESULT { db, res,
		      cols=ml_int (mysql_num_fields::f res) };
       }

   fun query (db, query)
       = 
       {   rc  =   mysql_real_query::f (db, query, itow (size query));
	   msg =   "query: "$query;

           if     rc != 0
           then   genErr (msg, db)
           else   getRes (msg, db);
       }

   fun closeResult (RESULT { res, ... } )
       =
       mysql_free_result::f res;

   fun fetchColWidths (RESULT { res, cols, ... } )
       =
       {   lens =   mysql_fetch_lengths::f res;

	   fun loop (-1, ns) = ns

	     | loop (i, ns)
		   = 
		   {   n =   wtoi (get::ulong'(Ptr::sub' s::ulong (lens, i)));
		       loop (i - 1, n . ns);
		   };

           if   Ptr::isNull' lens
           then 
	        raise exception io::Io { cause=SQLError, function="fetchColWidths",
			   name="You must call fetchRow first"}
	   else loop (cols - 1, []);
       };

   fun fetchRow (RESULT { res, cols, db, ... } )
       = 
       {   row =   mysql_fetch_row::f res;

           if    Ptr::isNull' row 
	   then  { chkErr("fetchRow", db); NULL; }
	   else  THE (ROW { row, cols } )
       }

   #  Extract the field definitions 
   fun fetchFields (RESULT { res, cols, ... } )
       = 
       if    Ptr::isNull' res
       then  [] 
       else
	     {   fields =  mysql_fetch_field::f res;
		 sub    = Ptr::sub' (t::sizeof st_mysql_field::type);

		 fun collect (-1, flds) = flds
		   | collect (i, flds)
			 =
			 {   fld =   sub (fields, i);
			     use st_mysql_field ;

			     name         = ml_string (get_name fld);
			     table        = ml_string (get_table fld);
			     table        = if table == "" then NULL else THE table;
			     default      = ml_string (get_def fld);
			     type          = get_type fld;
			     length       = wtoi (get_length fld);
			     max_length   = wtoi (get_max_length fld);
			     flags        = get_flags fld;

			    /*
			     e_field_type_blob:  mlrep::sint::int;
			     e_field_type_date:  mlrep::sint::int;
			     e_field_type_datetime:  mlrep::sint::int;
			     e_field_type_decimal:  mlrep::sint::int;
			     e_field_type_double:  mlrep::sint::int;
			     e_field_type_enum:  mlrep::sint::int;
			     e_field_type_float:  mlrep::sint::int;
			     e_field_type_int24:  mlrep::sint::int;
			     e_field_type_long:  mlrep::sint::int;
			     e_field_type_longlong:  mlrep::sint::int;
			     e_field_type_long_blob:  mlrep::sint::int;
			     e_field_type_medium_blob:  mlrep::sint::int;
			     e_field_type_newdate:  mlrep::sint::int;
			     e_field_type_null:  mlrep::sint::int;
			     e_field_type_set:  mlrep::sint::int;
			     e_field_type_short:  mlrep::sint::int;
			     e_field_type_string:  mlrep::sint::int;
			     e_field_type_time:  mlrep::sint::int;
			     e_field_type_timestamp:  mlrep::sint::int;
			     e_field_type_tiny:  mlrep::sint::int;
			     e_field_type_tiny_blob:  mlrep::sint::int;
			     e_field_type_var_string:  mlrep::sint::int;
			     e_field_type_year */;

			     fun isOn x
                                 =
                                 large_unt::bitwise_and (flags,
					       large_unt::from_large_int x) != 0w0;

			     null         = isOn FIELD_TYPE_NULL;
			     primary_key  = FALSE;
			     unique_key   = FALSE;
			     multiple_key = FALSE;
			     unsigned     = FALSE;
			     zerofill     = FALSE;
			     autoincrement= FALSE;
			     decimals     = wtoi (get_decimals fld);

			     fld =
				 FIELD { name,
				       table,
				       default,
				       type=DECIMAL,
				       length,
				       max_length,
				       null,
				       primary_key,
				       unique_key,
				       multiple_key,
				       unsigned, 
				       zerofill,
				       autoincrement,
				       decimals
				      };

			     collect (i - 1, fld . flds);
			 };

	         if Ptr::isNull' fields
                 then []
		 else collect (cols - 1, []);
	     }

   fun getFieldsAux (f, x) (ROW { row, cols, ... } )
       = 
       {   sub =   Ptr::sub'(t::sizeof (t::pointer t::uchar));

	   fun loop (-1, fields) = fields
	     | loop (i, fields)
		   = 
		   {   fld =   get::ptr'(sub (row, i));

		       fld =   if Ptr::isNull' fld
                               then x
                               else f (ml_string fld);

		       loop (i - 1, fld . fields);
		   };
           loop (cols - 1, []);
       }

   getFields  = getFieldsAux (fn x => x, "NULL")
   getFields' = getFieldsAux (THE, NULL)

   #  Iterators 
   fun appRows f r
       = 
       {   fun g () = case fetchRow r of THE x => (f (getFields x); g()) | _ => ();
           g();
       }

   fun appRows' f r
       = 
       {   fun g () = case fetchRow r of THE x => (f (getFields' x); g()) | _ => ();
           g();
       }

   fun mapRows f r
       = 
       {   fun g () = case fetchRow r of THE x => f (getFields x) . g() | _ => [];
           g();
       }

   fun mapRows' f r
       = 
       {   fun g () = case fetchRow r of THE x => f (getFields' x) . g() | _ => [];
           g();
       }

   fun foldlRows f x r
       = 
       {   fun g x = case fetchRow r of THE y => g (f(getFields y, x)) | _ => x;
           g x;
       }

   fun foldlRows' f x r
       = 
       {   fun g x = case fetchRow r of THE y => g (f(getFields' y, x)) | _ => x;
           g x;
       }

   fun foldrRows f x r
       = 
       {   fun g x = case fetchRow r of THE y => f (getFields y, g x) | _ => x;
           g x;
       }

   fun foldrRows' f x r
       = 
       {   fun g x = case fetchRow r of THE y => f (getFields' y, g x) | _ => x;
           g x;
       }

   allRows = mapRows (fn x => x)
   allRows' = mapRows' (fn x => x)

   #  Get meta info 
   package list {

      fun dbs (db, re) = (mysql_list_dbs::f (db, re);  
                        getRes("list.dbs", db))

      fun tables (db, re) = (mysql_list_tables::f (db, re); 
                           getRes("list.tables", db))

      fun fields (db, t, re) =  (mysql_list_fields::f (db, t, re); 
            getRes("list.fields", db))

      fun processes (db) = (mysql_list_processes::f db; 
                           getRes("list.processes", db))
   }

   #  Get info 
   package info {

      fun stat db    = mysql_stat::f db
      fun info db    = mysql_info::f db
      fun charSet db = mysql_character_set_name::f db
      fun client ()  = mysql_get_client_info::f ()
      fun host db    = mysql_get_host_info::f db
      fun proto db   = unt32::toInt (mysql_get_proto_info::f db)
      fun server db  = mysql_get_server_info::f db
   };
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
