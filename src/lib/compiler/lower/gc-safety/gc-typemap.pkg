generic GCTypeMap (GC:  Garbage_Collector_Type) : GC_TYPEMAP {


   package c  = cells_basis
   package gc = GC

   fun error msg = lowcode_error_message::error("GCTypeMap", msg)

   #  Sorted by register 
   type typemap = List (c::cell * gc::gctype)

   empty = []

   fun from_list (l: typemap)
       = 
       list_mergesort::uniqueSort 
          (fn ((r1, _), (r2, _)) => c::compareColor (r1, r2)) l

   fun ====(a, b) = 
   let fun loop ([]:typemap,[]:typemap) = TRUE
         | loop((r1, gc1) . a, (r2, gc2) . b) =
            c::sameColor (r1, r2) and GC::(====) (gc1, gc2) and loop (a, b)
         | loop _ = FALSE
   in  loop (a, b) end

   fun meet (a, b) =
   let fun loop (a,[]) = []
         | loop([], a) = []
         | loop (a as (x as (r1, g1)) . u, b as (y as (r2, g2)) . v) =
           let cx = c::registerId r1 and cy = c::registerId r2
           in  if cx == cy then (r1, gc::meet (g1, g2)) . loop (u, v)
               else if cx < cy then loop (u, b)
               else loop (a, v)
           end
   in  loop (a, b) end

   fun join (a, b) =
   let fun loop (a,[]) = a
         | loop([], a) = a
         | loop (a as (x as (r1, g1)) . u, b as (y as (r2, g2)) . v) =
           let cx = c::registerId r1 and cy = c::registerId r2
           in  if cx == cy then (r1, gc::join (g1, g2)) . loop (u, v)
               else if cx < cy then x . loop (u, b)
               else y . loop (a, v)
           end
   in  loop (a, b) end

   fun meets [] = []
     | meets [a] = a
     | meets (a . l) = meet (a, meets l)

   fun joins [] = []
     | joins [a] = a
     | joins (a . l) = join (a, joins l)

   fun gen (a, b) =
   let fun loop (a: typemap,[]:typemap) = a 
         | loop([], a) = a
         | loop (a as (x as (r1, _)) . u, b as (y as (r2, _)) . v) =
           let cx = c::registerId r1 and cy = c::registerId r2
           in  if cx == cy then y . loop (u, v)
               else if cx < cy then x . loop (u, b)
               else /* r1 > r2 */ y . loop (a, v)
           end
   in  loop (a, b) end

   fun kill (a, b) = 
   let fun loop (a:  typemap,[] : typemap) = a
         | loop([], _) = []
         | loop (a as (x as (r1, _)) . u, b as (y as (r2, _)) . v) =
           let cx = c::registerId r1 and cy = c::registerId r2
           in  if cx == cy then loop (u, v)
               else if cx < cy then x . loop (u, b)
               else /* r1 > r2 */ loop (a, v)
           end
   in  loop (a, b) end

}
        
