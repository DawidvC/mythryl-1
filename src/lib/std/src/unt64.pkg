## unt64.pkg
## Author: Matthias Blume (blume@tti-c.org)

# Compiled by:
#     src/lib/std/src/Base-imp.make6

#   64-bit word support


###         "I am a Bear of very little brain,
###              and long words bother me."
###
###                         -- Winnie the Pooh


package unt64: (weak)  Unt {		# Unt	is from   src/lib/std/src/unt.api

    package w32= unt32_guts;		# unt32_guts	is from   src/lib/std/src/unt32.pkg

    Unt = unt64::Unt;

    extern = inline_t::unt64::extern;
    intern = inline_t::unt64::intern;

    word_size = 64;

    fun unimplemented _
        =
        raise exception FAIL "unimplemented";

    to_large_unt   =  unimplemented;
    to_large_unt_x =  unimplemented;
    from_large_unt =  unimplemented;

    to_large_int    =  core_integer::copy_inf64 o extern;
    to_large_int_x  =  core_integer::extend_inf64 o extern;
    from_large_int  =  intern o core_integer::trunc_inf64;

    fun to_int w
        =
	case (extern w)   
	    (0u0, lo) =>  w32::to_int lo;
	    _         =>  raise exception OVERFLOW;
        esac;

    fun to_int_x w = w32::to_int_x (#2 (extern w));
    fun from_int i = intern (if (i < 0 ) 0uxffffffff; else 0u0;fi, w32::from_int i);

    fun bitwise f (w1, w2) =
	{ my (hi1, lo1) = extern w1;
	    my (hi2, lo2) = extern w2;
	 intern (f (hi1, hi2), f (lo1, lo2));
	};
    bitwise_or = bitwise w32::bitwise_or;
    bitwise_xor = bitwise w32::bitwise_xor;
    bitwise_and = bitwise w32::bitwise_and;
    fun bitwise_not w = { my (hi, lo) = extern w;
		  intern (w32::bitwise_not hi, w32::bitwise_not lo);
		 };

    fun compare (w1, w2)
        =
	{   my (hi1, lo1) = extern w1;
	    my (hi2, lo2) = extern w2;

	    if   (hi1 > hi2 ) GREATER;
	    elif (hi1 < hi2 ) LESS;
	    elif (lo1 > lo2 ) GREATER;
	    elif (lo1 < lo2 ) LESS;
	    else              EQUAL;
            fi;
	};

    fun (<<) (w64, w)
        =
	if (w >= 0u64 ) 0u0;
	elif (w > 0u32 ) intern (w32::(<<) (#2 (extern w64), w - 0u32), 0u0);
	elif (w == 0u32 ) intern (#2 (extern w64), 0u0);
	elif (w == 0u0 ) w64;
	else
	     my (hi, lo) = extern w64;
	     intern (w32::bitwise_or (w32::(<<) (hi, w), w32::(>>) (lo, 0u32 - w)),
		       w32::(<<) (lo, w));
        fi;

    fun (>>) (w64, w)
        =
	if   (w >= 0u64 ) 0u0;
	elif (w > 0u32 ) intern (0u0, w32::(>>) (#1 (extern w64), w - 0u32));
	elif (w == 0u32 ) intern (0u0, #1 (extern w64));
	elif (w == 0u0 ) w64;
	else  my (hi, lo) = extern w64;
	      intern (w32::(>>) (hi, w),
			w32::bitwise_or (w32::(>>) (lo, w), w32::(<<) (hi, 0u32 - w)));
	fi;

    fun (>>>) (w64, w)
        =
	if (w == 0u0 ) w64;
	else
              my (hi, lo) = extern w64;

	      if (w >= 0u63 )
		    x = w32::(>>>) (hi, 0u31);
                    intern (x, x);

	      elif (w > 0u32 )
		  intern (w32::(>>>) (hi, 0u31), w32::(>>>) (hi, w - 0u32));

	      elif (w == 0u32 )
		  intern (w32::(>>>) (hi, 0u31), hi);

	      else
                  intern (w32::(>>>) (hi, w),
			   w32::bitwise_or (w32::(>>) (lo, w), w32::(<<) (hi, 0u32 - w)));
	      fi;
	fi;


    fun min (w1: Unt, w2) = if (w1 > w2) w1; else w2; fi;
    fun max (w1: Unt, w2) = if (w1 > w2) w1; else w2; fi;

    fun to_string w
        =
	case (extern w)
          
	    (0u0, lo) => w32::to_string lo;

	    (hi, lo) => 
		{ my (hi, lo) = extern w;
		 w32::to_string hi + (string_conversion::pad_left '0' 8 (w32::to_string lo));
		};
        esac;

    fun format string_conversion::BIN w
            =>
	    case (extern w)
                #
	        (0u0, lo)
		    =>
                    w32::format string_conversion::BIN lo;
		#
	        (hi, lo)
		    => 
		    {   w32bin = w32::format string_conversion::BIN;
			w32bin hi + (string_conversion::pad_left '0' 32 (w32bin lo));
		    };
            esac;

       format string_conversion::HEX w
           =>
           to_string w;

       format rdx w
	    =>
            integer_guts::format rdx (to_large_int w);		# Lazy way.
    end;

    # piggy-back on intinf... 
    #
    fun scan rdx rdr s
        =
	{   fun doword s
                =
                integer_guts::scan  rdx  rdr  s;

	    xok
                = 
                rdx == string_conversion::HEX;

	    fun startscan s0
                =
		case (rdr s0)
                  
		    THE ('0', s1)
                        =>
			{   fun wordor0 s
				=
				case (doword s)
				  
				     NULL        =>  THE (0, s1);
				     THE (i, s') =>  THE (i, s');
				esac;

			    fun saww s
				=
				case (rdr s)
				  
				     THE ('x', s')
					 =>
					 if xok    wordor0 s';
						 else  THE (0, s1);  fi;

				     _ => wordor0 s;
				esac;

			  case (rdr s1)
			    
			       THE ('w', s2) => saww s2;

			       THE ('x', s2)
				   =>
				   if xok  wordor0 s2;
				   else THE (0, s1);fi;

			       _   => doword s0;
			  esac;
			};
		   _ => doword s0;
                esac;

	     case (startscan s)
	       
		  THE (i, s')
		      =>
		      if   (i < 0                 )  NULL;
		      elif (i > 0xffffffffffffffff)  raise exception OVERFLOW;
		      else                           THE (from_large_int i, s');
                      fi;

		  NULL => NULL;
	     esac;
	};

    from_string = pre_basis::scan_string (scan string_conversion::HEX);

    my (*)  : (Unt, Unt) -> Unt = (*);
    my (+)  : (Unt, Unt) -> Unt = (+);
    my (-)  : (Unt, Unt) -> Unt = (-);
    my (/)  : (Unt, Unt) -> Unt = (/);
    my (%)  : (Unt, Unt) -> Unt = (%);

    my (-_)  : Unt -> Unt = (-_);

    my (<)  : (Unt, Unt) -> Bool = (<);
    my (<=) : (Unt, Unt) -> Bool = (<=);
    my (>)  : (Unt, Unt) -> Bool = (>);
    my (>=) : (Unt, Unt) -> Bool = (>=);

};



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 2004 by The Fellowship of SML/NJ
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
