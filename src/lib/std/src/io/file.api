## file.api

# Compiled by:
#     src/lib/std/src/stdlib-core.make6

# This api is implemented in:
#     src/lib/std/src/unix/file.pkg

# Compare with:
#     src/lib/std/src/winix/winix-file.api



api  File {

    Vector  = String;
    Element = Char;

    # XXX BUGGO FIXME
    # (?) Should maybe implement vanilla/conventional/expected
    #    io_stream = fopen ("foo.txt", "r");
    #    io_stream = fopen ("foo.txt", "w");
    #    io_stream = fopen ("foo.txt", "a");
    # Then we can handle binary files as
    #    io_stream = fopen ("foo.txt", "rb");
    # per standard practice.  This will also let us
    # support read+write mode to a file, which the
    # existing model here really cannot support
    # gracefully.
    #
    # To make this work, we'll probably need a
    # Io_Stream = INPUT_STREAM Input_Streamn
    #           | OUTPUT_STREAM Output_Stream;
    # type, at least transitionally.  Then we
    # can have a fclose() that closes input and
    # output streams without caring about the
    # difference.
    #
    # (We can retain the current calls for the
    # benefit of those who need/want the type
    # safety of having Input_Stream and
    # Output_Stream type-distinct.)
    #
    #
    #
    # LATER: Better is most likely a phantom type
    # along the lines of
    #
    #     Stream (Can_Read, Can_Write, Can_Seek)
    #
    # so that read* can support both read/write and read/only streams, *tc.
    # This way we can have an option to open in read/write mode
    # without having to have a complete new set of read functions,
    #
    # E.g., read*  could accept a stream of type Stream(Can_Read, X,         Y),
    #       write* could accept a stream of type Stream(X,        Can_Write, Y),
    #       seek*  could accept a stream of type Stream(X,        Y,         Can_Seek),
    #
    # We can then have  open_for_read:   String -> Stream(   Can_Read, Cannot_Write, Can_Seek),
    #                   open_for_write:  String -> Stream(Cannot_Read,    Can_Write, Can_Seek),
    #                   open_for_update: String -> Stream(   Can_Read,    Can_Write, Can_Seek),
    # whilst still preserving enough typesafety to catch at compiletime
    # attempts to write to a read-only file &tc.
    # This does mean that we can't have fopen("foo.txt", "r") &tc,
    # since the Mythryl return type cannot vary according to argument value. Owell.
    #
    # STILL LATER:  Jeffrey Lau was getting unpleasant type errors when using
    #               phantom-typed sockets at scripting top level where type
    #               generalization is not (and cannot be) done;  maybe using
    #               phantom types here is not such a cool idea after all.
    #
    #               Hrm...

    Input_Stream;
    Output_Stream;

    read:            Input_Stream -> Vector;
    read_one:        Input_Stream -> Null_Or( Element );
    read_n:         (Input_Stream, Int) -> Vector;
    read_all:        Input_Stream -> Vector;

    can_read:       (Input_Stream, Int)  ->  Null_Or( Int );
    lookahead:       Input_Stream -> Null_Or( Element );
    close_input:     Input_Stream -> Void;
    end_of_stream:   Input_Stream -> Bool;

    write:          (Output_Stream, Vector) -> Void;
    write_one:      (Output_Stream, Element) -> Void;
    flush:           Output_Stream -> Void;
    close_output:    Output_Stream -> Void;

    package pure_io
	:
        Text_Pure_Io						# Text_Pure_Io	is from   src/lib/std/src/io/text-pure-io.api
            where  Vector == String
            also   Element == Char;

    make_instream:   pure_io::Input_Stream -> Input_Stream;
    get_instream:    Input_Stream -> pure_io::Input_Stream;
    set_instream:   (Input_Stream,   pure_io::Input_Stream) -> Void;

    get_output_position:       Output_Stream -> pure_io::Out_Position;
    set_output_position:      (Output_Stream, pure_io::Out_Position) -> Void;

    make_outstream: pure_io::Output_Stream -> Output_Stream;
    get_outstream:           Output_Stream -> pure_io::Output_Stream;
    set_outstream:          (Output_Stream,   pure_io::Output_Stream) -> Void;

    read_line:         Input_Stream -> Null_Or( String );
    read_lines:        Input_Stream -> List(    String );
    lines:             String       -> List(    String );
    write_substring:  (Output_Stream, Substring) -> Void;

    from_lines: String -> List(String) -> Void;			# filename -> file_lines -> ().

    open_for_read:   String -> Input_Stream;
    open_string:     String -> Input_Stream;
    open_for_write:  String -> Output_Stream;
    open_for_append: String -> Output_Stream;

    stdin:   Input_Stream;
    stdout:  Output_Stream;
    stderr:  Output_Stream;

    print:  String -> Void;

    scan_stream :
	 (   number_string::Reader (Element, pure_io::Input_Stream)
	     ->
	     number_string::Reader (X, pure_io::Input_Stream)
	 )
	 ->
         Input_Stream
	 ->
         Null_Or(X);


 # Stuff from say.pkg
 # This stuff shouldn't be here, but at the moment lack of recursive modules makes it expedient :( XXX BUGGO FIXME
    Input_Channel  = SAY | VSAY | DSAY;
    Output_Channel = STDOUT | LOGFILE;
    get_say_policy: (Input_Channel, Output_Channel)       -> Bool;
    set_say_policy: (Input_Channel, Output_Channel, Bool) -> Void;
    say:  List( String ) -> Void;
    vsay: List( String ) -> Void;
    dsay: List( String ) -> Void;
    log:  List( String ) -> Void;

    set_name: String     -> Void;


  };



## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
