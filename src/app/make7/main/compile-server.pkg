## compile-server.pkg
## author: Matthias Blume (blume@cs.princeton.edu)

# Compiled by:
#     src/app/make7/Make7.make6


# This module implements the server side of our
# compile-server protocol for parallel/distributed
# Mythryl compiles. The client end is implemented in
#
#     src/app/make7/simple-concurrency/unix-compile-client.pkg



stipulate
    package sg = intra_library_dependency_graph;				# intra_library_dependency_graph	is from   src/app/make7/depend/intra-library-dependency-graph.pkg
herein
    package compile_server {

	# This function is invoked (only) from slave() in
	#     src/app/make7/main/make7-g.pkg
	#
	fun enter_server_loop
                { anchor_dictionary,
                  platform,							# 'platform' string gives architecture+OS: "x86-linux" or such. 
                  build_interlibrary_dependency_graph_from_make7file_tree,	# A pre-configured call of make7file::build_interlibrary_dependency_graph_from_make7file_tree on the appropriate makefile.
                  make_compile_treewalker,					# compile_treewalk::make_intra_library_dependency_graph_walker
                  load								# 'load' is the make7_g::load entrypoint invokable from commandline. 
                  }
	    =
	    {
                build_directory							# directory tree in which to place compiled files for current 'make'/'recompile'.
		    =
                    REF  make_compiler_defaults::default_build_directory;	# "build7"

										# make_compiler_defaults	is from   src/app/make7/make-compiler/make-compiler-defaults.pkg
		fun shutdown ()
                    =
                    winix::process::exit 0;					# winix				is from   src/lib/std/winix.pkg

		fun say_ok   ()  =  file::say ["SLAVE: ok\n"   ];		# say				is from   src/lib/std/src/io/say.pkg
		fun say_error (m) =  file::say ["SLAVE: error: '" + m + "'\n"];
		fun say_pong ()  =  file::say ["SLAVE: pong\n" ];


		fun path (s, anchor_dictionary)
                    =
                    anchor_dictionary::decode					# anchor_dictionary		is from   src/app/make7/paths/anchor-dictionary.pkg
			anchor_dictionary
			s;


		fun change_directory dir
                    =
		    winix::file::change_directory (

                         anchor_dictionary::os_string (

			     path (dir, anchor_dictionary)
                         )
                    );

										# winix				is from   src/lib/std/winix.pkg
										# null_or			is from   src/lib/std/src/null-or.pkg
										# string			is from   src/lib/std/string.pkg
										# char				is from   src/lib/std/char.pkg
										# file				is from   src/lib/std/src/unix/file.pkg

		fun get_line_tokens  stream
                    =
		    null_or::map
                        (string::tokens  char::is_space)
                        (file::read_line  stream);


		# As a server, our purpose is to execute
		# compile commands, but we can only do so
		# within the context of a specified makefile,
		# so we implement two modes:
                #
                #     1) Waiting for a makefile to be specified
                #        via 'cm' or 'cmb' command.
                #
		#     2) Executing 'compile' commands for current makefile.
                #
                # In this loop we implement mode (1), the other being
                # implemented below by fun compile_loop:
		#
		fun wait_for_cm_or_cmb_command ()
                    =
                    {   fun loop ()
                            =
			    case (get_line_tokens  file::stdin)
			      
				 NULL                            =>   shutdown ();

				 THE ["cd", d]                   =>  {   change_directory d;
                                                                         say_ok ();
                                                                         wait_for_cm_or_cmb_command ();
                                                                     };

				 THE ["cm", platform, file]      =>  {   do_cm (platform, file);
                                                                     };

				 THE ["cmb", bd, platform, file] =>  {   build_directory := bd;
                                                                         do_cmb (platform, file);
                                                                     };

				 THE ["cmb_reset", platform]     =>   reset_cmb platform;

				 THE ["ping"]                    =>   {   say_pong ();
                                                                          wait_for_cm_or_cmb_command ();
                                                                      };

				 THE ["finish"]                  =>   {   say_ok ();
                                                                          wait_for_cm_or_cmb_command ();
                                                                      };

				 THE ["shutdown"]                =>   {   shutdown ();
                                                                      };

				 THE other                       =>   { say_error ("Unrecognized pipe input: ``" + (string::join " " other) + "''");   wait_for_cm_or_cmb_command (); };
                            esac;

			loop ()
                        except
                            _ = {   say_error ("Uncaught exception!");
                                    wait_for_cm_or_cmb_command ();
                                };
		    }

		also
		fun reset_cmb  platform							# 'platform' string is architecture plus OS, e.g. "x86-linux" 
                    =
                    {   ignore (
			    backend_per_platform::invoke				# backend_per_platform	is from   src/app/make7/make-compiler/backend-per-platform.pkg
				    load						# This is the standard 'load' entrypoint into src/app/make7/main/make7-g.pkg
				    platform						# 'platform' string is architecture plus OS, e.g. "x86-linux" 
				    NULL						#  Causes reset. 
			);

			say_ok ();
			wait_for_cm_or_cmb_command ();
		    }

		also
		fun do_cmb ( platform,							# 'platform' string is architecture plus OS, e.g. "x86-linux" 
                             makefile							# 'makefile' string is .make6 file to compile, say "src/etc/root.make6" or "$ROOT/src/etc/root.make6".
                           )
                    =
		    case (backend_per_platform::invoke					# backend_per_platform	is from   src/app/make7/make-compiler/backend-per-platform.pkg
			     load							# This is the standard 'load' entrypoint into src/app/make7/main/make7-g.pkg		
			     platform							# 'platform' string is architecture plus OS, e.g. "x86-linux" 
			     (THE (*build_directory, makefile)))			# See Backend_Request comments in  src/app/make7/make-compiler/backend-index.pkg
		      
			 NULL
			     =>
			     {   say_error ("Backend returned NULL!");
				 wait_for_cm_or_cmb_command ();
			     };

			 THE (g, treewalker, cmb_penv)					#  penv == pervasive environment...? 
			     =>
			     {   say_ok ();
				 index =  reachable::snode_map  g;			# reachable	is from   src/app/make7/depend/find-reachable-sml-nodes.pkg

				 compile_loop (index, treewalker, cmb_penv);
			     };
		    esac
                    except
                        x  =  {   say_error ("do_cmb: Uncaught exception: " + (exceptions::exception_message x));
                                  wait_for_cm_or_cmb_command ();
                              }

		also
		fun do_cm (my_platform, make7file)
                    =
		    if   (my_platform != platform)
		        
                         say_error ("do_cm: Wrong platform!");
                         wait_for_cm_or_cmb_command ();
		    else
                         {   make7_file_to_read
                                 =
                                 path (make7file, anchor_dictionary);

			     case (build_interlibrary_dependency_graph_from_make7file_tree  make7_file_to_read)
			       
			          NULL
				      =>
				      {   say_error ("do_cm: build_interlibrary_dependency_graph_from_make7file_tree returned NULL!");
					  wait_for_cm_or_cmb_command ();
				      };

											# reachable		is from   src/app/make7/depend/find-reachable-sml-nodes.pkg
											# compile_treewalk_g	def in    src/app/make7/compile/compile-treewalk-g.pkg
				  THE (make7file_dependency_graph, make7_state)
				      =>
				      {   say_ok ();

					  index
                                              =
                                              reachable::snode_map
                                                  make7file_dependency_graph;

					  treewalker =  make_compile_treewalker ();	# This is a call to compile_treewalk::make_intra_library_dependency_graph_walker

					  fun treewalker' o7
					      =
					      not_null (treewalker  o7  make7_state);

					  compile_loop (index, treewalker', anchor_dictionary);
				      };
                             esac;
			 }
                         except
                             x  =   {   say_error ("do_cmb: Uncaught exception: " + (exceptions::exception_message x));
                                        wait_for_cm_or_cmb_command ();
                                    };
                    fi

		also
		fun compile_loop (index, treewalker, anchor_dictionary)
                    =
                    {
		        (  loop ()
			   except
			       _  =
				  {   say_error ("compile_loop: Uncaught exception!");
				      compile_loop (index, treewalker, anchor_dictionary);
				  }
			)
                        where
			    fun loop ()
				=
				case (get_line_tokens  file::stdin)			# file	is from   src/lib/std/src/unix/file.pkg

				     NULL
					 =>
					 shutdown ();

				     THE ["cd", d]
					 =>
					 {
					     change_directory d;
					     say_ok ();
					     loop ();
					 };

				     THE ["compile", file]
					 =>
					 {
					     sourcefile_path
						 =
						 path (file, anchor_dictionary);
											    # source_path_map	is from   src/app/make7/paths/srcpathmap.pkg
					     case (source_path_map::get (index, sourcefile_path))

						  NULL
						     =>
						     {   say_error ("compile_loop/compile: sourcefile_path not found in index!");
							 loop ();
						     };

						  THE sn
						     =>
						     {   o7 =   sg::O7_IS_BARE sn;

							 if  (treewalker o7)   say_ok    ();
							 else		       say_error ("compile_loop/compile: treewalker returned FALSE!");
							 fi;

						         loop ();
						     };
					     esac;
					 };

				    THE ["cm",        platform, file] =>   do_cm (platform, file);
				    THE ["cmb", bd,   platform, file] =>   { build_directory := bd;   do_cmb (platform, file); };
				    THE ["cmb_reset", platform      ] =>   reset_cmb  platform;

				    THE ["finish"  ]   =>   { say_ok ();   wait_for_cm_or_cmb_command ();};
				    THE ["ping"    ]   =>   { say_pong (); loop ();};
				    THE ["shutdown"]   =>   shutdown ();

				    THE other => {   say_error ("compile_loop: unrecognized command: " + (string::join " " other));
						      loop ();
						  };
				esac;
			end;						# where
		    };							# fun compile_loop
	    

									# signals	is from   src/lib/std/src/nj/signals.pkg


		signals::set_signal_handler
                    (signals::interrupt_signal, signals::IGNORE);

		say_ok ();		#  Announce readiness 

		wait_for_cm_or_cmb_command ()
                except
                    _ = ();

                winix::process::exit 1;
	    };
    };
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################



## Copyright (c) 1999 by Lucent Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
