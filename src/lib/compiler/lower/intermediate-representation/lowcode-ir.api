#
# lowcode IR
#
# This is for performing whole program analysis.
# All optimizations are based on this representation.
# It provides a few useful views: dominator tree, control dependence graph,
# loop nesting (interval) package etc. Also there is a mechanism to
# incrementally attach additional views to the IR.  The SSA infrastructure
# is implemented in such a manner.
#
# -- Allen Leung


api LOWCODE_IR =
api

   package i:     Instruction_Set
   package control_flow_graph:   Control_Flow_Graph
   package dom:   Dominator_Tree
   package cdg:   CONTROL_DEPENDENCE_GRAPH
   package loop:  Loop_Structure
   package util:  CFG_UTIL
      sharing Util::control_flow_graph = control_flow_graph
      sharing control_flow_graph::I = I 
      sharing Loop::Dom = CDG::Dom = Dom
  
   type cfg  = control_flow_graph::cfg  
   type IR   = control_flow_graph::cfg  #  The IR looks just like a control_flow_graph! 
   type dom  = (control_flow_graph::block, control_flow_graph::edge_info, control_flow_graph::info) Dom::dominator_tree
   type pdom = (control_flow_graph::block, control_flow_graph::edge_info, control_flow_graph::info) Dom::postdominator_tree
   type cdg  = (control_flow_graph::block, control_flow_graph::edge_info, control_flow_graph::info) CDG::cdg
   type loop = (control_flow_graph::block, control_flow_graph::edge_info, control_flow_graph::info) Loop::loop_structure
 

   #  Extract various views from an IR.
   #  These are computed by need.

   my dom:    IR -> dom
   my pdom:   IR -> pdom
   my doms:   IR -> dom * pdom
   my cdg:    IR -> cdg
   my loop:   IR -> loop


   #  Signal that the IR has been changed

   my changed:  IR -> Void  


   #  View as a picture  

   my view:   String -> IR -> Void       #  view some facet of the IR 
   my views:  List( String ) -> IR -> Void  # view a set of facets 
   my viewSubgraph:  IR -> cfg -> Void   #  view a subgraph of the IR 


   #  This function allows the client to design a new view and extend
   #  the functionality of the IR

   my memo:  String -> (IR -> A_facet) -> IR -> A_facet
   my addLayout:  String -> (IR -> graph_layout::layout) -> Void

end

