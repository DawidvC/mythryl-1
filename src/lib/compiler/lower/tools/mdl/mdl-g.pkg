
# Generate machine code modules from machine description



###      "Why would you want more than one machine language?"
###
###                      -- Johnny von Neumann, 1954 



generic package mdl_g
   (package Comp:        Mdl_Compile
    package Parser:      MDL_PARSER_DRIVER
    package cells:       Mdl_Gen_Module
    package shuffle:     Mdl_Gen_Module
    package instruction:       Mdl_Gen_Module
    package asm:         Mdl_Gen_Module
    package mc:          Mdl_Gen_Module
    package RTLComp:     Mdl_Rtl_Comp
    package jumps:       Mdl_Gen_Module
    package Dasm:        Mdl_Gen_Module
    package props:       Mdl_Gen_Module2
    package rewrite:     Mdl_Gen_Module2
    package gc_rtl_props:    Mdl_Gen_Module2
    package gc_ssa_props:    Mdl_Gen_Module2
  /*package DelaySlots:  MD_GEN_MODULE
    package SchedProps:  MD_GEN_MODULE2 */
      sharing Comp = 
              cells::Comp = 
              shuffle::Comp =
              Instr::Comp = 
              Asm::Comp = 
              mc::Comp = 
              Dasm::Comp = 
              Props::Comp =
              Jumps::Comp = 
              Rewrite::Comp =
              RTLComp::Comp =
              RTLProps::Comp /* =
              DelaySlots::Comp =  
              SSAProps::Comp =
              SchedProps::Comp*/
      sharing Parser::raw_syntax = Comp::raw_syntax
      sharing RTLComp = Rewrite::RTLComp = 
              RTLProps::RTLComp = SSAProps::RTLComp = Props::RTLComp
   )

: Mdl_Gen

{

   fun doIt f x = 
       if *Comp::error::errorCount == 0 then 
          (f x except Comp::error::Error => ()) 
       else ()

   #  Generate code! 
   fun codegen md =
      (Comp::error::openLogFile (Comp::pathName md "" ".log");
       cells::gen md;
       Instr::gen md;
       shuffle::gen md;
       Asm::gen md;
       mc::gen md;
       Dasm::gen md;
       Jumps::gen md; 
       #  DelaySlots::gen md; 
       /*
       let compiled_rtls = RTLComp::compile md
       in  doIt RTLComp::gen compiled_rtls;
           doIt Rewrite::gen compiled_rtls;
           doIt Props::gen compiled_rtls;
           doIt RTLProps::gen compiled_rtls;
           doIt SSAProps::gen compiled_rtls; 
           doIt SchedProps::gen compiled_rtls; 
           RTLComp::dumpLog compiled_rtls
       end;  */
       Comp::error::log (Comp::error::status());
       Comp::error::closeLogFile()
      )

   fun gen file = 
       (print("[Processing "$file$"]\n");
        Comp::error::init();
        codegen (Comp::compile (file, Parser::load file)) #  Build raw_syntax_tree 
       )

   fun exit () = if *Comp::error::errorCount > 0 then 
                     winix::process::failure 
                else winix::process::success 

};
