## prettyprint-polylambda-expression.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



#              "We do not stop playing because we grow old.
#               We grow old because we stop playing."



api Prettyprint_Polylambda_Expression {

     print_con:    polylambda::Case_Constant -> Void;
     print_lexp:   polylambda::Polylambda_Expression -> Void;
     print_match:  symbol_table::Symbol_Table ->  
			List( (deep_syntax::Case_Pattern, polylambda::Polylambda_Expression) ) -> Void;
     print_fun:  polylambda::Polylambda_Expression -> highcode_var::Highcode_Variable -> Void;

     string_tag:  polylambda::Polylambda_Expression -> String;
};


package prettyprint_polylambda_expression 

: (weak)  Prettyprint_Polylambda_Expression

{
    stipulate

        package a= deep_syntax;		# deep_syntax		is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.pkg
	package da= var_home;		# var_home		is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package s= symbol;		# symbol		is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package pp= prettyprint;	# prettyprint		is from   src/lib/prettyprint/src/prettyprint.pkg
	package pu= print_utilities;	# print_utilities	is from   src/lib/compiler/front/basics/print/printutil.pkg
	package lt= polylambda_type;	# polylambda_type	is from   src/lib/compiler/upper/polylambda/polylambda-type.pkg

	include polylambda;
	include print_utilities; 

    herein 

	say = controls::print::say;

	fun sayrep representation
            =
            say (da::print_representation representation);

	name_of_highcode_variable = highcode_var::name_of_highcode_variable;

	fun bug s
            =
            error_message::impossible ("MCprint: " + s);

	fun app2 (f, [], []) => ();
	    app2 (f, a ! r, b ! z) => { f (a, b); app2 (f, r, z);};
	    app2 (f, _, _) => bug "unexpected list arguments in function app2";
        end;

	margin = REF 0;

	fun indent i
            =
            margin := *margin + i;

	exception UNDENT;

	fun undent i
            = 
  	    {   margin := *margin - i;

                if (*margin < 0)   raise exception UNDENT;   fi;
            };

	fun dent ()
            =
            tab *margin;

	fun whitespace ()
            =
            cat (ws *margin)
            where
	        fun ws (n)
                    =
		    if   (n < 0)
                         raise exception UNDENT;
		    else if   (n >= 8)
                              "\t" ! ws (n - 8);
		         else   str = case n    0 => "";       1 => " ";  2 => "  ";
					        3 => "   ";    4 => "    "; 
						5 => "     ";  6 => "      "; 
						_ => "       ";
                                      esac;
			       [str];
			 fi;
                    fi;
	    end;

	fun pr_con (DATACON((symbol, _, _), _, v)) => ((s::name symbol) + " " + (name_of_highcode_variable v));
	    pr_con (INTCON i) => int::to_string i;
	    pr_con (INT32CON i) => "(I32)" + (int32::to_string i);
	    pr_con (INTINFCON i) => "II" + integer::to_string i;
	    pr_con (WORDCON i) => "(W)" + (unt::to_string i);
	    pr_con (WORD32CON i) => "(W32)" + (unt32::to_string i);
	    pr_con (REALCON r) => r;
	    pr_con (STRINGCON s) => pu::heap_string s; #  was pu::print_heap_string s 
	    pr_con (VLENCON n) => int::to_string n;
        end;

	fun print_con x
            =
            say (pr_con x);

	# Use of complex in printLexp may
        # lead to stupid n^2 behavior:
        #
	fun complex le
            = 
	    g le
	    where
		fun h [] => FALSE;
		    h (a ! r) => g a or h r;
		end 

		also
		fun g (FN(_, _, b)) => g b;
		    g (MUTUALLY_RECURSIVE_FNS (vl, _, ll, b)) => TRUE;
		    g (APPLY (FN _, _)) => TRUE;
		    g (APPLY (l, r)) => g l or g r;

		    g (LET _) => TRUE;
		    g (TYPE_FN(_, b)) => g b;
		    g (TYPE_APPLY (l, [])) => g l; 
		    g (TYPE_APPLY (l, _)) => TRUE;
		    g (GENOP(_, _, _, _)) => TRUE;
		    g (PACK(_, _, _, l)) => g l;

		    g (RECORD l) => h l;
		    g (PACKAGE_RECORD l) => h l;
		    g (VECTOR (l, _)) => h l;
		    g (SELECT(_, l)) => g l;

		    g (SWITCH _) => TRUE;
		    g (CONSTRUCTOR(_, _, l)) => TRUE;
	  #         g (DECON(_, _, l)) = TRUE 

		    g (EXCEPT _) => TRUE; 
		    g (RAISE (l, _)) => g l;
		    g (EXCEPTION_TAG (l, _)) => g l;

		    g (BOX(_, _, l)) => g l;
		    g (UNBOX(_, _, l)) => g l;
		    g _ => FALSE;
	      end;
	    end;

	fun print_lexp l
	    = 
	    {   fun pr_lty t = say (lt::lt_print t);
		fun pr_type_constructor t = say (lt::tc_print t);
		fun pr_knd k = say (lt::tk_print k);

		fun plist (p, [], sep) => ();
		    plist (p, a ! r, sep) => 
		     { p a; apply (fn x => { say sep; p x;}; end ) r;};
                end;

		fun g (VAR v) => say (name_of_highcode_variable v);
		    g (INT i) => say (int::to_string i);
		    g (WORD i) => { say "(W)"; say (unt::to_string i);};
		    g (INT32 i) => { say "(I32)"; say (int32::to_string i);};
		    g (WORD32 i) => { say "(W32)"; say (unt32::to_string i);};
		    g (REAL s) => say s;
		    g (STRING s) => say (heap_string s);
		    g (EXCEPTION_TAG (l, _)) => g l;

		    g (r as RECORD l)
                       =>
		       if (complex r)
		            say "RECORD";
			    indent 7;
			    pu::print_closed_sequence ("(", ",\n" + whitespace(), ")") g l;
			    undent 7;
		       else
                            say "RECORD";
                            pu::print_closed_sequence ("(", ", ", ")") g l;
                       fi;

		    g (r as PACKAGE_RECORD l)
                       =>
		       if (complex r)
		            say "PACKAGE_RECORD";
			    indent 7;
			    pu::print_closed_sequence ("(", ",\n" + whitespace(), ")") g l;
			    undent 7;
		       else
                            say "PACKAGE_RECORD";
                            pu::print_closed_sequence ("(", ", ", ")") g l;
                       fi;

		    g (r as VECTOR (l, _))
                       =>
		       if (complex r)
		            say "VECTOR";
			    indent 7;
			    pu::print_closed_sequence ("(", ",\n" + whitespace(), ")") g l;
			    undent 7;
		       else
                            say "VECTOR";
                            pu::print_closed_sequence ("(", ", ", ")") g l;
                       fi;

		    g (PRIMITIVE_OP (p, t, ts))
                        => 
			{   say ("PRIMITIVE_OP (" + (highcode_primitive_op::pr_primop p) + ", ");
                            pr_lty t; 
			    say ", ["; plist (pr_type_constructor, ts, ", ");
                            say "])";
                        };

		    g (l as SELECT (i, _))
                        =>
		        {   fun gather (SELECT (i, l))
                                    =>
				    {   my (more, root) = gather l;
				        (i ! more, root);
				    };

			        gather l
                                    =>
                                    (NIL, l);
                            end;

			    my (path, root)
                                =
                                gather l;

			    fun ipr (i: Int)
                                =
                                say (int::to_string i);

			    g root;

                  	    pu::print_closed_sequence ("[", ", ", "]") ipr (reverse path);
		       };

		    g (FN (v, t, l))
                        => 
		        {   say "FN(";
                            say (name_of_highcode_variable v);
                            say " : "; 
                            pr_lty t;
                            say ", ";

			    if (complex l)

                                newline();
                                indent 3;
                                dent();
				g l;
                                say ")";
                                undent 3;
			    else
                                g l;
                                say ")";
                            fi;
                        };

		    g (CONSTRUCTOR((s, c, lt), ts, l))
                        => 
		        {   say "CONSTRUCTOR((";
                            say (s::name s);
                            say ", ";
                            sayrep c;
                            say ", ";

			    pr_lty lt;
                            say "), [";
                            plist (pr_type_constructor, ts, ", ");
                            say "], ";

			    if (complex l)
                                indent 4;
                                g l;
                                say ")";
                                undent 4;
			    else
                                g l;
                                say ")";
                            fi;
                        };
	   /*
		   | g (DECON((s, c, lt), ts, l)) = 
		       (say "DECON(("; say (s::name s); say ", "; sayrep c; say ", ";
			prLty lt; say "), ["; plist (prTypeConstructor, ts, ", "); say "], ";
			if complex l then (indent 4; g l; say ")"; undent 4)
			else (g l; say ")"))
	   */
		    g (APPLY (FN (v, _, l), r))
                        =>
                        {   say "(APPLY) ";
                            g (LET (v, r, l));
                        };

		    g (LET (v, r, l))
                        => 
		        {   lv = name_of_highcode_variable v;
			    len = size lv + 3;
			    say lv; say " = ";

			    if (complex r)
				indent 2;
                                newline();
                                dent();
                                g r;
                                undent 2;
			    else
                                indent len ;
                                g r;
                                undent len;
                            fi;

			    newline();
                            dent();
                            g l;
			};

		    g (APPLY (l, r))
                        => 
		        {   say "APPLY(";

			    if (complex l or complex r)

				 indent 4;
                                 g l; say ",\n"; dent();
				 g r; say ")"; undent 4;
			    else
				 g l; say ", ";
				 g r; say ")";
			    fi;
			};

		    g (TYPE_FN (ks, b))
                        => 
		        {   say "TYPE_FN(";

                            apply (fn k = { pr_knd k; say ", ";})
                                  ks; 

			    if (complex b) 

				newline();
                                indent 3;
                                dent();
                                g b;
                                say ")";
                                undent 3;
			    else
				g b;
                                say ")";
			    fi;
                        };

		    g (TYPE_APPLY (l, ts))
                        => 
		        {   say "TYPE_APPLY("; 

			    if (complex l) 

				indent 4;
                                g l;
                                say ",\n";
                                dent();
                                say "[";
				plist (pr_type_constructor, ts, ", "); say "])";
                                undent 4;
			    else
                                g l;
                                say ", [";
                                plist (pr_type_constructor, ts, ", ");
                                say "])";
                            fi;
                        };

		    g (GENOP (dictionary, p, t, ts))
                        => 
			{   say ("GENOP (" + (highcode_primitive_op::pr_primop p) + ", ");
                            pr_lty t; 
			    say ", [";
                            plist (pr_type_constructor, ts, ", ");
                            say "])";
                        };

		    g (PACK (lt, ts, nts, l))
                        => 
		        {   say "PACK("; 

			    app2 ( fn (tc, ntc)
				       =
				       {   say "<";
					   pr_type_constructor tc;
					   say ", ";
					   pr_type_constructor ntc;
					   say ">, ";
				       },
                                   ts,
                                   nts
                                 );

			    say " ";
                            pr_lty lt;
                            say ", ";

			    if (complex l) 

				newline();
                                indent 3;
                                dent();
                                g l;
                                say ")";
                                undent 3;
			    else
                                g l;
                                say ")";
                            fi;
			};

		    g (SWITCH (l, _, llist, default))
                        =>
		        {   fun switch [(c, l)]
                                    =>
				    {   print_con c;
                                        say " => ";
                                        indent 8;
                                        g l;
                                        undent 8;
                                    };

			        switch ((c, l) ! more)
                                    => 
				    {   print_con c;
                                        say " => ";
				        indent 8;
                                        g l;
                                        undent 8;
                                        newline();
                                        dent();
                                        switch more;
                                    };

			        switch []
                                    =>
                                    bug "unexpected case in switch";
                            end; 

			   say "SWITCH ";
			   indent 7; g l; undent 6; newline(); dent();
			   say "of "; indent 3; switch llist;

			   case (default, llist)
			       (NULL, _) => ();
			       (THE l, NIL) => { say "_ => "; indent 5; g l; undent 5;};
			       (THE l, _) => { newline(); dent(); say "_ => ";
					      indent 5; g l; undent 5;};
                           esac;

			   undent 4;
		       };

		    g (MUTUALLY_RECURSIVE_FNS (varlist, ltylist, lexplist, lambda_expression))
                        =>
		        {   fun flist ([v],[t],[l])
                                    =>
				    {   lv = name_of_highcode_variable v;
				        len = size lv + 2;
				        say lv; say " : ";pr_lty t;say " . ";
				        indent len ; g l; undent len;
				    };

			        flist (v ! vs, t ! ts, l ! ls)
                                    =>
				    {   lv = name_of_highcode_variable v;
				        len = size lv + 2;
				        say lv; say " : "; pr_lty t; say " . ";
				        indent len ; g l; undent len;
				        newline(); dent(); flist (vs, ts, ls);
				    };

			        flist (NIL, NIL, NIL)
                                    => ();

			        flist _
                                    =>
                                    bug "unexpected cases in flist";
                            end;

			    say "MUTUALLY_RECURSIVE_FNS("; indent 4; flist (varlist, ltylist, lexplist); 
			    undent 4; newline(); dent(); say "IN  ";
			    indent 4; g lambda_expression; say ")"; undent 4;
		        };

		    g (RAISE (l, t))
                        => 
		        {   say "RAISE(";
                            pr_lty t;
                            say ", ";
                            indent 6;
                            g l;
                            say ")";
                            undent 6;
                        };

		    g (EXCEPT (lambda_expression, withlexp))
                        =>
		        {   say "EXCEPT "; indent 7; g lambda_expression; undent 5; newline(); dent();
			    say "WITH "; indent 5; g withlexp; undent 7;
                        };

		    g (BOX (t, _, l))
                        => 
		        {   say "BOX("; pr_type_constructor t; say ", "; indent 5; newline(); dent(); g l; 
			    say ")"; undent 5;
                        };

		    g (UNBOX (t, _, l))
                        => 
		        {   say "UNBOX("; pr_type_constructor t; say ", "; indent 7; 
			    newline(); dent(); g l; say ")"; undent 7;
                        };
                end;

	        g l;
                newline();
                newline();
	    };

	fun print_match dictionary ((p, r) ! more)
                =>
	        {   pp::with_prettyprint_device
                        (error_message::default_plaint_sink ())
	                (fn stream
                            =
		            {   unparse_deep_syntax::unparse_pattern
                                    dictionary
                                    stream
                                    (p, *controls::print::print_depth);

		                pp::newline stream;
                            }
                        );

	            say " => ";
                    print_lexp r;
                    print_match dictionary more;
                };

	    print_match _ []
                =>
                ();
        end;

	fun print_fun l v
            =
	    find l
            where
	        fun last (da::HIGHCODE_VARIABLE x) =>  x; 
		    last (da::PATH (r, _))         =>  last r;
		    last _                         =>  bug "unexpected var_home in last";
                end;

	        recursive val find
		    =
		    fn VAR w
                         =>
                         if (v==w)
			      say("VAR " + name_of_highcode_variable v + " is free in <lambda_expression>\n"); ();
			 fi;

			l as FN (w, _, b) => if (v==w ) print_lexp l; else find b;fi;

			l as MUTUALLY_RECURSIVE_FNS (vl, _, ll, b) => 
			   if (list::exists (fn w =  v==w) vl ) print_lexp l;
			   else  apply find ll; find b; fi;

			APPLY (l, r) => { find l; find r;};
			LET (w, l, r) => { if (v==w ) print_lexp l; else find l;fi; find r;};
			PACK(_, _, _, r) => find r;
			TYPE_FN(_, r) => find r;
			TYPE_APPLY (l, _) => find l;

			SWITCH (l, _, ls, d)
                            =>
			    {   find l;

                                apply (fn(_, l) =  find l)
                                      ls;

			        case d    NULL  => ();
                                          THE l => find l;
                                esac;
                            };

			RECORD         l =>  apply find l; 
			PACKAGE_RECORD l =>  apply find l; 
			VECTOR (l, t)    =>  apply find l; 

			SELECT(_, l) => find l;

			CONSTRUCTOR((_, da::EXCEPTION p, _), _, e)
                            =>
                            {   find (VAR (last p));
                                find e;
                            };

			CONSTRUCTOR(_, _, e) => find e;

      #		        DECON((_, da::EXCEPTION p, _), _, e) => (find (VAR (last p)); find e);
      #		        DECON(_, _, e) => find e  ;

			EXCEPT (e, h) => { find e; find h;}; 
			RAISE (l, _) => find l;
			INT _ => ();  WORD _ => (); 
			INT32 _ => ();  WORD32 _ => (); 
			STRING _ => ();  REAL _ => ();
			EXCEPTION_TAG (e, _) => find e;
			PRIMITIVE_OP _ => ();
			GENOP ( { default=>e1, table=>es }, _, _, _) => 
			   { find e1; apply (fn (_, x) => find x; end ) es;};
			BOX(_, _, e) => find e;
			UNBOX(_, _, e) => find e;
                    end;

	    end;

	fun string_tag (VAR _) => "VAR";
	    string_tag (INT _) => "INT";
	    string_tag (INT32 _) => "INT32";
	    string_tag (WORD _) => "WORD";
	    string_tag (WORD32 _) => "WORD32";
	    string_tag (REAL _) => "REAL";
	    string_tag (STRING _) => "STRING";
	    string_tag (PRIMITIVE_OP _) => "PRIMITIVE_OP";
	    string_tag (GENOP _) => "GENOP";
	    string_tag (FN _) => "FN";
	    string_tag (MUTUALLY_RECURSIVE_FNS _) => "MUTUALLY_RECURSIVE_FNS";
	    string_tag (APPLY _) => "APPLY";
	    string_tag (LET _) => "STIPULATE";
	    string_tag (TYPE_FN _) => "TYPE_FN";
	    string_tag (TYPE_APPLY _) => "TYPE_APPLY";
	    string_tag (EXCEPTION_TAG _) => "EXCEPTION_TAG";
	    string_tag (RAISE _) => "RAISE";
	    string_tag (EXCEPT _) => "EXCEPT";
	    string_tag (CONSTRUCTOR _) => "CONSTRUCTOR";
	    string_tag (SWITCH _) => "SWITCH";
	    string_tag (VECTOR _) => "VECTOR";
	    string_tag (RECORD _) => "RECORD";
	    string_tag (PACKAGE_RECORD _) => "PACKAGE_RECORD";
	    string_tag (SELECT _) => "SELECT";
	    string_tag (PACK _) => "PACK";
	    string_tag (BOX _) => "BOX";
	    string_tag (UNBOX _) => "UNBOX";
        end;

    end;	#  toplevel stipulate 

};		#  package prettyprint_polylambda_expression 




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1997 by Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
