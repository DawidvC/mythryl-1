#
# Item factory methods.
# Quick ways to build menus and other fun things in gtk.
# This is currently a substitute for the GtkItemFactory stuff. 

local use Gtk GtkGadgets in
package @ :> 
api

   type path = String  #  path in hierarchy; seperated by / 
   type accel = String #  Accelerator specification 
   type item 
   type item_factory

   type item_callback( X )  = GtkMenuItem( X ) -> Void
   type item_maker( X ) = path -> accel -> item_callback( X ) -> item
   type item_maker'   = path -> accel -> item
   type item_maker''  = path -> item

   #  Item constructors 
   my item:         item_maker(  base )
   my title:        item_maker'
   my radio:        item_maker( checkmenuitem_t( radiomenuitem( base _t ) ) )
   my tearoff:      item_maker'
   my check:        item_maker(  checkmenuitem_t(  base ) )
   my sep:          item_maker''
   my branch:       item_maker'

   #  Make an item factory 
   my item_factory:  Null_Or( GtkAccelGroup::t ) -> item_factory
   my attach_accelerator:  item_factory ->  message( GtkWidget( X ) )
   my accel_group:   item_factory -> GtkAccelGroup::t

   /* Make a menu bar, menu or option menu */ 
   my menu_bar:     item_factory -> List( item ) -> GtkMenuBar(    base )
   my menu:         item_factory -> List( item ) -> GtkMenu(       base )
   my option_menu:  item_factory -> List( item ) -> GtkOptionMenu( base )
end
{

   package h  = hash_table
   package ss = substring

   use gtk_enums 

   infix <- <~

   type path = String  #  path in hierarchy; seperated by / 
   type accel = String #  Accelerator 
   type item_type = String
   type item_callback( X ) = GtkMenuItem( X )-> Void
   enum item = ITEM of path * accel * item_creator
   and item_factory =
      FACTORY of
      { branches:      h::Hash_Table( String, GtkMenu( base ) ),
        accel_group:  GtkAccelGroup::t,
        items:        REF(  List(  item ) )
      }
   withtype item_creator = item_factory * String * String -> base GtkMenuItem

   type item_maker( X ) = path -> accel -> item_callback( X ) -> item
   type item_maker'   = path -> accel -> item
   type item_maker''  = path -> item

   exception ItemFactory

   #  Remove underline from a string 
   removeUnderline = string::translate (fn '_' => "" | c => str c) 


   # Given a path string, finds the parent string and the base string, i.e.,
   # parentOf "/abc/def/ghi" = { parent="/abc/def", base="ghi"}

   fun splitPath s =
   let s     = ss::extract (s, 0, NULL)
       my (l, r) = ss::split_off_suffix  .{ #c != '/'; }  s
   in  { parent=ss::string (ss::slice (l, 0, THE (ss::size l - 1))),
        base  =ss::string r
       }
   end


   # Create an item factory 

   fun item_factory accel_group = 
      FACTORY 
      { branches    = h::makeTable (hash_string::hash_string, op=) (32, ItemFactory),
        accel_group = case accel_group of
                        NULL => gtk_accel_group_new::f ()
                      | THE a => a,
        items       = REF []
      }

   fun accel_group (FACTORY { accel_group, ... } ) = accel_group
   fun attach_accelerator (FACTORY { accel_group, ... } ) widget =
       gtk_accel_group_attach::f (accel_group, widget)


   # Add underline accelerator to a menu item, 
   # using the parentMenu's accelerator.

   fun addUnderlineAccel (parentMenu, item, underlinedName) =
   let accel_group = gtk_menu_ensure_uline_accel_group::f parentMenu
       key = gtk_label_parse_uline::f(
                   GtkLabel::cast (GtkBin::get'child item), underlinedName)
   in  gtk_widget_add_accelerator::f (item, "activate", accel_group, key, 0w0, 0)
   end except (TYPE_ERROR | NULL_POINTER) => () 
        #  If child is not a label then don't both adding the accelerator 


   # Add key accelerator to a menu item 

   fun addAccel (accel_group, "", item) = ()
     | addAccel (accel_group, a, item) = 
       let #  parse the key specification 
           my { accelerator_key, accelerator_mods } = gtk_accelerator_parse::g a
       in  #  Bind the key to the item 
           gtk_widget_add_accelerator::f (item, "activate",
               accel_group, accelerator_key, 
               unsigned accelerator_mods, GTK_ACCEL_VISIBLE)
       end


   # Generic method to add an item to an item factory.

   fun addItem (addToRoot, factory as FACTORY { branches, accel_group, ... } ) 
                 (ITEM (path, acc, itemMaker)) = 
   let my { parent, base } = splitPath path
       label          = removeUnderline base 
       item           = itemMaker (factory, parent, label)
   in  if parent == "" then
          addToRoot item
       else
          let parentMenu = h::lookup branches parent
          in  addUnderlineAccel (parentMenu, item, base);
              gtk_menu_append::f (parentMenu, item)
          end;
       addAccel (accel_group, acc, item);
       item
   end

   #  How to make things 
   fun makeItem callback (factory, parent, name) = 
       MenuItem::label name [on::menu_item_activate callback]
   fun makeCheckItem callback (factory, parent, name) = 
       asMenuItem (CheckMenuItem::label name [on::menu_item_activate callback])
   fun makeRadioItem callback (factory, parent, name) = 
       asMenuItem (RadioMenuItem::label (NULL, name) 
           [on::menu_item_activate callback])
   fun makeSep (factory, parent, name) = MenuItem::new [+.hsep]
   fun makeTitle (factory, parent, name) = MenuItem::label name []
   fun makeTearoff (factory, parent, name) = asMenuItem (TearoffMenuItem::new [])
   fun makeBranch (FACTORY { branches, ... }, parent, name) =
       let item    = MenuItem::label name []
           submenu = Menu::new []
       in  gtk_menu_item_set_submenu::f (item, submenu);
           h::set branches (parent$"/"$name, submenu);
           item
       end

   fun do_nothing _ = ()
 
   #  Item constructors 
   fun item p a f        = ITEM (p, a, makeItem f)
   fun title p a         = ITEM (p, a, makeTitle)
   fun radio p a f       = ITEM (p, a, makeRadioItem f)
   fun check p a f       = ITEM (p, a, makeCheckItem f)
   fun toggle p a f      = raise exception FAIL "toggle" #  (p, a, f, "<ToggleItem>") 
   fun image p a f       = raise exception FAIL "image" #  (p, a, f, "<ImageItem>") 
   fun stock p a f       = raise exception FAIL "stock" #  (p, a, f, "<StockItem>") 
   fun sep p             = ITEM (p, "", makeSep)
   fun tearoff p a       = ITEM (p, a, makeTearoff)
   fun branch p a        = ITEM (p, a, makeBranch)

   fun maker (new, append) factory items =
   let menu = new()
       fun add item = append (menu, item) 
   in  apply (addItem (add, factory)) items;
       menu
   end

   menu_bar = maker (gtk_menu_bar_new::f, gtk_menu_bar_append::f)
   menu     = maker (gtk_menu_new::f, gtk_menu_append::f)
 
   fun option_menu _ = raise exception FAIL "option_menu"

}
end #  local 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
