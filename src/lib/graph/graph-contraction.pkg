#
#  Allows contraction of a set of nodes
#  and replacement of them by a new node.
# 
# -- Allen Leung




api GRAPH_MINOR
=
api

   my minor_view:  
      graph::graph (N,E,G) ->
      { minor:     graph::graph( N, E, G ), 
        contract:  List( graph::node_id ) * graph::node( N ) -> Void
      }
end

package graph_minor:  GRAPH_MINOR {

    package g = graph;

    enum node = ;

    fun minor_view (g::GRAPH ggg)
	=
	{   fun get n
		=
		minor =
		    g::GRAPH
		    { name            => ggg.name,
		      graph_info      => ggg.graph_info,
		      new_id          => ggg.new_id,
		      add_node        => ggg.add_node,
		      add_edge        => ggg.add_edge,
		      remove_node     => ggg.remove_node,
		      set_in_edges    => ggg.set_in_edges,
		      set_out_edges   => ggg.set_out_edges,
		      set_entries     => ggg.set_exits,
		      set_exits       => ggg.set_entries,
		      garbage_collect => ggg.garbage_collect,
		      nodes           => ggg.nodes,
		      edges           => ggg.edges,
		      order           => ggg.order,
		      size            => ggg.size,
		      capacity        => ggg.capacity,
		      out_edges       => ggg.out_edges,
		      in_edges        => ggg.in_edges,
		      next            => ggg.next,
		      prior            => ggg.prior,
		      has_edge        => ggg.has_edge,
		      has_node        => ggg.has_node,
		      node_info       => ggg.node_info,
		      entries         => ggg.entries,
		      exits           => ggg.exits,
		      entry_edges     => ggg.entry_edges,
		      exit_edges      => ggg.exit_edges,
		      forall_nodes    => ggg.forall_nodes,
		      forall_edges    => ggg.forall_edges
		    };
	    { minor,
	      contract
	    };
	};
};

