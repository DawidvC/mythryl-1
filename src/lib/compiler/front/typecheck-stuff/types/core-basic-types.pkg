## core-type-types.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# a generic part of type-types.pkg (not Lib7 specific)

package core_type_types: (weak)  api

     arrow_stamp:  stamp::Stamp;
     arrow_tycon:  types::Type;
     --> : (types::Type, types::Type) -> types::Type;

     ref_stamp:  stamp::Stamp;
     ref_type_constructor_sym:  symbol::Symbol;
     ref_con_sym:  symbol::Symbol;
     ref_tycon:  types::Type;
     ref_dcon:  types::Constructor;
     ref_pattern_type:  types::Type;

     bool_stamp:  stamp::Stamp;
     bool_sym:  symbol::Symbol;
     false_sym:  symbol::Symbol;
     true_sym:  symbol::Symbol;
     bool_tycon:  types::Type;
     bool_type:  types::Type;
     bool_api:  access::Constructor_Signature;
     false_dcon:  types::Constructor;
     true_dcon:  types::Constructor;

     void_symbol:  symbol::Symbol;
     void_tycon:  types::Type;
     void_type:  types::Type;

     int_tycon:  types::Type;
     int_type:  types::Type;

     string_tycon:  types::Type;
     string_type:  types::Type;

     char_tycon:  types::Type;
     char_type:  types::Type;

     real_tycon:  types::Type;
     real_type:  types::Type;

     exn_tycon:  types::Type;
     exception_type:  types::Type;

     tuple_type:  List( types::Type ) -> types::Type;

     record_type:  List( (types::Label, types::Type) ) -> types::Type;

     array_tycon:  types::Type;
     vector_tycon:  types::Type;

end

{
    package t= types;						# types						is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
    package ip= inverse_path;					# inverse_path					is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
    package ptn= core_primitive_type_constructor_numbers;	# core_primitive_type_constructor_numbers	is from   src/lib/compiler/front/typecheck-stuff/basics/core-primitive-type-constructor-numbers.pkg

    arrow_stamp = stamp::special "->";
    ref_stamp   = stamp::special "REF";
    bool_stamp  = stamp::special "bool";

    void_symbol                 = symbol::make_type_symbol "Void";
    ref_type_constructor_sym = symbol::make_type_symbol "Ref";
    ref_con_sym              = symbol::make_value_symbol "REF";

    bool_sym  = symbol::make_type_symbol "Bool";
    false_sym = symbol::make_value_symbol "FALSE";
    true_sym  = symbol::make_value_symbol "TRUE";

    fun tc2t type_constructor
        =
        t::CONSTRUCTOR_TYPE (type_constructor, []);

    void_tycon
        =
	t::DEFINED_TYPE_CONSTRUCTOR {
            stamp        => stamp::special "unit",
	    strict       => [],
	    path         => ip::INVERSE_PATH [void_symbol],
	    type_scheme => t::TYPE_SCHEME { arity => 0,
				             body  => t::CONSTRUCTOR_TYPE (tuples::make_tuple_type_constructor 0, [])
                                           }
        };

    void_type   =   tc2t void_tycon;

    fun pt2tc (symbol, arity, equality_property, ptn)
        =
	t::PRIMITIVE_TYPE_CONSTRUCTOR {

            stamp => stamp::special symbol,
	    path  => ip::INVERSE_PATH [symbol::make_type_symbol symbol],
 	    arity,

	    eq    => REF equality_property,
	    kind  => t::PRIMITIVE ptn,
	    stub  => NULL
        };

    fun pt2tct args
        =
        {   type_constructor = pt2tc args;
	
	    (type_constructor, tc2t type_constructor);
	};

    my (int_tycon, int_type)       = pt2tct ("Int",       0, t::YES, ptn::prim_type_num_int   );
    my (string_tycon, string_type) = pt2tct ("String",    0, t::YES, ptn::prim_type_num_string);
    my (char_tycon, char_type)     = pt2tct ("Char",      0, t::YES, ptn::prim_type_num_int   );
    my (real_tycon, real_type)     = pt2tct ("Float",     0, t::NO,  ptn::prim_type_num_real  );
    my (exn_tycon, exception_type) = pt2tct ("Exception", 0, t::NO,  ptn::prim_type_num_exn   );

    array_tycon  = pt2tc ("array",  1, t::CHUNK, ptn::prim_type_num_array );
    vector_tycon = pt2tc ("vector", 1, t::YES,   ptn::prim_type_num_vector);

    arrow_tycon
        =
	t::PRIMITIVE_TYPE_CONSTRUCTOR {

            stamp => arrow_stamp,
	    path  => ip::INVERSE_PATH [symbol::make_type_symbol "->"],
	    arity => 2,

	    eq    => REF t::NO,
	    kind  => t::PRIMITIVE ptn::prim_type_num_arrow,
	    stub  => NULL
        };

    infix -->;

    fun t1 --> t2
        =
        t::CONSTRUCTOR_TYPE (arrow_tycon, [t1, t2]);

    fun record_type (fields: List( (t::Label, t::Type)) )
        =
	t::CONSTRUCTOR_TYPE (tuples::make_record_type_constructor (map #1 fields), map #2 fields);

    fun tuple_type types
        =
        t::CONSTRUCTOR_TYPE (tuples::make_tuple_type_constructor (length types), types);

    my (ref_tycon, ref_pattern_type, ref_dcon)
        =
        {   eq_ref  =  REF t::CHUNK;
	    alpha   =  t::TYPE_SCHEME_ARG_I 0;
	    ref_dom =  alpha;
	    refsign =  access::CSIG (1, 0);

	    ref_tycon = t::PRIMITIVE_TYPE_CONSTRUCTOR {

			       stub  => NULL,
		               stamp => ref_stamp,
			       path  => ip::INVERSE_PATH [ ref_type_constructor_sym ],
			       arity => 1,
			       eq    => eq_ref,
			       kind  => t::DATATYPE {
				           index    => 0,
					   stamps   => #[ref_stamp],
					   free_type_constructors => [],
					   root     => NULL,
					   family   => {   properties => property_list::new_holder (),
						          mkey       => ref_stamp,
							  members    => #[   {   type_constructor_name => ref_type_constructor_sym,
									        eq         => eq_ref,
									        is_lazy     => FALSE,
									        arity      => 1,
									        an_api => access::CSIG (1, 0),
									        constructor_list => [  {   name           => ref_con_sym,
													         representation => access::REF_REP,
													         domain         => THE ref_dom
												             }
												          ]
								            }
								        ]

				       
                                                      }
                                       }
                           };

	    ref_tyfun
                =
		t::TYPE_SCHEME { arity => 1, body => alpha --> t::CONSTRUCTOR_TYPE (ref_tycon, [alpha]) };

	    ref_pattern_type
                =
                t::TYPE_SCHEME_TYPE {
                    type_scheme_arg_eq_properties => [FALSE],
                    type_scheme => ref_tyfun
                };

	    ref_dcon = t::ENUM_CONSTRUCTOR { symbol          => ref_con_sym,
					     const           => FALSE,
					     is_lazy         => FALSE,
					     representation  => access::REF_REP,
					     constructortype => ref_pattern_type,
					     an_api          => refsign
					   };
	
	    (ref_tycon, ref_pattern_type, ref_dcon);
	};

    bool_api = access::CSIG (0, 2);

    my (bool_tycon, bool_type, false_dcon, true_dcon)
        =
        { booleq = REF t::YES;

	    bool_tycon
                =
		t::PRIMITIVE_TYPE_CONSTRUCTOR {
		    stamp => bool_stamp,
		    path  => ip::INVERSE_PATH [bool_sym],
		    arity => 0,
		    eq    => booleq,
                    stub  => NULL,
		    kind  => t::DATATYPE {
				index    => 0,
				stamps   => #[bool_stamp],
				free_type_constructors => [],
				root     => NULL,
				family   => {   properties => property_list::new_holder (),
                                               mkey       => bool_stamp,
                                               members    => #[   {   type_constructor_name => bool_sym,
								     eq         => booleq,
								     is_lazy     => FALSE,
								     arity      => 0,
								     an_api => bool_api,

								     constructor_list =>   [  {   name           => false_sym,
													representation => access::CONSTANT 0,
													domain         => NULL
												    },
												    {   name           => true_sym,
													representation => access::CONSTANT 1,
													domain         => NULL
												    }
												 ]
								 }
							     ]
				    
				    
                                           }
                            }
                };

	    bool_type = t::CONSTRUCTOR_TYPE (bool_tycon, []);

	    false_dcon = t::ENUM_CONSTRUCTOR
                          {
			    symbol           => false_sym,
			    const            => TRUE,
			    is_lazy          => FALSE,
			    representation   => access::CONSTANT 0,
			    constructor_type => bool_type,
			    an_api           => bool_api
			  };

	    true_dcon = t::ENUM_CONSTRUCTOR
                         {
			   symbol          => true_sym,
			   const           => TRUE,
			   is_lazy         => FALSE,
			   representation  => access::CONSTANT 1,
			   constructortype => bool_type,
			   an_api          => bool_api
                         };
	
	    (bool_tycon, bool_type, false_dcon, true_dcon);
	};
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
