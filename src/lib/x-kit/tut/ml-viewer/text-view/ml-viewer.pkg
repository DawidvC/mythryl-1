## ml-viewer.pkg

# Compiled by:
#     src/lib/x-kit/tut/ml-viewer/ml-viewer-app.make6


# A viewer widget for ML code.


api Ml_Viewer {

    open_viewer
	:
	widget::Root_Window
        ->
        {
	  file:    String,
	  module:  String,
	  loc:     Int,
	  range:   Null_Or { first:  Int,
                             last:   Int
                           }
	}
        ->
        Void;

};

							# load_file_g		is from   src/lib/x-kit/tut/ml-viewer/text-view/load-file-g.pkg
package ml_viewer:  Ml_Viewer {

    include threadkit;					# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg

    package xc =  xcore;				# xcore			is from   src/lib/x-kit/xclient/xcore.pkg
    package xf =  xfont;				# xfont			is from   src/lib/x-kit/xclient/xfont.pkg

    package lw =  line_of_widgets;			# line_of_widgets	is from   src/lib/x-kit/widget/layout/line-of-widgets.pkg
    package pb =  pushbuttons;				# pushbuttons		is from   src/lib/x-kit/widget/leaf/pushbuttons.pkg

    package v  =  ml_source_code_viewer;

    package load = load_file_g( file );

    fun open_viewer root_window { file, module, loc, range }
        =
        {

	    # my _ = cio::print (format::format "open_viewer: file = %s, module = %s, loc = %d\n" [
	    # format::STR file, format::STR module, format::INT loc])

	    oneshot = make_oneshot_maildrop ();

	    threadkit::make_thread "ml_viewer open_viewer"  (fn () = set (oneshot, load::load_file (file, range)));

	    open_font = xf::open_font (widget::xsession_of root_window);

	    font1 = open_font "-*-courier-medium-r-*-*-20-*-*-*-*-*-*-*";
	    font2 = open_font "-*-courier-medium-o-*-*-20-*-*-*-*-*-*-*";
	    font3 = open_font "-*-courier-bold-r-*-*-20-*-*-*-*-*-*-*";

	    viewer
                =
                ml_source_code_viewer::make_viewer  root_window
                  {
		    src  => get oneshot,
		    font => font1,
		    #
		    background => xc::CMS_NAME "wheat1",
		    #
		    comm_face  => v::FACE { font=>THE font2, color => THE (xc::CMS_NAME "red"  ) },
		    kw_face    => v::FACE { font=>THE font3, color => THE (xc::CMS_NAME "black") },
		    sym_face   => v::FACE { font=>THE font3, color => THE (xc::CMS_NAME "black") },
		    id_face    => v::FACE { font=>NULL,      color => THE (xc::CMS_NAME "blue" ) }
		  };

	    init_loc
	        =
                case range
		    #
		    NULL                =>  loc - 1;
		    THE { first, last } =>  loc - first;
		esac;

	    my (widget, mailop)
		=
		widget::filter_other (scroll_viewer::make_viewer root_window (viewer, init_loc));

	    quit_btn
                =
                pb::make_text_pushbutton  root_window
		  {
		    rounded    =>  TRUE,
		    label      =>  "Close view",

		    background =>  NULL,
		    foreground =>  NULL
		  };

	    widget'
                =
                lw::as_widget
                    (lw::make_line_of_widgets  root_window
                        (lw::VT_CENTER
                          [
			    lw::HZ_CENTER
                              [
				lw::SPACER { min_size=>2,  ideal_size=>2, max_size=>THE 2 },
				lw::VT_CENTER
                                  [
				    lw::SPACER { min_size=>2,  ideal_size=>2, max_size=>THE 2 },
				    lw::WIDGET (pb::as_widget quit_btn),
				    lw::SPACER { min_size=>2,  ideal_size=>2, max_size=>THE 2 }
				  ],
				lw::SPACER { min_size=>1,  ideal_size=>1000, max_size=>NULL }
			      ],
			    lw::WIDGET (divider::make_horizontal_divider  root_window  { color=>NULL, width=>1 } ),
			    lw::WIDGET widget
			  ]
                        )
                    );

	    topwindow
		=
                topwindow::make_topwindow
                    ( widget',
                      NULL,
                      { window_name =>  THE ("ML-viewer: " + file),
		        icon_name   =>  THE "ML-viewer"
		      }
                    );

	    fun cmd_monitor ()
		=
		loop ()
		where
		    my (cmd', cmd_slot)
			=
			do_mailop  mailop;

		    quit'
			=
			pb::button_transition'_of  quit_btn;


		    fun do_cmd  envelope
			=
			{    case (xinput::envelope_contents  envelope)
				 #	
				 xinput::ETC_OWN_DEATH =>  topwindow::destroy topwindow;
				 _                     =>  ();
			     esac;

			     give (cmd_slot, envelope);
			};


		    fun do_quit (pb::BUTTON_UP _) =>  topwindow::destroy topwindow;
			do_quit _                 =>  ();
		    end;


		    fun loop ()
			=
			for (;;) { 
			    #
			    select [
				#
				cmd'  ==>  do_cmd,
				quit' ==>  do_quit
			    ];
			};

		end;

	      topwindow::start  topwindow;

	      make_thread  "ml_viewer"  cmd_monitor;

	      ();
          };			# fun open_viewer

};				# package ml_viewer 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1993 AT&T Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
