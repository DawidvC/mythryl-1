## sparc-rewrite.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/sparc.make6

# We are invoked from:
#
#     src/lib/compiler/codegen/sun/sparc-codegen.pkg
#     src/lib/compiler/lower/sun/reg-alloc/sparc-spill-instruction.pkg

generic package sparc_instructions_rewrite_g (

    instruction_set: Instruction_Set_Sparc		# Instruction_Set_Sparc	is from   src/lib/compiler/lower/sun/instruction/instruction-set-sparc.api
)
{
   package instruction_set =  instruction_set;
   package cells           =  instruction_set::cells;

   package i  =  instruction_set;
   package c  =  cells;
   package cb =  cells_basis;	# cells_basis	is from   src/lib/compiler/lower/instruction/cells-basis.pkg
   package cs =  cb::cell_set;

   fun error msg
       =
       lowcode_error_message::error ("sparc_instructions_rewrite_g", msg);

   fun rewrite_use (instruction, rs, rt)
       =
       {   fun match r
               =
               cb::same_color (r, rs); 

	   fun rrr r
               =
               if (match r ) rt; else r;fi; 

	   fun ooo (i as i::REG r) => if (match r ) i::REG rt; else i;fi;
	       ooo i => i;
           end;

	   fun ea' (THE (i::DISPLACE { base, disp, mem } ))
		   => 
		   THE (i::DISPLACE { base=>rrr base, disp, mem } );

	       ea' ea => ea;
           end;

	   fun sparc_use (instruction)
	       = 
	       case instruction
	         
		   i::LOAD { l, r, i, d, mem } => i::LOAD { l, r=>rrr r, i=>ooo i, d, mem };
		   i::STORE { s, d, r, i, mem } => i::STORE { s, d=>rrr d, r=>rrr r, i=>ooo i, mem };
		   i::FLOAD { l, r, i, d, mem } => i::FLOAD { l, r=>rrr r, i=>ooo i, d, mem };
		   i::FSTORE { s, d, r, i, mem } => i::FSTORE { s, d, r=>rrr r, i=>ooo i, mem };
		   i::ARITH { a, r, i, d } => i::ARITH { a, r=>rrr r, i=>ooo i, d };
		   i::SHIFT { s, r, i, d } => i::SHIFT { s, r=>rrr r, i=>ooo i, d };
		   i::BR { r, p, rcond, a, nop, label } =>
		       i::BR { r=>rrr r, p, rcond, a, nop, label };
		   i::MOVICC { b, i, d } => i::MOVICC { b, i=>ooo i, d=>rrr d };
		   i::MOVFCC { b, i, d } => i::MOVFCC { b, i=>ooo i, d=>rrr d };
		   i::MOVR { rcond, r, i, d } => i::MOVR { rcond, r=>rrr r, i=>ooo i, d=>rrr d };
		   i::JMP { r, i, labs, nop } => i::JMP { r=>rrr r, i=>ooo i, labs, nop };
		   i::JMPL { r, i, d, defs, uses, cuts_to, nop, mem } => 
		       i::JMPL { r=>rrr r, i=>ooo i, d, defs,
			      uses=>cs::map { from=>rs, to=>rt } uses,
			      cuts_to, nop, mem };
		   i::CALL { defs, uses, label, cuts_to, nop, mem } => 
		       i::CALL { defs, uses=>cs::map { from=>rs, to=>rt } uses,
			      label, cuts_to, nop, mem };
		   i::SAVE { r, i, d } => i::SAVE { r=>rrr r, i=>ooo i, d };
		   i::RESTORE { r, i, d } => i::RESTORE { r=>rrr r, i=>ooo i, d };
		   i::WRY { r, i } => i::WRY { r=>rrr r, i=>ooo i };
		   i::TICC { t, cc, r, i } => i::TICC { t, cc, r=>rrr r, i=>ooo i };
		   _ => instruction;
	       esac;

	    case instruction
              
		 i::NOTE { instruction, ... }
                     =>
                     rewrite_use (instruction, rs, rt);

		 i::LIVE { regs, spilled }
                     =>
                     i::LIVE { regs=>c::add_reg (rt, c::rmv_reg (rs, regs)),
						   spilled };
		 i::BASE_INSTRUCTION i
                     =>
                     i::BASE_INSTRUCTION (sparc_use i);

		 i::COPY { kind as cb::REGISTER, size_in_bits, src, dst, tmp }
                     => 
		     i::COPY { kind, size_in_bits, src=>map rrr src, dst, tmp=>ea' tmp };

		 _ => error "rewriteUse";
            esac;
       };

   fun rewrite_def (instruction, rs, rt)
       =
       {   fun match r
               =
               cb::same_color (r, rs);

	   fun rrr r
               =
               if (match r ) rt; else r;fi; 

	   fun ea (THE (i::DIRECT r)) => THE (i::DIRECT (rrr r));
	       ea x => x;
           end; 

	   fun sparc_def (instruction)
	       = 
	       case instruction 
	         
		   i::LOAD { l, r, i, d, mem } => i::LOAD { l, r, i, d=>rrr d, mem };
		   i::ARITH { a, r, i, d }     => i::ARITH { a, r, i, d=>rrr d };
		   i::SHIFT { s, r, i, d }     => i::SHIFT { s, r, i, d=>rrr d };
		   i::SETHI { i, d }           => i::SETHI { i, d=>rrr d };
		   i::MOVICC { b, i, d }       => i::MOVICC { b, i, d=>rrr d };
		   i::MOVFCC { b, i, d }       => i::MOVFCC { b, i, d=>rrr d };
		   i::MOVR { rcond, r, i, d }  => i::MOVR { rcond, r, i, d=>rrr d };
		   i::SAVE { r, i, d }         => i::SAVE { r, i, d=>rrr d };
		   i::RESTORE { r, i, d }      => i::RESTORE { r, i, d=>rrr d };
		   i::RDY { d }                => i::RDY { d=>rrr d };

		   i::JMPL { r, i, d, defs, uses, cuts_to, nop, mem }
                       => 
		       i::JMPL { r, i, d=>rrr d, defs=>cs::map { from=>rs, to=>rt } defs,
			      uses, cuts_to, nop, mem };

		   i::CALL { defs, uses, label, cuts_to, nop, mem }
                       => 
		       i::CALL { defs=>cs::map { from=>rs, to=>rt } defs,
			      uses, label, cuts_to, nop, mem };

		   _ => instruction;
               esac;


	   case  instruction
	     
	       i::NOTE { instruction, ... }
                   =>
                   rewrite_def (instruction, rs, rt);

	       i::DEAD { regs, spilled }
                   => 
		   i::DEAD { regs=>c::add_reg (rt, c::rmv_reg (rs, regs)), spilled };

	       i::BASE_INSTRUCTION i
                   =>
                   i::BASE_INSTRUCTION (sparc_def i);

	       i::COPY { kind as cb::REGISTER, size_in_bits,  src, dst, tmp }
                   => 
		   i::COPY { kind, size_in_bits, src, dst=>map rrr dst, tmp=>ea tmp };

	       _ => error "rewriteDef";
           esac;
       };


   fun frewrite_use (instruction, rs, rt)
       =
       {   fun match r = cb::same_color (r, rs);
	   fun rrr r = if (match r ) rt; else r;fi; 

	   fun sparc_use (instruction)
	       = 
	      case instruction
                
		  i::FPOP1 { a, r, d }          =>   i::FPOP1   { a, r=>rrr r, d };
		  i::FPOP2 { a, r1, r2, d }     =>   i::FPOP2   { a, r1=>rrr r1, r2=>rrr r2, d };
		  i::FCMP { cmp, r1, r2, nop }  =>   i::FCMP    { cmp, r1=>rrr r1, r2=>rrr r2, nop };
		  i::FSTORE { s, r, i, d, mem } =>   i::FSTORE  { s, r, i, d=>rrr d, mem };
		  i::FMOVICC { size, b, r, d }    =>   i::FMOVICC { size, b, r=>rrr r, d=>rrr d };
		  i::FMOVFCC { size, b, r, d }    =>   i::FMOVFCC { size, b, r=>rrr r, d=>rrr d };

		  i::JMPL { r, i, d, defs, uses, cuts_to, nop, mem }
		      =>
		      i::JMPL { r, i, d, defs,
			     uses=>cs::map { from=>rs, to=>rt } uses,
			     cuts_to, nop, mem };

		  i::CALL { defs, uses, label, cuts_to, nop, mem }
		      =>
		      i::CALL { defs, uses=>cs::map { from=>rs, to=>rt } uses,
			     label, cuts_to, nop, mem };
		  _ => instruction;
              esac;

	   case instruction
	     
	       i::NOTE { instruction, ... }
                   =>
                   frewrite_use (instruction, rs, rt);

	       i::BASE_INSTRUCTION i
                   =>
                   i::BASE_INSTRUCTION (sparc_use i);

	       i::LIVE { regs, spilled }
                   => 
		   i::LIVE { regs=>c::add_freg (rt, c::rmv_freg (rs, regs)), spilled };

	       i::COPY { kind as cb::FLOAT_REGISTER, size_in_bits, src, dst, tmp }
                   => 
		   i::COPY { kind, size_in_bits, src=>map rrr src, dst, tmp };

	       _ => error "frewriteUse";
           esac;

     };

   
   fun frewrite_def (instruction, rs, rt)
       =
       {   fun match r = cb::same_color (r, rs);

	   fun rrr r = if (match r ) rt; else r;fi; 

	   fun ea (THE (i::FDIRECT r)) => THE (i::FDIRECT (rrr r));
	      ea x => x;
           end; 

	   fun sparc_def (instruction)
	       = 
	       case instruction
                 
		   i::FPOP1 { a, r, d }         => i::FPOP1 { a, r, d=>rrr d };
		   i::FPOP2 { a, r1, r2, d }    => i::FPOP2 { a, r1, r2, d=>rrr d };
		   i::FLOAD { l, r, i, d, mem } => i::FLOAD { l, r, i, d=>rrr d, mem };
		   i::FMOVICC { size, b, r, d }   => i::FMOVICC { size, b, r, d=>rrr d };
		   i::FMOVFCC { size, b, r, d }   => i::FMOVFCC { size, b, r, d=>rrr d };

		   i::JMPL { r, i, d, defs, uses, cuts_to, nop, mem }
                       =>
		       i::JMPL { r, i, d, defs=>cs::map { from=>rs, to=>rt } defs,
			     uses, cuts_to, nop, mem };

		   i::CALL { defs, uses, label, cuts_to, nop, mem }
                       =>
		       i::CALL { defs=>cs::map { from=>rs, to=>rt } defs,
			     uses, label, cuts_to, nop, mem };

		   _ => instruction;
	       esac;


	   case instruction
	     
               i::NOTE { instruction, ... }
                   =>
                   frewrite_def (instruction, rs, rt);

	       i::DEAD { regs, spilled }
                   => 
		   i::DEAD { regs=>c::add_freg (rt, c::rmv_freg (rs, regs)), spilled };

	       i::BASE_INSTRUCTION i
                   =>
                   i::BASE_INSTRUCTION (sparc_def i);

	       i::COPY { kind as cb::FLOAT_REGISTER, size_in_bits, src, dst, tmp }
                   => 
		   i::COPY { kind, size_in_bits, src, dst=>map rrr dst, tmp=>ea tmp };

	       _ => error "frewriteUse";
           esac;

       };  
};

