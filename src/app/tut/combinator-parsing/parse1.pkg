# A tutorial exercise in higher-order and curried functions,
# and specifically in combinator parsing.
#
# You may exercise it by doing
#
#     linux$ my
#
#     eval: make "parse1.make6";
#     eval: parse1::parse "The boy quickly throws the little ball";

package parse1 {

    in = list::in;

    Parsetree = PAIR (Parsetree, Parsetree)
	      | TOKEN String
	      ;

    fun parsetree_to_string (TOKEN string)
	    =>
	    string;

	parsetree_to_string (PAIR (parsetree1, parsetree2))
	    =>
	    sprintf "(%s %s)"
		(parsetree_to_string  parsetree1)
		(parsetree_to_string  parsetree2);
    end;



    # A parse function which matches any word in a given list:
    #
    fun match  words  success_fate  failure_fate  []   : Void
	    =>
	    failure_fate  ();                                               # No token to match.

	match  words  success_fate  failure_fate (token ! tokens)
	    =>
	    if (string::to_lower(token) in words)

                 success_fate  (TOKEN token) failure_fate  tokens;
            else
                 failure_fate  ();                                               # Next token does not match.
	    fi;	    
    end;


    # An 'and' parse combinator which requires that
    # the two given sub-parse functions successively
    # match a prefix of the tokens input:
    #
    fun parse_fn_1 & parse_fn_2
	=
        fn  success_fate
	    =
	    parse_fn_1
		(fn parsetree_1
		    =
		    parse_fn_2
			(fn parsetree_2
			    =
			    success_fate  (PAIR (parsetree_1, parsetree_2))
			)
		);


    # An 'or' parse combinator which requires that
    # one of the two given sub-parse functions
    # match a prefix of 'tokens':
    #
    fun parse_fn_1 | parse_fn_2
	=
        fn  success_fate
	    =
        fn  failure_fate
	    =
        fn  tokens
	    =
            parse_fn_1  success_fate  failure_fate_1  tokens
            where
                fun failure_fate_1 ()
                    =
                    parse_fn_2  success_fate  failure_fate  tokens;
            end;


    # Now a simple grammar:
    #
    verb      =  match [ "eats", "throws", "eat", "throw" ];
    noun      =  match [ "boy", "girl", "apple", "ball"   ];
    article   =  match [ "the", "a"                       ];
    adjective =  match [ "big", "little", "good", "bad"   ];
    adverb    =  match [ "quickly", "slowly"              ];

    qualified_noun =   noun   |   adjective  &  noun;
    qualified_verb =   verb   |   adverb     &  verb;

    noun_phrase    =             qualified_noun
                   | article  &  qualified_noun;

    sentence
        =
        ( noun_phrase  &  qualified_verb  &  noun_phrase	# "The little boy quickly throws the ball"
        |                 qualified_verb  &  noun_phrase	# "Eat the apple"
        | noun_phrase  &  qualified_verb			# "The girl slowly eats"
        |                 qualified_verb			# "Eat"
        );


    # Finally, a toplevel function to drive it all:
    #
    fun parse string
        =
        sentence
            toplevel_success_fate
            toplevel_failure_fate
            (string_to_words  string)
	where
	    fun toplevel_success_fate  parsetree  failure_fate  tokens
		=
		printf "Successful parse: %s\n" (parsetree_to_string  parsetree);


	    fun toplevel_failure_fate  ()
		=
		print  "No parse found.\n";


	    string_to_words =  string::tokens  char::is_space;
	end;
};
