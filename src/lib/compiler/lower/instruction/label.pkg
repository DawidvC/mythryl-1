## label.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6


package label: Label {		# Label	is from   src/lib/compiler/lower/instruction/label.api

    Label_Kind = GLOBAL  String
               | LOCAL  String
               | ANONYMOUS;

    Label
        =
        { id:  Unt,
	  address:  Ref( Int ),
	  kind:  Label_Kind
        };

    stipulate

        count = REF 0u0;		# XXX BUGGO FIXME More icky thread-hostile variable global state. :-(  :-(

    herein

	fun reset ()
            =
            count := 0u0;

	fun next_label kind
            =
            {   id = *count;
                count := id + 0u1;
                { id, address => REF -1, kind };
            };
    end;


    # Make a global label 
    #
    fun make_global_label  name
        =
        next_label (GLOBAL name);



    # Make a label generator; note that if the prefix string is "",
    # then the standard prefix "L" will be used.
    #
    fun make_label_generator ""
            =>
            make_label_generator "L";

        make_label_generator prefix
            =>
            {   kind = LOCAL prefix;
	  
	        .{ next_label kind; };
	    };
    end;

    fun make_anonymous_label ()		#  Make an anonymous label.
        =
        next_label ANONYMOUS;


    # Label equality, comparisons, and hashing:
    #
    fun same (   l1:  Label,
                 l2:  Label
             )
        =
        l1.id  ==  l2.id;

    fun compare (l1:  Label, l2:  Label)
        =
        unt::compare (l1.id, l2.id);

    fun hash (l:  Label)
        =
        l.id;


    # Label addresses:
    #
    exception GLOBAL_LABEL;
    #
    fun set_addr ( { id, address, kind=>GLOBAL _}, _) =>   raise exception GLOBAL_LABEL;
        set_addr ( { id, address, kind          }, a) =>   address := a;
    end;
    #
    fun addr_of { id, address, kind=>GLOBAL _} => raise exception GLOBAL_LABEL;
        addr_of { id, address, kind          } => *address;
    end;

    # Return a string representation of the label.
    #
    # This function is meant for debugging --
    # use the fmt function for assembly output.
    #
    fun to_string { id, address, kind => GLOBAL name    }  => name;
        to_string { id, address, kind => LOCAL prefix }  => prefix + unt::to_string id;
        to_string { id, address, kind => ANONYMOUS         }  => ".L"   + unt::to_string id;
    end;

    # Format a label for assembly output.
    #
    # 'g_prefix': the target ABI's prefix
    #            for global symbols
    #            (e.g., "_" or "")
    #
    # 'a_prefix': the target assembler's prefix
    #             for anonymous labels.
    #
    # Local labels are emitted using
    # their specified prefix:
    #
    fun format_for_asm { g_prefix, a_prefix }
        =
	to_string
        where
	    fun to_string { id, address, kind=>GLOBAL name  } =>  g_prefix + name;
	        to_string { id, address, kind=>LOCAL prefix } =>  prefix   + unt::to_string  id;
	        to_string { id, address, kind=>ANONYMOUS    } =>  a_prefix + unt::to_string  id;
            end;
	end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
