
# This interface describes a DDG for acyclic global scheduling 
# (for non-predicated architectures.) 
# Hyperblock scheduling uses another data package.
#
# -- Allen Leung


###              "If at first the idea is not absurd,
###               then there is no hope for it."
###
###                           -- Albert Einstein


api SCHEDULER_DDG =
api

   package i:           Instruction_Set
   package c:           Cells
   package SchedProps:  SCHEDULING_PROPERTIES
      sharing SchedProps::I = I
      sharing i::C = C 

   #  Dependence type 
   enum dependence = 
        FLOW | OUTPUT | ANTI             #  register based dependence 
      | MEM_FLOW | MEM_OUTPUT | MEM_ANTI #  memory based dependence 
      | CTRL | CTRL_ANTI                 #  Control dependence 
      | LIVEIN | LIVEOUT

   type latency = SchedProps::latency
  
   enum edge = EDGE of { l:  latency,    #  latency 
                            r:  c::cell,     #  register 
                            d:  dependence  #  Dependence type 
                           }

   enum node = NODE of { instruction: i::instruction, b: Int, 
                            defs: List( (c::cell * latency) ), uses: List( c::cell ) }

   type info( A_node, A_edge ) 

   # The actual ddg is parameterized with respect to the node and edge type.
   # For local scheduling A_node = instruction and A_edge = latency 
   # For global scheduling A_node = node and A_edge = edge

   type ddg( A_node, A_edge )
       =
       graph::graph(

           A_node,
           A_edge,
           info( A_node, A_edge )
       )

   type block      = Int 
   type blockMap   = rw_vector::Rw_Vector( block )         #  mapping from block id -> block 
   type liveInMap  =  int_hash_table::Hash_Table( graph::node( node ) )
   type liveOutMap = int_hash_table::Hash_Table( graph::node( node ) )

   type internalInfo( A_node, A_edge )
       = 
        { next:   rw_vector::Rw_Vector( List( graph::edge( A_edge ) ) ),
         prior:   rw_vector::Rw_Vector( List( graph::edge( A_edge ) ) ),
         nodes:  rw_vector::Rw_Vector(  Null_Or(  A_node ) )
        }

   type globalInfo =
        { liveInMap:   liveInMap,
         liveOutMap:  liveOutMap,
         blockMap:    blockMap
        }

   # Create an empty DDG with a maximum number of nodes.
   # At the same time return its internal adjlist representation.
   # Just in we want to make the scheduler work fast.

   my newDDG:        Int -> ddg (A_node, A_edge)
   my internalInfo:  ddg( A_node, A_edge ) -> internalInfo( A_node, A_edge )
   my globalInfo:    ddg( A_node, A_edge ) -> REF( Null_Or( globalInfo ) )

   #  pretty print an edge (useful for graphical display) 
   my edgeToString:  edge -> String

   #  liveness annotation 
   my LIVENESS:   Annotations::property { liveIn: List( c::cell ), liveOut: List( c::cell ) }

end
