
# Compiled by:
#     src/lib/compiler/backend-x86.make6

api Xy86Stack_Spills {

    package i:  Instruction_Set_X86;				# Instruction_Set_X86	is from   src/lib/compiler/lower/x86/instruction/instruction-set-x86.api

    init:  Void -> Void;

    set_available_offsets:    List( i::Operand ) -> Void;
    set_available_fpoffsets:  List( i::Operand ) -> Void;

    get_reg_loc:   Int -> i::Operand;
    get_freg_loc:  Int -> i::Operand;
};

package x86stack_spills: (weak)  Xy86Stack_Spills {		# Xy86Stack_Spills	is from   src/lib/compiler/codegen/x86/x86-stack-spills.pkg

    exception REGISTER_SPILLS; 

    package i= instruction_set_x86;				# instruction_set_x86	is from   src/lib/compiler/codegen/x86/x86-codetree.pkg

    fun error msg
        =
        error_message::impossible ("X86StackSpills." + msg);

    initial_spill_offset = x86runtime::spill_start;

    spill_offset  =  REF initial_spill_offset;
    spill_area_size =  x86runtime::spill_area_size;

    available_offsets   = REF []:  Ref( List( i::Operand ) );
    available_fpoffsets = REF []:  Ref( List( i::Operand ) );

    # Indicate that memory some memory registers are not used and
    # can be used for spilling.
    #
    fun set_available_offsets   offsets =  available_offsets   := offsets;
    fun set_available_fpoffsets offsets =  available_fpoffsets := offsets;

    fun new_offset n
        =
        if (n > spill_area_size)  error "newOffset - spill area is too small";
        else                    spill_offset := n;
        fi;

    my  spill_table:  int_hash_table::Hash_Table( i::Operand )
        =
	int_hash_table::make_table (0, REGISTER_SPILLS);

    lookup_table = int_hash_table::get  spill_table;
    add_table    = int_hash_table::set   spill_table;

    fun init ()
        = 
        {   spill_offset:=initial_spill_offset; 
	    available_offsets := [];
	    available_fpoffsets := [];
	    int_hash_table::clear spill_table;
        };

    to_int32 = int32::from_int;

    fun get_reg_loc reg
        = 
	lookup_table reg
	except
            _ = operand
                where
                    operand
                        = 
			case *available_offsets   

			    [] => {   offset = *spill_offset;
				      i32 = to_int32 offset;
				      new_offset (offset+4);
				      i::IMMED i32;
				  };

			    off ! offs
				=>
				{   available_offsets := offs;
				    off;
				};
                        esac; 

		    add_table (reg, operand);
		end;

    fun get_freg_loc freg
        = 
	lookup_table freg
	except
            _ = operand
                where
                    operand
                        =
			case *available_fpoffsets   

			    [] =>
                                {   offset = *spill_offset;
				    from_int = unt::from_int;
				    aligned = unt::to_int_x (unt::bitwise_and (from_int offset+0u7, from_int -8));
				    new_offset (aligned+8); i::IMMED (to_int32 aligned);
				};

			    off ! offs
                                =>
                                {   available_fpoffsets := offs;
                                    off;
                                };
                        esac;

	            add_table (freg, operand);
	        end;
};
