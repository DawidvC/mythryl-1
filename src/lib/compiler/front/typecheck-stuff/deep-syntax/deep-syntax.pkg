## deep-syntax.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# Deep syntax.  The typechecker accepts a raw syntax
# expression and returns a deep syntax expression.
#
# Raw syntax is defined in
#     src/lib/compiler/front/parse/raw-syntax/raw-syntax.api
#     src/lib/compiler/front/parse/raw-syntax/raw-syntax.pkg
#
# Deep syntax differs from raw syntax primarily in
# that (surprise) everything now has an associated
# type.
#
# Deep syntax, per se, is also much simpler, since
# much of the complexity of raw syntax relates to
# type declarations &tc, which stuff is handed off
# to module.{ sig|sml }, types.api &tc.


###                  A gift of great utility
###                    is common copability:
###                  the knack of getting
###                    each thing done
###                  before the grind
###                    has spoiled the fun.
###       
###                             -- Piet Hein


package deep_syntax: (weak)  Deep_Syntax {		# Deep_Syntax		is from   src/lib/compiler/front/typecheck-stuff/deep-syntax/deep-syntax.api

    stipulate

	package s= symbol;			# symbol		is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package f= fixity;			# fixity		is from   src/lib/compiler/front/basics/mlcomp/fixity.pkg
	package sp= symbol_path;		# symbol_path		is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package b= symbol_table_entry;		# symbol_table_entry	is from   src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table-entry.pkg

	include variables_and_constructors;
	include module;
	include types;
    herein

	 Source_Code_Region = raw_syntax::Source_Code_Region;  #  = Int * Int 



	 Numbered_Label
                 =
                 NUMBERED_LABEL  {   name:   s::Symbol,
                                       number: Int
                                   };



	 Deep_Expression

	  = VARIABLE_IN_EXPRESSION             (Ref( Variable ), List( Type ))
	  | CONSTRUCTOR_EXPRESSION             (Constructor, List( Type ))
	  | INT_CONSTANT_IN_EXPRESSION         (integer::Int, Type)
	  | UNT_CONSTANT_IN_EXPRESSION         (integer::Int, Type)
	  | FLOAT_CONSTANT_IN_EXPRESSION       String
	  | STRING_CONSTANT_IN_EXPRESSION      String
	  | CHAR_CONSTANT_IN_EXPRESSION        String
	  | RECORD_EXPRESSION                  List ((Numbered_Label, Deep_Expression))
	  | RECORD_SELECTOR_EXPRESSION         (Numbered_Label, Deep_Expression)           #  record selections 
	  | VECTOR_EXPRESSION                  (List( Deep_Expression ), Type)        
	  | PACK_EXPRESSION                    (Deep_Expression, Type, List( Type_Constructor ))          #  Abstraction packing 
	  | APPLY_EXPRESSION                   (Deep_Expression, Deep_Expression)
	  | EXCEPT_EXPRESSION                  (Deep_Expression, Fnrules)
	  | RAISE_EXPRESSION                   (Deep_Expression, Type)              
	  | CASE_EXPRESSION                    (Deep_Expression, List( Case_Rule ), Bool)     #  TRUE: match; FALSE: bind 
	  | AND_EXPRESSION                     (Deep_Expression, Deep_Expression)
	  | OR_EXPRESSION                      (Deep_Expression, Deep_Expression)
	  | FN_EXPRESSION                      Fnrules
	  | LET_EXPRESSION                     (Declaration, Deep_Expression)
	  | SEQUENTIAL_EXPRESSIONS             List( Deep_Expression )
	  | TYPE_CONSTRAINT_EXPRESSION         (Deep_Expression, Type)         
	  | WHILE_EXPRESSION                   {   test:       Deep_Expression,
                                                     expression: Deep_Expression
                                                 }
	  | IF_EXPRESSION                      {   test_case: Deep_Expression,
                                                     then_case: Deep_Expression,
                                                     else_case: Deep_Expression
                                                 }
	  | SOURCE_CODE_REGION_FOR_EXPRESSION  (Deep_Expression, Source_Code_Region)



	also
	Case_Rule
            = CASE_RULE  (Case_Pattern, Deep_Expression)



	also
	Case_Pattern 
	  = WILDCARD_PATTERN
	  | VARIABLE_IN_PATTERN            Variable
	  | INT_CONSTANT_IN_PATTERN       (integer::Int, Type)
	  | UNT_CONSTANT_IN_PATTERN       (integer::Int, Type)
	  | FLOAT_CONSTANT_IN_PATTERN      String
	  | STRING_CONSTANT_IN_PATTERN     String
	  | CHAR_CONSTANT_IN_PATTERN       String
	  | CONSTRUCTOR_PATTERN            (Constructor, List( Type ))
	  | APPLY_PATTERN                  (Constructor, List( Type ), Case_Pattern)
	  | TYPE_CONSTRAINT_PATTERN        (Case_Pattern, Type)
	  | AS_PATTERN                     (Case_Pattern, Case_Pattern)
	  | OR_PATTERN                     (Case_Pattern, Case_Pattern)
	  | VECTOR_PATTERN                 (List( Case_Pattern ), Type)       
	  | NO_PATTERN
	  | RECORD_PATTERN                 { fields:         List( (Label, Case_Pattern) ),
                                             is_incomplete:  Bool,
                                             type_ref:       Ref( Type )
                                           }



	also
        Declaration	
	  = VALUE_DECLARATIONS               List( Named_Value )                 #  Always a single element list 
	  | RECURSIVE_VALUE_DECLARATIONS     List( Named_Recursive_Values )
	  | TYPE_DECLARATIONS                List( Type_Constructor )
	  | EXCEPTION_DECLARATIONS           List( Named_Exception )
	  | PACKAGE_DECLARATIONS             List( Named_Package )
	  | GENERIC_DECLARATIONS             List( Named_Generic )
	  | API_DECLARATIONS           	     List( Api )
	  | GENERIC_API_DECLARATIONS         List( Generic_Api )
	  | INCLUDE_DECLARATIONS                 List ((sp::Symbol_Path, Package))
	  | LOCAL_DECLARATIONS               (Declaration, Declaration)
	  | SEQUENTIAL_DECLARATIONS          List( Declaration )
	  | OVERLOADED_VARIABLE_DECLARATION  Variable
	  | FIXITY_DECLARATION               { fixity: f::Fixity,
                                               ops:    List( s::Symbol )
                                             } 
	  | ENUM_DECLARATIONS                { datatype_constructors:  List( Type_Constructor ),
                                               with_type_constructors: List( Type_Constructor )
                                             }
	  | ABSTRACT_TYPE_DECLARATION        { abstract_type_constructors: List( Type_Constructor ),
                                               with_type_constructors:     List( Type_Constructor ),
                                               body:                       Declaration
                                             }
	  | SOURCE_CODE_REGION_FOR_DECLARATION  (Declaration, Source_Code_Region)



	# The "parameter_types" field in COMPUTED_PACKAGE
        # is used to record the list of macro expanded
	# higher order type constructors passed to generic
        # during the generic application.
	#
	also
        Package_Expression 
	  = PACKAGE_BY_NAME     Package 
	  | PACKAGE_DEFINITION List( b::Symbol_Table_Entry )
	  | PACKAGE_LET         { declaration:   Declaration,
				  expression:    Package_Expression
				}
	  | COMPUTED_PACKAGE    { a_generic:        Generic,
                                  generic_argument: Package,
                                  parameter_types:  List( Type_Constructor_Path )
                                }
	  | SOURCE_CODE_REGION_FOR_PACKAGE  (Package_Expression, Source_Code_Region)



	# For typing purpose, a generic is viewed as a high-order type constructor 
	# (hotyc) that accepts a list of hotycs and returns another list of hotycs.
	# The "parameter_types" field in GENERIC_DEFINITION records the list of formal hotyc parameters.
	#
	also
        Generic_Expression 
	  = GENERIC_BY_NAME     Generic
	  | GENERIC_LET         (Declaration, Generic_Expression)
	  | GENERIC_DEFINITION  { parameter:       Package,
                                  parameter_types: List( Type_Constructor_Path ),
                                  definition:      Package_Expression
                                }
	  | SOURCE_CODE_REGION_FOR_GENERIC  (Generic_Expression, Source_Code_Region)



	# Each value naming Named_Value only binds one variable identifier.
	# That is,  pattern is always a simple VARIABLE_IN_PATTERN
        # (with type constraints) or it simply does not contain any
        # variable patterns; bound_typevar_refs gives the list of
	# type variables that are being generalized at this binding. 
	#
	also
        Named_Value
            = NAMED_VALUE  { pattern:              Case_Pattern,
			     expression:           Deep_Expression,
			     bound_typevar_refs:   List( Typevar_Ref ),
			     ref_typevar_refs:     Ref(  List( Typevar_Ref ) )
			   }



	# Like value naming Named_Value, bound_typevar_refs gives a list of type variables 
	# being generalized at this binding. However, the mutually recursive
	# list of recursive value bindings could share type variables,
        # that is, the bound_typevar_refs sets used in these RVBs
        # could contain overlapping set of type variables.
	#
	also
	Named_Recursive_Values

            = NAMED_RECURSIVE_VALUES  { variable:             Variable,
					expression:           Deep_Expression,
					bound_typevar_refs:   List( Typevar_Ref ),
					null_or_type:         Null_Or( Type ),
					ref_typevar_refs:     Ref( List( Typevar_Ref ) )
				      }



	also
	Named_Exception

            = NAMED_EXCEPTION  {   exception_constructor:   Constructor,
			               exception_type:          Null_Or( Type ),
				       name_string:             Deep_Expression
				   }

            | DUPLICATE_NAMED_EXCEPTION  {   exception_constructor:  Constructor,
                                                 equal_to:               Constructor
                                             }



	also
	Named_Package

            = NAMED_PACKAGE  {   name_symbol: s::Symbol,
				    a_package: Package,
				    definition: Package_Expression
				} 



	also
	Named_Generic

            = NAMED_GENERIC  {   name_symbol: s::Symbol,
				     a_generic:   Generic,
				     definition: Generic_Expression
				 }

	withtype Fnrules = (List( Case_Rule ), types::Type);

    end;			# stipulate
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
