## matrix.api

# Two-dimensional arrays.



api Matrix =
  api
    type matrix( X )

    my array:  (Int * Int * X) -> matrix( X )
	# array (n, m, x) creates an n*m array initialized to x.
	# Raises SIZE, if m or n is < 0.

    my tabulate:  (Int * Int * ((Int * Int) -> X)) -> matrix( X )
	# tabulate (n, m, f) creates an n*m array, where the (i, j) element
	# is initialized to f (i, j).  Raises SIZE, if m or n is < 0.

    my get:  (matrix( X ) * Int * Int) -> X
	# get (a, i, j) returns the (i, j) element. Raises SUBSCRIPT if i or j
	# is out of range.

    my set:  (matrix( X ) * Int * Int * X) -> Void
	# update (a, i, j, x) sets the (i, j) element to x. Raises SUBSCRIPT if
	# i or j is out of range.

    my dimensions:  matrix( X ) -> (Int * Int)
	#  return the size of the array 

    my row:  (matrix( X ) * Int) -> rw_vector::Rw_Vector( X )
	#  project a row of the array. 

    my column:  (X matrix * Int) -> rw_vector::Rw_Vector( X )
	#  project a column of the array. 

  end #  Matrix 



## COPYRIGHT (c) 1993 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
