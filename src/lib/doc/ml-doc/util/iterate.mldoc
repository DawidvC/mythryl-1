<!-- iterate.mldoc -->
<!-- Entities.sgml entry 
<!ENTITY iterate SDATA "iterate.api">
 -->

<!DOCTYPE ML-DOC SYSTEM>

<COPYRIGHT OWNER="Bell Labs, Lucent Technologies" YEAR=1998>
<VERSION VERID="1.0" YEAR=1998 MONTH=6 DAY=10>
<TITLE>The iterate package</TITLE>

<INTERFACE>
<HEAD>The <CD/iterate/ package</HEAD>
<PP>
The <STRREF NOLINK/iterate/ package provides wrappers for simple
forms of iteration.

<PACKAGE STRID="iterate">
  <SIGBODY SIGID="ITERATE" FILE=ITERATE>
    <SPEC>
      <VAL>iterate<TY>('a -> 'a) -> int -> 'a -> 'a
      <RAISES><EXNREF STRID="General" DOCUMENT=SML-BASIS-DOC/FAIL/
        <COMMENT>
          <PROTOTY>
          iterate <ARG/f/ <ARG/count/ <ARG/a/
          </PROTOTY>
          invokes the function <ARG/f/ <ARG/count/ times, starting with
          the value <ARG/a/, and using the result of one iteration as
          the argument in the next. Recursively, we have
          <CODE>
          iterate f count v = iterate f (count-1) (f v)
          iterate f 0 v = v
          </CODE>
          Raises the <EXNREF STRID="General" DOCUMENT=SML-BASIS-DOC/FAIL/ exception if
          <ARG/count/ is negative.
    <SPEC>
      <VAL>repeat<TY>((int * 'a) -> 'a) -> int -> 'a -> 'a
      <RAISES><EXNREF STRID="General" DOCUMENT=SML-BASIS-DOC/FAIL/
        <COMMENT>
          <PROTOTY>
          repeat <ARG/f/ <ARG/count/ <ARG/a/
          </PROTOTY>
          is similar to <CD/iterate/ except that the function <ARG/f/
          is also passed the iteration index. In particular, it is
          equivalent to:
          <CODE>
          #2(iterate (fn (i,v) => (i+1,f(i,v))) count (0,init))
          </CODE>
    <SPEC>
      <VAL>for<TY>((int * 'a) -> 'a) -> (int * int * int) -> 'a -> 'a
      <RAISES><EXNREF STRID="General" DOCUMENT=SML-BASIS-DOC/FAIL/
        <COMMENT>
          <PROTOTY>
          for <ARG/f/ (<ARG/start/, <ARG/stop/, <ARG/inc/) <ARG/a/
          </PROTOTY>
          provides more control over the range and step-size involved
          in the interation. Recursively, we have
          <CODE>
          for f (start,stop,inc) a = for f (start+inc,stop,inc) (f(start,a))
          </CODE>
          halting when <MATH/<ARG/start/ &GREATER; <ARG/stop// for
          negative <ARG/inc/ and halting when 
          <MATH/<ARG/stop/ &GREATER; <ARG/start// for positive <ARG/inc/.
          If <ARG/inc/ is zero, <ARG/start/ and <ARG/~TOP/ must be equal,
          and we have
          <CODE>
          for f (start,stop,0) a = f(start,a)
          </CODE>
          Raises <EXNREF STRID="General" DOCUMENT=SML-BASIS-DOC/FAIL/ if either <ARG/inc/ is
          non-positive and <MATH/<ARG/stop/ &GREATER; <ARG/start//, 
          or if <ARG/inc/ is non-negative and
          <MATH/<ARG/start/ &GREATER; <ARG/stop//.
</PACKAGE>

</INTERFACE>
