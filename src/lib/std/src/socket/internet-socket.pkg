## internet-socket.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6

stipulate
    package sg =  socket_guts;					# socket_guts		is from   src/lib/std/src/socket/socket-guts.pkg
    package gs =  generic_socket;				# generic_socket	is from   src/lib/std/src/socket/generic-socket.pkg
    package ps =  pre_socket;					# pre_socket		is from   src/lib/std/src/socket/pre-socket.pkg
herein

    package internet_socket: (weak)  Internet_Socket {		# Internet_Socket	is from   src/lib/std/src/socket/internet-socket.api

	fun socket_fn x
	    =
	    c_interface::c_function "Lib7-Sockets" x;

	Inet = INET;

	Socket(X) =  ps::Socket( Inet, X ); 

	Stream_Socket(X) =  Socket( sg::Stream(X) );
	Datagram_Socket  =  Socket( sg::Datagram  );

	Socket_Address   =  ps::Socket_Address( Inet );

	inet_af = null_or::the (sg::af::from_string "INET");

	stipulate
	    my to_inet_addr:   (ps::Internet_Address, Int) ->  ps::Internet_Address       =  socket_fn "toInetAddr";
	    my from_inet_addr:  ps::Internet_Address       -> (ps::Internet_Address, Int) =  socket_fn "fromInetAddr";
	    my inet_any:        Int                        ->  ps::Internet_Address       =  socket_fn "inetany";
	herein

	    fun to_address (ina, port)
		=
		ps::ADDRESS (to_inet_addr (dns_host_lookupinternal::un_internet_address ina, port));

	    fun from_address (ps::ADDRESS address)
		=
		{   my (a, port)  =  from_inet_addr  address;

		    (dns_host_lookupinternal::internet_address a, port);
		};

	    fun any port
		=
		ps::ADDRESS  (inet_any  port);
	end;

											    # generic_socket	is from   src/lib/std/src/socket/generic-socket.pkg
	package udp {
	    #
	    fun socket ()     = gs::socket  (inet_af, sg::socket::datagram       );
	    fun socket' proto = gs::socket' (inet_af, sg::socket::datagram, proto);
	};

	package tcp {
	    #
	    fun socket ()     = gs::socket  (inet_af, sg::socket::stream       );
	    fun socket' proto = gs::socket' (inet_af, sg::socket::stream, proto);

	    #  tcp control options 

	    stipulate
		my ctl_delay:  (Int, Null_Or(Bool)) -> Bool
		    =
		    socket_fn "ctlNODELAY";
	    herein

		fun get_nodelay (ps::SOCKET { file_descriptor, ... } )
		    =
		    ctl_delay (file_descriptor, NULL);

		fun set_nodelay (ps::SOCKET { file_descriptor, ... }, flag)
		    =
		    ignore (ctl_delay (file_descriptor, THE flag));
	    end;
	};
    };
end;

## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
