# codegen-g.pkg
#
# From a compiletime perspective, this file is a generic
# generic that hooks everything together into
# a lowcode code generator -- a complete compiler backend
# lower half.
#
# From a runtime perspective, this file is (generates) the
# heart of the back end, namely the driver code that
# accepts intermediate code from the backend upper half in
# control-flow-graph format and applies to it the requested
# optimization passes in the requested order.
#
# For a higher-level overview, see
#
#     src/lib/compiler/README
#
#
#
# Our compiletime generic invocations are once each from
# the various backend implementations:
#
#     src/lib/compiler/codegen/ppc/ppc-codegen.pkg
#     src/lib/compiler/codegen/sun/sparc-codegen.pkg
#     src/lib/compiler/codegen/x86/x86-codegen-g.pkg
#
#
#
# Runtime invocation of our (sole) entrypoint
#
#     translate_fate_passing_style_to_binary
#
# is from
#
#     src/lib/compiler/upper/main/backend-g.pkg
#
# We do a smidgen of setup work and then pass the buck to
#
#     translate_fate_passing_style_to_binary::translate_fate_passing_style_to_binary
#
# in
#
#     src/lib/compiler/codegen/main/translate-fate-passing-style-to-binary-g.pkg
#
# which does the bulk of the work of translating intermediate code
# from fate-passing-style (upper half) format into
# control-flow-graph (lower half) format, and then passes the buck
# back to us via our
#
#     translate_control_flow_graph_cluster_to_binary
#
# callback.

# Compiled by:
#     src/lib/compiler/core.make6




###                   "He is able who thinks he is able."
###
###                                 -- Gautama Buddha (563-483 BCE)


# We are invoked from:
#
#     src/lib/compiler/codegen/ppc/ppc-codegen.pkg
#     src/lib/compiler/codegen/sun/sparc-codegen.pkg
#     src/lib/compiler/codegen/x86/x86-codegen-g.pkg

									# Machine_Properties		is from   src/lib/compiler/codegen/main/machine-properties.api
generic package  codegen_g (

    package machine_properties:    Machine_Properties;		# Typically 				  src/lib/compiler/codegen/x86/x86-machine-properties.pkg
    package ext:         	      Lib7_Codetree_Ext;		# Lib7_Codetree_Ext		is from   src/lib/compiler/codegen/compile-fps/lib7-codetreeext.api
    package instruction_properties:   Instruction_Properties;		# Instruction_Properties	is from   src/lib/compiler/lower/instruction/instruction-properties.api

    package fps_regs
        :
        Cpsregs								# Cpsregs			is from   src/lib/compiler/codegen/compile-fps/fps-registers.api
	where codetree::region==cpsregions
	 also codetree::constant==lib7constant 
	 also codetree::extension==ext;

    package client_pseudo_ops:  Lib7_Pseudo_Ops;			# Lib7_Pseudo_Ops		is from   src/lib/compiler/codegen/compile-fps/pseudo-op.api

    package pseudo_op
        :
        Pseudo_Ops							# Pseudo_Ops			is from   src/lib/compiler/lower/flowgraph/pseudo-op.api
	where codetree == fps_regs::codetree
	 also client == client_pseudo_ops;

    package translate_codetree_to_target_machine
        :
        Translate_Codetree_To_Target_Machine						# Translate_Codetree_To_Target_Machine		is from   src/lib/compiler/lower/codetree/translate-codetree-to-target-machine.api
	where
              instruction_set
              ==
              instruction_properties::instruction_set
	 also
              codetree_stream::codetree
              ==
              fps_regs::codetree
	 also
              codetree_stream::instruction_stream::pseudo_op
              ==
              pseudo_op;

    package asm
	:
	Instruction_Emitter						# Instruction_Emitter		is from   src/lib/compiler/lower/emit/instruction-emitter.api
	where
              instruction_stream::pseudo_op
              ==
              pseudo_op
	also
              instruction_set
              ==
              translate_codetree_to_target_machine::instruction_set;

    # Shuffling copies:
    #
    package shuffle
	:
	Shuffle								# Shuffle			is from   src/lib/compiler/lower/instruction/shuffle.api
	where instruction_set == asm::instruction_set;

    package back_patch
	:
	Basic_Block_Scheduler						# Basic_Block_Scheduler		is from   src/lib/compiler/lower/span/basic-block-scheduler.api
	where
	      control_flow_graph == translate_codetree_to_target_machine::control_flow_graph;

    # Register allocator: 
    package register_allocation
        :
        Control_Flow_Graph_Optimization					# Control_Flow_Graph_Optimization	is from   src/lib/compiler/lower/flowgraph/cfg-optimization.api
	where
            control_flow_graph == back_patch::control_flow_graph;

    # Native C call generator:
    #
    package ccalls
        :
        Ansi_C_Calls							# Ansi_C_Calls			is from   src/lib/compiler/lower/c-calls/c-calls.api
	where codetree == fps_regs::codetree;

    package omit_frame_ptr
        :
        Omit_Frame_Pointer						# Omit_Frame_Pointer		is from   src/lib/compiler/lower/omit-frameptr/omit-frame-pointer.api
	where
	    control_flow_graph
	    ==
	    register_allocation::control_flow_graph;

    abi_variant:  Null_Or( String );
)

: (weak) Codegen							# Codegen			is from   src/lib/compiler/codegen/main/codegen.api

{
    # Longer names, for export:
    #
    package machine_properties =  machine_properties;
    package shuffle               =  shuffle;
    package translate_codetree_to_target_machine     =  translate_codetree_to_target_machine;
    package control_flow_graph    =  back_patch::control_flow_graph;
    package instruction_set       =  control_flow_graph::instruction_set;
    package cells                 =  instruction_set::cells;
    package asm                   = asm;

    # Local abbreviations, for convenience:
    #
    package g	       = graph; 
    package cfg        = control_flow_graph;
    package p          = instruction_properties;
    package i          = instruction_set;
    package t          = translate_codetree_to_target_machine::codetree_stream::codetree;
    package stream     = translate_codetree_to_target_machine::codetree_stream;
    package ms         = machine_properties;


    abi_variant      = abi_variant;


    package  print_control_flow_graph
	=
	print_control_flow_graph_g (

	    package  control_flow_graph
                =
                control_flow_graph;

	    package asm =  asm;
	);


    package control_flow_graph_viewer
        =
        control_flow_graph_viewer_g (					# control_flow_graph_viewer_g	is from   src/lib/compiler/lower/visualization/control-flow-graph-viewer-g.pkg
	    package control_flow_graph = cfg;
	    package graph_viewer = graph_viewer_g( all_displays );
	    package asm = asm;
        );

    # Expand copies into their primitive moves.
    # Copies are no longer treated as span dependent, which was a hack.
    #
    package expand_copies
        =
        cfg_expand_copies_g (						# cfg_expand_copies_g	is from   src/lib/compiler/lower/flowgraph/cfg-expand-copies-g.pkg
	    package control_flow_graph = cfg;   
	    package shuffle = shuffle;
        );

    package estimate_loop_probabilities
        = 
        estimate_loop_probabilities_g (
            package control_flow_graph=cfg;
        );

    package compute_frequencies
        = 
        compute_frequencies_g (
            package control_flow_graph=cfg;
        );

    package block_placement
        = 
        block_placement_g (						# block_placement_g	is from   src/lib/compiler/lower/block-placement/block-placement-g.pkg
	    package control_flow_graph = cfg; 
	    package instruction_properties = instruction_properties;
        );

    package check_placement
        = 
        check_placement_g (
	    package control_flow_graph = cfg; 
	    package instruction_properties = instruction_properties;
        );

    # After experimentation, some architecture-specific
    # control may be needed for chain_escapes.
    #
    package jump_chaining
        = 
        jump_chain_elimination_g (					# jump_chain_elimination_g	is from   src/lib/compiler/lower/block-placement/jump-chain-elimination-g.pkg

	    package control_flow_graph = cfg;
	    package instruction_properties = instruction_properties;
	    chain_escapes = REF FALSE;
	    reverse_direction = REF FALSE;
        );

    package garbage_collector
	=
	garbage_collector_g (						# garbage_collector_g		is from   src/lib/compiler/codegen/compile-fps/garbage-collector-g.pkg
            package c                     = fps_regs;
	    package machine_properties = ms;
	    package control_flow_graph    = cfg;
	    package codetree_stream       = translate_codetree_to_target_machine::codetree_stream;
	);

    # This module is used to check for gc bugs.
    # It is turned off by default.   You can turn it on
    # with the flag "check-gc", and turn on verbose debugging 
    # with "debug-check-gc".
    #
    package check_gc
	=
	check_garbage_collector_calls_g (
	    package asm = asm;
	    package control_flow_graph = cfg;
	    package instruction_properties = instruction_properties;
	    package fps_regs   = fps_regs;
	    root_registers     = garbage_collector::root_registers;
	);

    show_graphical_view_of_control_flow_graph_after_block_placement
        = 
        low_code_control::make_bool (
	    "show_graphical_view_of_control_flow_graph_after_block_placement", 
	    "graphical view of cfg after block placement"
        );

    minimum_blocks_for_control_flow_graph_graphical_display
        = 
        low_code_control::make_int (
	    "minimum_blocks_for_control_flow_graph_graphical_display", 
	    "minimium threshold for size of graphical view"
        );

    fun omit_frame_pointer (cfg as g::GRAPH graph)
	=
	{   graph.graph_info
                ->
                cfg::INFO { notes, ... };

	    if (lowcode_notes::uses_virtual_frame_pointer.contains  *notes)

	         omit_frame_ptr::omitframeptr
		     {
                       virtual_frame_pointer =>  fps_regs::virtual_frame_pointer,
                       cfg,
                       idelta                =>  THE 0:   Null_Or( int32::Int )
                     };
	         cfg;
	    else
	         cfg;
	    fi;
	};     

    fun compute_frequencies cfg
	= 
	{   estimate_loop_probabilities::estimate cfg;
	    compute_frequencies::compute cfg;
	    cfg;
	};


    Lowcode_Phase
        =
        (String, (cfg::Control_Flow_Graph -> cfg::Control_Flow_Graph)); 


    fun phase x
        =
        compile_statistics::do_phase (compile_statistics::make_phase x);


    fun make_phase (name, f)
        =
        (name, phase name f);


    mc            =  phase "lowcode back_patch::bbsched"  back_patch::bbsched;			# On x86 back_patch is defined in   src/lib/compiler/codegen/x86/x86-codegen-g.pkg
    placement     =  phase "lowcode Block placement"      block_placement::block_placement;
    chain_jumps   =  phase "lowcode Jump chaining"        jump_chaining::run;
    finish        =  phase "lowcode back_patch::finish"   back_patch::finish; 
    comp_freqs    =  phase "lowcode Compute frequencies"  compute_frequencies;
    ra            =  phase "lowcode ra"                   register_allocation::run;
    omitfp        =  phase "lowcode omit frame pointer"   omit_frame_pointer;
    expand_copies =  phase "lowcode expand copies"        expand_copies::run;
    check_gc      =  phase "lowcode check GC"             check_gc::check_gc;

    ra_phase = ("ra", ra);

    optimizer_hook
	= 
	REF [("checkgc",       check_gc),
	     ("compFreqs",     comp_freqs),
	     ("ra",            ra),
	     ("omitfp",        omitfp),
	     ("expand copies", expand_copies),
	     ("checkgc",       check_gc)
	    ];

    fun translate_control_flow_graph_cluster_to_binary				# Callback invoked by   src/lib/compiler/codegen/main/translate-fate-passing-style-to-binary-g.pkg
           (compile_info: compile_info::Compile_Info( deep_syntax::Declaration ))
           (cluster:      control_flow_graph::Control_Flow_Graph)
	: Void
	=
        {
	    dump_blocks (run_phases (*optimizer_hook, cluster));
        }
        where
            compile_info -> { prettyprinter_or_null, ... };

            case prettyprinter_or_null              

                 NULL => ();

                 THE pp
                     =>
		     {   pp.put "\n\n\n(Following printed by src/lib/compiler/codegen/main/codegen-g.pkg.)\n";
			 pp.put "\n\nControl_Flow_Graph form:\n";

                         print_control_flow_graph::prettyprint_control_flow_graph
			     pp
			     "Initial control flow graph"
			     cluster;
                     };
            esac;

	    fun run_phases ([], cluster)
                    =>
                    cluster;

	        run_phases ((_, f) ! phases, cluster)
                    =>
                    run_phases (phases, f cluster);
            end;

	    fun dump_blocks cfg
		=
		{   my  cbp as (cfg, blks)
			=
			chain_jumps (placement cfg);


		    case prettyprinter_or_null
                      
                         NULL => ();

			 THE pp
			     =>
			     {   pp.put "\n\n\n(Following printed by src/lib/compiler/codegen/main/codegen-g.pkg.)\n";
				 pp.put "\n\nControl_Flow_Graph form:\n";

				 print_control_flow_graph::prettyprint_control_flow_graph
				     pp
				     "Final control flow graph"
				     cfg;
			     };
		    esac;

		    fun view ()
			= 
			if  (*show_graphical_view_of_control_flow_graph_after_block_placement
                        and  length blks  >=  *minimum_blocks_for_control_flow_graph_graphical_display 
			)
                             control_flow_graph_viewer::view cfg; 
			fi;

		    check_placement::check  cbp;
		    view ();   
		    mc cbp;
		};
	end;

    # Compilation of FPS to lowcode 
    #
    package translate_fate_passing_style_to_binary
	=
	translate_fate_passing_style_to_binary_g (			# translate_fate_passing_style_to_binary_g	is from   src/lib/compiler/codegen/main/translate-fate-passing-style-to-binary-g.pkg

	    package machine_spec      = ms;
	    package translate_codetree_to_target_machine = translate_codetree_to_target_machine;
	    package ext               = ext;
	    package c                 = fps_regs;
	    package client_pseudo_ops = client_pseudo_ops;
	    package pseudo_op        = pseudo_op;
	    package garbage_collector = garbage_collector;
	    package flowgen
		=
		build_flowgraph_g (						# build_flowgraph_g	is from   src/lib/compiler/lower/flowgraph/build-flowgraph-g.pkg
		    package control_flow_graph = cfg;
		    package instruction_properties = instruction_properties;
		    package instruction_stream = translate_codetree_to_target_machine::codetree_stream::instruction_stream;
		);
	    package ccalls = ccalls;
	    package cells  = cells;

	    translate_control_flow_graph_cluster_to_binary
	        =
                translate_control_flow_graph_cluster_to_binary;
	);


    translate
	=
	phase   "lowcode translate_fate_passing_style_to_binary"   translate_fate_passing_style_to_binary::translate_fate_passing_style_to_binary;


    fun translate_fate_passing_style_to_binary x
	= 
	#   Initialize all hidden state first 
	{   label::reset ();				# label				is from   src/lib/compiler/lower/instruction/label.pkg
	    garbage_collector::init ();
	    back_patch::clean_up ();
	    translate x;
	};
};
