## control.api

# Compiled by:
#     src/lib/controls/controls-lib.make6

api Control {

    Priority			# XXX BUGGO FIXME should be renamed "menu location" or some such.
        =
        List( Int );

    Control( X );

    # A converter for control values:
    #
    Value_Converter X
        =
        { type_name:    String,
	  from_string:  String -> Null_Or( X ),
	  to_string:    X -> String
        };

    # Create a new control:
    #
    control
        :
        { name:       String,	#  Name of the control.
	  pri:        Priority,	#  Control's priority (menu location  /   control hierarchy position). # XXX BUGGO FIXME  So rename it!!
          obscurity:  Int,	#  Control's detail level; higher means more obscure. 
				#  
	  help:       String,	#  Control's description 		# XXX BUGGO FIXME  So rename it 'description'!!
	  control:    Ref( X )	#  Ref cell holding control's state 	# XXX BUGGO FIXME  So rename it 'state' or such!! Geez... :(
	}
        ->
        Control( X );



    # Generate a control:	# XXX BUGGO FIXME rename this 'make' unless 'generate' has a clearly+consistently different meaning.
    #
    gen_control
	:
	{ name:       String,
	  pri:        Priority,
	  obscurity:  Int,
	  help:       String,
	  default:    X
	}
        ->
        Control( X );


    # This exception is raised to announce
    # that there is a syntax error in a
    # string representation of a control value:
    #
    exception
        BAD_VALUE_SYNTAX
            {
              type_name:     String,
              control_name:  String,
              value:         String
            };



    # Create a string control from a typed control:

    string_control			# XXX BUGGO FIXME so rename it "make_..." or whatever !!
        :
        Value_Converter( X )
        ->
        Control( X )
        ->
        Control( String );



    #  Control operations: 
    name:   Control( X ) -> String;
    get:    Control( X ) -> X;
    set:   (Control( X ), X) -> Void;
    set' : (Control( X ), X) -> Void -> Void;	# Delayed set with error checking in 1st stage.

    info:   Control( X )
            ->
            { priority:   Priority,
              obscurity:  Int,
              help:       String
            };


    save'restore
        :
        Control( X )
        ->
        Void			# Capture control's current value...
        ->
        Void;			# ... and then restore control's value.


    compare			# Compare the "priority" (menu hierarchy location) of two controls:
        :
        ((Control( X ), Control( X )))
        ->
        Order;

};


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
