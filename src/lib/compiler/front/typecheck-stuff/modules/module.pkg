## module.pkg
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



# Datastructures describing module-level declarations.
#
# In particular, the datatypes
#
#     Api,
#     Package,
#     Generic,
#     Generic_Api,
#
# provide the value types bound by the symbol table
# for those four namespaces -- see OVERVIEW section in
#
#     src/lib/compiler/front/typecheck-stuff/symbol-table/symbol-table.pkg


package module: (weak)  Module {		# Module	is from   src/lib/compiler/front/typecheck-stuff/modules/module.api

    stipulate

        package s  = symbol;			# symbol			is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg
	package sp = symbol_path;		# symbol_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package ip = inverse_path;		# inverse_path			is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-path.pkg
	package mp = module_path;		# module_path			is from   src/lib/compiler/front/typecheck-stuff/modules/module-path.pkg
	package st = stamp;			# stamp				is from   src/lib/compiler/front/typecheck-stuff/basics/stamp.pkg
	package t  = types;			# types				is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	package a  = var_home;			# var_home			is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.pkg
	package e  = symbol_table_dictionary;	# symbol_table_dictionary	is from   src/lib/compiler/front/typecheck-stuff/basics/symbol-table-dictionary.pkg

    herein

	#  -------------------- api-related definitions -------------------- 

	Share_Spec = List( sp::Symbol_Path ); #  only internal sharing 

	Api = API  Api_Record
	    | ERRONEOUS_API


	# 1. tycspec should only be PRIMITIVE_TYPE_CONSTRUCTOR, with FORMAL or DATATYPE tyckinds, or DEFINED_TYPE_CONSTRUCTOR.
	#
	# 2. the stamp and the path for the PRIMITIVE_TYPE_CONSTRUCTOR or DEFINED_TYPE_CONSTRUCTOR should be meaningless
	#    (but the stamps are in fact used for relativization of withtype bodies and
	#     the Constructor domains of enum replication specs)
	#
	# 3. Once VALUE_IN_API and ENUM_CONSTRUCTOR_IN_API are converted to use typspec instead of t::type
	#    the whole thing can be further cleaned up.
	#	
	also
        Api_Element
	    = TYPE_CONSTRUCTOR_IN_API    {   module_stamp:           mp::Module_Stamp,
                                             type_constructor:       t::Type_Constructor,
                                             is_a_replica:           Bool,
                                             scope:                  Int
                                         }
	    | PACKAGE_IN_API             {   module_stamp:           mp::Module_Stamp,
                                             an_api:                 Api,
                                             definition:             Null_Or( (Package_Definition, Int) ),
                                             slot:                   Int
                                         }
	    | GENERIC_IN_API             {   module_stamp:           mp::Module_Stamp,
                                             a_generic_api:          Generic_Api,
                                             slot:                   Int
                                         }
	    | VALUE_IN_API               {   type:                 t::Type,
                                             slot:                   Int
                                         }
	    | ENUM_CONSTRUCTOR_IN_API    {   a_datatype:             t::Constructor,
                                             slot:                   Null_Or( Int )
                                         }

	also
	Generic_Api
            =   
	    GENERIC_API  {   kind:                Null_Or( s::Symbol ),
			     parameter_api:  	  Api,
			     parameter_variable:  mp::Module_Stamp,
			     parameter_symbol:    Null_Or( s::Symbol ),
			     body_api:       	  Api
			 }
	    | ERRONEOUS_GENERIC_API

	also
        External_Definition
            =
	    EXTERNAL_DEFINITION_OF_TYPE_CONSTRUCTOR
            
	    {   path:              symbol_path::Symbol_Path,
		type_constructor:  t::Type_Constructor,
		relative:          Bool         #  Does type_constructor contain typechecked_package paths? 
	    }
	    | EXTERNAL_DEFINITION_OF_PACKAGE  (sp::Symbol_Path, Package_Definition)

	also
        Package_Definition
	    = CONSTANT_PACKAGE_DEFINITION  Package  #  Constant
	    | VARIABLE_PACKAGE_DEFINITION  (Api, mp::Module_Path) #  relative 

	#  ------------------------- packages and generics ---------------------- 

	also
        Package
	    = A_PACKAGE  Package_Record
	    | PACKAGE_API  { an_api: Api, module_path:  mp::Module_Path }
	    | ERRONEOUS_PACKAGE

	also
	Generic
	    = GENERIC  Generic_Record
	    | ERRONEOUS_GENERIC

	#  ----------------------- typechecked_package-related definitions -------------------- 

	also
        Typechecker_Dictionary_Entry				#  elements of a Typechecker_Dictionary 
	    = TYPE_CONSTRUCTOR_ENTRY  Typechecked_Type_Constructor
	    | PACKAGE_ENTRY           Typechecked_Package
	    | GENERIC_ENTRY           Typechecked_Generic
	    | ERRONEOUS_ENTRY
	       /* We have no typechecked_packages yet for
                * values, constructors or exceptions,
                * but this may change.
                */

	also
	Generic_Closure						#  Typechecked_Package for generics 
	    = GENERIC_CLOSURE
               {    parameter_module_stamp:    mp::Module_Stamp,
                      body_package_expression: Package_Expression,
                      typechecker_dictionary:  Typechecker_Dictionary
                 }

	also
        Stamp_Expression
	    = /* CONST of st::Stamp     # An existing stamp 
	    | */ GET_STAMP  Package_Expression
	    | MAKE_STAMP                #  generate a new stamp 

	also
        Typechecked_Type_Constructor_Expression			#  expression evaluating to a type constructor Typechecked_Package 
	    = TYPE_VARIABLE_TYPE_CONSTRUCTOR  mp::Module_Path        #  Selection from cur-EE 
	    | CONSTANT_TYPE_CONSTRUCTOR  t::Type_Constructor                #  Actual type_constructor 
	    | FORMAL_TYPE_CONSTRUCTOR    t::Type_Constructor                #  Formal type_constructor 

	also
        Package_Expression 
	    = VARIABLE_PACKAGE  mp::Module_Path       #  selection from current Typechecker_Dictionary 
	    | CONSTANT_PACKAGE  Typechecked_Package
	    | PACKAGE  { stamp:              Stamp_Expression,
                         module_declaration:  Module_Declaration
                       }
	    | APPLY  (Generic_Expression, Package_Expression)  
		#  the arg Package_Expression contains coercions to match the fct parameter sig 
	    | PACKAGE_LET  { declaration: Module_Declaration, expression: Package_Expression }
	    | ABSTRACT_PACKAGE  (Api, Package_Expression)    #  shortcut for abstraction matching 
	    | FORMAL_PACKAGE  Generic_Api               #  formal generic body package 
	    | COERCED_PACKAGE  { boundvar:  mp::Module_Stamp,
                                 raw:       Package_Expression,
                                 coercion: Package_Expression
                               }
		# Similar to PACKAGE_LET (m::PACKAGE_DECLARATION (boundvar, Package_Expression), coercion),
		# but with special treatment of inverse_path propagation to support
		# accurate type names in generic results where the generic has
		# a result api constraint.



	also
        Generic_Expression

	    = VARIABLE_GENERIC  mp::Module_Path #  selection from current Typechecker_Dictionary 
	    | CONSTANT_GENERIC  Typechecked_Generic
	    | LAMBDA            { parameter:     mp::Module_Stamp, body:  Package_Expression }
	    | LAMBDA_TP         { parameter:     mp::Module_Stamp, body:  Package_Expression, an_api:  Generic_Api }
	    | LET_GENERIC       (Module_Declaration, Generic_Expression)



	also
        Module_Expression 

	    = TYPE_CONSTRUCTOR_EXPRESSION  Typechecked_Type_Constructor_Expression
	    | PACKAGE_EXPRESSION           Package_Expression
	    | GENERIC_EXPRESSION           Generic_Expression
	    | DUMMY_GENERIC_EVALUATION_EXPRESSION
	    | ERRONEOUS_ENTRY_EXPRESSION



	also
        Module_Declaration 

	    = TYPE_CONSTRUCTOR_DECLARATION  (mp::Module_Stamp, Typechecked_Type_Constructor_Expression)
	    | PACKAGE_DECLARATION           (mp::Module_Stamp, Package_Expression, s::Symbol)
	    | GENERIC_DECLARATION           (mp::Module_Stamp, Generic_Expression)
	    | SEQUENTIAL_DECLARATIONS       List( Module_Declaration )
	    | LOCAL_DECLARATION             (Module_Declaration, Module_Declaration)
	    | ERRONEOUS_ENTRY_DECLARATION
	    | EMPTY_GENERIC_EVALUATION_DECLARATION



	also
        Typechecker_Dictionary 

	    = MARKED_TYPECHECKER_DICTIONARY  Typechecker_Dictionary_Record
	    | NAMED_TYPECHECKER_DICTIONARY   (mp::module_stamp_map::Map( Typechecker_Dictionary_Entry ), Typechecker_Dictionary)
	    | NULL_TYPECHECKER_DICTIONARY
	    | ERRONEOUS_ENTRY_DICTIONARY



	also
        Module_Tree

	    = TYPE_CONSTRUCTOR_MODTREE_NODE        types::Primitive_Type_Constructor_Record
	    | API_MODTREE_NODE                     Api_Record
	    | PACKAGE_MODTREE_NODE                 Package_Record

	    | GENERIC_MODTREE_NODE                 Generic_Record
	    | TYPECHECKER_DICTIONARY_MODTREE_NODE  Typechecker_Dictionary_Record
	    | MODTREE_BRANCH                       List( Module_Tree )



	withtype
        Stub_Info
            =
            {   owner:        picklehash::Picklehash,
		lib:          Bool,
		module_tree:  Module_Tree
	    }



	also
        Api_Record
            =
            {   stamp:            st::Stamp,
		name:             Null_Or( s::Symbol ),
		closed:           Bool,

		contains_generic: Bool,

		symbols:          List( s::Symbol ),
		elements:         List ((s::Symbol, Api_Element)),
		property_list:    property_list::Property_List,

		type_sharing:     List( Share_Spec ),
		package_sharing:  List( Share_Spec ),
		stub:             Null_Or( Stub_Info )
	    }



	also
	Typechecker_Dictionary_Record
            =
            {   stamp:                    st::Stamp,
		typechecker_dictionary:   Typechecker_Dictionary,
		stub:                     Null_Or( Stub_Info )
	    }



	also
        Typechecked_Package
            =
            {   stamp:                  st::Stamp,
		typechecker_dictionary: Typechecker_Dictionary,
		property_list:          property_list::Property_List,

		inverse_path:           ip::Inverse_Path,
		stub:                   Null_Or( Stub_Info )
	    }



	also
        Package_Record
            =
            {   an_api:              Api,
		typechecked_package: Typechecked_Package,
		var_home:            a::Var_Home,
		inlining_info:       inlining_information::Inlining_Information
	    }



	also
	Typechecked_Generic
            =
            {   stamp:                  st::Stamp,
		generic_closure:        Generic_Closure,
		property_list:          property_list::Property_List, #  lambdaty 

		type_constructor_path:  Null_Or( t::Type_Constructor_Path ),
		inverse_path:           ip::Inverse_Path,
		stub:                   Null_Or( Stub_Info )
	    }



	also
	Generic_Record
            =
            {   a_generic_api:          Generic_Api,
		typechecked_generic:    Typechecked_Generic, 
		var_home:               a::Var_Home,
		inlining_info:          inlining_information::Inlining_Information
	    }

	
	also
        Typechecked_Type_Constructor	# The stamp and arith inside t::Type_Constructor are critical.
            =
            t::Type_Constructor

	also
        Elements
            =
            List ((s::Symbol, Api_Element));


#	also constraint  
#	  = { my_path:  sp::Symbol_Path, its_ancestor:  instrep, its_path:  sp::Symbol_Path }


	bogus_package_stamp   =   st::special "bogus_package";
	bogus_generic_stamp   =   st::special "bogus_g";
	bogus_api_stamp       =   st::special "bogus_api";
	bogus_reverse_path    =   ip::INVERSE_PATH [ s::make_package_symbol "Bogus" ];

	my bogus_typechecked_package:  Typechecked_Package
            =
	    { stamp                  =>  bogus_package_stamp, 
	      typechecker_dictionary =>  ERRONEOUS_ENTRY_DICTIONARY,
	      property_list          =>  property_list::make_property_list (),
	      inverse_path           =>  bogus_reverse_path,
	      stub                   =>  NULL
            };

	my bogus_api:  Api
            = 
	    API { stamp            => bogus_api_stamp,
		  name             => NULL,
		  closed           => TRUE,

		  contains_generic => FALSE,
		  symbols          => [], 
		  elements         => [],

		  property_list    => property_list::make_property_list (),
		  type_sharing     => [],

		  package_sharing  => [],
		  stub             => NULL
	      };

	my bogus_typechecked_generic:  Typechecked_Generic
            =
	    { type_constructor_path => NULL,

	      stamp               => bogus_generic_stamp,
	      property_list       => property_list::make_property_list (),

	      inverse_path        => bogus_reverse_path,
	      stub                => NULL,

	      generic_closure
                  =>
                  GENERIC_CLOSURE {
                      parameter_module_stamp 	=>  mp::bogus_typechecked_package_variable,
		      body_package_expression   =>  CONSTANT_PACKAGE bogus_typechecked_package,
		      typechecker_dictionary    =>  NULL_TYPECHECKER_DICTIONARY
                  }
            };

    end; #  local 

};		#  package module 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
