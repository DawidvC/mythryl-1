## getreg2-g.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/lowcode.make6



# A simple first come/first serve register allocator:
#
generic package get_reg2_g (
    first:      Int;  #  start from ``first'' 
    n_regs:     Int;  #  n registers 
    available:  List( Int );
)

: (weak)  Get_Register		# Get_Register	is from   src/lib/compiler/lower/reg-alloc/getreg.api

{
    exception GET_REGISTER;

    size      = first+n_regs;

    all_regs  = rw_vector::make_rw_vector (size, FALSE);
    preferred = rw_vector::make_rw_vector (size,-1);

    fun reset ()
        =
        rw_vector::modify (fn _ => -1; end ) preferred;

    my _ = apply (fn r => rw_vector::set (all_regs, r, TRUE); end ) available;

    fun getreg { pref, stamp: Int, prohibitions }
	= 
	{   # Use preferred registers
            # whenever possible:
 	    #
	    fun check_preferred []
                    =>
                    find first;

	        check_preferred (r ! rs)
		    => 
		    if (   rw_vector::get (prohibitions, r) != stamp
                       and rw_vector::get (all_regs, r)
                       )
		         r; 
		    else check_preferred rs;
                    fi;
            end 

	    also
	    fun find start
                =
		{   limit = rw_vector::length all_regs;

		    fun search r
                        = 
			if (   rw_vector::get (prohibitions, r) != stamp
                           and rw_vector::get (all_regs, r)
                           )

                             r; 
			else
                             r = r+1;

			     if (r >= limit)  raise exception GET_REGISTER;
			     else             search r;
                             fi;
			fi;

		    search start;
		};

	    check_preferred pref;
        };

    fun getpair { pref, stamp: Int, prohibitions }
        =
        raise exception GET_REGISTER;			#  UNIMPLEMENTED.

};



## COPYRIGHT (c) 1996 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
