
# A machine description dictionary.

api Mdl_Dictionary =
api
   package raw_syntax:  MDL_AST
   type dictionary

   my empty:  dictionary              #  empty dictionary 
   my ++    : dictionary * dictionary -> dictionary #  Combine dictionaries 

   #  Elaborate 
   my var:    dictionary -> raw_syntax::Some_Type
   my inst:   dictionary -> raw_syntax::expression * raw_syntax::Some_Type -> raw_syntax::expression * raw_syntax::Some_Type
   my gen:    dictionary -> raw_syntax::expression * raw_syntax::Some_Type -> raw_syntax::expression * raw_syntax::Some_Type
   my lambda: dictionary -> raw_syntax::Some_Type -> raw_syntax::Some_Type
   my elab:   dictionary -> raw_syntax::decl -> dictionary 

   my named_variable:   raw_syntax::id * raw_syntax::expression * raw_syntax::Some_Type -> dictionary
   my type_bind:  raw_syntax::id * raw_syntax::Some_Type -> dictionary
   my named_package:   raw_syntax::id * List( raw_syntax::decl ) * dictionary -> dictionary

   #  Lookup functions 
   my lookupPackage:   dictionary -> raw_syntax::ident -> dictionary
   my lookupVal:   dictionary -> raw_syntax::ident -> raw_syntax::expression * raw_syntax::Some_Type
   my lookupVal' : (raw_syntax::id -> Void) -> dictionary -> raw_syntax::ident -> raw_syntax::expression * raw_syntax::Some_Type
   my lookupType:    dictionary -> raw_syntax::ident -> raw_syntax::Some_Type
   my datatypeDefinitions:  dictionary -> List( raw_syntax::datatypebind )

   #  Iterators 
   my foldVal:  (raw_syntax::id * raw_syntax::expression * raw_syntax::Some_Type * X -> X) -> X -> dictionary -> X 

   #  Lookup code from nested packages/apis 
   my declOf:    dictionary -> raw_syntax::id -> raw_syntax::decl 
   my genericArgOf:  dictionary -> raw_syntax::id -> raw_syntax::decl
   my typeOf:    dictionary -> raw_syntax::id -> raw_syntax::decl
end
