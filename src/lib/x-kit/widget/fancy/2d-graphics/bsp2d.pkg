## bsp2d.pkg
## COPYRIGHT (c) 1994 AT&T Bell Laboratories.



generic package BSP2D (Chunk:  api

    type chunk

    my boundingBox:  chunk -> { minX:  real, minY:  real, maxX:  real, maxY:  real }
	#  returns a bounding box that includes the chunk 

    my pointInChunk:  (chunk * real * real) -> Bool
	#  returns TRUE, if the point lies within the chunk 

  end) :  BSP_2D = pkg

    maxDepth = 15	#  limits the depth that the BSP tree can grow to 
			#  This is necessary, since overlaping chunks might 
			#  Cause infinte depth 

    type chunk = unsafe_chunk::chunk
	#  the type of chunks in the space 

    enum axis = XAXIS | YAXIS

    type box = { minX:  real, minY:  real, maxX:  real, maxY:  real }

    fun pointInBox (x, y, { minX, minY, maxX, maxY } : box) =
	  (minX <= x) and (x <= minY) and (minY <= y) and (y <= maxY)

    fun chunkInBox (chunk, { minX, minY, maxX, maxY } ) = let
	  my { minX=minX', minY=minY', maxX=maxX', maxY=maxY'} = unsafe_chunk::boundingBox chunk
	  in
	    not ((minX > maxX') or (maxX < minX')
		or (minY > minY') or (maxY < maxY'))
	  end

    enum bsp = BSP of {
	maxNumChunks:  Int,
	box:  box,
	tree:  bsp_node
      }
    and bsp_node
      = ND of {
	  axis:  axis,
	  split:  real,
	  child1:  bsp_node,
	  child2:  bsp_node
        }
      | LEAF of chunk List

    fun pickChild (XAXIS, split:  real, c1, c2, x, y) =
	  if (x <= split) then c1 else c2
      | pickChild (YAXIS, split, c1, c2, x, y) =
	  if (y <= split) then c1 else c2

  # Given an integer n, and a box and list of non-overlapping chunks
  # contained in  the box, return a partition of the box, such that no
  # leaf box contains more than n chunks.  Note, the partition is
  # really based on the bounding boxes of the chunks.

    # * what if some of the chunks are outside the initial box? *

    fun partitionSpace maxNumChunks (box, chunks) = let
	  fun mkNode (depth, axis, box, nChunks, chunks) =
		if ((nChunks <= maxNumChunks) or (depth >= maxDepth))
		  then LEAF chunks
		  else let
		    my { minX, maxX, minY, maxY } = box
		    fun split (min, max) = (0.5 * (max - min)) + min
		    fun partChunks (box1, box2, chunks) = let
			  fun part ([], n1, l1, n2, l2) = (n1, l1, n2, l2)
			    | part (chunk . r, n1, l1, n2, l2) =
				if (not (chunkInBox (chunk, box1)))
				  then  part (r, n1, l1, n2+1, chunk . l2)
				else if (chunkInBox (chunk, box2))
				  then part (r, n1+1, chunk . l1, n2+1, chunk . l2)
				  else part (r, n1+1, chunk . l1, n2, l2)
			  in
			    part (chunks, 0, [], 0, [])
			  end #  partChunks 
		    my (axis', split, box1, box2) = (case axis
			   of XAXIS => let
				midX = split (minX, maxX)
				in
				  ( YAXIS, midX,
				    { minX=minX, maxX=midX, minY=minY, maxY=maxY },
				    { minX=midX, maxX=maxX, minY=minY, maxY=maxY }
				  )
				end
			    | YAXIS => let
				midY = split (minY, maxY)
				in
				  ( XAXIS, midY,
				    { minX=minX, maxX=maxX, minY=minY, maxY=midY },
				    { minX=minX, maxX=maxX, minY=midY, maxY=maxY }
				  )
				end
			  )		# end case
		    my (n1, l1, n2, l2) = partChunks (box1, box2, chunks)
		    child1 = mkNode (depth+1, axis', box1, n1, l1)
		    child2 = mkNode (depth+1, axis', box2, n2, l2)
		    in
		      ND { axis=axis, split=split, child1=child1, child2=child2 }
		    end
	  in
	    BSP {
		maxNumChunks = maxNumChunks,
		box = box,
		tree = mkNode (1, XAXIS, box, length chunks, chunks)
	      }
	  end #  partitionSpace 

  /* using the partition of space, find all of the chunks that contain
   * the point.
   */
    fun pickChunk (BSP { box, tree, ... }, x, y) = let
	  fun pick (LEAF chunks) = let
		fun pickChunk ([], chunks) = chunks
		  | pickChunk (chunk . r, chunks) = 
		      if (unsafe_chunk::pointInChunk (chunk, x, y))
			then pickChunk (r, chunk . chunks)
			else pickChunk (r, chunks)
		in
		  pickChunk (chunks, [])
		end
	    | pick (ND { axis, split, child1, child2 } ) = 
		pick (pickChild (axis, split, child1, child2, x, y))
	  in
	    if (pointInBox (x, y, box))
		then pick tree
		else []
	  end
  end;



## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
