## error-message.pkg

# Compiled by:
#     src/lib/compiler/front/basics/basics.make6



###                "I learn by making mistakes.
###                 I've learned a LOT."
###
###                             -- Eric Beggs



package error_message: (weak)  Error_Message {		# Error_Message	is from   src/lib/compiler/front/basics/errormsg/error-message.api

    package pp
        =
        prettyprint;					# prettyprint	is from   src/lib/prettyprint/src/prettyprint.pkg

    include  prettyprint;
    include  source_map;				# source_map	is from   src/lib/compiler/front/basics/source/source-map.pkg



    # Error reporting:
    #
    exception COMPILE_ERROR;

    Severity
        =
        WARNING | ERROR;


    Plaint_Sink
        =
        Severity
        ->
        String
        ->
        (pp::Stream -> Void)
        ->
        Void;


    Error_Function
        =
        Source_Code_Region -> Plaint_Sink;

    Errors
         =
         {   error_fn:     Source_Code_Region -> Plaint_Sink,
	     error_match:  Source_Code_Region -> String,
	     any_errors:   Ref( Bool )
	 };


    fun default_plaint_sink ()
        =
	{   consumer  =>  control_print::say,
	    linewidth => *control_print::linewidth,
	    flush     =>  control_print::flush
        };

    null_error_body
        =
        fn (stream: pp::Stream) = ();


    fun ppmsg							# "ppmsg" == "prettyprint message"
            ( error_consumer,
              location,
              severity,
              msg,
              body
            )
        =
	case (*basic_control::print_warnings, severity)
	  
	     (FALSE, WARNING)
                 =>
                 ();

	     _   =>
	         with_prettyprint_device
                     error_consumer
                     (fn stream
                         =
			 {   begin_horizontal_else_vertical_box           stream;
			     begin_indented_horizontal_else_vertical_box  stream  (pp::CURSOR_RELATIVE 2);
			     pp::string              stream  location;

			     # Print error label:
			     # 
			     pp::string
				 stream
				 case severity
				   
				      WARNING =>  " Warning: ";
				      ERROR   =>  " Error: ";
				 esac;

			     pp::string  stream  msg;
			     body        stream;
			     end_box   stream;
			     end_box   stream;
			     pp::newline stream;
                         }
                     );
        esac;


    fun record (ERROR, any_errors)
             =>
             any_errors := TRUE;

        record (WARNING, _)
            =>
            ();
    end;

    fun impossible msg
        =
	{   apply control_print::say ["Error: Compiler bug: ", msg, "\n"];
	    control_print::flush ();
	    raise exception COMPILE_ERROR;
        };



    #  With the advent of source-map resynchronization (a.k.a                   
    #  [[( *#line...* )]]), a contiguous region as seen by the compiler can     
    #  correspond to one or more contiguous regions in source code.             
    #  We can imagine myriad ways of displaying such information, but we        
    #  Confine ourselves to two:                                                
    #  \begin { itemize }                                                          
    #  \item                                                                    
    #  When there's just one source region,
    #  we have what we had in the old compiler,
    #  and we display it the same way:                                
    #  \begin { quote }                                                            
    #  {\tt \emph { name }:\emph { line }.\emph { col }} or\\                            
    #  {\tt \emph { name }:\emph { line1 }.\emph { col1 }-\emph { line2 }.\emph { col2 }}      
    #  \end { quote }                                                              
    #  \item                                                                    
    #  When there are two or more source regions, we use an ellipsis instead    
    #  of a dash, and if not all regions are from the same file, we provide     
    #  the file names of both endpoints (even if the endpoints are the same     
    #  file).                                                                   
    #  \end { itemize }                                                            
    #                                                                           
    #  <error-message.pkg>=                                                          
    #
    fun location_string

            ( { source_map, file_opened, ... }: source_code_source::Input_Source)

            (p1, p2)
	=
	{   fun shortpoint
                    ( { line, column, ... }:   Sourceloc,
                      l
                    )
		= 
		int::to_string line ! "." ! int::to_string column ! l;		# int		is from   src/lib/std/int.pkg


	    fun showpoint (p as { file_name, ... }:Sourceloc, l)
		= 
		pathnames::trim file_name ! ":" ! shortpoint (p, l);		# pathnames	is from   src/lib/compiler/front/basics/source/pathnames.pkg


	    fun allfiles (f, (src: Sourceloc, _) ! l)
                    =>
		    f == src.file_name   and
		    allfiles (f, l);

	        allfiles (f, [])
		    =>
		    TRUE;
            end;

	    fun lastpos [(_, hi)] =>   hi;
		lastpos (h ! t)   =>   lastpos t;
		lastpos []        =>   impossible "lastpos botch in error_message::locationString";
            end;

	    cat
	        case (fileregion source_map (p1, p2))
		  
		     [(lo, hi)]
			 => 
			 if (p1+1 >= p2     ) showpoint (lo, []);
					   else showpoint (lo, "-" ! shortpoint (hi, []));fi;

		     (lo, _) ! rest
			 =>
			 if   (allfiles (lo.file_name, rest))
			      showpoint (lo, "..." ! shortpoint (lastpos rest, []));
			 else showpoint (lo, "..." ! showpoint (lastpos rest, []));fi;

		     []  =>
                         [pathnames::trim file_opened, ":<nullRegion>"];
                esac;
	};



    # Emulating my predecessors, I've
    # gone to some trouble to avoid
    # list appends and the consequent
    # allocations:
    #
    fun error (source as { any_errors, error_consumer, ... }: source_code_source::Input_Source)		# source_code_source	is from   src/lib/compiler/front/basics/source/source-code-source.pkg
	      ( p1: Int,
                p2: Int
              )
              (severity:  Severity)
	      (msg:       String)
              (body:      pp::Stream -> Void)
	= 
	{   ppmsg
                ( error_consumer,
                  (location_string source (p1, p2)),
                  severity,
                  msg,
                  body
                );

	    record (severity, any_errors);
	};


    fun error_no_source
            (cons, any_e)
            locs
            severity
            msg
            body
	=
	{   ppmsg (cons, locs, severity, msg, body);
            record (severity, any_e);
        };


    fun error_no_file
            (error_consumer, any_errors)
            ((p1, p2): Source_Code_Region)
            severity
            msg
            body
	= 
	{   ppmsg
                ( error_consumer,

		  p2 > 0   ??   cat [int::to_string p1, "-", int::to_string p2]
			   ::   "",

		  severity,
		  msg,
		  body
		);

	    record (severity, any_errors);
	};

    fun impossible_with_body
            msg
            body
	=
	{   with_prettyprint_device

                (default_plaint_sink ())

                (fn stream
                    =
	            {   pp::string stream "Error: Compiler bug: ";
	                pp::string stream msg;
	                body stream;
	                pp::newline stream;
                    }
                );

	    raise exception COMPILE_ERROR;
        };

    match_error_string
        =
        location_string;

    fun errors source
        =
        { error_fn    =>   error  source,
	  error_match =>   match_error_string  source,
	  any_errors  =>   source.any_errors
	};

    fun any_errors { any_errors, error_fn, error_match }
        =
        *any_errors;

    fun errors_no_file (consumer, any)
        =
        { error_fn    =>   error_no_file (consumer, any),
	  error_match =>   fn _ =  "MATCH",
	  any_errors  =>   any
	};

};		#  package error_message 



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1989 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
