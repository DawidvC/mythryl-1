## posix-id.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6


# API for POSIX 1003.1 process dictionary submodule

stipulate

    package time=     time_guts;	# time_guts		is from   src/lib/std/src/time-guts.pkg
    package float=    float_guts;	# float_guts		is from   src/lib/std/src/float-guts.pkg
    package host_unt= host_unt_guts;	# host_unt_guts		is from   src/lib/std/src/bind-sysword-32.pkg

herein

    package posix_id {

	package fs = posix_file;		# posix_file		is from   src/lib/std/src/posix/posix-file.pkg
	package p  = posix_process;		# posix_process		is from   src/lib/std/src/posix/posix-process.pkg

	fun cfun x
	    =
	    c_interface::c_function "POSIX-ProcEnv" x;

	Process_Id      = p::Process_Id;

	User_Id         = fs::User_Id;
	Group_Id        = fs::Group_Id;
	File_Descriptor = fs::File_Descriptor;

	Sy_Int = host_int::Int;

	fun uid_to_word i = i;
	fun word_to_uid i = i;

	fun gid_to_word i = i;
	fun word_to_gid i = i;

	my get_process_id        : Void -> Sy_Int = cfun "getpid";
	my get_parent_process_id : Void -> Sy_Int = cfun "getppid";

	fun get_process_id'        () = p::PID (get_process_id ());
	fun get_parent_process_id' () = p::PID (get_parent_process_id ());

	my get_user_id:           Void -> host_int::Int = cfun "getuid";
	my get_effective_user_id: Void -> host_int::Int = cfun "geteuid";

	my get_group_id           : Void -> host_int::Int = cfun "getgid";
	my get_effective_group_id : Void -> host_int::Int = cfun "getegid";

	fun get_user_id'           () =  (host_unt::from_int (get_user_id ()));
	fun get_effective_user_id' () =  (host_unt::from_int (get_effective_user_id ()));

	fun get_group_id'  ()          =  (host_unt::from_int (get_group_id           ()));
	fun get_effective_group_id' () =  (host_unt::from_int (get_effective_group_id ()));

	my set_user_id  : host_int::Int -> Void = cfun "setuid";
	my set_group_id : host_int::Int -> Void = cfun "setgid";

	fun set_user_id'  uid =  set_user_id  (host_unt::to_int uid);
	fun set_group_id' gid =  set_group_id (host_unt::to_int gid);

	my  get_group_ids : Void -> List( host_int::Int )
	    =
	    cfun "getgroups";

	fun get_group_ids' ()
	    =
	    map
		host_unt::from_int
	       (get_group_ids ());

	my get_login:  Void -> String = cfun "getlogin";

	my get_process_group: Void -> Sy_Int = cfun "getpgrp";
	my set_session_id:    Void -> Sy_Int = cfun "setsid";				# setsid  is from  src/runtime/c-libs/posix-procenv/setsid.c

	my set_process_group_id: (Sy_Int, Sy_Int) -> Void = cfun "setpgid";			# setpgid is from  src/runtime/c-libs/posix-procenv/setpgid.c

	fun get_process_group' ()
	    =
	    p::PID (get_process_group ());

	fun set_session_id' ()
	    =
	    p::PID (set_session_id ());

	fun set_process_group_id'
		{ pid:   Null_Or( Process_Id ),
		  pgid:  Null_Or( Process_Id )
		}
	    =
	    set_process_group_id (convert pid, convert pgid)
	    where
		fun convert (THE (p::PID pid)) =>  pid;
		    convert NULL               =>  0;
		end;
	    end;

	my uname
	    :
	    Void ->  List( (String, String) )
	    =
	    cfun "uname";

	sysconf = p::sysconf;

	my time : Void -> int32::Int
            =
            cfun "time";

	time' = time::from_seconds o int32_guts::to_large o time;



	# Times in clock ticks: 

	my times' : Void -> (int32::Int, int32::Int, int32::Int, int32::Int, int32::Int)
	      = cfun "times";

	ticks_per_sec
	    =
            int_guts::to_large (host_unt::to_int_x (sysconf "CLK_TCK"));

	ticks_to_time
	    =
	    case (integer_guts::quot_rem (time_guts::fractions_per_second, ticks_per_sec))

		(factor, 0)
                    =>
		    (fn ticks = time::from_fractions (factor * int32_guts::to_large ticks));

	        _   =>
		    (fn ticks = time::from_fractions
			             (integer_guts::quot (time_guts::fractions_per_second
					   * int32_guts::to_large ticks,
					   ticks_per_sec)));
            esac;

	fun times ()
            =
            {   my (e, u, s, cu, cs)
                    =
                    times' ();

		{ elapsed =>  ticks_to_time  e,
		  utime   =>  ticks_to_time  u, 
		  stime   =>  ticks_to_time  s, 
		  cutime  =>  ticks_to_time  cu, 
		  cstime  =>  ticks_to_time  cs
                };
	    };

	my getenv:   String -> Null_Or( String ) = cfun "getenv";
	my environ:  Void   ->    List( String ) = cfun "environ";

	my ctermid:  Void -> String = cfun "ctermid";

	my ttyname' : Sy_Int -> String = cfun "ttyname";
	fun ttyname fd = ttyname' (fs::fd_to_int fd);

	my isatty' : Sy_Int -> Bool = cfun "isatty";
	fun isatty fd = isatty' (fs::fd_to_int fd);

    };					#  package posix_id
end;



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
