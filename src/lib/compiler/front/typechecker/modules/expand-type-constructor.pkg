## expandtycon.sml
## (C) 2001 Lucent Technologies, Bell Labs

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6



# The center of the typechecker is
#
#     src/lib/compiler/front/typechecker/typecheck/typecheck-package-language-g.pkg
#
# -- see it for a higher-level overview.
#
# It calls src/lib/compiler/front/typechecker/typecheck/typecheck-api.pkg
# which calls us, and we in turn offload much of our work
# to module_stuff: translateTypeConstructor
# in src/lib/compiler/front/typecheck-stuff/modules/module-stuff.api
#    src/lib/compiler/front/typecheck-stuff/modules/module-stuff.pkg


api Expand_Type_Constructor {

       Api_Context = List( module::Elements );

       expand_type_constructor:  (types::Type_Constructor,
                                  Api_Context,
                                  typechecker_dictionary::Typechecker_Dictionary)
                               -> types::Type_Constructor;

       debugging:  Ref(  Bool );
};



package expand_type_constructor

: (weak)  Expand_Type_Constructor		# Expand_Type_Constructor	is from   src/lib/compiler/front/typechecker/modules/expand-type-constructor.pkg

{
    stipulate

	package t= types;			# types		is from   src/lib/compiler/front/typecheck-stuff/types/types.pkg
	package tu= type_stuff;			# type_stuff	is from   src/lib/compiler/front/typecheck-stuff/types/type-stuff.pkg
	package ep= module_path;		# module_path	is from   src/lib/compiler/front/typecheck-stuff/modules/module-path.pkg
	package m= module;			# module	is from   src/lib/compiler/front/typecheck-stuff/modules/module.pkg
	package mu= module_stuff;		# module_stuff	is from   src/lib/compiler/front/typecheck-stuff/modules/module-stuff.pkg
    herein

	#  Debug hooks: 
	say         =   control_print::say;
	debugging   =   REF FALSE;

	fun if_debugging_say (msg: String)
            =
	    if *debugging
	       say msg;
               say "\n";
	    fi;

	fun bug s
            =
            error_message::impossible ("expand_type_constructor: " + s);

	 Api_Context = List( m::Elements );

	exception OUTER;



	/* Search a list of typechecked_package stamp namings.
         * We ignore GENERIC_IN_API --
         * we won't find any types there:
         */
	fun get_typechecked_package_variable (   module_stamp,
                                     (   _,
                                         s as (   m::TYPE_CONSTRUCTOR_IN_API { module_stamp=>module_stamp', ... }
                                                  |
                                                  m::PACKAGE_IN_API        { module_stamp=>module_stamp', ... }
                                              )
                                     ) ! rest
                                 )
            =>
	    if   (ep::module_stamps_are_equal (module_stamp, module_stamp'))
                 THE s;
            else get_typechecked_package_variable (module_stamp, rest);fi;

	   get_typechecked_package_variable (module_stamp, _ ! rest)   =>   get_typechecked_package_variable (module_stamp, rest);
	   get_typechecked_package_variable (module_stamp, NIL    )   =>   NULL; end;



	fun find_in_api_context (   module_stamp,   api_context as elements0 ! outer_context   )
		=>
		case (get_typechecked_package_variable (module_stamp, elements0))

		    THE (m::PACKAGE_IN_API { an_api as m::API { elements, ... }, ... } )
			 =>
			 elements ! api_context;

		    NULL
			 =>
			 find_in_api_context (module_stamp, outer_context);

			_ => bug "find_in_api_context - bad element";
		esac;


	    find_in_api_context (module_stamp, NIL)
		=>
		raise exception OUTER;
	end;



	fun expand_type_constructor (type_constructor, api_context, typechecker_dictionary)
            =
	    {   fun expand_type_constructor_variable (   module_stamp,   api_context as elements ! outer_context   )
                    :
                    t::Type_Constructor
                        =>
		        case (get_typechecked_package_variable (module_stamp, elements))

			     THE (m::TYPE_CONSTRUCTOR_IN_API { type_constructor, ... } )
                                 =>
			         case type_constructor

				      t::PRIMITIVE_TYPE_CONSTRUCTOR _ => type_constructor;

				      t::DEFINED_TYPE_CONSTRUCTOR { stamp, strict, path, type_scheme }
					  =>
					  t::DEFINED_TYPE_CONSTRUCTOR {
					      stamp,
					      strict,
					      path,

					      type_scheme => expand_type_scheme (type_scheme, api_context)
					  };

				     _ => bug "expand_type_constructor 2";
                                 esac;

			     NULL
				 =>
				 expand_type_constructor_variable (module_stamp,  outer_context);       #  Try outer context 

			    _ => bug "expandTypeConstructor 1";
                        esac;

		   expand_type_constructor_variable (module_stamp, NIL)
                       =>
                       raise exception OUTER;
                end 



		also
		fun expand_type_constructor api_context
                    = 
		    fn (type_constructor as t::TYPE_CONSTRUCTOR_BY_MODULE_PATH { module_path, ... } )
			   =>
			   (   expand_path (module_path, api_context)
			       except
				   OUTER                                      #  Path outside current api context 
				   =>
				   mu::translate_type_constructor typechecker_dictionary type_constructor; end 
			   );

		       type_constructor => type_constructor;
                    end 



		also
		fun expand_type_scheme (t::TYPE_SCHEME { arity, body }, api_context)
                    = 
		    t::TYPE_SCHEME {   arity,
			                body  => tu::map_constructor_type_dot_type_constructor   (expand_type_constructor api_context)   body
                                    }



		also
		fun expand_path (module_path, api_context)
                    =
		    case module_path
		      
			 NIL => bug "expandPath 1";

			 module_stamp ! NIL			# type_constructor! 
			     =>
			     expand_type_constructor_variable (module_stamp, api_context);

			 module_stamp ! rest			# Subpackage.
			     =>
			     expand_path (rest, find_in_api_context (module_stamp, api_context));
		    esac;

                expand_type_constructor api_context type_constructor;
	    };
    end;							# stipulate
};								# package expand_type_constructor 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
