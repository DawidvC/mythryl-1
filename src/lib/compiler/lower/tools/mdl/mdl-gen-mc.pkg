
# This module generates the machine code emitter of an architecture 
# given a machine description.



###               "First rate mathematicians choose first rate people,
###                but second rate mathematicians choose third rate people."
###
###                                             -- Andre Weil 



generic package MDLGenMC (Comp:  Mdl_Compile) : Mdl_Gen_Module =
pkg
   package Comp = Comp
   package raw_syntax  = Comp::raw_syntax
   package Dictionary  = Comp::Dictionary
   package t    = Comp::Trans
   package w    = unt32

   use raw_syntax Comp::Util Comp::error

   infix << || && 

   my op << = W.<<
   my op || = w::bitwise_or
   my op && = w::bitwise_and
   bitwise_not  = w::bitwise_not

   itow = w::from_int
   itos = int::to_string

   fun gen md =
   let #  name of the generic and api 
       strName = Comp::strname md "MCEmitter"
       sigName = "Instruction_Emitter"

       /* Is debugging turned on? */ 
       debugOn = Comp::debugging md "MC"

       #  Arguments for the generic 
       args = ["package instruction:  "$Comp::signame md "INSTR",
		   "package codetree_eval:  Codetree_Eval where T = Instr::T",
		   "package stream:  Instruction_Stream ",
                   "package code_string:  Code_String"
                  ] @
                  (if debugOn then
                     ["package assembler:  Instruction_Emitter",
                      "  where I = Instr and S = codetree_stream::S.Stream"
                     ]
                   else [])

       #  Instruction formats that are declared in the description 
       formats = Comp::formats md

       #  Instruction widths that are defined in this architecture 
       widths = list_mergesort::uniqueSort int::compare 
                      (fold_right (fn ((THE w, _), l) => w . l | (_, l) => l) []
                             formats)

       #  The Instruction package 
       dictionary = Dictionary::lookupPackage (Comp::dictionary md) (IDENT([], "Instruction"))

       #  Make sure that all widths are either 8, 16, 24, or 32 bits 
       apply 
          (fn w =>
              if w < 8 or w > 32 or w mod 8 != 0 then
                 error("instruction format must be 8, 16, 24, or 32 bits; found"$itos w)
              else ()) widths

       #  Endianess 
       endianess = Comp::endianess md

       #  Name of an emit function 
       fun emit id = "emit_"$id

       /* 
        * For each width N, generate a function eWordN for emitting a word
        * of that width. 
        */
       emitFuns = 
           let DUMMYbind = FUNbind("dummy",[])
               fun mkEmitWord width =
               let fun f 0 = []
                     | f 8 = [MY("b8", ID "w")]
                     | f b = MY("b"$itos b, ID "w") .
                                MY("w", SLR (ID "w", WORD32expression 0w8)) . f (b - 8)
                   fun g 0 = []
                     | g b = APPLY("eByteW", ID("b"$itos b)) . g (b - 8)
                   debug = 
                      if debugOn then 
                      [MY("_", ID "print(\"0x\"$unt32::to_string w$\"\\t\")")]
                      else []
                   body = case endianess of
                                BIG    => g width
                              | LITTLE => reverse (g width)
               in  FUNbind("eWord"$itos width,
                       [CLAUSE([IDpat "w"], 
                               NULL,
                               LET (debug@reverse (f width), SEQUENTIAL_EXPRESSIONS body))])
               end
           in  FUNdecl (map mkEmitWord widths) end
 
       #  Functions for emitting the encoding for a cell 
       cellFuns = 
           let fun mkEmitCell (CELLdecl { id, from, ... } ) =
                   FUN'(emit id, IDpat "r", 
                      APPLY("itow", APPLY("cells_basis::physicalRegisterNum", ID "r")))
           in  FUNdecl (map mkEmitCell (Comp::cells md)) end


       # For each enum T defined in the package Instruction that
       # has code generation annotations defined, generate a function emit_T.

       datatypeFuns =   
           let fun word w = TYPEDexp (WORD32expression w, WORD32aType)
               fun mkEmitDatatypes([], fbs) = reverse fbs
                 | mkEmitDatatypes (DATATYPEbind { id, mc, cbs, ... } . dbs, fbs) = 
               let fun missing () =
                      error("machine encoding is missing for constructor "$id)
                   fun loop (w, [], cs, found) = (w, reverse cs, found)
                     | loop (w, (cb as CONSbind { id, type, mc, ... } ) . cbs, 
                            cs, found) = 
                       let my (e, found) =
                            case (mc, w) of
                              (NULL, THE (x . _)) => (word (itow x), TRUE)
                            | (NULL, THE []) => (missing(); (word 0w0, TRUE))
                            | (NULL, NULL) => (APPLY("error", STRING_CONSTANT_IN_EXPRESSION id), found)
                            | (THE (WORDmc w'), THE (w . l')) => 
                               (if itow w != w' then 
                                  error ("constructor "$id$" encoding is 0x"$
                                         w::to_string w'$" but is expecting 0x"$
                                         w::to_string (itow w)) 
                                (word w', TRUE))   
                            | (THE (WORDmc w'), THE []) => (word w', TRUE)
                            | (THE (WORDmc w'), NULL) => (word w', TRUE)
                            | (THE (EXPmc e), _) => (e, TRUE)
                           w = case w of NULL => NULL
                                           | THE(_ . w) => THE w
                                           | THE [] => (missing(); NULL)
                       in loop (w, cbs, 
                               t::mapConsToClause 
                                 { prefix=["I"], pattern=fn p, expression=e } cb . cs,
                               found)
                       end
                   my (w, cs, found) = loop (mc, cbs, [], FALSE)
                   case w of
                             THE(_ . _) => 
                              error("Extra machine encodings in enum "$id)
                           | _ => () 
               in  mkEmitDatatypes (dbs, 
                        if found then FUNbind (emit id, cs) . fbs else fbs)
               end
               dbs = Dictionary::datatypeDefinitions dictionary
           in  FUNdecl (mkEmitDatatypes (dbs,[]))
           end
 
       /* 
        * Generate a formatting function for each machine instruction format 
        * defined in the machine description. 
        */
       formatFuns = 
           let fun mkFormat (THE width, FORMATbind (formatName, fields, NULL)) =
                     mkDefinedFormat (width, formatName, fields)
                 | mkFormat (NULL, FORMATbind (formatName, fields, NULL)) =
                     (error("missing width in format "$formatName); 
                      FUNbind (formatName, []))
                 | mkFormat(_, FORMATbind (formatName, fields, THE e)) =
                     mkFormatFun (formatName, fields, e) 

                 /* 
                  * Generate an expression that builds up the format 
                  */
               and mkDefinedFormat (totalWidth, formatName, fields) =
               let #  factor out the constant and the variable part 
                   fun loop ([], bit, constant, exps) = (bit, constant, exps)
                     | loop (FIELD { id, width, value, an_api, ... } . fs,
                            bit, constant, exps) =
                       let width = 
                               case width of
                                 WIDTH w => w
                               | RANGE (from, to) =>
                                 (if bit != from then 
                                    error("field "$id$
                                          " in format "$formatName$
                                          " starts from bit "$itos from$
                                          " (bit "$itos bit$" expected")
                                  
                                  to - from + 1)
                           mask = (0w1 << unt::from_int width) - 0w1
                           my (constant, exps) =
                               case value of
                                  THE v =>
                                   (if (v && (bitwise_not mask)) != 0w0 then
                                      error("value 0x"$w::to_string v$
                                            "in field "$id$
                                            " is out of range")
                                    
                                    (constant || (v << unt::from_int bit),
                                     exps))
                               | NULL => 
                                 let e = ID id
                                     e = if an_api == UNSIGNED then e else
                                               BITWISEAND (e, WORD32expression mask)
                                     e = LEFTSHIFT (e, WORD32expression (itow bit))
                                 in  (constant, e . exps) end
                       in  loop (fs, bit+width, constant, exps) end 
                   my (realWidth, constant, exps) = 
                           loop (reverse fields, 0, 0w0, [])
               in  if realWidth != totalWidth then
                      error("format "$formatName$" is declared to have "$
                            itos totalWidth$" bits but I counted "$
                            itos realWidth)
                   
                   mkFormatFun (formatName, fields,   
                               APPLY("eWord"$itos totalWidth,
                                   fold_right PLUS (WORD32expression constant) exps))
               end

                 /* Generate a format function that includes implicit
                  * argument conversions.
                  */
               and mkFormatFun (id, fields, expression) = 
                   FUNbind (id, [CLAUSE(
                     [RECORD_PATTERN (fold_right (fn (FIELD { id="", ... }, fs) => fs
                                       | (FIELD { value=THE _, ... }, fs) => fs
                                       | (FIELD { id, ... }, fs) => (id, IDpat id) . fs                                     ) [] fields, FALSE)],
                     NULL,
                     LET (fold_right (fn (FIELD { id, cnv=NOcnv, ... }, ds) => ds
                                 | (FIELD { id, cnv=CELLcnv k, ... }, ds) => 
                                     MY (id, APPLY (emit k, ID id)) . ds
                                 | (FIELD { id, cnv=FUNcnv f, ... }, ds) => 
                                     MY (id, APPLY (emit f, ID id)) . ds
                               ) [] fields, expression))])
           in FUNdecl (map mkFormat (Comp::formats md)) end

       #  The main emitter function 
       emitInstrFun = 
           let fun mkEmitInstr (cb as CONSbind { id, mc, ... } ) = 
                   t::mapConsToClause 
                      { prefix=["I"], pattern=fn p,
                       expression=case mc of
                             THE (EXPmc e) => e
                           | _ => APPLY("error", STRING_CONSTANT_IN_EXPRESSION id)
                      } cb
               instructions = Comp::instructions md
           in  FUNdecl[FUNbind("emitInstr", map mkEmitInstr instructions)]
           end


       # Body of the module:
       strBody =
       [@@@["package i = Instr",
          "package c = i::C",
          "package constant = i::Constant",
          "package t = i::T",
          "package s = Stream",
          "package p = s::P",
          "package w = unt32",
          "",
          "/* "$Comp::name md$" is "$
              (case endianess of BIG => "big" | LITTLE => "little")$
              " endian */",
          ""
         ],
        Comp::errorHandler md "MC",
        @@@["fun make_stream _ =",
          "stipulate infix && || << >> >>>",
          "    my op << = W.<<",
          "    my op >> = W.>>",
          "    my op >>> = W.>>>",
          "    my op || = w::bitwise_or",
          "    my op && = w::bitwise_and",
          "    itow = w::from_int",
          "    fun emit_bool FALSE = 0w0:  w::word",
          "      | emit_bool TRUE = 0w1:  w::word",
          "    emit_int = itow",
          "    fun emit_word w = w",
          "    fun emit_label l = itow (label::addrOf l)",
          "    fun emit_labexp le = itow (codetree_eval::valueOf le)",
          "    fun emit_const c = itow (Constant::valueOf c)",
          "    loc = REF 0",
          "",
          "    # Emit a byte:",
          "    fun eByte b =",
          "    stipulate i = *loc in loc := i + 1; code_string::update (i, b) end",
          "",
          "    # Emit the low order byte of a word:",
          "    # Note: fromLargeWord strips the high order bits!",
          "    fun eByteW w =",
          "    stipulate i = *loc",
          "    herein loc := i + 1; code_string::update (i, unt8::fromLargeWord w) end",
          "",
          "    fun doNothing _ = ()",
	  "    fun fail _ = raise exception FAIL \"MCEmitter\"",
          "    fun get_notes () = error \"get_notes\"",
          "",
          "    fun pseudoOp pOp = p::emitValue { pOp=pOp, loc= *loc, emit=eByte }",
          "",
          "    fun init n = (code_string::init n; loc := 0)",
          "",
             (if debugOn then
               "my s::STREAM { emit=asm, ... } = assembler::make_stream()"
              else ""
             )
       ],
         emitFuns,
         cellFuns,
         datatypeFuns,
         formatFuns,
         Comp::declOf md "MC",
       @@@["    fun emitter instruction =",
         "    stipulate"
        ],
         emitInstrFun,
       @@@["    in",
          (if debugOn then
          "        emitInstr instruction; asm instruction"
           else
          "        emitInstr instruction"
          ),
          "    end",
          "",
	  "fun emit_instruction (i::NOTE { instruction, ... } ) = emit_instruction instruction",
	  "  | emit_instruction (i::INSTRUCTION i) = emitter i",
	  "  | emit_instruction (i::LIVE _)  = ()",
	  "  | emit_instruction (i::DEAD _)  = ()",
	  "| emit_instruction _ = error \"emit_instruction\"",
          "",
          "herein  s::STREAM { begin_cluster=init, ",
          "             pseudoOp, ",
          "             emit=emit_instruction, ",
          "             end_cluster=fail, ",
          "             define_local_label=doNothing, ",
          "             define_global_label=doNothing, ",
          "             comment=doNothing, ",
          "             end_procedure=doNothing, ",
          "             annotation=doNothing, ",
          "             get_notes",
          "            }",
          "end"
        ]
      ]

   herein  Comp::codegen md "emit/MC"
         [Comp::make_generic md "MCEmitter" args sigName strBody]
   end
end 
