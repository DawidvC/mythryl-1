## unsafe.pkg

# Compiled by:
#     src/lib/std/src/stdlib-core.make6



# Unsafe operations on Mythryl values.

package unsafe: Unsafe {			# Unsafe	is from   src/lib/std/src/unsafe/unsafe.api

    package c_interface = c_interface;		# c_interface	is from   src/lib/std/src/unsafe/cinterface.pkg
    package unsafe_chunk = unsafe_chunk;	# unsafe_chunk	is from   src/lib/std/src/unsafe/unsafe-chunk.pkg
    package poll = poll;			# poll		is from   src/lib/std/src/unsafe/poll.pkg

    package vector {
	get  =  inline_t::poly_vector::get;	# inline_t	is from   src/lib/core/init/built-in.pkg
	make =  core::assembly::a::create_v;	# core		is from   src/lib/core/init/core.pkg
    };

    package rw_vector {
	get  =  inline_t::poly_rw_vector::get;
	set  =  inline_t::poly_rw_vector::set;
	make =  core::assembly::a::array;
    };

    package char_vector {

	Vector  =  char_vector::Vector;			# char_vector	is from   src/lib/std/src/char-vector.pkg
	Element =  char_vector::Element;

	get     =  inline_t::char_vector::get;
	set     =  inline_t::char_vector::set;

	make    =  core::assembly::a::create_s;
    };

    package rw_char_vector {

	Rw_Vector =  rw_char_vector::Rw_Vector;		# rw_char_vector	is from   src/lib/std/src/rw-char-vector.pkg
	Element   =  rw_char_vector::Element;

	get    = inline_t::rw_char_vector::get;
	set    = inline_t::rw_char_vector::set;

	my make:  Int -> Rw_Vector
            =
            inline_t::cast  core::assembly::a::create_b;
    };

    package unt8_vector {

	Vector  =  unt8_vector::Vector;			# unt8_vector		is from   src/lib/std/src/unt8-vector.pkg
	Element =  unt8_vector::Element;

	get    =  inline_t::unt8_vector::get;
	set    =  inline_t::unt8_vector::set;

	my make:  Int -> Vector
            =
            inline_t::cast core::assembly::a::create_s;
    };

    package rw_unt8_vector {

	Rw_Vector = rw_unt8_vector::Rw_Vector;		# rw_unt8_vector	is from   src/lib/std/src/rw-unt8-vector.pkg
	Element   = rw_unt8_vector::Element;

	get   = inline_t::rw_unt8_vector::get;
	set   = inline_t::rw_unt8_vector::set;

	make  = core::assembly::a::create_b;
    };

/** once we have flat real vectors, we can include this subpackage

    package float64_vector {

	type Vector = float64_vector::Vector
	type Element = float64_vector::Element
	my get:  (Vector * Int) -> Element
	my set:  (Vector * Int * Element) -> Void
	my make:  Int -> Vector
    };
**/
    package rw_float64_vector {

	Rw_Vector = rw_float64_vector::Rw_Vector;	# rw_float64_vector	is from   src/lib/std/src/rw-float64-vector.pkg
	Element   = rw_float64_vector::Element;

	get   = inline_t::rw_float64_vector::get;
	set   = inline_t::rw_float64_vector::set;

	make  = core::assembly::a::create_r;
    };

    get_current_thread_register = inline_t::get_current_thread_register;
    set_current_thread_register = inline_t::set_current_thread_register;

    get_handler =  inline_t::gethandler;
    set_handler =  inline_t::sethandler;

    get_pseudo =  inline_t::getpseudo;
    set_pseudo =  inline_t::setpseudo;


    my blast_read:  unt8_vector::Vector -> X
        =
	(fn x =  c_interface::c_function "Lib7-Runtime" "blastIn" x);


    my blast_write:  X -> unt8_vector::Vector
        =
	(fn x =  c_interface::c_function "Lib7-Runtime" "blastOut" x);


    boxed
        =
        inline_t::boxed;


    cast
        =
        inline_t::cast;

    #  Actual representation of pStruct 
    Run_Dyn_Dictionary
	= NILRDE
	| CONSRDE ( unt8_vector::Vector,
                    unsafe_chunk::Chunk,
                    Run_Dyn_Dictionary
                  );


    my p_struct:  Ref( Run_Dyn_Dictionary )
        =
        inline_t::cast  assembly::pstruct;


    toplevel_fate
        =
        REF (inline_t::isolate (fn () = ()));


    signal_handler
        =
        assembly::sighandler;

};




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright (c) 1997 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
