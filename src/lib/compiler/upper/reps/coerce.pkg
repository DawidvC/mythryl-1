## coerce.pkg 
#
#   "In order to support coercion of data objects
#    from one representation to another, we define
#    a 'coerce' operation on our lambda language
#    [ ... ]
#    'coerce' is a compile-time operation; given
#    two [Highcode_Type]s t1 and t2, coerce(t1,t2)
#    returns a coercion function that coerces one
#    expression with type t1 into another expression
#    with type t2..."
#
#     -- Page 40 from Zhong Shao's PhD thesis:
#         Compiling Standard ML for Efficient Execution on Modern Machines
#         http://flint.cs.yale.edu/flint/publications/zsh-thesis.html

# Compiled by:
#     src/lib/compiler/core.make6



###                "All men dream: but not equally. Those who dream
###                 by night in the dusty recesses of their minds
###                 wake in the day to find that it was vanity: but
###                 the dreamers of the day are dangerous men, for
###                 they may act their dream with open eyes, to make
###                 it possible."
###
###                                         -- T. E. Lawrence



api Coerce {

     Wrapper_Dictionary;

     empty_wrapper_dictionary: Void -> Wrapper_Dictionary;

     wp_new:     (Wrapper_Dictionary,
                  debruijn_index::Depth)
                -> Wrapper_Dictionary;

     wp_build:   (Wrapper_Dictionary,
                  anormal::Anormal_Expression)
                -> anormal::Anormal_Expression;

     unwrap_op:  (Wrapper_Dictionary,
                 List( highcode_type::Highcode_Type ),
                 List( highcode_type::Highcode_Type ),
                 debruijn_index::Depth)
	       ->  Null_Or( List( anormal::Value ) -> anormal::Anormal_Expression );

     wrap_op:    (Wrapper_Dictionary,
                 List( highcode_type::Highcode_Type ),
                 List( highcode_type::Highcode_Type ),
                 debruijn_index::Depth)
	        -> Null_Or( List( anormal::Value ) -> anormal::Anormal_Expression );

};

package coerce: (weak)  Coerce {		# Coerce		is from   src/lib/compiler/upper/reps/coerce.pkg

    stipulate

        package di= debruijn_index;		# debruijn_index	is from   src/lib/compiler/front/typechecker/basics/de-bruijn-index.pkg
	package lt= highcode;			# highcode		is from   src/lib/compiler/upper/highcode/highcode.pkg
	package lv= highcode_var;		# highcode_var		is from   src/lib/compiler/upper/highcode/highcode-var.pkg
	package pf= pflatten;			# pflatten		is from   src/lib/compiler/upper/polylambda/pflatten.pkg
	package fu= anormal_stuff;		# anormal_stuff		is from   src/lib/compiler/upper/anormal/anormal-stuff.pkg

	include highcode_guts;
	include anormal;

    herein

	/****************************************************************************
	 *                  UTILITY FUNCTIONS AND CONSTANTS                         * 
	 ****************************************************************************/ 

	fun bug s = error_message::impossible ("Coerce: " + s);
	fun say (s:  String) = controls::print::say s;

	fun make_var _ = lv::make_highcode_variable ();

	ident = fn le => le; end ;

	fkfun = { is_recursive=>NULL, all_call_sites_known=>FALSE, inlining_hint=>INLINE_WHENEVER_POSSIBLE, calling_convention=>CALLING_CONVENTION_FUNCTION lt::ffc_fixed };
	fkfct = { is_recursive=>NULL, all_call_sites_known=>FALSE, inlining_hint=>INLINE_IF_SIZE_SAFE,      calling_convention=>CALLING_CONVENTION_GENERIC };

	tfk = { inlining_hint=>INLINE_WHENEVER_POSSIBLE };

	fun fromto (i, j)
            =
            i < j   ??   i ! fromto (i+1, j)
                    ::   [];

	fun op_list (NULL    ! r) =>  op_list r;
	    op_list ((THE _) ! r) =>  TRUE;
	    op_list []            =>  FALSE;
        end;

	fun wrap_primop (t, u, kont)
            = 
	    {   v =   make_var ();
	    
                fu::wrap_primop (t, [u], v, kont (VAR v));
	    };

	fun unwrap_primop (t, u, kont)
            = 
	    {   v =   make_var (); 
	    
                fu::unwrap_primop (t, [u], v, kont (VAR v));
	    };

	fun retv (v) = RET [v];

	#############################################################################
	#              WRAPPER CACHES AND WRAPPER DICTIONARIES
	#############################################################################

	Hdr = Value -> Anormal_Expression;
	Hdr_Option = Null_Or( Hdr );

	Wrapper_Cache
            =
            int_red_black_map::Map(  List( (Highcode_Type, Hdr_Option)) );

	Wrapper_Dictionary
            =
            List ((Ref( List( Function_Declaration )) , Ref (Wrapper_Cache)) ); 

	my empty_wrapper_cache:  Wrapper_Cache
            =
            int_red_black_map::empty;

	fun empty_wrapper_dictionary ()
            =
            [(REF [], REF empty_wrapper_cache)];

	fun wc_enter ([], t, x)
                =>
                bug "unexpected wenv in wc_enter";

	    wc_enter((_, z as REF m) ! _, t, x)
		=>
		{   h = hash_lambda_type t;

		    z := int_red_black_map::set
			     (m, h, (t, x) ! (null_or::the_else (int_red_black_map::get (m, h), NIL)));
		};
        end;

	fun wc_look ([], t)
                =>
                bug "unexpected wenv in wc_look";

	    wc_look((_, z as REF m) ! _, t)
		=> 
		{   fun loop ((t', x) ! rest)
                            =>
                            lambda_types_are_equivalent (t, t')
                                ??  THE x
                                ::  loop rest;

		        loop []
                            =>
                            NULL;
                    end;

		    case (int_red_black_map::get (m, hash_lambda_type t))

			 THE x => loop x;
			 NULL => NULL;
		    esac;
		};
        end;

	fun wp_new (wrapper_dictionary, d)
            = 
	    {   od = length wrapper_dictionary;

		# Sanity check:
		#
		if (d+1 != od)    bug "inconsistent state in wpNew";   fi;
	    
                (REF [], REF empty_wrapper_cache) ! wrapper_dictionary;
	    };

	fun wp_build ([], base)
                =>
                base;

	    wp_build ((wref, _) ! _, base)
		=> 
		fold_left
		    (fn (fd, b) =  MUTUALLY_RECURSIVE_FNS([fd], b))
		    base
		    *wref;
        end;

	fun add_wrappers (wenv, p, d)
            = 
	    {   # The d value is ignored now but
                # we may use it in the future 

		my (wref, _)
                    =
                    head wenv #  (list::nth (wenv, d)) 
		    except
                        _ = bug "unexpected cases in add_wrappers";
	    
                wref :=  (p ! *wref);
	    };

	# apply_wraps:
        #     ( List( hdr_option ),
        #       List( value ),
        #       (List( value ) -> Anormal_Expression)
        #     )
        #     ->
        #     Anormal_Expression 
	#
	fun apply_wraps (wps, vs, fate)
            = 
            g (wps, vs, ident, [])
            where
	        fun g (NULL ! ws, v ! vs, header, nvs)
                        =>
                        g (ws, vs, header, v ! nvs);

		    g ((THE f) ! ws, v ! vs, header, nvs)
                        => 
			{   nv = make_var();

			    g ( ws,
                                vs,
                                fn le = header (LET([nv], f v, le)),
                                (VAR nv) ! nvs
                              );
			};

		    g ([], [], header, nvs)
                        =>
                        header (fate (reverse nvs));

		    g _ => bug "unexpected cases in apply_wraps";
                end;
	    end;					# fun apply_wraps 

	# apply_wraps_with_filler does the same thing
        # as apply_wraps except that it also fills in
        # proper coercions when there are mismatches
        # between the original values.
        #
        # Occurs strictly only for TC_ARROW case.
	# The filler is generated by the
        # PFlatten::v_coerce function.
	#
	# The boolean flag indicates whether the
        # the filler should be applied before 
	# wrapping or after wrapping.
	#
	# apply_wraps_with_filler: 
	#   Bool -> { filler:  Null_Or( List( value ) -> (List( value ) * (Anormal_Expression -> Anormal_Expression))),
	#            wps: List( hdr_option ), args: List( value ), fate: (List( value ) -> lex) }
	#        -> Anormal_Expression
	#
	fun apply_wraps_with_filler wrap_before { filler=>NULL, wps, args, fate }
		=> 
		apply_wraps (wps, args, fate);

	    apply_wraps_with_filler wrap_before { filler=>THE ff, wps, args, fate }
		=> 
		{   my ((nargs, nhdr), ncont)
			= 
			if wrap_before
			     (ff args, fate);
			else ((args, ident), 
			      fn vs = {   my (nvs, h) = ff vs; 

					  h (fate (nvs)); 
				      }
			      );
			fi;

		    nhdr (apply_wraps (wps, nargs, ncont));
		};
        end;

	/****************************************************************************
	 *                            MAIN FUNCTIONS                                *
	 ****************************************************************************/ 
	fun wrapper_fn (wflag, sflag) (wenv, nts, ots, d)
            = 
	    {   do_wrap = if (sflag)
                                  
			        fn (w, fdec) =  { add_wrappers (wenv, fdec, d); 
						  fn u =  APPLY (VAR w, [u]);
                                                };

			     else 
			       fn (w, fdec) = (fn u = MUTUALLY_RECURSIVE_FNS([fdec], APPLY (VAR w, [u])));
                             fi;

		fun get_wrapper_type_constructor (wflag, nx, ox, do_it)
                    = 
		    if   (type_constructors_are_equivalent (nx, ox))
		         NULL;
		    else  if sflag

			       mark = if wflag  lt::ltc_int; else lt::ltc_real;fi; #  hack 

			       key = lt::ltc_str [lt::ltc_tyc nx, lt::ltc_tyc ox, mark];

			       case (wc_look (wenv, key))
				     THE x => x;
				     NULL => { result = do_it (type_constructor_project nx, type_constructor_project ox);
					        wc_enter (wenv, key, result); result;
					     };
                               esac;

			  else
                               do_it (type_constructor_project nx, type_constructor_project ox);
                         fi;
                    fi;

		fun get_wrapper_lambda_type (wflag, nx, ox, do_it)
                    = 
		    if   (lambda_types_are_equivalent (nx, ox))
		         NULL;

		    elif sflag

                         # We could always force the sharing here
			 #
			 mark =   wflag   ??  lt::ltc_int
                                          ::  lt::ltc_real;	#  hack 

			 key = lt::ltc_str [nx, ox, mark];
	
		         case (wc_look (wenv, key))

			     THE x => x;

			     NULL =>
                                 {   result
                                         =
                                         do_it (lambda_type_project nx, lambda_type_project ox);

				     wc_enter (wenv, key, result);

                                     result;
				 };
                         esac;

		    else
                         do_it (lambda_type_project nx, lambda_type_project ox);
                    fi;

		fun type_constructor_loop wflag (nx, ox)
                    = 
		    get_wrapper_type_constructor
                      ( wflag,
                        nx,
                        ox, 
		        fn (TC_EXTENSIBLE_TOKEN (_, nz), _)		 #  sanity check: tcc_wrap (ox) = nx 
				=>
				if (lt::tcp_wrap nx)

				      my (ax, act) = if wflag  (ox, wrap_primop); else (nx, unwrap_primop);fi;

				      if (lt::tcp_prim ox)

                                          THE (fn u = act (ox, u, retv));

				      else

                                          wp = type_constructor_loop wflag (nz, ox);

					  f = make_var();
					  v = make_var();

					  my (tx, kont, u, header)
                                              = 
					      case wp 

						  NULL =>
                                                      (ox, retv, VAR v, ident);

						  THE hh
                                                      =>
						      if wflag 

							  z = make_var();

							  (nz, retv, VAR z, fn e = LET([z], hh (VAR v), e));

						      else
                                                          (nz, hh, VAR v, ident);
                                                      fi;
                                              esac;

					  fdec = (fkfun, f, [(v, lt::ltc_tyc ax)], 
						      header (act (tx, u, kont)));

					  THE (do_wrap (f, fdec));

                                      fi;

				else
                                    bug "unexpected TC_EXTENSIBLE_TOKEN in typeConstructorLoop";

                                fi;

			    (TC_TUPLE (nrf, nxs), TC_TUPLE (orf, oxs))
				=> 
				{   wps = paired_lists::map (type_constructor_loop wflag) (nxs, oxs);

				    if (op_list wps) 

					f = make_var();
					v = make_var();

					nl = fromto (0, length nxs);
					u = VAR v;

					my (nvs, header)			# Take out all the fields. 
					    =
					    fold_right
						(fn (i, (z, h))
						    = 
						    {   x = make_var();

							( (VAR x) ! z, 
							  fn le =  SELECT (u, i, x, h le)
							);
						    }
						)
						([], ident)
						nl;

					my (ax, rf)
					    = 
					    wflag   ??  (lt::ltc_tyc ox, nrf)
						    ::  (lt::ltc_tyc nx, orf);

					fun fate nvs
					    = 
					    {   z = make_var();
						RECORD (RK_TUPLE rf, nvs, z, RET [VAR z]);
					    };

					body = header (apply_wraps (wps, nvs, fate));
					fdec = (fkfun, f, [(v, ax)], body);

					THE (do_wrap (f, fdec));

				    else
					NULL;
				    fi;
				};

			    (TC_ARROW (_, nxs1, nxs2), TC_ARROW (_, oxs1, oxs2))
				=> 
				{   my (awflag, rwflag) = (not wflag, wflag); #  polarity 
				    my (oxs1', filler1) = pf::v_coerce (awflag, nxs1, oxs1);

				    wps1 = paired_lists::map (type_constructor_loop awflag) (nxs1, oxs1');

				    my (oxs2', filler2) = pf::v_coerce (rwflag, nxs2, oxs2);

				    wps2 = paired_lists::map (type_constructor_loop rwflag) (nxs2, oxs2');

				    case (op_list wps1, op_list wps2, filler1, filler2)

					(FALSE, FALSE, NULL, NULL)
					    =>
					    NULL;

					_   => 
					    {   wf = make_var();
						f  = make_var();
						rf = make_var();

						my (ax, rxs1, rxs2)
						    = 
						    if wflag  (lt::ltc_tyc ox, nxs1, oxs2); 
						    else (lt::ltc_tyc nx, oxs1, nxs2);fi;

						parameters
						    =
						    map  (fn t = (make_var(), lt::ltc_tyc t))
							 rxs1;

						avs = map  (fn (x, _) = VAR x)
							   parameters;

						rvs = map  make_var  rxs2;

						rbody
						    = 
						    LET
						      ( rvs, 

							apply_wraps_with_filler
							    awflag 
							    { filler => filler1,
							      wps    => wps1,
							      args   => avs,
							      fate => (fn wvs = APPLY (VAR f, wvs))
							    },

							apply_wraps_with_filler
							    rwflag
							    { filler => filler2,
							      wps    => wps2, 
							      args   => map VAR rvs, fate=>RET
							    }
						      );

						rfdec = (fkfun, rf, parameters, rbody);
						body  = MUTUALLY_RECURSIVE_FNS([rfdec], RET [VAR rf]);
						fdec  = (fkfun, wf, [(f, ax)], body);

						THE (do_wrap (wf, fdec));
					  };
				    esac;
				};

			    (_, _)
				=> 
				if   (lt::type_constructors_are_approximately_equivalent (nx, ox))
				     NULL;
				else
				     say " Type nx is:  \n"; say (lt::tc_print nx);
				     say "\n Type ox is:  \n"; say (lt::tc_print ox); say "\n";
				     bug "unexpected other tycs in typeConstructorLoop";
				fi;
                        end			# fn
                      );			# fun type_constructor_loop

		fun lambda_type_loop wflag (nx, ox)
                    = 
		    get_wrapper_lambda_type (wflag, nx, ox, func)
                    where
		       fun func ( FNTYPE_MONOMORPHIC_TYPE_CONSTRUCTOR nz,
                                 FNTYPE_MONOMORPHIC_TYPE_CONSTRUCTOR oz
                               )
			       =>
                               type_constructor_loop wflag (nz, oz);

			   func( FNTYPE_PACKAGE nxs,
				 FNTYPE_PACKAGE oxs
			       )
			       => 
			       {   wps = paired_lists::map (lambda_type_loop wflag) (nxs, oxs);

				   if (op_list wps)

				       f = make_var();
				       v = make_var();

				       nl = fromto (0, length nxs);
				       u = VAR v;

				       my (nvs, header)			# Take out all the fields 
					   =
					   fold_right
                                               (fn (i, (z, h))
                                                   =
						   {   x = make_var();

						       ( (VAR x) ! z, 
						         fn le = SELECT (u, i, x, h le)
                                                       );
						   }
                                               )
                                               ([], ident)
                                               nl;

				       fun fate nvs
                                           = 
					   {   z = make_var();
					       RECORD (RK_STRUCT, nvs, z, RET [VAR z]);
					   };

				       body = header (apply_wraps (wps, nvs, fate));

				       ax   =    wflag  ??  ox
                                                        ::  nx;

				       fdec = (fkfct, f, [(v, ax)], body);

				       THE (do_wrap (f, fdec));

				   else
				       NULL;
				   fi;
			       };

		           func( FNTYPE_GENERIC (nxs1, nxs2),
                                 FNTYPE_GENERIC (oxs1, oxs2)
			       )
			       => 
			       {   wps1 = paired_lists::map (lambda_type_loop (not wflag)) (nxs1, oxs1);
				   wps2 = paired_lists::map (lambda_type_loop wflag) (nxs2, oxs2);

				   case (op_list wps1, op_list wps2)

				       (FALSE, FALSE)
                                           =>
                                           NULL;

				       _   => 
					   {   wf = make_var();
					       f  = make_var();
					       rf = make_var();

					       my (ax, rxs1, rxs2)
						   = 
						   wflag  ??  (ox, nxs1, oxs2)
							  ::  (nx, oxs1, nxs2);

					       parameters
                                                   =
                                                   map  (fn t = (make_var(), t))
                                                        rxs1;

					       avs = map  (fn (x, _) = VAR x)  parameters;

					       rvs = map make_var rxs2;

					       rbody
						   = 
						   LET ( rvs, 
						         apply_wraps (wps1,         avs, fn wvs = APPLY (VAR f, wvs)),
						         apply_wraps (wps2, map VAR rvs, fn wvs = RET wvs           )
                                                       );

					       rfdec = (fkfct, rf, parameters, rbody);
					       body  = MUTUALLY_RECURSIVE_FNS( [rfdec], RET [VAR rf]);
					       fdec  = (fkfct, wf, [(f, ax)], body);

					       THE (do_wrap (wf, fdec));
					   };
                                   esac;

			       };

		           func( FNTYPE_POLYMORPHIC (nks, nzs),
                                 FNTYPE_POLYMORPHIC (oks, ozs)
			       )
			       => 
			       {   nwenv = wp_new (wenv, d);
				   wp    = wrapper_fn (wflag, sflag) (nwenv, nzs, ozs, di::next d);

				   case wp

					NULL => NULL;

					THE (header:  List( Value ) -> Anormal_Expression)
					    => 
					    {   wf = make_var();
						f  = make_var();
						rf = make_var(); 

						my (ax, aks, rxs)
						    = 
						    wflag   ??   (ox, nks, ozs)
                                                            ::   (nx, oks, nzs);

						nl  = fromto (0, length nks); 
						ts  = map  (fn i = lt::tcc_var (di::innermost, i))  nl;
						avs = map  make_var  rxs;

						rbody  = LET (avs, TYPE_APPLY (VAR f, ts), header (map VAR avs));
						nrbody = wp_build (nwenv, rbody);

						atvks = map (fn k = (lt::make_type_variable(), k)) aks;
						body = TYPE_FN((tfk, rf, atvks, nrbody), RET [VAR rf]);
						fdec = (fkfct, wf, [(f, ax)], body);

						THE (do_wrap (wf, fdec));
					    };
				   esac;
			       };

		           func _
                               =>
			       {   say " Type nx is:  \n"; say (lt::lt_print nx);
			           say "\n Type ox is:  \n"; say (lt::lt_print ox); say "\n";
			           bug "unexpected other ltys in lambdaTypeLoop";
                               };
                       end;		# fun func
                    end;

		wps = paired_lists::map (lambda_type_loop wflag) (nts, ots);

	    
                op_list wps
                    ??  THE (fn vs =  apply_wraps (wps, vs, RET))
                    ::  NULL;

	    };						# fun wrapper_fn

	fun unwrap_op (wenv, nts, ots, d)
            = 
	    {   nts'  = map reduce_lambda_type_to_normal_form nts;
		ots'  = map reduce_lambda_type_to_normal_form ots;
		sflag = *controls::highcode::sharewrap;
	    
                wrapper_fn
                    (FALSE, sflag)
                    (wenv, nts', ots', d);
	    }; 

	fun wrap_op (wenv, nts, ots, d)
            = 
	    {   nts' =   map reduce_lambda_type_to_normal_form nts;
		ots' =   map reduce_lambda_type_to_normal_form ots;

		sflag =   *controls::highcode::sharewrap;

                wrapper_fn (TRUE, sflag) (wenv, nts', ots', d);
	    };

    end;	#  toplevel stipulate 
};		#  package coerce 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
