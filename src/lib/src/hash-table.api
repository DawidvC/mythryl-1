## hash-table.api
## AUTHOR:   John Reppy
##	    AT&T Bell Laboratories
##	    Murray Hill, NJ 07974
##	    jhr@research.att.com

# Compiled by:
#     src/lib/src/lib7.make6



# The api of the polymorphic hash table package.


###                 "If life were fair, there would be no hope for most of us.
###                  We would be doomed to our just desserts.
###                  Fortunately, the gods are not that cruel."



api Hash_Table {

     Hash_Table (X, Y);
	#  type of hash table mapping X to Y 

     make_table:  (((X -> Unt), (((X, X)) -> Bool))) -> ((Int, Exception))
	  -> Hash_Table ( X, Y );
	# Given a hashing function and an equality predicate, create a new table;
	# the int is a size hint and the exception is to be raised by find.


     clear:  Hash_Table( X, Y ) -> Void;
	#  remove all elements from the table 

     set:  Hash_Table (X, Y) -> ((X, Y)) -> Void;
	# Insert an item.  If the key already has an item associated with it,
	# then the old item is discarded.


     contains_key:  Hash_Table (X, Y) -> X -> Bool;
	#  return TRUE, if the key is in the domain of the table 

     lookup:  Hash_Table (X, Y) -> X -> Y;
	#  Find an item, the table's exception is raised if the item doesn't exist 

     find:  Hash_Table( X, Y ) -> X -> Null_Or( Y );
	#  Look for an item, return NULL if the item doesn't exist 

     remove:  Hash_Table( X, Y ) -> X -> Y;
	# Remove an item, returning the item.  The table's exception is raised if
	# the item doesn't exist.


     vals_count:  Hash_Table( X, Y ) ->  Int;
	#  Return the number of items in the table 

     vals_list:   Hash_Table( X, Y ) -> List( Y );

     keyvals_list:  Hash_Table( X, Y ) -> List ((X, Y));
	#  Return a list of the items (and their keys) in the table 

     apply:   (Y -> Void) -> Hash_Table (X, Y) -> Void;
     keyed_apply:  (((X, Y)) -> Void) -> Hash_Table (X, Y) -> Void;
	#  Apply a function to the entries of the table 

     map:   (Y -> Z) -> Hash_Table( X, Y ) -> Hash_Table( X, Z );
     keyed_map:  (((X, Y)) -> Z) -> Hash_Table( X, Y ) -> Hash_Table( X, Z );
	#  Map a table to a new table that has the same keys 

     fold:   (((Y, Z)) -> Z) -> Z -> Hash_Table( X, Y ) -> Z;
     foldi:  (((X, Y, Z)) -> Z) -> Z -> Hash_Table( X, Y ) -> Z;
	#  Fold a function over the elements of a table 

     modify:   (Y -> Y) -> Hash_Table( X, Y ) -> Void;
     modifyi:  (((X, Y)) -> Y) -> Hash_Table( X, Y ) -> Void;
	#  modify the hash-table items in place 

     filter:   (Y -> Bool) -> Hash_Table( X, Y ) -> Void;
     keyed_filter:  (((X, Y)) -> Bool) -> Hash_Table( X, Y ) -> Void;
	# remove any hash table items that do not satisfy the given
	# predicate.


     copy:  Hash_Table( X, Y ) -> Hash_Table( X, Y );
	#  Create a copy of a hash table 

     bucket_sizes:  Hash_Table( X, Y ) -> List( Int );
	# returns a list of the sizes of the various buckets.  This is to
	# allow users to gauge the quality of their hashing function.


  }; #  Hash_Table 


## COPYRIGHT (c) 1993 by AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
