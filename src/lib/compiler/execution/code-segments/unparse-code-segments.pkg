## unparse-code-segments.pkg

# Compiled by:
#     src/lib/compiler/execution/execute.make6


package unparse_code_segments: Unparse_Code_Segments {		# Unparse_Code_Segments	is from   src/lib/compiler/execution/code-segments/unparse-code-segments.api

    package pp = prettyprint;					# prettyprint		is from   src/lib/prettyprint/src/prettyprint.pkg
    include pp;

    fun unparse_code_segments  pps   code_segments		# "pps" == "prettyprint_stream"
	=
	{   code_segments
		->
		{ c0, cn, data };

								# unt8_vector		is from   src/lib/std/src/unt8-vector.pkg
								# code_segments		is from   src/lib/compiler/execution/code-segments/code-segments.pkg
								# file			is from   src/lib/std/src/unix/file.pkg

	    cn_len   =  list::length code_segments.cn;
	    data_len =  unt8_vector::length code_segments.data;
	    c0_entrypoint = code_segments::entrypoint c0;

	    c0_bytes     = code_segments::bytes c0;
	    c0_bytes_len = rw_unt8_vector::length  c0_bytes;

	    pp::newline pps;
	    pp::newline pps;
            pp::string pps "code_segments listing: ";
            begin_indented_vertical_box  pps  (BOX_RELATIVE 4);		pp::newline pps;		pp::newline pps;
            pp::string pps ("code_segments.cn is " + (int::to_string cn_len) + " segments long");	pp::newline pps;
            pp::string pps ("code_segments.data is " + (int::to_string data_len) + " bytes long");	pp::newline pps;
            pp::string pps ("code_segments zero entrypoint is " + (int::to_string c0_entrypoint));	pp::newline pps;
            pp::string pps ("code_segments zero vector length is " + (int::to_string c0_bytes_len));
            end_box pps;
	    pp::newline pps;	    pp::newline pps;	    pp::newline pps;	    pp::newline pps;

            pp::string pps ("code segments vector zero hex dump: ");
            begin_indented_vertical_box  pps  (BOX_RELATIVE 4);	pp::newline pps;

            loop 0
	    where
		fun loop i
		    =
		    if   (i < c0_bytes_len)
		        
			 if   (i % 32 == 0)
			     
			      address = sfprintf::sprintf' "%04x: " [ sfprintf::INT i ];

			      pp::newline pps;
			      pp::string pps address;
			 fi;

			 byte =  rw_unt8_vector::get (c0_bytes, i);
			 byte_as_hex = sfprintf::sprintf' " %02x" [ sfprintf::UNT8 byte ];

			 pp::string pps byte_as_hex;

			 loop (i + 1);
		    fi;
	    end;
            end_box pps;

	    pp::newline pps;
	    pp::newline pps;

	    c0_disassembly =  x86_disassembler::disassemble c0_bytes;

	};
				    # sfprintf		is from   src/lib/src/sfprintf.pkg
				    # x86_disassembler	is from   src/lib/src/x86-disassembler.pkg
};


## Code by Jeff Prothero: Copyright (c) 2010,
## released under Gnu Public Licence version 3.
