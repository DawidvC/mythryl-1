## lowcode-control.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/control.make6



###         "One man's constant is another man's variable."
###
###                               -- Alan Perlis



api Lowcode_Control {

    registry:  control_index::Control_Index;
    prefix:    String;
    priority:  control::Priority;

    Cpu_Time = { gc: time::Time, usr: time::Time, sys: time::Time };

    lowcode:         Ref( Bool );                     #  use the lowcode optimizer? 
    lowcode_phases:  Ref(  List(  String ) );         #  the optimization phases 
    debug_stream:    Ref( file::Output_Stream );   #  Debugging output goes here 

    Set( X ) = control_set::Control_Set( X, Ref(X)  ); 

    # Bools and counters:
    # 
    counters:     Set(  Int );
    ints:         Set(  Int );
    bools:        Set(  Bool );
    reals:        Set(  Float );
    strings:      Set(  String );
    string_lists:  Set(  List(  String ) );
    timings:      Set(  Cpu_Time );

    make_counter:     (String, String) -> Ref( Int );
    make_int:         (String, String) -> Ref( Int );
    make_bool:        (String, String) -> Ref( Bool );
    make_real:        (String, String) -> Ref( Float );
    make_string:      (String, String) -> Ref( String );
    make_string_list:  (String, String) -> Ref( List( String ) );
    make_timing:      (String, String) -> Ref( Cpu_Time );

    counter:       String -> Ref( Int );
    int:           String -> Ref( Int );
    bool:          String -> Ref( Bool );
    real:          String -> Ref( Float );
    string:        String -> Ref( String );
    string_list:    String -> Ref( List( String ) );
    timing:        String -> Ref( Cpu_Time );

    # The following is the old interface.  Its use is deprecated
    # since it does not provide documentation strings. */
    #
    get_counter:      String -> Ref( Int );
    get_int:	      String -> Ref( Int );
    get_bool:         String -> Ref( Bool );
    get_real:         String -> Ref( Float );
    get_string:       String -> Ref( String );
    get_string_list:  String -> Ref( List( String ) );
    get_timing:       String -> Ref( Cpu_Time );

};

package low_code_control: (weak)  Lowcode_Control {		# Lowcode_Control	is from   src/lib/compiler/lower/control/lowcode-control.pkg

    priority  = [10, 3];
    obscurity = 3;
    prefix    = "lowcode";

    registry
        =
        control_index::make { help => "LOWCODE" };

    Cpu_Time
	=
        { gc:  time::Time,
          usr: time::Time,
          sys: time::Time
        };

    Set( X )
	=
        control_set::Control_Set( X, Ref(X) ); 

    counters      = control_set::make () : Set(  Int );
    ints          = control_set::make () : Set(  Int );
    bools         = control_set::make () : Set(  Bool );
    reals         = control_set::make () : Set(  Float );
    strings       = control_set::make () : Set(  String );
    string_lists  = control_set::make () : Set(  List(  String ) );
    timings       = control_set::make () : Set( Cpu_Time );

    stipulate

	timing
	    =
	    { type_name   =>  "timing",
	      from_string =>  fn _ =  (NULL:  Null_Or( Cpu_Time )),
	      to_string   =>  fn _ =  "<timing>"
            };

	fun no x
            =
            NULL;

	fun yes x
	    =
	    THE (control_utilities::dictionary_name::to_upper "LOWCODE_" (control::name x));

	nextpri = REF 0;

	fun make (set, convert, fallback, en) (stem, descr)
	    =
	    case (control_set::find (set, quickstring::from_string stem))
              
		 THE { control, info => cell }
                     =>
                     cell;

	         NULL
		     =>
		     {  cell = REF fallback;
			p = *nextpri;

			control
                            =
                            control::control
                                { name      =>  stem,
				  pri       =>  [p],
				  obscurity,
				  help      =>  descr,
				  control   =>  cell
                                };

			nextpri := p + 1;

			control_index::note_control
                            registry
			    {
                              control         =>  control::string_control convert control,
			      dictionary_name =>  en control
                            };

			control_set::set (set, control, cell);
			cell;
		    };
	    esac;

    herein

        fun make_counter x =   make (counters, control_utilities::convert::int,    0,     no ) x;
	fun make_int     x =   make (ints,     control_utilities::convert::int,    0,     yes) x;
	fun make_bool    x =   make (bools,    control_utilities::convert::bool,   FALSE, yes) x;
	fun make_real    x =   make (reals,    control_utilities::convert::real,   0.0,   yes) x;
	fun make_string  x =   make (strings,  control_utilities::convert::string, "",    yes) x;

	fun make_string_list x
            =
	    make (string_lists, control_utilities::convert::string_list, [], yes) x;

	fun make_timing x
            =
            make (
                timings,
                timing,
                { gc =>time::zero_time,
		  usr=>time::zero_time,
		  sys=>time::zero_time
		},
                no
            )
            x;

	lowcode        =  make_bool ("lowcode", "?");
	lowcode_phases =  make_string_list ("phases", "LOWCODE phases");
	debug_stream   =  REF file::stdout;

    end;

    stipulate

	fun find set stem
            =
	    case (control_set::find (set, quickstring::from_string stem))
	      
	         THE { control, info => cell }
                     =>
                     cell;

	        NULL =>
                     raise exception FAIL ("controls::lowcode: no such control: " + stem);
            esac;
    herein

        counter = find counters;
	int     = find ints;
	bool    = find bools;
	real    = find reals;
	string  = find strings;
	timing  = find timings;

	string_list = find string_lists;

    end;

    stipulate

	fun old_for make_foo s
            =
            make_foo (s, s + " setting");
    herein

        get_counter = old_for make_counter;
        get_int     = old_for make_int;
        get_bool    = old_for make_bool;
        get_real    = old_for make_real;
        get_string  = old_for make_string;
        get_timing  = old_for make_timing;

        get_string_list = old_for make_string_list;
    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 2002 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
