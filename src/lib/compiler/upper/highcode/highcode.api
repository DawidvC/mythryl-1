## highcode.api 
#
# CONTEXT:
#
#     The Mythryl compiler code representations used are, in order:
#
#     1)  Raw Syntax is the initial front-end code representation.
#     2)  Deep Syntax is the second and final front-end code representation.
#     3)  Polylambda is the first backend code representation, used only transitionally.
#     4)  A-Normal  is the second backend code representation, and the first used for optimization.
#     5)  Fate-Passing-Style is the third and chief backend upper-half code representation.
#     6)  Codetree is the chief backend lower-half code representation.
#     7)  X86 instruction format (or equivalent for other target machines) -- an abstract tree format.
#     8)  X86 machine language   (or equivalent for other target machines) -- absolute binary code.
#
# For higher-level context, read 
#
#     src/lib/compiler/README
#
# For authoritative background see Zhong Shao's PhD thesis:
#
#     Compiling Standard ML for Efficient Execution on Modern Machines
#     http://flint.cs.yale.edu/flint/publications/zsh-thesis.html
#
# Here and in
#
#     src/lib/compiler/upper/highcode/highcode-type.api
#
# we implement the client-code interface to the
# hash-consed intermediate-code representation
# implemented in
#
#     src/lib/compiler/upper/highcode/highcode-guts.pkg
#
# This file is part of the compiler back-end
# upper-half's machine-independent optimizer,
# "highcode", derived from the Yale FLINT
# project:  http://flint.cs.yale.edu/
#
# In FPS return addresses are made into explicit "fate"
# arguments to functions (hence the name).
#
# This has the disadvantage of losing the original
# explicit function-call hierarchy, but the advantage
# of exposing the return-address machinery for
# optimization and register allocation &tc.
#
# The deep syntax trees produced by the front end
# are first translated by
#
#     src/lib/compiler/upper/translate/translate-deep-syntax-to-polylambda.pkg
#
# into A-Normal Form, where various optimziations are
# performed, for which see the comments in:
#
#     src/lib/compiler/upper/anormal/anormal.api
#
# After that, code is translated from A-Normal Form to FPS by:
#
#    src/lib/compiler/upper/fps/translate-anormal-to-fps-g.pkg
#
# Here we define a relatively abstract FPS interface
# for use by FPS client code.   The full internal implementation
# datastructure, and core code operating on it, are defined in
#
#     src/lib/compiler/upper/highcode/highcode-guts.api
#     src/lib/compiler/upper/highcode/highcode-guts.pkg
#
# Also see
#
#     src/lib/compiler/upper/fps/fate-passing-style.api
#
# The selection and ordering of FPS optimization passes is
# performed by
#
#     src/lib/compiler/upper/main/backend-g.pkg
#
# The FPS code transformation passes are:
#
#     fps_preoptimization_transform        src/lib/compiler/upper/fps/fps-preoptimization-transform-g.pkg
#     fps_optional_optimizations           src/lib/compiler/upper/fps-optimize/fps-optional-optimizations-g.pkg
#
#     split_off_fps_literals               src/lib/compiler/upper/main/fps-literals.pkg
#     literal_expression_to_bytevector     "                                     "
#
#     closure                              src/lib/compiler/upper/closures/closure-g.pkg
#     globalfix                            src/lib/compiler/upper/closures/globalfix.pkg
#     spill                                src/lib/compiler/codegen/compile-fps/spill-g.pkg
#     fps-split                            src/lib/compiler/upper/closures/fps-split-g.pkg
#     heap limit checking                  src/lib/compiler/codegen/compile-fps/limit.pkg
#     ... (to be completed)
#
#
#  
# The above 'fps_optional_optimizations' meta-pass applies
# the following FPS optimization subpasses
#
#     eta reduction  src/lib/compiler/upper/fps-optimize/eta.pkg
#	             src/lib/compiler/upper/fps-optimize/uncurry-g.pkg
#	             src/lib/compiler/upper/fps-optimize/split-known-escaping-functions-g.pkg
#     unrolling      src/lib/compiler/upper/fps-optimize/fps-optional-optimizations-g.pkg (fn 'cycle')
#	             src/lib/compiler/upper/fps-optimize/contract-g.pkg
#	             src/lib/compiler/upper/fps-optimize/flatten-g.pkg
#	             src/lib/compiler/upper/fps-optimize/do-fn-inlining-g.pkg
#     printing       src/lib/compiler/upper/fps/prettyprint-fps.pkg
    
# Compiled by:
#     src/lib/compiler/core.make6





# This interface hides the implementation details of FPS Highcode_Kind, Highcode_Type_Constructor, and 
# Highcode_Type defined inside highcode_guts. For each entity, we provide a series of 
# constructor funtions, deconstructor functions, predicate functions,
# and other utility functions.
#
# The client interface to highcode functionality is defined in
#     src/lib/compiler/upper/highcode/highcode.api
#     src/lib/compiler/upper/highcode/highcode.pkg
# A types-only version is available in
#     src/lib/compiler/upper/highcode/highcode-type.api
#     src/lib/compiler/upper/highcode/highcode-type.pkg
#
# This interface should only refer to packages such as debruijn_index, highcode_guts, 
# highcode_data_representation, Symbol, and lty_basic (indirectly highcode_type).




###                "Have you heard about the software developer's wife?
###                 She died a virgin, because all he did was sit on
###                 the bed telling her how good it was going to be."




###                        "Pure mathematics is, in its way,
###                         the poetry of logical ideas."
###
###                                       -- Albert Einstein



api Highcode {

    # We define Highcode_Kind, Highcode_Type_Constructor,
    # and Highcode_Type elsewhere:
    #
    #     src/lib/compiler/upper/highcode/highcode-type.api
    #     src/lib/compiler/upper/highcode/highcode-type.pkg
    #
    # The idea is that those two files should change
    # very rarely while the rest of the interface for
    # highcode may change often. The client should
    # refer to highcode_type if using only types names
    # and to highcode otherwise.

    # The internal implementation of Highcode_Kind,
    # Highcode_Type_Constructor, and Highcode_Type are in:
    #
    #     src/lib/compiler/upper/highcode/highcode-guts.api
    #     src/lib/compiler/upper/highcode/highcode-guts.pkg
    #
    # Client code should not need to understand
    # what is going on inside highcode_guts.


    # The definitions of Highcode_Kind,
    # Highcode_Type_Constructor, and Highcode_Type:
    #
    include Highcode_Type;		# Highcode_Type		is from   src/lib/compiler/upper/highcode/highcode-type.api

    # Make a type variable. Not currently used:
    #
    make_type_variable:  Void -> Highcode_Variable; 

    # utility functions for constructing tkinds 
    tkc_int:     Int -> Highcode_Kind;
    tkc_arg:     Int -> List( Highcode_Kind );

    # Primitives and utility functions for fflags and rflags 
    ffc_plambda: Fn_Flag;
    ffc_rrhighcode: Fn_Flag;
    ffc_fspec:   (Fn_Flag, ((Bool, Bool))) -> Fn_Flag;
    ffd_fspec:   Fn_Flag -> (Bool, Bool);

    # Primitive lambda tycs 
    tcc_int:     Highcode_Type_Constructor;
    tcc_int32:   Highcode_Type_Constructor;
    tcc_real:    Highcode_Type_Constructor;
    tcc_string:  Highcode_Type_Constructor;
    tcc_exn:     Highcode_Type_Constructor;
    tcc_void:    Highcode_Type_Constructor;
    tcc_unit:    Highcode_Type_Constructor;
    tcc_bool:    Highcode_Type_Constructor;

    tcc_tv:      Int -> Highcode_Type_Constructor;
    tcc_ref:     Highcode_Type_Constructor -> Highcode_Type_Constructor;
    tcc_array:   Highcode_Type_Constructor -> Highcode_Type_Constructor;
    tcc_vector:  Highcode_Type_Constructor -> Highcode_Type_Constructor;
    tcc_etag:    Highcode_Type_Constructor -> Highcode_Type_Constructor;

    # Primitive lambda ltys 
    ltc_int:     Highcode_Type;
    ltc_int32:   Highcode_Type;
    ltc_real:    Highcode_Type;
    ltc_string:  Highcode_Type;
    ltc_exn:     Highcode_Type;
    ltc_void:    Highcode_Type;
    ltc_unit:    Highcode_Type;
    ltc_bool:    Highcode_Type;

    ltc_tv:      Int -> Highcode_Type;
    ltc_ref:     Highcode_Type -> Highcode_Type;
    ltc_array:   Highcode_Type -> Highcode_Type;
    ltc_vector:  Highcode_Type -> Highcode_Type;
    ltc_etag:    Highcode_Type -> Highcode_Type;

    ltc_top:     Highcode_Type;    #  used in a dirty hack in prim.sml 

    # Testing equivalence of
    # tkinds, tycs, ltys, fflags, and rflags 
    #
    type_kinds_are_equivalent:      (Highcode_Kind, Highcode_Kind) -> Bool;
    type_constructors_are_equivalent:      (Highcode_Type_Constructor, Highcode_Type_Constructor) -> Bool;
    lambda_types_are_equivalent:      (Highcode_Type, Highcode_Type) -> Bool;
    function_flags_are_equivalent:      (Fn_Flag, Fn_Flag) -> Bool;
    record_flags_are_equivalent:      (Record_Flag, Record_Flag) -> Bool;

    # Testing the equivalence for tycs
    # and ltys with relaxed constraints:
    #
    type_constructors_are_approximately_equivalent:    (Highcode_Type_Constructor, Highcode_Type_Constructor) -> Bool;
    lambda_types_are_approximately_equivalent:    (Highcode_Type, Highcode_Type) -> Bool;

    # Prettyprinting of tkinds, tycs, and ltys:
    #
    tk_print:    Highcode_Kind -> String;
    tc_print:    Highcode_Type_Constructor -> String;
    lt_print:    Highcode_Type -> String;

    # Adjusting an Highcode_Type or Highcode_Type_Constructor
    # from one depth to another:
    #
    lt_adj:      (Highcode_Type, Depth, Depth) -> Highcode_Type;
    tc_adj:      (Highcode_Type_Constructor, Depth, Depth) -> Highcode_Type_Constructor;

    lt_adj_k:    (Highcode_Type, Depth, Depth, Int) -> Highcode_Type;  
    tc_adj_k:    (Highcode_Type_Constructor, Depth, Depth, Int) -> Highcode_Type_Constructor;  

    # Finding out the depth for a Type's
    # innermost-bound free variables:
    #
    type_constructor_depth_of_innermost_named_variable:  (Highcode_Type_Constructor, Depth) -> Depth;
    type_constructors_depth_of_innermost_named_variable: (List( Highcode_Type_Constructor ), Depth) -> Depth;

    # Automatically flattening the
    # argument or the result type:
    #
    lt_autoflat:  Highcode_Type -> (Bool, List( Highcode_Type ), Bool);

    # Testing if a Highcode_Type_Constructor is a unknown constructor:
    #
    type_constructor_is_unknown:  Highcode_Type_Constructor -> Bool;

    # Utility functions on type_kind_dictionary;
    #
    exception TYPE_KIND_UNBOUND;
    #
    Highcode_Kind_Dictionary;
    empty_type_kind_dictionary:       Highcode_Kind_Dictionary;
    #
    get_in_type_kind_dictionary:     (Highcode_Kind_Dictionary, Int, Int) -> Highcode_Kind;
    insert_in_type_kind_dictionary:  (Highcode_Kind_Dictionary, List( Highcode_Kind )) -> Highcode_Kind_Dictionary;

    # Utility functions on type_constructor_dictionary:
    #
    exception TC_UNBOUND;
    Type_Constructor_Dictionary = highcode_guts::Type_Constructor_Dictionary;
    init_type_constructor_dictionary:  Type_Constructor_Dictionary;
    insert_type_constructor:  (Type_Constructor_Dictionary, ( (Null_Or( List( Highcode_Type_Constructor ) ), Int))) -> Type_Constructor_Dictionary;

    # The lty_env maps Lambda_Variable
    # to their lambda_types.  Notice
    # Highcode_Type is depth-dependent:
    #
    Lty_Env;
    exception LT_UNBOUND;
    init_lty_dictionary:  Lty_Env;
    lt_lookup:  (Lty_Env, highcode_var::Highcode_Variable, Depth) -> Highcode_Type;
    lt_insert:  (Lty_Env, highcode_var::Highcode_Variable, Highcode_Type, Depth) -> Lty_Env;



    # Instantiating a polymorphic type
    # or a higher-order constructor:
    #
    instantiate_polymorphic_lambda_or_higher_order_constructor_type:      (Highcode_Type, List( Highcode_Type_Constructor )) -> List( Highcode_Type );
    protected_instantiation_of_polymorphic_lambda_or_higher_order_constructor_type:    (Highcode_Type, List( Highcode_Type_Constructor )) -> Highcode_Type;

    exception TK_TYPE_CONSTRUCTOR_CHECK;
    exception LTY_APP_CHECK;

    ls_inst_check_generic:  Void -> (Highcode_Type, List( Highcode_Type_Constructor ), Highcode_Kind_Dictionary) -> List( Highcode_Type );

    # Substitution of named type variables:
    # ** CLEAN THIS UP **		XXX BUGGO FIXME
    #
    tc_nvar_elim_fn:  Void -> ((Highcode_Variable, debruijn_index::Depth) -> Null_Or( Highcode_Type_Constructor ) ) 
			       -> debruijn_index::Depth -> Highcode_Type_Constructor -> Highcode_Type_Constructor;

    lt_nvar_elim_fn:  Void -> ((Highcode_Variable, debruijn_index::Depth) -> Null_Or( Highcode_Type_Constructor ) ) 
			       -> debruijn_index::Depth -> Highcode_Type -> Highcode_Type;

    # !! BEWARE !!
    # The `subst' argument is assumed to be sorted with increasing tvars:
    #
    tc_nvar_subst_fn:  Void -> List ((Highcode_Variable, Highcode_Type_Constructor)) -> Highcode_Type_Constructor -> Highcode_Type_Constructor;
    lt_nvar_subst_fn:  Void -> List ((Highcode_Variable, Highcode_Type_Constructor)) -> Highcode_Type -> Highcode_Type;

    tc_nvar_cvt_fn:  Void -> List  ((Highcode_Variable, Int))
			      -> debruijn_index::Depth -> Highcode_Type_Constructor -> Highcode_Type_Constructor;

    lt_nvar_cvt_fn:  Void -> List  ((Highcode_Variable, Int))
			      -> debruijn_index::Depth -> Highcode_Type -> Highcode_Type;

    # The equivalent to ltc_poly for the nvar case:
    #
    lt_nvpoly:  (List ((Highcode_Variable, Highcode_Kind)), List( Highcode_Type )) -> Highcode_Type;

    # Special adjustment functions used during type specializations:
    #
    lt_sp_adj:  (List( Highcode_Kind ), Highcode_Type, List( Highcode_Type_Constructor ), Int, Int) -> Highcode_Type;
    tc_sp_adj:  (List( Highcode_Kind ), Highcode_Type_Constructor, List( Highcode_Type_Constructor ), Int, Int) -> Highcode_Type_Constructor;
    lt_sp_sink: (List( Highcode_Kind ), Highcode_Type, Depth, Depth) -> Highcode_Type;
    tc_sp_sink: (List( Highcode_Kind ), Highcode_Type_Constructor, Depth, Depth) -> Highcode_Type_Constructor;

    # Utility functions used in FPS only, should go away soon !
    #
    lt_iscont:    Highcode_Type -> Bool;
    ltw_iscont:   (Highcode_Type, (List( Highcode_Type ) -> X), (List( Highcode_Type_Constructor ) -> X), (Highcode_Type -> X)) -> X;

    # Other utility functions --- requires clean up!
    #
    lt_select:  (Highcode_Type, Int) -> Highcode_Type;
    lt_swap:  Highcode_Type -> Highcode_Type;

    # Functions that manipulate the highcode function and record types:
    #
    ltc_fkfun:    (anormal::Function_Kind, List( Highcode_Type ), List( Highcode_Type )) -> Highcode_Type;
    ltd_fkfun:    Highcode_Type -> (List( Highcode_Type ), List( Highcode_Type )); #  function_kind omitted 

    ltc_rkind:    (anormal::Record_Kind, List( Highcode_Type )) -> Highcode_Type;
    ltd_rkind:    (Highcode_Type, Int) -> Highcode_Type;

    # Given a Highcode_Type_Constructor, select the appropriate update primitive_operation:
    #
    tc_upd_prim:  Highcode_Type_Constructor -> highcode_primitive_op::Primitive_Operation;

    # Translating the Highcode_Kind into the corresponding type:
    #
    tk_lty:       Highcode_Kind -> Highcode_Type;

    #  twrap type translation generator,
    # used by wrapping::wrapping:
    #
    twrap_fn:    Bool -> (((Highcode_Type_Constructor -> Highcode_Type_Constructor), (Highcode_Type -> Highcode_Type) ,
			      (Highcode_Type_Constructor -> Highcode_Type_Constructor), (Highcode_Type -> Highcode_Type), (Void -> Void)));

    # tnarrow type translation generator,
    # used by src/lib/compiler/upper/reps/reify.pkg:
    #
    tnarrow_fn:  Void -> ( Highcode_Type_Constructor -> Highcode_Type_Constructor,
                           Highcode_Type   -> Highcode_Type,
                           Void          -> Void
                         );

}; #  Api Highcode 


## Copyright (c) 1998 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
