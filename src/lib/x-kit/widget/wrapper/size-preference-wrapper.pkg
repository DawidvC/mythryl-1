## size-preference-wrapper.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6



# Widget wrappers to constrain widget's shape.


###           "Glory is fleeting, but obscurity is forever."
###
###                            -- Napoleon Bonaparte

stipulate
    include threadkit;							# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package wg =  widget;						# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
    package xg =  xgeometry;						# xgeometry			is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xi =  xinput;						# xinput			is from   src/lib/x-kit/xclient/xinput.pkg
herein

    package size_preference_wrapper: (weak)  Size_Preference_Wrapper {	# Size_Preference_Wrapper	is from   src/lib/x-kit/widget/composite/size-preference-wrapper.api

	stipulate 

	    fun do_shape
		    shape_fn		# make_tight_sized_preference_wrapper() or make_loose_sized_preference_wrapper()
		    widget
		=
		shape_fn (widget,  wg::preferred_size  widget);

	    fun dummy x = x;

	herein

	    fun make_size_preference_wrapper wrapfn
                {
                  child,
                  size_preference_fn => bounds,
                  resize_fn => resize
                }
		=
		{   size_preference_thunk_of
			=
			wg::size_preference_thunk_of  child;

		    fun realize { kidplug =>  xi::KIDPLUG { from_mouse', from_keyboard', from_other', to_mom }, window, size }
			=
			{   oslot = make_mailslot ();

			    fun out_mailop slot x
				=
				give' (slot, x);

			    ckidplug =  xi::KIDPLUG { from_keyboard', from_mouse', from_other', to_mom => out_mailop oslot };

			    childco = wrapfn (take' oslot);

			    fun loop ()
				=
				loop (
				    case (do_mailop childco)
					#
					xi::REQ_DESTRUCTION
					    =>
					    do_mailop  (to_mom  xi::REQ_DESTRUCTION);

					xi::REQ_RESIZE
					    => 
					    if (resize  size_preference_thunk_of)
						#
						do_mailop  (to_mom  xi::REQ_RESIZE);
					    fi;
				    esac
				  );

			    make_thread "shape" loop;

			    wg::realize_fn  child  { kidplug=>ckidplug, window, size };
			};

		    wg::make_widget
		      {
			root_window =>  wg::root_window_of  child,

			args =>  wg::args_fn  child,

			size_preference_thunk_of =>   fn () = bounds size_preference_thunk_of,

			realize
		      };
		};


	    fun make_tight_sized_preference_wrapper (child, xg::SIZE { wide, high } )
		=
		{   bounds = wg::make_tight_size_preference (wide, high);

		    make_size_preference_wrapper  dummy
		      {
			child,
			size_preference_fn =>  fn _ = bounds, 
			resize_fn          =>  fn _ = FALSE
		      };
		};


	    fun make_loose_sized_preference_wrapper (child, xg::SIZE { wide, high } )
		=
		{   col_preference  =  wg::INT_PREFERENCE {  start_at => 0,  step_by => 1,  min_steps => 1,  ideal_steps => wide,  max_steps => NULL  };
		    row_preference  =  wg::INT_PREFERENCE {  start_at => 0,  step_by => 1,  min_steps => 1,  ideal_steps => high,  max_steps => NULL  };

		    fun size_preference_fn  _
			=
			{ col_preference,
			  row_preference
			};

		    make_size_preference_wrapper  dummy
			{
			  child,
			  size_preference_fn,
			  resize_fn =>   fn _ = TRUE
			};
		};

	    make_tight_size_preference_wrapper =  do_shape  make_tight_sized_preference_wrapper;
	    make_loose_size_preference_wrapper =  do_shape  make_loose_sized_preference_wrapper;

	    make_size_preference_wrapper =  make_size_preference_wrapper  wg::wrap_queue;

	end;					# stipulate
    };						# package size_preference_wrapper

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1991, 1992 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
