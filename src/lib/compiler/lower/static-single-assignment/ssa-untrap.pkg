
# This module removes unnecessary overflow trapping arithmetic instructions.
# 
# There are two types of trapping arithmetic instructions generated in all the 
# architectures.  The first type of architectures have arithmetic instructions
# that traps for overflow in one single instruction (PA-RISC, Alpha).  
# Other architectures have instructions that sets an overflow flag and
# require explicit tests (Sparc, x86, PowerPC).  
#
# -- Allen Leung (leunga@cs.nyu.edu)

generic package SSAUntrap (SSAInstrGen:  SSA_INSTRGEN) : SSA_OPTIMIZATION =
pkg

   package gen  = SSAInstrGen
   package ssa  = SSAInstrGen::SSA
   package control_flow_graph  = SSA::control_flow_graph
   package rtl  = SSA::RTL
   package t    = RTL::T  
   package t'   = SSA::translate_codetree_to_target_machine::T
   package g    = graph
   package a    = rw_vector

   type flowgraph = SSA::ssa

   name = "Remove Trapping Arithmetic"

   untrapped = LowCodeControl::getCounter "ssa-untrapped"

   enum interval = BOT | TOP | RANGE of Int * Int
  
   fun meet (BOT, x) = x
     | meet (x, BOT) = x
     | meet (TOP, x) = TOP
     | meet (x, TOP) = TOP
     | meet (RANGE (a, b), RANGE (c, d)) = RANGE (int::min (a, c), int::max (b, c))

   fun meets [] = BOT
     | meets (a . b) = meet (a, meets b)

   fun run (SSA as g::GRAPH ssa) =
   let my Dom as g::GRAPH dom = SSA::dom SSA
       rtlTable  = SSA::rtlTable SSA
       defsTable = SSA::defsTable SSA
       usesTable = SSA::usesTable SSA
       ssaOpTable= SSA::ssaOpTable SSA
       showOp  = SSA::showOp SSA
       showVal = SSA::showVal SSA
       my { ops, ... } = SSA::nodes SSA

       fun untrap (i, rtl, defs, uses) = 
       let fun isConst x = list::nth (uses, x) < 0 
       in  case rtl of
             t::RTL { e, ... } => untrap (i, e, defs, uses)
           | t::MOVE_INT (type, z, t::ADDT(_, t::REG(_, x), t::REG(_, y))) =>
                if isConst x or isConst y then
                  let t = t::MOVE_INT (type, z, t::ADD (type, t::REG (type, x), t::REG (type, y)))
                      codetree = 
                           Gen::translate SSA { defs=defs, uses=uses, rtl=t }
                  in  Gen::replace SSA { id=i, codetree=codetree }
                  end
                else FALSE
           | t::MOVE_INT (type, z, t::SUBT(_, t::REG(_, x), t::REG(_, y))) =>
                if isConst x or isConst y then
                  let t = t::MOVE_INT (type, z, t::SUB (type, t::REG (type, x), t::REG (type, y)))
                      codetree = 
                           Gen::translate SSA { defs=defs, uses=uses, rtl=t }
                  in  Gen::replace SSA { id=i, codetree=codetree }
                  end
                else FALSE
           | _ => FALSE
       end

       fun process i = 
       let rtl  = a::sub (rtlTable, i) 
           uses = a::sub (usesTable, i)
           defs = a::sub (defsTable, i)
       in  if untrap (i, rtl, defs, uses) then
              (untrapped := *untrapped + 1; 
               print("TRAP "$showOp i$"\n")
              )
           else ()
       end

       fun walk X = 
       let ops = a::sub (ops, X)
           fun scan [] = ()
             | scan (i . ops) = 
               let rtl = a::sub (rtlTable, i)
               in  scan ops
               end
       in  scan ops;
           apply walk (dom.next X)
       end

   in  SSA::forallNodes SSA process;
       walk (hd (dom.entries ()));
       SSA
   end

end
