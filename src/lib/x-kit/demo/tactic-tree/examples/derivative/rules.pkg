api DERIVATIVE_RULES =
api

    package f:  EXPRESSION
    
    exception Failure

    type derivative

    my additionRule:  derivative * derivative -> derivative
    my subtractionRule:  derivative * derivative -> derivative
    my productRule:  derivative * derivative * f::expression * f::expression -> derivative
    my chainRule:  derivative * derivative * string -> derivative
    my eRule:  derivative * f::expression -> derivative
    my negRule:  derivative -> derivative
    my cosRule:  f::expression -> derivative 
    my sinRule:  f::expression -> derivative
    my singleVarRule:  f::expression -> derivative 
    my constantRule:  f::expression -> derivative
    my exponentRule:  f::expression -> derivative


end


package DerivativeRules =
pkg 

    package f = Expression
    
    exception Failure

    type derivative = f::expression

    fun textualSubstitution (f::Term (f::Var y), g, x) =
	    if y == x 
		then g
	    else f::Term (f::Var y)

      | textualSubstitution (f::Times (expr1, expr2), g, x) = 
	    f::Times (textualSubstitution (expr1, g, x), textualSubstitution (expr2, g, x))
      | textualSubstitution (f::Divide (expr1, expr2), g, x) = 
	    f::Divide (textualSubstitution (expr1, g, x), textualSubstitution (expr2, g, x))
      | textualSubstitution (f::Plus (expr1, expr2), g, x) =
	    f::Plus (textualSubstitution (expr1, g, x), textualSubstitution (expr2, g, x))
      | textualSubstitution (f::Minus (expr1, expr2), g, x) =
	    f::Minus (textualSubstitution (expr1, g, x), textualSubstitution (expr2, g, x))
      | textualSubstitution (f::Exp (expr1, expr2), g, x) =
	    f::Exp (textualSubstitution (expr1, g, x), textualSubstitution (expr2, g, x))
      | textualSubstitution (f::E expr, g, x) = f::E (textualSubstitution (expr, g, x))
      | textualSubstitution (f::Sin expr, g, x) = f::Sin (textualSubstitution (expr, g, x))
      | textualSubstitution (f::Cos expr, g, x) = f::Cos (textualSubstitution (expr, g, x))
      | textualSubstitution (f::Term (f::Num n), g, x) = f::Term (f::Num n)
		 	       
	    
    fun additionRule (f', g') = f::Plus (f', g')
    fun subtractionRule (f', g') = f::Minus (f', g')
    fun productRule (f', g', f, g) = f::Plus (f::Times (f', g), f::Times (g', f))
    fun chainRule (f_of_x', g', x) = f::Times (textualSubstitution (f_of_x', g', x), g')
    fun eRule (f', f::E f) = f::Times (f', f::E f)
    fun exponentRule (f::Exp (expr1, expr2)) = 
	(case (expr1, expr2) of
	     (f::Term (f::Var x), f::Term (f::Num n)) =>
		 if n == 1
		      then f::Term (f::Num 1)
		  else 
		      if n == 2
			  then f::Times (f::Term (f::Num 2), f::Term (f::Var x))
		      else f::Times (f::Term (f::Num n), f::Exp (f::Term (f::Var x), f::Term (f::Num (n - 1)))))
      | exponentRule _ = raise Failure
    fun cosRule (f::Cos (f::Term (f::Var x))) = f::Sin (f::Term (f::Var x))
      | cosRule (f::Cos (f::Term (f::Num n))) = f::Term (f::Num 0)
      | cosRule _ = raise Failure
    fun sinRule (f::Sin (f::Term (f::Var x)))= f::Neg (f::Cos (f::Term (f::Var x)))
      | sinRule (f::Sin (f::Term (f::Num n))) = f::Term (f::Num 0)
      | sinRule _ = raise Failure
    fun singleVarRule (f::Term (f::Var x)) = f::Term (f::Num 1)
      | singleVarRule _ = raise Failure
    fun constantRule expr = f::Term (f::Num 0)
    fun negRule f' = f::Neg f'

end




