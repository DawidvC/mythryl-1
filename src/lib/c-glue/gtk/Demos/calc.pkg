#  A very ugly-looking reverse polish notation calculator 
package Calc:  api
   my calc:  Void -> Void
   my main:  String * List( String ) -> Int
end
{
   use Gtk gtk_enums GtkGadgets 
   infix <- <~

   #  A calculator abstract type which controls a bunch of displays 
   fun calculator displays = 
   let top     = REF 0.0  #  top entry of the stack 
       stack   = REF []   #  other entries 
       decimal = REF 0    #  Current decimal places 

       enum state = RESULT         #  top entry is a result 
                      | ENTER_DIGIT    #  entering a digit 
                      | ENTER_DECIMAL  #  entering a decimal 
       state = REF ENTER_DIGIT
      
       fun shows (first, _,[]) = ()
         | shows (first,[], d . ds) = (d <~ set::text ""; shows (FALSE,[], ds))
         | shows (first, n . ns, d . ds) = 
       let  num = if first then 
                         float::fmt (string_conversion::FIX (THE *decimal)) n
                      else float::to_string n
           num = if first and
                        *state = ENTER_DECIMAL and *decimal = 0 then
                         num$"." else num
       in  
           d <~ set::text num;
           shows (FALSE, ns, ds)
       end

       fun show () = shows (TRUE,*top . *stack, displays)

       fun set n = (top := n; show())
                      
       fun reset _ = (decimal := 0; state := ENTER_DIGIT; set (0.0))
       fun clear _ = (stack := []; reset())
       fun new ()   = (stack := *top . *stack; reset())
       fun enter x = 
           (case *state of
             RESULT        => (new())
           | _             => (state := RESULT; enter x)
           )

       fun dot x = 
           case *state of 
             ENTER_DECIMAL => ()
           | ENTER_DIGIT   => (state := ENTER_DECIMAL; show())
           | RESULT        => (new(); dot x) 
       fun digit i x = 
           case *state of
             ENTER_DIGIT => set(*top * 10.0 + float::from_int i)
           | ENTER_DECIMAL => 
              (decimal := *decimal + 1;
               set(*top + float::from_int i / 
                          (math::pow (10.0, float::from_int(*decimal))))
              )
           | RESULT        => (new(); digit i x)
       fun unary f _ = (set (f(*top)); state := RESULT)
       fun binary f _ =
           case *stack of
             [] => print "stack is empty\n"
           | (h . t) => (stack := t; set (f(h,*top)); state := RESULT)
       fun pop x = binary #2 x

   in  set (0.0);
       { enter  = enter,
        pop    = pop,
        clear  = clear,
        digit  = digit,
        unary  = unary,
        binary = binary,
        dot    = dot
       }
   end

   fun calc () = 
   let gtk_init::f []
       fun disp ()    = @@@.l "" [set::justify GTK_JUSTIFY_RIGHT]
       display0  = disp()
       display1  = disp()
       display2  = disp()
       calc      = calculator [display0, display1, display2]
       fun digit i   = @@@.b (int::to_string i) [on::clicked (calc.digit i)]
       fun func x f  = @@@.b x       [on::clicked (calc.binary f)]
       fun unary x f = @@@.b x       [on::clicked (calc.unary f)]
       clear     = @@@.b "C"     [on::clicked calc.clear]
       pop       = @@@.b "pop"   [on::clicked calc.pop]
       enter     = @@@.b "enter" [on::clicked calc.enter]
       dot       = @@@.b "."     [on::clicked calc.dot]
       fun row bs    = @@@.hbox (FALSE, 2) (set::homogeneous TRUE . map +.add bs)
   in  @@@.window
         [set::title "RPN Calculator",
          set::default_size (150, 150),
          on::destroy gtk_main_quit::f,
          +.vbox (FALSE, 2) 
             [#  set::homogeneous TRUE, 
              #  the calculator display 
              +.add (@@@.vbox (TRUE, 0) (map +.add [display0, display1, display2])), 
              #  now come the buttons 
              +.add (row [digit 9, digit 8, digit 7, func "+" float.+]),
              +.add (row [digit 6, digit 5, digit 4, func "-" float.-]),
              +.add (row [digit 3, digit 2, digit 1, func "*" float.*]),
              +.add (row [clear,   digit 0, pop,     func "/" float./]),
              +.add (row [enter,   dot,     unary "neg" float.~, 
                         @@@.b "exit" [on::clicked gtk_main_quit::f]])
             ],
          show_all
         ];
       gtk_main::f()
   end 

   fun main (prog, argv) = (calc(); 0)
};

main = Calc::main


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
