## answer.pkg

# Compiled by:
#     src/lib/x-kit/tut/add/add.make6

stipulate
    include threadkit;					# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package cv =  canvas;				# canvas			is from   src/lib/x-kit/widget/leaf/canvas.pkg
    package wg =  widget;				# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
    package lw =  line_of_widgets;			# line_of_widgets		is from   src/lib/x-kit/widget/layout/line-of-widgets.pkg
    package sz =  size_preference_wrapper;		# size_preference_wrapper	is from   src/lib/x-kit/widget/wrapper/size-preference-wrapper.pkg
    package pb =  pushbuttons;				# pushbuttons			is from   src/lib/x-kit/widget/leaf/pushbuttons.pkg
    package tw =  topwindow;				# topwindow			is from   src/lib/x-kit/widget/wrapper/size-preference-wrapper.pkg
    #
    package xc =  xcore;				# xcore				is from   src/lib/x-kit/xclient/xcore.pkg
    package xd =  xdraw;				# xdraw				is from   src/lib/x-kit/xclient/xdraw.pkg
    package xf =  xfont;				# xfont				is from   src/lib/x-kit/xclient/xfont.pkg
    package xg =  xgeometry;				# xgeometry			is from   src/lib/x-kit/xclient/xgeometry.pkg
    package xi =  xinput;				# xinput			is from   src/lib/x-kit/xclient/xinput.pkg
herein

    package answer:  Answer {				# Answer			is from   src/lib/x-kit/tut/add/answer.api

	debug_tracing =  tracing::make_trace_tree_leaf { parent => xtracing::xkit_tracing, name => "answer::debug_tracing" };
	print_if      =  tracing::print_if;

	Answerbox
	    = 
	    ANSWERBOX
	      {
		root_window:  wg::Root_Window,
		font:         xf::Font,
		lead:         Int
	      };

	fun make_answer (root_window: wg::Root_Window, fontname: String)
	    =
	    {   font = xf::open_font (wg::xsession_of root_window) fontname;

		my { ascent, descent }
		    =
		    xf::font_high font;

		lead = ascent + descent;

		ANSWERBOX { root_window, font, lead };
	    };

	fun ans_box (ansbox, arg1, arg2, sign_string, ans)
	    =
	    {   ansbox ->  ANSWERBOX { root_window, font, lead };

		s1 = int::to_string arg1;
		s2 = sign_string + "   " + (int::to_string arg2);
		s3 = int::to_string ans;
		l1 = xf::text_width font s1;
		l2 = xf::text_width font s2;
		l3 = xf::text_width font s3;
		wd = int::max (l1, int::max (l2, l3));
		s1y = lead;
		s2y = s1y + lead;
		liney = s2y + 4;
		s3y = liney + lead;

		size_preferences
		    =
		    { col_preference =>  wg::tight_preference  wd,
		      row_preference =>  wg::tight_preference  (s3y + 4)
		    };

		my (canvas, size, kidplug)
		    =
		    cv::make_canvas root_window size_preferences;

		my  xi::KIDPLUG { from_other', ... }
		    =
		    xi::ignore_mouse_and_keyboard  kidplug;

		black = xc::black;

		pen = xd::make_pen  [ xd::FOREGROUND (xc::rgb8_from_rgb  black) ];

		fun main size
		    =
		    loop size
		    where
			draww = cv::drawable_of canvas;

			draw_transparent_string = xd::draw_transparent_string draww pen font;
			draw_line               = xd::draw_lines              draww pen;

			fun draw (xg::SIZE { wide, high } )
			    =
			    {   print_if debug_tracing .{ "in draw"; };

				xd::clear_drawable  draww;

				draw_transparent_string (xg::POINT { col=>wide-l1, row=>s1y   }, s1);
				draw_transparent_string (xg::POINT { col=>wide-l2, row=>s2y   }, s2);

				draw_line
                                  [ xg::POINT { col=>0,    row=>liney },
                                    xg::POINT { col=>wide, row=>liney }
                                  ];

				draw_transparent_string (xg::POINT { col=>wide-l3, row=>s3y   }, s3);
			    };

			fun loop size
			    =
			    case (xi::envelope_contents (do_mailop from_other'))
				#
				xi::ETC_REDRAW _
				    =>
				    {   draw size;
					loop size;
				    };

				xi::ETC_RESIZE (xg::BOX { wide, high, ... } )
				    => 
				    loop (xg::SIZE { wide, high } );

				_   =>
				    loop size;
			    esac;
		    end;

		make_thread "answer" .{ main size; };

		cv::as_widget canvas;
	    };


	fun show_answer (ansbox, window, arg1, arg2, sign_string, ans)
	    =
	    {   print_if debug_tracing .{ "in show_answer"; };

		ansbox ->  ANSWERBOX { root_window, ... };

		iv  = make_oneshot_maildrop ();
		iv' = make_oneshot_maildrop ();

		answer = ans_box (ansbox, arg1, arg2, sign_string, ans);

		print_if debug_tracing .{ "Created ansbox."; };

		cancel
		    =
		    pb::make_text_pushbutton_with_click_callback  root_window
		      {
			click_callback =>  fn () =  set (iv', ()),
			rounded        =>  TRUE,
			label          =>  "Cancel",
			#
			foreground     => NULL,
			background     => NULL
		      };

		layout
		    =
		    lw::as_widget
			(lw::make_line_of_widgets  root_window
			  ( lw::VT_CENTER
			      [
				lw::HZ_CENTER
				  [
				    lw::SPACER { min_size=>3, ideal_size=>3, max_size=>NULL },
				    lw::WIDGET answer,
				    lw::SPACER { min_size=>3, ideal_size=>3, max_size=>NULL }
				  ],

				lw::SPACER { min_size=>5, ideal_size=>5, max_size=>NULL },

				lw::HZ_CENTER
				  [
				    lw::SPACER { min_size=>5, ideal_size=>5, max_size=>NULL },
				    lw::WIDGET (sz::make_tight_size_preference_wrapper (pb::as_widget cancel)),
				    lw::SPACER { min_size=>5, ideal_size=>5, max_size=>NULL }
				  ],

				lw::SPACER { min_size=>5, ideal_size=>5, max_size=>NULL }
			      ]
			) );

		print_if debug_tracing .{ "Created layout."; };

		topwindow = tw::make_transient_topwindow
			    window
			    ( layout,
			      NULL,
			      { window_name => THE "Answer",
				icon_name   => THE "Answer"
			      }
			    );

		print_if debug_tracing .{ "Created topwindow."; };

		fun main ()
		    =
		    {   print_if debug_tracing .{ "main await event"; };

			select (map get' [iv, iv']);

			print_if debug_tracing .{ "main got event; destroy topwindow"; };

			tw::destroy topwindow;
		    };

		print_if debug_tracing .{ "spawn main"; };

		make_thread "answer II" main;

		print_if debug_tracing .{ "Initializing topwindow..."; };

		tw::start  topwindow;

		print_if debug_tracing .{ "return iv"; };

		iv;
	    };
    };

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 AT&T Research.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
