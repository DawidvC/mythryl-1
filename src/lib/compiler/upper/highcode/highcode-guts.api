## highcode-guts.api 

# Compiled by:
#     src/lib/compiler/core.make6

# Here we implement the backend upper-half type reprentation
# used in conjunction with all three of the upper-half code
# representions:
#     polylambda  src/lib/compiler/upper/polylambda/polylambda.api
#     anormal     src/lib/compiler/upper/anormal/anormal.api
#     fps         src/lib/compiler/upper/fps/fate-passing-style.api

# Nomenclature, background and motivation:
#
#    "cons" is the traditional Lisp operator
#           to construct a list cell:
#           Mythryl "element . list" == Lisp "(cons element list)".
#
#    "hash-consing" is the traditional Lisp name
#           for a technique in which duplicate
#           lists are avoided by keeping a hash
#           table containing  every list cell
#           created;  if 'cons' is asked to construct
#           a duplicate of a cell in the hashtable,
#           it returns the pre-existing cell rather
#           than creating a new one.
#
#           Hash-consing can potentially save an
#           exponential amount of space relative to
#           vanilla consing due to sharing of subtrees.
#
#           Hash-consing can also be useful for such
#           things as common sub-expression elimination,
#           by merging common sub-expressions.
#           
# More generally, "hash-consing" is used to refer to
# any similar avoidance of duplicated datastructure subtrees.
#
# Here we implement hash-consed versions of
#
#     Highcode_Kind_I,
#     Highcode_Type_I and
#     Highcode_Fn_I
#
# The highcode.api / highcode.pkg interface hides the
# hash-consing mechanics from our code clients.


###              "Intellect annuls Fate. So far
###               as a man thinks, he is free."
###
###                       -- Ralph Waldo Emerson



api Highcode_Guts {

    # Definitions of kind and kind-dictionary:
    #
    Highcode_Kind;

    Highcode_Kind_I
      = TYPEKIND_MONOMORPHIC_TYPE_CONSTRUCTOR					#  Ground mono Type 
      | TYPEKIND_BOXED_TYPE_CONSTRUCTOR						#  Boxed/tagged Type 
      | TYPEKIND_TYPE_CONSTRUCTOR_SEQUENCE  List( Highcode_Kind )			#  Sequence of tycons 
      | TYPEKIND_TYPE_CONSTRUCTOR_FUNCTION  (List( Highcode_Kind ), Highcode_Kind);	#  Type function 

    # Definitions of named Type variables:
    #
    Highcode_Variable = highcode_var::Highcode_Variable;				#  temporary, not used 
    make_type_variable:  Void -> Highcode_Variable;					#  temporary, not used 

    # Definitions of Highcode_Type_Constructor and Type-dictionary:
    # 
    Highcode_Type_Constructor;
    Type_Constructor_Dictionary;
    Token;									#  A hook to add new Type 

    Fn_Flag									#  Calling conventions 
      = FNFLAG_VARIABLE  (Bool, Bool)						#  Is it fixed ? 
      | FNFLAG_FIXED;								#  Used after rep. analysis 

    Record_Flag = RECORDFLAG_TMP;						#  tuple kind: a template 

    Highcode_Type_I
      = TC_VAR  (debruijn_index::Index, Int)					#  Type variable 
      | TC_NAMED_VAR  Highcode_Variable						#  Named Type variable 
      | TC_PRIM  highcode_data_representation::Primitive_Type_Constructor		#  Primitive Type 
      | TC_FN  (List( Highcode_Kind ), Highcode_Type_Constructor)					#  Type abstraction 
      | TC_APPLY  (Highcode_Type_Constructor, List( Highcode_Type_Constructor ))						#  Type application 
      | TC_SEQ  List( Highcode_Type_Constructor )							#  Type sequence 
      | TC_PROJ  (Highcode_Type_Constructor, Int)							#  Type projection 

      | TC_SUM  List( Highcode_Type_Constructor )							#  sum Type 
      | TC_RECURSIVE
             (((Int, Highcode_Type_Constructor, List( Highcode_Type_Constructor )) ), Int)				# recursive Type

      | TC_TUPLE  (Record_Flag, List( Highcode_Type_Constructor ))           				#  std record Type 
      | TC_ARROW  (Fn_Flag, List (Highcode_Type_Constructor), List (Highcode_Type_Constructor)) 	#  std function Type 
      | TC_PARROW  (Highcode_Type_Constructor, Highcode_Type_Constructor)       			#  special fun Type, not used 

      | TC_BOXED  Highcode_Type_Constructor                          					#  Boxed Type 
      | TC_ABSTRACT  Highcode_Type_Constructor								#  Abstract Type 
      | TC_EXTENSIBLE_TOKEN  (Token, Highcode_Type_Constructor) 					#  extensible token Type 
      | TC_FATE  List( Highcode_Type_Constructor )						#  std fate Type 
      | TC_INDIRECT  (Highcode_Type_Constructor, Highcode_Type_I)          					#  indirect Type thunk 
      | TC_CLOSURE  (Highcode_Type_Constructor, Int, Int, Type_Constructor_Dictionary);      	#  Type closure 

    # Definition of Highcode_Type:
    #
    Highcode_Type;
    Highcode_Fn_I          
      = FNTYPE_MONOMORPHIC_TYPE_CONSTRUCTOR  Highcode_Type_Constructor				#  monomorphic type
      | FNTYPE_PACKAGE  List( Highcode_Type )					#  package type 
      | FNTYPE_GENERIC  (List( Highcode_Type ), List( Highcode_Type ))		#  generic type 
      | FNTYPE_POLYMORPHIC  (List( Highcode_Kind ), List( Highcode_Type ))	#  polymorphic type 

      | FNTYPE_INTERNAL_CLOSURE  List( Highcode_Type )			#  internal fate type 
      | FNTYPE_INDIRECT_TYPETHUNK  (Highcode_Type, Highcode_Fn_I)			#  indirect type thunk 
      | FNTYPE_TYPE_CLOSURE  (Highcode_Type, Int, Int, Type_Constructor_Dictionary);        #  type closure 

    # Injections and projections on Highcode_Kind, Highcode_Type_Constructor, and Highcode_Type:
    #
    type_kind_inject:           Highcode_Kind_I -> Highcode_Kind; 
    type_constructor_inject:    Highcode_Type_I -> Highcode_Type_Constructor;
    lambda_type_inject:         Highcode_Fn_I -> Highcode_Type;

    type_kind_project:           Highcode_Kind -> Highcode_Kind_I;
    type_constructor_project:    Highcode_Type_Constructor -> Highcode_Type_I;
    lambda_type_project:         Highcode_Type -> Highcode_Fn_I;

    # Key comparison for Highcode_Kind, Highcode_Type_Constructor, and Highcode_Type; used in pickling:
    #
    compare_type_kinds:           (Highcode_Kind, Highcode_Kind) -> Order;
    compare_type_constructors:    (Highcode_Type_Constructor, Highcode_Type_Constructor) -> Order;
    compare_lambda_types:         (Highcode_Type, Highcode_Type) -> Order;

    # Get the hash key of a Highcode_Type, used by reps/coerce.pkg; a hack!
    #
    hash_lambda_type:    Highcode_Type -> Int;

    # Test equivalence of tkinds, tycs, ltys, fflags, and rflags:
    #
    type_kinds_are_equivalent:         (Highcode_Kind, Highcode_Kind) -> Bool;
    type_constructors_are_equivalent:  (Highcode_Type_Constructor, Highcode_Type_Constructor) -> Bool;
    lambda_types_are_equivalent:       (Highcode_Type, Highcode_Type) -> Bool;
    function_flags_are_equivalent:     (Fn_Flag, Fn_Flag) -> Bool;
    record_flags_are_equivalent:       (Record_Flag, Record_Flag) -> Bool;

    # Testing the equivalence for tycs and ltys with relaxed constraints:
    #
    type_constructors_are_approximately_equivalent:  (Highcode_Type_Constructor, Highcode_Type_Constructor) -> Bool;
    lambda_types_are_approximately_equivalent:       (Highcode_Type, Highcode_Type) -> Bool;

    # Utility functions on type_constructor_dictionaries:
    #
    exception TC_UNBOUND;
    init_type_constructor_dictionary:  Type_Constructor_Dictionary;
    insert_type_constructor:    (Type_Constructor_Dictionary, ((Null_Or( List( Highcode_Type_Constructor ) ), Int))) -> Type_Constructor_Dictionary;

    # Test whether a Highcode_Type_Constructor (or Highcode_Type) is in the normal form:
    #
    type_constructor_is_normalized:  Highcode_Type_Constructor -> Bool;
    lambda_type_is_normalized:  Highcode_Type -> Bool;

    # Find out the depth for a Highcode_Type_Constructor's innermost-bound free variables:
    #
    type_constructor_depth_of_innermost_named_variable:  (Highcode_Type_Constructor, debruijn_index::Depth) -> debruijn_index::Depth;
    type_constructors_depth_of_innermost_named_variable: (List( Highcode_Type_Constructor ), debruijn_index::Depth) -> debruijn_index::Depth;

    free_named_variables_in_type_constructor:  Highcode_Type_Constructor -> List( Highcode_Variable );
    free_named_variables_in_lambda_type:       Highcode_Type -> List( Highcode_Variable );



    # Utility functions on type_kind_dictionary:
    #
    Highcode_Kind_Dictionary;

    exception TYPE_KIND_UNBOUND;

    empty_type_kind_dictionary:                  Highcode_Kind_Dictionary;
    get_in_type_kind_dictionary:            (Highcode_Kind_Dictionary, Int, Int) -> Highcode_Kind;
    insert_in_type_kind_dictionary:             (Highcode_Kind_Dictionary, List( Highcode_Kind )) -> Highcode_Kind_Dictionary;
    get_in_type_kind_dictionary_free_vars:  (Highcode_Kind_Dictionary, Highcode_Type_Constructor) -> Null_Or( List( Highcode_Kind ) );

    # Utility functions for TC_CLOSURE and FNTYPE_TYPE_CLOSURE types:
    #
    type_constructor_closure_dictionary:   (Highcode_Type_Constructor, Int, Int, Type_Constructor_Dictionary) -> Highcode_Type_Constructor;
    lambda_type_closure_dictionary:   (Highcode_Type, Int, Int, Type_Constructor_Dictionary) -> Highcode_Type;

    # Reducing a Highcode_Type_Constructor or Highcode_Type into the weak-head normal form:
    #
    reduce_type_constructor_to_weak_head_normal_form:  Highcode_Type_Constructor -> Highcode_Type_Constructor;
    reduce_lambda_type_to_weak_head_normal_form:  Highcode_Type -> Highcode_Type;

    # Reducing a Highcode_Type_Constructor or Highcode_Type into the true normal form:
    #
    reduce_type_constructor_to_normal_form:  Highcode_Type_Constructor -> Highcode_Type_Constructor;
    reduce_lambda_type_to_normal_form:  Highcode_Type -> Highcode_Type;

    # Automatically flattening the argument or the result type:
    #
    lt_autoflat:  Highcode_Type -> (Bool, List( Highcode_Type ), Bool);

    # Testing if a Highcode_Type_Constructor is a unknown constructor:
    #
    type_constructor_is_unknown:  Highcode_Type_Constructor -> Bool; 

    # Automatically tupling up the multiple argument/result into a single one:
    # 
    type_constructor_list_to_type_constructor_tuple:  List( Highcode_Type_Constructor ) -> Highcode_Type_Constructor;

    # tccArrow does automatic argument and result flattening, so go away:
    #
    tcc_arrow:  (Fn_Flag, List( Highcode_Type_Constructor ), List( Highcode_Type_Constructor )) -> Highcode_Type_Constructor;

    # Token-related functions:
    #
    token_name:           Token -> String; 
    token_abbreviation:   Token -> String;            #  used by tc_print 
    token_is_valid:       Token -> Bool;   
    tokens_are_equal:    (Token, Token) -> Bool;      
    token_int:            Token -> Int;               #  for pickling 
    token_key:            Int -> Token;

    # primitive TC_WRAP constructor, built through the token facility:
    #
    wrap_token:     Token;

}; #  Api Highcode_Guts 


## COPYRIGHT (c) 1997 YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
