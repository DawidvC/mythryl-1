## template-expansion.pkg 

# Compiled by:
#     src/lib/compiler/core.make6



package template_expansion {

    stipulate

	include types;
        include variables_and_constructors;
        include var_home;
        include deep_syntax;
        include error_message;
        include compile_pattern_stuff;
        include type_types;

    herein 

	exception LOOKUP;

	fun lookup
                ( a as ORDINARY_VARIABLE { var_home=>HIGHCODE_VARIABLE a', ... }, 
		      (ORDINARY_VARIABLE { var_home=>HIGHCODE_VARIABLE b, ... }, c) ! d
                )
                => 
		a' == b   ??   c
			  ::   lookup (a, d);

	    lookup (ORDINARY_VARIABLE _, (ORDINARY_VARIABLE _, _) ! _)
                =>
	        error_message::impossible "833 in tempexpn";

	    lookup _
                =>
                raise exception LOOKUP;
        end;

	make_highcode_variable
            =
            highcode_var::make_highcode_variable;

	exception CANNOT_MATCH;

	fun foo x = impossible "no templates yet";
	/*
		(case lookup (x, *constructor_env)
		  of { representation = TEMPLrep (NO_PATTERN, _, _), ... } => raise exception CANNOT_MATCH 
		   | { representation = TEMPLrep x, ... } => x 
		   | _ => raise exception Internal 1)
		except Lookup => raise exception (Internal 2) 
	*/

	fun foo' x = impossible "no symbolic constants yet";
	/*
		(case lookup (x, *constructor_env)
		  of { representation = CONSTrep (NO_PATTERN, _), ... } => raise exception CANNOT_MATCH 
		   | { representation = CONSTrep x, ... } => x 
		   | _ => raise exception Internal 3)
		except Lookup => raise exception (Internal 4)
	*/

	fun and_patterns (WILDCARD_PATTERN, pattern) => pattern;
	    and_patterns (pattern, WILDCARD_PATTERN) => pattern;

	    and_patterns (TYPE_CONSTRAINT_PATTERN (pattern, _), pattern') => and_patterns (pattern, pattern');
	    and_patterns (pattern, TYPE_CONSTRAINT_PATTERN (pattern', _)) => and_patterns (pattern, pattern');

	    and_patterns (VARIABLE_IN_PATTERN v, pattern) => AS_PATTERN (VARIABLE_IN_PATTERN v, pattern);
	    and_patterns (pattern, VARIABLE_IN_PATTERN v) => AS_PATTERN (VARIABLE_IN_PATTERN v, pattern);

	    and_patterns (CONSTRUCTOR_PATTERN (k, t), CONSTRUCTOR_PATTERN (k', t'))
                => 
		if   (con_eq (k, k'))   CONSTRUCTOR_PATTERN (k, t);
		elif (abstract k )      AS_PATTERN (CONSTRUCTOR_PATTERN (k, t), CONSTRUCTOR_PATTERN (k', t'));
	        elif (abstract k' )     AS_PATTERN (CONSTRUCTOR_PATTERN (k', t'), CONSTRUCTOR_PATTERN (k, t));
	        else                    raise exception CANNOT_MATCH;
                fi;

	    and_patterns (CONSTRUCTOR_PATTERN (k, t), APPLY_PATTERN (k', t', pattern))
                =>
		if   (abstract k )   AS_PATTERN (CONSTRUCTOR_PATTERN (k, t), APPLY_PATTERN (k', t', pattern));
	        elif (abstract k')   AS_PATTERN (APPLY_PATTERN (k', t', pattern), CONSTRUCTOR_PATTERN (k, t));
	        else                 raise exception CANNOT_MATCH;
                fi;

	    and_patterns (APPLY_PATTERN (k', t', pattern), CONSTRUCTOR_PATTERN (k, t))
                =>
		if   (abstract k )   AS_PATTERN (CONSTRUCTOR_PATTERN (k, t), APPLY_PATTERN (k', t', pattern));
	        elif (abstract k')   AS_PATTERN (APPLY_PATTERN (k', t', pattern), CONSTRUCTOR_PATTERN (k, t));
	        else                 raise exception CANNOT_MATCH;
                fi;

	    and_patterns (APPLY_PATTERN (k, t, pattern), APPLY_PATTERN (k', t', pattern'))
		=>
		if   (con_eq (k, k'))

		     APPLY_PATTERN (k, t, and_patterns (pattern, pattern'));

		elif (abstract k)

		     AS_PATTERN (APPLY_PATTERN (k, t, pattern), APPLY_PATTERN (k', t', pattern'));

		elif (abstract k')

		     AS_PATTERN (APPLY_PATTERN (k', t', pattern'), APPLY_PATTERN (k, t, pattern));
		else
                     raise exception CANNOT_MATCH;
		fi;

	    and_patterns (CONSTRUCTOR_PATTERN (k, t), pattern)
	       =>
	       if   (abstract k)
		    AS_PATTERN (CONSTRUCTOR_PATTERN (k, t), pattern);
	       else
                    impossible "Non abstract CONSTRUCTOR_PATTERN & non constructor pattern in andPattern";
               fi;

	    and_patterns (pattern, CONSTRUCTOR_PATTERN (k, t))
	       =>
	       if   (abstract k)
		    AS_PATTERN (CONSTRUCTOR_PATTERN (k, t), pattern);
	       else
                    impossible "non constructor pattern & Non abstract CONSTRUCTOR_PATTERN in andPattern";
               fi;

	    and_patterns (APPLY_PATTERN (k, t, pattern), pattern')
	       =>
	       if   (abstract k)
		    AS_PATTERN (APPLY_PATTERN (k, t, pattern), pattern');
	       else
                    impossible "Non abstract APPLY_PATTERN & non constructor pattern in andPattern";
               fi;

	    and_patterns (pattern, APPLY_PATTERN (k, t, pattern'))
	       => 
	       if   (abstract k)

		    AS_PATTERN (APPLY_PATTERN (k, t, pattern'), pattern);
	       else
                    impossible "non constructor pattern & Non abstract APPLY_PATTERN in andPattern";
               fi;


	    and_patterns (AS_PATTERN (TYPE_CONSTRAINT_PATTERN (pattern1, _), pattern2), pattern)
	       =>
	       and_patterns (AS_PATTERN (pattern1, pattern2), pattern); 


	    and_patterns (pattern, AS_PATTERN (TYPE_CONSTRAINT_PATTERN (pattern1, _), pattern2))
	       =>
	       and_patterns (pattern, AS_PATTERN (pattern1, pattern2)); 


	    and_patterns (AS_PATTERN (pattern1, pattern2), pattern)
	       =>
	       AS_PATTERN (pattern1, and_patterns (pattern2, pattern));


	    and_patterns (pattern, AS_PATTERN (pattern1, pattern2))
	       =>
	       AS_PATTERN (pattern1, and_patterns (pattern2, pattern));


	    and_patterns (INT_CONSTANT_IN_PATTERN (p as (s, t)), INT_CONSTANT_IN_PATTERN (s', t'))
                =>
		if (type_stuff::types_are_equal (t, int_type) )
			 if ((literal_to_num::int s) == (literal_to_num::int s'))
				INT_CONSTANT_IN_PATTERN p;
			   else raise exception CANNOT_MATCH;fi;
		elif (type_stuff::types_are_equal (t, int32type) )

			 if (literal_to_num::int32 s  ==  literal_to_num::int32 s')
				INT_CONSTANT_IN_PATTERN p;
			 else
                              raise exception CANNOT_MATCH;
                         fi;
	        else
                     error_message::impossible "and_patterns/INT_CONSTANT_IN_PATTERN in tempexpn";
                fi
		except
		    OVERFLOW = error_message::impossible "overflow during int or word patter comparisons";

	    and_patterns (UNT_CONSTANT_IN_PATTERN (p as (w, t)), UNT_CONSTANT_IN_PATTERN (w', t'))
		=>
	        if (type_stuff::types_are_equal (t, word_type) )

		     if  (literal_to_num::word w   ==  literal_to_num::word w')
			  UNT_CONSTANT_IN_PATTERN p;
		     else
			  raise exception CANNOT_MATCH;
		     fi;

		elif (type_stuff::types_are_equal (t, word8type) )

		     if (literal_to_num::word8 w  ==  literal_to_num::word8 w')
			 UNT_CONSTANT_IN_PATTERN p;
		     else
			 raise exception CANNOT_MATCH;
		     fi;

		elif (type_stuff::types_are_equal (t, word32type) )

		     if (literal_to_num::word32 w  ==  literal_to_num::word32 w')
			  UNT_CONSTANT_IN_PATTERN p;
		     else
			  raise exception CANNOT_MATCH;
		     fi;

		else
                     error_message::impossible "and_patterns/UNT_CONSTANT_IN_PATTERN in tempexpn";
                fi
		except
		    OVERFLOW = error_message::impossible "overflow during int or word patter comparisons";

	    and_patterns (FLOAT_CONSTANT_IN_PATTERN r, FLOAT_CONSTANT_IN_PATTERN r')
		=> 
		if (r == r')   FLOAT_CONSTANT_IN_PATTERN r;
                else           raise exception CANNOT_MATCH;
                fi;

	    and_patterns (STRING_CONSTANT_IN_PATTERN s, STRING_CONSTANT_IN_PATTERN s')
                =>
		if (s == s')   STRING_CONSTANT_IN_PATTERN s;
                else           raise exception CANNOT_MATCH;
                fi;

	    and_patterns (CHAR_CONSTANT_IN_PATTERN s, CHAR_CONSTANT_IN_PATTERN s')
                =>
		if (s == s')   CHAR_CONSTANT_IN_PATTERN s;
                else           raise exception CANNOT_MATCH;
                fi;

	    and_patterns (pattern1 as RECORD_PATTERN { fields=>p, ... }, 
			 pattern2 as RECORD_PATTERN { fields=>q, ... } )
               =>
	       make_recordpat pattern1 (multi_and (map #2 p, map #2 q));

	 # ****************** how to and two types ? *************************
	    and_patterns (VECTOR_PATTERN (p, t), VECTOR_PATTERN (p', t'))
		=>
		if  (length p == length p')
		     VECTOR_PATTERN (multi_and (p, p'), t); 
		else
		     raise exception CANNOT_MATCH;
		fi;

	    and_patterns (p1, p2)
		=> 
		impossible "bas andPattern call";
        end 

	also
	fun multi_and (NIL, NIL)
                =>
                NIL;

	    multi_and (pattern ! rest, pattern' ! rest')
                => 
	        (and_patterns (pattern, pattern')) ! (multi_and (rest, rest'));

	    multi_and _
                =>
                impossible "bad multi_and call";
        end;

	fun macro_expand_patexp (VARIABLE_IN_PATTERN v, dictionary)
                =>
                lookup (v, dictionary);

	    macro_expand_patexp (AS_PATTERN (pattern1, pattern2), dictionary)
                =>
	        and_patterns (macro_expand_patexp (pattern1, dictionary), macro_expand_patexp (pattern2, dictionary));

	    macro_expand_patexp (TYPE_CONSTRAINT_PATTERN (pattern, _), dictionary)
                =>
	        macro_expand_patexp (pattern, dictionary);

	    macro_expand_patexp (APPLY_PATTERN (k, t, pattern), dictionary)
                => 
		APPLY_PATTERN (k, t, macro_expand_patexp (pattern, dictionary));

	    macro_expand_patexp (pattern as RECORD_PATTERN { fields, ... }, dictionary)
                =>
	        make_recordpat pattern (multi_macro_expand_patexp (map #2 fields, dictionary));

	    macro_expand_patexp (VECTOR_PATTERN (pats, t), dictionary)
                =>
	        VECTOR_PATTERN (multi_macro_expand_patexp (pats, dictionary), t);

	    macro_expand_patexp (pattern, dictionary)
                =>
                pattern;
        end 

	also
	fun multi_macro_expand_patexp (NIL, dictionary)
                =>
                NIL;

	    multi_macro_expand_patexp (pattern ! rest, dictionary)
                => 
		macro_expand_patexp    (pattern, dictionary)
                !
                multi_macro_expand_patexp (rest, dictionary);

        end;

	fun instance (VARIABLE_IN_PATTERN (ORDINARY_VARIABLE { path, var_type, inlining_info, ... } ))
		=>
		VARSIMP (ORDINARY_VARIABLE { var_home=>HIGHCODE_VARIABLE (make_highcode_variable()), path, var_type, inlining_info } );

	    instance (VARIABLE_IN_PATTERN _)
                =>
                impossible "bad variable in match";

	    instance (RECORD_PATTERN { fields, ... } )
                => 
		RECORDSIMP (map (fn (lab, pattern)=>(lab, instance pattern); end ) fields);
	
            instance (TYPE_CONSTRAINT_PATTERN (pattern, _))
                =>
                instance pattern;

	    instance pattern
                =>
                impossible "bad instance call";
        end;

	fun simp_to_pattern (VARSIMP v)
                =>
                VARIABLE_IN_PATTERN v;

	    simp_to_pattern (RECORDSIMP labsimps)
                => 
	        RECORD_PATTERN {
                    fields => map   (fn (lab, simp)= (lab, simp_to_pattern simp))   labsimps,
		    is_incomplete => FALSE,
                    type_ref => REF UNDEFINED_TYPE
                };
        end;

	fun trivpat_triv_dictionary (VARIABLE_IN_PATTERN v, VARSIMP x)
                =>
                [(v, VARIABLE_IN_PATTERN x)];

	    trivpat_triv_dictionary (TYPE_CONSTRAINT_PATTERN (tpat, _), simp)
                => 
	        trivpat_triv_dictionary (tpat, simp);

	    trivpat_triv_dictionary (RECORD_PATTERN { fields, ... }, RECORDSIMP labsimps)
                =>
	        multi_trivpat_triv_dictionary (map #2 fields, map #2 labsimps);

	    trivpat_triv_dictionary _
                =>
                impossible "trivpat_triv_dictionary";
        end 

	also
	fun multi_trivpat_triv_dictionary (NIL, NIL)
                =>
                NIL;

	    multi_trivpat_triv_dictionary (tpat ! trest, simp ! srest)
                =>
	        (trivpat_triv_dictionary (tpat, simp))@(multi_trivpat_triv_dictionary (trest, srest));

	    multi_trivpat_triv_dictionary _
                =>
                impossible "multiTrivpatTrivDict";
        end;

	fun wild_dictionary (VARIABLE_IN_PATTERN v)             => [(v, WILDCARD_PATTERN)];
	    wild_dictionary (TYPE_CONSTRAINT_PATTERN (tpat, _)) => wild_dictionary tpat;
	    wild_dictionary (RECORD_PATTERN { fields, ... } )     => list::cat (map (wild_dictionary o #2) fields);

	    wild_dictionary _                                   => impossible "wild_dictionary called on non-trivpat";
        end;

	fun match_trivial_pattern (VARIABLE_IN_PATTERN v, pattern)
                =>
                ([(v, pattern)], NIL, NIL);

	    match_trivial_pattern (TYPE_CONSTRAINT_PATTERN (tpat, _), pattern)
                =>
                match_trivial_pattern (tpat, pattern);

	    match_trivial_pattern (tpat, TYPE_CONSTRAINT_PATTERN (pattern, _))
                =>
                match_trivial_pattern (tpat, pattern);

	    match_trivial_pattern (RECORD_PATTERN { fields=>tps, ... }, RECORD_PATTERN { fields=>ps, ... } )
                =>
		multi_match_trivpat (map #2 tps, map #2 ps);

	    match_trivial_pattern (tpat, WILDCARD_PATTERN)
                => 
	        (wild_dictionary tpat, NIL, NIL);

	    match_trivial_pattern (tpat, VARIABLE_IN_PATTERN v)
		=>
		{   a =   instance tpat;
		    b =   trivpat_triv_dictionary (tpat, a);

		    (b, [(v, a)], NIL);
		};

	    match_trivial_pattern (tpat, CONSTRUCTOR_PATTERN (k, t))
		=>
		{   a =   instance tpat;
		    b =   trivpat_triv_dictionary (tpat, a);

		    (b, NIL, [(a, CONSTRUCTOR_PATTERN (k, t))]);
		};

	    match_trivial_pattern (tpat, APPLY_PATTERN (k, t, pattern))
		=>
		{   a = instance tpat;
		    b = trivpat_triv_dictionary (tpat, a);

		    (b, NIL, [(a, APPLY_PATTERN (k, t, pattern))]);
		};

	    match_trivial_pattern (tpat, AS_PATTERN (CONSTRUCTOR_PATTERN (k, t), pattern))
		=>
		{   a = instance tpat;

		    my  (pattern', var_dictionary, constr)
			= 
			match_trivial_pattern (tpat, and_patterns (simp_to_pattern a, pattern));

		    (pattern', var_dictionary, (a, CONSTRUCTOR_PATTERN (k, t)) ! constr);
		};

	    match_trivial_pattern (tpat, AS_PATTERN (APPLY_PATTERN (k, t, spat), pattern))
		=>
		{   a = instance tpat;

		    my  (pattern', var_dictionary, constr)
			= 
			match_trivial_pattern (tpat, and_patterns (simp_to_pattern a, pattern));

		    (pattern', var_dictionary, (a, APPLY_PATTERN (k, t, spat)) ! constr);
		};

	    match_trivial_pattern (tpat, AS_PATTERN (VARIABLE_IN_PATTERN v, pattern))
		=>
		{   a = instance tpat;

		    my  (pattern', var_dictionary, constr)
			= 
			match_trivial_pattern (tpat, and_patterns (simp_to_pattern a, pattern));

		    (pattern', (v, a) ! var_dictionary, constr);
		};

	    match_trivial_pattern (tpat, AS_PATTERN (TYPE_CONSTRAINT_PATTERN (pattern1, _), pattern2))
	       =>
	       match_trivial_pattern (tpat, AS_PATTERN (pattern1, pattern2));

	    match_trivial_pattern (tpat, pattern)
                =>
                impossible "bad match_trivial_pattern call";
       end 

       also
       fun multi_match_trivpat (NIL, NIL)
	       =>
	       (NIL, NIL, NIL);

	   multi_match_trivpat (tpat ! trest, pattern ! prest)
		=>
		{   my (patenv,  varenv,  constr ) =   multi_match_trivpat (trest, prest);
		    my (patenv', varenv', constr') =   match_trivial_pattern (tpat, pattern);

		    (patenv@patenv', varenv@varenv', constr@constr');
		};

	    multi_match_trivpat _
                =>
                impossible "bad multi_match_trivpat call";
       end;

	fun new_vars (RECORDSIMP labsimps, dictionary)
		=> 
		multi_new_vars (map #2 labsimps, dictionary);

	    new_vars (VARSIMP (v as ORDINARY_VARIABLE { path, var_type, inlining_info, ... } ), dictionary)
		=>
		{   lookup (v, dictionary);
		    dictionary;
		}
		except
                    lookup
		        =
			(   v,

			    ORDINARY_VARIABLE {
				path,
				var_type,
				var_home  => HIGHCODE_VARIABLE (make_highcode_variable()),
				inlining_info
			    }
			)
			!
			dictionary;



	    new_vars (VARSIMP _, _)
		=>
		impossible "bad instance call to newVars";
       end 

       also
       fun multi_new_vars (NIL, dictionary)
		=>
		dictionary;

	    multi_new_vars (simp ! rest, dictionary)
		=>
		multi_new_vars (rest, new_vars (simp, dictionary));
        end;

	fun macro_expand_local_vars (NIL, dictionary)
		=>
		dictionary;

	    macro_expand_local_vars ((path, pattern) ! rest, dictionary)
		=>
		macro_expand_local_vars (rest, new_vars (path, dictionary));
        end;

	fun inst_simpexp (VARSIMP v, dictionary)
		=>
		VARSIMP (lookup (v, dictionary));

	    inst_simpexp (RECORDSIMP labsimps, dictionary)
		=> 
		RECORDSIMP (multi_inst_simpexp (labsimps, dictionary));
       end 

       also
       fun multi_inst_simpexp (NIL, dictionary)
		=>
		NIL;

	    multi_inst_simpexp((lab, simpexp) ! rest, dictionary)
		=> 
		(   lab,
		    inst_simpexp (simpexp, dictionary)
		)
		!
		(multi_inst_simpexp (rest, dictionary));
        end;

	fun macro_expand_constrs (NIL, loc_dictionary, dictionary)
		=>
		NIL;

	    macro_expand_constrs((simpexp, pattern) ! rest, loc_dictionary, dictionary)
		=> 
		(inst_simpexp (simpexp, loc_dictionary), macro_expand_patexp (pattern, dictionary))
		!
		(macro_expand_constrs (rest, loc_dictionary, dictionary));
        end;    

	fun liftenv NIL
		=>
		NIL;

	    liftenv ((v, x) ! rest)
		=>
		(   v,
		    VARIABLE_IN_PATTERN x
		)
		!
		(liftenv rest);
        end;

	fun templ_expand (k, pattern)
            =
	    {   my  (patexp, trivpat, constrs)
                    =
                    foo k;

		my  (dictionary, varnames, newconstrs)
                    =
                    match_trivial_pattern (trivpat, pattern);

		dictionary' =   macro_expand_local_vars (constrs, NIL);

		new_dictionary =   dictionary @ (liftenv dictionary');

		(   macro_expand_patexp (patexp, new_dictionary),
		    newconstrs @ (macro_expand_constrs (constrs, dictionary', new_dictionary)),
		    varnames
                );
	    };

	fun const_expand k
            =
	    {   my  (patexp, constrs)
                    =
                    foo' k;

		new_dictionary
                    =
                    macro_expand_local_vars (constrs, NIL);

		l_new_dictionary
                    =
                    liftenv new_dictionary;

		( macro_expand_patexp (patexp, l_new_dictionary),
		  macro_expand_constrs (constrs, new_dictionary, l_new_dictionary),
		  NIL
                );
	    };

	fun multi_template_expand NIL
		=>
		(NIL, NIL, NIL);

	    multi_template_expand (pattern ! rest)
		=>
		{   my (pats', constr1, varenv1)
		       =
		       multi_template_expand rest;

		    my (pattern', constr2, varenv2)
		       =
		       template_expand_pattern pattern;

		    ( pattern' ! pats',
		      constr1 @ constr2,
		      varenv1 @ varenv2
		    );
		};
        end 

	also
	fun template_expand_pattern (APPLY_PATTERN (k, t, pattern))
		=>
		{   my (pattern', pat_constraints, pat_varenv)
                        =
                        template_expand_pattern  pattern;

		    if (template k)

		        my (new_pattern, k_constraints, k_varenv)
                            =
                            templ_expand (k, pattern');

		        (new_pattern, pat_constraints@k_constraints, pat_varenv@k_varenv);

		    else

		        (APPLY_PATTERN (k, t, pattern'), pat_constraints, pat_varenv);
                    fi;
		};

	    template_expand_pattern (CONSTRUCTOR_PATTERN (k, t))
                =>
	        if (template k)

		    my (new_pattern, constraints, varenv)
                        =
                        const_expand k;
		
		    (new_pattern, constraints, varenv);
	        else
		    (CONSTRUCTOR_PATTERN (k, t), NIL, NIL);
                fi;

	    template_expand_pattern (pattern as RECORD_PATTERN { fields, ... } )
		=>
		{   my (pats', constr, varenv)
			=
			multi_template_expand (map #2 fields);

		    ( make_recordpat pattern pats',
		      constr,
		      varenv
		    );
		};

	    template_expand_pattern (VECTOR_PATTERN (pats, t))
		=>
		{   my (pats', constr, varenv)
			=
			multi_template_expand  pats;

		    ( VECTOR_PATTERN (pats, t),
		      constr,
		      varenv
		    );
		};

	    template_expand_pattern (AS_PATTERN (pattern1, pattern2))
		=>
		{   my (pattern1', constr1, varenv1) = template_expand_pattern pattern1;
		    my (pattern2', constr2, varenv2) = template_expand_pattern pattern2;

		    (AS_PATTERN (pattern1', pattern2'), constr1@constr2, varenv1@varenv2);
		};

	    template_expand_pattern (TYPE_CONSTRAINT_PATTERN (pattern, _))
		=>
		template_expand_pattern pattern;

	    template_expand_pattern pattern
		=>
		(pattern, NIL, NIL);
        end;

	fun fully_expand_naming varenv (VARSIMP v)
                =>
	        fully_expand_naming varenv (lookup (v, varenv))
		except
                    lookup = VARSIMP v;

	    fully_expand_naming varenv (RECORDSIMP labsimps)
                =>
	        RECORDSIMP 
		    (map (fn (lab, simp)=>(lab, fully_expand_naming varenv simp); end ) labsimps);
        end;

	fun fully_expand_naming_trivpat varenv (VARIABLE_IN_PATTERN v)
                =>
	        fully_expand_naming_trivpat varenv (simp_to_pattern (lookup (v, varenv)))
		except
                    lookup = VARIABLE_IN_PATTERN v;

	    fully_expand_naming_trivpat varenv (pattern as RECORD_PATTERN { fields, ... } )
                =>
	        make_recordpat pattern (map (fully_expand_naming_trivpat varenv o #2) fields);

	    fully_expand_naming_trivpat varenv (TYPE_CONSTRAINT_PATTERN (pattern, _))
                =>
	        fully_expand_naming_trivpat varenv pattern;

	    fully_expand_naming_trivpat _ _ 
                => 
	        impossible "fully_expand_naming_trivpat miscalled";
        end;

    end;				# toplevel stipulate 

};					# package template_expansion 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1995 AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
