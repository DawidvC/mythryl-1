# fsm2.pkg
#
# Non-deterministic and deterministic finite-state machines.
#
# This new implementation uses a compressed representation for the state
# table.  NFA->DFA should also be a lot faster because we now deal strictly
# with equivalence classes.


package Dfa2 :> DFA {

   package r   = abstract_regular_expression
   package a   = rw_vector
   package da  = DenseAutomataTable
   package eqv = EquivCharClass

   error = 0

   enum dfa
       =
       DFA of {

           base:    a::Rw_Vector( Int ),		#  state -> offset 
	   equiv:   a::Rw_Vector( Int ), 		#  Char -> equiv class 
	   next:    a::Rw_Vector( Null_Or(    Int ) ),  #  offset -> state 
	   check:   a::Rw_Vector( Int ),  		#  offset -> state 
	   default: a::Rw_Vector( Int ),  		#  state -> state 
	   accept:  a::Rw_Vector( Null_Or(   Int ) )	#  state -> rule 
       }

   exception SYNTAX_NOT_HANDLED = r::CANNOT_COMPILE

   fun buildPattern patterns
       =
       {
	   #  Compute the equivalence classes 
	   my { mapping=equiv, numclasses, ... } = Eqv::equivClasses patterns;

	   fun eqv c = a::sub (equiv, ord c);

	   #  Build the nfa 

           raise exception r::CANNOT_COMPILE;
       }
   
   fun build regexp
       =
       buildPattern [regexp]

   fun accepting (DFA { accept, ... } ) state
       =
       a::sub (accept, state)

   fun move (DFA { base, equiv, next, check, default, ... } ) (state, ch)
       =
       {   eqv = a::sub (equiv, ord ch);

	   fun delta (s, c)
	       =
	       {   offset = a::sub (base, s) + c

	           if   a::sub (check, offset) == s 
		   then
                        a::sub (next, offset)
		   else
                        {   s' = a::sub (default, s);

			    if s' == error   then NULL
                                             else delta (s', c);
			};
	       };

           delta (state, eqv);
       }
 
   fun canStart _
       =
       raise exception r::CANNOT_COMPILE

};
