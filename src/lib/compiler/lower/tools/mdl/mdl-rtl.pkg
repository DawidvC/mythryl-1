
# RTL definitions 

package mdl_constant {

     type const = Void
     fun to_string _ = ""
     fun valueOf _ = 0
     fun hash _ = 0w0
     fun ==== _ = FALSE
  }

package mdl_region   =
  pkg
     type region = Void
     stack = () and readonly = () and memory = () 
     fun to_string _ = ""
  end

package mdl_extension =
  pkg
     type sx( S,R,F,C ) = Void 
     type rx( S,R,F,C ) = Void 
     type fx( S,R,F,C ) = Void 
     type ccx( S,R,F,C ) = Void 
  end

package mdl_codetree   =
  codetree_g (package constant=mdl_constant
          package region=mdl_region
          package extension=mdl_extension)      


package MDLClientPseudoOps = 
  pkg 
     package AsmPseudoOps = 
     pkg
         package t = mdl_codetree
         package pb = pseudo_op_basis_type
         type pseudo_op( X ) = pb::pseudo_op( t::labexp, X ) 
         fun to_string _ = ""
         fun lexpToString _ = ""
         fun define_local_label _ = ""
         fun emitValue _ = () 
         fun sizeOf _ = 0 
      end
      type pseudo_op = Void
      fun to_string _ = ""
      fun emitValue _ = () 
      fun sizeOf _ = 0 
      fun adjustLabels _ = FALSE
   end

package mdl_pseudo_ops = 
     pseudo_op (package Client = MDLClientPseudoOps)

package mdl_stream  = instruction_stream (mdl_pseudo_ops)

package mdl_codetree_utilities
    = 
    codetree_utils_g (			# codetree_utils_g	is from   src/lib/compiler/lower/codetree/codetree-utils-g.pkg
              package t = mdl_codetree
              fun hashSext _ _ = 0w0
              fun hashRext _ _ = 0w0
              fun hashFext _ _ = 0w0
              fun hashCCext _ _ = 0w0
              fun eqSext _ _ = FALSE
              fun eqRext _ _ = FALSE
              fun eqFext _ _ = FALSE
              fun eqCCext _ _ = FALSE
              fun showSext _ _ = ""
              fun showRext _ _ = ""
              fun showFext _ _ = ""
              fun showCCext _ _ = ""
             )

package mdl_codetree_rewrite = 
  codetree_rewrite (package t = mdl_codetree
                fun sext _ x = x
                fun rext _ x = x
                fun fext _ x = x
                fun ccext _ x = x
               )

package mdl_codetree_fold = 
  codetree_fold (package t = mdl_codetree
             fun sext _ (_, x) = x
             fun rext _ (_, _, x) = x
             fun fext _ (_, _, x) = x
             fun ccext _ (_, _, x) = x
            )

package mdl_codetree_rtl = 
  codetree_rtl (package util    = mdl_codetree_utilities
            package rewrite = mdl_codetree_rewrite
            package fold    = mdl_codetree_fold
           )

package mdl_rtl_builder = rtl_build (mdl_codetree_rtl)


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
