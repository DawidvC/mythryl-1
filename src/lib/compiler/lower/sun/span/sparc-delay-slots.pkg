/*
 * This file was automatically generated by MDGen (v3.0)
 * from the machine description file "sparc/sparc.md".
 */


generic package sparc_delay_slots_g (package i:  SparcINSTR
                        package p:  Instruction_Properties
                           where I = I
                       ) : Delay_Slot_Properties =
pkg
   package i = I
   enum delay_slot = D_NONE | D_ERROR | D_ALWAYS | D_TAKEN | D_FALLTHRU 
   
   fun error msg = lowcode_error_message::error("sparc_delay_slots_g", msg)
   fun delaySlot { instruction, backward } = let
          fun delaySlot instruction = 
              (
               case instruction of
               i::Bicc { b, a, label, nop } => { nop=nop, n=a and 
               (
                case b of
                i::BA => FALSE
              | _ => TRUE
               ), nOn=D_NONE, nOff=D_ALWAYS }
             | i::FBfcc { b, a, label, nop } => { nop=nop, n=a, nOn=D_NONE, nOff=D_ALWAYS }
             | i::JMP { r, i, labs, nop } => { nop=nop, n=FALSE, nOn=D_NONE, nOff=D_ALWAYS }
             | i::JMPL { r, i, d, defs, uses, nop, mem } => { nop=nop, n=FALSE, nOn=D_NONE, nOff=D_ALWAYS }
             | i::CALL { defs, uses, label, nop, mem } => { nop=nop, n=FALSE, nOn=D_NONE, nOff=D_ALWAYS }
             | i::FCMP { cmp, r1, r2, nop } => { nop=nop, n=FALSE, nOn=D_NONE, nOff=D_ALWAYS }
             | i::RET { leaf, nop } => { nop=nop, n=FALSE, nOn=D_NONE, nOff=D_ALWAYS }
             | _ => { nop=TRUE, n=FALSE, nOn=D_ERROR, nOff=D_NONE }
              )
       in delaySlot instruction
       end

   fun enableDelaySlot _ = error "enableDelaySlot"
   fun conflict _ = error "conflict"
   fun delaySlotCandidate { jmp, delaySlot } = let
          fun delaySlotCandidate delaySlot = 
              (
               case delaySlot of
               i::Bicc { b, a, label, nop } => FALSE
             | i::FBfcc { b, a, label, nop } => FALSE
             | i::JMP { r, i, labs, nop } => FALSE
             | i::JMPL { r, i, d, defs, uses, nop, mem } => FALSE
             | i::CALL { defs, uses, label, nop, mem } => FALSE
             | i::Ticc { t, cc, r, i } => FALSE
             | i::FCMP { cmp, r1, r2, nop } => FALSE
             | i::RET { leaf, nop } => FALSE
             | _ => TRUE
              )
       in delaySlotCandidate delaySlot
       end

   fun setTarget _ = error "setTarget"
end

