## x86-leaf-opt.pkg



# Stolen from John Reppy's Moby compiler:
#
# Optimization of leaf procedures for the IA32.  We define a leaf procedure
# to be one that does not make calls and does not allocate any extra stack
# space (other than the usual linkage).  We optimize by removing the saved
# frame-pointer and rewriting instructions that use the frame-pointer to
# ones that use the stack pointer.
#
# Eventually, we may support tail calls from leaf procedures.



###                   "Even before string theory, especially as
###                    physics developed in the 20th century,
###                    it turned out that the equations that
###                    really work in describing nature with
###                    the most generality and the greatest simplicity
###                    are very elegant and subtle."
###
###                                    -- Edward Witten



generic package X86LeafOpt
   (package instruction_set_x86_g:  X86INSTR
    package FlowGraph:  FLOWGRAPH where I = instruction_set_x86_g
    my isLeaf:  FlowGraph::cluster -> Bool
   ) : CLUSTER_OPTIMIZATION = 
pkg

    package f = FlowGraph
    package i = instruction_set_x86_g
    package c = i::C

    type flowgraph = f::cluster

    name = "X86LeafOpt"

  #  is a register the frame pointer? 
    fun isFP reg = c::sameColor (reg, c::ebp)
  #  is a register the stack pointer? 
    fun isSP reg = c::sameColor (reg, c::esp)

    fun error msg = lowcode_error_message::error("X86LeafOpt", msg)

    fun err (blknum, msg) = error (cat [
	    "BLOCK ", int::to_string blknum, ": ", msg
	  ])

    fun optimize (f::CLUSTER cluster) = let
	  fun rewriteOpnd (operand as i::DISPLACE { base, disp, mem } ) =
		if (isFP base)
		  then (case disp
		     of i::Immed n =>
			  i::DISPLACE { base = c::esp, disp = i::Immed (n - 4), mem = mem }
		      | _ => error "unable to rewrite displacement operand"
		    )		# end case
		  else operand
	    | rewriteOpnd (operand as i::Indexed { base=THE r, index, scale, disp, mem } ) =
		if (isFP r)
		  then (case disp
		     of i::Immed n => i::Indexed {
			    base = THE c::esp, index = index, scale = scale,
			    disp = i::Immed (n - 4), mem = mem
			  }
		      | _ => error "unable to rewrite indexed operand"
		    )		# end case
		  else operand
	    | rewriteOpnd operand = operand
	  fun rewriteInstruction instruction = (case instruction
		 of i::JMP (operand, labs) => i::JMP (rewriteOpnd operand, labs)
		  | i::JCC { cond, operand } => i::JCC { cond = cond, operand = rewriteOpnd operand }
		  | i::CALL _ => error "unexpected call"
		  | i::MOVE { mvOp, src, dst } => i::MOVE {
			mvOp = mvOp,
			src = rewriteOpnd src,
			dst = rewriteOpnd dst
		      }
		  | i::LEA { r32, address } => i::LEA { r32 = r32, address = rewriteOpnd address }
		  | i::CMPL { lsrc, rsrc } =>
		      i::CMPL { lsrc = rewriteOpnd lsrc, rsrc = rewriteOpnd rsrc }
		  | i::CMPW { lsrc, rsrc } =>
		      i::CMPW { lsrc = rewriteOpnd lsrc, rsrc = rewriteOpnd rsrc }
		  | i::CMPB { lsrc, rsrc } =>
		      i::CMPB { lsrc = rewriteOpnd lsrc, rsrc = rewriteOpnd rsrc }
		  | i::TESTL { lsrc, rsrc } =>
		      i::TESTL { lsrc = rewriteOpnd lsrc, rsrc = rewriteOpnd rsrc }
		  | i::TESTW { lsrc, rsrc } =>
		      i::TESTW { lsrc = rewriteOpnd lsrc, rsrc = rewriteOpnd rsrc }
		  | i::TESTB { lsrc, rsrc } =>
		      i::TESTB { lsrc = rewriteOpnd lsrc, rsrc = rewriteOpnd rsrc }
		  | i::BITOP { bitOp, lsrc, rsrc } => i::BITOP {
			bitOp = bitOp,
			lsrc = rewriteOpnd lsrc,
			rsrc = rewriteOpnd rsrc
		      }
		  | i::BINARY { binOp, src, dst } => i::BINARY {
			binOp = binOp,
			src = rewriteOpnd src,
			dst = rewriteOpnd dst
		      }
		  | i::MULTDIV { multDivOp, src } => i::MULTDIV {
			multDivOp = multDivOp, src = rewriteOpnd src
		      }
		  | i::MUL3 { dst, src2, src1 } => i::MUL3 {
			dst = dst, src2 = src2, src1 = rewriteOpnd src1
		      }
		  | i::UNARY { unOp, operand } =>
		      i::UNARY { unOp = unOp, operand = rewriteOpnd operand }
		  | i::SET { cond, operand } => i::SET { cond = cond, operand = rewriteOpnd operand }
		  | i::CMOV { cond, src, dst } => i::CMOV {
			cond = cond, src = rewriteOpnd src, dst = dst
		      }
		  | i::PUSHL _ => error "unexpected pushl"
		  | i::PUSHW _ => error "unexpected pushw"
		  | i::PUSHB _ => error "unexpected pushb"
		  | i::POP _ => error "unexpected popl"
		  | i::COPY _ => error "unexpected copy"
		  | i::FCOPY _ => error "unexpected fcopy"
		  | i::FBINARY { binOp, src, dst } => i::FBINARY {
			binOp = binOp, src = rewriteOpnd src, dst = rewriteOpnd dst
		      }
		  | i::FIBINARY { binOp, src } => i::FIBINARY {
			binOp = binOp, src = rewriteOpnd src
		      }
		  | i::FUCOM operand => i::FUCOM (rewriteOpnd operand)
		  | i::FUCOMP operand => i::FUCOMP (rewriteOpnd operand)
		  | i::FSTPL operand => i::FSTPL (rewriteOpnd operand)
		  | i::FSTPS operand => i::FSTPS (rewriteOpnd operand)
		  | i::FSTPT operand => i::FSTPT (rewriteOpnd operand)
		  | i::FSTL operand => i::FSTL (rewriteOpnd operand)
		  | i::FSTS operand => i::FSTS (rewriteOpnd operand)
		  | i::FLDL operand => i::FLDL (rewriteOpnd operand)
		  | i::FLDS operand => i::FLDS (rewriteOpnd operand)
		  | i::FLDT operand => i::FLDT (rewriteOpnd operand)
		  | i::FILD operand => i::FILD (rewriteOpnd operand)
		  | i::FILDL operand => i::FILDL (rewriteOpnd operand)
		  | i::FILDLL operand => i::FILDLL (rewriteOpnd operand)
		  | i::FENV { fenvOp, operand } =>
		      i::FENV { fenvOp = fenvOp, operand = rewriteOpnd operand }
		  | i::NOTE { instruction, note } => i::NOTE { instruction = rewriteInstruction instruction, note }
		  | _ => instruction
		)		# end case
	  #  rewrite the instructions of a block 
	  fun rewriteBlock (f::BBLOCK { instructions, ... } )
              =
		instructions := list::map rewriteInstruction *instructions
	    | rewriteBlock _ = ()

	  # rewrite the exit protocol of an exit block 
	  fun rewriteExit (f::BBLOCK { blknum, instructions, ... }, _) = (
		case *instructions
		 of (ret as i::RET _) . i::LEAVE . rest =>
		      instructions := ret . rest
		  | (i::JMP _ . _) => ()  #  non-local control flow 
		  | _ => err (blknum, "unable to rewrite exit protocol")
		)		# end case
	  #  rewrite the entry protocol of an entry block 
	  fun rewriteEntry (f::BBLOCK { blknum, instructions, ... }, _) = let
		fun rewrite [
			i::BINARY { binOp=i::SUBL, src=i::ImmedLabel _, dst=i::DIRECT a },
			i::MOVE { mvOp=i::MOVL, src=i::DIRECT b, dst=i::DIRECT c },
			i::PUSHL (i::DIRECT d)
		      ] = if ((isSP a) and (isSP b)
			and (isFP c) and (isFP d))
			  then []
			  else err (blknum, "unable to rewrite entry protocol")
		  | rewrite (instruction . rest) = instruction . rewrite rest
		  | rewrite [] = err (blknum, "unable to rewrite entry protocol")
		in
		  instructions := rewrite(*instructions)
		end
	  in
	  #  first, we rewrite the exit and entry blocks 
	    case cluster.exit
	     of f::EXIT { prior, ... } => list::apply rewriteExit (*prior)
	    /* end case */;
	    case cluster.entry
	     of f::ENTRY { next, ... } => list::apply rewriteEntry (*next)
	    /* end case */;
	  #  then rewrite the instructions to use the %esp instead of %ebp 
	    list::apply rewriteBlock cluster.blocks
	  end

    fun run cluster = 
        (if isLeaf cluster then optimize cluster  cluster)

 end


## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
