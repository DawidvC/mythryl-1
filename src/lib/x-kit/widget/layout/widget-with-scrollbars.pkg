## widget-with-scrollbars.pkg
#
# Wrapper for putting scrollbars around a widget.
# 
# Compare with:
#     scrolled_widget, designed to be easier to use but less flexible:
#         src/lib/x-kit/widget/layout/scrolled-widget.pkg
#
# See also:
#     viewport, which provides a window onto a larger widget,
#     typically panned using scrollbars:
#         src/lib/x-kit/widget/layout/viewport.pkg

# Compiled by:
#     src/lib/x-kit/widget/xkit-widget.make6






###             "When you draw a nude, sketch the whole figure
###              and nicely fit the members to it and to each other.
###
###              Even though you may only finish one portion of the drawing,
###              just make certain that all the parts hang together,
###              so that the study will be useful to you in the future."
###
###                                    -- Leonardo da Vinci


stipulate
    include threadkit;								# threadkit			is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package low =  line_of_widgets;						# line_of_widgets		is from   src/lib/x-kit/widget/layout/line-of-widgets.pkg
    package w   =  widget;							# widget			is from   src/lib/x-kit/widget/basic/widget.pkg
herein

    package widget_with_scrollbars: (weak)  Widget_With_Scrollbars {		# Widget_With_Scrollbars	is from   src/lib/x-kit/widget/layout/widget-with-scrollbars.api

	Hsb_Desc =   {   scrollbar: w::Widget,   pad: Int,   top:  Bool   };
	Vsb_Desc =   {   scrollbar: w::Widget,   pad: Int,   left: Bool   };

	fun fix_glue pad
	    =
	    low::SPACER { min_size=>pad, ideal_size=>pad, max_size=>THE pad };


	fun make_widget_with_scrollbars  root_window  { scrolled_widget, horizontal_scrollbar=>NULL, vertical_scrollbar=>NULL }
		=>
		low::make_line_of_widgets root_window (low::WIDGET scrolled_widget);

	    make_widget_with_scrollbars  root_window  { scrolled_widget, horizontal_scrollbar=> THE (hdesc:  Hsb_Desc), vertical_scrollbar=>NULL }
		=>
		{   screen = w::screen_of root_window;

		    hdesc ->  { scrollbar, pad, top };

		    case (top, pad)   
			#
			(TRUE, 0) => low::make_line_of_widgets root_window 
			   (low::VT_CENTER [low::WIDGET scrollbar, low::WIDGET scrolled_widget]);

			(FALSE, 0) => low::make_line_of_widgets root_window
			   (low::VT_CENTER [low::WIDGET scrolled_widget, low::WIDGET scrollbar]);

			(TRUE, pad) => low::make_line_of_widgets root_window
			   (low::VT_CENTER [
			      low::WIDGET scrollbar,
			      fix_glue pad,
			      low::WIDGET scrolled_widget
			   ]);

			(FALSE, pad) => low::make_line_of_widgets root_window
			   (low::VT_CENTER [
			      low::WIDGET scrolled_widget,
			      fix_glue pad,
			      low::WIDGET scrollbar
			   ]);
		    esac;
		};

	    make_widget_with_scrollbars  root_window  { scrolled_widget, vertical_scrollbar => THE (vdesc:  Vsb_Desc), horizontal_scrollbar=>NULL }
		=>
		{   screen = w::screen_of  root_window;

		    vdesc ->  { scrollbar, left, pad };

		    case (left, pad)   
			#
			(TRUE,    0) => low::make_line_of_widgets  root_window 
					    (low::HZ_CENTER [low::WIDGET scrollbar, low::WIDGET scrolled_widget]);

			(FALSE,   0) => low::make_line_of_widgets  root_window
					    (low::HZ_CENTER [low::WIDGET scrolled_widget, low::WIDGET scrollbar]);

			(TRUE,  pad) => low::make_line_of_widgets  root_window
					    (low::HZ_CENTER [
					       low::WIDGET scrollbar,
					       fix_glue pad,
					       low::WIDGET scrolled_widget
					    ]);

			(FALSE, pad) => low::make_line_of_widgets  root_window
					    (low::HZ_CENTER [
					       low::WIDGET scrolled_widget,
					       fix_glue pad,
					       low::WIDGET scrollbar
					    ]);
		    esac;
		};

	    make_widget_with_scrollbars  root_window  { scrolled_widget, horizontal_scrollbar => THE hdesc, vertical_scrollbar => THE vdesc }
		=>
		{   screen =  w::screen_of  root_window;

		    hpad = hdesc.pad;	hsb  = hdesc.scrollbar;
		    vpad = vdesc.pad;	vsb  = vdesc.scrollbar;

		    my { col_preference, ... }
			=
			w::size_preference_of  vsb;

		    vsz = w::preferred_length  col_preference;


		    case (hdesc.top, vdesc.left)   
			#
			(TRUE, TRUE) => low::make_line_of_widgets  root_window 
					    (low::VT_CENTER [
					       low::HZ_CENTER [
						 fix_glue (vsz+vpad),
						 low::WIDGET hsb 
					       ],
					       fix_glue hpad,
					       low::HZ_CENTER [
						 low::WIDGET vsb, 
						 fix_glue vpad,
						 low::WIDGET scrolled_widget
					       ]
					    ]);

		       (FALSE, TRUE) => low::make_line_of_widgets  root_window 
					    (low::VT_CENTER [
					       low::HZ_CENTER [
						 low::WIDGET vsb, 
						 fix_glue vpad,
						 low::WIDGET scrolled_widget
					       ],
					       fix_glue hpad,
					       low::HZ_CENTER [
						 fix_glue (vsz+vpad),
						 low::WIDGET hsb 
					       ]
					    ]);

		       (TRUE, FALSE) => low::make_line_of_widgets  root_window 
					    (low::VT_CENTER [
					       low::HZ_CENTER [
						 low::WIDGET hsb,
						 fix_glue (vsz+vpad)
					       ],
					       fix_glue hpad,
					       low::HZ_CENTER [
						 low::WIDGET scrolled_widget,
						 fix_glue vpad,
						 low::WIDGET vsb
					       ]
					    ]);

		       (FALSE, FALSE) => low::make_line_of_widgets  root_window 
					     (low::VT_CENTER [
						low::HZ_CENTER [
						  low::WIDGET scrolled_widget,
						  fix_glue vpad,
						  low::WIDGET vsb
						],
						fix_glue hpad,
						low::HZ_CENTER [
						  low::WIDGET hsb,
						  fix_glue (vsz+vpad)
						]
					     ]);

		    esac;
		};
	end;				# fun make_widget_with_scrollbars

    };					# package widget_with_scrollbars

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1991 by AT&T Bell Laboratories  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
