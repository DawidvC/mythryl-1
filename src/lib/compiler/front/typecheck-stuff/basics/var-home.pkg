## var-home.pkg  -- Representing where a variable lives and how to access its value at runtime.

# Compiled by:
#     src/lib/compiler/front/typecheck-stuff/typecheckdata.make6



package var_home: (weak)  Var_Home {				# Var_Home		is from   src/lib/compiler/front/typecheck-stuff/basics/var-home.api

    stipulate

        package lv =  highcode_var;				# highcode_var		is from   src/lib/compiler/upper/highcode/highcode-var.pkg
	package em =  error_message;				# error_message		is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
	package ps =  picklehash;				# picklehash		is from   src/lib/compiler/front/basics/mlcomp/picklehash.pkg
	package s  =  symbol;					# symbol		is from   src/lib/compiler/front/basics/mlcomp/symbol.pkg

    herein 

	fun bug msg
            =
            em::impossible("Bugs in access: " + msg);


	Highcode_Variable
            =
            lv::Highcode_Variable;


	Picklehash
            =
            ps::Picklehash;


	# access: how to find a variable's value at runtime.
        #
	# A HIGHCODE_VARIABLE is just a lambda-bound variable --- a temporary
        # used to denote a naming in the current compilation unit.
        #
        # EXTERN refers to a naming defined externally (in other modules).
        #
        # PATH is an absolute address from some lambda-bound variable.
        # (i.e. we find the value of the lambda-bound variable, and then
        # do selects from that). PATH's are kept in reverse order.
        #
        # NO_ACCESS is used to denote built-in packages that do not
	# have corresponding linking chunks (e::g., the built-in 'inline' is a 
	# package that declares all the built-in primitives --- it is likely
	# that NO_ACCESS will go away in the future once we have cleaned up the
	# bootstrap procedure.

	Var_Home
	    = HIGHCODE_VARIABLE  Highcode_Variable
	    | EXTERN  Picklehash
	    | PATH  (Var_Home, Int)
	    | NO_VAR_HOME;



	# Constructor_Form: How to decide the data
        # representations for data constructors. 
        #
	# All true datatypes are divided into four categories, depending on the
	# pair of parameters (m, n) where m is the number of constant constructors
	# and n is the number of value carrying constructors.
        #
        # REF_REP, EXCEPTION, SUSP are special constructors for reference cells, exceptions,
        # and suspensions, respectively.  Treating them as data constructors
        # simplifies match compilation.
        #
	# LISTCONS and LISTNIL are special conreps for unrolled lists.
        #
        # The process of assigning conreps should probably
        # be performed on the intermediate language instead.   XXX BUGGO FIXME
	#
	Constructor_Form
	    = UNTAGGED				#  30 bit + 00; a pointer 
	    | TAGGED      Int			#  A pointer; 1st field is the tag 
	    | TRANSPARENT			#  32 bit value 
	    | CONSTANT    Int			#  int31 
	    | REF_REP
	    | EXCEPTION         Var_Home                   
	    | SUSP        Null_Or( (Var_Home, Var_Home) )
	    | LISTCONS                              
	    | LISTNIL;


	Constructor_Signature 
	    = CONSTRUCTOR_SIGNATURE  (Int, Int)
	    | NULLARY_CONSTRUCTOR;

	# ***************************************************************************
	#                    UTILITY FUNCTIONS ON VAR_HOME                            *
	# ***************************************************************************


	# Print an Var_Home value:

	fun print_var_home (HIGHCODE_VARIABLE i) =>  "HIGHCODE_VARIABLE(" + lv::to_string i + ")";
	    print_var_home (PATH (a, i))         =>  "PATH(" + int::to_string i + ", "+ print_var_home a + ")";
	    print_var_home (EXTERN pid)          =>  "EXTERN(" + ps::to_hex pid + ")";
	    print_var_home (NO_VAR_HOME)         =>  "NO_VAR_HOME";
        end;


	# Print a Constructor_Form value: 

	fun print_representation (UNTAGGED)    =>  "UT";
	    print_representation (TAGGED i)    =>  "TG(" + int::to_string i + ")";
	    print_representation (TRANSPARENT) =>  "TN";
	    print_representation (CONSTANT i)  =>  "CN(" + int::to_string i + ")";
	    print_representation (REF_REP)     =>  "RF";
	    print_representation (EXCEPTION acc)     =>  "EXCEPTION" + print_var_home acc;
	    print_representation (LISTCONS)    =>  "LC";
	    print_representation (LISTNIL)     =>  "LN";
	    print_representation (SUSP _)      =>  "SS";
        end;


	# Print a constructor api avlue:

	fun print_constructor_api (CONSTRUCTOR_SIGNATURE (i, j))
                =>
                "B" + int::to_string i + "U" + int::to_string j;

	    print_constructor_api (NULLARY_CONSTRUCTOR)
                =>
                "CNIL";
        end;


	# Testing whether a Constructor_Form is an exception:

	fun is_exception (EXCEPTION _)
                =>
                TRUE;

	    is_exception _
                =>
                FALSE;
        end;


	# Fetch a component out of a package var_home:

	fun select_var_home (NO_VAR_HOME, _)
                =>
                NO_VAR_HOME; #  Bug  "Selecting from a NO_VAR_HOME !" 

	    select_var_home (p, i)
                =>
                PATH (p, i);
        end;


	# Duplicating an var_home variable:

	fun duplicate_var_home (v, make_var)
            =
            HIGHCODE_VARIABLE (make_var (lv::highcode_variable_to_value_symbol (v)));


	fun named_var_home (s, make_var) =  HIGHCODE_VARIABLE (make_var (THE s));
	fun make_var_home (make_var)     =  HIGHCODE_VARIABLE (make_var (NULL));
	fun external_var_home pid        =  EXTERN pid;
	null_var_home                    =  NO_VAR_HOME;


	fun highcode_variable_or_null (HIGHCODE_VARIABLE v)
                =>
                THE v;

	    highcode_variable_or_null _
                =>
                NULL;
        end;


    end;			# stipulate

};				# package var_home


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 by AT&T Bell Laboratories 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
