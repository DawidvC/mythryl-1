## internet-socket.pkg

# Compiled by:
#     src/lib/std/src/Base-imp.make6


package internet_socket: (weak)  Internet_Socket {		# Internet_Socket	is from   src/lib/std/src/socket/internet-socket.api

    package socket= socket_guts::socket;			# socket_guts		is from   src/lib/std/src/socket/socket-guts.pkg

    fun socket_fn x
        =
        c_interface::c_function "Lib7-Sockets" x;

    Inet = INET;

    Socket( X ) = pre_socket::Socket( Inet, X ); 

    Stream_Socket( X ) = Socket( socket_guts::Stream( X ) );
    Datagram_Socket = Socket( socket_guts::Datagram );

    Socket_Address = pre_socket::Socket_Address( Inet );

    inet_af = null_or::the (socket_guts::af::from_string "INET");

    stipulate
	my to_inet_addr:   (pre_socket::Internet_Address, Int) -> pre_socket::Internet_Address = socket_fn "toInetAddr";
	my from_inet_addr:  pre_socket::Internet_Address -> (pre_socket::Internet_Address, Int) = socket_fn "fromInetAddr";
        my inet_any:   Int -> pre_socket::Internet_Address = socket_fn "inetany";
    herein
	fun to_address (ina, port)
            =
	    pre_socket::ADDRESS (to_inet_addr (dns_host_lookupinternal::un_internet_address ina, port));

	fun from_address (pre_socket::ADDRESS address)
            =
            {   my (a, port) = from_inet_addr address;

		(dns_host_lookupinternal::internet_address a, port);
	    };

	fun any port
            =
            pre_socket::ADDRESS (inet_any port);
    end;

											# generic_socket	is from   src/lib/std/src/socket/unix-generic-socket.pkg
    package udp {

	fun socket ()     = generic_socket::socket  (inet_af, socket::datagram       );
	fun socket' proto = generic_socket::socket' (inet_af, socket::datagram, proto);
    };

    package tcp {

	fun socket ()     = generic_socket::socket  (inet_af, socket::stream       );
	fun socket' proto = generic_socket::socket' (inet_af, socket::stream, proto);

        #  tcp control options 

	stipulate
	    my ctl_delay:  (Int, Null_Or(Bool)) -> Bool
		=
		socket_fn "ctlNODELAY";
	herein

	    fun get_nodelay (pre_socket::SOCKET { file_descriptor, ... } )
		=
		ctl_delay (file_descriptor, NULL);

	    fun set_nodelay (pre_socket::SOCKET { file_descriptor, ... }, flag)
		=
		ignore (ctl_delay (file_descriptor, THE flag));
	end; #  local 
    };
};


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
