## list-mergesort.pkg

# Compiled by:
#     src/lib/std/stdlib.make6

# List sorting routines using a smooth applicative merge sort
# Taken from, ML for the Working Programmer, LCPaulson. pg 99-100



###            "The middle way cannot be achieved
###             by dividing two extremes in half."
###
###                         -- Eric Maisel



package list_mergesort: (weak)  List_Sort {		# List_Sort	is from   src/lib/src/list-sort.api

    fun sort ((>) : (X, X) -> Bool) ls
        =
	case ls
	    [] => [];
	    _  => samsorting (ls, [], 0);
	esac
        where
            fun merge ([], ys) => ys;
	        merge (xs, []) => xs;

	        merge (x ! xs, y ! ys)
                    =>
		    if  (x > y)   y ! merge (x ! xs, ys);
                    else          x ! merge (xs, y ! ys);
                    fi;
            end;

	    fun merge_pairs (ls as [l], k)
                    =>
                    ls;

	        merge_pairs (l1 ! l2 ! ls, k)
                    =>
		    if (k % 2 == 1)   l1 ! l2 ! ls;
		    else              merge_pairs (merge (l1, l2) ! ls, k / 2);
                    fi;

	        merge_pairs _
                    =>
                    raise exception lib_base::IMPOSSIBLE "ListSort::sort";
            end;

	    fun next_run (run,[])      =>  (reverse run,[]);
	        next_run (run, x ! xs) =>  if (x > head run)  next_run (x ! run, xs);
				           else               (reverse run, x ! xs);
                                           fi;
            end;

	    fun samsorting ([], ls, k)
                    =>
                    head (merge_pairs (ls, 0));

	        samsorting (x ! xs, ls, k)
		    =>
		    {   my (run, tail) = next_run([x], xs);

		        samsorting (tail, merge_pairs (run ! ls, k+1), k+1);
		    };
            end;
        end;


    fun unique_sort cmpfn ls
        =
	case ls 
            [] => [];
            _  => samsorting (ls, [], 0);
        esac
        where

            include lib_base;

	    fun merge ([], ys) => ys;
		merge (xs,[]) => xs;

		merge (x ! xs, y ! ys)
		    =>
		    case (cmpfn (x, y))

			 GREATER =>  y ! merge (x ! xs, ys);
			 EQUAL   =>      merge (x ! xs, ys);
			 _       =>  x ! merge (xs, y ! ys);
		    esac;
	    end;

	    fun merge_pairs (ls as [l], k)
                    =>
                    ls;

		merge_pairs (l1 ! l2 ! ls, k)
		    =>
		    if (k % 2 == 1)  l1 ! l2 ! ls;
		    else             merge_pairs (merge (l1, l2) ! ls, k / 2);
                    fi;

		merge_pairs _
                    =>
                    raise exception lib_base::IMPOSSIBLE "ListSort::uniqueSort";
	    end;

	    fun next_run (run, [])
		    =>
		    (reverse run,[]);

		next_run (run, x ! xs)
		    => 
		    case (cmpfn (x, head run))

			 GREATER =>  next_run (x ! run, xs);
			 EQUAL   =>  next_run (run, xs);
			 _       =>  (reverse run, x ! xs);
		    esac;
	    end;

	    fun samsorting ([], ls, k)
		    =>
		    head (merge_pairs (ls, 0));

		samsorting (x ! xs, ls, k)
		    =>
		    {   my (run, tail) = next_run([x], xs);

			samsorting (tail, merge_pairs (run ! ls, k+1), k+1);
		    };
	    end;
        end;


    fun sorted (>)
        =
        s
        where
            fun s (x ! (rest as (y ! _)))
                    =>
                    not (x>y) and s rest;

                s l
                    =>
                    TRUE;
            end;
        end;

};			# list_mergesort 


## COPYRIGHT (c) 1993 by AT&T Bell Laboratories.  See COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
