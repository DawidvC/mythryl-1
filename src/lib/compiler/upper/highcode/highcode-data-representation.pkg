## highcode-data-representation.pkg 

# Compiled by:
#     src/lib/compiler/core.make6


###                    "God is real, unless declared integer."
###                                   -- J.Allan Toogood


package highcode_data_representation: Highcode_Data_Representation {		# Highcode_Data_Representation	is from   src/lib/compiler/upper/highcode/highcode-data-representation.api

    stipulate

	  fun bug s
              =
              error_message::impossible ("highcode_data_representation: " + s);

	  package ptn= primitive_type_constructor_numbers;	# primitive_type_constructor_numbers	is from   src/lib/compiler/front/typechecker/basics/primitive-type-constructor-numbers.pkg

    herein

	# The Highcode_Data_Representation enum defines the set of primitive type constructors.
	#
	# They probably don't have to be defined as a enum.
	# A dictionary-like thing would serve better.
	#
	# The intermediate language can be thought as a language parameterized
	# by the set of primitive type constructors and primitive functions --
	#  which can be represented by higher-order generics.
	#
	# By the way, DATAREP_GENERIC_MACHINE_WORD is an chunk we know nothing but that 
	# it is a pointer; or so-called canonical word representations; on a 
	# 32-bit machine, it can be a Pointer or a 31-bit integer; on 64-bit 
	# machines, it could be something else.
	#
	# In the future, we should also  add arrow_kind and tuple_kind,
	# or even array_kind, and vector_kind to denote various possible
	# representation types. (ZHONG)

	Highcode_Data_Representation						# Zhong Shao's thesis calls this "Lty", "LEXP type".
	  = DATAREP_INT31                         #  31-bit integer 
	  | DATAREP_INT32                         #  32-bit integer 
	  | DATAREP_FLOAT64                          #  64-bit real 
	  | DATAREP_STRING                        #  string type; always a pointer 
	  | DATAREP_EXCEPTION                           #  exception type 

	  | DATAREP_RW_VECTOR                         #  the polymorphic rw_vector Type 
	  | DATAREP_VECTOR                        #  the polymorphic vector Type 
	  | DATAREP_REF                           #  the polymorphic reference Type 
	  | DATAREP_LIST                          #  the polymorphic list Type 
	  | DATAREP_EXCEPTION_TAG                 #  the exception tag type 

	  | DATAREP_FATE                  #  the general-fate Type 
	  | DATAREP_CONTROL_FATE          #  the control-fate Type 
	  | DATAREP_FN				  #  the function Type 
	  | DATAREP_NULL_OR                       #  the option Type is optional 

	  | DATAREP_BOXED                         #  the boxed Type; used for wrapping 
	  | DATAREP_TAGGED_INT                    #  the tagged Type; with a integer 
	  | DATAREP_UNTAGGED_INT                  #  the untagged Type; no int tags 
	  | DATAREP_SINGLE_WORD                   #  the transparent Type; fit-in-1-word 

	  | DATAREP_DYNAMICALLY_TYPED             #  the dynamic type; with runtime type 
	  | DATAREP_GENERIC_MACHINE_WORD          #  generic machine word; supports GC 
	  | DATAREP_CHUNK
	  | DATAREP_C_FUN
	  | DATAREP_BYTE_RW_VECTOR
	  | DATAREP_FLOAT64_RW_VECTOR
	  | DATAREP_SLOCK

	  | DATAREP_INTEGER;

	# The primitive type constructor:
	# 
	Primitive_Type_Constructor = (Highcode_Data_Representation, Int, Int);

	# The set of primitive type constructors:
	# 
	prim_type_con_int31  = (DATAREP_INT31, 0, ptn::prim_type_num_int31);
	prim_type_con_int32  = (DATAREP_INT32, 0, ptn::prim_type_num_int32);
	prim_type_con_real   = (DATAREP_FLOAT64,  0, ptn::prim_type_num_real);
	prim_type_con_string = (DATAREP_STRING, 0, ptn::prim_type_num_string);
	prim_type_con_exn    = (DATAREP_EXCEPTION,   0, ptn::prim_type_num_exn);
	prim_type_con_void   = (DATAREP_GENERIC_MACHINE_WORD,  0, ptn::prim_type_num_void);
	prim_type_con_array  = (DATAREP_RW_VECTOR, 1, ptn::prim_type_num_array);
	prim_type_con_vector = (DATAREP_VECTOR, 1, ptn::prim_type_num_vector);
	prim_type_con_ref    = (DATAREP_REF,   1, ptn::prim_type_num_ref);
	prim_type_con_list   = (DATAREP_LIST,  1, ptn::prim_type_num_list);
	prim_type_con_exception_tag   = (DATAREP_EXCEPTION_TAG,  1, ptn::prim_type_num_etag);
	prim_type_con_fate   = (DATAREP_FATE,  1, ptn::prim_type_num_fate);
	prim_type_con_control_fate  = (DATAREP_CONTROL_FATE, 1, ptn::prim_type_num_control_fate);
	prim_type_con_arrow  = (DATAREP_FN, 2, ptn::prim_type_num_arrow);
	prim_type_con_option = (DATAREP_NULL_OR, 1, ptn::prim_type_num_option);
	prim_type_con_boxed  = (DATAREP_BOXED, 1, ptn::prim_type_num_boxed);
	prim_type_con_tgd    = (DATAREP_TAGGED_INT,   1, ptn::prim_type_num_tgd);
	prim_type_con_utgd   = (DATAREP_UNTAGGED_INT,  1, ptn::prim_type_num_utgd);
	prim_type_con_tnsp   = (DATAREP_SINGLE_WORD,  1, ptn::prim_type_num_tnsp);
	prim_type_con_dyn    = (DATAREP_DYNAMICALLY_TYPED,   1, ptn::prim_type_num_dyn);
	prim_type_con_chunk    = (DATAREP_CHUNK,   0, ptn::prim_type_num_chunk);
	prim_type_con_cfun   = (DATAREP_C_FUN,  0, ptn::prim_type_num_cfun);
	prim_type_con_barray = (DATAREP_BYTE_RW_VECTOR, 0, ptn::prim_type_num_barray);
	prim_type_con_rarray = (DATAREP_FLOAT64_RW_VECTOR, 0, ptn::prim_type_num_rarray);
	prim_type_con_slock  = (DATAREP_SLOCK, 0, ptn::prim_type_num_slock);
	prim_type_con_intinf = (DATAREP_INTEGER, 0, ptn::prim_type_num_intinf);


	# Get the arity of a particular primitive Type:
	#
	fun prim_type_con_arity(_, i, _)
            =
            i;

	# Each primitive type constructor is equipped with a key:
	#
	fun prim_type_con_to_int (_, _, k)
            =
            k;

	prim_type_con_from_int
            =
            {   ptlist = [ prim_type_con_int31,
			   prim_type_con_int32,
			   prim_type_con_real,
			   prim_type_con_string,
			   prim_type_con_exn,
			   prim_type_con_void,
			   prim_type_con_array,
			   prim_type_con_vector,
			   prim_type_con_ref,
			   prim_type_con_list,
			   prim_type_con_exception_tag,
			   prim_type_con_fate,
			   prim_type_con_control_fate,
			   prim_type_con_arrow,
			   prim_type_con_option,
			   prim_type_con_boxed,
			   prim_type_con_tgd,
			   prim_type_con_utgd,
			   prim_type_con_tnsp,
			   prim_type_con_dyn,
			   prim_type_con_chunk,
			   prim_type_con_cfun,
			   prim_type_con_barray,
			   prim_type_con_rarray,
			   prim_type_con_slock,
			   prim_type_con_intinf
			 ];

		fun gt ((_, _, n1), (_, _, n2))
                    =
                    n1 > n2;

		ptvec = vector::from_list (list_mergesort::sort gt ptlist);

		fn k =  vector::get (ptvec, k)
			except
                            (SUBSCRIPT | INDEX_OUT_OF_BOUNDS)
                                =
                                bug "unexpected integer in primTypeCon_fromInt";
	    };

	# Printing out the primitive type constructor: 
	#
	fun prim_type_con_print (pt, _, _)
            =
	    g pt
            where
	        fun g (DATAREP_INT31)  => "I";
		    g (DATAREP_INT32)  => "W";
		    g (DATAREP_FLOAT64)   => "F";
		    g (DATAREP_STRING) => "N";      
		    g (DATAREP_EXCEPTION)    => "X"; 
		    g (DATAREP_RW_VECTOR)  => "A";       
		    g (DATAREP_VECTOR) => "V";      
		    g (DATAREP_REF)    => "P";         
		    g (DATAREP_LIST)   => "L";        
		    g (DATAREP_EXCEPTION_TAG)   => "G";        
		    g (DATAREP_FATE)   => "D";       
		    g (DATAREP_CONTROL_FATE)  => "C";       
		    g (DATAREP_FN)  => "R";       
		    g (DATAREP_NULL_OR) => "O";
		    g (DATAREP_BOXED)  => "K";
		    g (DATAREP_TAGGED_INT)    => "T";
		    g (DATAREP_UNTAGGED_INT)   => "U";
		    g (DATAREP_SINGLE_WORD)   => "S";
		    g (DATAREP_DYNAMICALLY_TYPED)    => "Y";
		    g (DATAREP_GENERIC_MACHINE_WORD)   => "Z";
		    g (DATAREP_CHUNK)    => "OB";
		    g (DATAREP_C_FUN)   => "CF";
		    g (DATAREP_BYTE_RW_VECTOR) => "BA";
		    g (DATAREP_FLOAT64_RW_VECTOR) => "RA";
		    g (DATAREP_SLOCK)  => "SL";
		    g (DATAREP_INTEGER) => "II";
                end;
	    end;

	# Check the boxity of values of each prim Type
        #
	fun unboxed ((DATAREP_INT32 | DATAREP_FLOAT64), _, _) => TRUE;
	    unboxed _ => FALSE;
        end; 

	fun bxupd ((DATAREP_INT31 | DATAREP_INT32 | DATAREP_FLOAT64), _, _) => FALSE;
	    bxupd ((DATAREP_LIST | DATAREP_NULL_OR | DATAREP_GENERIC_MACHINE_WORD), _, _) => FALSE;
	    bxupd ((DATAREP_SINGLE_WORD | DATAREP_TAGGED_INT | DATAREP_UNTAGGED_INT | DATAREP_BOXED | DATAREP_DYNAMICALLY_TYPED), _, _) => FALSE;
	    bxupd _ => TRUE;
        end;

	fun ubxupd (DATAREP_INT31, _, _) => TRUE;
	    ubxupd _ => FALSE;
        end;

	fun isvoid ((DATAREP_INT31 | DATAREP_INT32 | DATAREP_FLOAT64 | DATAREP_STRING), _, _) => FALSE;
	    isvoid _ => TRUE;
        end;

    end;		#  toplevel stipulate
};			#  package highcode_data_representation 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Copyright 1996 - 1998 by YALE FLINT PROJECT 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
