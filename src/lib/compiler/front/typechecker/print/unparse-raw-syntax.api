## unparse-raw-syntax.api 
## Jing Cao and Lukasz Ziarek 

# Compiled by:
#     src/lib/compiler/front/typechecker/typecheck.make6



###        "C++ is history repeated as tragedy.
###         Java is history repeated as farce."
###
###                       -- Scott McKay



# We refer to a literal dump of the raw syntax tree as "prettyprinting".
# We refer to reconstruction of surface syntax from the raw syntax tree as "unparsing".
# Unparsing is good for end-user diagnostics; prettyprinting is good for compiler debugging.
# This is the api for our raw syntax unparser.
# The matching implementation is in      src/lib/compiler/front/typechecker/print/unparse-raw-syntax.pkg
# For our raw syntax prettyprinter, see  src/lib/compiler/front/typechecker/print/prettyprint-raw-syntax.api

api Unparse_Raw_Syntax {

    unparse_expression:  (symbol_table::Symbol_Table,
			      Null_Or( source_code_source::Input_Source ))
			    -> prettyprint::Stream
			    -> (raw_syntax::Raw_Expression, Int)
			    -> Void; 

    unparse_pattern:   (symbol_table::Symbol_Table,
			    Null_Or( source_code_source::Input_Source ))
			 -> prettyprint::Stream
			 -> (raw_syntax::Case_Pattern, Int)
			 -> Void;

    unparse_package_expression:  (symbol_table::Symbol_Table,
					Null_Or( source_code_source::Input_Source ))
				     -> prettyprint::Stream
				     -> (raw_syntax::Package_Expression, Int)
				     -> Void;

    unparse_generic_expression:  (symbol_table::Symbol_Table,
				      Null_Or( source_code_source::Input_Source ))
				   -> prettyprint::Stream
				   -> (raw_syntax::Generic_Expression, Int)
				   -> Void;

    unparse_where_spec:  (symbol_table::Symbol_Table,
			      Null_Or( source_code_source::Input_Source ))
			   -> prettyprint::Stream
			   -> (raw_syntax::Where_Spec, Int)
			   -> Void;

    unparse_api_expression:  (symbol_table::Symbol_Table,
					Null_Or( source_code_source::Input_Source ))
				     -> prettyprint::Stream
				     -> (raw_syntax::Api_Expression, Int)
				     -> Void;

    unparse_generic_api_expression:  (symbol_table::Symbol_Table,
					       Null_Or( source_code_source::Input_Source ))
					    -> prettyprint::Stream
					    -> (raw_syntax::Generic_Api_Expression, Int)
					    -> Void;

    unparse_specification:   (symbol_table::Symbol_Table,
				  Null_Or( source_code_source::Input_Source ))
			       -> prettyprint::Stream
			       -> (raw_syntax::Api_Element, Int)
			       -> Void; 

    unparse_declaration:   (symbol_table::Symbol_Table,
				Null_Or( source_code_source::Input_Source ))
			     -> prettyprint::Stream
			     -> (raw_syntax::Declaration, Int)
			     -> Void;

    unparse_named_value:   (symbol_table::Symbol_Table,
				 Null_Or( source_code_source::Input_Source )) 
			      -> prettyprint::Stream
			      -> (raw_syntax::Named_Value, Int)
			      -> Void;

    unparse_named_recursive_values:  (symbol_table::Symbol_Table,
					  Null_Or( source_code_source::Input_Source ))
				       -> prettyprint::Stream
				       -> (raw_syntax::Named_Recursive_Value, Int)
				       -> Void;



    unparse_named_sml_function

       : (symbol_table::Symbol_Table,
	 Null_Or( source_code_source::Input_Source ))
      -> prettyprint::Stream
      -> String
      -> (raw_syntax::Named_Function, Int)
      -> Void;



    unparse_pattern_clause

       : (symbol_table::Symbol_Table,
	 Null_Or( source_code_source::Input_Source ))
      -> prettyprint::Stream
      -> (raw_syntax::Pattern_Clause, Int)
      -> Void;



    unparse_named_lib7function

       : (symbol_table::Symbol_Table,
	 Null_Or( source_code_source::Input_Source ))
      -> prettyprint::Stream
      -> String
      -> (raw_syntax::Nada_Named_Function, Int)
      -> Void;



    unparse_lib7pattern_clause

       : (symbol_table::Symbol_Table,
	 Null_Or( source_code_source::Input_Source ))
      -> prettyprint::Stream
      -> (raw_syntax::Nada_Pattern_Clause, Int)
      -> Void;



    unparse_named_type:   (symbol_table::Symbol_Table,
				Null_Or( source_code_source::Input_Source ))
			     -> prettyprint::Stream
			     -> (raw_syntax::Named_Type, Int)
			     -> Void;

    unparse_named_datatype:   (symbol_table::Symbol_Table,
				    Null_Or( source_code_source::Input_Source ))
				 -> prettyprint::Stream
				 -> (raw_syntax::Named_Datatype, Int)
				 -> Void;  

    unparse_named_datatype_right_hand_side: (symbol_table::Symbol_Table,
						 Null_Or( source_code_source::Input_Source ))
					      -> prettyprint::Stream
					      -> (raw_syntax::Named_Datatype_Right_Hand_Side, Int)
					      -> Void;

    unparse_named_exception:   (symbol_table::Symbol_Table,
				     Null_Or( source_code_source::Input_Source ))
				  -> prettyprint::Stream
				  -> (raw_syntax::Named_Exception, Int)
				  -> Void;

    unparse_named_package:   (symbol_table::Symbol_Table,
				     Null_Or( source_code_source::Input_Source ))
				  -> prettyprint::Stream
				  -> (raw_syntax::Named_Package, Int)
				  -> Void;

    unparse_named_generic:   (symbol_table::Symbol_Table,
				   Null_Or( source_code_source::Input_Source ))
				-> prettyprint::Stream
				-> (raw_syntax::Named_Generic, Int)
				-> Void;

    unparse_type_variable:  (symbol_table::Symbol_Table,
				 Null_Or( source_code_source::Input_Source ))
			      -> prettyprint::Stream
			      -> (raw_syntax::Type_Variable, Int)
			      -> Void;

    unparse_type:   (symbol_table::Symbol_Table,
			 Null_Or( source_code_source::Input_Source ))
		      -> prettyprint::Stream
		      -> (raw_syntax::Any_Type, Int)
		      -> Void; 
};


## Copyright 2003 by University of Chicago 
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
