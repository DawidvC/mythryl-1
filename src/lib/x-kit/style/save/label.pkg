#  this is a test of the styles 

package l = Label
package w = widget
package a = standard_attributes
package av = attribute_value

fun get_string (attrDef, attribute) = (case (attrDef attribute)
       of (av::AV_Str s) => THE s
	| _ => NULL
      )		# end case

fun getFont (attrDef, attribute) = (case (attrDef attribute)
       of (av::AV_Font f) => THE f
	| _ => NULL
      )		# end case

fun getColor (attrDef, attribute) = (case (attrDef attribute)
       of (av::AV_Color c) => THE c
	| _ => NULL
      )		# end case


buttonAttrs = [
	(a::label,		av::AT_Str,	THE "hello world"),
	(a::font,		av::AT_Str,	NULL),
	(a::background,	av::AT_Color,	THE "bisque"),
	(a::foreground,	av::AT_Color,	THE "blueviolet")
      ];

fun myButton root (name, sty) = let
      attrDef = style::findAttrs sty (name, buttonAttrs)
      my (THE label) = get_string (attrDef, a::label)
      in
	l::mkLabel root {
	    label	= label,
	    font	= get_string (attrDef, a::font),
	    foreground	= getColor (attrDef, a::foreground),
	    background	= getColor (attrDef, a::background),
	    align	= w::HCenter
	  }
      end;

fun do_it resources = let
      fun example root = let
	    sty = style::styleFromStrings (widget::screenOf root, resources)
	    butName = style::mkView {
		    name = style::styleName ["button"],
		    aliases = [style::styleName ["Button"]]
		  }
            shell = shell::mkShell (
		    l::widgetOf (myButton root (butName, sty)),
	            NULL,
		    { window_name = THE "label", icon_name = THE "label"} )
            in
	      shell::init shell; ()
            end
      in
	run_xkit::run example
      end;

resources1 = [
	"button::background: lightgoldenrodyellow\n",
	"button::foreground: forestgreen\n"
      ];

resources2 = [
	"button::background: lightpink1\n",
	"button::foreground: mediumvioletred\n",
	"*label: help me!!!"
      ];

resources3 = [
	"button::background: lightpink1\n",
	"button::foreground: mediumvioletred\n",
	"*font: -*-rock-*-*-*-*-18-*-*-*-*-*-*-*\n"
      ];

