#  calc.pkg 

/* This file provides glue code for building the calculator using the
 * parser and lexer specified in calc.lex and calc.grammar.
*/

package Calc:  api
	           my parse:  Void -> Void
                 end
{

/* 
 * We apply the generics generated from calc.lex and calc.grammar to produce
 * the CalcParser package.
 */

  package CalcLrVals =
    CalcLrValsFun (package token = lr_parser::token)

  package CalcLex =
    CalcLexFun (package tokens = calc_lr_vals::tokens)

  package calc_parser =
    join_g (package lr_parser = lr_parser
	 package parser_data = CalcLrVals::parser_data
	 package Lex = CalcLex)

/* 
 * We need a function which given a lexer invokes the parser. The
 * function invoke does this.
 */

  fun invoke lexstream =
      let fun print_error (s, i: Int, _) =
	      file::write (file::stdout,
			    "Error, line " + (int::to_string i) + ", " + s + "\n")
       in CalcParser::parse (0, lexstream, print_error, ())
      end

/* 
 * Finally, we need a driver function that reads one or more expressions
 * from the standard input. The function parse, shown below, does
 * this. It runs the calculator on the standard input and terminates when
 * an end-of-file is encountered.
 */

  fun parse () = 
      let lexer = CalcParser::make_lexer (fn _ => file::read_line file::stdin)
	  dummy_eof = CalcLrVals::Tokens::EOF (0, 0)
	  dummy_semi = CalcLrVals::Tokens::SEMI (0, 0)
	  fun loop lexer =
	      let my (result, lexer) = invoke lexer
		  my (next_token, lexer) = CalcParser::Stream::get lexer
		  case result
			    of THE r =>
				file::write (file::stdout,
				       "result = " + (int::to_string r) + "\n")
			     | NULL => ()
	       in if CalcParser::sameToken (next_token, dummy_eof) then ()
		  else loop lexer
	      end
       in loop lexer
      end

} #  package Calc 
