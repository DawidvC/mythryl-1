# node-partition.pkg
#
# This implenments node partitions (i.e. a union-find data package)
# on nodes.
#
# -- Allen Leung

# Compiled by:
#     src/lib/graph/graphs.make6

api Node_Partition {

    Node_Partition( N );

    node_partition:  graph::Graph( N, E, G ) -> Node_Partition( N );
    !!   : Node_Partition( N ) -> graph::Node_Id -> graph::Node( N );
    ====   : Node_Partition( N ) -> (graph::Node_Id, graph::Node_Id) -> Bool;
    union:  Node_Partition( N ) -> ((graph::Node( N ), graph::Node( N )) ->
                                        graph::Node( N ) ) ->
                                        (graph::Node_Id, graph::Node_Id) -> Bool;
    union': Node_Partition( N ) -> (graph::Node_Id, graph::Node_Id) -> Bool;

};

package node_partition : Node_Partition		# Node_Partition	is from   src/lib/graph/node-partition.pkg
{

    package u=  union_find;			# union_find		is from   src/lib/src/union-find.pkg
    package h=  hash_table;			# hash_table		is from   src/lib/src/hash-table.pkg
    package g=  graph;				# graph			is from   src/lib/graph/graph.pkg

    Node_Partition( N )
        =
        h::Hash_Table (g::Node_Id, u::Union_Find( g::Node( N ) ) );

    fun node_partition (g::GRAPH ggg)
	=
	{   ppp =  h::make_table (unt::from_int, (==)) (ggg.order () * 2, g::NOT_FOUND);
	    ins =  h::set ppp;

	    ggg.forall_nodes
                (fn n as (i, _) =  ins (i, u::u_ref n));

	    ppp;
	};

    fun !! ppp x           =  u::(!!)   (h::lookup ppp x);
    fun ==== ppp (x, y)    =  u::equal   (h::lookup ppp x, h::lookup ppp y);
    fun union ppp f (x, y) =  u::unify f (h::lookup ppp x, h::lookup ppp y);
    fun union' ppp (x, y)  =  u::union   (h::lookup ppp x, h::lookup ppp y);
};

