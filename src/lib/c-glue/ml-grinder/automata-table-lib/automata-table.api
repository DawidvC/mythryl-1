
# This api describes modules that perform 
# compression and encoding of deterministic automata tables.

api AUTOMATA_TABLE =
api

   package DynArray :
   api

      type Rw_Vector( X )

      my get:       Rw_Vector( X ) * Int -> X
      my set:       Rw_Vector( X ) * Int * X -> Void
      my length:    Rw_Vector( X ) -> Int
      my rw_vector: Int * X -> Rw_Vector( X )
      my toList:    Rw_Vector( X ) -> List( X )
      my toArray:   Rw_Vector( X ) -> rw_vector::Rw_Vector( X )
      my toPacked:  Rw_Vector( Int ) * Int -> String 
      my setBound:  Rw_Vector( X ) * Int -> Void 
   end

   exception AutomataTable of String 
 
   type table
   type state = Int
   type Symbol = Int


   # Create a new table with only the error state.
   # You must declare the range of input symbols in the character set.

   my new:         { min: Symbol, max: Symbol } -> table

   #  The error state 
   my error:       state

   #  The character range 
   my charRange:   table -> { min: Symbol, max: Symbol }

   #  Number of states 
   my stateCount:  table -> Int
 
   #  Add a new state 
   my addState:    table -> state * List( Symbol * state ) -> Void 

   #  Finish the compression process 
   my compress:    table -> Void 

   #  Create a function that uses the transition table 
   my go:          table -> state * Symbol -> state 

   #  Extract the internal representation 
   my getrep:      table -> String -> DynArray::Rw_Vector( Int )
   my getarr:      table -> String -> rw_vector::Rw_Vector( Int )
   my getpacked:   table -> String -> String * Int 
   my getwidth:    table -> String -> Int 

end
