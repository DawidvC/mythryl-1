## ia32-svid.pkg

# Compiled by:
#     src/lib/compiler/lower/make7/ia32.make6




# C function calls for the IA32 using the System V ABI
#
# Register conventions:
#
#    %eax	return value		(caller save)
#    %ebx	global offset for PIC	(callee save)
#    %ecx	scratch			(caller save)
#    %edx	extra return/scratch	(caller save)
#    %ebp	optional frame pointer	(callee save)
#    %esp	stack pointer		(callee save)
#    %esi	locals			(callee save)
#    %edi	locals			(callee save)
#
#    %st (0)	top of FP stack; FP return value
#    %st (1..7)	FP stack; must be empty on entry and return
#
# Calling convention:
#
#    Return result:
#	+ Integer and pointer results are returned in %eax.  Small
#	  integer results are not promoted.
#	+ 64-bit integers (long long) returned in %eax/%edx
#	+ Floating point results are returned in %st (0) (all types).
#	+ Struct results are returned in space provided by the caller.
#	  The address of this space is passed to the callee as an
#	  implicit 0th argument, and on return %eax contains this
#	  address.  The called function is responsible for removing
#	  this argument from the stack using a "ret $4" instruction.
#	  NOTE: the MacOS X ABI returns small structs in %eax/%edx.
#
#    Function arguments:
#	+ Arguments are pushed on the stack right to left.
#	+ Integral and pointer arguments take one word on the stack.
#	+ float arguments take one word on the stack.
#	+ double arguments take two words on the stack.  The i386 ABI does
#	  not require double word alignment for these arguments.
#	+ long double arguments take three words on the stack.
#	+ struct arguments are padded out to word length.
#
# Questions:
#    - what about stack frame alignment?



###                "Walking has a very good effect in that
###                 you're in this state of relaxation,
###                 but at the same time you're allowing
###                 the sub-conscious to work on you."
###
###                              -- Andrew Wiles 



# We are invoked from:
#
#     src/lib/compiler/codegen/x86/x86-codegen-g.pkg

generic package ia32_svid_ccalls_g (

    package codetree:  Codetree;		# Codetree		is from   src/lib/compiler/lower/codetree/codetree.api

    ix:  x86instr_ext::Sext(			# x86instr_ext		is from   src/lib/compiler/lower/x86/instruction/x86instr-ext.pkg
           codetree::Statement,
           codetree::Int_Expression,
           codetree::Float_Expression,
           codetree::Bool_Expression
         )
         ->
         codetree::Sext;

    # Note that the fast_loating_point flag
    # must match the one passed to the code generator module.  XXX BUGGO FIXME this should be mechanically enforced.

    fast_floating_point:  Ref( Bool );

    frame_align:  Int;					# Alignment requirement for stack frames.
							# Should be a power of two that is at least four.

    return_small_structs_in_regs:  Bool;		#  Should small structs/unions be returned in %eax/%edx? 
)

: (weak) Ansi_C_Calls					# Ansi_C_Calls	is from   src/lib/compiler/lower/c-calls/c-calls.api

{
    package codetree = codetree;
    package t        = codetree;

    package ctypes = ctypes;
    package c      = x86cells;				# x86cells	is from   src/lib/compiler/lower/x86/instruction/x86-cells.pkg
    package ix     = x86instr_ext;			# x86instr_ext	is from   src/lib/compiler/lower/x86/instruction/x86instr-ext.pkg

    fun error msg
        =
        lowcode_error_message::error ("ia32_svid_ccalls_g", msg);

    Ckit_Arg 
      = ARG   t::Int_Expression	    
      | FARG  t::Float_Expression
      | ARGS  List( Ckit_Arg );

    mem   =   t::region::memory;
    stack =   t::region::stack;

    # lowcode types 
    #
    word_type = 32;
    flt_type  = 32;
    dbl_type  = 64;
    xdbl_type = 80;

    # shorts and chars are promoted to 32-bits 
    #
    natural_int_size = word_type;

    param_area_offset = 0; #  stack offset to parameter area 

    # This annotation is used to indicate
    # that a call returns a fp value  in %st (0) 
    #
    fp_return_value_in_st0
        =
        lowcode_notes::return_arg.create c::st0;

    sp  = c::esp;
    sp_r = t::REG (word_type, sp);

    fun fpr (size, f) = t::FLOAT_EXPRESSION (t::FREG (size, f));
    fun gpr (size, r) = t::INT_EXPRESSION (t::REG (size, r));
    eax = c::eax;
    st0 = c::st (0);

    # The C calling convention requires that
    # the FP stack be empty on function entry.
    # We add the fpStk list to the defs when
    # the fast_floating_point flag is set.
    #
    fp_stk =   list::tabulate (8, fn i =  fpr (xdbl_type, c::st i));

    # Note that the caller saves includes the result register (%eax) 

    caller_saves =   [gpr (word_type, eax), gpr (word_type, c::ecx), gpr (word_type, c::edx)];

    # C callee-save registers 
    #
    callee_save_regs  =   [c::ebx, c::esi, c::edi];	#  C callee-save registers 
    callee_save_fregs =   [];				#  C callee-save floating-point registers 

    # Align the address to the given alignment,
    # which must be a power of 2: 
    #
    fun align_addr (address, align)
        =
        {   mask =   unt::from_int (align - 1);
	  
	    unt::to_int_x (unt::bitwise_and (unt::from_int address + mask, unt::bitwise_not mask));
	};

    fun align4 address
        =
        unt::to_int_x (unt::bitwise_and (unt::from_int address + 0u3, unt::bitwise_not 0u3));

    # Size and natural alignment for integer types. 
    #
    fun size_of_int ctypes::I_CHAR      => { type =>  8, size => 1, align => 1 };
	size_of_int ctypes::I_SHORT     => { type => 16, size => 2, align => 2 };
	size_of_int ctypes::I_INT       => { type => 32, size => 4, align => 4 };
	size_of_int ctypes::I_LONG      => { type => 32, size => 4, align => 4 };
	size_of_int ctypes::I_LONG_LONG => { type => 64, size => 8, align => 4 };
    end;

    # Sizes of other C types 
    #
    size_of_ptr =   { type => 32, size => 4, align => 4 };

    # Compute the size and alignment information for a struct.
    # tys is the list of member types.
    # The total size is padded to agree with the struct's alignment.
    #
    fun size_of_struct tys
        =
	ssz (tys, 1, 0)
        where 

	    fun ssz ([], max_align, offset)
		    =>
		    { size => align_addr (offset, max_align), align => max_align };

	        ssz (type ! tys, max_align, offset)
		    =>
		    {   my { size, align } = size_of_type type;
			offset = align_addr (offset, align);

			ssz (tys, int::max (max_align, align), offset+size);
		    };
            end;
	end

    # The size alignment of a union type is the
    # maximum of the sizes and alignments of the
    # members.  The final size is padded to agree
    # with the alignment.
    #
    also
    fun size_of_union tys
        =
	usz (tys, 1, 0)
        where
	    fun usz ([], max_align, max_size)
		    =>
		    { size => align_addr (max_size, max_align), align => max_align };

		usz (type ! tys, max_align, max_size)
		    =>
		    {   my { size, align } = size_of_type type;

			usz (tys, int::max (max_align, align), int::max (size, max_size));
		    };
	    end;
	end

    also
    fun size_of_type  ctypes::C_VOID        =>   error "unexpected void argument type";
	size_of_type  ctypes::C_FLOAT       =>   { size =>  4, align => 4 };
	size_of_type  ctypes::C_DOUBLE      =>   { size =>  8, align => 4 };
	size_of_type  ctypes::C_LONG_DOUBLE =>   { size => 12, align => 4 };
	size_of_type  ctypes::C_PTR         =>   { size =>  4, align => 4 };

	size_of_type (ctypes::C_STRUCT tys) =>   size_of_struct tys;
	size_of_type (ctypes::C_UNION tys)  =>   size_of_union tys;

	size_of_type (ctypes::C_UNSIGNED isz)
	    =>
	    {
		my { size, align, ... } = size_of_int isz;

		{ size, align };
	    };

	size_of_type (ctypes::C_SIGNED isz)
            =>
            {   my { size, align, ... }
                    =
                    size_of_int isz;

	        { size, align };
	    };

	size_of_type (ctypes::C_ARRAY (type, n))
           =>
           {   my { size, align }
                   =
                   size_of_type type;

	       { size => n*size,  align };
	   };
    end;

    # The location of arguments/parameters;
    # offsets are given with respect to the
    # low end of the parameter area (see
    # param_area_offset above).
    #
    Arg_Location
      = REG   (t::Some_Type,  t::Reg, Null_Or( t::machine_int::Machine_Int ))		# Integer/pointer argument in register 
      | FREG  (t::Fty,        t::Reg, Null_Or( t::machine_int::Machine_Int ))		# Floating-point argument in register 
      | STK   (t::Some_Type,  t::machine_int::Machine_Int)				# Integer/pointer argument in parameter area 
      | FSTK  (t::Fty,        t::machine_int::Machine_Int)				# Floating-point argument in parameter area 
      | ARG_LOCS  List( Arg_Location );

    fun int_result i_type
        =
        case (.type (size_of_int i_type))
	  
	    64     =>   raise exception FAIL "register pair result";
	    type =>   (THE (REG (type, eax, NULL)), NULL, 0);
        esac;


    fun layout { calling_convention, return_type, parameter_types }
        =
        {   # Get the location of the result (resultLoc)
            # and the offset of the first parameter/argument.
            #
            # If the result is a struct or union,
	    # then we also compute the size and alignment
            # of the result type (structRetLoc):
	    #
	    my (result_loc, struct_ret_loc, arg_offset)
                =
                case return_type
		  
		    ctypes::C_VOID           => (NULL, NULL, 0);
		    ctypes::C_FLOAT          => (THE (FREG (flt_type, st0, NULL)), NULL, 0);
		    ctypes::C_DOUBLE         => (THE (FREG (dbl_type, st0, NULL)), NULL, 0);
		    ctypes::C_LONG_DOUBLE    => (THE (FREG (xdbl_type, st0, NULL)), NULL, 0);
		    ctypes::C_UNSIGNED i_type => int_result i_type;
		    ctypes::C_SIGNED i_type   => int_result i_type;
		    ctypes::C_PTR            => (THE (REG (word_type, eax, NULL)), NULL, 0);
		    ctypes::C_ARRAY _        => error "array return type";

		    ctypes::C_STRUCT tys
                        =>
                        {   my { size, align }
                                =
                                size_of_struct tys;

			    if   (size > 8  or  not return_small_structs_in_regs)

                                 (THE (REG (word_type, eax, NULL)), THE { szb=>size, align }, 4);
			    else
                                 raise exception FAIL "small struct return not implemented yet";
                            fi;
		       };

		    ctypes::C_UNION tys
                        =>
                        {   my { size, align }
                                =
                                size_of_union tys;

			    if   (size > 8  or  not return_small_structs_in_regs)

                                 (THE (REG (word_type, eax, NULL)), THE { szb=>size, align }, 4);
			    else
                                 raise exception FAIL "small union return not implemented yet";          # XXX BUGGO FIXME
                            fi;
		       };
                esac;

	    fun assign ([], offset, locs)
                    =>
                    (list::reverse locs, align4 offset);

	        assign (param_type ! parameters, offset, locs)
                    =>
                    {   fun next { type, align, size }
                            =
                            {   offset =   align_addr (offset, align);

				assign (parameters, offset+size, STK (type, integer::from_int offset) ! locs);
			    };

			fun next_flt (type, szb)
                            =
                            {   offset = align_addr (offset, 4);

				assign (parameters, offset+szb, FSTK (type, integer::from_int offset) ! locs);
			    };

			fun assign_mem { size, align }
                            =
                            f (size, offset, [])
                            where 

                                fun f (nb, offset, locs')
                                    =
				    if   (nb >= 4)
				        
                                         f (nb - 4, offset+4, STK (word_type, integer::from_int offset) ! locs');

				    elif (nb >= 2)
				        
                                         f (nb - 2, offset+2, STK (16, integer::from_int offset) ! locs');

				    elif (nb == 1)
				        
                                         f (nb, offset+1, STK (8, integer::from_int offset) ! locs');
				    else
                                         assign (parameters, align4 offset, ARG_LOCS (list::reverse locs') ! locs);
                                    fi;

				
			      end;

			  case param_type
			    
			      ctypes::C_VOID           => error "void argument type";
			      ctypes::C_FLOAT          => next_flt (flt_type, 4);
			      ctypes::C_DOUBLE         => next_flt (dbl_type, 8);
			      ctypes::C_LONG_DOUBLE    => next_flt (xdbl_type, 12);
			      ctypes::C_UNSIGNED i_type => next (size_of_int i_type);
			      ctypes::C_SIGNED i_type   => next (size_of_int i_type);
			      ctypes::C_PTR            => next size_of_ptr;
			      ctypes::C_ARRAY _        => next size_of_ptr;
			      ctypes::C_STRUCT tys     => assign_mem (size_of_struct tys);
			      ctypes::C_UNION tys      => assign_mem (size_of_union tys);
                          esac;

		    };
            end;	# fun assign

	    my (arg_locs, arg_size) =   assign (parameter_types, arg_offset, []);

	    arg_mem = { szb => align_addr (arg_size, frame_align), align => frame_align };

	    { arg_locs, arg_mem, result_loc, struct_ret_loc };

        };   # fun layout

    # List of registers defined by a C Call
    # with the given return type. This list
    # is the result registers plus the
    # caller-save registers:
    #
    fun defined_regs result_type
        =
        if *fast_floating_point

	     defs = caller_saves @ fp_stk;
	    
	     case  result_type
	       
	         (ctypes::C_UNSIGNED (ctypes::I_LONG_LONG)) =>   gpr (word_type, c::edx) ! defs;
		 (ctypes::C_SIGNED   (ctypes::I_LONG_LONG)) =>   gpr (word_type, c::edx) ! defs;
		 _                                          =>   defs;
             esac;
	else
            case result_type
	      
	       (ctypes::C_FLOAT)       =>   fpr (flt_type, st0) ! caller_saves;
	       (ctypes::C_DOUBLE)      =>   fpr (dbl_type, st0) ! caller_saves;
	       (ctypes::C_LONG_DOUBLE) =>   fpr (xdbl_type, st0) ! caller_saves;

	       (ctypes::C_UNSIGNED (ctypes::I_LONG_LONG)) =>   gpr (word_type, c::edx) ! caller_saves;
	       (ctypes::C_SIGNED   (ctypes::I_LONG_LONG)) =>   gpr (word_type, c::edx) ! caller_saves;

	       _ => caller_saves;
            esac;
	fi;

    fun fstp (32, f) => t::EXT (ix (ix::FSTPS (f)));
	fstp (64, f) => t::EXT (ix (ix::FSTPL (f)));
	fstp (80, f) => t::EXT (ix (ix::FSTPT (f)));
	fstp (size, f) => error ("fstp(" + int::to_string size + ", _)");
    end;

    fun gen_call { name, fn_prototype, param_alloc, struct_ret, save_restore_dedicated, call_comment, args }
        =
	{ callseq => call_seq,
          result  => result_regs
        }
        where 

            (layout  fn_prototype)
                ->
                { arg_locs, arg_mem, result_loc, struct_ret_loc };

	    # Instruction to allocate space for arguments 
	    #
	    arg_alloc
               =
               if (arg_mem.szb == 0    or  param_alloc arg_mem)
                    [];
	       else
                    [t::MOVE_INT (word_type, sp, t::SUB (word_type, sp_r, t::LITERAL (integer::from_int arg_mem.szb)))];
               fi;

	    # For functions that return a struct/union, pass the location as an
	    # implicit first argument.  Because the callee removes this implicit
	    # argument from the stack, we must also keep track of the size of the
	    # explicit arguments.
	    #
	    my (args, arg_locs, explicit_arg_size_b)
                =
                case struct_ret_loc
		  
		    THE pos =>   (ARG (struct_ret pos) ! args, STK (word_type, 0) ! arg_locs, arg_mem.szb - 4);
		    NULL    =>   (args, arg_locs, arg_mem.szb);
                esac;

	    # Generate instructions to copy arguments
            # into argument area using %esp to address
            # the argument area:
	    #
	    copy_args
                =
	        f (args, arg_locs, [])
                where
                
		    fun off_sp 0      =>   sp_r;
			off_sp offset =>   t::ADD (word_type, sp_r, t::LITERAL offset);
		    end;

		    fun f ([], [], statements)
                            =>
                            list::reverse statements;

		        f (arg ! args, loc ! locs, statements)
                            =>
			    f (args, locs, statements)
                            where 

				statements = case (arg, loc)
				         
				           (ARG (int_expression as t::REG _), STK (mty, offset))
                                               =>
					       t::STORE (mty, off_sp offset, int_expression, stack)
					       !
                                               statements;

					   (ARG int_expression, STK (mty, offset))
                                               =>
                                               {
					           tmp = c::new_reg();

					           t::STORE (word_type, off_sp offset, t::REG (word_type, tmp), stack)
						   ! t::MOVE_INT (word_type, tmp, int_expression)
						   ! statements;
					       };

					   (ARG int_expression, ARG_LOCS mem_locs)
                                               =>
					       copy (mem_locs, load_addr @ statements)
                                               where 

						   # addr_r is used to address the source of the memory chunk
						   # being passed to the memLocs.  loadAddr is the code to
						   # initialize addr_r.

						   my (load_addr, addr_r)
                                                       =
                                                       case int_expression

							   t::REG _
                                                               =>
                                                               ([], int_expression);

							    _  =>
                                                               {   r = c::new_reg();

								   ([t::MOVE_INT (word_type, r, int_expression)], t::REG (word_type, r));
							       };
                                                       esac;


						   fun address 0 => addr_r;
						       address offset => t::ADD (word_type, addr_r, t::LITERAL offset);
                                                   end;

						   base_offset		#  stack offset of first destination word 
                                                       =
                                                       case mem_locs
						         
							   STK (type, offset) ! _ =>   offset;
							    _                       =>   error "bogus Args";
                                                       esac;

						   fun copy ([], statements) => statements;

						       copy (STK (type, offset) ! locs, statements)
                                                           =>
                                                           {   tmp = c::new_reg();

							       statements =
								     t::STORE (type, off_sp offset, t::REG (type, tmp), stack)
								       ! t::MOVE_INT (type, tmp, t::LOAD (type, address (offset - base_offset), mem))
								       ! statements;

							       copy (locs, statements);
							  };

						       copy _ =>   error "bogus memory location";
                                                   end;

					       end;

					   (FARG (float_expression as t::FREG _), FSTK (type, offset))
                                               =>
					       t::FSTORE (type, off_sp offset, float_expression, stack) ! statements;

					   (FARG float_expression, FSTK (type, offset))
                                               =>
                                               {   tmp = c::new_freg();

					           t::FSTORE (type, off_sp offset, t::FREG (type, tmp), stack)
						    ! t::MOVE_FLOAT (type, tmp, float_expression)
						    ! statements;
					       };

					   (ARGS _, _) => raise exception FAIL "ARGS obsolete";

					   _ => error "impossible location";
                                      esac;


			    end;

		          f _ => error "argument arity error";
                      end;

		  end;		# where

	    # The SVID specifies that the caller pops arguments, but the callee
	    # pops the arguments in a stdcall on Windows.  I'm not sure what other
	    # differences there might be between the SVID and Windows ABIs. (John H Reppy)
	    #
	    callee_pops
                =
                case fn_prototype.calling_convention
		  
		     ("" | "unix_convention") =>   FALSE;
		     "stdcall"                =>   TRUE;

		     calling_convention
                         =>
                         error (cat [
			  "unknown calling convention \"", string::to_string calling_convention, "\""
			]);
                esac;

	    defs = defined_regs  fn_prototype.return_type;

	    my { save, restore }
                =
                save_restore_dedicated defs;

	    call_statement
                =
                t::CALL {
		    funct=>name, targets => [], defs, uses => [], 
		    region => mem,
		    pops => callee_pops
			     ?? int32::from_int arg_mem.szb
			     :: int32::from_int (arg_mem.szb - explicit_arg_size_b)
		};

	    call_statement
                =
                case call_comment
		  
                     NULL  =>  call_statement;
		     THE c =>  t::NOTE (call_statement, lowcode_notes::comment.create c);
                esac;


	    # If return type is floating point then add an annotation RETURN_ARG 
	    # This is currently a hack.  Eventually Codetree *should* support
	    # return arguments for CALLs.           XXX BUGGO FIXME
	    # --- Allen Leung
	    #
	    call_statement
                =
                if (*fast_floating_point
		and ((fn_prototype.return_type == ctypes::C_FLOAT)
		  or (fn_prototype.return_type == ctypes::C_DOUBLE)
		  or (fn_prototype.return_type == ctypes::C_LONG_DOUBLE))
                ) 
		     t::NOTE (call_statement, fp_return_value_in_st0);
		else call_statement;fi;

	    #  Code to pop the arguments from the stack 
	    #
	    pop_args
                =
                (callee_pops or (explicit_arg_size_b == 0))
		 ?? []
		 :: [t::MOVE_INT (word_type, sp, t::ADD (word_type, sp_r, t::LITERAL (integer::from_int explicit_arg_size_b)))];

	    #  Code to copy the result into fresh pseudo registers 
	    my (result_regs, copy_result)
               =
               case result_loc
	         
		   NULL =>   ([], []);

		   THE (REG (type, r, _))
                       =>
                       {   result_reg = c::new_reg();

			   ([t::INT_EXPRESSION (t::REG (type, result_reg))], [t::COPY_INTS (type, [result_reg], [r])]);
		       };

		   THE (FREG (type, r, _))
                       =>
                       {   result_reg =   c::new_freg();
			   result    =   [t::FLOAT_EXPRESSION (t::FREG (type, result_reg))];

			   # If we are using fast floating point mode then do NOT 
			   # generate FSTP.
			   # --- Allen Leung 
			   #
			   *fast_floating_point
			     ?? (result, [t::COPY_FLOATS (type, [result_reg], [r])])
			     :: (result, [fstp (type, t::FREG (type, result_reg))]);
			};
		     _ => error "bogus result location";
               esac;


	    # Assemble the call sequence 
	    #
	    call_seq
                =
                arg_alloc @ copy_args @ save @ [call_statement] @ restore @ pop_args @ copy_result;


	  end;

};



## COPYRIGHT (c) 2000 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
