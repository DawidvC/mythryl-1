/*
 * This module performs static branch prediction using heuristics
 * similar to Ball and Larus'
 *
 * -- Allen Leung
 */

generic package StaticBranchPrediction
   (package ir:         LOWCODE_IR
    package instruction_properties:  Instruction_Properties
    package frequency_properties:    Frequency_Properties
       sharing ir::I = frequency_properties::I = instruction_properties::I
    my loopMultiplier:  Int
   ) : LOWCODE_IR_OPTIMIZATION
{

   package ir   = IR
   package control_flow_graph  = ir::control_flow_graph
   package comp_freq = ComputeFrequencies (package loop = ir::Loop
                                           package freq = control_flow_graph::W)

   type flowgraph = ir::IR

   name = "StaticBranchPrediction"
   fun run IR =
   let fun branchProb (control_flow_graph::BLOCK { instructions, ... } ) = 
           case *instructions of
             [] => 100 #  the fallsthru edge is always taken 
           | jmp . _ => 
              (case instruction_properties::instrKind jmp of 
                 instruction_properties::IK_JUMP => frequency_properties::branchProb jmp
               | _ => 100 #  the fallsthru edge is always taken 
              )
                  

       fun nodeFreq (control_flow_graph::BLOCK { freq, ... } ) = freq
       fun edgeFreq (control_flow_graph::EDGE { w, ... } ) = w

       #  is this a conditional branch and is it in the taken direction? 
       fun isTakenBranch(_, _, control_flow_graph::EDGE { k=control_flow_graph::BRANCH b, ... } ) = b
         | isTakenBranch _ = FALSE

   in  comp_freq::compute_frequencies
       { cfg            = IR,
         loop           = ir::loop IR,
         loopMultiplier = loopMultiplier,
         nodeFreq       = nodeFreq,
         edgeFreq       = edgeFreq,
         branchProb     = branchProb,
         isTakenBranch  = isTakenBranch
       };
       IR
   end

}
