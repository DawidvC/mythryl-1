## arg-passing-g.pkg --- parameter passing convention for standard	and known functions.

# Compiled by:
#     src/lib/compiler/core.make6


###               "Thomas Godfrey, a self-taught mathematician,
###                great in his way . . .  knew little out of
###                his way, and was not a pleasing companion;
###                as, like most great mathematicians I have met with,
###                he expected universal precision in everything said,
###                or was forever denying or distinguishing upon trifles,
###                to the disturbance of all conversation."
###
###                        -- Benjamin Franklin (1706-1790), Autobiography

# We are invoked from:
#
#     src/lib/compiler/codegen/main/translate-fate-passing-style-to-binary-g.pkg

								# Machine_Properties	is from   src/lib/compiler/codegen/main/machine-properties.api
generic package arg_passing_g (

    package c:  Cpsregs;					# Cpsregs		is from   src/lib/compiler/codegen/compile-fps/fps-registers.api
    package ms:  Machine_Properties;				# Typically 			  src/lib/compiler/codegen/x86/x86-machine-properties.pkg
)

: (weak) Arg_Passing						# Arg_Passing		is from   src/lib/compiler/codegen/compile-fps/arg-passing.api

{

    package codetree: (weak)  Codetree				# Codetree		is from   src/lib/compiler/lower/codetree/codetree.api
	=
        c::codetree;

    fun error msg
	=
	error_message::impossible ("ArgPassing." + msg);

    k = ms::num_callee_saves;
    kf = ms::num_float_callee_saves;

    package t = codetree;

    fun stdlink use_virtual_frame_pointer =    t::INT_EXPRESSION (c::stdlink  use_virtual_frame_pointer);
    fun stdclos use_virtual_frame_pointer =    t::INT_EXPRESSION (c::stdclos  use_virtual_frame_pointer);
    fun stdarg  use_virtual_frame_pointer =    t::INT_EXPRESSION (c::stdarg   use_virtual_frame_pointer);
    fun stdcont use_virtual_frame_pointer =    t::INT_EXPRESSION (c::stdcont  use_virtual_frame_pointer);

    fun gpregs  use_virtual_frame_pointer
	= 
	stdlink

	    use_virtual_frame_pointer ! stdclos
	    use_virtual_frame_pointer ! stdarg
	    use_virtual_frame_pointer ! stdcont
	    use_virtual_frame_pointer ! map
	    t::INT_EXPRESSION c::miscregs;

    fpregs
       =
       map t::FLOAT_EXPRESSION (c::savedfpregs @ c::floatregs);

    fun fromto (i, j, regs)
	=
	{   fun from (0, acc    ) =>   acc;
	        from (n, x ! xs) =>   from (n - 1, xs);
	        from (n, []    ) =>   error "fromto";
            end;

	    fun to (k, []    ) =>   [];
	        to (k, r ! rs) =>   if (k > j   ) [];
					      else r ! to (k+1, rs);fi;
            end;

	    to (i, from (i, regs));
	};

    fun gprfromto (i, j, use_virtual_frame_pointer) =   fromto (i, j, gpregs  use_virtual_frame_pointer);
    fun fprfromto (i, j, use_virtual_frame_pointer) =   fromto (i, j, fpregs);

    fun calleesaveregs  use_virtual_frame_pointer
	=
	gprfromto (4, k+3, use_virtual_frame_pointer) @ fprfromto (0, kf - 1, use_virtual_frame_pointer);

    fun cut_head (n, l)
	= 
	if   (n == 0)

	     l;
	else
	     case l

		 a ! r =>   cut_head (n - 1, r);
		 _     =>   error "codegen cuthead 444";
	     esac;
	fi;

    fun is_flt fate_passing_style::FLTT =>   TRUE;
	is_flt _                                =>   FALSE;
    end;

    fun scan (t ! z, gp, fp)
	    =>
	    if   (is_flt t)
		 (head fp) ! (scan (z, gp, tail fp)); 
	    else (head gp) ! (scan (z, tail gp, fp));  fi;

	scan ([], _, _)
	    =>
	    [];
    end;

    fun standard_escape (use_virtual_frame_pointer, args)
	=
	{   rest =   cut_head (k+kf+3, args);
	    len  =   length (args);
	    gpr  =   stdarg use_virtual_frame_pointer ! gprfromto (k+4, len, use_virtual_frame_pointer);
	    fpr  =   fprfromto (kf, len, use_virtual_frame_pointer);

	    stdlink
		use_virtual_frame_pointer ! stdclos
		use_virtual_frame_pointer ! stdcont
		use_virtual_frame_pointer ! calleesaveregs use_virtual_frame_pointer   @   scan (rest, gpr, fpr);
	};

    fun standard_cont (use_virtual_frame_pointer, args)
	=
	{   rest =   if (k > 0 ) cut_head (k+kf+1, args); else cut_head (2, args);fi;
	    len  =   length (args);
	    gpr  =   stdarg  use_virtual_frame_pointer ! gprfromto (k+4, 1+len, use_virtual_frame_pointer);
	    fpr  =   fprfromto (kf, len, use_virtual_frame_pointer);

	    if (k > 0)  stdcont  use_virtual_frame_pointer ! (calleesaveregs  use_virtual_frame_pointer @ scan (rest, gpr, fpr));
	    else        stdlink  use_virtual_frame_pointer ! stdcont  use_virtual_frame_pointer         ! scan (rest, gpr, fpr);
	    fi;
	};

    fun standard { use_virtual_frame_pointer, arg_tys, fn_type => fate_passing_style::CNTT }
	    =>
	    standard_cont   (use_virtual_frame_pointer, arg_tys);

	standard { use_virtual_frame_pointer, arg_tys, ...                 }
	    =>
	    standard_escape (use_virtual_frame_pointer, arg_tys);
    end;

    # Use an arbitary but fixed set of registers.
    #
    fun fixed { use_virtual_frame_pointer, arg_tys }
	=
	iter (arg_tys, gpregs use_virtual_frame_pointer, fpregs)
	where 

	    fun iter (fate_passing_style::FLTT ! rest, regs, f ! fregs)
		    =>
		    f ! iter (rest, regs, fregs);

		iter (_ ! rest, r ! regs, fregs)
		     =>
		     r ! iter (rest, regs, fregs);

		iter ([], _, _)
		    =>
		    [];

		iter _
		    =>
		    error "fixed: out of registers";
	    end;
	end;
};



## COPYRIGHT (c) 1996 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010,
## released under Gnu Public Licence version 3.
