# A tool for running "make" from make7.
#
#   (C) 2000 Lucent Technologies, Bell Laboratories
#
# Author: Matthias Blume (blume@kurims.kyoto-u.ac.jp)

# Compiled by:
#     src/app/make7/tools/make/make-tool.make6

package make_tool {

    stipulate

	include tools;
						# make7_defaults	is from   src/app/make7/util/make7-defaults.pkg

	package c =  make7_defaults::make_tool;

	tool = "Make-Command";	#  the name of this tool 
	ilk = "make";		#  the name of the ilk 
	kw_ilk = "ilk";
	kw_options = "options";

	fun err m
            =
            raise exception TOOL_ERROR { tool, msg => m };

	fun rule { spec, context, native2pathmaker, default_ilk_of, sysinfo }
            =
            {   spec ->  { name => str, make_path, opts => too, ... } : Spec;

		my (tilk, topts, mopts)
                    =
		    case too
		      
		         NULL
                             =>
                             (NULL, NULL, []);

		         THE options
			     =>
			     {   my { matches, remaining_options }
				     =
				     parse_options
					 {   tool,
					     keywords => [kw_ilk, kw_options],
					     options
					 };

				 (   case (matches kw_ilk)
				       
				          THE [STRING { name, ... } ]
                                               =>
                                               THE name;

					  NULL => NULL;
					  _    => err "invalid ilk specification";
                                     esac,

                                     matches kw_options,
                                     remaining_options
				 );
			     };
                    esac;

		p = srcpath (make_path ());

		tname = native_spec p;	#  for passing to "make" 

		partial_expansion
                    =
		    # The "make" ilk is odd in that it has only a target
		    # but no sources.  We use "str" and "make_path", that is,
		    # we retain the distinction between native and standard
		    # paths instead of going native in all cases.

		    ( { source_files => [], make7_files => [], sources => [] },
		     [{ name => str, make_path,
			ilk => tilk, opts => topts, derived => TRUE } ]);

		fun runcmd ()
                    =
                    {   cmdname
                            =
                            resolve_command_path (c::command.get ());

			o7file_directory
                            =
                            "";

			tname
                            =
			    if   (winix::path::is_absolute tname)
                                
				 winix::path::make_relative
				    { path        =>  tname,
				      relative_to =>  winix::file::current_directory ()
                                    };
			    else
                                 tname;
                            fi;

			cmd = cat (cmdname ! fold_right (fn (x, l) =  " " ! x ! l)
							   [o7file_directory, " ", tname] mopts);
		    
			vsay ["[", cmd, "]\n"];

			if   (winix::process::system cmd  !=  winix::process::success)
                             
			     err cmd;
                        fi;
		    };

		fun rulefn ()
                    =
                    {   runcmd ();
                        partial_expansion;
                    };
	    
		context rulefn;
	    };
    herein
        my _ = note_ilk (ilk, rule);

	package control = c;
    end;
};


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
